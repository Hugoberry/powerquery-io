{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Zwraca strukturalną reprezentację bazy danych programu Access.",
        "Documentation.LongDescription": "Zwraca reprezentację strukturalną bazy danych programu Access: <code>database</code>. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Zwraca bazy danych usług Analysis Services na konkretnym hoście.",
        "Documentation.LongDescription": "Zwraca bazy danych z wystąpienia usług Analysis Services <code>server</code>. Można podać opcjonalny parametr rekordu <code>options</code> w celu określenia dodatkowych właściwości. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Wartość logiczna wskazująca, czy typy określone w modelu wielowymiarowym lub tabelarycznym będą używane dla typ&#243;w dodanych kolumn miary. Ustawienie wartości false spowoduje użycie typu „number” dla wszystkich kolumn miary. Wartość domyślna tej opcji to false.</li>\r\n<li><code>Culture</code> : Nazwa kultury określająca kulturę dla danych. Odpowiada właściwości parametr&#243;w połączenia „Identyfikator ustawień regionalnych”.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>SubQueries</code> : Liczba (0, 1 lub 2) określająca wartość właściwości „SubQueries” w parametrach połączenia. Ta wartość steruje zachowaniem obliczeniowych element&#243;w członkowskich w podwyborach i modułach podrzędnych. Wartość domyślna to 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Moduły AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Zaimportuj dane modułu z usługi AtScale lub zastosuj dla nich tryb DirectQuery.",
        "Documentation.LongDescription": "\r\nZwraca dane modułu z usługi AtScale na serwerze <code>server</code>. Można podać opcjonalny parametr rekordu, <code>options</code>, aby sterować następującymi opcjami:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: wartość logiczna wskazująca, czy typy określone w modelu wielowymiarowym lub tabelarycznym będą używane jako typy dodanych kolumn miar. W przypadku ustawienia wartości false wszystkie kolumny miar będą miały typ „number”. Wartość domyślna tej opcji to false.</li>\r\n        <li><code>CommandTimeout</code>: czas trwania (w sekundach) określający, jak długo zapytanie po stronie serwera może być uruchomione, zanim zostanie anulowane. Wartość domyślna zależy od sterownika. </li>\r\n        <li><code>ConnectionTimeout</code>: czas trwania (w sekundach) określający, jak długo czekać przed porzuceniem próby nawiązania połączenia z serwerem. Wartość domyślna zależy od sterownika. </li>\r\n\r\n</ul>\r\nParametr rekordu jest określany w formacie [opcja1 = wartość1, opcja2 = wartość2...].",
        "Documentation.Examples": {
          "Description": "Wyświetl listę danych w module AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje dane z usługi Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje dane z Twojego wystąpienia usługi Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z informacjami o zdarzeniach StormEvents",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabela ze zdarzeniami Storm Events z bazy danych „Samples” w klastrze „help”"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL usługi analiz Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Zwraca zawartość pobraną jako wartość binarną przy użyciu adresu URL usługi analiz Azure DevOps. Funkcja ta korzysta z różnych poświadczeń dla różnych organizacji."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Źródło danych usługi Azure DevOps Services",
        "Documentation.DisplayName": "Źródło danych usługi Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Zwraca tabelę źródeł danych OData udostępnianych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Wprowadź adres URL punktu końcowego interfejsu API REST usługi Azure Enterprise skojarzonego z Twoją rejestracją",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Zwraca listę dostępnych raportów i miesięcy z interfejsu API usługi Azure Enterprise",
        "Documentation.Name": "Importuj dane z usługi Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Użycie funkcji AzureEnterprise.Tables i przejście do konkretnej wartości w celu uzyskania wyników.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Sprawdź stronę https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli w celu uzyskania próbek zapytań początkowych.",
        "Documentation.Examples": [
          {
            "Description": "Zwróć tabelę z wynikami zapytania użytkownika „resources”",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Wyświetl tabele w wystąpieniu usługi Azure Spark.",
        "Documentation.LongDescription": "Wyświetl tabele w wystąpieniu usługi Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl tabele w wystąpieniu usługi Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Zwraca tabelę nawigacji zawierającą kontenery znalezione na określonym koncie z magazynu systemu Azure.",
        "Documentation.LongDescription": "Zwraca tabelę nawigacji zawierającą wiersz każdego kontenera znalezionego pod adresem URL konta (<code>account</code>) z magazynu platformy Azure. Każdy wiersz zawiera link do obiektów blob kontenera. Można określić element <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>BlockSize</code> : Liczba bajt&#243;w do odczytania przed oczekiwaniem na konsumenta danych. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : Liczba bajt&#243;w, kt&#243;re mają zostać odczytane w ramach pojedynczego żądania HTTP do serwera. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcja ConcurrentRequests obsługuje szybsze pobieranie danych przez określenie liczby żądań, kt&#243;re mają być wykonywane r&#243;wnolegle, co jednak powoduje większe użycie pamięci. Wymagana ilość pamięci to (ConcurrentRequest * RequestSize). Wartość domyślna to 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Zwraca tabelę nawigacyjną zawierającą dokumenty znalezione w określonym kontenerze i jego podfolderach w usłudze Azure Data Lake Storage.",
        "Documentation.LongDescription": "Zwraca tabelę nawigacyjną zawierającą dokumenty znalezione w określonym kontenerze i jego podfolderach pod adresem URL konta, <code>endpoint</code>, w systemie plików usługi Azure Data Lake Storage. Można określić element <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>BlockSize</code> : Liczba bajt&#243;w do odczytania przed oczekiwaniem na konsumenta danych. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : Liczba bajt&#243;w, kt&#243;re mają zostać odczytane w ramach pojedynczego żądania HTTP do serwera. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcja ConcurrentRequests obsługuje szybsze pobieranie danych przez określenie liczby żądań, kt&#243;re mają być wykonywane r&#243;wnolegle, co jednak powoduje większe użycie pamięci. Wymagana ilość pamięci to (ConcurrentRequest * RequestSize). Wartość domyślna to 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (prawda/fałsz) określająca, czy pliki są zwracane w widoku katalogu podobnym do drzewa, czy na liście niezhierarchizowanej. Wartość domyślna to fałsz.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Zwraca tabelę nawigacyjną zawierającą tabele znalezione w określonym koncie z magazynu systemu Azure.",
        "Documentation.LongDescription": "Zwraca tabelę nawigacyjną zawierającą wiersz dla każdej tabeli znalezionej pod adresem URL konta, <code>account</code>, z magazynu usługi Azure Storage. Każdy wiersz zawiera link do tabeli platformy Azure. Można podać opcjonalny parametr rekordu, <code>options</code>, w celu określenia dodatkowych właściwości. Rekord może zawierać następujące pola :\r\n    <ul>\r\n<li><code>Timeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem żądania kierowanego do serwera. Wartość domyślna jest zależna od źr&#243;dła.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Usługa Azure HDInsight w AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Ta funkcja jest niedostępna, ponieważ wymaga programu .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (starsza wersja)",
        "Documentation.Caption": "Common Data Service (starsza wersja)",
        "Documentation.LongDescription": "Połącz się z wystąpieniem usługi Common Data Service (usługi Dynamics 365 i PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Zwraca zawartość dokumentu w formacie CSV jako tabelę.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu CSV w postaci tabeli.\r\n    <ul>\r\n     <li>\r\n        Element <code>columns</code> może mieć wartość null, być liczbą kolumn, listą nazw kolumn, typem tabeli bądź rekordem opcji.\r\n      </li>\r\n      <li>\r\n        Element <code>delimiter</code> może być pojedynczym znakiem, listą znaków lub wartością <code>\"\"</code>, która wskazuje, że wiersze powinny być dzielone kolejnymi białymi znakami. Wartość domyślna: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Zapoznaj się z właściwością <code>ExtraValues.Type</code>, aby uzyskać informacje dotyczące obsługiwanych wartości elementu <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        Element <code>encoding</code> określa typ kodowania tekstu.\r\n      </li>\r\n    </ul>\r\n\r\n    Jeśli określono rekord dla elementu <code>columns</code> (a elementy <code>delimiter</code>, <code>extraValues</code> i <code>encoding</code> mają wartości null), mogą zostać podane następujące pola rekordu:\r\n    <ul>\r\n     <li>\r\n        <code>Delimiter</code>: ogranicznik kolumny. Wartość domyślna: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: może mieć wartość null, być liczbą kolumn, listą nazw kolumn bądź typem tabeli. Jeśli liczba kolumn jest mniejsza od liczby odnalezionej w danych wejściowych, dodatkowe kolumny będą ignorowane. Jeśli liczba kolumn jest większa od liczby odnalezionej w danych wejściowych, dodatkowe kolumny będą miały wartość null. Gdy wartość nie zostanie podana, liczba kolumn zostanie określona na podstawie informacji odnalezionych w danych wejściowych.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: kodowanie tekstu w pliku. Wartość domyślna: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: określa sposób obsługi cudzysłowów.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (wartość domyślna): cudzysłowy w polu są istotne tylko wtedy, gdy występują bezpośrednio po ograniczniku.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: cudzysłowy w polu są zawsze istotne, niezależnie od miejsca ich występowania.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: określa sposób obsługi ujętych w cudzysłowy znaków podziału wiersza.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (wartość domyślna): ujęte w cudzysłowy znaki podziału wiersza są traktowane jako część danych, a nie koniec bieżącego wiersza.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: wszystkie znaki podziału wiersza są traktowane jako koniec bieżącego wiersza, nawet jeśli występują one wewnątrz ujętej w cudzysłowy wartości.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Przetwórz tekst w formacie CSV z nagłówkami kolumn",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Zwraca tabelę zawierającą zestaw dostępnych wymiarów.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą zestaw wymiarów dostępnych w module <code>cube</code>. Każdy wymiar to tabela zawierająca zestaw atrybutów wymiaru, a każdy atrybut wymiaru jest przedstawiony w postaci kolumny w tabeli wymiarów. Wymiary można rozwijać w module, używając funkcji Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Zwraca zagnieżdżone drzewo tabel reprezentujące hierarchię folderów wyświetlania obiektów (np. wymiarów i miar).",
        "Documentation.LongDescription": "Zwraca zagnieżdżone drzewo tabel reprezentujące hierarchię folderów wyświetlania obiektów (np. wymiarów i miar) dostępnych do użycia w module <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Zwraca tabelę zawierającą zestaw dostępnych właściwości miar rozwijanych w module.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą zestaw dostępnych właściwości miar rozwijanych w module.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Zwraca tabelę zawierającą zestaw dostępnych miar.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą zestaw miar dostępnych w module <code>cube</code>.\r\n    Każda miara jest przedstawiona w postaci funkcji. Miary można stosować do modułu, używając funkcji Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Zwraca tabelę zawierającą zestaw parametrów, które można zastosować do modułu.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą zestaw parametrów, które można zastosować do <code>cube</code>. Każdy parametr jest funkcją, która może zostać wywołana w celu pobrania <code>cube</code> z zastosowanym parametrem i jego argumentami.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Zwraca tabelę zawierającą zestaw dostępnych właściwości dla wymiarów, które są rozwijane w module.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą zestaw dostępnych właściwości dla wymiarów, które są rozwijane w module.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Wprowadź adres URL konta usługi Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz dla każdego folderu i pliku znalezionego w adresie <code>url</code> z usługi Azure Data Lake Storage Gen1. Każdy wiersz zawiera właściwości folderu lub pliku i link do jego zawartości."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Wprowadź adres URL konta usługi Azure Data Lake Storage.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz dla każdego pliku znalezionego w adresie <code>url</code> z usługi Azure Data Lake Storage Gen1. Każdy wiersz zawiera właściwości pliku i link do jego zawartości."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB w wersji 1",
        "Documentation.Caption": "Azure Cosmos DB (interfejs API SQL)",
        "Documentation.Description": "Wprowadź adres URL konta usługi Azure Cosmos DB.",
        "Documentation.LongDescription": "Zwraca tabelę z bazami danych usługi Azure Cosmos DB w elemencie <code>url</code>. W przypadku określenia elementu <code>database</code> zamiast tego zostanie zwrócona tabela kolekcji. Ponadto w przypadku określenia pola <code>Query</code> w rekordzie <code>options</code> zostaną zwrócone wyniki zapytania wykonywanego w określonej bazie danych i/lub kolekcji."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL punktu końcowego usługi OData dla usługi Dynamics 365 Business Central (lokalnej).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (lokalna)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (lokalna)",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Dynamics 365 Business Central (lokalnej). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Wprowadź punkt końcowy usługi OData dla systemu Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane systemu Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Zwraca moduły w ramach wystąpienia programu Essbase pogrupowane według serwera Essbase.",
        "Documentation.LongDescription": "Zwraca tabelę modułów pogrupowanych według serwera Essbase z wystąpienia programu Essbase na serwerze APS <code>url</code>. Możliwe jest określenie opcjonalnego parametru rekordu <code>options</code> w celu kontrolowania następujących opcji: \r\n    <ul>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Zwraca zawartość skoroszytu programu Excel.",
        "Documentation.LongDescription": "Zwraca zawartość skoroszytu programu Excel.\r\n    <ul>\r\n     <li> Element <code>useHeaders</code> może mieć wartość null lub wartość logiczną (true/false) wskazującą, czy pierwszy wiersz każdej zwracanej tabeli ma być traktowany jako nagłówek, czy jako rekord opcji. Wartość domyślna: false.</li>\r\n     <li> Element <code>delayTypes</code> może mieć wartość null lub wartość logiczną (true/false) wskazującą, czy kolumny każdej zwracanej tabeli powinny być pozostawione bez typu. Wartość domyślna: false.</li>\r\n    </ul>\r\n\r\n    Jeśli dla elementu <code>useHeaders</code> zostanie określony rekord (i element <code>delayTypes</code> ma wartość null), mogą zostać podane następujące pola rekordu:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: może mieć wartość null lub wartość logiczną (true/false) wskazującą, czy pierwszy wiersz każdej zwracanej tabeli ma być traktowany jako nagłówek. Wartość domyślna: false.</li>\r\n     <li> <code>DelayTypes</code>: może mieć wartość null lub wartość logiczną (true/false) wskazującą, czy kolumny każdej zwracanej tabeli powinny być pozostawione bez typu. Wartość domyślna: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: może mieć wartość null lub wartość logiczną (true/false) wskazującą, czy wnioskowanie na temat obszaru arkusza zawierającego dane ma być wykonywane na podstawie odczytania samego arkusza, czy metadanych wymiarów z pliku. Może to być przydatne w przypadku, gdy metadane wymiarów są nieprawidłowe. Należy pamiętać, że ta opcja jest obsługiwana tylko w przypadku plików Open XML programu Excel, ale nie dla starszych plików programu Excel. Wartość domyślna: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Zwróć zawartość arkusza Arkusz1 ze skoroszytu programu Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Zwraca tabelę zawierającą właściwości i zawartość plików oraz folderów znalezionych w określonym folderze.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu folderowi i plikowi znalezionemu w folderze <code>path</code>. Każdy wiersz zawiera właściwości folderu lub pliku oraz link do ich zawartości. Parametr <code>options</code> jest obecnie przeznaczony do użytku wewnętrznego.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Zwraca tabelę zawierającą właściwości i zawartość plików znalezionych w określonym folderze i jego podfolderach.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu plikowi znalezionemu w folderze <code>path</code> i w jego wszystkich podfolderach. Każdy wiersz zawiera właściwości pliku oraz link do ich zawartości. Parametr <code>options</code> jest obecnie przeznaczony do użytku wewnętrznego.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importuj dane z bazy danych Google BigQuery przy użyciu usługi Azure AD",
        "Documentation.LongDescription": "\r\n      Zwraca tabelę z listą dostępnych projektów w usłudze Google BigQuery przy użyciu usługi Azure AD dla <code>Identyfikatora projektu rozliczeniowego</code>. Opcjonalny parametr rekordu, <code>options</code>, można określić, aby kontrolować następujące opcje:\r\n      <ul>\r\n<li><code>ConnectionTimeout</code>: czas trwania określający czas oczekiwania przed porzuceniem próby nawiązania połączenia z serwerem. Wartość domyślna to wartość limitu czasu połączenia ODBC.</li>\r\n        <li><code>CommandTimeout</code>: czas trwania określający, jak długo można uruchomić zapytanie po stronie serwera przed anulowaniem.</li>\r\n        <li><code>UseStorageApi</code>: określa, czy używać interfejsu API magazynu BigQuery dla dużych zestawów wyników. Wartość domyślna to true, aby używać interfejsu API magazynu. Ustaw wartość false, aby nie używać interfejsu API magazynu</li>\r\n        <li><code>AudienceUri</code>: jest to identyfikator URI odbiorców, którego sterownik ODBC może używać na potrzeby żądań wymiany tokenów. To pole musi być w pełni kwalifikowanym identyfikatorem URI (tj. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), gdzie pool_id jest globalnie unikatową nazwą identyfikującą pulę pracowników.</li>\r\n      </ul>\r\n    Parametr rekordu jest określony jako [opcja1 = wartość1, opcja2 = wartość2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl listę dostępnych projektów w usłudze Google BigQuery przy użyciu usługi Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Arkusze Google",
        "Documentation.Caption": "Arkusze Google",
        "Documentation.Description": "Importuje dane z arkuszy GoogleSheet",
        "Documentation.LongDescription": "Importuje dane z arkuszy GoogleSheet"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Zwraca tabelę nawigacji zawierającą kontenery znalezione na określonym koncie z magazynu systemu Azure.",
        "Documentation.LongDescription": "Zwraca tabelę nawigacji zawierającą wiersz każdego kontenera znalezionego pod adresem URL konta (<code>account</code>) z magazynu systemu Azure. Każdy wiersz zawiera link do obiektów blob kontenera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Zwraca tabelę nawigacji zawierającą kontenery znalezione na określonym koncie z magazynu systemu Azure.",
        "Documentation.LongDescription": "Zwraca tabelę nawigacji zawierającą wiersz każdego kontenera znalezionego pod adresem URL konta (<code>account</code>) z magazynu systemu Azure. Każdy wiersz zawiera link do obiektów blob kontenera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Zwraca tabelę zawierającą właściwości i zawartość plików oraz folderów znalezionych w określonym folderze w systemie plików usługi Hadoop.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu folderowi i plikowi znalezionemu pod adresem URL folderu <code>url</code> w systemie plików usługi Hadoop. Każdy wiersz zawiera właściwości folderu lub pliku oraz link do ich zawartości.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Zwraca tabelę zawierającą właściwości i zawartość plików znalezionych w określonym folderze i jego podfolderach w systemie plików usługi Hadoop.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu plikowi znalezionemu pod adresem URL folderu <code>url</code> i w jego podfolderach w systemie plików usługi Hadoop. Każdy wiersz zawiera właściwości pliku oraz link do jego zawartości.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importuj dane z klastra Impala",
        "Documentation.LongDescription": "Importuj dane z klastra Impala <code>server</code>. Jeśli nie określono portu, zostanie użyty port domyślny 21050.",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl listę tabel w klastrze Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje dane z usługi Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje dane z Twojego wystąpienia usługi Azure Data Explorer (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z informacjami o zdarzeniach StormEvents",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabela ze zdarzeniami Storm Events z bazy danych „Samples” w klastrze „help”"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę danych z punktu końcowego usługi MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Wywołuje interfejs API usługi MailChimp i zwraca wynikowy zestaw danych jako tabelę. Automatycznie przechodzi między stronami w ramach wszystkich wyników. Opcjonalnego parametru entityName można używać dla punktów końcowych interfejsu API, w których główny punkt końcowy nie jest zgodny z główną wartością entityName w odpowiedzi JSON.",
        "Documentation.Examples": [
          {
            "Description": "Pobiera tabelę danych z punktu końcowego „lists” interfejsu API usługi MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Tabela z danymi listy."
          },
          {
            "Description": "Pobiera tabelę danych z punktu końcowego „campaign-folders” interfejsu API usługi MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Tabela z danymi folderów kampanii."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Zwraca nieprzetworzone wyniki odpowiedzi z punktu końcowego interfejsu API usługi MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Wywołuje interfejs API usługi MailChimp i zwraca nieprzetworzoną odpowiedź.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca nieprzetworzone dane z punktu końcowego „reports/click-details” interfejsu API usługi MailChimp dla danej kampanii.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Nieprzetworzone dane ze szczegółami kliknięć dla danej kampanii."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Udostępnij zaawansowane funkcje zapytań.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Udostępnij zaawansowane funkcje zapytań.",
        "Documentation.Examples": [
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z okresu od 2017-05-01 do 2017-06-15",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane podsumowań z okresu od 2017-05-01 do 2017-06-15"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z kwietnia 2017 r.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2017-04-01 do 2017-04-30"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z okresu od kwietnia 2017 r. do chwili obecnej.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2017-04-01 do 2017-06-15"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z okresu od grudnia ubiegłego roku do lutego bieżącego roku",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2016-12-01 do 2017-02-28"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz opłaty za witrynę Marketplace za ostatnie 18 miesięcy",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2015-12-01 do 2017-06-15"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz szczegóły opłat za czerwiec i maj 2017 r.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2017-05-01 do 2017-06-15"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-07-03, pobierz szczegóły opłat za lipiec 2016 r.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2016-07-01 do 2016-07-31"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-07-13, pobierz podsumowania salda z ostatnich 10 miesięcy oraz 13 dni obecnego miesiąca",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcja zwróci dane z okresu od 2016-09-01 do 2017-07-13"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Zwraca tabelę z tabelami SQL i widokami ze źródła danych ODBC. ",
        "Documentation.LongDescription": "Zwraca tabelę z tabelami SQL i widokami ze źródła danych ODBC określonego za pomocą parametrów połączenia <code>connectionString</code>. Parametry połączenia <code>connectionString</code> mogą być tekstem lub rekordem z parami właściwość-wartość. Wartości właściwości mogą być tekstem lub liczbą. Można podać opcjonalny parametr rekordu <code>options</code>, aby określić dodatkowe parametry. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna to 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Zwróć tabele i widoki SQL z podanych parametrów połączenia.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Zwraca tabelę z tabelami SQL i widokami ze źródła danych OLE DB.",
        "Documentation.LongDescription": "Zwraca tabelę z tabelami SQL i widokami ze źródła danych OLE DB określonego przez parametry połączenia <code>connectionString</code>. Element <code>connectionString</code> może mieć wartość tekstową lub być rekordem par właściwości i wartości. Wartości właściwości mogą być tekstem lub liczbami. Można podać opcjonalny parametr rekordu (<code>options</code>), aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to true).</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n</ul>\r\n\r\n    Parametr rekordu jest określany na przykład jako [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Zwraca tabelę tabel i widoków SQL z bazy danych Oracle Database.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych Oracle Database na serwerze <code>server</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Za pomocą opcjonalnego parametru rekordu <code>options</code> można określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu jest określany na przykład jako [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Zwraca dowolne tabele znalezione w pliku PDF.",
        "Documentation.LongDescription": "Zwraca wszystkie tabele znalezione w elemencie <code>pdf</code>. Opcjonalny parametr rekordu, <code>options</code>, może zostać podany, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>Implementation</code> : Wersja algorytmu, kt&#243;ra ma być używana podczas identyfikowania tabel. Stare wersje są dostępne tylko w&#160;celu zapewnienia zgodności z poprzednimi wersjami, aby zapobiec uszkodzeniu starych zapytań przez aktualizacje algorytm&#243;w. Nowsza wersja powinna zawsze dawać najlepsze rezultaty. Prawidłowe wartości to „1.3”, „1.2”, „1.1” lub null.</li>\r\n<li><code>StartPage</code> : Określa pierwszą stronę w zakresie stron do zbadania. Wartość domyślna: 1.</li>\r\n<li><code>EndPage</code> : Określa ostatnią stronę w zakresie stron do zbadania. Wartość domyślna: ostatnia strona dokumentu.</li>\r\n<li><code>MultiPageTables</code> : Określa, czy podobne tabele na kolejnych stronach zostaną automatycznie połączone w jedną tabelę. Wartość domyślna: true.</li>\r\n<li><code>EnforceBorderLines</code> : Określa, czy linie obramowania są zawsze wymuszane jako granice kom&#243;rek (w przypadku wartości true), czy po prostu używane jako jedna z wielu wskaz&#243;wek przy określaniu granic kom&#243;rek (w przypadku wartości false). Wartość domyślna: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabele zawarte w pliku sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL Twojego konta rozwiązania Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Zwraca tabelę z odpowiednimi danymi narzędzia Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þуťĥõл ŝςŕîρť",
        "Documentation.Description": "Ĕхèςûτęѕ ÞУŧћόň §ćѓίþť аⁿđ ѓèťϋŗņѕ đâτā ƒŕàм℮ѕ",
        "Documentation.Examples": {
          "Description": "Ĕхèςûτęѕ ÞУŧћόň §ćѓίþť аⁿđ ѓèťϋŗņѕ đâτā ƒŕàм℮ѕ",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Γ ŝςяίφτ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Zwraca tabelę, w której każdy wiersz składa się z nazwy i wartości pola rekordu wejściowego.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą w każdym wierszu kolumny <code>Name</code> i <code>Value</code> odpowiadające wszystkim polom w rekordzie <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Utwórz tabelę na podstawie rekordu.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Zwraca pakiety w bazie danych SAP HANA.",
        "Documentation.LongDescription": "Zwraca tabelę wielowymiarowych pakietów z bazy danych SAP HANA <code>server</code>. Można opcjonalnie ustawić parametr rekordu <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>Distribution</code> : Opcja SapHanaDistribution ustawiająca wartość właściwości „Dystrybucja” w parametrach połączenia. Routing instrukcji to metoda oceny prawidłowego węzła serwera systemu rozproszonego przed wykonaniem instrukcji. Wartość domyślna to SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Określa implementację łącznika SAP HANA do użycia.</li>\r\n<li><code>EnableColumnBinding</code> : Tworzy powiązanie zmiennych z kolumnami zestawu wynik&#243;w SAP HANA podczas pobierania danych. Może potencjalnie poprawić wydajność kosztem nieznacznie wyższego wykorzystania pamięci. Wartość domyślna to false.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna to 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Zwraca tabelę zawierającą zawartość z witryny programu SharePoint.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu folderowi i dokumentowi znalezionemu w podanej witrynie programu SharePoint <code>url</code>. Każdy wiersz zawiera właściwości folderu lub pliku oraz link do jego zawartości. Parametr <code>options</code> pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Liczba (14 lub 15) albo tekst „Auto” określający wersję interfejsu API programu SharePoint do użycia dla tej witryny. Jeśli parametr nie zostanie określony, będzie używana wersja 14 interfejsu API. Jeśli podana zostanie wartość „Auto”, wersja serwera zostanie odnaleziona automatycznie, o ile to będzie możliwe, a w przeciwnym przypadku zostanie przyjęta domyślnie wersja 14. Nieanglojęzyczne witryny programu SharePoint wymagają co najmniej wersji 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Zwraca tabelę zawierającą dokumenty z witryny programu SharePoint.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu dokumentowi znalezionemu w określonej witrynie programu SharePoint <code>url</code> oraz podfolderach. Każdy wiersz zawiera właściwości folderu lub pliku oraz link do jego zawartości. Parametr <code>options</code> pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Liczba (14 lub 15) albo tekst „Auto” określający wersję interfejsu API programu SharePoint do użycia dla tej witryny. Jeśli parametr nie zostanie określony, będzie używana wersja 14 interfejsu API. Jeśli podana zostanie wartość „Auto”, wersja serwera zostanie odnaleziona automatycznie, o ile to będzie możliwe, a w przeciwnym przypadku zostanie przyjęta domyślnie wersja 14. Nieanglojęzyczne witryny programu SharePoint wymagają co najmniej wersji 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Zwraca tabelę zawierającą zawartość z listy programu SharePoint.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz odpowiadający każdemu elementowi listy znalezionemu na określonej liście programu SharePoint <code>url</code>. Każdy wiersz zawiera właściwości listy. Parametr <code>options</code> pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Liczba (14 lub 15) albo tekst „Auto” określający wersję interfejsu API programu SharePoint do użycia dla tej witryny. Jeśli parametr nie zostanie określony, będzie używana wersja 14 interfejsu API. Jeśli podana zostanie wartość „Auto”, wersja serwera zostanie odnaleziona automatycznie, o ile to będzie możliwe, a w przeciwnym przypadku zostanie przyjęta domyślnie wersja 14. Nieanglojęzyczne witryny programu SharePoint wymagają co najmniej wersji 15.</li>\r\n<li><code>Implementation</code> : Opcjonalne. Określa wersję łącznika programu SharePoint do użycia. Akceptowane wartości to „2.0” lub null. Jeśli wartość to „2.0”, używana jest implementacja 2.0 łącznika programu SharePoint. Jeśli wartość jest r&#243;wna null, używana jest oryginalna implementacja łącznika programu SharePoint.</li>\r\n<li><code>ViewMode</code> : Opcjonalne. Ta opcja jest prawidłowa tylko dla implementacji 2.0. Akceptowane wartości to „Wszystkie” i „Domyślny”. Jeśli nie zostanie określona żadna wartość, zostanie ustawiona wartość „Wszystkie”. Po określeniu opcji „Wszystkie” widok zawiera wszystkie kolumny utworzone przez użytkownika i zdefiniowane przez system. Po określeniu opcji „Domyślny” widok będzie zgodny z tym, co użytkownik widzi podczas przeglądania listy w trybie online w dowolnym widoku ustawionym przez tego użytkownika jako domyślny w ustawieniach. Jeśli użytkownik edytuje domyślny widok w celu dodania lub usunięcia kolumn utworzonych przez użytkownika lub zdefiniowanych przez system albo przez utworzenie nowego widoku i ustawienie go jako domyślnego, te zmiany będą propagowane za pomocą łącznika.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Uniemożliwia łącznikowi używanie oddzielnego punktu końcowego dla kolumn notatek.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Zwraca tabelę z zawartości dostępnej pod określonym adresem URL sformatowanej zgodnie z wymaganiami interfejsu API SODA 2.0.",
        "Documentation.LongDescription": "Zwraca tabelę z zawartości dostępnej pod określonym adresem URL <code>url</code> sformatowanej zgodnie z wymaganiami interfejsu API SODA 2.0. Adres URL musi wskazywać prawidłowe, zgodne ze standardem SODA źródło, które kończy się rozszerzeniem CSV.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Ta funkcja umożliwia wywołanie dowolnego z punktów końcowych „Lists” dostępnego w interfejsie API SparkPost w wersji 1. W przypadku wywoływania interfejsu API SparkPost przy użyciu tej funkcji należy pamiętać, że interfejs API SparkPost ma ścisły limit szybkości interfejsu API. Jeśli z serwera SparkPost jest zwracany kod stanu 429, oznacza to, że osiągnięto limit szybkości i trzeba chwilę poczekać przed wykonaniem kolejnych wywołań.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z jedną kolumną zawierającą dane z jednego z punktów końcowych „Lists” interfejsu API SparkPost w wersji 1 (szczegóły można znaleźć w dokumentacji łącznika SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Pobierz wbudowane tabele uwidaczniane przez łącznik SparkPost z danymi agregowanymi przez określoną przez użytkownika liczbę dni. Podczas odświeżania tych tabel lub wywoływania interfejsu API SparkPost przy użyciu tego łącznika należy pamiętać, że interfejs API SparkPost ma ścisły limit szybkości interfejsu API. Jeśli z serwera SparkPost jest zwracany kod stanu 429, oznacza to, że osiągnięto limit szybkości i trzeba chwilę poczekać przed wykonaniem kolejnych wywołań. W przypadku wybierania wartości parametru liczby dni należy zauważyć, że w interfejsie API są przechowywane dane tylko z 6 miesięcy."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Zwraca tabelę baz danych z serwera programu SQL Server.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą bazy danych znajdujące się na określonym serwerze SQL Server, <code>server</code>. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Liczba określająca wartość klauzuli zapytania „maxdop” w wygenerowanym zapytaniu SQL.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n<li><code>MultiSubnetFailover</code> : Wartość logiczna (true/false) określająca wartość właściwości „MultiSubnetFailover” w parametrach połączenia (wartość domyślna to false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku podania wartości true powoduje pr&#243;bę przeprowadzenia składania konwersji typ&#243;w mogących zakończyć się niepowodzeniem i przez to spowodować niepowodzenie całego zapytania. Niezalecana do użycia og&#243;lnego.</li>\r\n<li><code>ContextInfo</code> : Wartość binarna, kt&#243;ra jest używana do ustawiania informacji CONTEXT_INFO przed uruchomieniem każdego polecenia.</li>\r\n<li><code>OmitSRID</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku podania wartości true powoduje pomijanie identyfikatora SRID podczas tworzenia danych Well-Known Text na podstawie typ&#243;w geometrycznych i geograficznych.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku wartości true umożliwia składanie zapytań względem baz danych na tym samym serwerze. Wartością domyślną jest false.</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...].\r\n    <br>\r\n    Nie jest obsługiwane ustawianie zapytania SQL w celu uruchomienia na serwerze. Aby uruchomić zapytanie SQL, należy zamiast tego użyć funkcji <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Nawiązuje połączenie z interfejsem API usługi Stripe z opcją ograniczenia liczby wykonywanych połączeń z interfejsem API.",
        "Documentation.LongDescription": "Nawiązuje połączenie z interfejsem API usługi Stripe pod adresem https://api.stripe.com/v1/<code>method</code> z opcjonalnym rekordem <code>query</code> przekazanym jako parametry dodatkowe i opcjonalną wartością <code>pageLimit</code> jako limitem liczby żądań interfejsu API. Najpierw zwracane są najnowsze dane. Jeśli wartość <code>pageLimit</code> nie zostanie określona, zwracane są wszystkie dane. Stosowana wersja usługi Stripe to 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca wszystkie dane opłat",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabela zawierająca dane wszystkich opłat powiązanych z bieżącym kontem usługi Stripe"
          },
          {
            "Description": "Zwraca jedną stronę danych opłat",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabela zawierająca dane najnowszych opłat powiązanych z bieżącym kontem usługi Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Buforuje tabelę w pamięci, izolując ją od zmian zewnętrznych w trakcie obliczeń.",
        "Documentation.LongDescription": "Buforuje tabelę w pamięci, izolując ją od zmian zewnętrznych podczas oceny.\r\n    Buforowanie jest płytkie. Wymusza ocenę dowolnych wartości komórek skalarnych, ale pozostawia wartości nieskalarne (rekordy, listy, tabele itd.) w postaci jakiej są.\r\n    <br>\r\n    <br>\r\n    Pamiętaj, że użycie tej funkcji może, ale nie musi, przyspieszyć działanie zapytań. W niektórych przypadkach może to spowodować, że zapytania będą działać wolniej z powodu dodanego \r\n    kosztu odczytu wszystkich danych i przechowywania ich w pamięci, a także z faktu, że buforowanie uniemożliwia składanie podrzędne. Jeśli dane nie wymagają\r\n    buforowania, a jedynie chcesz uniemożliwić składanie podrzędne, zamiast tego użyj <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Załaduj wszystkie wiersze tabeli SQL do pamięci, aby żadne operacje podrzędne nie mogły już wysyłać zapytań do serwera SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Zwraca tabelę będącą wynikiem scalenia listy tabel.",
        "Documentation.LongDescription": "Zwraca tabelę będącą wynikiem scalenia listy tabel, <code>tables</code>. Wynikowa tabela będzie mieć strukturę typu wierszy zdefiniowaną przez element <code>columns</code> lub przez zbiór typów wejściowych, jeśli element <code>columns</code> nie jest zdefiniowany.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Scal ze sobą następujące trzy tabele.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Scal 3 tabele o różnych strukturach.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Scal 2 tabele i projekt do danego typu.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Przenosi nagłówki kolumn do pierwszego wiersza wartości.",
        "Documentation.LongDescription": "Przenosi nagłówki kolumn (tzn. nazwy kolumn) do pierwszego wiersza wartości. Domyślne nazwy kolumn to Kolumna1, Kolumna2 itd.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Obniż poziom pierwszego wiersza wartości w tabeli.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Usuwa zduplikowane wiersze z tabeli.",
        "Documentation.LongDescription": "Usuwa zduplikowane wiersze z tabeli.\r\n    Opcjonalny parametr <code>equationCriteria</code> określa, które kolumny tabeli są testowane pod kątem duplikacji. Jeśli nie określono <code>equationCriteria</code>, wszystkie kolumny są testowane.<br>\r\n    <br>\r\n    Ponieważ dodatek Power Query czasami przenosi niektóre operacje do źródeł danych wewnętrznej bazy danych (nazywanych „składaniem”), a także czasami optymalizuje zapytania poprzez \r\n    pomijanie operacji, które nie są ściśle konieczne, ogólnie rzecz biorąc, nie ma gwarancji, który konkretny duplikat zostanie zachowany.\r\n    Na przykład nie można założyć, że pierwszy wiersz z unikatowym zestawem wartości kolumn pozostanie, a wiersze znajdujące się poniżej w tabeli zostaną usunięte.\r\n    Jeśli chcesz, aby usunięcie duplikatów działało w sposób przewidywalny, najpierw zbuforuj tabelę przy użyciu funkcji <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Usuń zduplikowane wiersze z tabeli.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Usuń zduplikowane wiersze z kolumny [b] w tabeli <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Tworzy tabelę na podstawie listy kolumn i określonych wartości.",
        "Documentation.LongDescription": "Tworzy tabelę typu <code>columns</code> na podstawie listy <code>lists</code>, która zawiera zagnieżdżone listy z nazwami i wartościami kolumn.\r\n    Jeśli niektóre kolumny będą zawierać więcej wartości niż inne, brakujące wartości zostaną wypełnione wartością domyślną równą null, jeśli kolumny dopuszczają wartości null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Zwróć tabelę na podstawie listy nazw klientów na liście. Każda wartość na liście klientów staje się wartością wiersza, a każda lista staje się kolumną.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Utwórz tabelę na podstawie danej listy kolumn oraz listy nazwy kolumn.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Tworzenie tabeli z różną liczbą kolumn na wiersz. Liczba brakujących wierszy ma wartość null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Konwertuje listę na tabelę, stosując określoną funkcję podziału do każdego elementu listy.",
        "Documentation.LongDescription": "Konwertuje listę <code>list</code> na tabelę, stosując opcjonalną funkcję podziału <code>splitter</code> do każdego elementu listy. Domyślnie lista jest traktowana jako lista wartości tekstowych rozdzielonych przecinkami. Wartość opcjonalnego parametru <code>columns</code> może być liczbą kolumn, listą kolumn lub typem tabeli. Można także określić opcjonalne parametry <code>default</code> i <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Utwórz tabelę na podstawie listy przy użyciu domyślnego rozdzielacza.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Utwórz tabelę na podstawie listy przy użyciu rozdzielacza niestandardowego.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Utwórz tabelę na podstawie listy przy użyciu rozdzielacza Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Konwertuje listę rekordów na tabelę.",
        "Documentation.LongDescription": "Konwertuje listę rekordów <code>records</code> na tabelę.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Utwórz tabelę na podstawie rekordów, używając nazw pól rekordów jako nazw kolumn.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Utwórz tabelę na podstawie rekordów z typizowanymi kolumnami i wybierz liczbę kolumn.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Tworzy tabelę na podstawie listy wartości wiersza i kolumn opcjonalnych",
        "Documentation.LongDescription": "Tworzy tabelę na podstawie listy <code>rows</code>, której każdy element jest listą wewnętrzną zawierającą wartości kolumn dla jednego wiersza. Dla elementu <code>columns</code> można określić opcjonalną listę nazw kolumn, typ tabeli lub liczbę kolumn.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z kolumną [CustomerID], która zawiera wartości {1, 2}, kolumną [Name], która zawiera wartości {\"Bob\", \"Jim\"}, i kolumną [Phone] zawierającą wartości {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Zwraca tabelę z kolumną [CustomerID], która zawiera wartości {1, 2}, kolumną [Name], która zawiera wartości {\"Bob\", \"Jim\"}, i kolumną [Phone] zawierającą wartości {\"123-4567\", \"987-6543\"}, gdzie kolumna [CustomerID] zawierają dane typu liczbowego, a kolumny [Name] i [Phone] zawierają wartości typu tekstowego.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Tworzy tabelę z kolumną na podstawie dostarczonych wartości.",
        "Documentation.LongDescription": "Tworzy tabelę z kolumną zawierającą podaną wartość lub listę wartości — <code>value</code>. Można określić opcjonalny parametr rekordu <code>options</code> w celu kontrolowania następujących opcji:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: nazwa kolumny używana podczas tworzenia tabeli z listy lub wartości skalarnej.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Utwórz tabelę na podstawie wartości 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Utwórz tabelę na podstawie listy.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Utwórz tabelę na podstawie wartości 1 i z niestandardową nazwą kolumny.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Zwraca informacje dotyczące sposobu, w jaki tabela została podzielona na partycje.",
        "Documentation.LongDescription": "Zwraca informacje dotyczące sposobu, w jaki tabela została podzielona na partycje.  Zwracana jest tabela, w której każda kolumna jest kolumną partycji w oryginalnej tabeli, a każdy wiersz odpowiada partycji w oryginalnej tabeli.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Zwraca profil kolumn tabeli.",
        "Documentation.LongDescription": "<p>Zwraca profil kolumn w: <code>table</code>.</p>\r\n<p>Dla każdej kolumny są zwracane następujące informacje (jeśli mają zastosowanie):\r\n<ul>\r\n  <li>wartość minimalna</li>\r\n  <li>wartość maksymalna</li>\r\n  <li>średnia</li>\r\n  <li>odchylenie standardowe</li>\r\n  <li>liczba</li>\r\n  <li>liczba wartości null</li>\r\n  <li>liczba wartości odrębnych</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Zamienia pierwszy wiersz wartości w nowe nagłówki kolumn (nazwy kolumn).",
        "Documentation.LongDescription": "Zamienia pierwszy wiersz wartości w nowe nagłówki kolumn (nazwy kolumn). Domyślnie tylko tekst lub liczby są zamieniane w nagłówki. Prawidłowe opcje:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: Ustawienie <code>true</code> powoduje, że wszystkie wartości skalarne w pierwszym wierszu są zamieniane w nagłówki zgodnie z parametrem <code>Culture</code>, jeśli jest określony (lub zgodnie z ustawieniami regionalnymi bieżącego dokumentu).\r\n    W przypadku wartości, których nie można przekonwertować na tekst, zostanie użyta domyślna nazwa kolumny.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: Nazwa określająca kulturę danych.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Podnieś poziom pierwszego wiersza wartości w tabeli.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Podnieś poziom wszystkich wartości skalarnych w pierwszym wierszu tabeli do nagłówków.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Zwraca tabelę powstałą w wyniku pominięcia określonej liczby pierwszych wierszy z innej tabeli.",
        "Documentation.LongDescription": "Zwraca tabelę, która nie zawiera określonej liczby pierwszych wierszy (<code>countOrCondition</code>) z tabeli <code>table</code>.\r\n    Liczba usuniętych wierszy jest zależna od opcjonalnego parametru <code>countOrCondition</code>. \r\n    <ul>\r\n    <li> Pominięcie parametru <code>countOrCondition</code> spowoduje usunięcie tylko pierwszego wiersza. </li>\r\n    <li> Jeśli parametr <code>countOrCondition</code> jest liczbą, określa liczbę wierszy (licząc od góry), które zostaną usunięte. </li>\r\n    <li>Jeśli parametr <code>countOrCondition</code> jest warunkiem, będą usuwane wiersze spełniające ten warunek, aż do wiersza, który go nie spełnia.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń pierwszy wiersz z tabeli.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Usuń pierwsze dwa wiersze z tabeli.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Usuń z tabeli pierwsze wiersze, w których jest spełniony warunek [CustomerID] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Zwraca tabelę, z której usunięto N ostatnich wierszy.",
        "Documentation.LongDescription": "Zwraca tabelę, która nie zawiera <code>countOrCondition</code> ostatnich wierszy z tabeli <code>table</code>.\r\n        Liczba usuniętych wierszy jest zależna od opcjonalnego parametru <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Pominięcie parametru <code>countOrCondition</code> spowoduje usunięcie tylko ostatniego wiersza. </li>\r\n    <li> Jeśli parametr <code>countOrCondition</code> jest liczbą, określa liczbę wierszy (licząc od dołu), które zostaną usunięte. </li>\r\n    <li>Jeśli parametr <code>countOrCondition</code> jest warunkiem, będą usuwane wiersze spełniające ten warunek, aż do wiersza, który go nie spełnia.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń ostatni wiersz z tabeli.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Usuń z tabeli ostatnie wiersze, w których jest spełniony warunek [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Zwraca tabelę powstałą w wyniku usunięcia z tabeli wejściowej wierszy, które zawierały błędną wartość w co najmniej jednej komórce. Jeśli zostanie określona lista kolumn, tylko komórki w określonych kolumnach będą sprawdzane pod kątem błędów.",
        "Documentation.LongDescription": "Zwraca tabelę powstałą w wyniku usunięcia z tabeli wejściowej wierszy, które zawierały błędną wartość w co najmniej jednej komórce. Jeśli zostanie określona lista kolumn, tylko komórki w określonych kolumnach będą sprawdzane pod kątem błędów.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń wartość błędu z pierwszego wiersza.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Zwraca tabelę z wierszami rozmieszczonymi w odwrotnej kolejności.",
        "Documentation.LongDescription": "Zwraca tabelę będącą wynikiem rozmieszczenia wierszy tabeli wejściowej <code>table</code> w odwrotnej kolejności.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odwróć kolejność wierszy w tabeli.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Zwraca tabelę zawierającą opis kolumn (np. schemat) określonej tabeli.",
        "Documentation.LongDescription": "<p>Zwraca tabelę opisującą kolumny elementu <code>table</code>.</p>\r\n<p>Każdy wiersz w tabeli opisuje właściwości kolumny elementu <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Nazwa kolumny</b></td>\r\n    <td><b>Opis</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Nazwa kolumny.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Położenie kolumny elementu <code>table</code> względem punktu 0.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Nazwa typu kolumny.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Rodzaj typu kolumny.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Określa, czy kolumna może zawierać wartości <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Podstawa liczbowa (np. base-2, base-10) pól <code>NumericPrecision</code> i <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Dokładność kolumny liczbowej w podstawie określonej przy użyciu wartości <code>NumericPrecisionBase</code>. Jest to maksymalna liczba cyfr, która może być reprezentowana przez wartość tego typu (w tym liczba miejsc po przecinku).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Skala kolumny liczbowej w podstawie określonej przy użyciu wartości <code>NumericPrecisionBase</code>. Jest to liczba miejsc po przecinku wartości tego typu. Wartość <code>0</code> oznacza stałą skalę bez miejsc po przecinku. Wartość <code>null</code> określa nieznaną skalę (zmiennoprzecinkową lub niezdefiniowaną).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Maksymalna liczba miejsc po przecinku obsługiwana w części sekundowej wartości daty lub godziny.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Maksymalna liczba znaków dozwolona w kolumnie <code>text</code> lub maksymalna liczba bajtów dozwolona w kolumnie <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Określa, czy długość kolumny może się zmieniać (maksymalnie do wartości <code>MaxLength</code>), czy też jej rozmiar jest stały.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Nazwa typu kolumny w systemie typu natywnego źródła (np. <code>nvarchar</code> w przypadku programu SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Wyrażenie domyślne dla wartości tej kolumny w natywnym języku wyrażenia źródła (np. <code>42</code> lub <code>newid()</code> w przypadku programu SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Opis kolumny.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Zwraca tabelę powstałą w wyniku pozostawienia w tabeli wejściowej tylko tych wierszy, które zawierały błędną wartość w co najmniej jednej komórce. Jeśli zostanie określona lista kolumn, tylko komórki w określonych kolumnach będą sprawdzane pod kątem błędów.",
        "Documentation.LongDescription": "Zwraca tabelę powstałą w wyniku pozostawienia w tabeli wejściowej tylko tych wierszy, które zawierały błędną wartość w co najmniej jednej komórce. Jeśli zostanie określona lista kolumn, tylko komórki w określonych kolumnach będą sprawdzane pod kątem błędów.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Wybierz nazwy klientów z błędami w ich wierszach.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Zwraca tabelę powstałą w wyniku pominięcia określonej liczby pierwszych wierszy z innej tabeli.",
        "Documentation.LongDescription": "Zwraca tabelę, która nie zawiera określonej liczby pierwszych wierszy (<code>countOrCondition</code>) z tabeli <code>table</code>. \r\n    Liczba pominiętych wierszy jest zależna od opcjonalnego parametru <code>countOrCondition</code>. \r\n    <ul>\r\n    <li> Pominięcie parametru <code>countOrCondition</code> spowoduje pominięcie tylko pierwszego wiersza. </li>\r\n    <li> Jeśli parametr <code>countOrCondition</code> jest liczbą, określa liczbę wierszy (licząc od góry), które zostaną pominięte. </li>\r\n    <li>Jeśli parametr <code>countOrCondition</code> jest warunkiem, będą pomijane wiersze spełniające ten warunek, aż do wiersza, który go nie spełnia.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pomiń pierwszy wiersz w tabeli.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pomiń pierwsze dwa wiersze w tabeli.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pomiń pierwszy wiersz, w którym jest spełniony warunek [Price] > 25, w tabeli.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Zapobiega uruchamianiu jakichkolwiek operacji podrzędnych względem oryginalnego źródła danych.",
        "Documentation.LongDescription": "Zapobiega uruchamianiu jakichkolwiek operacji podrzędnych względem oryginalnego źródła danych w <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Pobiera dane z tabeli SQL w sposób uniemożliwiający uruchamianie jakichkolwiek operacji podrzędnych jako zapytania na serwerze SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Zamienia kolumny w wiersze i wiersze w kolumny.",
        "Documentation.LongDescription": "Zamienia kolumny w wiersze i wiersze w kolumny.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamień wiersze tabeli, która zawiera pary nazwa-wartość, w kolumny.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Pobiera relacje z zestawu tabel.",
        "Documentation.LongDescription": "Pobiera relacje z zestawu tabel. Przyjęto, że struktura zestawu <code>tables</code> przypomina strukturę tabeli nawigacyjnej. Kolumna zdefiniowana przez element <code>dataColumn</code> zawiera rzeczywiste tabele danych.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Zwraca tabelę tabel i widoków SQL z bazy danych programu Teradata.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych Teradata na serwerze <code>server</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Wprowadź liczbę miesięcy, z których mają zostać pobrane dane historyczne usługi Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Zwraca tabelę z właściwymi danymi usługi Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Zwraca tabelę zawierającą opis kolumn (czyli schemat) określonego typu tabeli.",
        "Documentation.LongDescription": "<p>Zwraca tabelę opisującą kolumny elementu <code>tableType</code>.</p>\r\n<p>Opis tabeli wynikowej można znaleźć w dokumentacji dotyczącej funkcji <code>Table.Schema</code>.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Źródło danych usługi Azure DevOps Services",
        "Documentation.DisplayName": "Źródło danych usługi Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Zwraca tabelę źródeł danych OData udostępnianych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Połączenie z danymi Szczegółowe informacje Viva",
        "Documentation.LongDescription": "Importuj metryki tygodniowe i dane atrybutów z usługi Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z widocznymi atrybutami i metrykami według tygodnia dla każdego zmierzonego pracownika w partycji.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Zwraca zawartość dokumentu HTML podzieloną na występujące w nim struktury, a także reprezentację pełnego dokumentu oraz jego tekstu po usunięciu tagów.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu HTML podzieloną na występujące w nim struktury, a także reprezentację pełnego dokumentu oraz jego tekstu po usunięciu tagów.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę z kluczowymi metrykami rozwiązania Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Tworzy wywołanie punktu końcowego kluczowych metryk rozwiązania Webtrends i zwraca wszystkie dane w postaci tabeli.",
        "Documentation.Examples": [
          {
            "Description": "Ściąga tabelę kluczowych metryk dzierżawy 98765 z ostatnich 30 dni",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabela kluczowych metryk"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Podaj identyfikator profilu skojarzony z kontem rozwiązania Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Zwraca tabelę z odpowiednimi danymi rozwiązania Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Połączenie z danymi Szczegółowe informacje Viva",
        "Documentation.LongDescription": "Importuj metryki tygodniowe i dane atrybutów z usługi Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z widocznymi atrybutami i metrykami według tygodnia dla każdego zmierzonego pracownika w partycji.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Zwraca zawartość dokumentu w formacie XML jako tabelę hierarchiczną.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu w formacie XML jako tabelę hierarchiczną.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Zwraca zawartość dokumentu w formacie XML jako zagnieżdżoną kolekcję spłaszczonych tabel.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu w formacie XML jako zagnieżdżoną kolekcję spłaszczonych tabel.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pobierz zawartość lokalnego pliku XML.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL konta usługi Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Zwraca tabelę z odpowiednimi danymi Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Zwraca kolekcję schematu dla źródła danych ADO.NET.",
        "Documentation.LongDescription": "Zwraca kolekcję schematu dla źródła danych ADO.NET z nazwą dostawcy <code>providerName</code> i parametrami połączenia <code>connectionString</code>. Parametry <code>connectionString</code> mogą mieć postać tekstu lub rekordu par wartości właściwości. Wartości właściwości mogą być tekstowe lub liczbowe. Opcjonalny parametr rekordu, <code>options</code>, może być podany, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Importuj dane z bazy danych Amazon Redshift.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele na  <code>serwerze</code> klastra usługi Amazon Redshift  w bazie danych <code>database</code>.  Opcjonalny parametr rekordu, <code>options</code>, można określić, aby kontrolować następujące opcje: \r\n<ul>\r\n<li><code> Nazwa dostawcy</code>: wartość tekstowa, która ma być używana jako nazwa dostawcy dla połączenia. Jest to używane w przypadku korzystania z uwierzytelniania firmy Microsoft.</li>\r\n<li><code>Rozmiar partii</code>: liczba wierszy pobranych w jednym wywołaniu do serwera.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Zwraca tabelę z wielowymiarowymi modułami lub modelami tabelarycznymi z bazy danych usług Analysis Services.",
        "Documentation.LongDescription": "Zwraca tabelę wielowymiarowych modułów lub modeli tabelarycznych z bazy danych usług Analysis Services <code>database</code> na serwerze <code>server</code>. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>Query</code> : Natywne zapytanie MDX służące do pobierania danych.</li>\r\n<li><code>TypedMeasureColumns</code> : Wartość logiczna wskazująca, czy typy określone w modelu wielowymiarowym lub tabelarycznym będą używane dla typ&#243;w dodanych kolumn miary. Ustawienie wartości false spowoduje użycie typu „number” dla wszystkich kolumn miary. Wartość domyślna tej opcji to false.</li>\r\n<li><code>Culture</code> : Nazwa kultury określająca kulturę dla danych. Odpowiada właściwości parametr&#243;w połączenia „Identyfikator ustawień regionalnych”.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>SubQueries</code> : Liczba (0, 1 lub 2) określająca wartość właściwości „SubQueries” w parametrach połączenia. Ta wartość steruje zachowaniem obliczeniowych element&#243;w członkowskich w podwyborach i modułach podrzędnych. Wartość domyślna to 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Zwraca tabelę z listą tabel w określonym klastrze platformy Spark.",
        "Documentation.LongDescription": "Zwraca tabelę z listą tabel w elemencie <code>host</code> klastra platformy Spark używającego elementu <code>protocol</code>. Prawidłowe protokoły:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z listą tabel w określonym klastrze platformy Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Wprowadź nazwę organizacji i projektu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (tylko oferta Boards)",
        "Documentation.LongDescription": "Zwraca tabelę widoków analizy oferowanych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Importuj dane z klastra HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nZwraca listę tabel z klastra HDInsight Interactive Query określonego w bazie danych <code>database</code> na serwerze <code>server</code> tego klastra. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Możliwe jest również określenie opcjonalnego parametru <code>options</code> w celu kontrolowania następujących opcji:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Czas określający, jak długo oczekiwać przed porzuceniem próby nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n        <li><code>CommandTimeout</code>: Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna jest zależna od sterownika.</li>\r\n</ul>\r\nParametr <code>options</code> jest określany w postaci [opcja1 = wartość1, opcja2 = wartość2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Zwraca tabelę z kolumnami zamapowanymi na atrybuty jednostki w modelu Common Data Model, w tym typy danych.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Zwraca tabelę z kolumnami zamapowanymi na atrybuty jednostki w modelu Common Data Model, w tym typy danych. Kolumny z definicji jednostki, jeśli nie będą zamapowane, zostaną dodane, a wszystkie niezamapowane kolumny zostaną usunięte.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Zwraca moduł po zastosowaniu do niego parametru.",
        "Documentation.LongDescription": "Zwraca moduł po zastosowaniu parametru <code>parameter</code> z wartością <code>arguments</code> do <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Zmienia poziom szczegółowości kontekstu filtrów modułu, zwijając atrybuty zamapowane na określone kolumny.",
        "Documentation.LongDescription": "Zmienia wymiarowy poziom szczegółowości kontekstu filtrów modułu <code>cube</code>, zwijając atrybuty zamapowane na określone kolumny <code>columnNames</code>. Te kolumny są także usuwane z widoku tabelarycznego modułu.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Zamienia zestaw wymiarów zwracany przez element Cube.Dimensions.",
        "Documentation.LongDescription": "Zamienia zestaw wymiarów zwracanych przez element <code>Cube.Dimensions</code>.\r\n    Na przykład za pomocą tej funkcji można dodać kolumnę identyfikatora do atrybutu wymiaru, aby źródło danych mogło być grupowane według identyfikatora, a nie wyświetlanej wartości.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Stosuje listę funkcji modułu.",
        "Documentation.LongDescription": "Stosuje listę funkcji modułu <code>transforms</code> w module <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Zwraca tabelę tabel i widoków SQL dostępnych w bazie danych programu Db2.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych Db2 na serwerze <code>server</code> w wystąpieniu bazy danych o nazwie <code>database</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Za pomocą opcjonalnego parametru rekordu <code>options</code> można określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n<li><code>Implementation</code> : Określa wewnętrzną implementację dostawcy bazy danych do użycia. Prawidłowe wartości to: „IBM” i „Microsoft”.</li>\r\n<li><code>BinaryCodePage</code> : Identyfikator zestawu znak&#243;w kodowania (CCSID, Coded Character Set Identifier) na potrzeby dekodowania danych binarnych Db2 FOR BIT na ciągi znak&#243;w. Ma zastosowanie w przypadku opcji Implementation = &quot;Microsoft&quot;. Ustaw wartość 0, aby wyłączyć konwersję (domyślnie). Ustaw wartość 1, aby konwertować w oparciu o kodowanie bazy danych. Ustaw inny identyfikator CCSID, aby konwertować na kodowanie aplikacji.</li>\r\n<li><code>PackageCollection</code> : Określa wartość ciągu dla kolekcji pakiet&#243;w (wartość domyślna to „NULLID”), aby umożliwić używanie udostępnionych pakiet&#243;w wymaganych do przetwarzania instrukcji SQL. Ma zastosowanie w przypadku opcji Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Określa, czy połączenie jest nawiązywane za pośrednictwem bramy Db2 Connect. Dotyczy implementacji „Microsoft”.</li>\r\n</ul>\r\n\r\n    Parametr rekordu jest określany na przykład jako [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Pobiera zestaw danych z usługi Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Zwraca tabelę z właściwościami i zawartością obiektów blob znalezionych w określonym kontenerze z magazynu systemu Azure.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wiersz każdego pliku blob znalezionego pod adresem URL kontenera (<code>account</code>) z magazynu systemu Azure. Każdy wiersz zawiera właściwości pliku i link do jego zawartości.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Zwraca tabelę zawierającą wyniki uruchamiania określonych selektorów CSS względem podanego kodu HTML.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą wyniki działania określonych selektorów CSS względem dostarczonego elementu <code>html</code>. Parametr opcjonalny rekordu <code>options</code> można podać w celu określenia właściwości dodatkowych. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę na podstawie przykładowej wartości tekstu html.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Menedżer</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Wyodrębnia wszystkie elementy HREF z przykładowej wartości tekstowej w formacie HTML.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych programu Informix.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych Informix na serwerze <code>server</code> w wystąpieniu bazy danych o nazwie <code>database</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Zwraca tabelę zawierającą szczegóły potencjalnych klientów.",
        "Documentation.LongDescription": "Nawiązuje połączenie z punktem końcowym interfejsu API REST usługi Marketo pod adresem <code>url</code>/rest/v1/leads.json. Zwracani są wszyscy potencjalni klienci z listy <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Tworzy listę szczegółów dla trzech potencjalnych klientów",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabela zawierająca szczegóły wybranych potencjalnych klientów"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL punktu końcowego interfejsu API REST usługi Marketo skojarzonego z Twoim kontem.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Zwraca tabelę tabel, widoków i składowanych funkcji skalarnych SQL dostępnych w bazie danych programu MySQL.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele, widoki i składowane funkcje skalarne SQL dostępne w bazie danych programu MySQL na serwerze <code>server</code> w wystąpieniu bazy danych o nazwie <code>database</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Za pomocą opcjonalnego parametru rekordu <code>options</code> można określić następujące opcje:\r\n    <ul>\r\n<li><code>Encoding</code> : Wartość kodowania tekstu, kt&#243;ra określa zestaw znak&#243;w używany do kodowania wszystkich zapytań wysłanych do serwera (wartość domyślna to null).</li>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Wartość logiczna (true/false) określająca, czy kolumny tinyint mają być wymuszane na serwerze jako wartości logiczne. Wartość domyślna to true.</li>\r\n<li><code>OldGuids</code> : Wartość logiczna (true/false) określająca, czy jako identyfikatory GUID będą traktowane kolumny char(36), jeśli wartość to false, czy binary(16), jeśli wartość to true. Wartość domyślna to false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Wartość logiczna (true/false) określająca, czy zwr&#243;cić wszystkie tabele wszystkich baz danych (jeśli wartość to false), czy zwr&#243;cić tabele i widoki określonej bazy danych (jeśli wartość to true). Wartość domyślna to false.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu jest określany na przykład jako [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importuj dane z bazy danych IBM Netezza.",
        "Documentation.LongDescription": "\r\nZwraca tabelę z tabelami, widokami i przechowywanymi funkcjami Netezza z bazy danych Netezza Server <code>database</code> na serwerze <code>server</code>. Można opcjonalnie określić port z serwerem, oddzielając go dwukropkiem. Można również określić dodatkowy parametr rekordu, <code>options</code>, aby kontrolować następujące opcje:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: wartość logiczna (true/false) określająca, czy należy generować właściwości nawigacyjne dla zwróconych wartości (wartość domyślna: true)</li>\r\n        <li><code>HierarchicalNavigation</code>: wartość logiczna (true/false) określająca, czy należy wyświetlać tabele pogrupowane według ich nazw schematów (wartość domyślna: false)</li>\r\n        <li><code>ConnectionTimeout</code>: czas określający długość oczekiwania przed porzuceniem próby nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n        <li><code>CommandTimeout</code>: czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>NormalizeDatabaseName</code>: wartość logiczna (true/false) określająca, czy należy znormalizować nazwę bazy danych do wielkich liter, czy interpretować ją dosłownie (wartość domyślna: true).</li>\r\n</ul>\r\nParametr rekordu jest określany jako [opcja1 = wartość1, opcja2 = wartość2...].",
        "Documentation.Examples": [
          {
            "Description": "Lista tabel w projekcie urządzenia IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Zwraca wynik uruchomienia zapytania natywnego dla źródła danych ODBC.",
        "Documentation.LongDescription": "Zwraca wynik uruchomienia elementu <code>query</code> za pomocą parametrów połączenia <code>connectionString</code> przy użyciu interfejsu ODBC. Parametry połączenia <code>connectionString</code> mogą być tekstem lub rekordem z parami właściwość-wartość. Wartości właściwości mogą być tekstem lub liczbą. Można podać opcjonalny parametr rekordu <code>options</code>, aby określić dodatkowe parametry. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna to 15 sekund.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Zwróć wynik uruchomienia prostego zapytania względem podanych parametrów połączenia.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Zwraca wynik uruchomienia zapytania natywnego dla źródła danych OLE DB.",
        "Documentation.LongDescription": "Zwraca wynik uruchomienia elementu <code>query</code> za pomocą parametrów połączenia <code>connectionString</code> przy użyciu bazy danych OLE DB. Element <code>connectionString</code> może mieć wartość tekstową lub być rekordem par właściwości i wartości. Wartości właściwości mogą być tekstem lub liczbami. Aby określić dodatkowe właściwości, można podać opcjonalny parametr rekordu <code>options</code>. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Zwraca tabelę tabel i widoków SQL dostępnych w bazie danych programu PostgreSQL.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych PostgreSQL na serwerze <code>server</code> w wystąpieniu bazy danych o nazwie <code>database</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importuj dane z magazynu Snowflake Computing.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą listę tabel w magazynie <code>warehouse</code> usługi Snowflake Computing zlokalizowanym na serwerze <code>server</code>. Istnieje możliwość określenia opcjonalnego parametru rekordu <code>options</code> do kontrolowania następujących opcji:\r\n<ul>\r\n<li><code>Role</code>: Wartość tekstowa do użycia jako nazwa roli dla połączenia.</li>\r\n<li><code>CreateNavigationProperties</code>: Wartość logiczna (true/false) decydująca o tym, czy generować właściwości nawigacji dla zwróconych wartości (wartość domyślna to true).</li>\r\n<li><code>ConnectionTimeout</code>: Liczba sekund oczekiwania na odpowiedzi sieciowe od usługi Snowflake.</li>\r\n<li><code>CommandTimeout</code>: Liczba sekund oczekiwania na wykonanie zapytania.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl listę tabeli w magazynie Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Zwraca tabelę z listą tabel w określonym klastrze platformy Spark.",
        "Documentation.LongDescription": "Zwraca tabelę z listą tabel w elemencie <code>host</code> klastra platformy Spark używającego elementu <code>protocol</code>. Prawidłowe protokoły:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl tabele w wystąpieniu usługi Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Zwraca tabelę tabel, widoków i funkcji składowanych SQL z bazy danych programu SQL Server.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele, widoki i funkcje składowane SQL z bazy danych programu SQL Server <code>database</code> na serwerze <code>server</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem lub przecinkiem. Opcjonalny parametr rekordu (<code>options</code>) pozwala określić następujące opcje:\r\n    <ul>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Liczba określająca wartość klauzuli zapytania „maxdop” w wygenerowanym zapytaniu SQL.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n<li><code>MultiSubnetFailover</code> : Wartość logiczna (true/false) określająca wartość właściwości „MultiSubnetFailover” w parametrach połączenia (wartość domyślna to false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku podania wartości true powoduje pr&#243;bę przeprowadzenia składania konwersji typ&#243;w mogących zakończyć się niepowodzeniem i przez to spowodować niepowodzenie całego zapytania. Niezalecana do użycia og&#243;lnego.</li>\r\n<li><code>ContextInfo</code> : Wartość binarna, kt&#243;ra jest używana do ustawiania informacji CONTEXT_INFO przed uruchomieniem każdego polecenia.</li>\r\n<li><code>OmitSRID</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku podania wartości true powoduje pomijanie identyfikatora SRID podczas tworzenia danych Well-Known Text na podstawie typ&#243;w geometrycznych i geograficznych.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Wartość logiczna (true/false), kt&#243;ra w przypadku wartości true umożliwia składanie zapytań względem baz danych na tym samym serwerze. Wartością domyślną jest false.</li>\r\n</ul>\r\n\r\n    Parametr rekordu można podać na przykład w formacie [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Zwraca tabelę tabel i widoków SQL dostępnych w bazie danych programu Sybase.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą tabele i widoki SQL dostępne w bazie danych Sybase na serwerze <code>server</code> w wystąpieniu bazy danych o nazwie <code>database</code>. Opcjonalnie można określić port serwera oddzielony dwukropkiem. Za pomocą opcjonalnego parametru rekordu <code>options</code> można określić następujące opcje:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcja, kt&#243;ra jest używana do tworzenia nazw właściwości nawigacji.</li>\r\n<li><code>Query</code> : Natywne zapytanie SQL służące do pobierania danych. Jeśli zapytanie generuje wiele zestaw&#243;w wynik&#243;w, zwracany jest tylko pierwszy z nich.</li>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>ConnectionTimeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem pr&#243;by nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n</ul>\r\n\r\n    Parametr rekordu jest określany na przykład jako [opcja1 = wartość1, opcja2 = wartość2...] lub [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Dołącza kolumnę wartości jawnie określonych pozycji.",
        "Documentation.LongDescription": "Dołącza do tabeli <code>table</code> kolumnę o nazwie <code>newColumnName</code>, która zawiera wartości jawnie określonych pozycji.\r\n    Opcjonalna wartość <code>initialValue</code> to początkowa wartość indeksu. Opcjonalna wartość <code>increment</code> określa, o ile ma być zwiększana każda wartość indeksu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodaj kolumnę indeksu o nazwie „Index” do tabeli.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Dodaj kolumnę indeksu o nazwie „index”, zaczynając od wartości 10 i zwiększając wartości o 5, do tabeli.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Używając kolumny list w tabeli, tworzy kopię wiersza dla każdej wartości na liście.",
        "Documentation.LongDescription": "Używając tabeli <code>table</code>, w której kolumna <code>column</code> to lista wartości, dzieli listę na wiersze odpowiadające każdej wartości. Wartości z innych kolumn są duplikowane w każdym nowo tworzonym wierszu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Podziel kolumnę listy [Name] w tabeli.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propaguje wartość poprzedniej komórki do komórek zawierających wartości null, które znajdują się w tej samej kolumnie poniżej.",
        "Documentation.LongDescription": "Zwraca tabelę z tabeli określonej w parametrze <code>table</code>, w której wartość poprzedniej komórki jest propagowana do znajdujących się pod nią komórek o wartości null w kolumnie określonej w parametrze <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zwróć tabelę, w której wartości null w kolumnie [Place] zostały wypełnione wartością znajdującą się nad nimi w tabeli.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propaguje wartość komórki do komórek zawierających wartości null, które znajdują się w tej samej kolumnie powyżej.",
        "Documentation.LongDescription": "Zwraca tabelę z tabeli określonej w parametrze <code>table</code>, w której wartość następnej komórki jest propagowana do znajdujących się nad nią komórek o wartości null w kolumnie określonej w parametrze <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę, w której wartości null w kolumnie [Column2] zostały wypełnione wartością znajdującą się pod nimi w tabeli.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Zwraca wszystkie wiersze z tabeli, które zawierają dany tekst.",
        "Documentation.LongDescription": "Zwraca wiersze z tabeli <code>table</code>, które zawierają tekst <code>text</code>. Jeśli tekst nie zostanie znaleziony, zostanie zwrócony pusty tekst.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź w tabeli wiersze zawierające tekst „Bob”.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Zwraca określoną liczbę pierwszych wierszy tabeli.",
        "Documentation.LongDescription": "Zwraca pierwsze wiersze z tabeli <code>table</code>, w zależności od wartości parametru <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Jeśli parametr <code>countOrCondition</code> jest liczbą, określa liczbę wierszy (licząc od góry), które zostaną zwrócone. </li>\r\n    <li>Jeśli parametr <code>countOrCondition</code> jest warunkiem, będą zwracane wiersze spełniające ten warunek, aż do wiersza, który go nie spełnia.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwsze dwa wiersze w tabeli.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Znajdź w tabeli pierwszy wiersz, w którym wartość kolumny [a] jest większa od 0.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Zwraca tabelę będącą wynikiem połączenia zestawu podzielonych tabel.",
        "Documentation.LongDescription": "Zwraca tabelę będącą wynikiem połączenia zestawu podzielonych tabel, <code>partitions</code>. <code>partitionColumn</code> to nazwa kolumny, która ma zostać dodana. Jako typ kolumny jest ustawiana wartość domyślna <code>any</code>, ale może zostać określony przez element <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź typ elementu na liście <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Zwraca określoną liczbę ostatnich wierszy.",
        "Documentation.LongDescription": "Zwraca ostatnie wiersze z tabeli <code>table</code>, w zależności od wartości parametru <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Jeśli parametr <code>countOrCondition</code> jest liczbą, określa liczbę wierszy, które zostaną zwrócone, licząc od określonej pozycji (koniec — <code>countOrCondition</code>). </li>\r\n    <li>Jeśli parametr <code>countOrCondition</code> jest warunkiem, będą zwracane wiersze na kolejnych pozycjach rosnących spełniające ten warunek, aż do wiersza, który go nie spełnia.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź ostatnie dwa wiersze tabeli.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Znajdź ostatni wiersz, w którym wartość kolumny [a] jest większa od 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Zwraca tabelę, w której do wszystkich kolumn został dodany prefiks składający się z podanego tekstu.",
        "Documentation.LongDescription": "Zwraca tabelę, w której nazwy wszystkich kolumn z tabeli <code>table</code> są poprzedzane prefiksem w postaci podanego tekstu <code>prefix</code> oraz kropką w formie <code><code>prefix</code>.NazwaKolumny</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dołącz do kolumn w tabeli prefiks „MyTable”.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Zwraca wiersze, rozpoczynając od określonego przesunięcia.",
        "Documentation.LongDescription": "Zwraca wiersze z tabeli <code>table</code>, rozpoczynając od określonego przesunięcia <code>offset</code>. Opcjonalny parametr <code>count</code> określa, ile wierszy ma zostać zwróconych. Domyślnie zwracane są wszystkie wiersze po danym przesunięciu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zwróć wszystkie wiersze, rozpoczynając od przesunięcia 1 w tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Zwróć jeden wiersz, rozpoczynając od przesunięcia 1 w tabeli.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Usuwa określone kolumny.",
        "Documentation.LongDescription": "Usuwa określoną kolumnę <code>columns</code> z <code>table</code> podanej tabeli.\r\n    Jeśli określona kolumna nie istnieje, zgłaszany jest błąd, chyba że opcjonalny parametr <code>missingField</code> określa alternatywne zachowanie. (na przykład<code>MissingField.UseNull</code> lub <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń kolumnę [Phone] z tabeli.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Spróbuj usunąć nieistniejącą kolumnę z tabeli.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Usuwa wszystkie wystąpienia określonych wierszy z tabeli.",
        "Documentation.LongDescription": "Usuwa wszystkie wystąpienia określonych wierszy <code>rows</code> z tabeli <code>table</code>.\r\n    Można określić opcjonalny parametr <code>equationCriteria</code>, aby sterować porównywaniem wierszy tabeli.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Usuń wszystkie wiersze, w których [a = 1], z tabeli <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Usuwa określoną liczbę wierszy.",
        "Documentation.LongDescription": "Usuwa <code>count</code> wierszy od początku tabeli <code>table</code>, zaczynając od określonego przesunięcia <code>offset</code>. Jeśli nie zostanie określony parametr <code>count</code>, jest używana domyślna liczba wierszy równa 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń pierwszy wiersz z tabeli.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Usuń wiersz na pozycji 1 z tabeli.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Usuń dwa wiersze, zaczynając od pozycji 1, z tabeli.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Wykonuje operacje zmiany nazwy w formie {old, new}.",
        "Documentation.LongDescription": "Wykonuje dane operacje zmiany nazwy w kolumnach tabeli <code>table</code>. Operacja zamiany <code>renames</code> obejmuje listę dwóch wartości (stara nazwa kolumny i nowa nazwa kolumny).\r\n    Jeśli kolumna nie istnieje, jest zwracany wyjątek, chyba że opcjonalny parametr <code>missingField</code> określa alternatywę (np. <code>MissingField.UseNull</code> lub <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamień nazwę kolumny „CustomerNum” na „CustomerID” w tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamień nazwę kolumny „CustomerNum” na „CustomerID” i kolumny „PhoneNum” na „Phone” w tabeli.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamień nazwę kolumny „NewCol” na „NewColumn” w tabeli i ignoruj, jeśli kolumna nie istnieje.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Zwraca tabelę z kolumnami rozmieszczonymi w określonej kolejności.",
        "Documentation.LongDescription": "Zwraca tabelę będącą wynikiem rozmieszczenia kolumn tabeli wejściowej <code>table</code> w kolejności określonej przez parametr <code>columnOrder</code>. Kolejność kolumn, które nie są określone na liście, nie będzie zmieniana.\r\n     Jeśli kolumna nie istnieje, jest zwracany wyjątek, chyba że opcjonalny parametr <code>missingField</code> określa alternatywę (np. <code>MissingField.UseNull</code> lub <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zamień kolejność kolumn [Phone] i [Name] w tabeli.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zamień kolejność kolumn [Phone] i [Address] w tabeli lub użyj funkcji „MissingField.Ignore”. Nie zmienia tabeli, ponieważ kolumna [Address] nie istnieje.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Powtarza określoną liczbę razy wiersze tabel.",
        "Documentation.LongDescription": "Zwraca tabelę, w której wiersze z tabeli wejściowej <code>table</code> zostały powtórzone określoną liczbę razy (<code>count</code>).",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Powtórz dwa razy wiersze w tabeli.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Zamienia wartości błędów w określonych kolumnach na odpowiadającą im określoną wartość.",
        "Documentation.LongDescription": "Zamienia wartości błędów w określonych kolumnach tabeli <code>table</code> na nowe wartości na liście <code>errorReplacement</code>. Format listy: {{column1, value1}, …}. W jednej kolumnie może istnieć tylko jedna wartość zastępcza. Określenie kolumny więcej niż raz spowoduje zwrócenie błędu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamień wartość błędu na tekst „world” w tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Zamień wartość błędu na tekst „hello” w kolumnie A i na tekst „world” w kolumnie B w tabeli.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Zamienia klucze określonej tabeli.",
        "Documentation.LongDescription": "Zamienia klucze określonej tabeli.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamień istniejące klucze tabeli.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Zamienia wszystkie określone wiersze na dostarczone wiersze.",
        "Documentation.LongDescription": "Zamienia wszystkie określone wiersze w tabeli <code>table</code> na dostarczone wiersze. Wiersze przeznaczone do zamiany oraz wiersze zastępcze są określone w parametrze <code>replacements</code> przy użyciu formatowania {old, new}.\r\n    Opcjonalny parametr <code>equationCriteria</code> można określić, aby sterować porównywaniem wierszy tabeli.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zamień wiersze [a = 1, b = 2] i [a = 2, b = 3] na wiersze [a = -1, b = -2],[a = -2, b = -3] w tabeli.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Zwraca tabelę zawierającą tylko określone kolumny.",
        "Documentation.LongDescription": "Zwraca tabelę <code>table</code> zawierającą tylko określone kolumny <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: Podana tabela.</li>\r\n       <li><code>columns</code>: Lista kolumn z tabeli <code>table</code>, które mają zostać zwrócone. Kolumny w zwracanej tabeli mają kolejność określoną w parametrze <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Opcjonalnie)</i> Co zrobić, jeśli kolumna nie istnieje.  Przykład: <code>MissingField.UseNull</code> lub <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Uwzględniaj tylko kolumnę [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Uwzględniaj tylko kolumny [CustomerID] i [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Jeśli uwzględniona kolumna nie istnieje, domyślnym wynikiem jest błąd.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Jeśli dołączona kolumna nie zostanie zamknięta, opcja <code>MissingField.UseNull</code> utworzy kolumnę wartości null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Wybiera wiersze, które spełniają warunek.",
        "Documentation.LongDescription": "Zwraca tabelę wierszy z tabeli <code>table</code>, które są zgodne z opcjami wyboru określonymi przez parametr <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zaznacz wiersze w tabeli, w których wartości kolumny [CustomerID] są większe niż 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Wybierz wiersze w tabeli, w których nazwy nie zawierają litery „B”.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Sortuje tabelę przy użyciu co najmniej jednej nazwy kolumny i kryteriów sortowania.",
        "Documentation.LongDescription": "Sortuje tabelę <code>table</code> przy użyciu listy zawierającej co najmniej jedną nazwę kolumny oraz opcjonalnego parametru <code>comparisonCriteria</code> w formie { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Posortuj tabelę według kolumny „OrderID”.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Posortuj tabelę według kolumny „OrderID” w kolejności malejącej.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Posortuj tabelę według kolumny „CustomerID”, a następnie kolumny „OrderID”, z kolumną „CustomerID” w kolejności rosnącej.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformuje nazwy kolumn za pomocą podanej funkcji.",
        "Documentation.LongDescription": "Przekształca nazwy kolumn przy użyciu podanej funkcji <code>nameGenerator</code>. Prawidłowe opcje:\r\n    <div>\r\n      <code>MaxLength</code> Określa maksymalną długość nowych nazw kolumn. Jeśli podana funckja zwróci dłuższą nazwe kolumny, to zostanie ona przycięta.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> to funkcja porównująca, używana do sterowania porównywaniem podczas generowania nowych nazw kolumn. Funkcje porównujące mogą być używane do przeprowadzania porównania nie wymagającego rozróżniania wielkości liter, uwzględniającego uwarunkowania kulturowe lub lokalne.\r\n    </div>\r\n    <div>\r\n      W języku formuły są dostępne następujące wbudowane funkcje porównujące:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: służy do wykonywania dokładnego porównania porządkowego</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: służy do wykonywania dokładnego porównania bez uwzględniania wielkości liter</li>\r\n      <li> <code>Comparer.FromCulture</code>: służy do porównywania uwzględniającego uwarunkowania kulturowe</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Usuń znak <code>#(tab)</code> z nazw kolumn",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformuj nazwy kolumn w celu wygenerowania 6-znakowych nazw bez rozróżniania wielkości liter.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Stosuje przekształcenia typów w formie { column, type }, używając określonej kultury.",
        "Documentation.LongDescription": "Zwraca tabelę powstałą w wyniku zastosowania do kolumn tabeli wejściowej <code>table</code> operacji przekształcania określonych w parametrze <code>typeTransformations</code> (używany format to { column name, type name}), z użyciem kultury określonej w opcjonalnym parametrze <code>culture</code> (np. „en-US”).\r\n    Jeśli kolumna nie istnieje, jest zgłaszany wyjątek.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Przekształć wartości liczbowe w kolumnie [a] tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> na wartości tekstowe.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Przekształca wartości co najmniej jednej kolumny.",
        "Documentation.LongDescription": "Przekształca <code>table</code> przez zastosowanie każdej operacji kolumny wymienionej w <code>transformOperations</code> (gdzie format to { column name, transformation } lub { column name, transformation, new column type }).\r\n    Jeśli element <code>defaultTransformation</code> zostanie określony, operacja zostanie zastosowana do wszystkich kolumn niewymienionych w <code>transformOperations</code>.\r\n    Jeśli kolumna wymieniona w <code>transformOperations</code> nie istnieje, zgłaszany jest wyjątek, chyba że opcjonalny parametr <code>missingField</code> określa alternatywę (na przykład <code>MissingField.UseNull</code> lub  <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Przekształć wartości tekstowe w kolumnie [A] na wartości liczbowe, a wartości liczbowe w kolumnie [B] na wartości tekstowe.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Przekształć wartości liczbowe w brakującej kolumnie [X] na wartości tekstowe i ignoruj nieistniejące kolumny.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Przekształć wartości liczbowe w brakującej kolumnie [X] na wartości tekstowe i ustaw wartość null jako wartość domyślną w nieistniejących kolumnach.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Zwiększ wartości liczbowe w kolumnie [B] i przekonwertuj je na wartości tekstowe oraz przekonwertuj wszystkie pozostałe kolumny na liczby.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Tworzy lub rozszerza tabelę przy użyciu zdefiniowanych przez użytkownika procedur obsługi operacji zapytań i akcji.",
        "Documentation.LongDescription": "<p>Zwraca widok <code>table</code>, w którym funkcje określone w tabeli <code>handlers</code> są używane zamiast domyślnego zachowania operacji, gdy operacja jest stosowana do widoku.</p>\r\n<p>Jeśli podano wartość <code>table</code>, wszystkie funkcje procedury obsługi są opcjonalne. Jeśli nie podano wartości <code>table</code>, wymagane będą funkcje procedury obsługi <code>GetType</code> i <code>GetRows</code>. Jeśli funkcja procedury obsługi nie jest określona w przypadku danej operacji, zamiast tego zostanie zastosowane zachowanie domyślne w odniesieniu do widoku <code>table</code> (z wyjątkiem operacji <code>GetExpression</code>).</p>\r\n<p>Funkcje procedury obsługi muszą zwracać wartość semantycznie równoważną wynikowi zastosowania operacji w stosunku do widoku <code>table</code> (lub widoku wynikowego w przypadku operacji <code>GetExpression</code>).</p>\r\n<p>Jeśli funkcja procedury obsługi zgłosi błąd, do widoku zostanie zastosowane domyślne zachowanie operacji.</p>\r\n<p>Funkcji <code>Table.View</code> można użyć, aby wdrożyć składanie dla źródła danych (tłumaczenie zapytań M na zapytania specyficzne dla źródła, na przykład w celu tworzenia instrukcji akcji języka T-SQL z zapytań M).</p>\r\n<p>Z bardziej kompleksowym opisem funkcji <code>Table.View</code> można zapoznać się w opublikowanej dokumentacji dotyczącej łącznika niestandardowego usługi Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Utwórz widok podstawowy, który nie wymaga dostępu do wierszy w celu określenia typu lub liczby wierszy.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Wprowadź nazwę organizacji i projektu.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (tylko oferta Boards)",
        "Documentation.LongDescription": "Zwraca tabelę widoków analizy oferowanych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importuj dane z usługi Vertica",
        "Documentation.LongDescription": "Zwraca tabelę schematów dostępną na serwerze o nazwie określonej przez parametr <code>server</code> w bazie danych o nazwie określonej przez parametr <code>database</code>.\r\nMożna podać opcjonalny parametr rekordu <code>options</code>w celu określenia dodatkowych właściwości. Rekord może zawierać następujące pola:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Czas trwania decydujący o tym, jak długie ma być oczekiwanie przed zaniechaniem próby nawiązania połączenia z serwerem. Wartość domyślna zależy od sterownika.</li>\r\n    <li><code>CommandTimeout </code>: Czas trwania decydujący o tym, jak długo zapytanie po stronie serwera może działać, zanim zostanie anulowane. Wartość domyślna zależy od sterownika.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl listę tabel w usłudze Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę z zawartością raportu z rozwiązania Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Tworzy wywołanie podanego punktu końcowego raportowania rozwiązania Webtrends i zwraca wszystkie dane w postaci tabeli.",
        "Documentation.Examples": [
          {
            "Description": "Tworzy wywołanie do punktu końcowego raportu elementów odwiedzających rozwiązania Webtrends dotyczące danych z ostatnich 30 dni",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabela danych elementów odwiedzających"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Przywraca treść VisualQuery (vqr), raportów lub funkcji opublikowanych przez oprogramowanie HR Zucchetti",
        "Documentation.Examples": [
          {
            "Description": "Wniosek wg listy pracowników",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Zwraca listę domen usługi Active Directory znajdujących się w tym samym lesie co określona domena lub domena aktualnie używanego komputera, jeśli domena nie zostanie określona.",
        "Documentation.LongDescription": "Zwraca listę domen usługi Active Directory znajdujących się w tym samym lesie co określona domena lub domena aktualnie używanego komputera, jeśli domena nie zostanie określona.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Zwraca wynik uruchomienia zapytania natywnego dla źródła danych ADO.NET.",
        "Documentation.LongDescription": "Zwraca wyniki polecenia <code>query</code> z parametrami połączenia <code>connectionString</code> przy użyciu dostawcy ADO.NET <code>providerName</code>. Parametry <code>connectionString</code> mogą mieć postać tekstu lub par wartości właściwości. Wartości właściwości mogą być tekstowe lub liczbowe. Opcjonalny parametr rekordu, <code>options</code>, może być podany, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna wynosi dziesięć minut.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Wartość logiczna (true/false) określająca, czy mają zostać utworzone opcje parametr&#243;w połączenia zgodne z programem SQL Server na potrzeby uwierzytelniania systemu Windows. Wartość domyślna to true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Zwraca pakiety raportów w rozwiązaniu Adobe Analytics.",
        "Documentation.LongDescription": "Zwraca tabelę wielowymiarowych pakietów z rozwiązania Adobe Analytics. Można ustawić opcjonalny parametr rekordu <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Wartość logiczna (true/false) określająca, czy wyświetlać tabele pogrupowane według ich nazw schematu (wartość domyślna to false).</li>\r\n<li><code>MaxRetryCount</code> : Liczba ponownych pr&#243;b do wykonania podczas sondowania wynik&#243;w zapytania. Wartość domyślna to 120.</li>\r\n<li><code>RetryInterval</code> : Czas między ponownymi pr&#243;bami. Wartość domyślna to 1 sekunda.</li>\r\n<li><code>Implementation</code> : Określa wersję interfejsu API usługi Adobe Analytics. Prawidłowe wartości to: „2.0”. Wartość domyślna używa interfejsu API w wersji 1.4</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Funkcja LLAP programu Hive",
        "Documentation.Caption": null,
        "Documentation.Description": "Importuj dane z funkcji LLAP programu Hive",
        "Documentation.LongDescription": "\r\nZwraca listę tabel z funkcji LLAP programu Hive określonego w bazie danych <code>database</code> na serwerze <code>server</code> tej funkcji przy użyciu wybranego protokołu <code>protocol</code>. Protokół transportu platformy Thrift jest typem wyliczanym, który przyjmuje wartości „Standard” i „HTTP”. Możliwe jest określenie opcjonalnego parametru <code>options</code> w celu kontrolowania następujących opcji:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Czas określający, jak długo oczekiwać przed porzuceniem próby nawiązania połączenia z serwerem. Wartość domyślna jest zależna od sterownika.</li>\r\n        <li><code>CommandTimeout</code>: Czas określający, jak długo może być wykonywane zapytanie po stronie serwera, zanim zostanie anulowane. Wartość domyślna jest zależna od sterownika.</li>\r\n</ul>\r\nParametr <code>options</code> jest określany w postaci [opcja1 = wartość1, opcja2 = wartość2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z okresu od 2017-05-01 do 2017-06-15",
            "Code": "pozwól, aby    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          miał wynik = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)   \r\n      w wyniku\r\n",
            "Result": "Funkcja zwróci dane podsumowań z okresu od 2017-05-01 do 2017-06-15"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z kwietnia 2017 r.",
            "Code": "pozwól, aby    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          miał wynik = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)   \r\n      w wyniku     \r\n",
            "Result": "Funkcja zwróci dane z okresu od 2017-04-01 do 2017-04-30"
          },
          {
            "Description": "Zakładając, że bieżąca data to 2017-06-15, pobierz dane podsumowań z okresu od kwietnia 2017 r. do chwili obecnej.",
            "Code": "pozwól, aby    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          miał wynik = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)   \r\n      w wyniku\r\n          result",
            "Result": "Funkcja zwróci dane z okresu od 2017-04-01 do 2017-06-15"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Wprowadź nazwę organizacji i projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Zwraca tabelę źródeł danych OData udostępnianych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Połącz się z wystąpieniem usługi Dataverse (usługi Dynamics 365 i PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Scala określoną tabelę wymiarów w kontekście filtrów modułu i zmienia wymiarowy poziom szczegółowości kontekstu filtrów, rozwijając określony zestaw atrybutów wymiarów.",
        "Documentation.LongDescription": "Scala określoną tabelę wymiarów (<code>dimensionSelector</code>) w kontekście filtrów modułu (<code>cube</code>) i zmienia wymiarowy poziom szczegółowości, rozwijając określony zestaw (<code>attributeNames</code>) atrybutów wymiarów. Atrybuty wymiarów są dodawane do widoku tabelarycznego z kolumnami o nazwie <code>newColumnNames</code> lub <code>attributeNames</code>, jeśli nie określono.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Dodaje kolumnę do modułu zawierającego wyniki miary zastosowanej w kontekście wiersza dla każdego wiersza.",
        "Documentation.LongDescription": "Dodaje kolumnę o nazwie <code>column</code> do modułu <code>cube</code> zawierającego wyniki miary <code>measureSelector</code> zastosowanej w kontekście wiersza dla każdego wiersza. Zmiany w poziomie szczegółowości i fragmentacji wymiarów mają wpływ na stosowanie miary. Wartości miary zostaną dostosowane po wykonaniu pewnych operacji modułu.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Wprowadź środowisko i firmę na potrzeby usługi Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Wprowadź środowisko i firmę na potrzeby usługi Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Wprowadź środowisko i firmę na potrzeby usługi Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Wprowadź środowisko i firmę na potrzeby usługi Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą odpowiednie dane usługi Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Zwraca zawartość bieżącego skoroszytu programu Excel.",
        "Documentation.LongDescription": "Zwraca zawartość bieżącego skoroszytu programu Excel. Zwraca tabele, nazwane zakresy i tablice dynamiczne. W przeciwieństwie do <code>Excel.Workbook</code> nie zwraca arkuszy.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Zwraca tabelę zawartości z konta programu Microsoft Exchange.",
        "Documentation.LongDescription": "Zwraca spis treści z konta programu Microsoft Exchange <code>mailboxAddress</code>. Jeśli nie określono konta <code>mailboxAddress</code>, zostanie użyte domyślne konto dla poświadczeń.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Magazyn",
        "Documentation.Caption": "Magazyn",
        "Documentation.Description": "Importuje dane z magazynu",
        "Documentation.LongDescription": "Importuje dane z magazynu"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Zwraca konta usługi Google Analytics.",
        "Documentation.LongDescription": "Zwraca konta usługi Google Analytics, do których można uzyskać dostęp za pomocą bieżących poświadczeń.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importuj dane z bazy danych usługi Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Zwraca tabelę z listą dostępnych projektów w usłudze Google BigQuery. Opcjonalny parametr rekordu <code>options</code> może zostać określony do sterowania następującymi opcjami:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Czas trwania decydujący o tym, jak długo należy czekać przed zarzuceniem próby nawiązania połączenia z serwerem. Wartością domyślną jest wartość limitu czasu połączenia ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Czas trwania decydujący o tym, jak długo zapytanie po stronie serwera może być wykonywane przed anulowaniem.</li>\r\n        <li><code>BillingProject</code>: Identyfikator projektu rozliczeniowego. Domyślną wartością jest pierwszy dostępny projekt.</li>\r\n      <li><code>UseStorageApi</code>: Określa, czy należy użyć interfejsu API magazynu BigQuery do dużych zestawów wyników. Domyślna wartość to true pozwalająca użyć interfejsu API magazynu. Ustawienie wartości false spowoduje, że nie będzie używany interfejs API magazynu</li>\r\n   </ul>\r\n      Parametr rekordu jest określany w postaci [opcja1 = wartość1, opcja2 = wartość2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Wyświetl listę dostępnych projektów w usłudze Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importuj dane z magazynu Lakehouse",
        "Documentation.Description": "Importuj dane z magazynu Lakehouse",
        "Documentation.LongDescription": "Nawiąż połączenie ze wszystkimi magazynami Lakehouse, do których masz dostęp, i wybierz jednostki, których chcesz użyć"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę z kluczowymi danymi usługi MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Zwraca tabelę z kluczowymi danymi usługi MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę z kluczowymi danymi usługi MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabela z kluczowymi danymi usługi MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Zwraca tabelę zawierającą działania związane z potencjalnymi klientami.",
        "Documentation.LongDescription": "Nawiązuje połączenie z punktem końcowym interfejsu API REST usługi Marketo pod adresem <code>url</code>/rest/v1/activities.json. Zwracane są wszystkie działania z listy <code>activityIds</code>, które miały miejsce od <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Tworzy tabelę działań typu „Odwiedź stronę sieci Web” od 1 listopada 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabela zawierająca szczegóły wszystkich działań typu „Odwiedź stronę sieci Web” od 1 listopada"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Przepływy danych usługi Power BI (starsza wersja)",
        "Documentation.Caption": "Importuj dane z przepływu danych usługi Power BI",
        "Documentation.LongDescription": "Nawiąż połączenie z wszystkimi przepływami danych usługi Power BI, do których masz dostęp, i wybierz jednostki, których chcesz użyć."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Składnica danych",
        "Documentation.Caption": "Składnica danych",
        "Documentation.Description": "Importuje dane ze składnic danych",
        "Documentation.LongDescription": "Importuje dane ze składnic danych"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Przepływy danych",
        "Documentation.Caption": "Importuj dane z przepływu danych",
        "Documentation.Description": "Importuj dane z przepływu danych",
        "Documentation.LongDescription": "Nawiąż połączenie z wszystkimi przepływami danych, do których masz dostęp, i wybierz jednostki, których chcesz użyć"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importuj dane z usługi QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Zwraca tabelę z listą dostępnych tabel w usłudze QuickBooks Online. Opcjonalny parametr rekordu <code>options</code> może zostać określony do sterowania następującymi opcjami:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Czas trwania decydujący o tym, jak długo należy czekać przed zarzuceniem próby nawiązania połączenia z serwerem.</li>\r\n            <li><code>CommandTimeout</code>: Czas trwania decydujący o tym, jak długo zapytanie po stronie serwera może być wykonywane przed anulowaniem.</li>\r\n          </ul>\r\n        Parametr rekordu jest określany w postaci [opcja1 = wartość1, opcja2 = wartość2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Zwraca obiekty z konta usług Salesforce.",
        "Documentation.LongDescription": "Zwraca obiekty z konta usług Salesforce określonego w poświadczeniach. Konto zostanie połączone za pośrednictwem dostarczonego środowiska <code>loginUrl</code>. Jeśli nie ma dostarczonego żadnego środowiska, konto zostanie połączone z serwerem produkcyjnym (https://login.salesforce.com). Parametr rekordu opcjonalnego <code>options</code> może zostać podany w celu określenia dodatkowych właściwości. Rekord ten może zawierać następujące pola:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Wartość logiczna (true/false) określająca, czy na podstawie zwr&#243;conych wartości mają być generowane właściwości nawigacji (wartość domyślna to false).</li>\r\n<li><code>ApiVersion</code> : Wersja interfejsu API usługi Salesforce do użycia w tym zapytaniu. Gdy nie zostanie określona, używana będzie wersja 29.0 interfejsu API.</li>\r\n<li><code>Timeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem żądania kierowanego do serwera. Wartość domyślna jest zależna od źr&#243;dła.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Zwraca raporty z konta usług Salesforce.",
        "Documentation.LongDescription": "Zwraca raporty z konta usług Salesforce określonego w poświadczeniach. Konto zostanie połączone za pośrednictwem dostarczonego środowiska <code>loginUrl</code>. Jeśli nie ma dostarczonego żadnego środowiska, konto zostanie połączone z serwerem produkcyjnym (https://login.salesforce.com). Można podać opcjonalny parametr rekordu (<code>options</code>), aby określić dodatkowe właściwości. Rekord ten może zawierać następujące pola:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Wersja interfejsu API usługi Salesforce do użycia w tym zapytaniu. Gdy nie zostanie określona, używana będzie wersja 29.0 interfejsu API.</li>\r\n<li><code>Timeout</code> : Czas określający, jak długo oczekiwać przed porzuceniem żądania kierowanego do serwera. Wartość domyślna jest zależna od źr&#243;dła.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Zwraca moduły informacji (InfoCube) i zapytania w systemie SAP Business Warehouse pogrupowane według obszaru informacji (InfoArea).",
        "Documentation.LongDescription": "Zwraca tabelę modułów informacji (InfoCube) i zapytania pogrupowane według obszaru informacji (InfoArea) z wystąpienia oprogramowania SAP Business Warehouse na serwerze <code>server</code> o numerze systemu <code>systemNumberOrSystemId</code> i identyfikatorze klienta <code>clientId</code>. Opcjonalny parametr rekordu (<code>optionsOrLogonGroup</code>) pozwala określić następujące opcje:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę arkuszy, raportów, folderów i obszarów roboczych z interfejsu API narzędzia Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Zwraca zagnieżdżoną tabelę dostępnych arkuszy, raportów, folderów i obszarów roboczych z interfejsu API narzędzia Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca arkusze, foldery, raporty i obszary robocze dostępne na najwyższym poziomie hierarchii narzędzia Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabela arkuszy, folderów, raportów i obszarów roboczych na najwyższym poziomie hierarchii narzędzia Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę dostępnych metryk z interfejsu API usługi SparkPost w wersji 1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Ta funkcja umożliwia pobieranie danych z określonego punktu końcowego „Metrics” interfejsu API SparkPost w wersji 1. Podczas odświeżania tych tabel lub wywoływania interfejsu API SparkPost przy użyciu tego łącznika należy pamiętać, że interfejs API SparkPost ma ścisły limit szybkości interfejsu API. Jeśli z serwera SparkPost jest zwracany kod stanu 429, oznacza to, że osiągnięto limit szybkości i trzeba chwilę poczekać przed wykonaniem kolejnych wywołań. W przypadku wybierania wartości parametru liczby dni należy zauważyć, że w interfejsie API są przechowywane dane tylko z 6 miesięcy.",
        "Documentation.Examples": [
          {
            "Description": "Pobiera metryki skuteczności count_sent i count_rejected dla wszystkich elementów campaign_ids zagregowanych w ciągu ostatnich trzech dni.",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabela"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Nawiązuje połączenie z interfejsem API usługi Stripe",
        "Documentation.LongDescription": "Nawiązuje połączenie z interfejsem API usługi Stripe pod adresem https://api.stripe.com/v1/<code>method</code> z rekordem <code>additionalParameters</code> przekazanym jako parametry dodatkowe i listą <code>ColumnNames</code> oczekiwanych nazw kolumn. Stosowana wersja usługi Stripe to 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Zwraca tabelę zawierającą zdarzenia utworzone po 1 listopada 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabela zawierająca określone zdarzenia powiązane z bieżącym kontem usługi Stripe"
          },
          {
            "Description": "Zwraca tabelę zawierającą wszystkie jednostki SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabela zawierająca wszystkie jednostki SKU powiązane z bieżącym kontem usługi Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Zwraca tabelę zawierającą listę dostępnych tabel i funkcji usługi Stripe.",
        "Documentation.LongDescription": "Zwraca tabelę zawierającą listę dostępnych tabel i funkcji usługi Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Obszar roboczy usługi Azure Synapse Analytics",
        "Documentation.Caption": "Obszar roboczy usługi Azure Synapse Analytics",
        "Documentation.LongDescription": "Łącznik PQ dla obszaru roboczego usługi Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Dodaje kolumnę o określonej nazwie. Wartość jest obliczana przy użyciu określonej funkcji wyboru wykonywanej na każdym wierszu wejściowym.",
        "Documentation.LongDescription": "Dodaje kolumnę o nazwie <code>newColumnName</code> do tabeli <code>table</code>. Wartości kolumny są obliczane przy użyciu określonej funkcji wyboru <code>columnGenerator</code> wykonywanej na każdym wierszu wejściowym.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodaj kolumnę liczb o nazwie „ TotalPrice” do tabeli, gdzie każda wartość jest sumą kolumn [Price] i [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Dodaje nową kolumnę zawierającą reprezentatywne wartości uzyskane z użyciem wartości grupowania rozmytego w określonej kolumnie w tabeli.",
        "Documentation.LongDescription": "Dodaje nową kolumnę <code>newColumnName</code> do tabeli <code>table</code> przy użyciu reprezentatywnych wartości <code>columnName</code>. Wartości reprezentatywne są uzyskiwane przez rozmyte dopasowanie wartości w <code>columnName</code> dla każdego wiersza.\r\n    Aby określić sposób porównywania kolumn kluczy, można dołączać <p>opcjonalny zestaw <code>options</code>. Opcje obejmują: \r\n    <ul>\r\n<li><code>Culture</code> : Umożliwia grupowanie rekord&#243;w na podstawie reguł dotyczących kultury. Może to być dowolna prawidłowa nazwa kultury. Na przykład opcja Kultura „ja-JP” grupuje rekordy oparte na kulturze japońskiej. Wartość domyślna to „”, kt&#243;ra grupuje na podstawie niezmiennej kultury angielskiej.</li>\r\n<li><code>IgnoreCase</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia grupowanie kluczy bez uwzględniania wielkości liter. Na przykład gdy wartość jest r&#243;wna true, „winogrona” są zgrupowane z „winogronami”. Wartość domyślna to true.</li>\r\n<li><code>IgnoreSpace</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia łączenie części tekstowych w celu znalezienia grup. Na przykład gdy wartość jest r&#243;wna true, „wino grona” są grupowane z „winogronami”. Wartość domyślna to true.</li>\r\n<li><code>SimilarityColumnName</code> : Nazwa kolumny pokazującej podobieństwo między wartością wejściową i wartością reprezentatywną dla tych danych wejściowych. Wartość domyślna jest r&#243;wna null, a w takim przypadku nowa kolumna podobieństw nie zostanie dodana.</li>\r\n<li><code>Threshold</code> : Liczba z zakresu od 0,00 do 1,00, kt&#243;ra określa wskaźnik podobieństwa, przy kt&#243;rym zostaną zgrupowane dwie wartości.\r\n    Na przykład „Winogrona” i „Winogroa” (brak litery „n”) są zgrupowane ze sobą tylko wtedy, gdy ta opcja jest ustawiona na wartość mniejszą niż 0,90.\r\n   Pr&#243;g wynoszący 1,00 zezwala tylko na dokładne dopasowania.\r\n    (Pamiętaj, że rozmyte „dokładne dopasowanie” może ignorować r&#243;żnice, takie jak wielkość liter, kolejność wyraz&#243;w i interpunkcję).\r\n    Wartość domyślna to 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela umożliwiająca grupowanie rekord&#243;w na podstawie mapowań wartości niestandardowych. Powinna zawierać kolumny „Od” i „Do”. Na przykład „Winogrona” są zgrupowane z „Rodzynkami”, jeśli tabela transformacji ma kolumnę „Od” zawierającą „Winogrona” oraz kolumnę „Do” zawierającą „Rodzynki”. Zauważ, że transformacja zostanie zastosowana do wszystkich wystąpień tekstu w tabeli transformacji. Za pomocą powyższej tabeli transformacji „winogrona są słodkie” r&#243;wnież zostaną zgrupowane z „rodzynki są słodkie”.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Znajdź reprezentatywne wartości dla lokalizacji pracowników.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Wykonuje sprzężenie tabel z użyciem określonych kolumn i umieszcza wynik sprzężenia w nowej kolumnie.",
        "Documentation.LongDescription": "Tworzy sprzężenie wierszy tabeli <code>table1</code> z wierszami tabeli <code>table2</code> na podstawie równości wartości kolumn klucza wybranych przez parametr <code>key1</code> (dla tabeli <code>table1</code>) i parametr <code>key2</code> (dla tabeli <code>table2</code>). Wyniki są umieszczane w kolumnie o nazwie <code>newColumnName</code>.\r\nTa funkcja działa podobnie do funkcji Table.Join z parametrem JoinKind o wartości LeftOuter, z tym że wyniki są prezentowane w sposób zagnieżdżony, a nie spłaszczony.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodaj do tabeli ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) kolumnę sprzężenia o nazwie „price/stock” z tabeli ({[saleID = 1, price = 20], [saleID = 2, price = 10]}), wykonując sprzężenie według pola [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Dodaje klucz do tabeli.",
        "Documentation.LongDescription": "Dodaje klucz do <code>table</code>, gdzie <code>columns</code> jest listą nazw kolumn definiujących klucz, a <code>isPrimary</code> określa, czy klucz jest kluczem podstawowym.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dodaj jednokolumnowy klucz podstawowy do tabeli.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Dołącza kolumnę z klasyfikacją co najmniej jednej innej kolumny.",
        "Documentation.LongDescription": "Dołącza kolumnę o nazwie <code>newColumnName</code> do <code>table</code> z klasyfikacją co najmniej jednej innej kolumny opisanej przez <code>comparisonCriteria</code>.\r\nOpcja RodzajKlasyfikacji w <code>options</code> może być używana przez zaawansowanych użytkowników do wybrania bardziej szczegółowej metody klasyfikacji.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Dodaj kolumnę o nazwie „KlasyfikacjaPrzychodów” do tabeli, która szereguje kolumnę „Przychody” od tej z wartością najwyższą do najniższej.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agreguje kolumnę tabel do wielu kolumn w tabeli zawierającej.",
        "Documentation.LongDescription": "Agreguje tabele w kolumnie <code>table</code>[<code>column</code>] do wielu kolumn zawierających zagregowane wartości dla tabel. Parametr <code>aggregations</code> służy do określania kolumn zawierających tabele do zagregowania, funkcje agregujące do zastosowania do tabel w celu wygenerowania wartości oraz nazwy kolumn agregacji do utworzenia.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zagreguj kolumny tabel z tabeli <code>[t]</code> w tabeli <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> do sumy kolumny <code>[t.a]</code>, wartości minimalnej i maksymalnej kolumny <code>[t.b]</code> oraz liczby wartości w kolumnie <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Zachowuje początkowe przesunięcie, a następnie naprzemiennie pobiera i pomija kolejne wiersze.",
        "Documentation.LongDescription": "Zachowuje początkowe przesunięcie, a następnie naprzemiennie pobiera i pomija kolejne wiersze.\r\n    <ul>\r\n       <li><code>table</code>: Tabela wejściowa.</li>\r\n       <li><code>offset</code>: Liczba wierszy do zachowania przed rozpoczęciem iteracji.</li>\r\n       <li><code>skip</code>: Liczba wierszy do usunięcia w każdej iteracji.</li>\r\n       <li><code>take</code>: Liczba wierszy do zachowania w każdej iteracji.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz tabelę na podstawie tabeli, rozpoczynając od pierwszego wiersza, pomijając jedną wartość, a następnie zachowując jedną wartość.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Łączy określone kolumny w nową kolumnę, używając określonej funkcji łączenia.",
        "Documentation.LongDescription": "Łączy określone kolumny w nową kolumnę, używając określonej funkcji łączenia.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Połącz nazwisko i imię w nową kolumnę, oddzielając je przecinkiem.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Łączy określone kolumny w nową kolumnę z wartościami w postaci rekordów, gdzie każdy rekord zawiera nazwy pól i wartości odpowiadające nazwom i wartościom połączonych kolumn.",
        "Documentation.LongDescription": "Łączy określone kolumny <code>table</code> w nową kolumnę o nazwie <code>newColumnName</code> zawierającą wartości w postaci rekordów, przy czym każdy rekord ma nazwy i wartości pól odpowiadające nazwom i wartościom kolumn, które zostały połączone. W przypadku określenia rekordu dla elementu <code>options</code> można podać następujące opcje:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: jeśli zostanie podana wartość w postaci tekstu, wskazuje, że dana nazwa kolumny ma być traktowana jako nazwa wyświetlana rekordu. Nie musi to być jedna z kolumn w rekordzie.</li>\r\n     <li> <code>TypeName</code>: jeśli zostanie podana wartość w postaci tekstu, określa nazwę typu logicznego dla wynikowego rekordu, której można używać podczas ładowania danych do sterowania zachowaniem środowiska ładowania.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplikuje kolumnę o określonej nazwie. Wartości i typ są kopiowane z kolumny źródłowej.",
        "Documentation.LongDescription": "Zduplikuj kolumnę o nazwie <code>columnName</code> do tabeli <code>table</code>. Wartości i typ kolumny <code>newColumnName</code> są kopiowane z kolumny <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zduplikuj kolumnę „a” do kolumny o nazwie „skopiowana kolumna” w tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Rozwija kolumnę rekordów na kolumny zawierające wartości każdego z nich.",
        "Documentation.LongDescription": "Używając kolumny rekordów <code>column</code> w tabeli wejściowej <code>table</code>, tworzy tabelę zawierającą kolumnę dla każdego pola w rekordzie. Opcjonalnie można określić parametr <code>newColumnNames</code> w celu zagwarantowania unikatowości nazw kolumn w nowej tabeli.\r\n    <ul>\r\n        <li><code>table</code>: Oryginalna tabela z kolumną rekordów do rozwinięcia. </li>\r\n        <li><code>column</code>: Kolumna do rozwinięcia.</li>\r\n        <li><code>fieldNames</code>: Lista pól do rozwinięcia jako kolumny w tabeli.</li>\r\n        <li><code>newColumnNames</code>: Lista nazw, które zostaną nadane nowym kolumnom. Nazwy nowych kolumn nie mogą stanowić duplikatów nazw kolumn w nowej tabeli.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozwiń kolumnę [a] w tabeli <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> na 3 kolumny: „aa”, „bb” i „cc”.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Rozwija kolumnę rekordów lub kolumnę tabel na wiele kolumn w tabeli zawierającej.",
        "Documentation.LongDescription": "Rozwija tabele w kolumnie <code>table</code>[<code>column</code>] na wiele wierszy i kolumn. Parametr <code>columnNames</code> służy do wybierania kolumn z tabeli wewnętrznej, które zostaną rozwinięte. Określając parametr <code>newColumnNames</code>, można uniknąć konfliktów między nazwami istniejących i nowych kolumn.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozwiń kolumny tabel znajdujące się w kolumnie <code>[a]</code> tabeli <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> na 3 kolumny: <code>[t.a]</code>, <code>[t.b]</code> i <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Grupuje wiersze w tabeli na podstawie rozmytego dopasowania kluczy.",
        "Documentation.LongDescription": "Grupuje wiersze <code>table</code> za pomocą rozmytego dopasowania wartości w określonej kolumnie, <code>key</code>, dla każdego wiersza.\r\n    Dla każdej grupy tworzony jest rekord zawierający kolumny klucza (i ich wartości) wraz ze wszystkimi zagregowanymi kolumnami określonymi przez wartość <code>aggregatedColumns</code>.\r\n    Ta funkcja nie może gwarantować zwrócenia ustalonej kolejności wierszy.\r\n    Aby określić sposób porównywania kolumn kluczy, można dołączać <p>opcjonalny zestaw <code>options</code>. Opcje obejmują: \r\n    <ul>\r\n<li><code>Culture</code> : Umożliwia grupowanie rekord&#243;w na podstawie reguł dotyczących kultury. Może to być dowolna prawidłowa nazwa kultury. Na przykład opcja Kultura „ja-JP” grupuje rekordy oparte na kulturze japońskiej. Wartość domyślna to „”, kt&#243;ra grupuje na podstawie niezmiennej kultury angielskiej.</li>\r\n<li><code>IgnoreCase</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia grupowanie kluczy bez uwzględniania wielkości liter. Na przykład gdy wartość jest r&#243;wna true, „winogrona” są zgrupowane z „winogronami”. Wartość domyślna to true.</li>\r\n<li><code>IgnoreSpace</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia łączenie części tekstowych w celu znalezienia grup. Na przykład gdy wartość jest r&#243;wna true, „wino grona” są grupowane z „winogronami”. Wartość domyślna to true.</li>\r\n<li><code>SimilarityColumnName</code> : Nazwa kolumny pokazującej podobieństwo między wartością wejściową i wartością reprezentatywną dla tych danych wejściowych. Wartość domyślna jest r&#243;wna null, a w takim przypadku nowa kolumna podobieństw nie zostanie dodana.</li>\r\n<li><code>Threshold</code> : Liczba z zakresu od 0,00 do 1,00, kt&#243;ra określa wskaźnik podobieństwa, przy kt&#243;rym zostaną zgrupowane dwie wartości.\r\n    Na przykład „Winogrona” i „Winogroa” (brak litery „n”) są zgrupowane ze sobą tylko wtedy, gdy ta opcja jest ustawiona na wartość mniejszą niż 0,90.\r\n   Pr&#243;g wynoszący 1,00 zezwala tylko na dokładne dopasowania.\r\n    (Pamiętaj, że rozmyte „dokładne dopasowanie” może ignorować r&#243;żnice, takie jak wielkość liter, kolejność wyraz&#243;w i interpunkcję).\r\n    Wartość domyślna to 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela umożliwiająca grupowanie rekord&#243;w na podstawie mapowań wartości niestandardowych. Powinna zawierać kolumny „Od” i „Do”. Na przykład „Winogrona” są zgrupowane z „Rodzynkami”, jeśli tabela transformacji ma kolumnę „Od” zawierającą „Winogrona” oraz kolumnę „Do” zawierającą „Rodzynki”. Zauważ, że transformacja zostanie zastosowana do wszystkich wystąpień tekstu w tabeli transformacji. Za pomocą powyższej tabeli transformacji „winogrona są słodkie” r&#243;wnież zostaną zgrupowane z „rodzynki są słodkie”.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupuj tabelę, dodając kolumnę agregującą [Count], która zawiera liczbę pracowników w każdej lokalizacji („each Table.RowCount(_))”).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Tworzy sprzężenie wierszy z dwóch tabel, które uznano za zgodne w dopasowaniu rozmytym na podstawie danych kluczy.",
        "Documentation.LongDescription": "<p>Tworzy sprzężenie wierszy tabeli <code>table1</code> z wierszami tabeli <code>table2</code> na podstawie dopasowania rozmytego wartości kolumn klucza wybranych przez parametr <code>key1</code> (dla tabeli <code>table1</code>) i parametr <code>key2</code> (dla tabeli <code>table2</code>).</p>\r\n<p>Dopasowywanie rozmyte to porównywanie bazujące na podobieństwie tekstu, a nie jego równości.</p>\r\n<p>Domyślnie jest tworzone sprzężenie wewnętrzne, jednak za pomocą opcjonalnego dołączonego parametru <code>joinKind</code> można określić typ sprzężenia. Dostępne opcje:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Aby określić metodę porównania kolumn klucza, możesz dołączyć opcjonalny zestaw parametrów <code>joinOptions</code>. Dostępne opcje:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Liczba z zakresu od 1 do 8 określająca liczbę wątk&#243;w r&#243;wnoległych, kt&#243;re mają być używane na potrzeby dopasowywania rozmytego. Wartość domyślna to 1.</li>\r\n<li><code>Culture</code> : Umożliwia dopasowanie rekord&#243;w na podstawie reguł dotyczących kultury. Może to być dowolna prawidłowa nazwa kultury. Na przykład opcja Kultura „ja-JP” dopasowuje rekordy oparte na kulturze japońskiej. Wartość domyślna to „”, kt&#243;ra dopasowuje na podstawie niezmiennej kultury angielskiej.</li>\r\n<li><code>IgnoreCase</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia dopasowywanie kluczy bez uwzględniania wielkości liter. Na przykład gdy wartość jest r&#243;wna true, „winogrona” są dopasowane do „winogron”. Wartość domyślna to true.</li>\r\n<li><code>IgnoreSpace</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia łączenie części tekstowych w celu znalezienia dopasowań. Na przykład gdy wartość jest r&#243;wna true, „wino grona” są dopasowane do „winogron”. Wartość domyślna to true.</li>\r\n<li><code>NumberOfMatches</code> : Liczba całkowita określająca maksymalną liczbę zgodnych wierszy, kt&#243;re mogą zostać zwr&#243;cone dla każdego wiersza wejściowego. Na przykład wartość 1 spowoduje zwr&#243;cenie maksymalnie jednego zgodnego wiersza dla każdego wiersza wejściowego. Jeśli ta opcja nie zostanie określona, zostaną zwr&#243;cone wszystkie zgodne wiersze.</li>\r\n<li><code>SimilarityColumnName</code> : Nazwa kolumny pokazującej podobieństwo między wartością wejściową i wartością reprezentatywną dla tych danych wejściowych. Wartość domyślna jest r&#243;wna null, a w takim przypadku nowa kolumna podobieństw nie zostanie dodana.</li>\r\n<li><code>Threshold</code> : Liczba z zakresu od 0,00 do 1,00, kt&#243;ra określa wskaźnik podobieństwa, przy kt&#243;rym zostaną dopasowane dwie wartości. Na przykład \r\n    „Winogrona” i „Winogroa” (brak litery „n”) są dopasowywane tylko wtedy, gdy ta opcja jest ustawiona na wartość mniejszą niż 0,90.\r\n    Pr&#243;g wynoszący 1,00 zezwala tylko na dokładne dopasowania.\r\n    (Pamiętaj, że rozmyte „dokładne dopasowanie” może ignorować r&#243;żnice, takie jak wielkość liter, kolejność wyraz&#243;w i interpunkcję).\r\n    Wartość domyślna to 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela umożliwiająca dopasowywanie rekord&#243;w na podstawie mapowań wartości niestandardowych. Powinna zawierać kolumny „Od” i „Do”. Na przykład „winogrona” są dopasowane do „rodzynk&#243;w, jeśli tabela transformacji ma kolumnę „Od” zawierającą „Winogrona” oraz kolumnę „Do” zawierającą „Rodzynki”. Zauważ, że transformacja zostanie zastosowana do wszystkich wystąpień tekstu w tabeli transformacji. Z powyższą tabelą transformacji „winogrona słodkie zostaną r&#243;wnież dopasowane do „rodzynki są słodkie”.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Lewe wewnętrzne sprzężenie rozmyte dwóch tabel na podstawie wartości [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Wykonuje sprzężenie rozmyte tabel z użyciem określonych kolumn i umieszcza wynik sprzężenia w nowej kolumnie.",
        "Documentation.LongDescription": "<p>Tworzy sprzężenie wierszy tabeli <code>table1</code> z wierszami tabeli <code>table2</code> na podstawie dopasowania rozmytego wartości kolumn klucza wybranych przez parametr <code>key1</code> (dla tabeli <code>table1</code>) i parametr <code>key2</code> (dla tabeli <code>table2</code>). Wyniki są zwracane w nowej kolumnie o nazwie <code>newColumnName</code>.</p>\r\n<p>Dopasowanie rozmyte to porównanie bazujące na podobieństwie tekstu, a nie jego równości.</p>\r\n<p>Opcjonalny parametr <code>joinKind</code> określa rodzaj tworzonego sprzężenia. Jeśli nie określono parametru <code>joinKind</code>, domyślnie jest tworzone lewe sprzężenie zewnętrzne. Dostępne opcje:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Możesz dołączyć opcjonalny zestaw <code>joinOptions</code>, aby określić metodę porównania kolumn klucza. Dostępne opcje:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Liczba z zakresu od 1 do 8 określająca liczbę wątk&#243;w r&#243;wnoległych, kt&#243;re mają być używane na potrzeby dopasowywania rozmytego. Wartość domyślna to 1.</li>\r\n<li><code>Culture</code> : Umożliwia dopasowanie rekord&#243;w na podstawie reguł dotyczących kultury. Może to być dowolna prawidłowa nazwa kultury. Na przykład opcja Kultura „ja-JP” dopasowuje rekordy oparte na kulturze japońskiej. Wartość domyślna to „”, kt&#243;ra dopasowuje na podstawie niezmiennej kultury angielskiej.</li>\r\n<li><code>IgnoreCase</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia dopasowywanie kluczy bez uwzględniania wielkości liter. Na przykład gdy wartość jest r&#243;wna true, „winogrona” są dopasowane do „winogron”. Wartość domyślna to true.</li>\r\n<li><code>IgnoreSpace</code> : Wartość logiczna (true/false), kt&#243;ra umożliwia łączenie części tekstowych w celu znalezienia dopasowań. Na przykład gdy wartość jest r&#243;wna true, „wino grona” są dopasowane do „winogron”. Wartość domyślna to true.</li>\r\n<li><code>NumberOfMatches</code> : Liczba całkowita określająca maksymalną liczbę zgodnych wierszy, kt&#243;re mogą zostać zwr&#243;cone dla każdego wiersza wejściowego. Na przykład wartość 1 spowoduje zwr&#243;cenie maksymalnie jednego zgodnego wiersza dla każdego wiersza wejściowego. Jeśli ta opcja nie zostanie określona, zostaną zwr&#243;cone wszystkie zgodne wiersze.</li>\r\n<li><code>SimilarityColumnName</code> : Nazwa kolumny pokazującej podobieństwo między wartością wejściową i wartością reprezentatywną dla tych danych wejściowych. Wartość domyślna jest r&#243;wna null, a w takim przypadku nowa kolumna podobieństw nie zostanie dodana.</li>\r\n<li><code>Threshold</code> : Liczba z zakresu od 0,00 do 1,00, kt&#243;ra określa wskaźnik podobieństwa, przy kt&#243;rym zostaną dopasowane dwie wartości. Na przykład \r\n    „Winogrona” i „Winogroa” (brak litery „n”) są dopasowywane tylko wtedy, gdy ta opcja jest ustawiona na wartość mniejszą niż 0,90.\r\n    Pr&#243;g wynoszący 1,00 zezwala tylko na dokładne dopasowania.\r\n    (Pamiętaj, że rozmyte „dokładne dopasowanie” może ignorować r&#243;żnice, takie jak wielkość liter, kolejność wyraz&#243;w i interpunkcję).\r\n    Wartość domyślna to 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabela umożliwiająca dopasowywanie rekord&#243;w na podstawie mapowań wartości niestandardowych. Powinna zawierać kolumny „Od” i „Do”. Na przykład „winogrona” są dopasowane do „rodzynk&#243;w, jeśli tabela transformacji ma kolumnę „Od” zawierającą „Winogrona” oraz kolumnę „Do” zawierającą „Rodzynki”. Zauważ, że transformacja zostanie zastosowana do wszystkich wystąpień tekstu w tabeli transformacji. Z powyższą tabelą transformacji „winogrona słodkie zostaną r&#243;wnież dopasowane do „rodzynki są słodkie”.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Lewe wewnętrzne sprzężenie rozmyte dwóch tabel na podstawie wartości [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Grupuje w tabeli wiersze, które mają taki sam klucz.",
        "Documentation.LongDescription": "Grupuje wiersze <code>table</code> według kolumn klucza zdefiniowanych przez <code>key</code>. <code>key</code> może być nazwą pojedynczej kolumny lub listą nazw kolumn.\r\n    W przypadku każdej grupy tworzony jest rekord zawierający kolumny klucza (wraz z ich wartościami) oraz wszystkie zagregowane kolumny określone przez <code>aggregatedColumns</code>.\r\n    Opcjonalnie można również określić <code>groupKind</code> i <code>comparer</code>.<br>\r\n    <br>\r\n    Jeśli dane zostały już posortowane według kolumn klucza, wtedy można podać <code>groupKind</code> elementu GroupKind.Local. Może to poprawić wydajność grupowania w niektórych przypadkach,\r\n    ponieważ zakłada się, że wszystkie wiersze z danym zestawem wartości kluczy są sąsiadujące.<br>\r\n    <br>\r\n    Podczas przekazywania <code>comparer</code> zwróć uwagę, że jeśli traktuje zróżnicowane klucze jako równe, wiersz można umieścić w grupie, w której klucze różnią się od jej własnych.<br>\r\n    <br>\r\n    Ta funkcja nie gwarantuje porządkowania wierszy, które zwraca.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pogrupuj tabelę, dodając kolumnę agregacji [total], która zawiera sumę cen (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Wstawia listę wierszy do tabeli na określonej pozycji.",
        "Documentation.LongDescription": "Zwraca tabelę z listą wierszy <code>rows</code>, wstawioną do <code>table</code> na danej pozycji <code>offset</code>. Każda kolumna w wierszu do wstawienia musi być zgodna z typami kolumn tabeli.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Wstaw wiersz do tabeli na pozycji 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Wstaw dwa wiersze do tabeli na pozycji 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Tworzy sprzężenie wierszy z dwóch tabel, które pasują do siebie na podstawie danych kluczy.",
        "Documentation.LongDescription": "<p>Łączy wiersze z <code>table1</code> z wierszami z <code>table2</code> na podstawie równości wartości kolumn kluczowych wybranych przez <code>key1</code> (dla <code>table1</code> ) i <code>key2</code> (dla <code>table2</code>).</p> \r\n<p>Domyślnie wykonywane jest sprzężenie wewnętrzne, jednak opcjonalnie <code>joinKind</code> można określić typ sprzężenia. Opcje obejmują:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r \n<p>Opcjonalny zestaw <code>keyEqualityComparers</code> może być dołączony w celu określenia sposobu porównywania kluczowych kolumn. Ten parametr jest obecnie przeznaczony tylko do użytku wewnętrznego.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Połącz dwie tabele przy użyciu jednej kolumny klucza.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Dołącz do dwóch tabel, które mają sprzeczne nazwy kolumn, używając wielu kolumn kluczowych.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Zwraca największe wiersze, używając podanych kryteriów.",
        "Documentation.LongDescription": "Zwraca największe wiersze w tabeli <code>table</code>, używając podanych kryteriów <code>comparisonCriteria</code>. \r\n    Po posortowaniu wierszy musi zostać określony parametr <code>countOrCondition</code>, aby można było jeszcze bardziej przefiltrować wynik. Zwróć uwagę na to, że algorytm sortowania nie gwarantuje powtarzalności wyników sortowania. Parametr <code>countOrCondition</code> może mieć różne formy:\r\n    <ul>\r\n        <li> Jeśli jest określona liczba, jest zwracana lista elementów o maksymalnej długości <code>countOrCondition</code> posortowana w kolejności rosnącej. </li>\r\n        <li> Jeśli jest określony warunek, jest zwracana lista elementów, które początkowo spełniały warunek. Gdy zostanie znaleziony element, który nie spełnia warunku, nie będą analizowane dalsze elementy. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź w tabeli wiersz mający największą wartość w kolumnie [a], używając warunku [a] > 0. Pamiętaj, że wiersze są sortowane przed zastosowaniem filtru.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Znajdź wiersz mający największą wartość w kolumnie [a], używając warunku [b] > 0, w tabeli. Wiersze są sortowane przed zastosowaniem filtru.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Zwraca najmniejsze wiersze, używając podanych kryteriów.",
        "Documentation.LongDescription": "Zwraca najmniejsze wiersze w tabeli <code>table</code>, używając podanych kryteriów <code>comparisonCriteria</code>. Po posortowaniu wierszy musi zostać określony parametr <code>countOrCondition</code>, aby można było jeszcze bardziej przefiltrować wynik. Zwróć uwagę na to, że algorytm sortowania nie gwarantuje powtarzalności wyników sortowania. Parametr <code>countOrCondition</code> może mieć różne formy:\r\n    <ul>\r\n        <li>Jeśli jest określona liczba, jest zwracana lista elementów o maksymalnej długości <code>countOrCondition</code> posortowana w kolejności rosnącej. </li>\r\n        <li> Jeśli jest określony warunek, jest zwracana lista elementów, które początkowo spełniały warunek. Gdy zostanie znaleziony element, który nie spełnia warunku, nie będą analizowane dalsze elementy. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wiersz mający najmniejszą wartość w kolumnie [a], używając warunku [a] < 3, w tabeli. Wiersze są sortowane przed zastosowaniem filtru.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Znajdź wiersz mający najmniejszą wartość w kolumnie [a], używając warunku [b] < 0, w tabeli. Wiersze są sortowane przed zastosowaniem filtru.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Wykonuje sprzężenie tabel z użyciem określonych kolumn i umieszcza wynik sprzężenia w nowej kolumnie.",
        "Documentation.LongDescription": "<p>Tworzy sprzężenie wierszy tabeli <code>table1</code> z wierszami tabeli <code>table2</code> na podstawie równości wartości kolumn klucza wybranych przez parametr <code>key1</code> (dla tabeli <code>table1</code>) i parametr <code>key2</code> (dla tabeli <code>table2</code>). Wyniki są umieszczane w kolumnie o nazwie <code>newColumnName</code>.</p>\r\n<p>Opcjonalny parametr <code>joinKind</code> określa rodzaj tworzonego sprzężenia. Jeśli nie określono parametru <code>joinKind</code>, domyślnie jest tworzone lewe sprzężenie zewnętrzne.</p>\r\n<p>Możesz dołączyć opcjonalny zestaw <code>keyEqualityComparers</code>, aby określić metodę porównania kolumn klucza. Ta funkcja jest obecnie przeznaczona tylko do użytku wewnętrznego.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Połącz dwie tabele przy użyciu jednej kolumny klucza.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Używając pary kolumn reprezentujących pary atrybut-wartość, obraca dane w kolumnie atrybutów tak, że stają się one nagłówkami kolumn.",
        "Documentation.LongDescription": "Używając pary kolumn reprezentujących pary atrybut-wartość, obraca dane w kolumnie atrybutów tak, że stają się one nagłówkami kolumn.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Weź wartości „a”, „b” i „c” z kolumny atrybutów tabeli <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> i przestaw je do ich własnej kolumny.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Weź wartości „a”, „b” i „c” z kolumny atrybutów tabeli <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> i przestaw je do ich własnej kolumny.  Z atrybutem „c” klucza „x” jest skojarzonych wiele wartości, więc użyj funkcji List.Max w celu rozwiązania konfliktu.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Zamienia określony zakres wierszy na dostarczone wiersze.",
        "Documentation.LongDescription": "Zamienia określoną liczbę wierszy (<code>count</code>) w tabeli wejściowej (<code>table</code>) na określoną liczbę wierszy (<code>rows</code>), zaczynając po wierszach określonych przez parametr <code>offset</code>. Wartość parametru <code>rows</code> to lista rekordów.\r\n    <ul>\r\n       <li><code>table</code>: Tabela, w której jest wykonywana operacja zamiany.</li>\r\n       <li><code>offset</code>: Liczba wierszy, które mają zostać pominięte przed rozpoczęciem zamiany.</li>\r\n       <li><code>count</code>: Liczba wierszy do zamiany.</li>\r\n       <li><code>rows</code>: Lista rekordów wierszy, które mają zostać wstawione do tabeli <code>table</code> w lokalizacji określonej przez parametr <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zaczynając od pozycji 1, zamień 3 wiersze.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Zamienia jedną wartość na inną w określonych kolumnach.",
        "Documentation.LongDescription": "Zamienia wartość <code>oldValue</code> na wartość <code>newValue</code> w określonych kolumnach tabeli <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zamień tekst „do widzenia” na „świat” w kolumnie B, dopasowując tylko całą wartość.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Zamień tekst „ur” na „lub” w kolumnie B, dopasowując dowolną część wartości.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizuj imiona i nazwiska pracowników w Stanach Zjednoczonych.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizuj wszystkie kolumny pracowników w Stanach Zjednoczonych.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Dzieli określone kolumny na zestaw dodatkowych kolumn, używając określonej funkcji rozdzielającej.",
        "Documentation.LongDescription": "Dzieli określone kolumny na zestaw dodatkowych kolumn, używając określonej funkcji rozdzielającej.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Podziel kolumnę [Name] w miejscu wystąpienia litery „i” na dwie kolumny",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Wykonuje translację zestawu kolumn w tabeli na pary atrybut-wartość.",
        "Documentation.LongDescription": "Wykonuje translację zestawu kolumn w tabeli na pary atrybut-wartość połączone z resztą wartości w każdym wierszu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Weź wartości kolumn „a”, „b” i „c” z tabeli <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> i anuluj ich przestawienie, tak aby utworzyć pary atrybut-wartość.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Wykonuje translację wszystkich kolumn, oprócz określonego zestawu kolumn, na pary atrybut-wartość.",
        "Documentation.LongDescription": "Wykonuje translację wszystkich kolumn, oprócz określonego zestawu kolumn, na pary atrybut-wartość połączone z resztą wartości w każdym wierszu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Wykonuje translację wszystkich kolumn, oprócz określonego zestawu kolumn, na pary atrybut-wartość połączone z resztą wartości w każdym wierszu.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Analiza osobista usługi Microsoft Teams",
        "Documentation.LongDescription": "<p>Łącznik Teams Analytics umożliwia uzyskiwanie wglądu w użycie usługi Teams. Dostępne dane obejmują zarówno osobistą aktywność w usłudze Teams, jak również aktywność w zespołach Teams, do których należysz.</p>\r\n<p>Dostępne są dane z poprzednich 90 dni.</p>\r\n<p>Aby uzyskać szczegółowe informacje na temat typów dostępnych danych, zapoznaj się z następującą dokumentacją pomocy: </p>\r\n<ul>\r\n<li><b>Użycie usługi Teams:</b> https://docs.microsoft.com/pl-pl/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Aktywność użytkownika w usłudze Teams:</b> https://docs.microsoft.com/pl-pl/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Wprowadź nazwę organizacji i projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Zwraca tabelę źródeł danych OData udostępnianych przez usługę Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Zwraca format binarny odczytujący wartość binarną.",
        "Documentation.LongDescription": "Zwraca format binarny odczytujący wartość binarną.  W przypadku określenia parametru <code>length</code> wartość binarna będzie zawierać liczbę bajtów równą wartości tego parametru.  W przypadku nieokreślenia parametru <code>length</code> wartość binarna będzie zawierać pozostałe bajty.  Parametr <code>length</code> można określić jako liczbę lub format binarny długości poprzedzający dane binarne.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Zwraca wartość logiczną na podstawie sprawdzania równości dwóch podanych wartości.",
        "Documentation.LongDescription": "Zwraca wartość <code>logiczną</code> w oparciu o sprawdzanie równości dwóch podanych wartości – <code>x</code> i <code>y</code>, używając podanej wartości <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> to <code>funkcja porównująca</code>, która służy do kontrolowania porównania.\r\n        Funkcja porównująca to funkcja, która akceptuje dwa argumenty i zwraca wartość -1, 0 lub 1 na podstawie tego, czy pierwsza wartość jest mniejsza niż, równa lub większa od drugiej.\r\n        Funkcje porównujące mogą służyć do dostarczania porównania bez uwzględniania wielkości liter świadomości kulturowej czy regionalnej.\r\n      </div>\r\n      <div>\r\n        Następujące wbudowane funkcje porównujące są dostępne w języku formuł:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: służy do dokładnego porównania porządkowego</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: służy do wykonywania dokładnego porównania porządkowego bez uwzględniania wielkości liter</li>\r\n        <li> <code>Comparer.FromCulture</code>: służy do wykonywania porównania uwzględniającego świadomość kulturową</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porównaj wartości „1” i „A” przy użyciu ustawień regionalnych „pl-PL”, aby sprawdzić, czy wartości są równe.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w lokalnej strefie czasowej. Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetime</code> reprezentującą aktualną datę i godzinę ustawioną w systemie. Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach, w przeciwieństwie do wartości zwracanej przez funkcję DateTime.LocalNow, która może zwracać różne wartości w trakcie wykonywania wyrażenia.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w lokalnej strefie czasowej.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetime</code> reprezentującą aktualną datę i godzinę ustawioną w systemie.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w lokalnej strefie czasowej. Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetime</code> reprezentującą aktualną datę i godzinę ustawioną w systemie. Zwrócona wartość zawiera informacje o strefie czasowej reprezentujące lokalną strefę czasową. Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach, w przeciwieństwie do wartości zwracanej przez funkcję DateTimeZone.LocalNow, która może zwracać różne wartości w trakcie wykonywania wyrażenia.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w formacie UTC (strefa czasowa GMT). Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach.",
        "Documentation.LongDescription": "Zwraca bieżącą datę i godzinę w formacie UTC (strefa czasowa GMT). Ta wartość jest stała i nie zmienia się w kolejnych wywołaniach.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w lokalnej strefie czasowej.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetimezone</code> reprezentującą aktualną datę i godzinę ustawioną w systemie.\r\n    Zwrócona wartość zawiera informacje o strefie czasowej reprezentujące lokalną strefę czasową.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Zwraca bieżącą datę i godzinę w formacie UTC (strefa czasowa GMT).",
        "Documentation.LongDescription": "Zwraca bieżącą datę i godzinę w formacie UTC (strefa czasowa GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pobierz bieżącą datę i godzinę w formacie UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Zwraca identyfikator nieprzezroczysty dla obecnie działającej oceny.",
        "Documentation.LongDescription": "Zwraca identyfikator nieprzezroczysty dla obecnie działającej oceny.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Zwraca nieprzezroczysty identyfikator, aby skorelować żądania przychodzące z żądaniami wychodzącymi.",
        "Documentation.LongDescription": "Zwraca nieprzezroczysty identyfikator, aby skorelować żądania przychodzące z żądaniami wychodzącymi.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Zapisuje wpis śledzenia, jeśli śledzenie jest włączone, i zwraca wartość.",
        "Documentation.LongDescription": "Zapisuje dane śledzenia <code>message</code>, jeśli śledzenie jest włączone, i zwraca wartość <code>value</code>. Opcjonalny parametr <code>delayed</code> umożliwia określenie, czy ocena wartości <code>value</code> ma zostać opóźniona do czasu wykonania śledzenia komunikatu. Element <code>traceLevel</code> może przyjąć jedną z następujących wartości:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Wykonaj śledzenie komunikatu przed wywołaniem funkcji Text.From i zwróć wynik.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Domyślny dostawca tożsamości dla bieżącego hosta.",
        "Documentation.LongDescription": "Domyślny dostawca tożsamości dla bieżącego hosta.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Akumuluje wartość podsumowania elementów listy.",
        "Documentation.LongDescription": "Akumuluje wartość podsumowania elementów listy <code>list</code>, używając funkcji <code>accumulator</code>.\r\n    Można ustawić opcjonalny parametr inicjatora <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Akumuluje wartość podsumowania elementów listy {1, 2, 3, 4, 5}, używając funkcji ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Generuje listę wartości typu datetimezone, używając podanej wartości początkowej, liczby wartości oraz przyrostowej wartości czasu trwania.",
        "Documentation.LongDescription": "Zwraca listę wartości typu <code>datetimezone</code> o rozmiarze <code>count</code>, rozpoczynając od wartości <code>start</code>. Podany przyrost (<code>step</code>) to wartość typu <code>duration</code> dodawana do każdej wartości.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę 10 wartości, zaczynając od 5 minut przed Nowym Rokiem (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) i używając przyrostu o wartości 1 minuty (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Generuje listę wartości typu datetime, używając podanej wartości początkowej, liczby wartości oraz przyrostowej wartości czasu trwania.",
        "Documentation.LongDescription": "Zwraca listę wartości typu <code>datetime</code> o rozmiarze <code>count</code>, rozpoczynając od wartości <code>start</code>. Podany przyrost (<code>step</code>) to wartość typu <code>duration</code> dodawana do każdej wartości.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę 10 wartości, zaczynając od 5 minut przed Nowym Rokiem (#datetime(2011, 12, 31, 23, 55, 0)) i używając przyrostu o wartości 1 minuty (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Generuje listę wartości typu date, używając podanej wartości początkowej, liczby wartości oraz przyrostowej wartości czasu trwania.",
        "Documentation.LongDescription": "Zwraca listę wartości typu <code>date</code> o rozmiarze <code>count</code>, rozpoczynając od wartości <code>start</code>. Podany przyrost (<code>step</code>) to wartość typu <code>duration</code> dodawana do każdej wartości.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę 5 wartości, zaczynając od Sylwestra (#date(2011, 12, 31)) i używając przyrostu o wartości 1 dzień (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Generuje listę wartości typu duration, używając podanej wartości początkowej, liczby wartości oraz przyrostowej wartości czasu trwania.",
        "Documentation.LongDescription": "Zwraca listę <code>count</code> z wartościami typu <code>duration</code>, rozpoczynając od wartości <code>start</code> i używając jako przyrostu danej wartości typu <code>duration</code> podanej w parametrze <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę 5 wartości, zaczynając od 1 godziny i zwiększając wartość o godzinę.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Generuje listę wartości.",
        "Documentation.LongDescription": "Generuje listę wartości przy użyciu podanych funkcji. Funkcja <code>initial</code> generuje początkową wartość kandydującą, która jest następnie testowana względem <code>condition</code>.\r\n Jeśli wartość kandydata zostanie zatwierdzona, zostanie zwrócona jako część listy wynikowej, a następna wartość kandydująca zostanie wygenerowana przez przekazanie nowo zatwierdzonej wartości do <code>next</code>.\r\n Gdy wartość kandydatów nie jest zgodna z <code>condition</code>, proces generowania listy zostanie zatrzymany. Można również podać \r\n opcjonalny parametr <code>selector</code>, aby przekształcić elementy na liście wynikowej.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę, zaczynając od dziesięciu, wielokrotnie zmniejszając o jeden i upewniając się, że każdy element jest większy od zera.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Wygeneruj listę rekordów zawierającą wartości x i y, gdzie x to wartość, a y to lista. Wartość x ma pozostać mniejsza niż 10 i reprezentować liczbę elementów listy y. Po wygenerowaniu listy mają być zwracane tylko wartości x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Wstawia wartości na listę pod danym indeksem.",
        "Documentation.LongDescription": "Zwraca nową listę utworzoną przez wstawienie wartości z listy <code>values</code> na listę <code>list</code> pod indeksem <code>index</code>. Pierwsza pozycja na liście ma indeks 0.\r\n      <ul>\r\n        <li><code>list</code>: Lista docelowa, na którą będą wstawiane wartości.</li>\r\n        <li><code>index</code>: Indeks listy docelowej (<code>list</code>) określający, gdzie mają być wstawione wartości. Pierwsza pozycja na liście ma indeks 0.</li>\r\n        <li><code>values</code>: Lista wartości, które mają zostać wstawione na listę <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Wstaw listę ({3, 4}) na listę docelową ({1, 2, 5}) pod indeksem 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Wstaw listę z zagnieżdżoną listą ({1, {1.1, 1.2}}) na listę docelową ({2, 3, 4}) pod indeksem 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Zamienia określoną liczbę wartości, zaczynając od określonej pozycji, na wartości zastępcze.",
        "Documentation.LongDescription": "Zamienia wartości <code>count</code> na liście <code>list</code> na wartości z listy <code>replaceWith</code>, zaczynając od określonej pozycji <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamień wartości {7, 8, 9} na liście {1, 2, 7, 8, 9, 5} na wartości {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Wyszukuje określoną wartość na liście i zamienia ją.",
        "Documentation.LongDescription": "Wyszukuje na liście wartości <code>list</code> wartość <code>oldValue</code> i zamienia każde jej wystąpienie na wartość zastępczą <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zamień wszystkie wartości \"a\" na liście {\"a\", \"B\", \"a\", \"a\"} na wartość \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Generuje listę wartości typu time, używając podanej wartości początkowej, liczby wartości oraz przyrostowej wartości czasu trwania.",
        "Documentation.LongDescription": "Zwraca listę wartości typu <code>time</code> o rozmiarze <code>count</code>, rozpoczynając od wartości <code>start</code>. Podany przyrost (<code>step</code>) to wartość typu <code>duration</code> dodawana do każdej wartości.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę 4 wartości, zaczynając od południa (#time(12, 0, 0)) i używając przyrostu o wartości 1 godzina (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Zwraca listę, której elementy są elementami z listy wejściowej, które zostały przekształcone przy użyciu określonych funkcji.",
        "Documentation.LongDescription": "Zwraca listę, której elementy są rzutowane z listy wejściowej.<br>\r\n    <br>\r\n    Funkcja <code>collectionTransform</code> przekształca każdy element w listę pośrednią, a funkcja <code>resultTransform</code> odbiera oryginalny element oraz element z listy pośredniej w celu utworzenia końcowego wyniku.<br>\r\n    <br>\r\n    Funkcja <code>collectionTransform</code> ma sygnaturę <code>(x as any) as list =>... </code>, gdzie <code>x</code> jest elementem w <code>list</code>.\r\n    Funkcja <code>resultTransform</code> rzutuje kształt wyniku i ma sygnaturę <code>(x as any, y as any) as any =>... </code>, gdzie <code>x</code> jest elementem w <code>list</code>, a <code>y</code> jest elementem z listy wygenerowanej przez przekazanie <code>x</code> do <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Spłaszcz listę osób i ich zwierząt domowych.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Zwraca liczbę losową.",
        "Documentation.LongDescription": "Zwraca losową liczbę z zakresu od 0 do 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Utwórz liczbę losową.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Dodaje pole do rekordu.",
        "Documentation.LongDescription": "Dodaje pole do rekordu <code>record</code>, używając nazwy pola <code>fieldName</code> i wartości <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dodaj pole Address do rekordu.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Zamienia tekst na podane dane wejściowe.",
        "Documentation.LongDescription": "Zamienia tekst <code>old</code> w oryginalnym ciągu <code>text</code> na tekst <code>new</code>. Tej funkcji zamieniającej można używać w funkcjach <code>List.ReplaceValue</code> i <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamień tekst „hE” na „He” w ciągu „hEllo world”.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Zamienia wartości na podane dane wejściowe.",
        "Documentation.LongDescription": "Zamienia wartość <code>old</code> w oryginalnej wartości <code>value</code> na wartość <code>new</code>. Tej funkcji zamieniającej można używać w funkcjach <code>List.ReplaceValue</code> i <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Zamień wartość 11 na wartość 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Zwraca wynik żądania JSON z interfejsu API narzędzia Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Tworzy wywołanie interfejsu API REST narzędzia Smartsheet 2.0 w określonym punkcie końcowym i zwraca wyniki w postaci rekordu JSON.",
        "Documentation.Examples": [
          {
            "Description": "Ściąga dane z punktu końcowego interfejsu API narzędzia Smartsheet dla arkuszy z określonymi dodatkowymi argumentami",
            "Code": "Smartsheet.Content(\"arkusze\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabela z informacjami o arkuszach zwracana przez interfejs API narzędzia Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Zwraca funkcję, która nie dzieli wartości, i zwraca jej argument jako pojedynczy element listy.",
        "Documentation.LongDescription": "Zwraca funkcję, która nie dzieli wartości, i zwraca jej argument jako pojedynczy element listy.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania znaków odstępu.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania znaków odstępu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe według białych znaków, traktując cudzysłowy jak dowolny inny znak.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Partycjonuje tabelę na listę tabel na podstawie określonej liczby grup i kolumn.",
        "Documentation.LongDescription": "Partycjonuje tabelę <code>table</code> na listę składającą się z <code>groups</code> tabel na podstawie wartości kolumny <code>column</code> oraz funkcji <code>hash</code>.\r\n    Funkcja <code>hash</code> jest stosowana do wartości wiersza <code>column</code> w celu uzyskania wartości skrótu dla wiersza. W wyniku wykonania na wartości skrótu operacji modulo z użyciem wartości <code>groups</code> funkcja ustala, w której ze zwracanych tabel ma znajdować się dany wiersz.\r\n    <ul>\r\n       <li><code>table</code>: Tabela, która zostanie podzielona na partycje.</li>\r\n       <li><code>column</code>: Kolumna, na podstawie której zostanie wygenerowana wartość skrótu umożliwiająca ustalenie, w której ze zwracanych tabel ma znajdować się dany wiersz.</li>\r\n       <li><code>groups</code>: Liczba tabel, na które zostanie podzielona tabela wejściowa.</li>\r\n       <li><code>hash</code>: Funkcja stosowana w celu uzyskania wartości skrótu.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Partycjonuje tabelę <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> na dwie tabele według kolumny [a], używając wartości kolumn jako funkcji wyznaczania wartości skrótu.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Zwraca część elementu <code>text</code> po określonych elementach <code>startDelimiter</code> i <code>endDelimiter</code>.\r\n    Opcjonalna liczba <code>startIndex</code> wskazuje, które wystąpienie elementu <code>startDelimiter</code> ma zostać uwzględnione.\r\n    Opcjonalna lista <code>startIndex</code> wskazuje, które wystąpienie elementu <code>startDelimiter</code> ma zostać uwzględnione oraz czy indeksowanie ma być rozpoczynane od początku elementu wejściowego.\r\n    Element <code>endIndex</code> jest podobny, ale w jego przypadku indeksowanie jest wykonywane względem elementu <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pobierz część ciągu „111 (222) 333 (444)” między (pierwszym) nawiasem otwierającym i (pierwszym) nawiasem zamykającym, który po nim następuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Pobierz część ciągu „111 (222) 333 (444)” między drugim nawiasem otwierającym i pierwszym nawiasem zamykającym, który po nim następuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Pobierz część ciągu „111 (222) 333 (444)” między drugim nawiasem otwierającym od końca i drugim nawiasem zamykającym, który po nim następuje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Wstawia jedną wartość tekstową do innej na określonej pozycji.",
        "Documentation.LongDescription": "Zwraca wynik wstawienia wartości tekstowej <code>newText</code> do wartości tekstowej <code>text</code> na pozycji <code>offset</code>. Pozycje są liczone od 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Wstaw „C” między „B” i „D” w ciągu „ABD”.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Zwraca nowy, losowy unikatowy identyfikator globalny (GUID).",
        "Documentation.LongDescription": "Zwraca nowy, losowy unikatowy identyfikator globalny (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Zamienia wszystkie wystąpienia danego podciągu w tekście.",
        "Documentation.LongDescription": "Zwraca wynik zamiany wszystkich wystąpień wartości tekstowej <code>old</code> w wartości tekstowej <code>text</code> na wartość tekstową <code>new</code>. Ta funkcja rozróżnia wielkość liter.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamień każde wystąpienie wyrazu „the” w zdaniu na wyraz „a”.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Usuwa zakres znaków i wstawia nową wartość na określonej pozycji.",
        "Documentation.LongDescription": "Zwraca wynik usunięcia określonej liczby znaków (<code>count</code>) z wartości tekstowej <code>text</code>, zaczynając od pozycji <code>offset</code>, a następnie wstawienia wartości tekstowej <code>newText</code> na tej samej pozycji w wartości <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Zamień jeden znak na pozycji 2 w wartości tekstowej „ABGF” na nową wartość „CDE”.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Dodaje klucz do danego typu tabeli.",
        "Documentation.LongDescription": "Dodaje klucz do danego typu tabeli.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Zwraca listę tożsamości akceptowanych przez warunek.",
        "Documentation.LongDescription": "<p>Za pomocą podanego elementu <code>identityProvider</code> konwertuje element <code>condition</code> na listę tożsamości, dla których element <code>condition</code> zwróci wartość <code>true</code> we wszystkich kontekstach autoryzacji z dostawcą tożsamości <code>identityProvider</code>. Wystąpi błąd, jeśli nie będzie możliwe przekonwertowanie elementu <code>condition</code> na listę tożsamości, na przykład jeśli element <code>condition</code> podczas podejmowania decyzji sprawdza atrybuty inne niż tożsamości użytkownika lub grupy.</p>\r\n    <p>Należy pamiętać, że lista tożsamości reprezentuje tożsamości w sposób, w jaki pojawiają się one w obszarze <code>condition</code>, i względem nich nie jest przeprowadzana żadna normalizacja (na przykład rozszerzenie grupy)</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Kompresuje wartość binarną przy użyciu podanego typu kompresji.",
        "Documentation.LongDescription": "Kompresuje wartość binarną przy użyciu podanego typu kompresji. Wynikiem tego wywołania jest skompresowana kopia danych wejściowych. Do typów kompresji należą:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Kompresuj wartość binarną.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Dekompresuje wartość binarną, używając danego typu kompresji.",
        "Documentation.LongDescription": "Dekompresuje wartość binarną, używając danego typu kompresji.  Wynikiem tego wywołania jest zdekompresowana kopia danych wejściowych. Dostępne typy kompresji:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Zdekompresuj wartość binarną.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Zwraca podzbiór wartości binarnej rozpoczynający się od przesunięcia.",
        "Documentation.LongDescription": "Zwraca podzbiór wartości binarnej rozpoczynający się od przesunięcia <code>binary</code>. Opcjonalny parametr, <code>offset</code>, określa maksymalną długość podzbioru.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Zwraca podzbiór wartości binarnej rozpoczynający się od przesunięcia 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Zwraca podzbiór o długości 2 od przesunięcia 6 wartości binarnej.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Dzieli określony plik binarny na listę plików binarnych przy użyciu określonego rozmiaru strony.",
        "Documentation.LongDescription": "Dzieli <code>binary</code> na listę plików binarnych, gdzie pierwszym elementem listy wyjściowej jest plik binarny zawierający pierwsze<code>pageSize</code> B z \r\n    źródłowego pliku binarnego, następnym elementem listy wyjściowej jest plik binarny zawierający następne <code>pageSize</code> B ze źródłowego pliku binarnego, i tak dalej.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Tworzy lub rozszerza dane binarne przy użyciu zdefiniowanych przez użytkownika procedur obsługi operacji zapytań i akcji.",
        "Documentation.LongDescription": "<p>Zwraca widok <code>binary</code>, w którym funkcje określone w <code>handlers</code> są używane zamiast domyślnego zachowania operacji, gdy operacja jest stosowana do widoku.</p>\r\n<p>Jeśli podano wartość <code>binary</code>, wszystkie funkcje procedury obsługi są opcjonalne. Jeśli nie podano wartości <code>binary</code>, wymagana będzie funkcja procedury obsługi <code>GetStream</code>. Jeśli funkcja procedury obsługi nie jest określona w przypadku danej operacji, zamiast tego zostanie zastosowane zachowanie domyślne w odniesieniu do <code>binary</code> (z wyjątkiem operacji <code>GetExpression</code>).</p>\r\n<p>Funkcje procedury obsługi muszą zwracać wartość semantycznie równoważną wynikowi zastosowania operacji w stosunku do widoku<code>binary</code> (lub widoku wynikowego w przypadku operacji <code>GetExpression</code>).</p>\r\n<p>Jeśli funkcja procedury obsługi zgłosi błąd, do widoku zostanie zastosowane domyślne zachowanie operacji.</p>\r\n<p>Funkcji <code>Binary.View</code> można użyć, aby wdrożyć składanie dla źródła danych (tłumaczenie zapytań M na operacje specyficzne dla źródła, na przykład w celu pobrania sekcji pliku).</p>\r\n<p>Z bardziej kompleksowym opisem funkcji <code>Binary.View</code> można zapoznać się w opublikowanej dokumentacji dotyczącej łącznika niestandardowego usługi Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Utwórz widok podstawowy, który nie wymaga dostępu do danych w celu określenia długości wierszy.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Zwraca format binarny, w którym kolejność bajtów jest określona przez funkcję.",
        "Documentation.LongDescription": "Zwraca format binarny, w którym kolejność bajtów jest określona przez parametr <code>binaryFormat</code>.  Domyślna kolejność bajtów to <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Zwraca format binarny wybierający następny format binarny na podstawie wartości, która została już odczytana.",
        "Documentation.LongDescription": "Zwraca format binarny wybierający następny format binarny na podstawie wartości, która została już odczytana.  Wartość formatu binarnego utworzonego przez tę funkcję działa etapowo:<ul>\r\n<li>Format binarny określony przez parametr <code>binaryFormat</code> jest używany do odczytania wartości.</li>\r\n<li>Wartość jest przekazywana do funkcji wyboru określonej przez parametr <code>chooseFunction</code>.</li>\r\n<li>Funkcja wyboru sprawdza wartość i zwraca drugi format binarny.</li>\r\n<li>Drugi format binarny jest używany do odczytania drugiej wartości.</li>\r\n<li>Jeśli została określona funkcja łączenia, pierwsza i druga wartość są przekazywane do funkcji łączenia, a następnie jest zwracana wartość wynikowa.</li>\r\n<li>Jeśli nie została określona funkcja łączenia, zwracana jest druga wartość.</li>\r\n<li>Zwracana jest druga wartość.</li>\r\n</ul>Opcjonalny parametr <code>type</code> wskazuje typ formatu binarnego, który zostanie zwrócony przez funkcję wyboru.  Można określić wartość <code>type any</code>, <code>type list</code> lub <code>type binary</code>.  Jeśli parametr <code>type</code> nie został określony, jest używana wartość <code>type any</code>.   Jeśli jest używana wartość <code>type list</code> lub <code>type binary</code>, system może być w stanie zwrócić strumieniową wartość typu <code>binary</code> lub <code>list</code>, zamiast wartości buforowanej, co może zmniejszyć ilość pamięci potrzebnej do odczytania formatu.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Odczytaj listę bajtów, na której liczba elementów jest określana przez pierwszy bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Odczytaj listę bajtów, na której liczba elementów jest określana przez pierwszy bajt, i zachowaj pierwszy odczytany bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Odczytaj listę bajtów, na której liczba elementów jest określana przez pierwszy bajt, używając listy strumieniowej.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Zwraca format binarny odczytujący grupę elementów.",
        "Documentation.LongDescription": "Używane są następujące parametry:\r\n<ul>\r\n<li>Parametr <code>binaryFormat</code> określa format binarny wartości klucza.</li>\r\n<li>Parametr <code>group</code> udostępnia informacje dotyczące grupy znanych elementów.</li>\r\n<li>Za pomocą opcjonalnego parametru <code>extra</code> można określić funkcję, która będzie zwracać wartość formatu binarnego dla wartości występujących po nieoczekiwanych kluczach. Jeśli parametr <code>extra</code> nie zostanie określony, w sytuacji wystąpienia nieoczekiwanych wartości klucza zostanie zgłoszony błąd.</li>\r\n</ul>\r\nParametr <code>group</code> określa listę definicji elementów. Każda definicja elementu to lista zawierająca od 3 do 5 wartości, tak jak pokazano poniżej:\r\n<ul>\r\n<li>Wartość klucza. Wartość klucza odpowiadającego elementowi. Musi ona być unikatowa w obrębie zestawu elementów.</li>\r\n<li>Format elementu. Format binarny odpowiadający wartości elementu. Dzięki tej wartości każdy element może mieć inny format. </li>\r\n<li>Wystąpienie elementu. Wartość <code>BinaryOccurrence.Type</code> określa, ile razy element powinien wystąpić w grupie. Wymagane elementy, których nie ma, powodują błąd. Wymagane lub opcjonalne zduplikowane elementy są obsługiwane tak jak nieoczekiwane wartości klucza.</li>\r\n<li>Domyślna wartość elementu (opcjonalna). Jeśli domyślna wartość elementu jest widoczna na liście definicji elementów i jest inna niż null, będzie używana zamiast ustawienia domyślnego. Ustawienie domyślne dla powtarzających się lub opcjonalnych elementów to wartość null, a ustawienie domyślne dla powtarzających się wartości to pusta lista { }.</li>\r\n<li>Przekształcenie wartości elementu (opcjonalne). Jeśli funkcja przekształcenia wartości elementu jest określona na liście definicji elementów i ma wartość inną niż null, zostanie wywołana w celu przekształcenia wartości elementu przed jej zwróceniem. Funkcję przekształcenia można wywołać tylko wtedy, gdy element znajduje się w danych wejściowych (nigdy nie jest wywoływana z użyciem wartości domyślnej). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Poniżej przyjęto założenie, że wartość klucza to pojedynczy bajt, a w grupie oczekiwane są 4 elementy, z których każdy zawiera bajt danych występujący po kluczu.  Element jest widoczny w danych wejściowych w następujący sposób:\r\n<ul>\r\n<li>Klucz 1 jest wymagany i występuje z wartością 11.</li>\r\n<li>Klucz 2 powtarza się i występuje dwa razy z wartością 22, a więc w wyniku powstaje wartość { 22, 22 }.</li>\r\n<li>Klucz 3 jest opcjonalny i nie występuje, a więc w wyniku powstaje wartość null.</li>\r\n<li>Klucz 4 powtarza się, ale nie występuje, a więc w wyniku powstaje wartość { }.</li>\r\n<li>Klucz 5 nie jest częścią grupy, ale występuje raz z wartością 55.  Dodatkowa funkcja (extra) jest wywoływana z użyciem wartości klucza 5 i zwraca format odpowiadający tej wartości (BinaryFormat.Byte).  Wartość 55 jest odczytywana i odrzucana.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "W poniższym przykładzie pokazano przekształcenie wartości elementu oraz domyślną wartość elementu.   Powtarzający się element z kluczem 1 sumuje listę odczytanych wartości za pomocą funkcji List.Sum.  Opcjonalny element z kluczem 2 ma wartość domyślną równą 123, a nie wartość null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Zwraca format binarny ograniczający ilość danych, które można odczytać.",
        "Documentation.LongDescription": "Zwraca format binarny ograniczający ilość danych, które można odczytać.  Formaty <code>BinaryFormat.List</code>, i <code>BinaryFormat.Binary</code> można używać do odczytu aż do końca danych.  Za pomocą formatu <code>BinaryFormat.Length</code> można ograniczyć liczbę odczytywanych bajtów.  Parametr <code>binaryFormat</code> określa format binarny służący do ograniczania.  Parametr <code>length</code> określa liczbę bajtów do odczytania.  Parametr <code>length</code> może być wartością liczbową lub wartością formatu binarnego określającą format wartości długości, która pojawia się przed odczytywaną wartością.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Ogranicz liczbę odczytywanych bajtów do 2 podczas odczytu listy bajtów.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Ogranicz liczbę bajtów odczytywanych podczas odczytu listy bajtów do wartości bajtów poprzedzającej listę.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Zwraca format binarny, który przekształci wartości odczytane przez inny format binarny.",
        "Documentation.LongDescription": "Zwraca format binarny, który przekształci wartości odczytane przez inny format binarny.  Parametr <code>binaryFormat</code> określa format binarny, który będzie używany do odczytywania wartości.  Funkcja <code>function</code> jest wywoływana z użyciem odczytanej wartości i zwraca przekształconą wartość.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Odczytaj bajt i dodaj jeden do niego.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Zwraca funkcję porównania, która porównuje wartości przy użyciu reguł liczb porządkowych.",
        "Documentation.LongDescription": "Zwraca funkcję porównującą, która używa reguł porządkowych do porównywania podanych wartości <code>x</code> i <code>y</code><br>\r\n      <br>\r\n      Funkcja porównująca akceptuje dwa argumenty i zwraca wartość -1, 0 lub 1 na podstawie tego, czy pierwsza wartość jest mniejsza niż, równa lub większa od drugiej.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Używając reguł liczb porządkowych, porównaj wartości „encyclopædia” i „encyclopaedia”, aby sprawdzić, czy są równoważne. Sprawdź równoważność tych wartości za pomocą funkcji <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Zwraca funkcję porównującą bez uwzględniania wielkości liter, która umożliwia porównywanie wartości przy użyciu reguł porządkowych.",
        "Documentation.LongDescription": "Zwraca funkcję porównującą bez uwzględniania wielkości liter, która używa reguł porządkowych do porównywania podanych wartości <code>x</code> i <code>y</code>.<br>\r\n        <br>\r\n        Funkcja porównująca akceptuje dwa argumenty i zwraca wartość -1, 0 lub 1 na podstawie tego, czy pierwsza wartość jest mniejsza, równa lub większa od drugiej.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Korzystając z reguł porządkowych bez uwzględniania wielkości liter, porównaj wyrażenia „Abc” i „abc”. Zwróć uwagę, że w przypadku korzystania z funkcji <code>Comparer.Ordinal</code> wyrażenie „Abc” będzie mniejsze niż „abc”. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Zwraca właściwość atrybutu wymiaru.",
        "Documentation.LongDescription": "Zwraca właściwość <code>propertyName</code> atrybutu wymiaru <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Zwraca właściwości miary (właściwość komórki).",
        "Documentation.LongDescription": "Zwraca właściwość <code>propertyName</code> miary <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Narzędzie SQL Query Source na platformie Databricks",
        "Documentation.LongDescription": "Zdefiniuj źródło danych platformy Databricks do uruchamiania kwerend SQL"
      },
      "ReturnType": "Kwerenda SQL na platformie Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Narzędzie SQL Query Source na platformie Databricks",
        "Documentation.LongDescription": "Zdefiniuj źródło danych platformy Databricks do uruchamiania kwerend SQL"
      },
      "ReturnType": "Kwerenda SQL na platformie Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Dodaje określoną liczbę dni do daty.",
        "Documentation.LongDescription": "Zwraca wynik — w formie wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> — dodania <code>numberOfDays</code> dni do wartości typu <code>datetime</code> równej <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, do której są dodawane dni.</li>\r\n      <li><code>numberOfDays</code>: liczba dni do dodania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 5 dni do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Dodaje określoną liczbę miesięcy do daty.",
        "Documentation.LongDescription": "Zwraca wynik — w formie wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> — dodania <code>numberOfMonths</code> miesięcy do wartości typu <code>datetime</code> równej <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, do której są dodawane miesiące.</li>\r\n        <li><code>numberOfMonths</code>: liczba miesięcy do dodania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 5 miesięcy do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Dodaj 18 miesięcy do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14 i godzinę 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Dodaje określoną liczbę kwartałów do daty.",
        "Documentation.LongDescription": "Zwraca wynik — w formie wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> — dodania <code>numberOfQuarters</code> kwartałów do wartości typu <code>datetime</code> równej <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, do której są dodawane kwartały.</li>\r\n      <li><code>numberOfQuarters</code>: liczba kwartałów do dodania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 1 kwartał do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Dodaje określoną liczbę tygodni do daty.",
        "Documentation.LongDescription": "Zwraca wynik — w formie wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> — dodania <code>numberOfWeeks</code> tygodni do wartości typu <code>datetime</code> równej <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, do której są dodawane tygodnie.</li>\r\n      <li><code>numberOfWeeks</code>: liczba tygodni do dodania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 2 tygodnie do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Dodaje określoną liczbę lat do daty.",
        "Documentation.LongDescription": "Zwraca wynik — w formie wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> — dodania <code>numberOfYears</code> lat do wartości typu <code>datetime</code> równej <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, do której są dodawane lata.</li>\r\n        <li><code>numberOfYears</code>: liczba lat do dodania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 4 lata do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Dodaj 10 lat do wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę 2011-05-14 i godzinę 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnych dni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych dni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>days</code>: liczba dni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy dzień po bieżącej dacie systemu występuje w ciągu przyszłych dwóch dni.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnych miesięcy określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych miesięcy określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>months</code>: liczba miesięcy.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy miesiąc po bieżącej dacie systemu występuje w ciągu przyszłych dwóch miesięcy.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnych kwartałów określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych kwartałów określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>quarters</code>: liczba kwartałów.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy kwartał po bieżącej dacie systemu występuje w ciągu przyszłych dwóch kwartałów.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnych tygodni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych tygodni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodnia.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>weeks</code>: liczba tygodni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy tydzień po bieżącej dacie systemu występuje w ciągu przyszłych dwóch tygodni.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnych lat określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych lat określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>years</code>: liczba lat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy rok po bieżącej dacie systemu występuje w ciągu przyszłych dwóch lat.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu poprzednich dni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich dni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>days</code>: liczba dni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy dzień przed bieżącą datą systemu występuje w ciągu poprzednich dwóch dni.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu poprzednich miesięcy określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich miesięcy określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>months</code>: liczba miesięcy.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy miesiąc przed bieżącą datą systemu występuje w ciągu poprzednich dwóch miesięcy.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu poprzednich kwartałów określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich kwartałów określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>quarters</code>: liczba kwartałów.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy kwartał przed bieżącą datą systemu występuje w ciągu poprzednich dwóch kwartałów.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu poprzednich tygodni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich tygodni określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodni.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>weeks</code>: liczba tygodni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy tydzień przed bieżącą datą systemu występuje w ciągu poprzednich dwóch tygodni.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu poprzednich lat określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich lat określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>years</code>: liczba lat.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy rok przed bieżącą datą systemu występuje w ciągu poprzednich dwóch lat.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Dodaje informacje o strefie czasowej do wartości daty/godziny.",
        "Documentation.LongDescription": "Dodaje informacje o strefie czasowej do wartości <code>dateTime</code>. Informacje o strefie czasowej obejmują <code>timezoneHours</code> i opcjonalnie <code>timezoneMinutes</code>, które określają żądane przesunięcie od czasu UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ustaw strefę czasową na UTC+7:30 (7 godzin i 30 minut po strefie UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu następnych godzin określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych godzin określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>hours</code>: liczba godzin.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy godzina po bieżącej dacie systemu występuje w ciągu następnych dwóch godzin.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu następnych minut określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych minut określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>minutes</code>: liczba minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy godzina po bieżącej dacie systemu występuje w ciągu następnych dwóch minut.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu następnych sekund określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnych sekund określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>seconds</code>: liczba sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy sekunda po bieżącej dacie systemu przypada w ciągu następnych dwóch sekund.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzednich godzin określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich godzin określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>hours</code>: liczba godzin.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy godzina przed bieżącą datą systemu występuje w ciągu poprzednich dwóch godzin.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzednich minut określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich minut określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>minutes</code>: liczba minut.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy minuta przed bieżącą datą systemu występuje w ciągu poprzednich dwóch minut.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzednich sekund określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzednich sekund określonych zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      <li><code>seconds</code>: liczba sekund.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy sekunda przed bieżącą datą systemu występuje w ciągu poprzednich dwóch sekund.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Zmienia strefę czasową wartości.",
        "Documentation.LongDescription": "Zmienia informacje dotyczące strefy czasowej w wartości typu datetimezone <code>dateTimeZone</code> na nowe informacje dotyczące strefy czasowej dostarczone w parametrze <code>timezoneHours</code> i opcjonalnie <code>timezoneMinutes</code>.\r\n    Jeśli wartość <code>dateTimeZone</code> nie ma składnika strefy czasowej, jest zgłaszany wyjątek.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmień informacje dotyczące strefy czasowej dla wartości typu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na 8 godzin.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Zmień informacje dotyczące strefy czasowej dla wartości #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na -30 minut.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Uzyskuje dostęp do wartości według nazwy w osadzonym zestawie łączącym.",
        "Documentation.LongDescription": "Uzyskuje dostęp do wartości według nazwy w osadzonym zestawie łączącym.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Tworzy funkcję z podpisem określonego parametru na górze funkcji, która przyjmuje argument pojedynczej listy",
        "Documentation.LongDescription": "Przyjmuje funkcję jednoargumentową <code>function</code> i tworzy nową funkcję z typem <code>functionType</code>, który tworzy listę z jej argumentów i przekazuje ją do elementu <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Konwertuje funkcję List.Sum na funkcję dwuargumentową, której argumenty są sumowane",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Konwertuje funkcję przyjmującą listę na funkcję dwuargumentową",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Wywołuje daną funkcję",
        "Documentation.LongDescription": "Wywołuje daną funkcję przy użyciu określonej listy argumentów i zwraca wynik.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Wywołuje funkcję Record.FieldNames z jednym argumentem [A=1,B=2].",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Wywołuje daną funkcję po upływie podanego okresu.",
        "Documentation.LongDescription": "Zwraca wynik wywołania funkcji <code>function</code> po upływie okresu <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Tworzy funkcję skalarną opartą na funkcji wektorowej, konstruując partię z wielu wywołań.",
        "Documentation.LongDescription": "<p>Zwraca funkcję skalarną typu <code>scalarFunctionType</code>, która wywołuje funkcję <code>vectorFunction</code> z pojedynczym wierszem argumentów i zwraca dla niej pojedynczą wartość wyjściową. Ponadto wielokrotne zastosowanie funkcji skalarnej dla każdego wiersza tabeli danych wejściowych, takiej jak Table.AddColumn, spowoduje zamiast tego jednokrotne zastosowanie funkcji <code>vectorFunction</code> dla wszystkich danych wejściowych. </p>\r\n<p>Do funkcji <code>vectorFunction</code> zostanie przekazana tabela, której kolumny pasują do parametrów typu <code>scalarFunctionType</code> ze względu na nazwę i pozycję. Każdy wiersz tej tabeli zawiera argumenty dla jednego wywołania funkcji skalarnej, przy czym kolumny odpowiadają parametrom typu <code>scalarFunctionType</code>. </p>\r\n<p>Funkcja <code>vectorFunction</code> musi zwracać listę tej samej długości co tabela wejściowa, a każdy element tej listy musi mieć taki sam wynik jak wynik obliczenia funkcji skalarnej dla wiersza wejściowego w odpowiadającym położeniu. </p>\r\n<p>Oczekuje się, że tabela wejściowa będzie przesyłana strumieniowo, więc oczekuje się także, że funkcja <code>vectorFunction</code> będzie przesyłać strumieniowo dane wyjściowe w miarę nadsyłania danych wejściowych, przetwarzając w danym czasie tylko jeden fragment danych wejściowych. W szczególności funkcja <code>vectorFunction</code> nie może iterować swojej tabeli wejściowej więcej niż raz.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Tworzy rekord reprezentujący punkt geograficzny z części.",
        "Documentation.LongDescription": "Tworzy rekord reprezentujący punkt geograficzny z jego części składowych, takich jak długość geograficzna, szerokość geograficzna, a jeśli występują, wysokość nad poziomem morza (Z) i miara (M). Opcjonalny identyfikator odwołania przestrzennego (SRID) może zostać podany, jeśli jest inny niż wartość domyślna (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Tworzy rekord reprezentujący punkt geometryczny z części.",
        "Documentation.LongDescription": "Tworzy rekord reprezentujący punkt geometryczny z jego części składowych, takich jak współrzędna X, współrzędna Y, a jeśli występują, współrzędna Z i miara (M). Opcjonalny identyfikator odwołania przestrzennego (SRID) może zostać podany, jeśli jest inny niż wartość domyślna (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Tworzy tożsamość.",
        "Documentation.LongDescription": "Tworzy tożsamość.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Określa, czy tożsamość należy do kolekcji tożsamości.",
        "Documentation.LongDescription": "Określa, czy tożsamość należy do kolekcji tożsamości.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Zwraca listę złożoną ze wszystkich elementów przesunięcia na liście, które mają nieparzyste numery.",
        "Documentation.LongDescription": "Zwraca listę złożoną ze wszystkich elementów przesunięcia na liście, które mają nieparzyste numery. Zmiany w pobieraniu i pomijaniu wartości z listy <code>list</code> są zależne od parametrów.\r\n    <ul>\r\n    <li><code>count</code>: określa liczbę wartości, które są za każdym razem pomijane.</li>\r\n    <li><code>repeatInterval</code>: opcjonalny interwał powtarzania wskazujący, ile wartości jest dodawanych między pominiętymi wartościami.</li>\r\n    <li><code>offset</code>: opcjonalny parametr przesunięcia umożliwiający rozpoczęcie pomijania wartości od początkowego przesunięcia.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę z zakresu {1..10} z pominięciem pierwszej liczby.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Utwórz listę z zakresu {1..10} z pominięciem co drugiej liczby.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Utwórz listę z zakresu {1..10}, która rozpoczyna się od 1, z pominięciem co drugiej liczby.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Utwórz listę z zakresu {1..10}, która rozpoczyna się od 1, z pominięciem jednej wartości, zachowaniem dwóch wartości itd.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Wskazuje, czy lista zawiera wartość.",
        "Documentation.LongDescription": "Wskazuje, czy lista <code>list</code> zawiera wartość <code>value</code>.\r\n    Zwraca wartość true, jeśli wartość zostanie znaleziona na liście; w przeciwnym razie zwraca wartość false. W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartość 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartość 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Wskazuje, czy lista zawiera wszystkie wartości z innej listy.",
        "Documentation.LongDescription": "Wskazuje, czy lista <code>list</code> zawiera wszystkie wartości z innej listy (<code>values</code>).\r\n    Zwraca wartość true, jeśli wartość zostanie znaleziona na liście; w przeciwnym razie zwraca wartość false. W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartości 3 i 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartości 5 i 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Wskazuje, czy lista zawiera dowolną z wartości z innej listy.",
        "Documentation.LongDescription": "Wskazuje, czy lista <code>list</code> zawiera dowolną z wartości z innej listy (<code>values</code>).\r\n        Zwraca wartość true, jeśli wartość zostanie znaleziona na liście; w przeciwnym razie zwraca wartość false. W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartość 3 lub 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 4, 5} zawiera wartość 6 lub 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Zwraca kowariancję dwóch list z liczbami.",
        "Documentation.LongDescription": "Zwraca kowariancję dwóch list z liczbami — <code>numberList1</code> i <code>numberList2</code>. Listy <code>numberList1</code> i <code>numberList2</code> muszą zawierać taką samą liczbę wartości typu <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Oblicz kowariancję dwóch list.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Zwraca różnicę między dwiema danymi listami.",
        "Documentation.LongDescription": "Zwraca elementy z listy <code>list1</code>, które nie występują na liście <code>list2</code>. Obsługiwane są zduplikowane wartości.\r\n    W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź elementy z listy {1, 2, 3, 4, 5}, które nie występują na liście {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Znajdź elementy z listy {1, 2}, które nie występują na liście {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Zwraca listę wartości (w tym pola rekordu) zawierających określony tekst.",
        "Documentation.LongDescription": "Zwraca listę wartości z listy <code>list</code>, które zawierają wartość <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź na liście {\"a\", \"b\", \"ab\"} wartości tekstowe zawierające wartość „a”. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Zwraca pierwszy zestaw elementów z listy, określając, ile elementów ma zostać zwróconych, lub warunek kwalifikacji.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Jeśli jest określona liczba, zostanie zwróconych maksymalnie tyle elementów, ile wynosi ta liczba. </li>\r\n  <li>Jeśli jest określony warunek, zostaną zwrócone wszystkie elementy, które początkowo spełniały warunek. Gdy zostanie znaleziony element, który nie spełnia warunku, nie będą analizowane dalsze elementy. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź na liście {3, 4, 5, -1, 7, 8, 2} początkowe wartości, które są większe niż 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Zwraca wartość true, jeśli wszystkie wartości z listy spełniają warunek określony przez funkcję warunku.",
        "Documentation.LongDescription": "Zwraca wartość <code>true</code>, jeśli wszystkie wartości z listy <code>list</code> spełniają warunek <code>condition</code> określony przez funkcję warunku; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy wszystkie wartości z listy {11, 12, 13} są większe niż 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy wszystkie wartości z listy {1, 2, 3} są większe niż 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Zwraca wartość true, jeśli dowolna wartość spełnia warunek określony przez funkcję warunku.",
        "Documentation.LongDescription": "Zwraca wartość <code>true</code>, jeśli dowolna wartość z listy <code>list</code> spełnia warunek <code>condition</code> określony przez funkcję warunku; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy dowolna z wartości na liście {9, 10, 11} jest większa niż 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy dowolna z wartości na liście {1, 2, 3} jest większa niż 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Zwraca maksymalne wartości na liście. Należy określić liczbę wartości do zwrócenia lub warunek filtrowania.",
        "Documentation.LongDescription": "Zwraca maksymalne wartości na liście <code>list</code>.\r\n     Po posortowania wierszy można określić parametry opcjonalne w celu dalszego filtrowania wyniku. Opcjonalny parametr <code>countOrCondition</code> określa liczbę wartości do zwrócenia lub warunek filtrowania. Opcjonalny parametr <code>comparisonCriteria</code> określa sposób porównywania wartości na liście.\r\n <ul>\r\n <li> <code>list</code>: lista wartości.</li>\r\n <li> <code>countOrCondition</code>: Jeśli określono liczbę, zwracana jest lista maksymalnie <code>countOrCondition</code> elementów w kolejności rosnącej. Jeśli określono warunek, zwracana jest lista elementów, które początkowo spełniają warunek. Gdy warunek nie powiedzie się, nie zostaną uwzględnione żadne dalsze elementy.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcjonalnie]</i> Można określić opcjonalną wartość <code>comparisonCriteria</code>, aby określić sposób porównywania elementów na liście. Jeśli ten parametr ma wartość null, używany jest domyślny moduł porównujący.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Zwraca wartości minimalne na liście. Można określić liczbę wartości do zwrócenia lub warunek filtrowania.",
        "Documentation.LongDescription": "Zwraca wartości minimalne na liście <code>list</code>.\r\n     Parametr <code>countOrCondition</code>określa liczbę wartości do zwrócenia lub warunek filtrowania. Opcjonalny parametr, <code>comparisonCriteria</code>, określa sposób porównywania wartości na liście.\r\n <ul>\r\n <li> <code>list</code>: lista wartości.</li>\r\n <li> <code>countOrCondition</code>: Jeśli określono liczbę, zwracana jest lista maksymalnie <code>countOrCondition</code> elementów w kolejności rosnącej. Jeśli określono warunek, zwracana jest lista elementów, które początkowo spełniają warunek. Gdy element ulegnie awarii, nie zostaną uwzględnione żadne dalsze elementy. Jeśli ten parametr ma wartość null, zwracana jest najmniejsza pojedyncza wartość na liście.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcjonalnie]</i> Można określić opcjonalną wartość <code>comparisonCriteria</code>, aby określić sposób porównywania elementów na liście. Jeśli ten parametr ma wartość null, używany jest domyślny moduł porównujący.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź 5 najmniejszych wartości na liście <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Zwraca listę liczb, używając wartości początkowej, liczności oraz opcjonalnej wartości przyrostu.",
        "Documentation.LongDescription": "Zwraca listę liczb, używając wartości początkowej, liczności oraz opcjonalnej wartości przyrostu. Domyślna wartość przyrostu to 1.\r\n<ul>\r\n   <li><code>start</code>: Wartość początkowa listy.</li>\r\n   <li><code>count</code>: Liczba wartości do utworzenia.</li>\r\n   <li><code>increment</code>: <i>[Parametr opcjonalny]</i> Wartość przyrostu. Jeśli ten parametr zostanie pominięty, wartości będą zwiększane o 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Wygeneruj listę 10 kolejnych liczb, zaczynając od 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Wygeneruj listę 10 kolejnych liczb, zaczynając od 1 i zwiększając każdą kolejną liczbę o 2.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Zwraca co najmniej jeden percentyl próbki odpowiadający podanym prawdopodobieństwom.",
        "Documentation.LongDescription": "Zwraca co najmniej jeden percentyl próbki listy <code>list</code>. Jeśli wartość <code>percentiles</code> jest liczbą z zakresu od 0,0 do 1,0, będzie ona traktowana jako percentyl, a wynik będzie\r\n    pojedynczą wartością odpowiadającą temu prawdopodobieństwu. Jeśli wartość <code>percentiles</code> jest listą liczb z wartościami z zakresu od 0,0 do 1,0, wynik będzie listą percentyli\r\n    odpowiadających prawdopodobieństwu wejściowemu. Opcja PercentileMode w elemencie <code>options</code> może być używana przez zaawansowanych użytkowników do wybierania bardziej konkretnej metody interpolacji, ale nie jest zalecana w przypadku większości zastosowań.\r\n    Wstępnie zdefiniowane symbole <code>PercentileMode.ExcelInc</code> i <code>PercentileMode.ExcelExc</code> są zgodne z metodami interpolacji używanymi przez funkcje programu Excel\r\n    <code>PERCENTYL.PRZEDZ.ZAMK</code> i <code>PERCENTYL.PRZEDZ.OTW</code>. Zachowanie domyślne odpowiada użyciu symbolu <code>PercentileMode.ExcelInc</code>. Symbole\r\n    <code>PercentileMode.SqlCont</code> i <code>PercentileMode.SqlDisc</code> są zgodne z zachowaniem programu SQL Server w przypadku użycia instrukcji, odpowiednio, <code>PERCENTILE_CONT</code>\r\n    i <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwszy kwartyl na liście <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Znajdź kwartyle na liście <code>{5, 3, 1, 7, 9}</code> przy użyciu metody interpolacji zgodnej z funkcją <code>PERCENTYL.PRZEDZ.OTW</code> programu Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Zwraca przesunięcia wartości na liście.",
        "Documentation.LongDescription": "Zwraca przesunięcie, przy którym wartość <code>value</code> występuje na liście <code>list</code>. Zwraca -1, jeśli wartość nie występuje na tej liście.\r\n    Można określić opcjonalny parametr wystąpienia (<code>occurrence</code>).\r\n<ul>\r\n   <li><code>occurrence</code>: maksymalna liczba wystąpień, które mają być zgłaszane.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pozycję na liście {1, 2, 3}, na której znajduje się wartość 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Zwraca pierwsze przesunięcie wartości na liście.",
        "Documentation.LongDescription": "Zwraca przesunięcie na liście <code>list</code> pierwszego wystąpienia wartości z listy <code>values</code>. Jeśli nie zostanie znalezione wystąpienie tej wartości, zwraca -1.\r\n    Można określić opcjonalny parametr wystąpienia (<code>occurrence</code>).\r\n<ul>\r\n   <li><code>occurrence</code>: maksymalna liczba wystąpień, które można zwrócić.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwszą pozycję na liście {1, 2, 3}, na której znajduje się wartość 2 lub 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Zwraca podzbiór listy rozpoczynający się od przesunięcia.",
        "Documentation.LongDescription": "Zwraca podzbiór listy rozpoczynający się od przesunięcia <code>list</code>. Opcjonalny parametr <code>offset</code> określa maksymalną liczbę elementów w podzbiorze.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zajdź podzbiór listy liczb od 1 do 10, który rozpoczyna się od przesunięcia 6.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Zajdź podzbiór o długości 2 listy liczb od 1 do 10, który rozpoczyna się od przesunięcia 6.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Usuwa elementy wymienione na liście list1 z danej listy.",
        "Documentation.LongDescription": "Usuwa wszystkie wystąpienia wartości wymienionych na liście <code>list2</code> z listy <code>list1</code>. Jeśli wartości wymienione na liście <code>list2</code> nie znajdują się na liście <code>list1</code>, zwracana jest oryginalna lista.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Usuń elementy wymienione na liście {2, 4, 6} z listy {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Usuwa wszystkie wystąpienia wartości wejściowych.",
        "Documentation.LongDescription": "Usuwa wszystkie wystąpienia wartości wymienionych na liście <code>list2</code> z listy <code>list1</code>. Jeśli wartości wymienione na liście <code>list2</code> nie znajdują się na liście <code>list1</code>, zwracana jest oryginalna lista.\r\n    W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz na podstawie listy {1, 2, 3, 4, 5, 5} listę, która nie zawiera wartości {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Usuwa określoną liczbę wartości, zaczynając od określonej pozycji.",
        "Documentation.LongDescription": "Usuwa <code>count</code> wartości z listy <code>list</code>, zaczynając od określonej pozycji <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Usuń 3 wartości z listy {1, 2, 3, 4, -6, -2, -1, 5}, zaczynając od indeksu 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Zwraca listę zawierającą liczbę powtórzeń oryginalnej listy.",
        "Documentation.LongDescription": "Zwraca listę zawierającą <code>count</code> powtórzeń oryginalnej listy <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę, na której 3 razy będzie powtórzona lista {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Stosuje wszystkie zamiany wartości { old, new }.",
        "Documentation.LongDescription": "Wykonuje podane operacje zamiany na liście <code>list</code>. Operacja zamiany <code>replacements</code> obejmuje listę dwóch wartości, która zawiera starą wartość i nową wartość.\r\n    W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie listy {1, 2, 3, 4, 5}, zamieniając wartość 5 na wartość -5 oraz wartość 1 na -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Zwraca listę wartości spełniających warunek.",
        "Documentation.LongDescription": "Zwraca listę wartości z listy <code>list</code>, które spełniają warunek wyboru <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź na liście {1, -3, 4, 9, -2} wartości, które są większe od 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Dzieli określoną listę na listę list przy użyciu określonego rozmiaru strony.",
        "Documentation.LongDescription": "Dzieli listę <code>list</code> na listę list, w której pierwszy element listy wyjściowej jest listą zawierającą pierwsze <code>pageSize</code> elementy(-ów) z\r\n    listy źródłowej, następny element listy wyjściowej to lista zwierającą kolejne <code>pageSize</code> elementy(-ów) z listy źródłowej itd.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Zwraca nową listę wartości obliczonych na podstawie tej listy.",
        "Documentation.LongDescription": "Zwraca nową listę wartości, stosując funkcję przekształcenia <code>transform</code> do listy <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Dodaj 1 do każdej wartości na liście {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Zwraca arcus tangens ilorazu dwóch liczb.",
        "Documentation.LongDescription": "Zwraca arcus tangens ilorazu dwóch liczb (<code>y</code> i <code>x</code>). Dzielenie będzie wykonywane w formie <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Zwraca wynik wykonania bitowej opcji AND na dwóch wartościach wejściowych.",
        "Documentation.LongDescription": "Zwraca wynik wykonania bitowej opcji AND na wartościach <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Zwraca wynik wykonania bitowej opcji OR na dwóch wartościach wejściowych.",
        "Documentation.LongDescription": "Zwraca wynik wykonania bitowej opcji OR na wartościach <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Wykonuje przesunięcie bitów w lewo.",
        "Documentation.LongDescription": "Zwraca wynik przesunięcia bitów w lewo w wartości <code>number1</code> o określoną liczbę bitów <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Wykonuje przesunięcie bitów w prawo.",
        "Documentation.LongDescription": "Zwraca wynik przesunięcia bitów w prawo w wartości <code>number1</code> o określoną liczbę bitów <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Zwraca wynik wykonania bitowej opcji XOR (OR wyłączne) na dwóch wartościach wejściowych.",
        "Documentation.LongDescription": "Zwraca wynik wykonania bitowej opcji XOR (OR wyłączne) na wartościach <code>number1</code> i <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Zwraca liczbę unikatowych kombinacji.",
        "Documentation.LongDescription": "Zwraca liczbę unikatowych kombinacji z listy elementów <code>setSize</code>, używając określonego rozmiaru kombinacji <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Liczba elementów na liście.</li>\r\n    <li><code>combinationSize</code>: Liczba elementów w każdej kombinacji.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę kombinacji z listy 5 elementów, gdy każda kombinacja to grupa 3 elementów.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Dzieli dwie liczby i zwraca część całkowitą wyniku.",
        "Documentation.LongDescription": "Zwraca część całkowitą wyniku dzielenia liczby <code>number1</code> przez liczbę <code>number2</code>.\r\n    Jeśli liczba <code>number1</code> lub <code>number2</code> jest równa null, funkcja <code>Number.IntegerDivide</code> zwraca wartość null.\r\n      <ul>\r\n        <li><code>number1</code>: Dzielna.</li>\r\n        <li><code>number2</code>: Dzielnik.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Podziel 6 przez 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Podziel 8,3 przez 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Dzieli dwie liczby i zwraca resztę z dzielenia.",
        "Documentation.LongDescription": "Zwraca resztę z dzielenia liczby <code>number</code> przez liczbę <code>divisor</code>.\r\n    Jeśli liczba <code>number</code> lub <code>divisor</code> jest równa null, funkcja <code>Number.Mod</code> zwraca wartość null.\r\n      <ul>\r\n        <li><code>number</code>: Dzielna.</li>\r\n        <li><code>divisor</code>: Dzielnik.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź resztę z dzielenia 5 przez 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Zwraca liczbę permutacji.",
        "Documentation.LongDescription": "Zwraca liczbę permutacji, które można wygenerować na podstawie określonej liczby elementów <code>setSize</code>, używając określonego rozmiaru permutacji <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę permutacji z listy 5 elementów, gdy każda permutacja to grupa 3 elementów.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Podnosi liczbę do danej potęgi.",
        "Documentation.LongDescription": "Zwraca wyniki podniesienia liczby <code>number</code> do potęgi <code>power</code>.\r\n    Jeśli liczba <code>number</code> lub <code>power</code> jest równa null, funkcja <code>Number.Power</code> zwraca wartość null.\r\n      <ul>\r\n        <li><code>number</code>: Podstawa.</li>\r\n        <li><code>power</code>: Wykładnik.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wynik podniesienia liczby 5 do potęgi 3 (5 do sześcianu).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Zwraca liczbę losową z zakresu między dwiema liczbami.",
        "Documentation.LongDescription": "Zwraca liczbę losową z zakresu od <code>bottom</code> do <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Utwórz liczbę losową z zakresu od 1 do 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Zwraca wartość określonego pola w rekordzie.",
        "Documentation.LongDescription": "Zwraca wartość określonego pola <code>field</code> w rekordzie <code>record</code>. Jeśli nie można odnaleźć pola, zwracany jest wyjątek.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartość pola „CustomerID” w rekordzie.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Zwraca wartość określonego pola w rekordzie lub wartość domyślną, jeśli nie można odnaleźć pola.",
        "Documentation.LongDescription": "Zwraca wartość określonego pola <code>field</code> w rekordzie <code>record</code>. Jeśli pole nie zostanie znalezione, jest zwracana opcjonalna wartość <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartość pola „Phone” w rekordzie lub zwróć wartość null, jeśli to pole nie istnieje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Znajdź wartość pola „Phone” w rekordzie lub zwróć wartość domyślną, jeśli to pole nie istnieje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Zwraca rekord, używając listy wartości pól oraz zestawu pól.",
        "Documentation.LongDescription": "Zwraca rekord, używając listy wartości pól <code>list</code> oraz zestawu pól.  Wartością parametru <code>fields</code> może być lista wartości tekstowych lub wartość typu record.  Jeśli pola nie są unikatowe, jest zgłaszany błąd.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Utwórz rekord na podstawie listy wartości pól oraz listy nazw pól.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Utwórz rekord na podstawie listy wartości pól oraz typu rekordu.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Wskazuje, czy rekord zawiera określone pola.",
        "Documentation.LongDescription": "Wskazuje, czy rekord <code>record</code> zawiera pola określone w parametrze <code>fields</code>, zwracając wartość logiczną (true lub false).\r\n    Używając listy, można określić wiele wartości pól.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy rekord zawiera pole „CustomerID”.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy rekord zawiera pola „CustomerID” i „Address”.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Usuwa określone pola z rekordu wejściowego.",
        "Documentation.LongDescription": "Zwraca rekord powstały przez usunięcie z rekordu wejściowego <code>record</code> wszystkich pól określonych na liście <code>fields</code>. Jeśli określone pole nie istnieje, jest zwracany wyjątek.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usuń pole „Price” z rekordu.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Usuń pola „Price” i „Item” z rekordu.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Stosuje operacje zmiany nazwy określone na liście mającej formę { old, new }.",
        "Documentation.LongDescription": "Zwraca rekord po zmianie nazw pól w rekordzie wejściowym <code>record</code> na nowe nazwy pól określone na liście <code>renames</code>. W przypadku wielu operacji zmiany nazwy można użyć listy zagnieżdżonej ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zmień nazwę pola „UnitPrice” na „Price” w rekordzie.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Zmień nazwę pola „UnitPrice” na „Price” i pola „OrderNum” na „OrderID” w rekordzie.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Zmienia kolejność określonych pól na nową kolejność.",
        "Documentation.LongDescription": "Zwraca rekord po zmianie kolejności pól w rekordzie <code>record</code> na kolejność pól określoną na liście <code>fieldOrder</code>. Wartości pól są zachowywane, a pola niewymienione na liście <code>fieldOrder</code> pozostają na oryginalnych pozycjach.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zmień kolejność niektórych pól w rekordzie.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Zwraca rekord zawierający tylko określone pola.",
        "Documentation.LongDescription": "Zwraca rekord zawierający tylko te pola z rekordu wejściowego <code>record</code>, które zostały określone na liście <code>fields</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Wybierz pola „Item” i „Price” w rekordzie.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Zwraca rekord po zastosowaniu określonych przekształceń.",
        "Documentation.LongDescription": "Zwraca rekord powstały w wyniku zastosowania do rekordu <code>record</code> przekształceń określonych na liście <code>transformOperations</code>.\r\n    W danej chwili może być przekształcane jedno lub większa liczba pól.\r\n      <div>W przypadku przekształcania jednego pola lista <code>transformOperations</code> musi zawierać dwa elementy. Pierwszy element na liście <code>transformOperations</code> określa nazwę pola, a drugi element na liście <code>transformOperations</code> określa funkcję, która będzie używana do wykonania przekształcenia. Na przykład <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>W przypadku przekształcania wielu pól lista <code>transformOperations</code> musi być listą list, a każda lista wewnętrzna musi zawierać parę nazwa pola oraz operacja przekształcenia. Na przykład <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Konwertuj pole „Cena” na liczbę.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Konwertuj wartości pól „Identyfikator zamówienia” i „Cena” na liczby.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania przejścia z jednego rodzaju znaków na inny. Parametry {0} i {1} mogą być listą znaków lub funkcją przyjmującą znaki i zwracającą wartość true/false.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania przejścia z jednego rodzaju znaków na inny. Parametry <code>before</code> i <code>after</code> mogą być listą znaków lub funkcją przyjmującą znaki i zwracającą wartość true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe za każdym razem, gdy po wielkiej lub małej literze następuje cyfra.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Konwertuje podane zapytanie SQL na kod M. Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Konwertuje podane zapytanie <code>sql</code> na kod M z dostępnymi identyfikatorami zdefiniowanymi przez <code>environment</code>. Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Zwraca określoną kolumnę danych z tabeli jako listę.",
        "Documentation.LongDescription": "Zwraca w postaci listy kolumnę danych (określoną przez parametr <code>column</code>) z tabeli <code>table</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zwraca dane z kolumny [Name] tabeli.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Zwraca listę z nazwami kolumn odpowiadającymi określonym typom.",
        "Documentation.LongDescription": "Zwraca listę z nazwami kolumn z tabeli <code>table</code>, które odpowiadają typom określonym w elemencie <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zwraca nazwy kolumn typu Number.Type z tabeli.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Wskazuje, czy określony rekord występuje jako wiersz tabeli.",
        "Documentation.LongDescription": "Wskazuje, czy określony rekord <code>row</code> występuje jako wiersz w tabeli <code>table</code>.\r\n    Opcjonalny parametr <code>equationCriteria</code> można określić, aby sterować porównywaniem wierszy tabeli.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela zawiera wiersz.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy tabela zawiera wiersz.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ustal, czy tabela zawiera wiersz, porównując tylko wartości w kolumnie [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Wskazuje, czy wszystkie określone rekordy występują jako wiersze w tabeli.",
        "Documentation.LongDescription": "Wskazuje, czy wszystkie rekordy określone na liście rekordów <code>rows</code> występują jako wiersze w tabeli <code>table</code>.\r\n    Opcjonalny parametr <code>equationCriteria</code> można określić, aby sterować porównywaniem wierszy tabeli.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela zawiera wszystkie wiersze, porównując tylko wartości w kolumnie [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy tabela zawiera wszystkie wiersze.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Wskazuje, czy dowolny z określonych rekordów występuje jako wiersz w tabeli.",
        "Documentation.LongDescription": "Wskazuje, czy dowolny z rekordów określonych na liście rekordów <code>rows</code> występuje jako wiersz w tabeli <code>table</code>.\r\n    Opcjonalny parametr <code>equationCriteria</code> można określić, aby sterować porównywaniem wierszy tabeli.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> zawiera wiersz <code>[a = 1, b = 2]</code> lub <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy tabela <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> zawiera wiersz <code>[a = 1, b = 3]</code> lub <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ustal, czy tabela <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> zawiera wiersz <code>[a = 1, b = 3]</code> lub <code>[a = 3, b = 5]</code>, porównując tylko wartości w kolumnie [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Wskazuje, czy tabela zawiera określone kolumny.",
        "Documentation.LongDescription": "Wskazuje, czy tabela <code>table</code> zawiera określone kolumny (<code>columns</code>). Zwraca wartość <code>true</code>, jeśli tabela zawiera te kolumny, w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela zawiera kolumnę [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy tabela zawiera kolumny [Name] i [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Wskazuje, czy wszystkie wiersze tabeli spełniają dany warunek.",
        "Documentation.LongDescription": "Wskazuje, czy wszystkie wiersze tabeli <code>table</code> spełniają dany warunek <code>condition</code>. Zwraca wartość <code>true</code>, jeśli wszystkie wiersze spełniają warunek; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy wszystkie wartości wierszy w kolumnie [a] tabeli są parzyste.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy wszystkie wartości wierszy w tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> są równe [a = 1, b = 2].",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Wskazuje, czy dowolne wiersze tabeli spełniają dany warunek.",
        "Documentation.LongDescription": "Wskazuje, czy dowolne wiersze tabeli <code>table</code> spełniają dany warunek <code>condition</code>. Zwraca wartość <code>true</code>, jeśli dowolny wiersz spełnia warunek; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy dowolna z wartości wierszy w kolumnie [a] tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> jest parzysta.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ustal, czy dowolna z wartości wierszy w tabeli <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> jest równa [a = 1, b = 2].",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Zwraca największy wiersz lub wartość domyślną, używając podanych kryteriów.",
        "Documentation.LongDescription": "Zwraca największy wiersz w tabeli <code>table</code>, używając podanych kryteriów <code>comparisonCriteria</code>. Jeśli tabela jest pusta, jest zwracana opcjonalna wartość <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wiersz mający największą wartość w kolumnie [a] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Znajdź wiersz mający największą wartość w kolumnie [a] w tabeli <code>({})</code>. Zwróć -1, jeśli tabela jest pusta.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Zwraca najmniejszy wiersz lub wartość domyślną, używając podanych kryteriów.",
        "Documentation.LongDescription": "Zwraca najmniejszy wiersz w tabeli <code>table</code>, używając podanych kryteriów <code>comparisonCriteria</code>. Jeśli tabela jest pusta, jest zwracana opcjonalna wartość <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wiersz mający najmniejszą wartość w kolumnie [a] w tabeli.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Znajdź wiersz mający najmniejszą wartość w kolumnie [a] w tabeli. Zwróć -1, jeśli tabela jest pusta.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Zwraca pozycję/pozycje wiersza w tabeli.",
        "Documentation.LongDescription": "Zwraca pozycję wiersza dla pierwszego wystąpienia wiersza <code>row</code> w określonej tabeli <code>table</code>. Jeśli nie zostanie znalezione wystąpienie, zwraca -1.\r\n    <ul>\r\n       <li><code>table</code>: Tabela wejściowa.</li>\r\n       <li><code>row</code>: Wiersz w tabeli, którego pozycja ma zostać znaleziona.</li>\r\n       <li><code>occurrence</code>: <i>[Parametr opcjonalny]</i> Określa, które wystąpienie wiersza ma zostać zwrócone.</li>\r\n       <li><code>equationCriteria</code>: <i>[Parametr opcjonalny]</i> Steruje porównywaniem wierszy tabeli.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pozycję pierwszego wystąpienia wiersza [a = 2, b = 4] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Znajdź pozycję drugiego wystąpienia wiersza [a = 2, b = 4] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Znajdź pozycje wszystkich wystąpień wiersza [a = 2, b = 4] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Zwraca pozycję/pozycje dowolnego z określonych wierszy w tabeli.",
        "Documentation.LongDescription": "Zwraca pozycję/pozycje wiersza/wierszy z tabeli <code>table</code> dla pierwszego wystąpienia listy <code>rows</code>. Jeśli nie zostanie znalezione wystąpienie tej wartości, zwraca -1.\r\n    <ul>\r\n    <li><code>table</code>: Tabela wejściowa.</li>\r\n       <li><code>rows</code>: Lista wierszy w tabeli, których pozycje mają zostać znalezione.</li>\r\n       <li><code>occurrence</code>: <i>[Parametr opcjonalny]</i> Określa, które wystąpienie wiersza ma zostać zwrócone.</li>\r\n       <li><code>equationCriteria</code>: <i>[Parametr opcjonalny]</i> Steruje porównywaniem wierszy tabeli.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pozycję pierwszego wystąpienia wiersza [a = 2, b = 4] lub [a = 6, b = 8] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Znajdź pozycje wszystkich wystąpień wiersza [a = 2, b = 4] lub [a = 6, b = 8] w tabeli <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Dzieli określoną tabelę na listę tabel przy użyciu określonego rozmiaru strony.",
        "Documentation.LongDescription": "Dzieli tabelę <code>table</code> na listę tabel, w której pierwszy element listy jest tabelą zawierającą pierwsze <code>pageSize</code> wiersze(-y) z\r\n    tabeli źródłowej, następny element listy to tabela zwierającą kolejne <code>pageSize</code>wiersze(-y) z tabeli źródłowej itd.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Podziel tabelę z pięcioma rekordami na tabele z dwoma rekordami w każdej.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Zwraca listę zawierającą określonych wierszy pierwszego zliczania i pozostałe wiersze.",
        "Documentation.LongDescription": "Zwraca listę zawierającą dwie tabele: tabelę z pierwszymi N wierszami <code>table</code> (określonymi przez <code>count</code>) oraz tabelę zawierającą pozostałe wiersze <code>table</code>.\r\n\r\nJeśli tabele listy wynikowej zostaną właściwie wyliczone za pierwszym razem i w odpowiedniej kolejności, funkcja wyliczy <code>table</code> tylko raz.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zwracanie pierwszych dwóch wierszy tabeli i pozostałych wierszy tabeli.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Przekształca wiersze tabeli, używając określonej funkcji przekształcenia.",
        "Documentation.LongDescription": "Tworzy <code>listę</code> stosując operację <code>transform</code> do każdego wiersza w <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Przekształć wiersze tabeli na listę liczb.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Przekształć wiersze tabeli numerycznej na rekordy tekstowe.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Zwraca część elementu <code>text</code> po określonym elemencie <code>delimiter</code>.\r\n    Opcjonalna liczba <code>index</code> wskazuje, które wystąpienie elementu <code>delimiter</code> ma zostać uwzględnione.\r\n    Opcjonalna lista <code>index</code> wskazuje, które wystąpienie elementu <code>delimiter</code> ma zostać uwzględnione oraz czy indeksowanie ma być rozpoczynane od początku elementu wejściowego.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pobierz część ciągu „111-222-333” po (pierwszym) łączniku.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Pobierz część ciągu „111-222-333” po drugim łączniku.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Pobierz część ciągu „111-222-333” po drugim łączniku od końca.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Zwraca znak znajdujący się na określonej pozycji.",
        "Documentation.LongDescription": "Zwraca znak znajdujący się na pozycji <code>index</code> w wartości tekstowej <code>text</code>. Pierwszy znak w tekście znajduje się na pozycji 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Znajdź znak znajdujący się na pozycji 4 w ciągu „Hello, World”.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Zwraca część elementu <code>text</code> przed określonym elementem <code>delimiter</code>.\r\n    Opcjonalna liczba <code>index</code> wskazuje, które wystąpienie elementu <code>delimiter</code> ma zostać uwzględnione.\r\n    Opcjonalna lista <code>index</code> wskazuje, które wystąpienie elementu <code>delimiter</code> ma zostać uwzględnione oraz czy indeksowanie ma być rozpoczynane od początku elementu wejściowego.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pobierz część ciągu „111-222-333” przed (pierwszym) łącznikiem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Pobierz część ciągu „111-222-333” przed drugim łącznikiem.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Pobierz część ciągu „111-222-333” przed drugim łącznikiem od końca.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Zwraca informację, czy tekst zawiera podciąg.",
        "Documentation.LongDescription": "Wykrywa, czy <code>text</code> zawiera wartość <code>substring</code>. Zwraca wartość TRUE, jeśli znaleziono daną wartość. Ta funkcja nie obsługuje symboli wieloznacznych ani wyrażeń regularnych.\r\n      <br>\r\n      <br>\r\n      Za pomocą opcjonalnego argumentu <code>comparer</code> można określić porównania bez uwzględniania wielkości liter, uwarunkowań kulturowych i ustawień regionalnych.\r\n      Następujące wbudowane funkcje porównujące są dostępne w języku formuły:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: służy do dokładnego porównywania porządkowego uwzględniający wielkość liter</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: służy do dokładnego porównywania porządkowego nie uwzględniającego wielkości liter</li>\r\n        <li> <code>Comparer.FromCulture</code>: służy do porównywania porządkowego uwzględniającego uwarunkowania kulturowe</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy tekst „Hello World” zawiera tekst „Hello”.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy tekst „Hello World” zawiera tekst „hello”.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Sprawdź, czy tekst „Hello world” zawiera ciąg „hello”, używając funkcji porównującej bez uwzględniania wielkości liter.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Zwraca ostatnie znaki tekstu.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>text</code>, która składa się z <code>count</code> ostatnich znaków wartości typu <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Pobierz 5 ostatnich znaków z tekstu „Hello, World”.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Wskazuje, czy tekst kończy się określoną wartością.",
        "Documentation.LongDescription": "Wskazuje, czy dany tekst, <code>text</code>, kończy się określoną wartością, <code>substring</code>. We wskazaniu jest uwzględniana wielkość liter.\r\n\r\n<div>\r\n        <code>comparer</code> to <code>Comparer</code> funkcja porównująca używana do sterowania porównywaniem. Funkcje porównujące mogą być używane do przeprowadzania porównania nie wymagającego rozróżniania wielkości liter, uwzględniającego uwarunkowania kulturowe lub lokalne.\r\n</div>\r\n<div>\r\nW języku formuły są dostępne następujące wbudowane funkcje porównujące:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: służy do wykonywania dokładnego porównania porządkowego</li>\r\n        <li><code> Comparer.OrdinalIgnoreCase</code>: służy do wykonywania dokładnego porównania bez uwzględniania wielkości liter</li>\r\n        <li>  <code>Comparer.FromCulture</code>: służy do porównywania uwzględniającego uwarunkowania kulturowe</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy tekst „Hello, World” kończy się wyrazem „world”.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Sprawdź, czy tekst „Hello, World” kończy się wyrazem „World”.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Zwraca sformatowany tekst na podstawie ciągu formatu i argumentów.",
        "Documentation.LongDescription": "Zwraca sformatowany tekst utworzony przez zastosowanie elementu <code>arguments</code> z listy lub rekordu do ciągu formatu <code>formatString</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatuje listę liczb.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatuje różne typy danych z rekordu zgodnie z kulturą Polska — polski.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Zwraca podciąg do określonej długości.",
        "Documentation.LongDescription": "Zwraca ciąg o długości <code>count</code> znaków lub do końca elementu <code>text</code> przy przesunięciu <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Znajdź podciąg w tekście „Hello World”, począwszy od indeksu 6 do 5. znaku.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Znajdź podciąg w tekście „Hello World”, począwszy od indeksu 6 do końca.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Zwraca tekst o określonej długości, dopełniając koniec danego tekstu.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>text</code> o długości <code>count</code> powstałą w wyniku dopełnienia spacjami końca wartości tekstowej <code>text</code>.\r\n    Za pomocą opcjonalnego parametru <code>character</code> można określić znak, który będzie używany do dopełniania. Domyślnie znakiem używanym do dopełniania jest spacja.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dopełnij koniec wartości tekstowej, tak aby zawierała 10 znaków.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Dopełnij koniec wartości tekstowej znakami „|”, tak aby zawierała 10 znaków.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Zwraca tekst o określonej długości, dopełniając początek danego tekstu.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>text</code> o długości <code>count</code> powstałą w wyniku dopełnienia spacjami początku wartości tekstowej <code>text</code>.\r\n    Za pomocą opcjonalnego parametru <code>character</code> można określić znak, który będzie używany do dopełniania. Domyślnie znakiem używanym do dopełniania jest spacja.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dopełnij początek wartości tekstowej, tak aby zawierała 10 znaków.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Dopełnij początek wartości tekstowej znakami „|”, tak aby zawierała 10 znaków.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Zwraca pierwszą pozycję wartości lub -1, jeśli wartość nie zostanie znaleziona.",
        "Documentation.LongDescription": "Zwraca pozycję określonego wystąpienia wartości tekstowej <code>substring</code> znalezionej w <code>text</code>.\r\n    Za pomocą opcjonalnego parametru <code>occurrence</code> można określić, które położenie wystąpienia ma być zwracane (domyślnie jest to pierwsze wystąpienie).\r\n    Zwraca wartość -1 jeśli wartość <code>substring</code> nie została znaleziona.\r\n\r\n      <div>\r\n        <code>comparer</code> to <code>Comparer</code> funkcja porównująca używana do sterowania porównywaniem. Funkcje porównujące mogą być używane do przeprowadzania porównania nie wymagającego rozróżniania wielkości liter, uwzględniającego uwarunkowania kulturowe lub lokalne.\r\n      </div>\r\n      <div>\r\n        W języku formuły są dostępne następujące wbudowane funkcje porównujące:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: służy do wykonywania dokładnego porównania porządkowego</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: służy do wykonywania dokładnego porównania bez uwzględniania wielkości liter</li>\r\n        <li> <code>Comparer.FromCulture</code>: służy do porównywania uwzględniającego uwarunkowania kulturowe</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pobierz pozycję pierwszego wystąpienia wyrazu „World” w tekście „Hello, World! Hello, World!”.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Pobierz położenie ostatniego wystąpienia wyrazu „World” w tekście „Hello, World! Hello, World!”.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Zwraca pierwszą pozycję dowolnego wymienionego znaku w wartości tekstowej lub -1, jeśli znak nie zostanie znaleziony.",
        "Documentation.LongDescription": "Zwraca pierwszą pozycję dowolnego znaku na liście <code>characters</code> znajdującego się w klasie <code>text</code>.\n    Opcjonalny parametr <code>occurrence</code> może służyć do określenia pozycji wystąpienia do zwrócenia.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwszą pozycję litery „W” lub „Ś” w tekście „Witaj, świecie!”.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Znajdź wszystkie położenia liter „W” lub „Ś” w tekście „Witaj, świecie”\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Zwraca podciąg znaleziony przy przesunięciu.",
        "Documentation.LongDescription": "Zwraca podciąg z tekstu <code>text</code> znaleziony przy przesunięciu <code>offset</code>.\r\n    Możesz dołączyć opcjonalny parametr <code>count</code>, aby określić liczbę zwracanych znaków. Zgłasza błąd w przypadku zbyt małej liczby znaków.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Zwraca podciąg z tekstu „Hello World”, zaczynając od indeksu 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Znajdź podciąg z tekstu „Hello World Hello”, zaczynający się od indeksu 6 i zawierający 5 znaków.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Usuwa wszystkie wystąpienia danego znaku lub listy znaków z wejściowej wartości tekstowej.",
        "Documentation.LongDescription": "Zwraca kopię wartości tekstowej <code>text</code>, z której zostały usunięte wszystkie znaki od <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Usuń znaki , i ; z wartości tekstowej.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Usuwa określoną liczbę znaków, zaczynając od danego przesunięcia.",
        "Documentation.LongDescription": "Zwraca kopię wartości tekstowej <code>text</code>, z której zostały usunięte wszystkie znaki od pozycji <code>offset</code>.\r\n    Za pomocą opcjonalnego parametru <code>count</code> można określić, ile znaków ma zostać usuniętych. Domyślna wartość parametru <code>count</code> to 1. Wartości pozycji rozpoczynają się od 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Usuń 1 znak z wartości tekstowej „ABEFC” na pozycji 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Usuń dwa znaki z wartości tekstowej „ABEFC”, zaczynając od pozycji 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Zwraca wartość tekstową składającą się z teksu wejściowego powtórzonego określoną liczbę razy.",
        "Documentation.LongDescription": "Zwraca wartość tekstową składającą się z teksu wejściowego <code>text</code> powtórzonego <code>count</code> razy.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Powtórz tekst „a” pięć razy.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Powtórz tekst „helloworld” trzy razy.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Wybiera wszystkie wystąpienia danego znaku lub listy znaków z wejściowej wartości tekstowej.",
        "Documentation.LongDescription": "Zwraca kopię wartości tekstowej <code>text</code>, z której zostały usunięte wszystkie znaki spoza zbioru <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Wybierz w wartości tekstowej wszystkie znaki z zakresu od „a” do „z”.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Dzieli tekst na listę wartości tekstowych, używając określonego ogranicznika.",
        "Documentation.LongDescription": "Zwraca listę wartości tekstowych powstałą w wyniku wykonania podziału wartości tekstowej <code>text</code> przy użyciu określonego ogranicznika <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie rozdzielanej znakami „|” wartości tekstowej „Name|Address|PhoneNumber”.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Zwraca listę wartości tekstowych powstałą w wyniku wykonania podziału przy dowolnym ze znaków w ograniczniku.",
        "Documentation.LongDescription": "Zwraca listę wartości tekstowych powstałą w wyniku wykonania podziału wartości tekstowej <code>text</code> przy użyciu dowolnego ze znaków w określonym ograniczniku <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie wartości tekstowej „Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com”.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Zwraca początek tekstu.",
        "Documentation.LongDescription": "Zwraca <code>count</code> pierwszych znaków z wartości <code>text</code> jako wartość tekstową.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Pobierz 5 pierwszych znaków z tekstu „Hello, World”.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Wskazuje, czy tekst rozpoczyna się od określonej wartości.",
        "Documentation.LongDescription": "Zwraca wartość TRUE, jeśli wartość tekstowa <code>text</code> rozpoczyna się od wartości tekstowej <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Wartość typu <code>text</code>, która jest szukana</li>\r\n        <li><code>substring</code>: <i></i> Wartość <code>text</code>, która jest podciągiem szukanym w wartości <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Opcjonalnie]</i> Funkcja porównująca <code>Comparer</code> służaca do sterowania porównywaniem. Na przykład, za pomocą funkcji <code>Comparer.OrdinalIgnoreCase</code> można wykonywać operacje porównywania bez rozrózniania wielkości liter</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code>to  <code>Comparer</code> funkcja porównująca używana do sterowania porównywaniem. Funkcje porównujące mogą być używane do przeprowadzania porównania nie wymagającego rozróżniania wielkości liter, uwzględniającego uwarunkowania kulturowe lub lokalne.\r\n      </div>\r\n      <div>\r\n        W języku formuły są dostępne następujące wbudowane funkcje porównujące:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: służy do wykonywania dokładnego porównania porządkowego</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: służy do wykonywania dokładnego porównania bez uwzględniania wielkości liter</li>\r\n        <li> <code>Comparer.FromCulture</code>: służy do porównywania uwzględniającego uwarunkowania kulturowe</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy tekst „Hello, World” rozpoczyna się od tekstu „hello”.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Sprawdź, czy tekst „Hello, World” rozpoczyna się od tekstu „Hello”.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Zwraca typ reprezentujący funkcje z określonymi ograniczeniami dotyczącymi parametrów i zwracanych typów.",
        "Documentation.LongDescription": "Tworzy element <code>function type</code> na podstawie elementu <code>signature</code>, rekord typu <code>ReturnType</code>, element <code>Parameters</code> i wartość <code>min</code> będącą minimalną liczbą argumentów wymaganych do wywołania funkcji.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tworzy typ dla funkcji, który przyjmuje parametr w postaci liczby o nazwie X i zwraca liczbę.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Zwraca typ reprezentujący rekordy z określonymi ograniczeniami dotyczącymi typów w polach.",
        "Documentation.LongDescription": "Zwraca typ reprezentujący rekordy z określonymi ograniczeniami dotyczącymi typów w polach.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dynamicznie generuj typ tabeli.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Określa, czy wartość pierwszego typu jest zawsze zgodna z drugim typem.",
        "Documentation.LongDescription": "Określa, czy wartość <code>type1</code> jest zawsze zgodna z <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy wartość typu number może być zawsze traktowana jako typ any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Określ, czy wartość typu any może być zawsze traktowana jako liczba typu.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Zastępuje aspekty typu.",
        "Documentation.LongDescription": "Zastępuje aspekty elementu <code>type</code> aspektami zawartymi w rekordzie <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Zwraca nowy typ tabeli, w którym wszystkie klucze zostały zastąpione kluczami z określonej listy kluczy.",
        "Documentation.LongDescription": "Zwraca nowy typ tabeli, w którym wszystkie klucze zostały zastąpione kluczami z określonej listy kluczy.<br>\r\n    <br>\r\n    Każdy klucz jest definiowany przy użyciu rekordu w następującej postaci:\r\n    <ul>\r\n      <li>\r\n        <code>Kolumny</code>: lista nazw kolumn, która definiuje klucz\r\n      </li>\r\n      <li>\r\n        <code>Podstawowy</code>: <code>true</code>, jeśli klucz jest kluczem podstawowym; w przeciwnym razie <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Określona lista kluczy jest weryfikowana w celu zapewnienia, że nie zdefiniowano więcej niż jednego klucza podstawowego i że wszystkie nazwy kolumn kluczy istnieją w typie tabeli.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zamień informacje o kluczu dla typu tabeli.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Wyczyść informacje o kluczu zdefiniowane wcześniej dla typu tabeli.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Zwraca typ kolumny w tabeli.",
        "Documentation.LongDescription": "Zwraca typ kolumny <code>column</code> w tabeli typu <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Zwraca bezwzględny identyfikator URI stanowiący połączenie wejściowego podstawowego identyfikatora URI oraz względnego identyfikatora URI.",
        "Documentation.LongDescription": "Zwraca bezwzględny identyfikator URI stanowiący połączenie wejściowych identyfikatorów <code>baseUri</code> i <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Zwraca sumę dwóch wartości.",
        "Documentation.LongDescription": "Zwraca sumę wartości <code>value1</code> i <code>value2</code>. Można określić opcjonalny parametr <code>precision</code>; domyślnie jest używana wartość <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Zwraca wartość, jeśli jest ona zgodna z określonym typem.",
        "Documentation.LongDescription": "Zwraca wartość, jeśli jest ona zgodna z określonym typem. Jest to odpowiednik operatora „is” w M, z wyjątkiem tego, że może akceptować odwołania do typu identyfikatora, takie jak Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Rzutowanie liczby na liczbę.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Próba rzutowania wartości tekstowej na liczbę.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Zwraca wartość -1, 0 lub 1 w zależności od tego, czy pierwsza wartość jest mniejsza, równa lub większa od drugiej.",
        "Documentation.LongDescription": "Zwraca wartość -1, 0 lub 1 w zależności od tego, czy pierwsza wartość jest mniejsza, równa lub większa od drugiej.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Zwraca wynik dzielenia pierwszej wartości przez drugą.",
        "Documentation.LongDescription": "Zwraca wynik dzielenia wartości <code>value1</code> przez wartość <code>value2</code>. Można określić opcjonalny parametr <code>precision</code>; domyślnie jest używana wartość <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Zwraca informację, czy dwie wartości są równe.",
        "Documentation.LongDescription": "Zwraca wartość true, jeśli wartość <code>value1</code> jest równa wartości <code>value2</code>; w przeciwnym razie zwraca wartość false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Określa, czy wartość jest zgodna z określonym typem.",
        "Documentation.LongDescription": "Określa, czy wartość jest zgodna z określonym typem. Jest to odpowiednik operatora „is” w M, z wyjątkiem tego, że może akceptować odwołania do typu identyfikatora, takie jak Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Porównaj dwa sposoby ustalania, czy liczba jest zgodna z liczbą typów.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Zwraca iloczyn dwóch wartości.",
        "Documentation.LongDescription": "Zwraca iloczyn z mnożenia wartości <code>value1</code> i <code>value2</code>. Można określić opcjonalny parametr <code>precision</code>; domyślnie jest używana wartość <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Oblicza zapytanie dla celu.",
        "Documentation.LongDescription": "<p>Ocenia element <code>query</code> w stosunku do elementu <code>target</code> przy użyciu parametrów określonych w elemencie <code>parameters</code> i opcji określonych w elemencie <code>options</code>.</p>\r\n<p>Wyjście zapytania jest zdefiniowane przez element <code>target</code>.</p>\r\n<p>Element <code>target</code> udostępnia kontekst dla operacji opisanej przez element <code>query</code>.</p>\r\n<p>Element <code>query</code> opisuje zapytanie do wykonania w stosunku do elementu <code>target</code>. Element <code>query</code> jest wyrażony w sposób specyficzny dla elementu <code>target</code> (np. jako instrukcja T-SQL).</p>\r\n<p>Opcjonalna wartość elementu <code>parameters</code> może zawierać listę lub rekord właściwy do udostępnienia wartości parametrów oczekiwanych przez element <code>query</code>.</p>\r\n<p>Opcjonalny rekord elementu <code>options</code> może zawierać opcje wpływające na zachowanie wykonywania elementu <code>query</code> w stosunku do elementu <code>target</code>. Te opcje są specyficzne dla elementu <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Zwraca informację, czy dwie wartości są równe.",
        "Documentation.LongDescription": "Zwraca wartość null, jeśli dowolny z argumentów „<code>value1</code>” i „<code>value2</code>” ma wartość null; w przeciwnym razie działa jak funkcja Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Zamienia informacje metadanych danych wejściowych.",
        "Documentation.LongDescription": "Zamienia informacje metadanych danych wejściowych.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Zastępuje typ wartości.",
        "Documentation.LongDescription": "Zastępuje typ <code>value</code> podanym typem <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Zastąp domyślny typ rekordu bardziej określonym typem.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Zwraca różnicę dwóch wartości.",
        "Documentation.LongDescription": "Zwraca różnicę wartości <code>value1</code> i <code>value2</code>. Można określić opcjonalny parametr <code>precision</code>; domyślnie jest używana wartość <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Tworzy akcję, która po wykonaniu zwróci wyniki wykonania żądania HTTP w postaci wartości binarnej.",
        "Documentation.LongDescription": "Tworzy akcję, która po wykonaniu zwróci wyniki wykonania żądania <code>method</code> względem <code>url</code> przy użyciu protokołu HTTP jako wartości binarnej.\r\n Można podać opcjonalny parametr rekordu, <code>options</code>, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n <ul>\r\n<li><code>Query</code> : Programowo dodawaj parametry zapytania do adresu URL bez konieczności zajmowania się sekwencjami ucieczki.</li>\r\n<li><code>ApiKeyName</code> : Jeśli w witrynie docelowej jest używany klucz interfejsu API, za pomocą tego parametru można określić nazwę (nie wartość) parametru klucza, kt&#243;ry musi być używany w adresie URL. Rzeczywista wartość klucza jest udostępniana w poświadczeniu.</li>\r\n<li><code>Headers</code> : Podanie rekordu w przypadku tej wartości spowoduje dostarczenie dodatkowych nagł&#243;wk&#243;w do żądania HTTP.</li>\r\n<li><code>Timeout</code> : Podanie czasu trwania w przypadku tej wartości spowoduje zmianę limitu czasu żądania HTTP. Wartość domyślna to 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Podanie listy w przypadku tej wartości spowoduje wykluczenie tych kluczy nagł&#243;wk&#243;w HTTP z obliczenia na potrzeby buforowania danych.</li>\r\n<li><code>IsRetry</code> : Podanie wartości true w przypadku tej wartości logicznej spowoduje zignorowanie odpowiedzi, kt&#243;ra może istnieć w pamięci podręcznej podczas pobierania danych.</li>\r\n<li><code>ManualStatusHandling</code> : Podanie listy w przypadku tej wartości uniemożliwi wszelką wbudowaną obsługę żądań HTTP, kt&#243;rych odpowiedź zawiera jeden z tych kod&#243;w stanu.</li>\r\n<li><code>RelativePath</code> : Podanie tekstu w przypadku tej wartości spowoduje dodanie go do podstawowego adresu URL przed wysłaniem żądania.</li>\r\n<li><code>Content</code> : Określenie tej wartości spowoduje, że jej zawartość stanie się treścią żądania HTTP.</li>\r\n</ul>\r\n\r\n <br>\r\n Pamiętaj, że ta funkcja jest wyłączona w większości kontekstów. Zamiast tego rozważ użycie elementu Web.Contents lub Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Wykonaj żądanie GET względem usługi Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL punktu końcowego interfejsu API REST usługi Azure Enterprise skojarzonego z Twoją rejestracją",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Zwraca binarny wynik wywołania adresu URL dostarczonego do interfejsu API usługi Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Użycie funkcji AzureEnterprise.Contents w celu zwrócenia wyników konkretnego raportu.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabela"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Zwraca zawartość określonego obiektu blob z magazynu platformy Azure.",
        "Documentation.LongDescription": "Zwraca zawartość obiektu blob pod adresem URL, <code>url</code>, z magazynu platformy Azure. Można określić element <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>BlockSize</code> : Liczba bajt&#243;w do odczytania przed oczekiwaniem na konsumenta danych. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : Liczba bajt&#243;w, kt&#243;re mają zostać odczytane w ramach pojedynczego żądania HTTP do serwera. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcja ConcurrentRequests obsługuje szybsze pobieranie danych przez określenie liczby żądań, kt&#243;re mają być wykonywane r&#243;wnolegle, co jednak powoduje większe użycie pamięci. Wymagana ilość pamięci to (ConcurrentRequest * RequestSize). Wartość domyślna to 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Zwraca zawartość określonego pliku z systemu plików Azure Data Lake Storage.",
        "Documentation.LongDescription": "Zwraca zawartość pliku pod adresem URL, <code>url</code>, z systemu plików usługi Azure Data Lake Storage. Można określić element <code>options</code>, aby kontrolować następujące opcje:\r\n    <ul>\r\n<li><code>BlockSize</code> : Liczba bajt&#243;w do odczytania przed oczekiwaniem na konsumenta danych. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : Liczba bajt&#243;w, kt&#243;re mają zostać odczytane w ramach pojedynczego żądania HTTP do serwera. Wartość domyślna to 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opcja ConcurrentRequests obsługuje szybsze pobieranie danych przez określenie liczby żądań, kt&#243;re mają być wykonywane r&#243;wnolegle, co jednak powoduje większe użycie pamięci. Wymagana ilość pamięci to (ConcurrentRequest * RequestSize). Wartość domyślna to 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Zwraca przybliżoną wartość długości danych binarnych.",
        "Documentation.LongDescription": "Zwraca przybliżoną wartość długości <code>binary</code> lub zwraca błąd, jeśli źródło danych nie obsługuje oszacowanej długości.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Uzyskaj przybliżoną wartość długości danych binarnych.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Buforuje wartość binarną w pamięci.",
        "Documentation.LongDescription": "Buforuje wartość binarną w pamięci. Wynikiem tego wywołania jest stabilna wartość binarna, czyli wartość o deterministycznej długości i kolejności bajtów.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Utwórz stabilną wersję wartości binarnej.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Łączy listę wartości binarnych w jedną wartość binarną.",
        "Documentation.LongDescription": "Łączy listę wartości binarnych w jedną wartość binarną.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Tworzy wartość binarną na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>binary</code> z danej wartości parametru <code>value</code>. Jeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Binary.From</code> zwraca wartość <code>null</code>.  Jeśli dany parametr <code>value</code> ma wartość typu <code>binary</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>binary</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>binary</code> z reprezentacji tekstowej. Zobacz opis funkcji <code>Binary.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, jest zwracany błąd.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Pobierz wartość typu <code>binary</code> z wartości <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Konwertuje listę liczb na wartość binarną.",
        "Documentation.LongDescription": "Konwertuje listę liczb na wartość binarną.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Dekoduje dane w formie tekstowej na wartość binarną.",
        "Documentation.LongDescription": "Zwraca wynik konwersji wartości tekstowej <code>text</code> na wartość binarną (lista wartości typu <code>number</code>). Parametr <code>encoding</code> można określić w celu wskazania kodowania używanego w wartości tekstowej.\r\n      W parametrze <code>encoding</code> można użyć następujących wartości <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodowanie Base 64.</li>\r\n        <li><code>BinaryEncoding.Hex</code>: kodowanie szesnastkowe.</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Zdekoduj wartość 1011 na wartość binarną.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Zdekoduj wartość 1011 na wartość binarną, używając kodowania szesnastkowego.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Odczytuje strumień danych binarnych i próbuje określić typ zawartości oraz informacje o formacie dla strumienia.",
        "Documentation.LongDescription": "Zwraca rekord z polem Content.Type, które zawiera wywnioskowany typ MIME.\r\n    Jeśli wywnioskowany typ zawartości to tekst/* i wykryta zostanie strona kodowa kodowania, to dodatkowo zwraca pole Content.Encoding z kodowaniem strumienia.\r\n    Jeśli wywnioskowany typ zawartości to text/csv i format jest rozdzielany, dodatkowo zwraca pole Csv.PotentialDelimiter z tabelą do analizowania potencjalnych ograniczników.\r\n    Jeśli wywnioskowany typ zawartości to text/csv i format ma stałą szerokość, dodatkowo zwraca pole Csv.PotentialPositions z listą do analizowania potencjalnych pozycji kolumn o stałej szerokości.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Zwraca liczbę znaków.",
        "Documentation.LongDescription": "Zwraca liczbę znaków.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Konwertuje wartość binarną na listę liczb.",
        "Documentation.LongDescription": "Konwertuje wartość binarną na listę liczb.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Koduje dane binarne w formie tekstowej.",
        "Documentation.LongDescription": "Zwraca wynik konwersji binarnej listy liczb <code>binary</code> na wartość tekstową. Opcjonalnie można określić parametr <code>encoding</code> w celu wskazania kodowania, które ma być używane w tworzonej wartości tekstowej.\r\n      W parametrze <code>encoding</code> można użyć następujących wartości <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodowanie Base 64.</li>\r\n        <li><code>BinaryEncoding.Hex</code>: kodowanie szesnastkowe.</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Tworzy zmodyfikowany rekord błędu, który nie spowoduje odwrotu w przypadku zgłoszenia go przez procedurę obsługi zdefiniowaną w widoku (za pośrednictwem metody Binary.View).",
        "Documentation.LongDescription": "Tworzy zmodyfikowany rekord błędu z <code>errorRecord</code>, który nie spowoduje odwrotu w przypadku zgłoszenia go przez procedurę obsługi zdefiniowaną w widoku (za pośrednictwem metody Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Tworzy funkcję, która może zostać przechwycona przez procedurę obsługi zdefiniowaną w widoku (za pomocą obiektu Binary.View).",
        "Documentation.LongDescription": "<p>Tworzy funkcję widoku na podstawie elementu <code>function</code>, który może być obsługiwany w widoku utworzonym za pomocą funkcji <code>Binary.View</code>.</p>\r\n<p>Procedura obsługi <code>OnInvoke</code> funkcji <code>Binary.View</code> może służyć do zdefiniowania procedury obsługi dla funkcji widoku.</p>\r\n<p>Tak jak w przypadku procedur obsługi dla operacji wbudowanych, jeśli nie zostanie określona żadna procedura obsługi <code>OnInvoke</code>, bądź procedura obsługi nie obsługuje funkcji widoku lub zostanie zgłoszony błąd przez procedurę obsługi, element <code>function</code> zostanie zastosowany na wierzchu widoku.</p>\r\n<p>Z bardziej kompleksowym opisem funkcji <code>Binary.View</code> i niestandardowymi funkcjami widoku można zapoznać się w opublikowanej dokumentacji dotyczącej łącznika niestandardowego usługi Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Format binarny odczytujący 64-bitowe liczby całkowite ze znakiem, które zostały zakodowane przy użyciu 7-bitowego kodowania o zmiennej długości.",
        "Documentation.LongDescription": "Format binarny odczytujący 64-bitowe liczby całkowite ze znakiem, które zostały zakodowane przy użyciu 7-bitowego kodowania o zmiennej długości.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Format binarny odczytujący 64-bitowe liczby całkowite bez znaku, które zostały zakodowane przy użyciu 7-bitowego kodowania o zmiennej długości.",
        "Documentation.LongDescription": "Format binarny odczytujący 64-bitowe liczby całkowite bez znaku, które zostały zakodowane przy użyciu 7-bitowego kodowania o zmiennej długości.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Format binarny odczytujący 8-bitową liczbę całkowitą bez znaku.",
        "Documentation.LongDescription": "Format binarny odczytujący 8-bitową liczbę całkowitą bez znaku.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Format binarny odczytujący 16-bajtową wartość dziesiętną platformy .NET.",
        "Documentation.LongDescription": "Format binarny odczytujący 16-bajtową wartość dziesiętną platformy .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Format binarny odczytujący 8-bajtową wartość zmiennoprzecinkową o podwójnej precyzji, która jest zgodna ze standardem IEEE.",
        "Documentation.LongDescription": "Format binarny odczytujący 8-bajtową wartość zmiennoprzecinkową o podwójnej precyzji, która jest zgodna ze standardem IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Zwraca format binarny odczytujący sekwencję elementów i zwracający listę.",
        "Documentation.LongDescription": "Zwraca format binarny odczytujący sekwencję elementów i zwracający <code>listę</code>.  Parametr <code>binaryFormat</code> określa format binarny każdego elementu.  Istnieją trzy sposoby określania liczby odczytanych elementów: <ul><li>Jeśli nie określono <code>countOrCondition</code>, format binarny będzie odczytywany, dopóki nie będzie więcej elementów.</li><li>Jeśli <code>countOrCondition</code> jest liczbą, format binarny odczyta tyle elementów. </li><li>Jeśli <code>countOrCondition</code> jest funkcją, ta funkcja zostanie wywołana dla każdego odczytanego elementu.  Funkcja zwraca wartość true, aby kontynuować, i wartość false, aby zatrzymać odczytywanie elementów.  Końcowy element jest uwzględniony w elemencie list.</li><li>Jeśli <code>countOrCondition</code> jest formatem binarnym, oczekiwana jest liczba elementów poprzedzających listę, a do odczytania wartości count.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Odczytuj bajty do końca danych.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Odczytaj dwa bajty.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Odczytuj bajty, dopóki wartość bajtu nie będzie większa lub równa dwa.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Format binarny odczytujący zero bajtów i zwracający wartość null.",
        "Documentation.LongDescription": "Format binarny odczytujący zero bajtów i zwracający wartość null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Zwraca format binarny odczytujący rekord.",
        "Documentation.LongDescription": "Zwraca format binarny odczytujący rekord.  Parametr <code>record</code> określa format rekordu.  Każde pole w rekordzie może mieć inny format binarny.  Jeśli pole zawiera wartość, która nie jest wartością formatu binarnego, nie są odczytywane dane dla tego pola, a wartość pola jest powtarzana w wyniku.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Odczytaj rekord zawierający jedną 16-bitową i jedną 32-bitową liczbę całkowitą.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Format binarny odczytujący 16-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Format binarny odczytujący 16-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Format binarny odczytujący 32-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Format binarny odczytujący 32-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Format binarny odczytujący 64-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Format binarny odczytujący 64-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Format binarny odczytujący 4-bajtową wartość zmiennoprzecinkową o pojedynczej precyzji, która jest zgodna ze standardem IEEE.",
        "Documentation.LongDescription": "Format binarny odczytujący 4-bajtową wartość zmiennoprzecinkową o pojedynczej precyzji, która jest zgodna ze standardem IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Zwraca format binarny odczytujący wartość tekstową.",
        "Documentation.LongDescription": "Zwraca format binarny odczytujący wartość tekstową.  Parametr <code>length</code> określa liczbę bajtów do zdekodowania lub format binarny długości poprzedzający tekst.  Opcjonalna wartość <code>encoding</code> określa kodowanie tekstu.  Jeśli parametr <code>encoding</code> nie jest określony, kodowanie jest ustalane na podstawie znaczników kolejności bajtów Unicode.  W przypadku braku znaczników kolejności bajtów jest używany format <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Zdekoduj dwa bajty jako tekst w formacie ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Zdekoduj tekst w formacie ASCII, w którym długość tekstu w bajtach występuje przed tekstem w postaci bajtów.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Format binarny odczytujący 16-bitową liczbę całkowitą bez znaku.",
        "Documentation.LongDescription": "Format binarny odczytujący 16-bitową liczbę całkowitą bez znaku.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Format binarny odczytujący 32-bitową liczbę całkowitą bez znaku.",
        "Documentation.LongDescription": "Format binarny odczytujący 32-bitową liczbę całkowitą bez znaku.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Format binarny odczytujący 64-bitową liczbę całkowitą bez znaku.",
        "Documentation.LongDescription": "Format binarny odczytujący 64-bitową liczbę całkowitą bez znaku.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Tworzy 8-bitową liczbę całkowitą z podanej wartości.",
        "Documentation.LongDescription": "Zwraca 8-bitową liczbę całkowitą <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Byte.From</code> zwraca wartość <code>null</code>. Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie 8-bitowej liczby całkowitej bez części ułamkowej, jest zwracana wartość <code>value</code>. Jeśli występuje część ułamkowa, liczba jest zaokrąglana przy użyciu podanego trybu zaokrąglania. Domyślny tryb zaokrąglania to <code>RoundingMode.ToEven</code>. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie najpierw przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Listę dostępnych trybów zaokrąglania można znaleźć w opisie funkcji <code>Number.Round</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobiera 8-bitową liczbę całkowitą <code>number</code> dla wartości <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pobiera 8-bitową liczbę całkowitą <code>number</code> dla wartości <code>\"4.5\"</code>, używając trybu zaokrąglania <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Konwertuje liczbę na znak tekstowy.",
        "Documentation.LongDescription": "Zwraca znak odpowiadający liczbie.<br>\r\n    <br>\r\n    Podany znak <code>number</code> powinien być 21-bitowym punktem kodu Unicode.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konwertuj liczbę na odpowiadającą jej wartość znaku.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Konwertuj znak na liczbę i na odwrót.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Konwertuj szesnastkowy punkt kodu emotikonu „szeroko uśmiechniętej twarzy” na równoważną parę dwuskładnikową UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Konwertuje znak na jego wartość liczbową.",
        "Documentation.LongDescription": "Zwraca liczbowy odpowiednik znaku <code>character</code>.<br>\r\n    <br>\r\n    Wynikiem będzie 21-bitowy punkt kodu Unicode reprezentowany przez podaną parę znaków lub prę dwuskładnikową.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konwertuj znak na odpowiadającą mu wartość liczbową.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Konwertuj parę dwuskładnikową UTF-16 dla emotikonu „szeroko uśmiechniętej twarzy” na równoważny punkt kodu szesnastkowego.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Zwraca funkcję łączącą listę tekstów przy użyciu określonego ogranicznika.",
        "Documentation.LongDescription": "Zwraca funkcję łączącą listę wartości tekstowych w jedną wartość tekstową przy użyciu określonego ogranicznika.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Połącz listę wartości tekstowych przy użyciu ogranicznika średnika.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Połącz tekst z dwóch kolumn przy użyciu przecinka jako ogranicznika i cudzysłowu właściwego dla plików CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Zwraca funkcję łączącą listę tekstów przy użyciu sekwencji ograniczników.",
        "Documentation.LongDescription": "Zwraca funkcję łączącą listę wartości tekstowych w jedną wartość tekstową przy użyciu sekwencji ograniczników.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Połącz listę wartości tekstowych przy użyciu sekwencji ograniczników.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Zwraca funkcję łączącą listę tekstów przy użyciu określonych długości.",
        "Documentation.LongDescription": "Zwraca funkcję łączącą listę wartości tekstowych w jedną wartość tekstową przy użyciu określonych długości.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Połącz listę wartości tekstowych, wyodrębniając określoną liczbę znaków z każdej wartości danych wejściowych.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Połącz listę wartości tekstowych, wyodrębniając określone liczby znaków po pierwszym wypełnieniu wyniku tekstem szablonu.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Zwraca funkcję łączącą listę tekstów przy użyciu określonych pozycji danych wyjściowych.",
        "Documentation.LongDescription": "Zwraca funkcję łączącą listę wartości tekstowych w jedną wartość tekstową przy użyciu określonych pozycji danych wyjściowych.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Połącz listę wartości tekstowych, umieszczając je w danych wyjściowych w określonych pozycjach.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Zwraca funkcję łączącą listę tekstów przy użyciu określonych pozycji i długości.",
        "Documentation.LongDescription": "Zwraca funkcję łączącą listę wartości tekstowych w jedną wartość tekstową przy użyciu określonych pozycji i długości. Długość o wartości null wskazuje, że cała wartość tekstowa powinna zostać dołączona.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Połącz listę wartości tekstowych przy użyciu określonych pozycji i długości danych wyjściowych.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Zwraca funkcję porównującą na podstawie określonej kultury i wielkości liter.",
        "Documentation.LongDescription": "Zwraca funkcję porównującą, która używa <code>culture</code> i funkcji uwzględniania wielkości liter określonej przez <code>ignoreCase</code> w celu wykonywania porównań.<br>\r\n      <br>\r\n      Funkcja porównująca akceptuje dwa argumenty i zwraca wartość -1, 0 lub 1 w zależności od tego, czy pierwsza wartość jest mniejsza niż, równa lub większa niż druga.<br>\r\n      <br>\r\n      Wartość domyślna dla <code>ignoreCase</code> to false. Wartość <code>culture</code> powinna być jedną z ustawień regionalnych obsługiwanych przez strukturę platformy .NET (na przykład „en-US”).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porównaj wartości „a” i „A” przy użyciu ustawień regionalnych „pl-PL”, aby sprawdzić, czy wartości są równe.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Porównaj wartości „a” i „A” przy użyciu ustawień regionalnych „pl-PL” bez uwzględniania wielkości liter, aby sprawdzić, czy wartości są równe.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Zwraca unikatowy identyfikator elementu członkowskiego z wartości właściwości elementów członkowskich.",
        "Documentation.LongDescription": "Zwraca unikatowy identyfikator elementu członkowskiego z wartości właściwości elementu członkowskiego. <code>attribute</code>. Zwraca wartość null w przypadku wszystkich innych wartości.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Zwraca klucz właściwości.",
        "Documentation.LongDescription": "Zwraca klucz właściwości <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Zwraca wartość waluty dla danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>currency</code> dla danej wartości: <code>value</code>. Jeśli dana wartość <code>value</code> to <code>null</code>, funkcja <code>Currency.From</code> zwraca wartość <code>null</code>. Jeśli typ danej wartości <code>value</code> to <code>number</code>, czyli liczba z zakresu waluty, część ułamkowa wartości <code>value</code> jest zaokrąglana do 4 miejsc po przecinku i zwracana. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie ona najpierw przekonwertowana na wartość typu <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Poprawny zakres wartości waluty to <code>-922 337 203 685 477,5808</code>–<code>922 337 203 685 477,5807</code>. Zobacz opis funkcji <code>Number.Round</code>, aby uzyskać listę dostępnych trybów zaokrąglania. Ustawienie domyślne to <code>RoundingMode.ToEven</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobierz wartość <code>currency</code>: <code>\"1,23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Uzyskaj wartość <code>currency</code> dla ciągu <code>\"1,23455\"</code> przy użyciu trybu <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Zwraca składnik dni.",
        "Documentation.LongDescription": "Zwraca składnik dni z danej wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, z której jest wyodrębniany składnik dni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz składnik dni z wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> reprezentującej datę i godzinę 2011-05-14 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Zwraca liczbę (od 0 do 6) wskazującą dzień tygodnia dla podanej wartości.",
        "Documentation.LongDescription": "Zwraca liczbę (od 0 do 6) wskazującą dzień tygodnia dla podanej wartości <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: Wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Wartość <code>Day</code> wskazująca dzień uznawany za pierwszy dzień tygodnia. Dozwolona wartość to Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday lub Day.Saturday. Jeśli nie zostanie określona, zostanie użyta wartość domyślna zależna od kultury.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, jaki dzień tygodnia był w poniedziałek 21 lutego 2011 r., używając niedzieli jako pierwszego dnia tygodnia.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Ustal, jaki dzień tygodnia był w poniedziałek 21 lutego 2011 r., używając poniedziałku jako pierwszego dnia tygodnia.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Zwraca nazwę dnia tygodnia.",
        "Documentation.LongDescription": "Zwraca nazwę dnia tygodnia dla podanej wartości <code>date</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz nazwę dnia tygodnia.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Zwraca liczbę z przedziału od 1 do 366 reprezentującą dzień roku.",
        "Documentation.LongDescription": "Zwraca liczbę reprezentującą dzień roku z podanej wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Dzień roku dla daty 1 marca 2011 r.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Zwraca liczbę z przedziału od 28 do 31 wskazującą liczbę dni w miesiącu.",
        "Documentation.LongDescription": "Zwraca liczbę dni w miesiącu z wartości typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> równej <code>dateTime</code>. \r\n <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, z której jest zwracana liczba dni w miesiącu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Liczba dni w miesiącu grudniu przedstawionym w postaci <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Zwraca koniec dnia.",
        "Documentation.LongDescription": "Zwraca koniec dnia reprezentowany przez <code>dateTime</code>. Informacje o strefie czasowej są zachowywane.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany koniec dnia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz koniec dnia z wartości 2011-05-14 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Pobierz koniec dnia z wartości 2011-05-17 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Zwraca koniec miesiąca.",
        "Documentation.LongDescription": "Zwraca koniec miesiąca, która zawiera <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany koniec miesiąca.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ koniec miesiąca dla daty 2011-05-14.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Określ koniec miesiąca dla daty 2011-05-17 17:00:00 -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Zwraca koniec kwartału.",
        "Documentation.LongDescription": "Zwraca koniec kwartału, który zawiera <code>dateTime</code>. Strefa czasowa jest zachowywana.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany koniec kwartału.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź koniec kwartału dla daty 10 października 2011 r. 8:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Zwraca koniec tygodnia.",
        "Documentation.LongDescription": "Zwraca koniec tygodnia, który zawiera <code>dateTime</code>.\r\n    Ta funkcja przyjmuje opcjonalną wartość <code>Day</code>, aby ustawić pierwszy dzień tygodnia dla swoich względnych obliczeń. Wartość domyślna to <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany ostatni dzień tygodnia.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Optional]</i> wartość typu <code>Day.Type</code> reprezentująca pierwszy dzień tygodnia. Możliwe wartości to <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> i <code>Day.Saturday.</code>. Wartość domyślna to <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ koniec tygodnia dla daty 2011-05-14.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Ustal koniec tygodnia dla daty 2011-05-17 17:00:00 -7:00, używając jako pierwszego dnia tygodnia niedzieli (ustawienie domyślne).",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Zwraca koniec roku.",
        "Documentation.LongDescription": "Zwraca koniec roku, który zawiera <code>dateTime</code>, w tym ułamkowe części sekund. Informacje dotyczące strefy czasowej są zachowywane.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany koniec roku.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz koniec roku z wartości 2011-05-14 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Pobierz koniec godziny z wartości 2011-05-17 17:00:00 -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Tworzy datę na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>date</code> z danej wartości parametru <code>value</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).\r\nJeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Date.From</code> zwraca wartość <code>null</code>. Jeśli dany parametr <code>value</code> ma wartość typu <code>date</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>date</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>date</code> z reprezentacji tekstowej. Zapoznaj się z opisem funkcji <code>Date.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>datetime</code>: składnik daty z wartości <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: składnik daty lokalnego odpowiednika typu data/godzina o wartości <code>value</code>.</li>\r\n        <li><code>number</code>: składnik daty odpowiednika typu data/godzina w formacie daty automatyzacji łączenia i osadzania obiektów wyrażony przez wartość <code>value</code>.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, zwracany jest błąd.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>43910</code> na wartość typu <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Przekonwertuj wartość <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na wartość typu <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Tworzy wartość „date” na podstawie lokalnych, uniwersalnych i niestandardowych formatów wartości „date”.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>date</code> z tekstowej reprezentacji, <code>text</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n  <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje analizę daty przy użyciu optymalnego rozwiązania.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code>.  Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"2010-12-31\"</code> na wartość typu <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Znajdź w kalendarzu gregoriańskim datę odpowiadającą początkowi 1400 roku w kalendarzu Hidżry.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Wskazuje, czy ta data wypada w bieżącym dniu, na podstawie aktualnej daty i godziny w systemie.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość typu datetime równa <code>dateTime</code> wypada w bieżącym dniu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w bieżącym dniu.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy ta data wypada w bieżącym miesiącu.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość w formacie datetime równa <code>dateTime</code> wypada w bieżącym miesiącu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w bieżącym miesiącu.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy ta data wypada w bieżącym kwartale.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość typu datetime równa <code>dateTime</code> wypada w bieżącym kwartale.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w bieżącym kwartale.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy ta data wypada w bieżącym tygodniu.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość typu datetime równa <code>dateTime</code> wypada w bieżącym tygodniu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w bieżącym tygodniu.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy ta data wypada w bieżącym roku.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość typu datetime równa <code>dateTime</code> wypada w bieżącym roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w bieżącym roku.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Wskazuje, czy ta data przypada w następnym dniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w następnym dniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy dzień po aktualnej godzinie systemu wypada w następnym dniu.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Wskazuje, czy ta data przypada w następnym miesiącu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w następnym miesiącu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy miesiąc po aktualnej godzinie systemu wypada w następnym miesiącu.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Wskazuje, czy ta data przypada w następnym kwartale określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w następnym kwartale określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy kwartał po aktualnej godzinie systemu wypada w następnym kwartale.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Wskazuje, czy ta data przypada w następnym tygodniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w następnym tygodniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym tygodniu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tydzień po aktualnej godzinie systemu wypada w następnym tygodniu.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Wskazuje, czy ta data przypada w następnym roku określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w następnym roku określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy rok po aktualnej godzinie systemu wypada w następnym roku.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Wskazuje, czy ta data przypada w poprzednim dniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że ta funkcja zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego dnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w poprzednim dniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym dniu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy dzień przed aktualną godziną systemu wypada w poprzednim dniu.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Wskazuje, czy ta data przypada w poprzednim miesiącu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego miesiąca.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w poprzednim miesiącu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym miesiącu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy miesiąc przed aktualną godziną systemu wypada w poprzednim miesiącu.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Wskazuje, czy ta data przypada w poprzednim kwartale określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w poprzednim kwartale określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego kwartału.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy kwartał przed aktualną godziną systemu wypada w poprzednim kwartale.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Wskazuje, czy ta data przypada w poprzednim tygodniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego tygodnia.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w poprzednim tygodniu określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym tygodniu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tydzień przed aktualną godziną systemu wypada w poprzednim tygodniu.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Wskazuje, czy ta data przypada w poprzednim roku określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącego roku.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w poprzednim roku określonym zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w bieżącym roku.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy rok przed aktualną godziną systemu wypada w poprzednim roku.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy ta data wypada w bieżącym roku i czy wypada w bieżącym dniu, czy przed nim.",
        "Documentation.LongDescription": "Wskazuje, na podstawie aktualnej daty i godziny w systemie, czy dana wartość typu datetime równa <code>dateTime</code> wypada w bieżącym roku i czy wypada w bieżącym dniu, czy przed nim.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy aktualna godzina systemu wypada w okresie od początku roku do daty.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Wskazuje, czy ta data wypada w roku przestępnym.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość typu datetime równa <code>dateTime</code> wypada w roku przestępnym. \r\n <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code> do obliczenia.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy rok 2012 reprezentowany przez wartość <code>#date(2012, 01, 01)</code> jest rokiem przestępnym.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Zwraca składnik miesiąca.",
        "Documentation.LongDescription": "Zwraca składnik miesiąca z wartości typu <code>datetime</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź miesiąc w wartości #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Zwraca nazwę składnika miesiąca.",
        "Documentation.LongDescription": "Zwraca składnik nazwy miesiąca dla podanej wartości <code>date</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz nazwę miesiąca.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Zwraca liczbę wskazującą, w którym kwartale roku wypada dana data.",
        "Documentation.LongDescription": "Zwraca liczbę z zakresu od 1 do 4 wskazującą, w którym kwartale roku wypada data <code>dateTime</code>. Data <code>dateTime</code> może być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ustal, w którym kwartale roku wypada data #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Zwraca początek dnia.",
        "Documentation.LongDescription": "Zwraca początek dnia reprezentowany przez <code>dateTime</code>.\r\n    <code>dateTime</code> musi być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek dnia dla daty 10 października 2011 r. 8:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Zwraca początek miesiąca.",
        "Documentation.LongDescription": "Zwraca początek miesiąca, który zawiera <code>dateTime</code>.\r\n    <code>dateTime</code> musi być wartością <code>daty</code> lub <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek miesiąca dla daty 10 października 2011 r. 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Zwraca początek kwartału.",
        "Documentation.LongDescription": "Zwraca początek kwartału, który zawiera <code>dateTime</code>.\r\n      <code>dateTime</code> musi być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek kwartału dla daty 10 października 2011 r. 8:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Zwraca początek tygodnia.",
        "Documentation.LongDescription": "Zwraca początek tygodnia, który zawiera <code>dateTime</code>.\r\n    <code>dateTime</code> musi być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek tygodnia dla wtorek, 11 października 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Znajdź początek tygodnia dla wtorek, 11 października 2011 r., używając poniedziałku jako początku tygodnia.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Zwraca początek roku.",
        "Documentation.LongDescription": "Zwraca początek roku, który zawiera <code>dateTime</code>.\r\n    <code>dateTime</code> musi być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek roku dla daty 10 października 2011 r. 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Zwraca rekord zawierający części wartości typu date.",
        "Documentation.LongDescription": "Zwraca rekord zawierający części danej wartości typu date (<code>date</code>).\r\n <ul>\r\n        <li><code>date</code>: wartość typu <code>date</code>, na podstawie części której jest tworzony rekord.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#date(2011, 12, 31)</code> na rekord zawierający części z wartości typu date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Zwraca tekstową reprezentację wartości daty.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację właściwości <code>date</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. <code>culture</code> stosuje się tylko w starszych przepływach pracy (zobacz poniżej). Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n   <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje sformatowanie daty przy użyciu wartości domyślnej zdefiniowanej przez parametr <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code> i <code>culture</code>. Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = <code>options</code>, Culture= <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#date(2010, 12, 31)</code> na wartość <code>„text”</code>. <i>Wynik może się różnić w zależności od aktualnej kultury.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Znajdź rok w kalendarzu Hidżry, który odpowiada dacie 1 stycznia 2000 r. w kalendarzu gregoriańskim.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Zwraca liczbę z zakresu od 1 do 6 wskazującą, w którym tygodniu miesiąca przypada ta data.",
        "Documentation.LongDescription": "Zwraca liczbę z zakresu od 1 do 6 wskazującą, w którym tygodniu miesiąca wypada data <code>dateTime</code>.\r\n <ul>\r\n <li><code>dateTime</code>: wartość <code>data/godzina</code>, dla której jest określany tydzień miesiąca.</li>\r\n</ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, w którym tygodniu marca w 2011 r. przypada 15. dzień.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Zwraca liczbę z zakresu od 1 do 54 wskazującą, w którym tygodniu roku wypada dana data.",
        "Documentation.LongDescription": "Zwraca liczbę z zakresu od 1 do 54 wskazującą, na który tydzień roku przypada data <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: wartość <code>datetime</code>, dla której określany jest tydzień roku.</li>\r\n        <li><code>firstDayOfWeek</code>: opcjonalna wartość <code>Day.Type</code>, która wskazuje, który dzień jest uznawany za początek tygodnia (na przykład <code>Day.Sunday</code>). Jeśli nie zostanie określona, zostanie użyta wartość domyślna na podstawie kultury.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Określ, który tydzień roku zawiera dzień 27 marca 2011 r.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Określ, który tydzień roku zawiera dzień 27 marca 2011 r., używając poniedziałku jako początku tygodnia.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Zwraca składnik roku.",
        "Documentation.LongDescription": "Zwraca składnik roku z wartości typu <code>datetime</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź rok w wartości #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Zwraca składnik daty z danej wartości typu date, datetime lub datetimezone.",
        "Documentation.LongDescription": "Zwraca składnik daty z danej wartości <code>dateTime</code> typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Znajdź datę w wartości #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Tworzy wartość typu datetime na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetime</code> z danej wartości parametru <code>value</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).\r\nJeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>DateTime.From</code> zwraca wartość <code>null</code>. Jeśli dany parametr <code>value</code> ma wartość typu <code>datetime</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>datetime</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>datetime</code> z reprezentacji tekstowej. Zapoznaj się z opisem funkcji <code>DateTime.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>date</code>: wartość typu <code>datetime</code> z wartością <code>value</code> jako składnikiem daty i wartością <code>12:00:00 AM</code> jako składnikiem godziny.</li>\r\n        <li><code>datetimezone</code>: lokalny odpowiednik wartości <code>value</code> w formacie <code>datetime</code>.</li>\r\n        <li><code>time</code>: wartość typu <code>datetime</code> z odpowiednikiem daty w formacie daty automatyzacji łączenia i osadzania obiektów o wartości <code>0</code> jako składnikiem daty i wartością <code>value</code> jako składnikiem godziny.</li>\r\n        <li><code>number</code>: odpowiednik wartości typu <code>datetime</code> w formacie daty automatyzacji łączenia i osadzania obiektów wyrażony przez wartość <code>value</code>.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, zwracany jest błąd.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#time(06, 45, 12)</code> na wartość typu <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Przekonwertuj wartość <code>#date(1975, 4, 4)</code> na wartość typu <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Tworzy wartość typu datetime na podstawie 64-bitowej liczby typu long.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>datetime</code> na podstawie wartości <code>fileTime</code> i konwertuje ją na lokalną strefę czasową. Wartość filetime to wartość godziny pliku systemu Windows odpowiadająca liczbie 100-nanosekundowych interwałów, które upłynęły od godz. 00:00 w dniu 1 stycznia 1601 r. uniwersalnego czasu koordynowanego (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>129876402529842245</code> na wartość typu datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Tworzy wartość typu datetimezone na podstawie lokalnych i uniwersalnych formatów daty/godziny.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>datetime</code> z tekstowej reprezentacji, <code>text</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n  <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje analizę daty przy użyciu optymalnego rozwiązania.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code>.  Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"2010-12-31T01:30:00\"</code> na wartość typu „datetime”.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Przekonwertuj wartość <code>\"2010-12-31T01:30:00.121212\"</code> na wartość typu „datetime”.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Przekonwertuj wartość <code>\"2010-12-31T01:30:00\"</code> na wartość typu „datetime”.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Przekonwertuj wartość <code>\"20101231T013000\"</code> na wartość typu „datetime”.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Wskazuje, czy ta wartość daty i godziny występuje w ciągu bieżącej godziny zgodnie z bieżącą datą i godziną systemu.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty i godziny <code>dateTime</code> występuje w ciągu bieżącej godziny zgodnie z bieżącą datą i godziną systemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do sprawdzenia.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy bieżący czas systemowy występuje w ciągu bieżącej godziny.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Wskazuje, czy ta wartość daty i godziny występuje w ciągu bieżącej minuty zgodnie z bieżącą datą i godziną systemu.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty i godziny <code>dateTime</code> występuje w ciągu bieżącej minuty zgodnie z bieżącą datą i godziną systemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do sprawdzenia.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy bieżący czas systemowy występuje w ciągu bieżącej minuty.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Wskazuje, czy ta wartość daty i godziny występuje w ciągu bieżącej sekundy zgodnie z bieżącą datą i godziną systemu.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty i godziny <code>dateTime</code> występuje w ciągu bieżącej sekundy zgodnie z bieżącą datą i godziną systemu.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do sprawdzenia.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy bieżący czas systemowy występuje w ciągu bieżącej sekundy.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Wskazuje, czy ta data przypada w ciągu następnej godziny określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnej godziny określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy godzina po bieżącej dacie systemu występuje w ciągu następnej godziny.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu następnej minuty określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnej minuty określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy minuta po bieżącej dacie systemu występuje w ciągu następnej minuty.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu następnej sekundy określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu następnej sekundy określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code> lub <code>datetime</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy sekunda po bieżącej dacie systemu przypada w ciągu następnej sekundy.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzedniej godziny określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzedniej godziny określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej godziny.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>date</code> lub <code>datetime</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy godzina przed bieżącą datą systemu występuje w ciągu poprzedniej godziny.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzedniej minuty określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzedniej minuty określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej minuty.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy minuta przed bieżącą datą systemu występuje w ciągu poprzedniej minuty.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Wskazuje, czy ta data/godzina przypada w ciągu poprzedniej sekundy określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.",
        "Documentation.LongDescription": "Wskazuje, czy dana wartość daty/godziny <code>dateTime</code> przypada w ciągu poprzedniej sekundy określonej zgodnie z bieżącą datą i godziną systemu. Pamiętaj, że funkcja ta zwraca wartość false, gdy przekazana wartość występuje w ciągu bieżącej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: wartość <code>datetime</code> lub <code>datetimezone</code> do oszacowania.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy sekunda przed bieżącą datą systemu występuje w ciągu poprzedniej sekundy.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Zwraca składnik godziny z danej wartości typu datetime.",
        "Documentation.LongDescription": "Zwraca składnik godziny z danej wartości typu datetime (<code>dateTime</code>).",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Znajdź godzinę w wartości #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Zwraca rekord zawierający części wartości typu datetime.",
        "Documentation.LongDescription": "Zwraca rekord zawierający części danej wartości typu datetime (<code>dateTime</code>).\r\n <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>datetime</code>, na podstawie części której jest tworzony rekord.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#datetime(2011, 12, 31, 11, 56, 2)</code> na rekord zawierający wartości daty i godziny.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Zwraca tekstową reprezentację wartości typu datetime.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację właściwości <code>dateTime</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. <code>culture</code> stosuje się tylko w starszych przepływach pracy (zobacz poniżej). Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n   <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje sformatowanie daty przy użyciu wartości domyślnej zdefiniowanej przez parametr <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code> i <code>culture</code>. Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = <code>options</code>, Culture= <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#datetime(2010, 12, 31, 01, 30, 25)</code> na wartość <code>„text”</code>. <i>Wynik może się różnić w zależności od aktualnej kultury.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konwertuj przy użyciu wzorca ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Tworzy wartość typu datetimezone na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>datetimezone</code> z danej wartości parametru <code>value</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).\r\nJeśli dany parametr <code>value</code> jest wartością <code>null</code>, funkcja <code>DateTimeZone.From</code> zwraca wartość <code>null</code>. Jeśli dany parametr <code>value</code> jest wartością typu <code>datetimezone</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>datetimezone</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>datetimezone</code> z reprezentacji tekstowej. Zapoznaj się z opisem funkcji <code>DateTimeZone.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>date</code>: wartość typu <code>datetimezone</code> z wartością <code>value</code> jako składnikiem daty, wartością <code>12:00:00 AM</code> jako składnikiem godziny oraz przesunięciem odpowiadającym lokalnej strefie czasowej.</li>\r\n        <li><code>datetime</code>: wartość typu <code>datetimezone</code> z wartością <code>value</code> jako wartością daty/godziny oraz przesunięciem odpowiadającym lokalnej strefie czasowej.</li>\r\n        <li><code>time</code>: wartość typu <code>datetimezone</code> z odpowiednikiem daty w formacie daty automatyzacji łączenia i osadzania obiektów o wartości <code>0</code> jako składnikiem daty, wartością <code>value</code> jako składnikiem godziny oraz przesunięciem odpowiadającym lokalnej strefie czasowej.</li>\r\n        <li><code>number</code>: wartość typu <code>datetimezone</code> z odpowiednikiem daty/godziny w formacie daty automatyzacji łączenia i osadzania obiektów wyrażonym przez wartość <code>value</code> oraz z przesunięciem odpowiadającym lokalnej strefie czasowej.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, zwracany jest błąd.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"2020-10-30T01:30:00-08:00\"</code> na wartość typu <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Tworzy wartość typu datetimezone na podstawie 64-bitowej liczby typu long.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>datetimezone</code> na podstawie wartości <code>fileTime</code> i konwertuje ją na lokalną strefę czasową. Wartość filetime to wartość godziny pliku systemu Windows odpowiadająca liczbie 100-nanosekundowych interwałów, które upłynęły od godz. 00:00 w dniu 1 stycznia 1601 r. uniwersalnego czasu koordynowanego (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>129876402529842245</code> na wartość typu datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Tworzy wartość „datetimezone” na podstawie lokalnych, uniwersalnych i niestandardowych formatów wartości „datetimezone”.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>datetimezone</code> z tekstowej reprezentacji, <code>text</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n  <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje analizę daty przy użyciu optymalnego rozwiązania.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code>.  Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"2010-12-31T01:30:00-08:00\"</code> na wartość typu <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konwertuj przy użyciu formatu daty ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Usuwa informacje dotyczące strefy czasowej z danej wartości typu datetimezone.",
        "Documentation.LongDescription": "Zwraca wartość typu #datetime z wartości <code>dateTimeZone</code>, po usunięciu informacji dotyczących strefy czasowej.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Usuń informacje dotyczące strefy czasowej z wartości typu #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Konwertuje składnik strefy czasowej na lokalną strefę czasową.",
        "Documentation.LongDescription": "Zmienia informacje dotyczące strefy czasowej w wartości typu datetimezone <code>dateTimeZone</code> na informacje dotyczące lokalnej strefy czasowej.\r\n    Jeśli wartość <code>dateTimeZone</code> nie ma składnika strefy czasowej, dodawane są informacje dotyczące lokalnej strefy czasowej.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmień informacje dotyczące strefy czasowej dla wartości typu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na informacje dotyczące lokalnej strefy czasowej (przy założeniu PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Zwraca rekord zawierający części wartości typu datetimezone.",
        "Documentation.LongDescription": "Zwraca rekord zawierający części danej wartości typu datetimezone (<code>dateTimeZone</code>).\r\n <ul>\r\n        <li><code>dateTimeZone</code>: wartość typu <code>datetimezone</code>, na podstawie części której jest tworzony rekord.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> na rekord zawierający wartości daty, godziny i strefy.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Zwraca tekstową reprezentację wartości typu datetimezone.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację właściwości <code>dateTimeZone</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. <code>culture</code> stosuje się tylko w starszych przepływach pracy (zobacz poniżej). Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n   <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje sformatowanie daty przy użyciu wartości domyślnej zdefiniowanej przez parametr <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„MMM”</code> ma wartości <code>„Jan”, „Feb”, „Mar”, ...</code>, natomiast w przypadku parametru <code>„ru-RU”</code>format<code>„MMM”</code> ma wartości <code>„янв”, „фев”, „мар”, ...</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code> i <code>culture</code>. Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = <code>options</code>, Culture= <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> na wartość <code>„text”</code>. <i>Wynik może się różnić w zależności od aktualnej kultury.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konwertuj przy użyciu wzorca ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Konwertuje składnik strefy czasowej na strefę czasową UTC.",
        "Documentation.LongDescription": "Zmienia informacje dotyczące strefy czasowej w wartości typu datetime <code>dateTimeZone</code> na informacje dotyczące strefy czasowej czasu uniwersalnego (UTC).\r\n    Jeśli wartość <code>dateTimeZone</code> nie ma składnika strefy czasowej, dodawane są informacje dotyczące strefy czasowej UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmień informacje dotyczące strefy czasowej dla wartości #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na strefę czasową UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Zmienia strefę czasową wartości.",
        "Documentation.LongDescription": "Zmienia strefę czasową wartości.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Zmienia strefę czasową wartości.",
        "Documentation.LongDescription": "Zmienia strefę czasową wartości.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Tworzy wartość dziesiętną dla podanej wartości.",
        "Documentation.LongDescription": "Zwraca liczbę dziesiętną <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Decimal.From</code> zwraca wartość <code>null</code>. Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie liczby dziesiętnej, jest zwracana wartość <code>value</code> — w innych wypadkach jest zwracany błąd. Jeśli wartość <code>value</code> jest wartością innego typu, najpierw zostanie przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobiera liczbę dziesiętną <code>number</code> dla wartości <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Zwraca zawartość tabeli usługi Delta Lake.",
        "Documentation.LongDescription": "Zwraca zawartość tabeli usługi Delta Lake.",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Tworzy liczbę o podwójnej precyzji dla podanej wartości.",
        "Documentation.LongDescription": "Zwraca liczbę o podwójnej precyzji <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Double.From</code> zwraca wartość <code>null</code>. Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie liczby o podwójnej precyzji, jest zwracana wartość <code>value</code> — w innych wypadkach jest zwracany błąd. Jeśli wartość <code>value</code> jest wartością innego typu, najpierw zostanie przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobiera wartość o podwójnej precyzji <code>number</code> dla wartości <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Zwraca część dni czasu trwania.",
        "Documentation.LongDescription": "Zwraca część dni w liczbie: <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Wyodrębnij liczbę dni między dwiema datami.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Tworzy wartość typu duration na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>duration</code> z danej wartości parametru <code>value</code>. Jeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Duration.From</code> zwraca wartość <code>null</code>.  Jeśli dany parametr <code>value</code> ma wartość typu <code>duration</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>duration</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>duration</code> z tekstowej formy zapisu czasu, który upłynął (d.g:m:s). Zobacz opis funkcji <code>Duration.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>number</code>: odpowiednik wartości typu <code>duration</code> dla liczby całych i ułamkowych dni wyrażonej przez wartość <code>value</code>.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, jest zwracany błąd.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>2.525</code> na wartość typu <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Zwraca wartość typu duration z tekstowej formy zapisu czasu, który upłynął (d.g:m:s).",
        "Documentation.LongDescription": "Zwraca wartość czasu trwania z określonego tekstu (<code>text</code>). Ta funkcja umożliwia analizowanie następujących formatów: \r\n <ul>\r\n        <li>(-)gg:mm(:ss(.uu)) </li>\r\n        <li>(-)ddd(.gg:mm(:ss(.uu))) </li>\r\n </ul>\r\n        <br>\r\n        (Wszystkie zakresy są włączne)<br>\r\n        ddd: Liczba dni.<br>\r\n        gg: Liczba godzin (od 0 do 23).<br>\r\n        mm: Liczba minut (od 0 do 59).<br>\r\n        ss: Liczba sekund (od 0 do 59).<br>\r\n        uu: Ułamek sekund (od 0 do 9999999).",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"2.05:55:20\"</code> na wartość typu <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Zwraca część godzin czasu trwania.",
        "Documentation.LongDescription": "Zwraca część godzin w liczbie: <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Wyodrębnij godziny z wartości czasu trwania.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Zwraca część minut czasu trwania.",
        "Documentation.LongDescription": "Zwraca część minut w liczbie: <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Wyodrębnij minuty z wartości czasu trwania.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Zwraca część sekund czasu trwania.",
        "Documentation.LongDescription": "Zwraca część sekund w liczbie: <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Wyodrębnij sekundy z wartości czasu trwania.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Zwraca rekord zawierający części wartości typu duration.",
        "Documentation.LongDescription": "Zwraca rekord zawierający części wartości typu duration (<code>duration</code>). \r\n  <ul>\r\n        <li><code>duration</code>: wartość typu <code>duration</code>, na podstawie której tworzony jest rekord.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#duration(2, 5, 55, 20)</code> na rekord zawierający jej części, w tym dni, godziny, minuty i sekundy.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Zwraca tekst w formie „d.g:m:s”.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację w formie „dzień.godzina:minuty:sekundy” dla danej wartości czasu trwania <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>Czas trwania</code>, dla którego jest obliczana reprezentacja tekstowa.</li>\r\n  <li><code>format</code>: <i>[opcjonalnie]</i> Przestarzałe, wartość inna niż null spowoduje zgłoszenie błędu.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#duration(2, 5, 55, 20)</code> na wartość tekstową.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Zwraca łączną liczbę dni, które obejmuje ten czas trwania.",
        "Documentation.LongDescription": "Zwraca łączną liczbę dni obejmującą <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Znajdź łączną liczbę dni o wartości czasu trwania.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Zwraca łączną liczbę godzin, które obejmuje ten czas trwania.",
        "Documentation.LongDescription": "Zwraca łączną liczbę godzin obejmującą <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Znajdź łączną liczbę godzin o wartości czasu trwania.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Zwraca łączną liczbę minut, które obejmuje ten czas trwania.",
        "Documentation.LongDescription": "Zwraca łączną liczbę minut obejmującą <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Znajdź łączną liczbę minut o wartości czasu trwania.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Zwraca łączną liczbę sekund, które obejmuje ten czas trwania.",
        "Documentation.LongDescription": "Zwraca łączną liczbę sekund obejmującą <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Znajdź łączną liczbę sekund o wartości czasu trwania.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Zwraca rekord błędu z dostarczonych wartości tekstowych określających przyczynę, komunikat i szczegóły.",
        "Documentation.LongDescription": "Zwraca rekord błędu z dostarczonych wartości tekstowych określających przyczynę, komunikat i szczegóły.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Zwraca reprezentację kodu źródłowego M wartości stałej.",
        "Documentation.LongDescription": "Zwraca reprezentację kodu źródłowego M wartości stałej.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Uzyskaj reprezentację kodu źródłowego M wartości liczbowej.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Uzyskaj reprezentację kodu źródłowego M wartości daty.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Uzyskaj reprezentację kodu źródłowego M wartości tekstowej.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Zwraca wynik obliczania wyrażenia języka M.",
        "Documentation.LongDescription": "Zwraca wynik obliczania wyrażenia języka M <code>document</code> z dostępnymi identyfikatorami, do których można się odwołać, określonymi za pomocą <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Ocena prostej sumy.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Ocena bardziej złożonej sumy.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Ocena połączenia wartości tekstowej z identyfikatorem.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Zwraca reprezentację kodu źródłowego M identyfikatora.",
        "Documentation.LongDescription": "Zwraca reprezentację kodu źródłowego M identyfikatora <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Uzyskaj reprezentację kodu źródłowego M identyfikatora.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Uzyskaj reprezentację kodu źródłowego M identyfikatora zawierającego spację.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Zwraca zawartość określonego pliku jako wartość binarną.",
        "Documentation.LongDescription": "Zwraca zawartość pliku <code>path</code> jako wartość binarną. Parametr <code>options</code> jest obecnie przeznaczony tylko do użytku wewnętrznego.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Zwraca informację o tym, czy dana funkcja jest uznawana za źródło danych.",
        "Documentation.LongDescription": "Zwraca informację o tym, czy funkcja <code>function</code> jest uznawana za źródło danych.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Tłumaczy tekst reprezentujący wartość geograficzną w formacie Well-Known Text (WKT) na rekord strukturalny.",
        "Documentation.LongDescription": "Tłumaczy tekst reprezentujący wartość geograficzną w formacie Well-Known Text (WKT) na rekord strukturalny. WKT jest standardowym formatem zdefiniowanym przez konsorcjum Open Geospatial Consortium (OGC) i jest typowym formatem serializacji używanym przez bazy danych, w tym SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Tłumaczy wartość strukturalnego punktu geograficznego na jego reprezentację Well-Known Text (WKT).",
        "Documentation.LongDescription": "Tłumaczy wartość strukturalnego punktu geograficznego na jego reprezentację Well-Known Text (WKT) zdefiniowaną przez konsorcjum Open Geospatial Consortium (OGC), a także format serializacji używany przez wiele baz danych, w tym SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Tłumaczy tekst reprezentujący wartość geometryczną w formacie Well-Known Text (WKT) na rekord strukturalny.",
        "Documentation.LongDescription": "Tłumaczy tekst reprezentujący wartość geometryczną w formacie Well-Known Text (WKT) na rekord strukturalny. WKT jest standardowym formatem zdefiniowanym przez konsorcjum Open Geospatial Consortium (OGC) i jest typowym formatem serializacji używanym przez bazy danych, w tym SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Tłumaczy wartość strukturalnego punktu geometrycznego na jego reprezentację Well-Known Text (WKT).",
        "Documentation.LongDescription": "Tłumaczy wartość strukturalnego punktu geometrycznego na jego reprezentację Well-Known Text (WKT) zdefiniowaną przez konsorcjum Open Geospatial Consortium (OGC), a także format serializacji używany przez wiele baz danych, w tym SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Zwraca wartość identyfikatora GUID danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość funkcji <code>Guid.Type</code> dla danej wartości <code>value</code>. Jeśli podana wartość <code>value</code> ma wartość <code>null</code>, funkcja <code>Guid.From</code> zwraca wartość <code>null</code>. Dany element <code>value</code> zostanie sprawdzony pod kątem dozwolonego formatu. Dozwolone formaty można znaleźć w przykładach.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Identyfikator GUID można podać jako 32 sąsiadujące cyfry szesnastkowe.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identyfikator GUID można podać jako 32 cyfry szesnastkowe rozdzielone łącznikami na bloki po 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identyfikator GUID można podać jako 32 cyfry szesnastkowe rozdzielone łącznikami i ujęte w nawiasy klamrowe.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identyfikator GUID można podać jako 32 cyfry szesnastkowe rozdzielone łącznikami i ujęte w nawiasy.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Tworzy 16-bitową liczbę całkowitą z podanej wartości.",
        "Documentation.LongDescription": "Zwraca 16-bitową liczbę całkowitą <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Int16.From</code> zwraca wartość <code>null</code>.  Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie 16-bitowej liczby całkowitej bez części ułamkowej, jest zwracana wartość <code>value</code>. Jeśli występuje część ułamkowa, liczba jest zaokrąglana przy użyciu podanego trybu zaokrąglania. Domyślny tryb zaokrąglania to <code>RoundingMode.ToEven</code>. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie najpierw przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Listę dostępnych trybów zaokrąglania można znaleźć w opisie funkcji <code>Number.Round</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobiera 16-bitową liczbę całkowitą <code>number</code> dla wartości <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pobiera 16-bitową liczbę całkowitą <code>number</code> dla wartości <code>\"4.5\"</code> przy użyciu trybu zaokrąglania <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Tworzy 32-bitową liczbę całkowitą z podanej wartości.",
        "Documentation.LongDescription": "Zwraca 32-bitową liczbę całkowitą <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Int32.From</code> zwraca wartość <code>null</code>.  Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie 32-bitowej liczby całkowitej bez części ułamkowej, jest zwracana wartość <code>value</code>. Jeśli występuje część ułamkowa, liczba jest zaokrąglana przy użyciu podanego trybu zaokrąglania. Domyślny tryb zaokrąglania to <code>RoundingMode.ToEven</code>. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie najpierw przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Listę dostępnych trybów zaokrąglania można znaleźć w opisie funkcji <code>Number.Round</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobieranie 32-bitowej liczby całkowitej <code>number</code> dla wartości <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pobieranie 32-bitowej liczby całkowitej <code>number</code> dla wartości <code>\"4.5\"</code> przy użyciu trybu zaokrąglania <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Tworzy 64-bitową liczbę całkowitą na podstawie podanej wartości.",
        "Documentation.LongDescription": "Zwraca 64-bitową liczbę całkowitą <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Int64.From</code> zwraca wartość <code>null</code>. Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie 64-bitowej liczby całkowitej bez części ułamkowej, jest zwracana wartość <code>value</code>. Jeśli występuje część ułamkowa, liczba jest zaokrąglana przy użyciu podanego trybu zaokrąglania. Domyślny tryb zaokrąglania to <code>RoundingMode.ToEven</code>. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie najpierw przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Listę dostępnych trybów zaokrąglania można znaleźć w opisie funkcji <code>Number.Round</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobierz 64-bitową liczbę całkowitą <code>number</code> o wartości <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Uzyskaj 64-bitową liczbę całkowitą <code>number</code> dla wartości <code>\"4,5\"</code> przy użyciu trybu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Tworzy 8-bitową liczbę całkowitą ze znakiem z podanej wartości.",
        "Documentation.LongDescription": "Zwraca 8-bitową liczbę całkowitą ze znakiem <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Int8.From</code> zwraca wartość <code>null</code>.  Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie 8-bitowej liczby całkowitej ze znakiem bez części ułamkowej, jest zwracana wartość <code>value</code>. Jeśli występuje część ułamkowa, liczba jest zaokrąglana przy użyciu podanego trybu zaokrąglania. Domyślny tryb zaokrąglania to <code>RoundingMode.ToEven</code>. Jeśli wartość <code>value</code> jest wartością innego typu, zostanie najpierw przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Listę dostępnych trybów zaokrąglania można znaleźć w opisie funkcji <code>Number.Round</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobieranie 8-bitowej liczby całkowitej ze znakiem <code>number</code> dla wartości <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pobieranie 8-bitowej liczby całkowitej ze znakiem <code>number</code> dla wartości <code>\"4.5\"</code> przy użyciu trybu zaokrąglania <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Zwraca abstrakcyjne drzewo składni (AST) dla treści funkcji.",
        "Documentation.LongDescription": "<p>Zwraca drzewo składni abstrakcyjnej (AST) dla treści <code>function</code>, znormalizowane do wyrażenia <i>row expression</i>:\r\n<ul>\r\n <li>Funkcja musi być funkcją lambda z 1 argumentem.</li>\r\n  <li>Wszystkie odwołania do parametru funkcji są zamieniane na <code>ItemExpression.Item</code>.</li>\r\n  <li>Drzewo AST zostanie uproszczone tak, aby zawierało tylko węzły tego rodzaju:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Jeśli nie można zwrócić drzewa składni  abstrakcyjnej (AST) wyrażenia wiersza dla treści funkcji <code>function</code>, jest zgłaszany błąd.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Zwraca wyrażenie AST dotyczące treści funkcji <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Zwraca zawartość dokumentu JSON.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Tworzy reprezentację danej wartości w notacji JSON.",
        "Documentation.LongDescription": "<p>Tworzy reprezentację JSON danej wartości <code>value</code> przy użyciu kodowania tekstu określonego przez element <code>encoding</code>. W przypadku pominięcia elementu <code>encoding</code> jest używany standard UTF8. Wartości są reprezentowane w następujący sposób:</p>\r\n <ul>\r\n        <li>Wartości null oraz wartości tekstowe i logiczne są reprezentowane jako odpowiadające im typy JSON.</li>\r\n        <li>Liczby są reprezentowane jako liczby w notacji JSON z wyjątkiem elementów <code>#infinity</code>, <code>-#infinity</code> i <code>#nan</code>, które są konwertowane na wartości null.</li>\r\n        <li>Listy są reprezentowane jako tablice JSON.</li>\r\n        <li>Rekordy są reprezentowane jako obiekty JSON.</li>\r\n        <li>Tabele są reprezentowane jako tablica obiektów.</li>\r\n        <li>Daty, godziny, wartości typu data/godzina, strefy czasowe i wartości czasu trwania są reprezentowane jako tekst ISO-8601.</li>\r\n        <li>Wartości binarne są reprezentowane jako tekst kodowany w formacie base-64.</li>\r\n        <li>Typy i funkcje powodują błąd.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość złożoną na notację JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Konwertuje wartość binarną na listę wartości tekstowych rozdzielonych podziałami wiersza. Jeśli zostanie określony styl cudzysłowów, podziały wiersza mogą być widoczne w cudzysłowach. Jeśli parametr includeLineSeparators ma wartość true, znaki podziału wiersza zostaną uwzględnione w tekście.",
        "Documentation.LongDescription": "Konwertuje wartość binarną na listę wartości tekstowych rozdzielonych podziałami wiersza. Jeśli zostanie określony styl cudzysłowów, podziały wiersza mogą być widoczne w cudzysłowach. Jeśli parametr includeLineSeparators ma wartość true, znaki podziału wiersza zostaną uwzględnione w tekście.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Konwertuje wartość tekstową na listę wartości tekstowych podzielonych w miejscach podziału wiersza. Jeśli element includeLineSeparators ma wartość true, znaki podziału wiersza zostaną uwzględnione w tekście.",
        "Documentation.LongDescription": "Konwertuje wartość tekstową na listę wartości tekstowych podzielonych w miejscach podziału wiersza. Jeśli element includeLineSeparators ma wartość true, znaki podziału wiersza zostaną uwzględnione w tekście.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (wartość domyślna) nie jest wymagane żadne działanie stosowania cudzysłowów.</li>\r\n            <li><code>QuoteStyle.Csv:</code> cudzysłowy są stosowane tak jak w pliku CSV. Podwójny cudzysłów służy do oddzielania tych regionów, a para podwójnych cudzysłowów służy do wskazania jednego podwójnego cudzysłowu w tym regionie. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Konwertuje listę wartości tekstowych na wartość binarną, używając określonego kodowania i separatora wierszy. Określony w parametrze lineSeparator separator wierszy jest dołączany do każdego wiersza.  Jeśli separator nie zostanie określony, będą używane znaki powrotu karetki i wysuwu wiersza.",
        "Documentation.LongDescription": "Konwertuje listę wartości tekstowych na wartość binarną, używając określonego kodowania i separatora wierszy. Określony w parametrze lineSeparator separator wierszy jest dołączany do każdego wiersza.  Jeśli separator nie zostanie określony, będą używane znaki powrotu karetki i wysuwu wiersza.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Konwertuje listę wartości tekstowych na jedną wartość tekstową.  Określony w parametrze lineSeparator separator wierszy jest dołączany do każdego wiersza.  Jeśli separator nie zostanie określony, będą używane znaki powrotu karetki i wysuwu wiersza.",
        "Documentation.LongDescription": "Konwertuje listę wartości tekstowych na jedną wartość tekstową.  Określony w parametrze lineSeparator separator wierszy jest dołączany do każdego wiersza.  Jeśli separator nie zostanie określony, będą używane znaki powrotu karetki i wysuwu wiersza.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Zwraca wartość true, jeśli wszystkie wyrażenia mają wartość true.",
        "Documentation.LongDescription": "Zwraca wartość true, jeśli wszystkie wyrażenia na liście <code>list</code> mają wartość true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sprawdza, czy wszystkie wyrażenia z listy {true, true, 2 > 0} mają wartość true.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Sprawdza, czy wszystkie wyrażenia z listy {true, true, 2 < 0} mają wartość true.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Zwraca wartość true, jeśli dowolne wyrażenie ma wartość true.",
        "Documentation.LongDescription": "Zwraca wartość true, jeśli dowolne wyrażenie na liście <code>list</code> ma wartość true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sprawdza, czy dowolne wyrażenie z listy {true, false, 2 > 0} ma wartość true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Sprawdza, czy dowolne wyrażenie z listy {2 = 0, false, 2 < 0} ma wartość true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Zwraca średnią z wartości. Ta funkcja działa z wartościami typu number, date, datetime, datetimezone i duration.",
        "Documentation.LongDescription": "Zwraca średnią wartość elementów na liście <code>list</code>. Wynik ma taki sam typ danych jak wartości na liście. Ta funkcja działa tylko z wartościami typu number, date, time, datetime, datetimezone i duration.\r\n    Jeśli lista jest pusta, zwracana jest wartość null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Znajdź średnią z listy liczb <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Znajdź średnią z wartości dat 1 stycznia 2011, 2 stycznia 2011 i 3 stycznia 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Buforuje listę.",
        "Documentation.LongDescription": "Buforuje listę <code>list</code> w pamięci. Wynikiem tego wywołania jest stabilna lista.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Utwórz stabilną kopię listy {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Zwraca jedną listę będącą wynikiem połączenia wielu list.",
        "Documentation.LongDescription": "Przyjmuje listę list <code>lists</code> i scala te listy w jedną nową listę.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Połącz dwie proste listy — {1, 2} i {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Połącz dwie listy — {1, 2} i {3, {4, 5}} — z których jedna zawiera listę zagnieżdżoną.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Zwraca liczbę elementów na liście.",
        "Documentation.LongDescription": "Zwraca liczbę elementów na liście <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę wartości na liście {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Zwraca listę wartości, z której zostały usunięte duplikaty.",
        "Documentation.LongDescription": "Zwraca listę zawierającą wszystkie wartości z listy <code>list</code> po usunięciu duplikatów. Jeśli lista jest pusta, wynikiem jest pusta lista.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Usuń duplikaty z listy {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Zwraca pierwszą wartość z listy lub określoną wartość domyślną, gdy lista jest pusta.",
        "Documentation.LongDescription": "Zwraca pierwszy element z listy <code>list</code> lub opcjonalną wartość domyślną <code>defaultValue</code>, gdy lista jest pusta.\r\n    Jeśli lista jest pusta i nie określono wartości domyślnej, funkcja zwraca wartość <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwszą wartość na liście {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Znajdź pierwszą wartość na liście {}. Jeśli lista jest pusta, zwracana jest wartość -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Zwraca część wspólną wartości list znalezionych w danych wejściowych.",
        "Documentation.LongDescription": "Zwraca część wspólną wartości list znalezionych na liście wejściowej <code>lists</code>. Można także określić opcjonalny parametr <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź część wspólną list {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Wskazuje, czy na liście znajdują się duplikaty.",
        "Documentation.LongDescription": "Zwraca wartość logiczną wskazującą, czy na liście <code>list</code> znajdują się duplikaty; jeśli na liście nie ma duplikatów, jest zwracana wartość <code>true</code>, a jeśli na liście znajdują się duplikaty, wartość <code>false</code>. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy lista {1, 2, 3} zawiera unikatowe wartości (nie zawiera duplikatów).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy lista {1, 2, 3, 3} zawiera unikatowe wartości (nie zawiera duplikatów).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Zwraca wartość true, jeśli lista jest pusta.",
        "Documentation.LongDescription": "Zwraca wartość <code>true</code>, jeśli lista <code>list</code> nie zawiera wartości (ma długość 0). Jeśli lista zawiera wartości (długość większa od 0), zwraca wartość <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy lista {} jest pusta.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy lista {1, 2} jest pusta.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Zwraca ostatnią wartość z listy lub określoną wartość domyślną, gdy lista jest pusta.",
        "Documentation.LongDescription": "Zwraca ostatni element z listy <code>list</code> lub opcjonalną wartość domyślną <code>defaultValue</code>, gdy lista jest pusta.\r\n    Jeśli lista jest pusta i nie określono wartości domyślnej, funkcja zwraca wartość <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź ostatnią wartość na liście {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Znajdź ostatnią wartość na liście {} lub zwróć -1, gdy lista jest pusta.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Zwraca ostatnią wartość z listy.  Opcjonalnie można określić liczbę zwracanych wartości lub warunek kwalifikacji.",
        "Documentation.LongDescription": "Zwraca ostatni element z listy <code>list</code>. Jeśli lista jest pusta, zwracany jest wyjątek.\r\n Ta funkcja przyjmuje opcjonalny parametr <code>countOrCondition</code>, który umożliwia zebranie wielu elementów lub filtrowanie elementów. Wartość parametru <code>countOrCondition</code> można określić na trzy sposoby:\r\n <ul>\r\n  <li>Jeśli jest określona liczba, zostanie zwróconych maksymalnie tyle elementów, ile wynosi ta liczba. </li>\r\n  <li>Jeśli jest określony warunek, zostaną zwrócone wszystkie elementy (począwszy od końca listy), które początkowo spełniały warunek. Gdy zostanie znaleziony element, który nie spełnia warunku, nie będą analizowane dalsze elementy. </li>\r\n  <li>Jeśli ten parametr będzie miał wartość null, zostanie zwrócony ostatni element z listy.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź ostatnią wartość na liście {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Znajdź ostatnie wartości na liście {3, 4, 5, -1, 7, 8, 2}, które są większe od 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Zwraca wartość maksymalną lub wartość domyślną, jeśli lista jest pusta.",
        "Documentation.LongDescription": "Zwraca maksymalny element z listy <code>list</code> lub opcjonalną wartość domyślną <code>default</code>, gdy lista jest pusta.\r\n    W celu ustalenia sposobu porównywania elementów na liście można określić opcjonalną wartość comparisonCriteria (<code>comparisonCriteria</code>). Jeśli ten parametr ma wartość null, używana jest domyślna funkcja porównująca.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartość maksymalną na liście {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Znajdź maksymalną wartość na liście {} lub zwróć -1, gdy lista jest pusta. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Zwraca wartość mediany z listy.",
        "Documentation.LongDescription": "Zwraca element mediany listy <code>list</code>. Ta funkcja zwraca wartość <code>null</code>, jeśli lista nie zawiera żadnych wartości innych niż <code>null</code>.\r\n    W przypadku parzystej liczby elementów, funkcja wybiera mniejszy z dwóch elementów mediany, chyba, że lista\r\n    składa się w całości z elementów będących datami i godzinami, czasami trwania, numerami lub godzinami — w takim przypadku zostanie zwrócona średnia wartość dwóch elementów.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź medianę na liście <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Zwraca wartość minimalną lub wartość domyślną, jeśli lista jest pusta.",
        "Documentation.LongDescription": "Zwraca minimalny element z listy <code>list</code> lub opcjonalną wartość domyślną <code>default</code>, gdy lista jest pusta.\r\n    W celu ustalenia sposobu porównywania elementów na liście można określić opcjonalną wartość comparisonCriteria (<code>comparisonCriteria</code>). Jeśli ten parametr ma wartość null, używana jest domyślna funkcja porównująca.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartość minimalną na liście {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Znajdź minimalną wartość na liście {} lub zwróć -1, gdy lista jest pusta. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Zwraca wartość, która najczęściej występuje na liście.",
        "Documentation.LongDescription": "Zwraca element najczęściej występujący na liście <code>list</code>. Jeśli lista jest pusta, jest zwracany wyjątek. Jeśli wiele elementów ma taką samą częstotliwość występowania, jest wybierany ostatni z nich.\r\n    W celu sterowania testowaniem jakości można określić opcjonalną wartość <code>comparisonCriteria</code>: <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Znajdź element najczęściej występujący na liście <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Znajdź element najczęściej występujący na liście <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Zwraca listę wartości najczęściej występujących na danej liście.",
        "Documentation.LongDescription": "Zwraca element najczęściej występujący na liście <code>list</code>. Jeśli lista jest pusta, jest zwracany wyjątek. Jeśli wiele elementów ma taką samą częstotliwość występowania, jest wybierany ostatni z nich.\r\n    W celu sterowania testowaniem jakości można określić opcjonalną wartość <code>comparisonCriteria</code>: <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Znajdź elementy najczęściej występujące na liście <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Zwraca liczbę elementów na liście, które mają wartość inną niż null.",
        "Documentation.LongDescription": "Zwraca liczbę elementów na liście <code>list</code>, które mają wartość inną niż null.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Zwraca listę przesunięć wartości wejściowej.",
        "Documentation.LongDescription": "Zwraca listę przesunięć wejściowej listy <code>list</code>.\r\n    Gdy w celu zmiany listy jest używana funkcja List.Transform, można użyć listy pozycji, aby umożliwić funkcji przekształcenia dostęp do odpowiedniej pozycji.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź przesunięcia wartości na liście {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Zwraca iloczyn liczb z listy.",
        "Documentation.LongDescription": "Zwraca iloczyn liczb innych niż null z listy <code>numbersList</code>. Zwraca wartość null, jeśli na liście nie znajdują się wartości inne niż null.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Znajdź iloczyn liczb na liście <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Zwraca listę liczb losowych.",
        "Documentation.LongDescription": "Zwraca listę losowych liczb z zakresu od 0 do 1, używając liczby wartości do wygenerowania opcjonalnej wartości inicjatora.\r\n<ul>\r\n   <li><code>count</code>: liczba losowych wartości do wygenerowania.</li>\r\n   <li><code>seed</code>: <i>[Parametr opcjonalny]</i> Wartość liczbowa używana w celu zainicjowania generatora liczb losowych. Jeśli ten parametr zostanie pominięty, przy każdym wywołaniu tej funkcji będzie generowana unikatowa lista losowych liczb. Jeśli zostanie określona wartość liczbowa inicjatora, przy każdym wywołaniu tej funkcji będzie generowana taka sama lista liczb losowych.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę zawierającą 3 liczby losowe.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Utwórz listę zawierającą 3 liczby losowe, określając wartość inicjatora.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Zwraca listę, na której pominięto określoną liczbę elementów znajdujących się na początku innej listy.",
        "Documentation.LongDescription": "Zwraca listę, z której usunięto pierwszy element listy <code>list</code>. Jeśli <code>list</code> jest listą pustą, zwracana jest pusta lista.\r\nTa funkcja przyjmuje opcjonalny parametr, <code>countOrCondition</code>, aby obsługiwać usuwanie wielu wartości, jak pokazano poniżej.\r\n <ul>\r\n <li>Jeśli określono liczbę, zostanie usuniętych maksymalnie tyle elementów. </li>\r\n <li>Jeśli określono warunek, wszystkie kolejne pasujące elementy na początku <code>list</code> zostaną usunięte.</li>\r\n <li>Jeśli ten parametr ma wartość null, zostanie zaobserwowane zachowanie domyślne. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie listy {1, 2, 3, 4, 5} bez 3 pierwszych liczb.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Utwórz na podstawie listy {5, 4, 2, 6, 1} listę, która rozpoczyna się od liczby mniejszej niż 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Zwraca listę, z której usunięto określoną liczbę elementów znajdujących się na końcu listy.",
        "Documentation.LongDescription": "Zwraca listę, z której usunięto ostatnich <code>countOrCondition</code> elementów znajdujących się na końcu listy <code>list</code>. Jeśli <code>list</code> liczba elementów jest mniejsza niż <code>countOrCondition</code> elementów, zwracana jest pusta lista.\r\n <ul>\r\n <li>Jeśli określono liczbę, zostanie usuniętych maksymalnie tyle elementów. </li>\r\n <li>Jeśli określono warunek, wszystkie kolejne pasujące elementy na końcu <code>list</code> zostaną usunięte.</li>\r\n <li>Jeśli ten parametr ma wartość null, usuwany jest tylko jeden element. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie listy {1, 2, 3, 4, 5} bez 3 ostatnich liczb.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Utwórz na podstawie listy {5, 4, 2, 6, 4} listę, która kończy się liczbą mniejszą niż 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Usuwa wszystkie wartości „null” z określonej listy.",
        "Documentation.LongDescription": "Usuwa wszystkie wystąpienia wartości „null” z listy <code>list</code>. Jeśli na liście nie znajdują się wartości „null”, zwracana jest oryginalna lista.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Usuń wartości „null” z listy {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Odwraca kolejność wartości na liście.",
        "Documentation.LongDescription": "Zwraca listę zawierającą wartości z listy <code>list</code> ułożone w odwrotnej kolejności.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę zawierającą wartości z listy {1..10} ułożone w odwrotnej kolejności.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Zwraca jeden element z listy, jeśli lista ma długość 1; w przeciwnym razie zwraca wyjątek.",
        "Documentation.LongDescription": "Jeśli na liście <code>list</code> znajduje się tylko jeden element, zwraca ten element.\r\n    Jeśli na liście znajduje się więcej niż jeden element lub lista jest pusta, funkcja zwraca wyjątek.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pojedynczą wartość na liście {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Znajdź pojedynczą wartość na liście {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Zwraca jeden element z listy, jeśli lista ma długość 1, i wartość domyślną, gdy lista jest pusta.",
        "Documentation.LongDescription": "Jeśli na liście <code>list</code> znajduje się tylko jeden element, zwraca ten element.\r\n    Jeśli lista jest pusta, funkcja zwraca wartość null, chyba że określono opcjonalny parametr <code>default</code>. Jeśli na liście znajduje się więcej niż jeden element, funkcja zwraca błąd.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pojedynczą wartość na liście {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Znajdź pojedynczą wartość na liście {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Znajdź pojedynczą wartość na liście {}. Jeśli lista jest pusta, zwróć wartość -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Zwraca listę, na której pominięto określoną liczbę elementów znajdujących się na początku innej listy.",
        "Documentation.LongDescription": "Zwraca listę, na której pominięto pierwszy element listy <code>list</code>. Jeśli <code>list</code> jest listą pustą, zwracana jest pusta lista.\r\nTa funkcja przyjmuje opcjonalny parametr, <code>countOrCondition</code>, aby obsługiwać pomijanie wielu wartości, jak pokazano poniżej.\r\n <ul>\r\n <li>Jeśli podana jest liczba, pomijanych jest maksymalnie tyle elementów. </li>\r\n <li>Jeśli określono warunek, wszystkie kolejne pasujące elementy na początku <code>list</code> zostaną pominięte.</li>\r\n <li>Jeśli ten parametr ma wartość null, zostanie zaobserwowane zachowanie domyślne. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę na podstawie listy {1, 2, 3, 4, 5} bez 3 pierwszych liczb.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Utwórz na podstawie listy {5, 4, 2, 6, 1} listę, która rozpoczyna się od liczby mniejszej niż 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Sortuje listę danych zgodnie z określonymi kryteriami.",
        "Documentation.LongDescription": "Sortuje listę danych <code>list</code> zgodnie z określonymi opcjonalnymi kryteriami.\r\n    Opcjonalny parametr <code>comparisonCriteria</code> można określić jako operator porównania. Ten parametr może mieć następujące wartości:\r\n    <ul>\r\n    <li> Aby kontrolować kolejność, można jako kryterium porównania użyć wartości wyliczenia Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Aby obliczyć klucz, który będzie używany na potrzeby sortowania, można użyć argumentu o wartości 1. </li>\r\n    <li> Aby wybrać klucz i sterować kolejnością, można użyć kryterium porównania w postaci listy zawierającej klucz i kolejność (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li>  <li>Aby całkowicie kontrolować porównanie, można użyć funkcji 2 argumentów. Ta funkcja zostanie przekazana z listy dwoma elementami (dowolne dwa elementy w dowolnej kolejności). Funkcja powinna zwrócić jedną z następujących wartości:\r\n <ul>\r\n <li><code>-1</code>: Pierwszy element jest mniejszy niż drugi element.</li>\r\n <li><code>0< /code>: Elementy są równe.</li>\r\n <li><code>1</code>: pierwszy element jest większy niż drugi element.</li>\r\n </ul>\r\n Value.Compare to metoda, której można użyć do delegowania tej logiki. </li>\r\n     </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Posortuj listę {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Posortuj listę {2, 3, 1} w kolejności malejącej.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Posortuj listę {2, 3, 1} w kolejności malejącej, używając metody Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Zwraca próbkę opartą na szacowaniu odchylenia standardowego.",
        "Documentation.LongDescription": "Zwraca wartość szacunkową odchylenia standardowego wartości z listy <code>numbersList</code> opartą na próbkach.\r\n    Jeśli lista <code>numbersList</code> zawiera liczby, zwracana jest liczba.\r\n    Gdy lista jest pusta lub zawiera elementy, które nie są wartościami typu <code>number</code>, jest zwracany wyjątek.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Znajdź odchylenie standardowe liczb od 1 do 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Zwraca sumę elementów na liście.",
        "Documentation.LongDescription": "Zwraca sumę wartości innych niż null z listy <code>list</code>.  Zwraca wartość null, jeśli na liście nie znajdują się wartości inne niż null.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Znajdź sumę liczb na liście <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Zwraca złożenie wartości list znalezionych w danych wejściowych.",
        "Documentation.LongDescription": "Przyjmuje listę list <code>lists</code>, tworzy złożenie elementów na poszczególnych listach i zwraca je w postaci listy wyjściowej. W wyniku tego zwracana lista zawiera wszystkie elementy z list wejściowych. \r\n    Ta operacja zachowuje tradycyjną semantykę wielozbiorów, więc zduplikowane wartości są dopasowywane w ramach złożenia.\r\n    W celu sterowania sprawdzaniem równości można określić opcjonalną wartość kryterium równości <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz złożenie list {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Zwraca listę list, łącząc elementy znajdujące się w tym samym położeniu na wielu listach.",
        "Documentation.LongDescription": "Pobiera listę list, <code>lists</code>, i zwraca listę list łączącą elementy w tym samym położeniu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pakuje dwie proste listy {1, 2} i {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Pakuje dwie proste listy o różnej długości {1, 2} i {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Tworzy wartość logiczną na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>logical</code> z danej wartości parametru <code>value</code>. Jeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Logical.From</code> zwraca wartość <code>null</code>.  Jeśli dany parametr <code>value</code> ma wartość typu <code>logical</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>logical</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>logical</code> utworzona na podstawie wartości tekstowej (<code>\"true\"</code> lub <code>\"false\"</code>). Zobacz opis funkcji <code>Logical.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>number</code>: wartość <code>false</code>, jeśli wartość <code>value</code> równa się <code>0</code> — w przeciwnym razie wartość <code>true</code>.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, jest zwracany błąd.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>2</code> na wartość typu <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Tworzy wartość logiczną na podstawie wartości tekstowych „true” i „false”.",
        "Documentation.LongDescription": "Tworzy wartość logiczną na podstawie wartości tekstowej <code>text</code> („true” lub „false”). Jeśli parametr <code>text</code> zawiera inny ciąg, jest zwracany wyjątek. W wartości tekstowej <code>text</code> nie jest rozróżniana wielkość znaków.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Utwórz wartość logiczną na podstawie ciągu tekstowego „true”.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Utwórz wartość logiczną na podstawie ciągu tekstowego „a”.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Zwraca tekst „true” lub „false” odpowiadający danej wartości logicznej.",
        "Documentation.LongDescription": "Tworzy wartość tekstową na podstawie wartości logicznej <code>logicalValue</code> (<code>true</code> lub <code>false</code>). Jeśli wartość parametru <code>logicalValue</code> nie jest wartością logiczną, jest zwracany wyjątek.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Utwórz wartość tekstową na podstawie wartości logicznej <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Zwraca wartość bezwzględną liczby.",
        "Documentation.LongDescription": "Zwraca wartość bezwzględną liczby <code>number</code>. Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Abs</code> zwraca wartość null.\r\n    <ul>\r\n        <li><code>number</code>: wartość typu <code>number</code>, dla której ma zostać obliczona wartość bezwzględna.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Wartość bezwzględna z -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Zwraca arcus cosinus liczby.",
        "Documentation.LongDescription": "Zwraca arcus cosinus liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Zwraca arcus sinus liczby.",
        "Documentation.LongDescription": "Zwraca arcus sinus liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Zwraca arcus tangens liczby.",
        "Documentation.LongDescription": "Zwraca arcus tangens liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Zwraca bajt, w którym każdy bit ma wartość przeciwną do bitu w wartości wejściowej.",
        "Documentation.LongDescription": "Zwraca wynik wykonania bitowej opcji NOT na wartości <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Zwraca cosinus liczby.",
        "Documentation.LongDescription": "Zwraca cosinus liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Znajdź cosinus kąta 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Zwraca cosinus hiperboliczny liczby.",
        "Documentation.LongDescription": "Zwraca cosinus hiperboliczny liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Podnosi liczbę „e” do danej potęgi.",
        "Documentation.LongDescription": "Zwraca wyniki podniesienia liczby „e” do potęgi <code>number</code> (funkcja wykładnicza).\r\n      <ul>\r\n        <li><code>number</code>: Wartość typu <code>number</code>, dla której ma zostać obliczona funkcja wykładnicza. Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Exp</code> zwraca wartość null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Podnieś liczbę „e” do potęgi 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Zwraca silnię liczby.",
        "Documentation.LongDescription": "Zwraca silnię liczby <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź silnię liczby 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Tworzy liczbę na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>number</code> z danej wartości parametru <code>value</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).\r\nJeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Number.From</code> zwraca wartość <code>null</code>.  Jeśli dany parametr <code>value</code> ma wartość typu <code>number</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>number</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>number</code> z reprezentacji tekstowej. Obsługiwane są typowe formaty tekstowe („15”, „3 423,10”, „5,0E-10”). Zobacz opis funkcji <code>Number.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>logical</code>: 1 dla wartości <code>true</code>, 0 dla wartości <code>false</code>.</li>\r\n        <li><code>datetime</code>: liczba zmiennoprzecinkowa o podwójnej precyzji, która zawiera odpowiednik daty automatyzacji łączenia i osadzania obiektów.</li>\r\n        <li><code>datetimezone</code>: liczba zmiennoprzecinkowa o podwójnej precyzji, która zawiera odpowiednik daty automatyzacji łączenia i osadzania obiektów dla lokalnej daty i godziny określonej w parametrze <code>value</code>.</li>\r\n        <li><code>date</code>: liczba zmiennoprzecinkowa o podwójnej precyzji, która zawiera odpowiednik daty automatyzacji łączenia i osadzania obiektów.</li>\r\n        <li><code>time</code>: wartość wyrażona w ułamkowych dniach.</li>\r\n        <li><code>duration</code>: wartość wyrażona w całych i ułamkowych dniach.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, jest zwracany błąd.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobierz wartość typu <code>number</code> z wartości <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Pobierz wartość typu <code>number</code> z wartości <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Pobierz wartość <code>number</code> z <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Tworzy liczby na podstawie wartości w typowych formatach tekstowych („15”, „3 423,10”, „5,0E-10”).",
        "Documentation.LongDescription": "Zwraca wartość typu <code>number</code> z danej wartości tekstowej <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Tekstowa reprezentacja wartości liczbowej. Reprezentacja musi być zapisana w typowym formacie liczbowym, takim jak „15”, „3,423.10” lub „5.0E-10”.</li>\r\n  <li><code>culture</code>: Opcjonalna kultura kontrolująca sposób interpretacji elementu <code>text</code> (na przykład „en-US”).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Określ wartość liczbową na podstawie wartości <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Określ wartość liczbową na podstawie wartości <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Wskazuje, czy wartość jest parzysta.",
        "Documentation.LongDescription": "Wskazuje, czy wartość <code>number</code> jest parzysta, zwracając wartość <code>true</code>, jeśli jest, i wartość <code>false</code>, jeśli nie jest.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy liczba 625 jest liczbą parzystą.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Sprawdź, czy liczba 82 jest liczbą parzystą.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Wskazuje, czy wartość jest wartością typu NaN (nieliczbową).",
        "Documentation.LongDescription": "Wskazuje, czy wartość jest wartością typu NaN (nieliczbową). Zwraca wartość <code>true</code>, jeśli wartość <code>number</code> jest odpowiednikiem wartości typu <code>Number.IsNaN</code>; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy wynik dzielenia 0 przez 0 jest wartością typu NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy wynik dzielenia 1 przez 0 jest wartością typu NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Wskazuje, czy wartość jest nieparzysta.",
        "Documentation.LongDescription": "Wskazuje, czy wartość jest nieparzysta. Zwraca wartość <code>true</code>, jeśli wartość <code>number</code> jest liczbą nieparzystą; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Sprawdź, czy liczba 625 jest liczbą nieparzystą.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Sprawdź, czy liczba 82 jest liczbą nieparzystą.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Zwraca logarytm naturalny liczby.",
        "Documentation.LongDescription": "Zwraca logarytm naturalny liczby <code>number</code>. Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Ln</code> zwraca wartość null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Oblicz logarytm naturalny z 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Zwraca logarytm o określonej podstawie (domyślnie jest to liczba e) z danej liczby.",
        "Documentation.LongDescription": "Zwraca logarytm o określonej podstawie <code>base</code> z liczby <code>number</code>. Jeśli parametr <code>base</code> nie zostanie określony, będzie używana wartość domyślna Number.E.\r\n    Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Log</code> zwraca wartość null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Oblicz logarytm dziesiętny z 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Oblicz logarytm naturalny z 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Zwraca logarytm dziesiętny liczby.",
        "Documentation.LongDescription": "Zwraca logarytm dziesiętny liczby <code>number</code>. Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Log10</code> zwraca wartość null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Oblicz logarytm dziesiętny z 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Zwraca zaokrągloną liczbę. Można określić liczbę cyfr i tryb zaokrąglania.",
        "Documentation.LongDescription": "Zwraca wynik zaokrąglenia <code>number</code> do najbliższej liczby. Jeśli <code>number</code> ma wartość null, funkcja <code>Number.Round</code> zwraca wartość null.<br>\r\n      <br>\r\n      Domyślnie wartość <code>number</code> jest zaokrąglana do najbliższej liczby całkowitej, a powiązania są przerywane przez zaokrąglenie do najbliższej liczby parzystej (przy użyciu funkcji <code>RoundingMode.ToEven</code>, zwanego także „zaokrągleniem bankowym”.<br>\r\n      <br>\r\n      Te ustawienia domyślne można jednak zastąpić następującymi parametrami opcjonalnymi. \r\n      <ul>\r\n        <li><code>digits</code>: powoduje zaokrąglanie wartości <code>number</code> do określonej liczby dziesiętnej.</li>\r\n        <li><code>roundingMode</code>: zastępuje domyślne zachowanie przerwania połączenia, gdy wartość <code>number</code> znajduje się w punkcie środkowym między dwiema potencjalnie zaokrąglonymi wartościami\r\n      (zobacz funkcję <code>RoundingMode.Type</code> pod kątem możliwych wartości).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrąglij liczbę 1,234 do najbliższej liczby całkowitej.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrąglij liczbę 1,56 do najbliższej liczby całkowitej.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Zaokrąglij liczbę 1,2345 do dwóch miejsc dziesiętnych.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Zaokrąglij liczbę 1,2345 w górę do trzech miejsc dziesiętnych.",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Zaokrąglij liczbę 1,2345 w dół do trzech miejsc dziesiętnych.",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Zwraca wynik zaokrąglenia liczby dodatniej w górę lub liczby ujemnej w dół. Można określić liczbę miejsc po przecinku.",
        "Documentation.LongDescription": "Zwraca wynik zaokrąglenia liczby <code>number</code> w zależności od jej znaku. Ta funkcja zaokrągla liczby dodatnie w górę, a liczby ujemne w dół.\r\n    Jeśli parametr <code>digits</code> jest określony, liczba <code>number</code> jest zaokrąglana do liczby miejsc po przecinku określonej przez parametr <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrąglij liczbę -1,2 w kierunku od zera.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Zaokrąglij liczbę 1,2 w kierunku od zera.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Zaokrąglij liczbę -1,234 do dwóch miejsc po przecinku w kierunku od zera.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Zwraca poprzednią największą liczbę. Można określić liczbę miejsc po przecinku.",
        "Documentation.LongDescription": "Zwraca wynik zaokrąglenia liczby <code>number</code> w dół do poprzedniej największej liczby całkowitej. Jeśli parametr <code>number</code> ma wartość null, funkcja zwróci wartość null. \r\n\r\n    Jeśli parametr <code>digits</code> jest określony, liczba <code>number</code> jest zaokrąglana do określonej liczby miejsc po przecinku.\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrąglij w dół do liczby całkowitej wartość 1,234.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrąglij w dół do liczby całkowitej wartość 1,999.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Zaokrąglij w dół liczbę 1,999 do dwóch miejsc po przecinku.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Zwraca wynik zaokrąglenia liczby dodatniej w dół lub liczby ujemnej w górę. Można określić liczbę miejsc po przecinku.",
        "Documentation.LongDescription": "Zwraca wynik zaokrąglenia liczby <code>number</code> w zależności od jej znaku. Ta funkcja zaokrągla liczby dodatnie w dół, a liczby ujemne w górę.\r\n    Jeśli parametr <code>digits</code> jest określony, liczba <code>number</code> jest zaokrąglana do liczby miejsc po przecinku określonej przez parametr <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrąglij liczbę -1,2 w kierunku zera.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Zaokrąglij liczbę 1,2 w kierunku zera.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Zaokrąglij liczbę -1,234 do dwóch miejsc po przecinku w kierunku do zera.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Zwraca następną największą liczbę. Można określić liczbę miejsc po przecinku.",
        "Documentation.LongDescription": "Zwraca wynik zaokrąglenia liczby <code>number</code> w górę do następnej najwyższej liczby całkowitej. Jeśli parametr <code>number</code> ma wartość null, to funkcja zwróci wartość null.\r\n Jeśli parametr <code>digits</code> jest określony, liczba <code>number</code> jest zaokrąglana do określonej liczby miejsc po przecinku.\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrąglij w górę do liczby całkowitej wartość 1,234.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Zaokrąglij w górę do liczby całkowitej wartość 1,999.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Zaokrąglij w górę liczbę 1,234 do dwóch miejsc po przecinku.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Zwraca wartość 1, gdy liczba jest dodatnia, -1, gdy jest ujemna, i 0, gdy jest równa 0.",
        "Documentation.LongDescription": "Zwraca wartość 1, gdy liczba <code>number</code> jest dodatnia, -1, gdy jest ujemna, i 0, gdy jest równa 0.\r\n    Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Sign</code> zwraca wartość null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ustal znak liczby 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Ustal znak liczby -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Ustal znak liczby 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Zwraca sinus liczby.",
        "Documentation.LongDescription": "Zwraca sinus liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Znajdź sinus kąta 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Zwraca sinus hiperboliczny liczby.",
        "Documentation.LongDescription": "Zwraca sinus hiperboliczny liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Zwraca pierwiastek kwadratowy liczby.",
        "Documentation.LongDescription": "Zwraca pierwiastek kwadratowy liczby <code>number</code>.\r\n    Jeśli parametr <code>number</code> ma wartość null, funkcja <code>Number.Sqrt</code> zwraca wartość null. Jeśli ma wartość ujemną, jest zwracana wartość typu <code>Number.NaN</code> (nieliczbowa).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwiastek kwadratowy liczby 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Znajdź pierwiastek kwadratowy liczby 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Zwraca tangens liczby.",
        "Documentation.LongDescription": "Zwraca tangens liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Znajdź tangens kąta 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Zwraca tangens hiperboliczny liczby.",
        "Documentation.LongDescription": "Zwraca tangens hiperboliczny liczby <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Konwertuje daną liczbę na tekst.",
        "Documentation.LongDescription": "Konwertuje wartość liczbową <code>number</code> na wartość tekstową zgodnie z formatem określonym przez <code>format</code>.<br>\r\n    <br>\r\n    Format jest wartością tekstową wskazującą sposób konwertowania liczby. Aby uzyskać więcej informacji na temat obsługiwanych wartości formatu, przejdź do https://go.microsoft.com/fwlink/?linkid=2241210 and https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Można również podać opcjonalne <code>culture</code> (na przykład „en-US”) w celu kontrolowania zachowania kulturowego <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Konwertuj liczbę na tekst bez określania formatu.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Konwertuj liczbę na format wykładniczy.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Konwertuj liczbę na format procentowy z tylko jednym miejscem dziesiętnym.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Zwraca tabelę źródeł strumieniowych OData oferowanych przez usługę OData.",
        "Documentation.LongDescription": "Zwraca tabelę kanałów informacyjnych OData oferowanych przez usługę protokołu OData z identyfikatora URI <code>serviceUri</code>, nagłówków <code>headers</code>. Wartość logiczna określająca, czy mają być używane połączenia współbieżne lub czy można określić opcjonalny parametr rekordu, <code>options</code>, w celu kontrolowania następujących opcji:\r\n    <ul>\r\n    <li><code>Query</code>: dodaje programowo parametry zapytania do adresu URL bez obawy o znaki ucieczki. </li>\r\n    <li> <code>Headers</code>: określenie tej wartości jako rekordu spowoduje dołączenie dodatkowych nagłówków do żądania HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: określenie tej wartości jako listy spowoduje wykluczenie tych kluczy nagłówka HTTP z obliczeń na potrzeby buforowania danych.</li>\r\n    <li> <code>ApiKeyName</code>: jeśli witryna docelowa ma notację klucza interfejsu API, za pomocą tego parametru można określić nazwę (ale nie wartość) parametru klucza, który musi zostać użyty w adresie URL. Rzeczywista wartość klucza jest podawana w poświadczeniu.</li>\r\n    <li> <code>Timeout</code>: określenie tej wartości jako czasu trwania spowoduje zmianę limitu czasu żądania HTTP. Wartością domyślną jest 600 sekund.</li>\r\n    <li> <code>EnableBatch</code>: wartość logiczna (true/false), która ustawia, czy zezwolić na generowanie żądania $batch protokołu OData w przypadku przekroczenia wartości MaxUriLength (wartość domyślna to false).</li>\r\n    <li> <code>MaxUriLength</code>: liczba określająca maksymalną długość dozwolonego identyfikatora URI wysyłanego do usługi protokołu OData. Jeśli ta wartość zostanie przekroczona i właściwość EnableBatch będzie mieć wartość true, wtedy żądanie zostanie wykonane w punkcie końcowego $batch protokołu OData. W przeciwnym razie zakończy się to niepowodzeniem (wartością domyślną jest 2048).</li>\r\n    <li> <code>Concurrent</code>: wartość logiczna (true/false). W przypadku ustawienia na wartość true żądania będą wysyłane do usługi współbieżnie. W przypadku ustawienia na wartość false żądania będą wysyłane sekwencyjnie. Jeśli wartość nie zostanie określona, wartość ta zostanie wyznaczona przez adnotację AsynchronousRequestsSupported usługi. Jeśli usługa nie określa, czy adnotacja AsynchronousRequestsSupported jest obsługiwana, żądania będą wykonywane sekwencyjnie.</li>\r\n    <li> <code>ODataVersion</code>: liczba (3 lub 4) określająca wersję protokołu OData do użycia w przypadku tej usługi protokołu OData. Jeśli nie jest określona, żądane będą wszystkie obsługiwane wersje. Wersja usługi zostanie określona przez nagłówek OData-Version zwrócony przez usługę.</li>\r\n    <li> <code>FunctionOverloads</code>: wartość logiczna (true/false). W przypadku ustawienia na wartość true, przeciążenia importu funkcji będą wyświetlane w nawigatorze jako osobne jednostki. W przypadku ustawienia na wartość false, przeciążenia importu funkcji będą wyświetlane jako jedna funkcja związku w nawigatorze. Wartość domyślna dla V3: false. Wartość domyślna dla V4: true.</li>\r\n    <li> <code>MoreColumns</code>: wartość logiczna (true/false), która w przypadku ustawienia na wartości true, spowoduje dodanie kolumny „Więcej kolumn” do każdego kanału informacyjnego jednostki zawierającego typy otwarte i polimorficzne. Będzie ona zawierać pola, które nie zostały zadeklarowane w typie podstawowym. W przypadku ustawienia na wartość false to pole nie będzie występować. Wartość domyślna to false.</li>\r\n    <li> <code>IncludeAnnotations</code>: rozdzielana przecinkami lista kwalifikowanych nazw terminów lub wzorców dla przestrzeni nazw do uwzględnienia ze znakiem „*” jako symbolem wieloznacznym. Domyślnie nie są uwzględniane żadne adnotacje.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: rozdzielana przecinkami lista kwalifikowanych nazw terminów lub wzorców dla przestrzeni nazw do uwzględnienia w żądaniach dokumentów metadanych ze znakiem -„*” jako symbolem wieloznacznym. Domyślnie uwzględniane są te same adnotacje co w przypadku opcji IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: zezwala usłudze protokołu OData na unikanie zapisywania określonych wartości w odpowiedziach. W przypadku potwierdzenia wartości te zostaną wywnioskowane z pominiętych pól. Dostępne opcje:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: zezwala usłudze protokołu OData na pomijanie wartości null.</li>\r\n    </ul>\r\n    </li>\r\n    <li> <code>Implementation</code>: określa implementację łącznika protokołu OData do użycia. Prawidłowe wartości to „2.0” i null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Połącz z usługą protokołu OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Zwraca wynik próby wywnioskowania możliwości SQL dla sterownika ODBC.",
        "Documentation.LongDescription": "Zwraca wynik próby wywnioskowania możliwości SQL z parametrami połączenia <code>connectionString</code> przy użyciu programu ODBC. Parametry <code>connectionString</code> mogą mieć postać tekstu lub rekordu par wartości właściwości. Wartości właściwości mogą być tekstowe lub liczbowe.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Zwróć wywnioskowane możliwości SQL dla parametrów połączenia.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Zwraca zawartość dokumentu Parquet jako tabelę.",
        "Documentation.LongDescription": "Zwraca zawartość dokumentu Parquet jako tabelę. Dostępne opcje to:\n    <ul>\n    <li> <code>TypeMapping</code>: wartość tekstowa kontrolująca domyślne mapowanie typów podczas odczytywania i zapisywania plików. Wartością domyślną jest null i próbuje zachować w stopniu wierności na tyle odpowiadającym oryginalnemu typu jak to jest możliwe. Wartość „Sql” spowoduje uzyskanie wyników najbardziej zgodnych z plikiem Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Zwraca wartość procentową danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość <code>percentage</code> dla danej wartości <code>value</code>. Jeśli dany element <code>value</code> ma wartość <code>null</code>, funkcja <code>Percentage.From</code> zwraca wartość <code>null</code>.  Jeśli dany element <code>value</code> ma wartość <code>text</code> z symbolem procenta na końcu, zostanie zwrócona skonwertowana liczba dziesiętna. W innym przypadku wartość zostanie przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.From</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobierz wartość <code>percentage</code> z <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Zwraca rekord ramek danych z pliku RData.",
        "Documentation.LongDescription": "Zwraca rekord ramek danych z pliku RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Łączy rekordy na danej liście.",
        "Documentation.LongDescription": "Łączy rekordy na danej liście <code>records</code>. Jeśli parametr <code>records</code> zawiera wartości niebędące rekordem, jest zwracany błąd.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz połączony rekord na podstawie rekordów.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Zwraca liczbę pól w rekordzie.",
        "Documentation.LongDescription": "Zwraca liczbę pól w rekordzie <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę pól w rekordzie.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Zwraca nazwy pól.",
        "Documentation.LongDescription": "Zwraca nazwy pól w rekordzie <code>record</code> jako tekst.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź nazwy pól w rekordzie.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Zwraca listę wartości pól.",
        "Documentation.LongDescription": "Zwraca listę wartości pól w rekordzie <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartości pól w rekordzie.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Tworzy rekord na podstawie tabeli w formie {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Zwraca rekord na podstawie tabeli rekordów <code>table</code> zawierającej nazwy i wartości pól <code>{[Name = name, Value = value]}</code>. Jeśli nazwy pól nie są unikatowe, jest zwracany wyjątek.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Utwórz rekord na podstawie tabeli w formie Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Zwraca listę wartości zawierającą wartości pól rekordu wejściowego.",
        "Documentation.LongDescription": "Zwraca listę wartości zawierającą wartości pól z rekordu wejściowego <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Wyodrębnij wartości pól z rekordu.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Zwraca abstrakcyjne drzewo składni (AST), które reprezentuje dostęp do kolumny w wyrażeniu wiersza.",
        "Documentation.LongDescription": "Zwraca abstrakcyjne drzewo składni (AST), które reprezentuje dostęp do kolumny <code>columnName</code> wiersza w wyrażeniu wiersza.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Tworzy wyrażenie AST reprezentujące dostęp do kolumny „CustomerName”.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Zwraca abstrakcyjne drzewo składni (AST) dla treści funkcji.",
        "Documentation.LongDescription": "<p>Zwraca drzewo składni abstrakcyjnej (AST) dla treści <code>function</code>, znormalizowane do wyrażenia <i>row expression</i>:\r\n<ul>\r\n <li>Funkcja musi być funkcją lambda z 1 argumentem.</li>\r\n  <li>Wszystkie odwołania do parametru funkcji są zamieniane na  <code>RowExpression.Row</code>.</li>\r\n  <li>Wszystkie odwołania do kolumn są zastępowane <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n <li>Drzewo AST zostanie uproszczone tak, aby zawierało tylko węzły tego rodzaju:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Jeśli nie można zwrócić drzewa składni  abstrakcyjnej (AST) wyrażenia wiersza dla treści funkcji <code>function</code>, jest zgłaszany błąd.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Zwraca wyrażenie AST dotyczące treści funkcji <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Tworzy wartość o pojedynczej precyzji z podanej wartości.",
        "Documentation.LongDescription": "Zwraca liczbę o pojedynczej precyzji <code>number</code> dla podanej wartości <code>value</code>. Jeśli podana wartość <code>value</code> to wartość <code>null</code>, funkcja <code>Single.From</code> zwraca wartość <code>null</code>. Jeśli podana wartość <code>value</code> to <code>number</code> w zakresie liczby o pojedynczej precyzji, jest zwracana wartość <code>value</code> — w przeciwnym wypadku jest zwracany błąd. Jeśli wartość <code>value</code> jest wartością innego typu, najpierw zostanie przekonwertowana na wartość <code>number</code> przy użyciu funkcji <code>Number.FromText</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Pobieranie wartości o pojedynczej precyzji <code>number</code> dla wartości <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Zwraca tabelę danych z punktu końcowego indeksu narzędzia Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Tworzy wywołanie interfejsu API REST narzędzia Smartsheet 2.0 w określonym punkcie końcowym i przekształca zwrócony element danych w tabelę.",
        "Documentation.Examples": [
          {
            "Description": "Ściąga tabelę z informacjami o użytkownikach z interfejsu API narzędzia Smartsheet",
            "Code": "Smartsheet.Content(\"użytkownicy\")",
            "Result": "Tabela z informacjami o użytkownikach zwracana przez interfejs API narzędzia Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania dowolnego z określonych ograniczników.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania dowolnego z określonych ograniczników.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe według przecinka lub średnika, ignorując cudzysłowy i ograniczniki w cudzysłowach, i zaczynając od początku danych wejściowych.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Podziel dane wejściowe według przecinka lub średnika, ignorując cudzysłowy i ograniczniki w cudzysłowach, i zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania określonego ogranicznika.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania określonego ogranicznika.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe według przecinka, ignorując przecinki w cudzysłowach.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania każdego określonego ogranicznika w sekwencji.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w miejscach występowania każdego określonego ogranicznika w sekwencji.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe według przecinka, a następnie średnika, zaczynając od początku danych wejściowych.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Podziel dane wejściowe według przecinka, a następnie średnika, traktując cudzysłowy jak dowolny inny znak i zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych przy użyciu określonej długości.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych przy użyciu określonej długości.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe na pierwsze dwa znaki, po których następują następne trzy, zaczynając od początku danych wejściowych.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Podziel dane wejściowe na pierwsze trzy znaki, po których następują następne dwa, zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych przy użyciu określonej pozycji.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych przy użyciu określonej pozycji.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe w określonych położeniach, zaczynając od początku danych wejściowych.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Podziel dane wejściowe w określonych położeniach, zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych przy użyciu określonych przesunięć i długości.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę tekstu zgodnie z określonymi przesunięciami i długościami. Długość o wartości null wskazuje, że wszystkie pozostałe dane wejściowe powinny zostać uwzględnione.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel dane wejściowe według określonych par położenia i długości, zaczynając od początku danych wejściowych. Pamiętaj, że zakresy w tym przykładzie nakładają się na siebie.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Podziel dane wejściowe według określonych par położenia i długości, zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Podziel dane wejściowe na kod pocztowy o stałej długości, po którym następuje nazwa miejscowości o zmiennej długości.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w sposób powtarzalny po określonej długości.",
        "Documentation.LongDescription": "Zwraca funkcję dzielącą tekst na listę wartości tekstowych w sposób powtarzalny po określonej długości.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Podziel wielokrotnie dane wejściowe na fragmenty o trzech znakach, zaczynając od początku danych wejściowych.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Podziel wielokrotnie dane wejściowe na fragmenty składające się z trzech znaków, zaczynając od końca danych wejściowych.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Zwraca szacunkową liczbę wierszy w tabeli.",
        "Documentation.LongDescription": "Zwraca przybliżoną liczbę wierszy w <code>table</code> lub błąd, jeśli źródło danych nie obsługuje przybliżenia.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Oszacuj liczbę różnych kombinacji miast i województw w obszernej tabeli, która może być używana jako oszacowanie kardynalności dla kolumn. Szacunki kardynalności są na tyle ważne, że różne źródła danych (takie jak SQL Server) obsługują to konkretne przybliżenie, często używając algorytmu o nazwie HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Zwraca liczbę kolumn w tabeli.",
        "Documentation.LongDescription": "Zwraca liczbę kolumn w tabeli <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę kolumn w tabeli.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Zwraca nazwy kolumn w postaci listy.",
        "Documentation.LongDescription": "Zwraca nazwy kolumn w tabeli <code>table</code> jako listę wartości tekstowych.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź nazwy kolumn w tabeli.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Zwraca pierwszy wiersz lub określoną wartość domyślną.",
        "Documentation.LongDescription": "Zwraca pierwszy wiersz z tabeli <code>table</code> lub opcjonalną wartość domyślną <code>default</code>, gdy tabela jest pusta.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź pierwszy wiersz w tabeli.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Znajdź pierwszy wiersz w tabeli <code>({})</code> lub zwróć wartość [a = 0, b = 0], jeśli ta tabela jest pusta.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Zwraca pierwszą kolumnę pierwszego wiersza tabeli lub określoną wartość domyślną.",
        "Documentation.LongDescription": "Zwraca pierwszą kolumnę pierwszego wiersza tabeli <code>table</code> lub określoną wartość domyślną.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Wskazuje, czy tabela zawiera tylko unikatowe wiersze (bez duplikatów).",
        "Documentation.LongDescription": "Wskazuje, czy tabela <code>table</code> zawiera tylko unikatowe wiersze (bez duplikatów). Zwraca wartość <code>true</code>, jeśli wiersze są unikatowe; w przeciwnym razie zwraca wartość <code>false</code>.\r\n    Opcjonalny parametr <code>comparisonCriteria</code> określa, które kolumny tabeli są sprawdzane pod kątem duplikatów. Jeśli nie określono parametru <code>comparisonCriteria</code>, sprawdzane są wszystkie kolumny.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela zawiera tylko unikatowe wiersze.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Ustal, czy tabela zawiera tylko unikatowe wiersze w kolumnie.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Wskazuje, czy tabela zawiera jakiekolwiek wiersze.",
        "Documentation.LongDescription": "Wskazuje, czy tabela <code>table</code> zawiera jakiekolwiek wiersze. Zwraca wartość <code>true</code>, jeśli tabela nie zawiera żadnych wierszy (jest pusta); w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Ustal, czy tabela jest pusta.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Ustal, czy tabela <code>({})</code> jest pusta.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Zwraca klucze określonej tabeli.",
        "Documentation.LongDescription": "Zwraca klucze określonej tabeli.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pobierz listę kluczy dla tabeli.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Zwraca ostatni wiersz lub określoną wartość domyślną.",
        "Documentation.LongDescription": "Zwraca ostatni wiersz z tabeli <code>table</code> lub opcjonalną wartość domyślną <code>default</code>, gdy tabela jest pusta.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Znajdź ostatni wiersz w tabeli.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Znajdź ostatni wiersz w tabeli <code>({})</code> lub zwróć wartość [a = 0, b = 0], jeśli ta tabela jest pusta.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Zwraca liczbę wierszy w tabeli.",
        "Documentation.LongDescription": "Zwraca liczbę wierszy w tabeli <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę wierszy w tabeli.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Zwraca jeden wiersz z tabeli.",
        "Documentation.LongDescription": "Zwraca jeden wiersz w jednym wierszu tabeli <code>table</code>. Jeśli tabela <code>table</code> zawiera więcej niż jeden wiersz, jest zgłaszany wyjątek.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zwróć pojedynczy wiersz w tabeli.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Tworzy listę zagnieżdżonych list wartości kolumn na podstawie tabeli.",
        "Documentation.LongDescription": "Tworzy listę zagnieżdżonych list na podstawie tabeli <code>table</code>.  Każdy element tej listy to lista wewnętrzna zawierająca wartości kolumny.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę wartości kolumn na podstawie tabeli.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Konwertuje tabelę na listę, stosując określoną funkcję łączenia do każdego wiersza wartości w tabeli.",
        "Documentation.LongDescription": "Konwertuje tabelę na listę, stosując określoną funkcję łączenia do każdego wiersza wartości w tabeli.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Połącz tekst z każdego wiersza za pomocą przecinka.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Konwertuje tabelę na listę rekordów.",
        "Documentation.LongDescription": "Konwertuje tabelę <code>table</code> na listę rekordów.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj tabelę na listę rekordów.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Tworzy listę zagnieżdżonych list wartości wierszy na podstawie tabeli.",
        "Documentation.LongDescription": "Tworzy listę zagnieżdżonych list na podstawie tabeli <code>table</code>.  Każdy element tej listy to lista wewnętrzna zawierająca wartości wiersza.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę wartości wierszy na podstawie tabeli.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Tworzy zmodyfikowany rekord błędu, który nie spowoduje odwrotu w przypadku zgłoszenia go przez procedurę obsługi zdefiniowaną w widoku (za pośrednictwem metody Table.View).",
        "Documentation.LongDescription": "Tworzy zmodyfikowany rekord błędu z <code>errorRecord</code>, który nie spowoduje odwrotu w przypadku zgłoszenia go przez procedurę obsługi zdefiniowaną w widoku (za pośrednictwem metody Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Tworzy funkcję, która może zostać przechwycona przez procedurę obsługi zdefiniowaną w widoku (za pomocą obiektu Table.View).",
        "Documentation.LongDescription": "<p>Tworzy funkcję widoku na podstawie elementu <code>function</code>, który może być obsługiwany w widoku utworzonym za pomocą funkcji <code>Table.View</code>.</p>\r\n<p>Procedura obsługi <code>OnInvoke</code> funkcji <code>Table.View</code> może służyć do zdefiniowania procedury obsługi dla funkcji widoku.</p>\r\n<p>Tak jak w przypadku procedur obsługi dla operacji wbudowanych, jeśli nie zostanie określona żadna procedura obsługi <code>OnInvoke</code>, bądź procedura obsługi nie obsługuje funkcji widoku lub zostanie zgłoszony błąd przez procedurę obsługi, element <code>function</code> zostanie zastosowany na wierzchu widoku.</p>\r\n<p>Z bardziej kompleksowym opisem funkcji <code>Table.View</code> i niestandardowych funkcji widoku można zapoznać się w opublikowanej dokumentacji dotyczącej łącznika niestandardowego usługi Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Zwraca wartość tekstową, z której zostały usunięte wszystkie znaki kontrolne.",
        "Documentation.LongDescription": "Zwraca wartość tekstową, z której zostały usunięte wszystkie znaki kontrolne (<code>text</code>).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usuń znaki wysuwu wiersza i inne znaki kontrolne z wartości tekstowej.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Łączy listę wartości tekstowych w jedną wartość tekstową.",
        "Documentation.LongDescription": "Zwraca wynik połączenia listy wartości tekstowych<code>texts</code> w pojedynczą wartość tekstową. Wszystkie wartości <code>null</code> obecne w <code>texts</code> są ignorowane.\r\n    Można określić opcjonalny <code>separator</code> element używany w końcowym połączonym tekście.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Połącz wartości tekstowe „Seattle” i „WA”.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Połącz wartości tekstowe „Seattle” i „WA”, rozdzielając je przecinkiem i spacją.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Połącz wartości „Seattle”, <code>null</code> i „WA”, rozdzielając je przecinkami i spacją. (Zwróć uwagę, że <code>null</code> jest ignorowany).",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Tworzy wartość tekstową na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację wartości określonej w parametrze <code>value</code>. Parametr <code>value</code> może zawierać wartość typu <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> lub <code>binary</code>.\r\n    Jeśli dana wartość jest równa null, funkcja <code>Text.From</code> zwraca wartość null. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Utwórz wartość tekstową na podstawie wartości liczbowej równej 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dekoduje dane z formy binarnej na wartość tekstową.",
        "Documentation.LongDescription": "Dekoduje dane <code>binary</code> z wartości binarnej na wartość tekstową, używając typu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Wnioskuje szczegółowy typ liczby (Int64.Type, Double.Type itp.) liczby zakodowanej w tekście.",
        "Documentation.LongDescription": "Wnioskuje szczegółowy typ liczby (Int64.Type, Double.Type itp.) dla elementu <code>text</code>. Błąd jest wywoływany, jeśli element <code>text</code> nie jest liczbą. Można także określić opcjonalny element <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Zwraca liczbę znaków.",
        "Documentation.LongDescription": "Zwraca liczbę znaków w tekście <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Określ, ile znaków znajduje się w tekście „Hello World”.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Konwertuje wszystkie znaki na małe litery.",
        "Documentation.LongDescription": "Zwraca wynik konwersji wszystkich znaków w elemencie <code>text</code> na małe litery. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz wersję ciągu „AbCd” składającą się tylko z małych liter.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Zamienia pierwszą literę każdego wyrazu na wielką.",
        "Documentation.LongDescription": "Zwraca wynik zamiany na wielką literę pierwszej litery każdego wyrazu w wartości tekstowej <code>text</code>. Wszystkie inne litery w zwracanej wartości są małymi literami. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Użyj funkcji <code>Text.Proper</code> w prostym zdaniu.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Odwraca dostarczony tekst <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odwróć tekst „123”.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Koduje tekst w formie binarnej.",
        "Documentation.LongDescription": "Koduje daną wartość tekstową <code>text</code> w formie wartości binarnej, używając określonego formatu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Zwraca listę wartości znakowych z danej wartości tekstowej.",
        "Documentation.LongDescription": "Zwraca listę wartości znakowych z danej wartości tekstowej <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Utwórz listę wartości znakowych na podstawie tekstu „Hello World”.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Usuwa wszystkie spacje wiodące i końcowe.",
        "Documentation.LongDescription": "Zwraca wynik usunięcia wszystkich spacji wiodących i końcowych z wartości tekstowej <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usuń spacje wiodące i końcowe z wartości „     a b c d    ”.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Usuwa wszystkie spacje końcowe.",
        "Documentation.LongDescription": "Zwraca wynik usunięcia wszystkich spacji końcowych z wartości tekstowej <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usuń spacje końcowe z wartości „     a b c d    ”.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Usuwa wszystkie spacje wiodące.",
        "Documentation.LongDescription": "Zwraca wynik usunięcia wszystkich spacji wiodących z wartości tekstowej <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usuń spacje wiodące z wartości „     a b c d    ”.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Konwertuje wszystkie znaki na wielkie litery.",
        "Documentation.LongDescription": "Zwraca wynik konwersji wszystkich znaków w elemencie <code>text</code> na wielkie litery. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utwórz wersję ciągu „aBcD” składającą się tylko z wielkich liter.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Zwraca koniec godziny.",
        "Documentation.LongDescription": "Zwraca koniec godziny reprezentowany przez <code>dateTime</code>, w tym ułamkowe części sekund. Informacje dotyczące strefy czasowej są zachowywane.\r\n      <ul>\r\n        <li><code>dateTime</code>: wartość typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>, na podstawie której jest obliczany koniec godziny.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pobierz koniec godziny z wartości 2011-05-14 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Pobierz koniec godziny z wartości 2011-05-17 17:00:00 -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Tworzy godzinę na podstawie danej wartości.",
        "Documentation.LongDescription": "Zwraca wartość typu <code>time</code> z danej wartości parametru <code>value</code>. Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).\r\nJeśli dany parametr <code>value</code> ma wartość <code>null</code>, funkcja <code>Time.From</code> zwraca wartość <code>null</code>.  Jeśli dany parametr <code>value</code> ma wartość typu <code>time</code>, zwracana jest wartość <code>value</code>. Na wartość typu <code>time</code> można konwertować wartości następujących typów:\r\n      <ul>\r\n        <li><code>text</code>: wartość typu <code>time</code> z reprezentacji tekstowej. Zobacz opis funkcji <code>Time.FromText</code>, aby uzyskać szczegółowe informacje.</li>\r\n        <li><code>datetime</code>: składnik godziny z wartości <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: składnik godziny z lokalnego odpowiednika typu data/godzina o wartości <code>value</code>.</li>\r\n        <li><code>number</code>: odpowiednik wartości typu <code>time</code> dla liczby ułamkowych dni wyrażonej przez wartość <code>value</code>. Jeśli wartość parametru <code>value</code> jest ujemna albo większa lub równa 1, jest zwracany błąd.</li>\r\n      </ul>\r\nJeśli wartość parametru <code>value</code> jest innego typu, jest zwracany błąd.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>0.7575</code> na wartość typu <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Przekonwertuj wartość <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na wartość typu <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Tworzy wartość „time” na podstawie lokalnych, uniwersalnych i niestandardowych formatów wartości „time”.",
        "Documentation.LongDescription": "Tworzy wartość typu <code>time</code> z tekstowej reprezentacji, <code>text</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n  <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje analizę daty przy użyciu optymalnego rozwiązania.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„tt”</code> ma wartości <code>„AM” lub „PM”</code>, natomiast w przypadku parametru <code>„ar-EG”</code>format<code>„tt”</code> ma wartości <code>„ص” lub „م”</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code>.  Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>\"10:12:31am\"</code> na wartość godziny.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Przekonwertuj wartość <code>\"1012\"</code> na wartość typu Time.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Przekonwertuj wartość <code>\"10\"</code> na wartość typu Time.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Zwraca składnik godziny.",
        "Documentation.LongDescription": "Zwraca składnik godziny z wartości typu <code>time</code>, <code>datetime</code> lub <code>datetimezone</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Znajdź godzinę w wartości #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Zwraca składnik minuty.",
        "Documentation.LongDescription": "Zwraca składnik minuty z wartości typu <code>time</code>, <code>datetime</code> lub <code>datetimezone</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Znajdź minutę w wartości #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Zwraca składnik sekundy.",
        "Documentation.LongDescription": "Zwraca składnik sekundy z wartości typu <code>time</code>, <code>datetime</code> lub <code>datetimezone</code> dostarczonej w parametrze <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Znajdź wartość sekund w wartości daty/godziny (datetime).",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Zwraca początek godziny.",
        "Documentation.LongDescription": "Zwraca początek godziny reprezentowany przez <code>dateTime</code>.\r\n    <code>dateTime</code> musi być wartością typu <code>date</code>, <code>datetime</code> lub <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Znajdź początek godziny dla daty 10 października 2011 r. 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Zwraca rekord zawierający części wartości typu time.",
        "Documentation.LongDescription": "Zwraca rekord zawierający części danej wartości typu time (<code>time</code>).\r\n <ul>\r\n        <li><code>time</code>: wartość typu <code>time</code>, na podstawie części której jest tworzony rekord.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#time(11, 56, 2)</code> na rekord zawierający wartości godziny.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Zwraca tekstową reprezentację wartości czasu.",
        "Documentation.LongDescription": "Zwraca tekstową reprezentację właściwości <code>time</code>. Aby określić dodatkowe właściwości można podać opcjonalny parametr <code>rekordu</code>, <code>options</code>. <code>culture</code> stosuje się tylko w starszych przepływach pracy (zobacz poniżej). Parametr <code>rekordu</code> może zawierać następujące pola:\r\n<ul>\r\n   <li><code>Format</code>: wartość <code>tekstowa</code> wskazująca format, który ma być użyty. Aby uzyskać więcej szczegółów, przejdź do strony https://go.microsoft.com/fwlink/?linkid=2180104 i https://go.microsoft.com/fwlink/?linkid=2180105. Pominięcie tego pola lub podanie wartości <code>null</code> spowoduje sformatowanie daty przy użyciu wartości domyślnej zdefiniowanej przez parametr <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: gdy parametr <code>Format</code> nie ma wartości null, parametr <code>Culture</code> kontroluje niektóre specyfikatory formatu. Na przykład w przypadku parametru <code> „en-US”</code> format <code>„tt”</code> ma wartości <code>„AM” lub „PM”</code>, natomiast w przypadku parametru <code>„ar-EG”</code>format<code>„tt”</code> ma wartości <code>„ص” lub „م”</code>. Gdy parametr <code>Format</code> ma wartość <code>null</code>, parametr <code>Culture</code> kontroluje domyślny format, który ma być użyty. Gdy parametr <code>Culture</code> ma wartość <code>null</code> lub jest pominięty, zostanie użyta funkcja <code>Culture.Current</code>.</li>\r\n</ul>\r\nAby obsługiwać starsze przepływy pracy, wartościami tekstowymi mogą być również <code>options</code> i <code>culture</code>. Zachowanie jest takie same jak w przypadku <code>options</code><code> = [Format = <code>options</code>, Culture= <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Przekonwertuj wartość <code>#time(01, 30, 25)</code> na wartość <code>„text”</code>. <i>Wynik może się różnić w zależności od aktualnej kultury.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konwertuj przy użyciu formatu niestandardowego i z kulturą Polska — polski.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konwertuj przy użyciu standardowego formatu czasu.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Zwraca zamkniętą wersję podanego typu rekordu (lub ten sam typ, jeśli jest już zamknięty).",
        "Documentation.LongDescription": "Zwraca zamkniętą wersję podanego elementu <code>record</code> <code>type</code> (lub ten sam typ, jeśli jest już zamknięty).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Utwórz zamkniętą wersję elementu <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Zwraca aspekty typu.",
        "Documentation.LongDescription": "Zwraca rekord zawierający aspekty elementu <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Zwraca rekord z wartościami pól ustawionymi jako nazwy parametrów typu funkcji i wartościami ustawionymi jako odpowiednie typy.",
        "Documentation.LongDescription": "Zwraca rekord z wartościami pól ustawionymi jako nazwy parametrów funkcji <code>type</code> i wartościami ustawionymi jako odpowiednie typy.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Znajdź typy parametrów funkcji <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Zwraca liczbę określającą minimalną liczbę parametrów wymaganych do wywołania typu funkcji.",
        "Documentation.LongDescription": "Zwraca liczbę określającą minimalną liczbę parametrów wymaganych do wywołania wejścia <code>type</code> funkcji.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Znajdź liczbę wymaganych parametrów funkcji <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Zwraca typ zwrócony przez typ funkcji.",
        "Documentation.LongDescription": "Zwraca typ zwrócony przez funkcję <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Znajdź typ zwracany <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Zwraca wartość true, jeśli typ może mieć wartość null; w przeciwnym razie zwraca wartość false.",
        "Documentation.LongDescription": "Zwraca wartość <code>true</code>, jeśli typ to <code>nullable</code>; w przeciwnym razie zwraca wartość <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy element <code>number</code> może mieć wartość null.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Określ, czy element <code>type nullable number</code> może mieć wartość null.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Określa, czy typ rekordu jest otwarty.",
        "Documentation.LongDescription": "Zwraca wartość <code>logical</code> określającą, czy rekord <code>type</code> jest otwarty.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Określ, czy rekord <code>type [ A = number, ...]</code> jest otwarty.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Zwraca typ elementu z typu listy.",
        "Documentation.LongDescription": "Zwraca typ elementu z listy <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Znajdź typ elementu na liście <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Zwraca typ niedopuszczający wartości null z typu.",
        "Documentation.LongDescription": "Zwraca typ inny niż <code>nullable</code> z typu <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zwróć typ niedopuszczający wartości null elementu <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Zwraca otwartą wersję podanego typu rekordu (lub ten sam typ, jeśli jest już otwarty).",
        "Documentation.LongDescription": "Zwraca otwartą wersję podanego elementu <code>record</code> <code>type</code> (lub ten sam typ, jeśli jest już otwarty).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Utwórz otwartą wersję elementu <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Zwraca rekord opisujący pola typu rekordu z każdym polem zwróconego typu rekordu razem z odpowiednią nazwą i wartością.",
        "Documentation.LongDescription": "Zwraca rekord opisujący pola rekordu <code>type</code>. Każde pole zwróconego typu rekordu ma odpowiednią nazwę i wartość w postaci rekordu <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Znajdź nazwę i wartość rekordu <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Zwraca listę kluczy, która może być pusta, tabeli danego typu.",
        "Documentation.LongDescription": "Zwraca być może pustą listę kluczy dla danego typu tabeli.<br>\r\n    <br>\r\n    Każdy klucz jest definiowany przy użyciu rekordu w następującej postaci:\r\n    <ul>\r\n      <li>\r\n        <code>Kolumny</code>: lista nazw kolumn, która definiuje klucz\r\n      </li>\r\n      <li>\r\n        <code>Podstawowy</code>: <code>true</code>, jeśli klucz jest kluczem podstawowym; w przeciwnym razie <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zwróć informacje o kluczu dla typu tabeli.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Zwraca typ wiersza dla typu tabeli typu.",
        "Documentation.LongDescription": "Zwraca typ wiersza dla określonego typu tabeli. Wynik będzie zawsze typem rekordu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zwraca informacje o typie wiersza dla prostej tabeli.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Zwraca unię dla listy typów.",
        "Documentation.LongDescription": "Zwraca unię dla listy typów w <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Złóż rekord w ciąg zapytania URI.",
        "Documentation.LongDescription": "Złóż rekord <code>query</code> w ciąg zapytania URI, stosując w razie potrzeby znaki ucieczki.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodowanie ciągu zapytania zawierającego znaki specjalne.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Koduje znaki specjalne zgodnie ze standardem RFC 3986.",
        "Documentation.LongDescription": "Koduje znaki specjalne w danych wejściowych <code>data</code> zgodnie z regułami standardu RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kodowanie znaków specjalnych w ciągu „+money$”.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Zwraca części wejściowego bezwzględnego identyfikatora URI jako rekord.",
        "Documentation.LongDescription": "Zwraca części wejściowego identyfikatora <code>absoluteUri</code> jako rekord zawierający wartości, takie jak Scheme, Host, Port, Path, Query, Fragment, UserName i Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Znajdź części bezwzględnego identyfikatora URI „www.adventure-works.com”.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Zdekoduj ciąg zakodowany przy użyciu znaków procentu.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL usługi analiz Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Zwraca zawartość pobraną jako wartość binarną przy użyciu adresu URL usługi analiz Azure DevOps. Funkcja ta korzysta z różnych poświadczeń dla różnych organizacji."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Wprowadź adres URL usługi analiz Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Zwraca zawartość pobraną jako wartość binarną przy użyciu adresu URL usługi analiz Azure DevOps. Funkcja ta korzysta z poświadczeń globalnych dla wszystkich dostępnych organizacji."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Wyraża alternatywne plany zapytań.",
        "Documentation.LongDescription": "Wyraża alternatywne plany zapytań w wyrażeniu planu zapytań uzyskanym za pośrednictwem funkcji Value.Expression(Value.Optimize(...)). Nie jest przeznaczone do innych zastosowań.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Zwraca abstrakcyjne drzewo składni (AST) reprezentujące wyrażenie wartości.",
        "Documentation.LongDescription": "Zwraca abstrakcyjne drzewo składni (AST) reprezentujące wyrażenie wartości",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Tworzy silnie typizowaną wartość na podstawie reprezentacji tekstowej.",
        "Documentation.LongDescription": "Dekoduje wartość z reprezentacji tekstowej <code>text</code> i interpretuje ją jako wartość odpowiedniego typu.\r\n    Funkcja <code>Value.FromText</code> przyjmuje wartość tekstową i zwraca wartość liczbową, logiczną, równą null, daty/godziny, czasu trwania lub tekstową. Pusta wartość tekstowa jest interpretowana jako wartość null.\r\n    Można także określić opcjonalny parametr <code>culture</code> (na przykład „en-US”).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Zwraca rekord zawierający metadane wartości wejściowej.",
        "Documentation.LongDescription": "Zwraca rekord zawierający metadane wartości wejściowej.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Sygnalizuje funkcji Value.Expression, aby zwracała zoptymalizowane wyrażenie dla wartości.",
        "Documentation.LongDescription": "W przypadku użycia w funkcji Value.Expression, gdy element <code>value</code> reprezentuje zapytanie, które może zostać zoptymalizowane, ta funkcja wskazuje, że powinno zostać zwrócone zoptymalizowane wyrażenie. W przeciwnym razie element <code>value</code> zostanie przekazany bez żadnego efektu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Rozdziela wprowadzane metadane.",
        "Documentation.LongDescription": "Rozdziela wprowadzane metadane.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Zwraca typ danej wartości.",
        "Documentation.LongDescription": "Zwraca typ danej wartości.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.LongDescription": "Ta funkcja jest przeznaczona tylko do użytku wewnętrznego.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Zwraca kod HTML dla określonego adresu URL w przypadku wyświetlenia w przeglądarce sieci Web.",
        "Documentation.LongDescription": "Zwraca kod HTML dla określonego elementu <code>url</code> w sposób, w jaki widzi go przeglądarka internetowa. Można podać opcjonalny parametr rekordu, <code>options</code>, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n <ul>\r\n <li><code>ApiKeyName</code>: Jeśli w witrynie docelowej jest używany klucz interfejsu API, za pomocą tego parametru można określić nazwę (nie wartość) parametru klucza, który musi być używany w adresie URL. Rzeczywista wartość klucza jest udostępniana w poświadczeniu.</li>\r\n <li><code>WaitFor</code>: określa warunek oczekiwania przed pobraniem kodu HTML, oprócz oczekiwania na załadowanie strony (co jest zawsze wykonywane). Może to być rekord zawierający pola limitu czasu i/lub selektora. Jeśli zostanie określony tylko limit czasu, funkcja będzie czekać przez określony czas przed pobraniem kodu HTML. Jeśli zostanie określony zarówno selektor, jak i limit czasu, a limit czasu upłynie, zanim selektor będzie istniał na stronie, zostanie zgłoszony błąd. Jeśli wybrano selektor bez limitu czasu, zostanie zastosowany domyślny limit czasu wynoszący 30 sekund.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Uzyskiwanie dostępu do danych",
        "Documentation.Examples": [
          {
            "Description": "Zwraca kod HTML dla witryny https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Zwraca kod HTML dla witryny https://microsoft.com po oczekiwaniu na pojawienie się selektora CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Zwraca kod HTML dla witryny https://microsoft.com po odczekaniu dziesięciu sekund.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Zwraca kod HTML dla witryny https://microsoft.com po oczekiwaniu do dziesięciu sekund na pojawienie się selektora CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Zwraca zawartość pobraną spod adresu URL jako wartość binarną.",
        "Documentation.LongDescription": "Zwraca zawartość pobraną z <code>url</code> jako dane binarne. Można podać opcjonalny parametr rekordu, <code>options</code>, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n <ul>\r\n<li><code>Query</code> : Programowo dodawaj parametry zapytania do adresu URL bez konieczności zajmowania się sekwencjami ucieczki.</li>\r\n<li><code>ApiKeyName</code> : Jeśli w witrynie docelowej jest używany klucz interfejsu API, za pomocą tego parametru można określić nazwę (nie wartość) parametru klucza, kt&#243;ry musi być używany w adresie URL. Rzeczywista wartość klucza jest udostępniana w poświadczeniu.</li>\r\n<li><code>Headers</code> : Podanie rekordu w przypadku tej wartości spowoduje dostarczenie dodatkowych nagł&#243;wk&#243;w do żądania HTTP.</li>\r\n<li><code>Timeout</code> : Podanie czasu trwania w przypadku tej wartości spowoduje zmianę limitu czasu żądania HTTP. Wartość domyślna to 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Podanie listy w przypadku tej wartości spowoduje wykluczenie tych kluczy nagł&#243;wk&#243;w HTTP z obliczenia na potrzeby buforowania danych.</li>\r\n<li><code>IsRetry</code> : Podanie wartości true w przypadku tej wartości logicznej spowoduje zignorowanie odpowiedzi, kt&#243;ra może istnieć w pamięci podręcznej podczas pobierania danych.</li>\r\n<li><code>ManualStatusHandling</code> : Podanie listy w przypadku tej wartości uniemożliwi wszelką wbudowaną obsługę żądań HTTP, kt&#243;rych odpowiedź zawiera jeden z tych kod&#243;w stanu.</li>\r\n<li><code>RelativePath</code> : Podanie tekstu w przypadku tej wartości spowoduje dodanie go do podstawowego adresu URL przed wysłaniem żądania.</li>\r\n<li><code>Content</code> : Określenie tej wartości spowoduje zmianę żądania internetowego z GET na POST, a wartość opcji stanie się zawartością żądania POST.</li>\r\n</ul>\r\n\r\n Żądanie HTTP jest wykonywane jako żądanie GET (jeśli nie określono zawartości) lub POST (jeśli istnieje zawartość). Żądania POST mogą być wykonywane tylko anonimowo.\r\n <br>\r\n Nagłówki odpowiedzi HTTP są dostępne jako metadane w wyniku binarnym. Poza niestandardowym kontekstem łącznika danych dostępny jest tylko podzbiór nagłówków odpowiedzi (ze względów bezpieczeństwa).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pobierz zawartość <code>\"https://bing.com/search?q=Power+Query\"</code> przy użyciu opcji RelativePath i zapytania. Te opcje służą do dynamicznej kwerendy statycznego podstawowego adresu URL.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Wykonaj operację POST względem adresu URL, przekazując binarny ładunek JSON i analizując odpowiedź jako kod JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Połącz się z bezpiecznym adresem URL, który akceptuje klucz uwierzytelniania jako część ciągu zapytania. Zamiast twardego kodowania klucza tajnego w M (co stanowiłoby zagrożenie bezpieczeństwa), \r\n    klucz można bezpiecznie zapewnić, określając jego nazwę (nie jego wartość) w M, wybierając uwierzytelnianie internetowego interfejsu API i wprowadzając wartość klucza jako część poświadczenia internetowego interfejsu API.\r\n    W przypadku użycia w ten sposób poniższy przykład wygeneruje żądanie do <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Zwraca nagłówki HTTP pobrane z adresu URL jako wartość rekordu.",
        "Documentation.LongDescription": "Zwraca nagłówki pobrane z <code>url</code> jako rekord. Można podać opcjonalny parametr rekordu, <code>options</code>, aby określić dodatkowe właściwości. Rekord może zawierać następujące pola:\r\n <ul>\r\n<li><code>Query</code> : Programowo dodawaj parametry zapytania do adresu URL bez konieczności zajmowania się sekwencjami ucieczki.</li>\r\n<li><code>ApiKeyName</code> : Jeśli w witrynie docelowej jest używany klucz interfejsu API, za pomocą tego parametru można określić nazwę (nie wartość) parametru klucza, kt&#243;ry musi być używany w adresie URL. Rzeczywista wartość klucza jest udostępniana w poświadczeniu.</li>\r\n<li><code>Headers</code> : Podanie rekordu w przypadku tej wartości spowoduje dostarczenie dodatkowych nagł&#243;wk&#243;w do żądania HTTP.</li>\r\n<li><code>Timeout</code> : Podanie czasu trwania w przypadku tej wartości spowoduje zmianę limitu czasu żądania HTTP. Wartość domyślna to 100 sekund.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Podanie listy w przypadku tej wartości spowoduje wykluczenie tych kluczy nagł&#243;wk&#243;w HTTP z obliczenia na potrzeby buforowania danych.</li>\r\n<li><code>IsRetry</code> : Podanie wartości true w przypadku tej wartości logicznej spowoduje zignorowanie odpowiedzi, kt&#243;ra może istnieć w pamięci podręcznej podczas pobierania danych.</li>\r\n<li><code>ManualStatusHandling</code> : Podanie listy w przypadku tej wartości uniemożliwi wszelką wbudowaną obsługę żądań HTTP, kt&#243;rych odpowiedź zawiera jeden z tych kod&#243;w stanu.</li>\r\n<li><code>RelativePath</code> : Podanie tekstu w przypadku tej wartości spowoduje dodanie go do podstawowego adresu URL przed wysłaniem żądania.</li>\r\n</ul>\r\n\r\n Żądanie HTTP jest wykonywane za pomocą metody HEAD. Poza niestandardowym kontekstem łącznika danych dostępny jest tylko podzbiór nagłówków odpowiedzi (ze względów bezpieczeństwa).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pobierz nagłówki HTTP dla <code>\"https://bing.com/search?q=Power+Query\"</code> przy użyciu opcji RelativePath i Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Kontekst autoryzacji, względem którego oceniany jest warunek wpisu kontroli dostępu.",
        "Documentation.LongDescription": "Kontekst autoryzacji, względem którego oceniany jest warunek wpisu kontroli dostępu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabela wpisów kontroli dostępu.",
        "Documentation.LongDescription": "Uporządkowana tabela wpisów kontroli dostępu reprezentująca reguły autoryzacji. Każdy wiersz jest oceniany względem bieżącego kontekstu autoryzacji (w kolejności), a pierwszy wiersz, dla którego wyrażenie <code>Condition</code> zwróci wartość true, określa regułę, która zostanie zastosowana. Kolumna <code>Action</code> reprezentuje rodzaj akcji, której dotyczy reguła. Kolumna <code>AccessControlKind</code> określa, czy dla akcji ma zostać udzielony dostęp, czy ma mieć miejsce jego odmowa.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Określa rodzaj kontroli dostępu.",
        "Documentation.LongDescription": "Określa rodzaj kontroli dostępu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości binarne.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości binarne.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Określa typ kodowania binarnego.",
        "Documentation.LongDescription": "Określa typ kodowania binarnego.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Określa, ile razy element pojawi się w grupie zgodnie z oczekiwaniami.",
        "Documentation.LongDescription": "Określa, ile razy element pojawi się w grupie zgodnie z oczekiwaniami.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Opisuje typ buforowania do wykonania.",
        "Documentation.LongDescription": "Opisuje typ buforowania do wykonania.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości bajtowe.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości bajtowe.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Określa kolejność bajtów.",
        "Documentation.LongDescription": "Określa kolejność bajtów.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości znakowe.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości znakowe.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Określa typ kompresji.",
        "Documentation.LongDescription": "Określa typ kompresji.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Określa istotność znaków cudzysłowu w dokumentach CSV.",
        "Documentation.LongDescription": "Określa istotność znaków cudzysłowu w dokumentach CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Typ reprezentujący wartość wyrażoną w walucie.",
        "Documentation.LongDescription": "Typ reprezentujący wartość wyrażoną w walucie.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości daty.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości daty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości daty i godziny bez skojarzonej strefy czasowej.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości daty i godziny bez skojarzonej strefy czasowej.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości daty i godziny względne w stosunku do strefy czasowej.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości daty i godziny względne w stosunku do strefy czasowej.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Określa dzień tygodnia.",
        "Documentation.LongDescription": "Określa dzień tygodnia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Typ reprezentujący stałoprzecinkową liczbę dziesiętną.",
        "Documentation.LongDescription": "Typ reprezentujący stałoprzecinkową liczbę dziesiętną.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Typ reprezentujący liczbę zmiennoprzecinkową o podwójnej precyzji.",
        "Documentation.LongDescription": "Typ reprezentujący liczbę zmiennoprzecinkową o podwójnej precyzji.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości czasu trwania.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości czasu trwania.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Określa oczekiwaną akcję dotyczącą dodatkowych wartości w wierszu zawierającym więcej niż oczekiwaną liczbę kolumn.",
        "Documentation.LongDescription": "Określa oczekiwaną akcję dotyczącą dodatkowych wartości w wierszu zawierającym więcej niż oczekiwaną liczbę kolumn.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie funkcje.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie funkcje.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Określa rodzaj grupowania.",
        "Documentation.LongDescription": "Wiele grup lokalnych może zostać utworzonych z tą samą wartością klucza, ale dla danej wartości klucza jest generowana tylko jedna grupa globalna.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Typ reprezentujący wartość identyfikatora GUID.",
        "Documentation.LongDescription": "Typ reprezentujący wartość identyfikatora GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Tożsamość reprezentuje użytkownika, grupę, urządzenie lub inny element możliwy do zidentyfikowania.",
        "Documentation.LongDescription": "Tożsamość reprezentuje użytkownika, grupę, urządzenie lub inny element możliwy do zidentyfikowania.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definiuje zakres, w którym tożsamości są tworzone i porównywane.",
        "Documentation.LongDescription": "Definiuje zakres, w którym tożsamości są tworzone i porównywane.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Typ reprezentujący 16-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Typ reprezentujący 16-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Typ reprezentujący 32-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Typ reprezentujący 32-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Typ reprezentujący 64-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Typ reprezentujący 64-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Typ reprezentujący 8-bitową liczbę całkowitą ze znakiem.",
        "Documentation.LongDescription": "Typ reprezentujący 8-bitową liczbę całkowitą ze znakiem.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Określa algorytm tworzenia sprzężenia, który ma zostać użyty podczas operacji tworzenia sprzężenia.",
        "Documentation.LongDescription": "Określa algorytm tworzenia sprzężenia, który ma zostać użyty podczas operacji tworzenia sprzężenia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Określa rodzaj operacji tworzenia sprzężenia.",
        "Documentation.LongDescription": "Określa rodzaj operacji tworzenia sprzężenia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Określa lewą lub prawą tabelę sprzężenia.",
        "Documentation.LongDescription": "Określa lewą lub prawą tabelę sprzężenia.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Opisuje typ klauzuli ograniczania obsługiwanej przez dialekt SQL używany przez to źródło danych.",
        "Documentation.LongDescription": "Opisuje typ klauzuli ograniczania obsługiwanej przez dialekt SQL używany przez to źródło danych.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie listy.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie listy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości logiczne.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości logiczne.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Określa oczekiwaną akcję dotyczącą brakujących wartości w wierszu zawierającym mniej niż oczekiwaną liczbę kolumn.",
        "Documentation.LongDescription": "Określa oczekiwaną akcję dotyczącą brakujących wartości w wierszu zawierającym mniej niż oczekiwaną liczbę kolumn.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości null.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości liczbowe.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości liczbowe.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Określa rodzaje wartości, które usługa OData może pomijać.",
        "Documentation.LongDescription": "Określa rodzaje wartości, które usługa OData może pomijać.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Określa wystąpienie elementu w sekwencji.",
        "Documentation.LongDescription": "Określa wystąpienie elementu w sekwencji.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Określa kierunek sortowania.",
        "Documentation.LongDescription": "Określa kierunek sortowania.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Typ reprezentujący hasło w postaci tekstu.",
        "Documentation.LongDescription": "Typ reprezentujący hasło w postaci tekstu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Typ reprezentujący wartość procentową.",
        "Documentation.LongDescription": "Typ reprezentujący wartość procentową.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Określa typ trybu percentylu.",
        "Documentation.LongDescription": "Określa typ trybu percentylu.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Określa dokładność porównania.",
        "Documentation.LongDescription": "Określa dokładność porównania.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Określa styl cudzysłowów.",
        "Documentation.LongDescription": "Określa styl cudzysłowów.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Określa typ klasyfikacji.",
        "Documentation.LongDescription": "Określa typ klasyfikacji.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie rekordy.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie rekordy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Wskazuje, czy indeksowanie ma być przeprowadzane od początku danych wejściowych.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Określa kierunek zaokrąglania w przypadku równości między liczbami, do których ma zostać wykonane zaokrąglanie.",
        "Documentation.LongDescription": "Określa kierunek zaokrąglania w przypadku równości między liczbami, do których ma zostać wykonane zaokrąglanie.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Prawidłowe opcje trybu wykonywania kodu w oprogramowaniu SAP Business Warehouse.",
        "Documentation.LongDescription": "Prawidłowe opcje trybu wykonywania kodu w oprogramowaniu SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Prawidłowe opcje dystrybucji platformy SAP HANA.",
        "Documentation.LongDescription": "Prawidłowe opcje dystrybucji platformy SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operator zakresu dla parametrów wejściowych zakresu SAP HANA.",
        "Documentation.LongDescription": "Operator zakresu dla parametrów wejściowych zakresu SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Typ reprezentujący liczbę zmiennoprzecinkową o pojedynczej precyzji.",
        "Documentation.LongDescription": "Typ reprezentujący liczbę zmiennoprzecinkową o pojedynczej precyzji.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokół do użycia podczas nawiązywania połączenia z wystąpieniem platformy Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie tabele.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie tabele.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości tekstowe.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości tekstowe.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Określa typ kodowania tekstu.",
        "Documentation.LongDescription": "Określa typ kodowania tekstu.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie wartości godziny.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie wartości godziny.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Określa poziom śledzenia.",
        "Documentation.LongDescription": "Określa poziom śledzenia.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Typ reprezentujący wszystkie typy.",
        "Documentation.LongDescription": "Typ reprezentujący wszystkie typy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Typ reprezentujący tekstowy identyfikator URI.",
        "Documentation.LongDescription": "Typ reprezentujący tekstowy identyfikator URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Określa metodę HTTP.",
        "Documentation.LongDescription": "Określa metodę HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
