{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "傳回 Access 資料庫的結構性代表。",
        "Documentation.LongDescription": "傳回 Access 資料庫 <code>database</code> 的結構化表示法。可指定選擇性的記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 False)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...]。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "在特定主機上傳回 Analysis Services 資料庫。",
        "Documentation.LongDescription": "在 Analysis Services 執行個體 <code>server</code> 上傳回資料庫。可提供選擇性的記錄參數 <code>options</code>，來指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : 邏輯值，指出多維度或表格式模型中所指定的類型，是否將用為新增之量值資料行的類型。設定為 False 時，會為所有量值資料行使用「數字」類型。此選項的預設值為 False。</li>\r\n<li><code>Culture</code> : 指定資料文化特性的文化特性名稱。其與 [地區設定識別碼] 連接字串屬性相對應。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>SubQueries</code> : 設定連接字串中 &quot;SubQueries&quot; 屬性值的數字 (0、1 或 2)。此數字可控制在部份選取或 Subcube 上計算得出的成員之行為。(預設值為 2)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale cube",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "從 AtScale 匯入/DirectQuery Cube 資料。",
        "Documentation.LongDescription": "\r\n從伺服器 <code>server</code> 上的 AtScale 傳回 Cube 資料。您可指定選用記錄參數 <code>options</code> 來控制下列選項:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: 邏輯值，指出於多維度或表格式模型中指定的類型是否將用於所新增量值資料行的類型。當設定為 false 時，「數目」類型將用於所有量值資料行。此選項的預設值為 false。</li>\r\n        <li><code>CommandTimeout</code>: 期間 (以秒為單位)，控制在取消伺服器端查詢前允許其執行多長時間。預設值取決於驅動程式。</li>\r\n        <li><code>ConnectionTimeout</code>: 期間 (以秒為單位)，控制放棄嘗試連線至伺服器前的等待時間。預設值取決於驅動程式。</li>\r\n\r\n</ul>\r\n該記錄參數的指定形式為 [option1 = value1, option2 = value2...]。",
        "Documentation.Examples": {
          "Description": "列出 AtScale Cube 中的 Cube 資料。",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "從 Azure 資料總管 (Kusto) 匯入資料",
        "Documentation.DisplayName": "Azure 資料總管 (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure 資料總管 (Kusto)",
        "Documentation.LongDescription": "從您的 Azure 資料總管 (Kusto) 執行個體匯入資料",
        "Documentation.Examples": [
          {
            "Description": "傳回內含 Storm 事件資訊的資料表",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "內含 Storm 事件的資料表，這些事件來自「說明」叢集中的「範例」資料庫"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "請輸入您 Azure DevOps Analytics 服務的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "以二進位值格式傳回從 Azure DevOps Analytics Service URL 下載的內容。此函式對不同的組織使用不同的認證。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 摘要",
        "Documentation.DisplayName": "Azure DevOps Services 摘要",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 OData 摘要資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "輸入與您的註冊相關聯的 Azure 企業版 REST API 端點 URL",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "從 Azure 企業版 API 傳回可用的報表和月份清單",
        "Documentation.Name": "從 Azure 企業版匯入資料",
        "Documentation.Examples": [
          {
            "Description": "使用 AzureEnterprise.Tables 函數，並巡覽至特定的值以取得結果。",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "列出 Azure Spark 執行個體中的資料表。",
        "Documentation.LongDescription": "列出 Azure Spark 執行個體中的資料表。",
        "Documentation.Examples": [
          {
            "Description": "列出 Azure Spark 執行個體中的資料表。",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "傳回導覽表格，內含在 Azure 儲存庫的指定帳戶中找到的容器。",
        "Documentation.LongDescription": "從 Azure 儲存體保存庫傳回導覽資料表，表中每個資料列各代表在帳戶 URL <code>account</code> 找到的每個容器。每一列皆含有容器 blob 的連結。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等候資料取用者前要讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>RequestSize</code> : 嘗試在伺服器單一 HTTP 要求中讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 選項可指定要平行發送的要求數目，以讓您更快速地下載資料，但會降低記憶體使用率。需要的記憶體為 (ConcurrentRequest * RequestSize)。預設值為 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "從 Azure Data Lake Storage 傳回導覽資料表，內含在指定容器及其子資料夾中找到的文件。",
        "Documentation.LongDescription": "從 Azure Data Lake Storage 檔案系統傳回導覽資料表，內含在帳戶 URL <code>endpoint</code> 之指定容器及其子資料夾中找到的文件。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等候資料取用者前要讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>RequestSize</code> : 嘗試在伺服器單一 HTTP 要求中讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 選項可指定要平行發送的要求數目，以讓您更快速地下載資料，但會降低記憶體使用率。需要的記憶體為 (ConcurrentRequest * RequestSize)。預設值為 16。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯 (true/false)，控制以樹狀目錄檢視或簡單列表傳回檔案。預設值為 false。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "傳回導覽表格，內含在 Azure 儲存庫的指定帳戶中找到的資料表。",
        "Documentation.LongDescription": "傳回導覽表格，其中的每一個資料列，各包含一個在 Azure 儲存體保存庫之帳戶 URL <code>account</code> 中找到的資料表。每個資料列都包含 Azure 資料表的連結。您可以提供選擇性記錄參數 <code>options</code>，以指定其他屬性。記錄可以包含下列欄位:\r\n    <ul>\r\n<li><code>Timeout</code> : 控制在放棄對伺服器提出的要求之前，要等候的持續時間長度。預設值依來源而定。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure 時間序列深入解析"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino 上的 Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "彭博資料及分析  v1.1.3",
        "Documentation.Description": "用於擷取彭博資料"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "因為此函式需要 .NET 4.5，所以無法使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (舊版)",
        "Documentation.Caption": "Common Data Service (舊版)",
        "Documentation.LongDescription": "連線到您的 Common Data Service 執行個體 (Dynamics 365 與 PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "以表格方式傳回 CSV 文件的內容。",
        "Documentation.LongDescription": "以資料表傳回 CSV 文件的內容。\r\n    <ul>\r\n     <li>\r\n        <code>columns</code> 可以是 null、資料行數目、資料行名稱清單、資料表類型或選項記錄。\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> 可以是單一字元、字元清單，或是值 <code>\"\"</code>，其表示資料列應該由連續的空白字元分割。預設: <code>\",\"</code>。\r\n      </li>\r\n      <li>\r\n        請參閱 <code>ExtraValues.Type</code> 以取得 <code>extraValues</code> 支援的值。\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> 指定文字編碼類型。\r\n      </li>\r\n      </ul>\r\n\r\n    若已為 <code>columns</code> 指定了記錄 (且 <code>delimiter</code>、<code>extraValues</code> 及 <code>encoding</code> 均為 null)，則可提供下列記錄欄位:\r\n    <ul>\r\n      <li>\r\n       <code>Delimiter</code>: 資料行分隔符號。預設: <code>\",\"</code>。\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: 可以是 null、資料行數目、資料行名稱清單或資料表類型。若資料行數目少於輸入中找到的數目，則會忽略額外的資料行。若資料行數目多於輸入中找到的數目，額外的資料行將為 null。未指定時，資料行數目將取決於在輸入中找到的項目。\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: 檔案的文字編碼。預設: 65001 (UTF-8)。\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: 指定引號的處理方式。\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (預設): 欄位中的引號僅緊跟在分隔符號之後才有意義。\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: 無論引號出現的位置，欄位中的引號一律有意義。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: 指定如何處理以引號括起來的分行符號。\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (預設): 以引號括起來的分行符號會視為資料的一部份，而不會視為目前資料列的結尾。\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: 所有分行符號均會視為目前資料列的結尾，即使其發生在以引號括起來的值中也是一樣。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "使用資料行標頭處理 CSV 文字",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "傳回包含可用維度集的資料表。",
        "Documentation.LongDescription": "傳回包含 <code>cube</code> 內可用維度集的資料表。每個維度是一個資料表，內含一組維度屬性，而每個維度屬性分別以維度資料表中的一個資料行表示。使用 Cube.AddAndExpandDimensionColumn 可以展開立方中的維度。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "傳回巢狀資料表樹狀結構，代表物件 (例如維度和量值) 的顯示資料夾階層。",
        "Documentation.LongDescription": "傳回巢狀資料表樹狀結構，代表 <code>cube</code> 中可用物件 (例如維度和量值) 的顯示資料夾階層。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "傳回資料表，內含在 Cube 中展開的可用量值屬性集合。",
        "Documentation.LongDescription": "傳回資料表，內含的屬性集可供 Cube 中展開的量值使用。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "傳回內含可用量值集的資料表。",
        "Documentation.LongDescription": "傳回資料表，內含 <code>cube</code> 中可用的量值集。\r\n    每個量值分別以函數表示。使用 Cube.AddMeasureColumn 可對 Cube 套用量值。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "傳回含有可套用至 Cube 之參數集的資料表。",
        "Documentation.LongDescription": "傳回含有可套用至 <code>cube</code> 之參數集的資料表。每個參數都是一個函數，叫用函數即可取得已套用參數及其引數的 <code>cube</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "傳回資料表，內含可供 Cube 中展開之維度使用的屬性集。",
        "Documentation.LongDescription": "傳回資料表，內含可供 Cube 中展開之維度使用的屬性集。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "請輸入您 Azure Data Lake Storage Gen1 帳戶的 URL。",
        "Documentation.LongDescription": "從 Azure Data Lake Storage Gen1 傳回資料表，其中的每一個資料列，各列有在 <code>url</code> 中找到的每個資料夾與檔案。每個資料列皆包含資料夾或檔案的屬性及其內容的連結。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "請輸入您 Azure Data Lake Storage 帳戶的 URL。",
        "Documentation.LongDescription": "從 Azure Data Lake Storage Gen1 傳回資料表，其中的每一個資料列，各列有在 <code>url</code> 中找到的每個檔案。每個資料列皆包含檔案的屬性及其內容的連結。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "請輸入 Azure Cosmos DB 帳戶的 URL。",
        "Documentation.LongDescription": "會以 <code>url</code> 傳回 Azure Cosmos DB 資料庫的資料表。若已指定 <code>database</code>，則會改為傳回集合的資料表。此外，如果已在 <code>options</code> 記錄中指定欄位 <code>Query</code>，則會傳回在指定資料表及 (或) 集合上執行的查詢結果。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "請輸入您 Dynamics 365 Business Central (內部部署) OData 服務端點的 URL。",
        "Documentation.DisplayName": "Dynamics 365 Business Central (內部部署)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (內部部署)",
        "Documentation.LongDescription": "傳回具有相關 Dynamics 365 Business Central (內部部署) 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "輸入您 Dynamics NAV OData 服務端點的 URL。",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "傳回內含相關 Dynamics NAV 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "傳回 Essbase 執行個體中依 Essbase 伺服器分組的 Cube。",
        "Documentation.LongDescription": "從位於 APS 伺服器 <code>url</code> 的 Essbase 執行個體傳回依 Essbase 伺服器分組的 Cube 表。可指定選用記錄參數 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "傳回 Excel 活頁簿的內容。",
        "Documentation.LongDescription": "傳回 Excel 活頁簿的內容。\r\n    <ul>\r\n     <li> <code>useHeaders</code> 可以是 null 或邏輯 (true/false) 值，該邏輯值表示是否應將每個已傳回資料表的第一個資料列視為標頭或選項記錄。預設: false。</li>\r\n     <li> <code>delayTypes</code> 可以是 null 或邏輯 (true/false) 值，該邏輯值表示是否應將每個已傳回資料表的資料行保持為不具類型。預設: false。</li>\r\n    </ul>\r\n\r\n    若為 <code>useHeaders</code> 指定記錄 (且 <code>delayTypes</code> 是 null)，則可能提供下列記錄欄位:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: 可以是 null 或邏輯 (true/false) 值，該邏輯值表示是否應將每個已傳回資料表的第一個資料列視為標頭。預設: false。</li>\r\n     <li> <code>DelayTypes</code>: 可以為 null 或邏輯 (true/false) 值，該邏輯值表示是否應將每個已傳回資料表的資料行保持為不具類型。預設: false。</li>\r\n     <li> <code>InferSheetDimensions</code>: 可以是 null 或邏輯 (true/false) 值，該邏輯值表示是否應透過讀取工作表本身來推斷包含資料的工作表區域，而非從檔案讀取維度中繼資料。這在維度中繼資料不正確的情況下相當實用。請注意，只有 Open XML Excel 檔案才支援此選項，舊版 Excel 檔案不予以支援。預設: false。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "從 Excel 活頁簿退回 Sheet1 的內容。",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "傳回資料表，內含在指定的資料夾中找到的檔案和資料夾的屬性和內容。",
        "Documentation.LongDescription": "傳回表格，內含在資料夾 <code>path</code> 中找到的每個資料夾和檔案各一列。每一列包含資料夾或檔案的屬性，以及其內容的連結。<code>options</code> 參數目前僅供內部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "傳回表格，內含在指定的資料夾和子資料夾中找到的檔案的屬性和內容。",
        "Documentation.LongDescription": "傳回表格，內含在資料夾 <code>path</code> 和所有子資料夾中找到的每個檔案各一列。每一列包含檔案的屬性，以及其內容的連結。<code>options</code> 參數目前僅供內部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "使用 Azure AD 從 Google BigQuery 資料庫匯入資料。",
        "Documentation.LongDescription": "\r\n      使用適用於 <code>Billing Project ID</code> 的 Azure AD 以傳回列出 Google BigQuery 中可用專案的資料表。可指定選擇性記錄參數 <code>options</code>，以控制下列選項:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 控制放棄嘗試連線至伺服器之前，等候的時間長度。預設值為 ODBC 連線逾時值。</li>\r\n        <li><code>CommandTimeout</code>: 控制取消伺服器端查詢之前，允許其執行的時間長度。</li>\r\n        <li><code>UseStorageApi</code>: 指定是否要為大型結果集使用 BigQuery 儲存體 API。預設值為 true，會使用儲存體 API。若設為 false，則不會使用儲存體 API</li>\r\n        <li><code>AudienceUri</code>: 這是 ODBC 驅動程式可用於權杖交換要求的 對象 URI。此欄位必須是完整 URI (例如 //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/aad-provider)，其中 pool_id 是用以識別員工集區之全域唯一的名稱。</li>\r\n      </ul>\r\n    記錄參數指定為 [option1 = value1, option2 = value2...]。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "使用 Azure AD 列出 Google BigQuery 中可用的專案",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google 試算表",
        "Documentation.Caption": "Google 試算表",
        "Documentation.Description": "從 Google 試算表匯入資料",
        "Documentation.LongDescription": "從 Google 試算表匯入資料"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "傳回導覽表格，內含在 Azure 儲存庫的指定帳戶中找到的容器。",
        "Documentation.LongDescription": "傳回導覽表格，內含在 Azure 儲存庫的帳戶 URL <code>account</code> 中找到的每個容器各一列。每一列包含容器 Blob 的連結。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "傳回導覽表格，內含在 Azure 儲存庫的指定帳戶中找到的容器。",
        "Documentation.LongDescription": "傳回導覽表格，內含在 Azure 儲存庫的帳戶 URL <code>account</code> 中找到的每個容器各一列。每一列包含容器 Blob 的連結。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "傳回表格，內含在 Hadoop 檔案系統的指定資料夾中找到的檔案和資料夾的屬性和內容。",
        "Documentation.LongDescription": "傳回表格，內含在 Hadoop 檔案系統的資料夾 URL <code>url</code> 找到的每個資料夾和檔案各一列。每一列包含資料夾或檔案的屬性，以及其內容的連結。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "傳回表格，內含在 Hadoop 檔案系統的指定資料夾和子資料夾中找到的檔案的屬性和內容。",
        "Documentation.LongDescription": "傳回表格，內含在 Hadoop 檔案系統的資料夾 URL <code>url</code> 和子資料夾中找到的每個檔案各一列。每一列包含檔案的屬性，以及其內容的連結。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "從 Impala 叢集匯入資料",
        "Documentation.LongDescription": "從 Impala 叢集 <code>server</code> 匯入資料。若未指定連接埠，將使用預設連接埠 21050。",
        "Documentation.Examples": [
          {
            "Description": "列出 Impala 叢集中的資料表。",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "從 Azure 資料總管 (Kusto) 匯入資料",
        "Documentation.DisplayName": "Azure 資料總管 (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure 資料總管 (Kusto)",
        "Documentation.LongDescription": "從您的 Azure 資料總管 (Kusto) 執行個體匯入資料",
        "Documentation.Examples": [
          {
            "Description": "傳回內含 Storm 事件資訊的資料表",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "內含 Storm 事件的資料表，這些事件來自「說明」叢集中的「範例」資料庫"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "從 MailChimp 端點傳回含有資料的資料表。",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "呼叫 MailChimp API，並以資料表形式傳回產生的資料集。所有結果都會經過自動分頁。在根端點與 JSON 回應中主要 entityName 不符的 API 端點，可以選擇使用 entityName 參數。",
        "Documentation.Examples": [
          {
            "Description": "從 MailChimp API 的 lists 端點提取資料表。",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "含有清單資料的資料表。"
          },
          {
            "Description": "從 MailChimp API 的 campaign-folders 端點提取資料表。",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "含有 campaign-folders 資料的資料表。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "從 MailChimp API 端點傳回原始回應結果。",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "呼叫 MailChimp API 並傳回原始回應。",
        "Documentation.Examples": [
          {
            "Description": "從指定活動的 reports/click-details MailChimp API 端點傳回原始資料。",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "來自指定活動的原始點選詳細資料。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "提供進階查詢函式。",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "提供進階查詢函式。",
        "Documentation.Examples": [
          {
            "Description": "假設今天是 2017-6-15，會取得 2017-5-1 至 2017-6-15 間的摘要資料",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2017-5-1 至 2017-6-15 間的摘要資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得 2017 年 4 月的摘要資料。",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2017-4-1 至 2017-4-30 間的資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得從 2017 年 4 月到目前為止的摘要資料。",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2017-4-1 至 2017-6-15 間的資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得去年 12 月到今年 2 月的摘要資料 ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2016-12-1 至 2017-2-28 間的資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得過去 18 個月的 Marketplace 費用",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2015-12-1 至 2017-6-15 間的資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得 2017 年 6 月和 2017 年 5 月的詳細費用",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2017-5-1 至 2017-6-15 間的資料"
          },
          {
            "Description": "假設今天是 2017-07-03，會取得 2016 年 7 月的詳細費用",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2016-07-01 至 2016-07-31 間的資料"
          },
          {
            "Description": "假設今天是 2017-7-13，會取得過去 10 個月加上這個月 13 天的結餘摘要",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "函式會傳回 2016-9-1 至 2017-7-13 間的資料"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure 使用量見解",
        "Documentation.Description": "Microsoft Azure 使用量見解",
        "Documentation.DisplayName": "Microsoft Azure 使用量見解",
        "Documentation.LongDescription": "Microsoft Azure 使用量見解",
        "Documentation.Name": "Microsoft Azure 使用量見解"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "從 ODBC 資料來源傳回 SQL 表格和檢視的表格。 ",
        "Documentation.LongDescription": "從連接字串 <code>connectionString</code> 所指定的 ODBC 資料來源，傳回 SQL 資料表與檢視表的資料表。<code>connectionString</code> 可以是文字或成對的屬性值記錄。屬性值可以是文字或數字。可提供選擇性的記錄參數 <code>options</code>，以指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值為 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "從提供的連接字串傳回 SQL 資料表和檢視。",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "從 OLE DB 資料來源傳回 SQL 資料表與檢視的資料表。",
        "Documentation.LongDescription": "從連接字串 <code>connectionString</code> 指定的 OLE DB 資料來源，傳回 SQL 資料表與檢視的資料表。<code>connectionString</code> 可以是成對屬性值的文字或記錄。屬性值可以是文字或數字。可提供選擇性的記錄參數 <code>options</code>，來指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 True)。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "傳回 Oracle database 中 SQL 資料表和檢視表的資料表。",
        "Documentation.LongDescription": "從伺服器 <code>server</code> 上的 Oracle database，傳回 SQL 資料表與檢視的資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "傳回 PDF 檔案中找到的任何資料表。",
        "Documentation.LongDescription": "傳回在 <code>pdf</code> 中找到的所有資料表。可提供選擇性記錄參數 <code>options</code> 來指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>Implementation</code> : 識別資料表時所要使用的演算法版本。舊版本僅供回溯相容性使用，以防止舊的查詢因演算法更新而中斷。最新版本應一律提供最佳結果。有效值為 「1.3」、「1.2」、「1.1」或 null。</li>\r\n<li><code>StartPage</code> : 指定要檢查之頁面範圍的第一頁。預設: 1。</li>\r\n<li><code>EndPage</code> : 指定要檢查之頁面範圍的最後一頁。預設: 文件的最後一頁。</li>\r\n<li><code>MultiPageTables</code> : 控制連續頁面上的類似表格是否要自動合併成單一表格。預設: true。</li>\r\n<li><code>EnforceBorderLines</code> : 控制永遠強制使用框線作為儲存格邊界 (若為 true)，或單純用來作為其中一個決定儲存格邊界的提示 (若為 false)。預設: false。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "正在存取資料",
        "Documentation.Examples": [
          {
            "Description": "傳回 sample.pdf 中包含的資料表。",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "請輸入您 Planview Projectplace 帳戶的 URL。",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "傳回具有相關 Planview Projectplace 資料的資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "乂籲否悅Python script",
        "Documentation.Description": "琵址悅騱Executes Python script and returns data frames",
        "Documentation.Examples": {
          "Description": "琵址悅騱Executes Python script and returns data frames",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "坼現月牧R script",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "傳回資料表，其中每個資料列都是輸入記錄的欄位名稱和值。",
        "Documentation.LongDescription": "傳回包含 <code>Name</code> 和 <code>Value</code> 資料行的資料表，並且針對 <code>record</code> 中的每個欄位各包含一個資料列。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "根據記錄傳回資料表。",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "傳回 SAP HANA 資料庫中的封裝。",
        "Documentation.LongDescription": "從 SAP HANA 資料庫 <code>server</code> 傳回多維度套件的資料表。可指定選擇性的記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>Distribution</code> : SapHanaDistribution，會設定連接字串中 &quot;Distribution&quot; 屬性的值。陳述式路由是在執行陳述式前，評估分散式系統中適當伺服器節點的方法。預設值為 SapHanaDistribution.All。</li>\r\n<li><code>Implementation</code> : 指定要使用的 SAP HANA 連接器實作。</li>\r\n<li><code>EnableColumnBinding</code> : 擷取資料時，將變數繫結至 SAP Hana 結果集的資料行。可能會以記憶體使用率稍高的成本提升效能。預設值為 false。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值為 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "傳回包含 SharePoint 網站內容的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中的資料列包含在指定的 SharePoint 網站 <code>url</code> 上所發現的每個資料夾。每個資料列都包含資料夾或檔案的屬性，以及其內容的連結。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 數字 (14 或 15) 或文字「自動」，其指定用於此網站的 SharePoint API 版本。若未指定，會使用 API 版本 14。指定為「自動」時，在可能的情況下，會自動探索伺服器版本，否則版本預設值為 14。非英文的 SharePoint 網站至少需要版本 15。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "傳回包含 SharePoint 網站文件的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中的資料列包含在指定的 SharePoint 網站 <code>url</code> 以及子資料夾上所發現的每份文件。每個資料列都包含資料夾或檔案的屬性，以及其內容的連結。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 數字 (14 或 15) 或文字「自動」，其指定用於此網站的 SharePoint API 版本。若未指定，會使用 API 版本 14。指定為「自動」時，在可能的情況下，會自動探索伺服器版本，否則版本預設值為 14。非英文的 SharePoint 網站至少需要版本 15。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "傳回包含 SharePoint 清單內容的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中的資料列包含在指定的 SharePoint 清單 <code>url</code> 上所發現的每個清單項目。每個資料列都包含清單的屬性。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 數字 (14 或 15) 或文字「自動」，其指定用於此網站的 SharePoint API 版本。若未指定，會使用 API 版本 14。指定為「自動」時，在可能的情況下，會自動探索伺服器版本，否則版本預設值為 14。非英文的 SharePoint 網站至少需要版本 15。</li>\r\n<li><code>Implementation</code> : 選用。指定要使用的 SharePoint 連接器版本。接受的值是 &quot;2.0&quot; 或 Null。如果值為 &quot;2.0&quot;，則會使用 SharePoint 連接器的 2.0 實作。如果值為 Null，則會使用 SharePoint 連接器的原始實作。</li>\r\n<li><code>ViewMode</code> : 選用。此選項僅對實作 2.0 有效。接受的值是 &quot;All&quot; 和 &quot;Default&quot;。如果未指定任何值，值會設定為 &quot;All&quot;。指定 &quot;All&quot; 時，該檢視會包含所有使用者建立及系統定義的資料行。指定 &quot;Default&quot; 時，該檢視會與使用者在線上查看清單時看到的內容相符，而不論使用者在其設定中設定為預設值的項目為何。如果使用者編輯其預設檢視來新增或移除使用者建立或系統定義的資料行，或建立新的檢視並將其設定為預設值，則這些變更將會傳播到連接器。</li>\r\n<li><code>DisableAppendNoteColumns</code> : 防止連接器針對備註資料行使用個別端點。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "傳回內容中的資料表，此內容位於根據 SODA 2.0 API 格式化的指定 URL。",
        "Documentation.LongDescription": "傳回內容中的資料表，此內容位於根據 SODA 2.0 API 格式化的指定 URL <code>url</code>。URL 必須指向以 .csv 副檔名結尾、與 SODA 相容的有效來源。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "此函式可用來呼叫 SparkPost API v1 所提供的任何「清單」端點。使用此函式呼叫 SparkPost API 時，請留意 SparkPost API 有嚴格的 API 速率限制。若看到 SparkPost 伺服器傳回 429 狀態碼，即表示您已達到速率限制，需要稍待片刻才能進行更多呼叫。",
        "Documentation.Examples": [
          {
            "Description": "傳回具有單一資料行的資料表，其中填入某一個 SparkPost API v1「清單」端點的資料 (如需詳細資料，請參閱 SparkPost 文件)。",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "以使用者所指定天數彙總的資料，擷取由 SparkPost 連接器公開的內建資料表。當您使用此連接器重新整理這些資料表或呼叫 SparkPost API 時，請留意 SparkPost API 有嚴格的 API 速率限制。若看到 SparkPost 伺服器傳回 429 狀態碼，即表示您已達到速率限制，需要稍待片刻才能進行更多呼叫。當要為 Number of days 參數選擇值時，請注意 API 只會儲存 6 個月份的資料。"
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "傳回 SQL Server 上資料庫的資料表。",
        "Documentation.LongDescription": "傳回指定的 SQL 伺服器 <code>server</code> 上資料庫的資料表。您可指定選擇性的記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 於產生的 SQL 查詢中設定 &quot;maxdop&quot; 查詢子句值的數字。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n<li><code>MultiSubnetFailover</code> : 邏輯值 (True/False)，設定連接字串中 &quot;MultiSubnetFailover&quot; 屬性值的值 (預設為 False)。</li>\r\n<li><code>UnsafeTypeConversions</code> : 邏輯 (true/false) 若為 true，則會嘗試折疊可能失敗並導致整個查詢失敗的類型轉換。不建議用於一般用途。</li>\r\n<li><code>ContextInfo</code> : 用以在執行每項命令之前設定 CONTEXT_INFO 的二進位值。</li>\r\n<li><code>OmitSRID</code> : 邏輯 (true/false) 若為 true，則會在從幾何及地理類型產生 Well-Known Text 時省略 SRID。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : 邏輯 (true/false) 值，若為 true，則允許查詢折疊相同伺服器上的資料庫。預設值為 false。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...]。\r\n    <br>\r\n    不支援將 SQL 查詢設定為在伺服器上執行。應使用<code>Sql.Database</code>，而不要執行 SQL 查詢\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "呼叫 Stripe API。您可選擇是否要限制 API 的呼叫數。",
        "Documentation.LongDescription": "在 https://api.stripe.com/v1/<code>method</code> 呼叫 Stripe API。您可以選擇是否要使用其他參數傳遞記錄 <code>query</code>，以及是否要使用 <code>pageLimit</code> 限制 API 要求數。最新的資料會優先傳回。若未指定 <code>pageLimit</code>，將會傳回所有資料。將使用 Stripe 2015-10-16 版。",
        "Documentation.Examples": [
          {
            "Description": "傳回所有費用資料",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "此資料表包含目前 Stripe 帳戶的所有費用資料"
          },
          {
            "Description": "傳回一頁費用資料",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "此資料表包含目前 Stripe 帳戶的最新費用資料"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "在記憶體中緩衝處理資料表，讓它在評估期間與外部變更隔離。",
        "Documentation.LongDescription": "緩衝記憶體中的資料表，在評估期間與外部變更隔離。\r\n    緩衝處理很淺。它會強制評估任何純量儲存格值，但是讓非純量值 (記錄、清單、資料表等) 保持原樣。\r\n    <br>\r\n    <br>\r\n    請注意，使用此函式不一定會讓查詢執行速度更快。在某些情況下，因為增加\r\n    讀取所有資料並儲存在記憶體中的時間，以及必須緩衝處理防止下游發生折疊而讓查詢執行速度變慢。如果資料不需要\r\n緩衝處理，只是要防止下游摺疊，請改為使用 <code>Table.StopFolding</code>。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "將 SQL 資料表的所有資料列載入記憶體，讓所有下游作業都無法再查詢 SQL Server。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "傳回代表資料表清單合併結果的資料表。",
        "Documentation.LongDescription": "傳回合併一串資料表後所產生的資料表，<code>tables</code>。產生的資料表會具有由 <code>columns</code> 或輸入類型等位 (若 <code>columns</code> 未指定) 所定義的資料列類型結構。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "將三個資料表合併在一起。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "合併三個具有不同結構的資料表。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "將兩個資料表與專案合併至指定的類型上。",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "將資料行標頭降階為第一個資料列的值。",
        "Documentation.LongDescription": "將資料行標頭 (亦即 資料行名稱) 降階為第一個資料列的值。預設資料行名稱是 \"Column1\"、\"Column2\"，依此類推。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "將資料表中第一個資料列的值降階。",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "移除資料表中重複的資料列。",
        "Documentation.LongDescription": "從資料表移除重複的資料列。\r\n    選擇性參數，<code>equationCriteria</code>，指定要測試哪些資料行的重復資料表。如果未指定 <code>equationCriteria</code>，會測試所有資料行。<br>\r\n    <br>\r\n    因為 Power Query 有時會將特定作業卸載至後端資料來源 (稱為「摺疊」)，有時也會略過非絕對必要的操作 \r\n 來最佳化查詢，一般而言，不保證會保留哪些特定重複項目。\r\n    例如，您不能假設具有一組唯一欄值的第一列會保留，而進一步向下在表格中的資料列將會移除。\r\n    如果您希望重複的移除行為可以預測，首先使用 <code>Table.Buffer</code> 緩衝處理資料表。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "移除資料表中重複的資料列。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "從資料表 <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> 的資料行 [b] 中移除重複的資料列。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "根據資料行與指定值的清單建立資料表。",
        "Documentation.LongDescription": "根據清單 <code>lists</code> 建立 <code>columns</code> 類型的資料表，該清單包含具有資料行名稱與值的巢狀清單。\r\n    如果部分資料行的值超過其他資料行，而且資料行可為 Null，則遺漏的值就會填入預設值 'null'。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "根據清單中的客戶名稱清單傳回資料表。客戶清單項目中的每個值會成為一個資料列值，而每個清單則會成為一個資料行。",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "根據指定的資料行清單與資料行名稱清單建立資料表。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "建立每一資料列包含不同資料行數的資料表。遺漏的資料列值為 Null。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "將指定的分割函數套用至清單中的每個項目，藉以將清單轉換成資料表。",
        "Documentation.LongDescription": "將選擇性分割函數 <code>splitter</code> 套用至清單 <code>list</code> 中的每個項目，藉以將清單轉換成資料表。根據預設，清單會被視為以逗號分隔的文字值清單。選擇性 <code>columns</code> 可能是資料行的數目、資料行清單或 TableType。也可指定選擇性 <code>default</code> 和 <code>extraValues</code>。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "使用預設分割器從清單建立表格。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "使用自訂分割器從清單建立表格。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "使用 Record.FieldValues 分割器從清單建立表格。",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "將記錄清單轉換成資料表。",
        "Documentation.LongDescription": "將記錄清單 <code>records</code> 轉換成資料表。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "從記錄建立資料表，使用記錄欄位名稱做為資料行名稱。",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "從具有類型的資料行之記錄建立資料表，並選取數字資料行。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "根據列值及選擇性資料行清單建立資料表。",
        "Documentation.LongDescription": "根據清單 <code>rows</code> 建立資料表，清單內每個項目都是包含單一列資料行值的內部清單。可為 <code>columns</code> 提供資料行名稱的選擇性清單、資料表類型或資料行數目。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "傳回 [CustomerID] 資料行值為 {1, 2} 、 [Name] 資料行值為 {\"Bob\", \"Jim\"} 及 [Phone] 資料行值為 {\"123-4567\", \"987-6543\"} 的資料表。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "傳回 [CustomerID] 資料行值為 {1, 2} 、 [Name] 資料行值為 {\"Bob\", \"Jim\"} 及 [Phone] 資料行值為 {\"123-4567\", \"987-6543\"} 的資料表，其中 [CustomerID] 是數字類型，而 [Name] 和 [Phone] 是文字類型。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "根據提供的值建立包含資料行的資料表。",
        "Documentation.LongDescription": "建立資料表，其中包含具有所提供之值或值清單 <code>value</code> 的資料行。您可以指定選擇性記錄參數 <code>options</code> 控制下列選項:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: 從清單或純量值建構資料表時所使用的資料行名稱。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "根據值 1 建立資料表。",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "根據清單建立資料表。",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "使用自訂資料行名稱建立從值 1 開始的資料表。",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "傳回資料表分割方式的相關資訊。",
        "Documentation.LongDescription": "傳回資料表分割方式的相關資訊。系統會傳回一份資料表，其中每個資料行都是原始資料表中的分割區資料行，而且每個資料列都對應至原始資料表中的分割區。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "傳回資料表資料行的設定檔。",
        "Documentation.LongDescription": "<p>傳回 <code>table</code> 中資料行的設定檔。</p>\r\n<p>會為每個資料行傳回下列資訊 (若適用):\r\n<ul>\r\n  <li>最小值</li>\r\n  <li>最大值</li>\r\n  <li>平均值</li>\r\n  <li>標準差</li>\r\n  <li>計數</li>\r\n  <li>null 計數</li>\r\n  <li>相異計數</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "將第一個資料列的值升階為新的資料行標頭 (亦即資料行名稱)。",
        "Documentation.LongDescription": "將第一個資料列的值升階為新的資料行標頭 (亦即資料行名稱)。預設設定是只有文字或數值可以升階為標頭。有效選項:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: 若設為 <code>true</code>，第一個資料列中的所有純量值皆會使用 <code>Culture</code> (如有指定，或為目前文件的地區設定) 升階為標頭。\r\n    對於無法轉換文字的值，將會使用預設的資料行名稱。\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: 文化特性名稱，可指定資料的文化特性。\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "將資料表中第一個資料列的值升階。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "將資料表第一個資料列中的所有純量值全部升階為標頭。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "傳回略過前幾個資料列的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中不包含資料表 <code>table</code> 中指定數目的前幾個資料列 <code>countOrCondition</code>。\r\n    移除的資料列數目取決於選擇性參數 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果省略了 <code>countOrCondition</code>，就只移除第一個資料列。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是數字，就移除該數目的資料列 (從頂端開始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是條件，就移除符合該條件的資料列，直到資料列不符合條件為止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "移除資料表的第一個資料列。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "移除資料表的前兩個資料列。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "移除資料表中 [CustomerID] <=2 的前幾個資料列。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "傳回已移除最後 N 個資料列的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中不包含資料表 <code>table</code> 的最後 <code>countOrCondition</code> 個資料列。\r\n        移除的資料列數目取決於選擇性參數 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果省略了 <code>countOrCondition</code>，就只移除最後一個資料列。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是數字，就移除該數目的資料列 (從底端開始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是條件，就移除符合該條件的資料列，直到資料列不符合條件為止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "移除資料表的最後一個資料列。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "移除資料表中 [CustomerID] >2 的最後幾個資料列。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "傳回資料表，並從輸入資料表中移除至少有一個資料格包含錯誤的資料列。如果指定了資料行清單，就只會檢查指定資料行中的資料格是否有錯誤。",
        "Documentation.LongDescription": "傳回資料表，並從輸入資料表中移除至少有一個資料格包含錯誤的資料列。如果指定了資料行清單，就只會檢查指定資料行中的資料格是否有錯誤。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "從第一個資料列移除錯誤值。",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "傳回資料表，其中資料列會按照反向順序排列。",
        "Documentation.LongDescription": "傳回資料表，其中來自輸入 <code>table</code> 的資料列會按照反向順序排列。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "反轉資料表中的資料列順序。",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "傳回包含指定的資料表之資料行 (例如結構描述) 說明的資料表。",
        "Documentation.LongDescription": "<p>傳回描述 <code>table</code> 資料行的資料表。</p>\r\n<p>資料表中的每一個資料列都描述 <code>table</code> 資料行的屬性:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>資料行名稱</b></td>\r\n    <td><b>描述</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>資料行的名稱。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code> 中資料行從 0 開始的位置。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>資料行類型的名稱。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>資料行類型的種類。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>資料行是否可以包含 <code>null</code> 值。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> 與 <code>NumericScale</code> 欄位的數值進制 (例如，二進制、十進制)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>使用 <code>NumericPrecisionBase</code> 所指定的進制時數值資料行的有效位數。這是此類型值所能代表的位數上限 (包含小數位數)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>使用 <code>NumericPrecisionBase</code> 所指定的進制時數值資料行的小數位數。這是此類型值在小數點後的位數。值 <code>0</code> 表示沒有固定的小數位數。值 <code>null</code> 表示小數位數不明 (有可能因為是浮點或未定義)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>在日期或時間值的秒數部分，所支援的小數位數數目上限。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td> <code>text</code> 資料行中所允許的字元數上限，或是 <code>binary</code> 資料行中所允許的位元組數目上限。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>指出此資料行的長度是否可以有所變化 (最長可以到 <code>MaxLength</code>)，或其為固定大小。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>來源的原生類型系統中資料行的類型名稱 (例如，<code>nvarchar</code> 用於 SQL Server)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>來源的原生運算式語言中此資料行值的預設運算式 (例如，<code>42</code> 或 <code>newid()</code> 用於 SQL Server)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>資料行的描述。</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "傳回資料表，其中只包含輸入資料表中至少有一個資料格包含錯誤的資料列。如果指定了資料行清單，就只會檢查指定資料行中的資料格是否有錯誤。",
        "Documentation.LongDescription": "傳回資料表，其中只包含輸入資料表中至少有一個資料格包含錯誤的資料列。如果指定了資料行清單，就只會檢查指定資料行中的資料格是否有錯誤。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "選取資料列中有錯誤的客戶名稱。",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "傳回略過前幾個資料列的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中不包含資料表 <code>table</code> 中指定數目的前幾個資料列 <code>countOrCondition</code>。\r\n    略過的資料列數目取決於選擇性參數 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果省略了 <code>countOrCondition</code>，就只會略過第一個資料列。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是數字，就會略過該數目的資料列 (從頂端開始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是條件，就會略過符合該條件的資料列，直到資料列不符合條件為止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "略過資料表的第一個資料列。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "略過資料表的前兩個資料列。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "略過資料表中 [Price] > 25 的前幾個資料列。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "防止對資料的原始來源執行任何下游作業。",
        "Documentation.LongDescription": "防止對 <code>table</code> 中資料的原始來源執行任何下游作業。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "從 SQL 資料表擷取資料，以防止任何下游作業以查詢方式在 SQL Server 上執行。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "將資料行轉成資料列，而將資料列轉成資料行。",
        "Documentation.LongDescription": "將資料行轉成資料列，而將資料列轉成資料行。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將名稱/值組資料表的資料列轉成資料行。",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "取得一組資料表間的關聯性。",
        "Documentation.LongDescription": "取得一組資料表間的關聯性。集合 <code>tables</code> 假設為具有類似於導覽資料表的結構。由 <code>dataColumn</code> 所定義的資料行包含實際的資料表。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "傳回 Teradata 資料庫中 SQL 資料表和檢視表的資料表。",
        "Documentation.LongDescription": "從伺服器 <code>server</code> 上的 Teradata 資料庫，傳回 SQL 資料表與檢視的資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure 時間序列深入解析"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "輸入要擷取的歷史 Twilio 資料月份數。",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "傳回包含相關 Twilio 資料的資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "傳回包含指定資料表類型之資料行 (例如結構描述) 描述的資料表。",
        "Documentation.LongDescription": "<p>傳回描述 <code>tableType</code> 之資料行的資料表。</p>\r\n<p>如需結果資料表的描述，請參閱 <code>Table.Schema</code> 的文件。</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 摘要",
        "Documentation.DisplayName": "Azure DevOps Services 摘要",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 OData 摘要資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "連接到 Viva Insights 資料",
        "Documentation.LongDescription": "從工作場所分析匯入每週計量與屬性資料。",
        "Documentation.Examples": [
          {
            "Description": "針對分割區中每位要評量的員工，傳回具有可見屬性及每週計量的資料表。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "傳回分解成組成結構之 HTML 文件的內容，以及移除標記之後，完整文件及其文字的表示。",
        "Documentation.LongDescription": "傳回分解成組成結構之 HTML 文件的內容，以及移除標記之後，完整文件及其文字的表示。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "傳回內含關鍵 Webtrends 計量的資料表。",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "呼叫 Webtrends KeyMetrics 端點，並以資料表格式傳回所有資料。",
        "Documentation.Examples": [
          {
            "Description": "提取內含租用戶 98765 在過去 30 天內之關鍵計量的資料表",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "內含關鍵計量的資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "請輸入與您 Webtrends 帳戶建立關聯的設定檔識別碼。",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "傳回內含相關 Webtrends 資料的資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "連接到 Viva Insights 資料",
        "Documentation.LongDescription": "從工作場所分析匯入每週計量與屬性資料。",
        "Documentation.Examples": [
          {
            "Description": "針對分割區中每位要評量的員工，傳回具有可見屬性及每週計量的資料表。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "將 XML 文件的內容傳回成階層式資料表。",
        "Documentation.LongDescription": "將 XML 文件的內容傳回成階層式資料表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "將 XML 文件的內容傳回成壓平合併資料表的巢狀集合。",
        "Documentation.LongDescription": "將 XML 文件的內容傳回成壓平合併資料表的巢狀集合。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "擷取本機 XML 檔案的內容。",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "輸入您的 Zendesk 帳戶 URL。",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "傳回包含相關 Zendesk 資料的資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "傳回 ADO.NET 資料來源的結構描述集合。",
        "Documentation.LongDescription": "傳回提供者名稱為 <code>providerName</code>、連接字串為 <code>connectionString</code> 之 ADO.NET 資料來源的結構描述集合。<code>connectionString</code> 可以是文字或成對的屬性值記錄。屬性值可以是文字或數字。屬性值可以是文字或數字。可提供選擇性的記錄參數 <code>options</code>，以指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (搶鮮版 (Beta))",
        "Documentation.Description": "從 Amazon Redshift 資料庫匯入資料。",
        "Documentation.LongDescription": "傳回資料表，列出資料庫<code>資料庫</code>中 Amazon Redshift 叢集<code>伺服器</code>上的資料表。您可以指定選擇性記錄參數<code>選項</code>，以控制下列選項: \r\n<ul>\r\n<li><code>提供者名稱</code>: 要做為連線提供者名稱的文字值。這會在使用 Microsoft Authentication 時使用</li>\r\n<li><code>批次大小</code>: 在單一呼叫伺服器時擷取的資料列數目。</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "從 Analysis Services 資料庫傳回多維度 Cube 或表格式模型的資料表。",
        "Documentation.LongDescription": "從伺服器 <code>server</code> 上的 Analysis Services 資料庫 <code>database</code>，傳回多維度 Cube 或表格式模型的資料表。可指定選用性的記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>Query</code> : 用於擷取資料的原生 MDX 查詢。</li>\r\n<li><code>TypedMeasureColumns</code> : 邏輯值，指出多維度或表格式模型中所指定的類型，是否將用為新增之量值資料行的類型。設定為 False 時，會為所有量值資料行使用「數字」類型。此選項的預設值為 False。</li>\r\n<li><code>Culture</code> : 指定資料文化特性的文化特性名稱。其與 [地區設定識別碼] 連接字串屬性相對應。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>SubQueries</code> : 設定連接字串中 &quot;SubQueries&quot; 屬性值的數字 (0、1 或 2)。此數字可控制在部份選取或 Subcube 上計算得出的成員之行為。(預設值為 2)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "傳回一個資料表，其中列出指定的 Spark 叢集上之資料表。",
        "Documentation.LongDescription": "傳回一個資料表，其中列出使用 <code>protocol</code> 之 Spark 叢集 <code>host</code> 上的資料表。有效的通訊協定為:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "傳回一個資料表，其中列出指定的 Spark 叢集上之資料表。",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "輸入組織和專案名稱。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (僅限 Boards)",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 Analytics 檢視資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "從 HDInsight Interactive Query 匯入資料",
        "Documentation.LongDescription": "\r\n自 HDInsight Interactive Query<code>server</code> 上 <code>database</code> 所指定之 HDInsight Interactive Query，傳回資料表清單。伺服器可能指定有連接埠號碼 (以冒號分隔)。可指定選擇性的 <code>options</code> 參數，以控制下列選項:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 控制在放棄前，可嘗試連線至伺服器的等待時間長度。預設值取決於驅動程式。</li>\r\n        <li><code>CommandTimeout</code>: 控制伺服器端查詢在取消前，可執行多長的時間。預設值取決於驅動程式。</li>\r\n</ul>\r\n此 <code>options</code> 參數的指定方式為 [option1 = value1, option2 = value2...]。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "傳回資料表，其資料行對應到 Common Data Model 中實體的屬性，包括資料類型。",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "傳回資料表，其資料行對應到 Common Data Model 中實體的屬性，包括資料類型。如果未對應實體定義中的資料行，將會予以新增並移除任何未對應的資料行。",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "在對其套用參數之後，傳回一個 Cube。",
        "Documentation.LongDescription": "在將含有 <code>arguments</code> 的 <code>parameter</code> 套用至 <code>cube</code> 之後，傳回一個 Cube。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "摺疊對應到指定資料行的屬性，來變更立方之篩選內容的維度資料粒度。",
        "Documentation.LongDescription": "摺疊對應到指定資料行 <code>columnNames</code> 的屬性，來變更 <code>cube</code> 之篩選內容的維度資料粒度。資料行也會從立方的表格式檢視中移除。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "取代 Cube.Dimensions 傳回的維度集合。",
        "Documentation.LongDescription": "取代 <code>Cube.Dimensions</code> 傳回的維度集合。\r\n    例如，此函式可用來將識別碼資料行新增至維度屬性，讓資料來源可以依識別碼分組，而非依顯示的值。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "套用立方函數清單。",
        "Documentation.LongDescription": "在 <code>cube</code> 上套用清單立方函數 <code>transforms</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "傳回在 Db2 資料庫中可用的 SQL 資料表及檢視的資料表。",
        "Documentation.LongDescription": "傳回 Db2 資料庫 (位於名為 <code>database</code> 之資料庫執行個體內的伺服器 <code>server</code> 上) 中可用的 SQL 資料表與檢視之資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n<li><code>Implementation</code> : 指定要使用的內部資料庫提供者實作。有效值為: &quot;IBM&quot; 與 &quot;Microsoft&quot;。</li>\r\n<li><code>BinaryCodePage</code> : 將 Db2 FOR BIT 二進位資料解碼成字元字串時所使用的 CCSID (編碼字元集識別元) 數字。套用至 Implementation = &quot;Microsoft&quot;。設定為 0 可停用轉換 (預設)。設定為 1 則會根據資料庫編碼來進行轉換。設定為其他 CCSID 數字，則會轉換成應用程式編碼。</li>\r\n<li><code>PackageCollection</code> : 指定套件集合的字串值 (預設為 &quot;NULLID&quot;)，以允許使用處理 SQL 陳述式所需的共用套件。套用至 Implementation = &quot;Microsoft&quot;。</li>\r\n<li><code>UseDb2ConnectGateway</code> : 指定是否透過 Db2 Connect 閘道連線。適用於實作 = &quot;Microsoft&quot;。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Data.World 擷取資料集"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "傳回資料表，包含從 Azure 儲存體保存庫中找到的 Blob 屬性和內容。",
        "Documentation.LongDescription": "傳回資料表，包含從 Azure 儲存體保存庫在容器 URL <code>account</code> 中找到的每個 Blob 檔案的資料列。每個資料列都包含檔案屬性以及其內容的連結。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "對照提供的 HTML，傳回包含執行指定 CSS 選取器結果的資料表。",
        "Documentation.LongDescription": "傳回資料表，其中包含對提供的 <code>html</code> 執行指定 CSS 選取器的結果。提供選擇性記錄參數 <code>options</code> 可指定額外屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "存取資料",
        "Documentation.Examples": [
          {
            "Description": "從範例 html 文字值傳回資料表。",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>經理</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "從 html 文字值範例擷取所有 href。",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">測試</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "傳回 Informix 資料庫中提供的 SQL 資料表和檢視的資料表。",
        "Documentation.LongDescription": "傳回 Informix 資料庫 (位於伺服器 <code>server</code> 上名稱為 <code>database</code> 的資料庫執行個體內) 中可用的 SQL 資料表與檢視之資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "傳回包含潛在客戶詳細資料的資料表。",
        "Documentation.LongDescription": "在 <code>url</code>/rest/v1/leads.json 呼叫 Marketo REST API 端點。所有潛在客戶都會透過清單 <code>leadIds</code> 傳回。",
        "Documentation.Examples": [
          {
            "Description": "提取三個潛在客戶的詳細資料",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "此資料表包含所提供之潛在客戶的詳細資料"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "輸入與您的帳戶相關聯的 Marketo REST API 端點 URL。",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "傳回包含相關 Marketo 資料的資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "傳回 MySQL 資料庫中可用的 SQL 資料表、檢視表和預存純量函式的資料表。",
        "Documentation.LongDescription": "傳回 MySQL 資料庫 (位於伺服器 <code>server</code> 上名稱為 <code>database</code> 的資料庫執行個體內) 中可用的 SQL 資料表、檢視與預存純量函式的資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>Encoding</code> : 這個 TextEncoding 值會指定字元集，用來為傳送到伺服器的所有查詢編碼 (預設為 null)。</li>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>TreatTinyAsBoolean</code> : 邏輯值 (True/False)，決定是否要在伺服器上強制將 tinyint 資料行執行為邏輯值。預設值為 True。</li>\r\n<li><code>OldGuids</code> : 邏輯值 (True/False)，設定是否要將 char(36) 資料行 (若為 False) 或 binary(16) 資料行 (若為 True) 視為 GUID。預設值為 False。</li>\r\n<li><code>ReturnSingleDatabase</code> : 邏輯值 (True/False)，設定是要傳回所有資料庫的所有資料表 (若為 False)，還是要僅傳回指定資料庫的資料表與檢視 (若為 True)。預設值為 False。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "從 IBM Netezza 資料庫匯入資料。",
        "Documentation.LongDescription": "\r\n從伺服器 <code>server</code> 上的 Netezza 伺服器資料庫 <code>database</code> 傳回包含 Netezza 資料表、檢視及預存函式的資料表。您可選擇為伺服器指定連接埠 (以冒號分隔)，也可指定選擇性記錄參數 <code>options</code> 以控制下列選項:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: 邏輯 (true/false)，設定是否要在傳回值上產生導覽屬性 (預設為 true)</li>\r\n        <li><code>HierarchicalNavigation</code>: 邏輯 (true/false)，設定是否要依資料表的結構描述名稱分組方式來檢視資料表 (預設為 false)</li>\r\n        <li><code>ConnectionTimeout</code>: 用於控制在放棄嘗試連線到伺服器之前，等待的時間長短。預設值取決於驅動程式。</li>\r\n        <li><code>CommandTimeout</code>: 用於控制在伺服器端查詢取消之前，可以執行的時間長短。預設值取決於驅動程式。</li>\r\n<li><code>NormalizeDatabaseName</code>: 邏輯 (true/false)，設定要將資料庫名稱正常化為大寫，還是按字面解譯 (預設為 true)。</li>\r\n</ul>\r\n記錄參數會指定為 [option1 = value1, option2 = value2...]。",
        "Documentation.Examples": [
          {
            "Description": "列出 IBM Netezza 專案中的資料表。",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "傳回在 ODBC 資料來源上執行原生查詢的結果。",
        "Documentation.LongDescription": "使用 ODBC 利用連接字串 <code>connectionString</code>，傳回執行中 <code>query</code> 的結果。<code>connectionString</code> 可以是文字或屬性值組的記錄。屬性值可以是文字或數字。可能會提供您選擇性記錄參數 <code>options</code> 以指定其他屬性。記錄可以包含下列欄位:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值為 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "傳回針對提供的連接字串執行簡單查詢的結果。",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "傳回在 OLE DB 資料來源上執行原生查詢的結果。",
        "Documentation.LongDescription": "使用 OLE DB 利用連接字串 <code>connectionString</code>，傳回執行中 <code>query</code> 的結果。<code>connectionString</code> 可以是文字或成對的屬性值記錄。屬性值可以是文字或數字。可提供選擇性的記錄參數 <code>options</code>，以指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "傳回 PostgreSQL 資料庫中可用的 SQL 資料表和檢視表的資料表。",
        "Documentation.LongDescription": "傳回 PostgreSQL 資料庫 (位於伺服器 <code>server</code> 上名稱為 <code>database</code> 的資料庫執行個體內) 中可用的 SQL 資料表與檢視之資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "從 Snowflake 計算倉儲匯入資料。",
        "Documentation.LongDescription": "傳回資料表，列出 <code>server</code> 中 Snowflake Computing <code>warehouse</code> 的資料表。可以指定選擇性的記錄參數 <code>options</code>，以控制下列選項:\r\n<ul>\r\n<li><code>Role</code>: 用作連線角色名稱的文字值。</li>\r\n<li><code>CreateNavigationProperties</code>: 設定是否在傳回的值上產生導覽屬性的邏輯 (true/false) 值 (預設為 true)。</li>\r\n<li><code>ConnectionTimeout</code>: 等候 Snowflake 網路回應的秒數。</li>\r\n<li><code>CommandTimeout</code>: 等候查詢執行的秒數。</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "列出 Snowflake 倉儲中的資料表。",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "傳回一個資料表，其中列出指定的 Spark 叢集上之資料表。",
        "Documentation.LongDescription": "傳回一個資料表，其中列出使用 <code>protocol</code> 之 Spark 叢集 <code>host</code> 上的資料表。有效的通訊協定為:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "列出 Azure Spark 執行個體中的資料表。",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "傳回 SQL Server 資料庫中 SQL 資料表、檢視表和預存函數的資料表。",
        "Documentation.LongDescription": "從伺服器 <code>server</code> 上的 SQL Server 資料庫 <code>database</code>，傳回 SQL 資料表、檢視與預存函式的資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 於產生的 SQL 查詢中設定 &quot;maxdop&quot; 查詢子句值的數字。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n<li><code>MultiSubnetFailover</code> : 邏輯值 (True/False)，設定連接字串中 &quot;MultiSubnetFailover&quot; 屬性值的值 (預設為 False)。</li>\r\n<li><code>UnsafeTypeConversions</code> : 邏輯 (true/false) 若為 true，則會嘗試折疊可能失敗並導致整個查詢失敗的類型轉換。不建議用於一般用途。</li>\r\n<li><code>ContextInfo</code> : 用以在執行每項命令之前設定 CONTEXT_INFO 的二進位值。</li>\r\n<li><code>OmitSRID</code> : 邏輯 (true/false) 若為 true，則會在從幾何及地理類型產生 Well-Known Text 時省略 SRID。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : 邏輯 (true/false) 值，若為 true，則允許查詢折疊相同伺服器上的資料庫。預設值為 false。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "傳回 Sybase 資料庫中可用的 SQL 資料表和檢視表的資料表。",
        "Documentation.LongDescription": "傳回 Sybase 資料庫 (位於伺服器 <code>server</code> 上名稱為 <code>database</code> 的資料庫執行個體內) 中可用的 SQL 資料表與檢視之資料表。指定伺服器時可選擇性地指定連接埠 (以冒號分隔)。可指定選擇性記錄參數 <code>options</code>，來控制下列選項:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 True)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 用於建立導覽屬性名稱的函式。</li>\r\n<li><code>Query</code> : 用於擷取資料的原生 SQL 查詢。如果查詢會產生多個結果集，只會傳回第一個結果集。</li>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>ConnectionTimeout</code> : 控制在放棄嘗試連線到伺服器之前，要等候的持續時間長度。預設值取決於驅動程式。</li>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n</ul>\r\n\r\n    例如，記錄參數可指定為 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "使用明確的位置值來附加資料行。",
        "Documentation.LongDescription": "使用明確的位置值，將名為 <code>newColumnName</code> 的資料行附加至 <code>table</code>。\r\n    選擇性值 <code>initialValue</code> 是初始索引值。選擇性值 <code>increment</code> 會指定每個索引值的遞增量。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將名為 \"Index\" 的索引資料行新增至資料表。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "將名為 \"index\" 的索引資料行 (起始值為 10 且遞增量為 5) 新增至資料表。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "指定資料表中的清單資料行之後，針對其清單中的每個值建立一個資料列複本。",
        "Documentation.LongDescription": "指定 <code>table</code> 之後，其中 <code>column</code> 是值的清單，將清單分割成每個值各一個資料列。其他資料行中的值會複製到每個新建立的資料列中。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "分割資料表中的 [Name] 清單資料行。",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "將前一個資料格的值傳播到資料行中下方的 Null 值資料格。",
        "Documentation.LongDescription": "根據指定的 <code>table</code> 傳回資料表，其中前一個資料格的值會傳播到指定之 <code>columns</code> 中下方的 Null 值資料格。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表，其中 [Place] 資料行中的 Null 值會填入資料表中位於這些值上方的值。",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "將資料格的值傳播到資料行中上方的 Null 值資料格。",
        "Documentation.LongDescription": "根據指定的 <code>table</code> 傳回資料表，其中下一個資料格的值會傳播到指定之 <code>columns</code> 中上方的 Null 值資料格。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表，其中 [Column2] 資料行中的 Null 值會填入資料表中位於這些值下方的值。",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "傳回資料表中包含指定文字的所有資料列。",
        "Documentation.LongDescription": "傳回資料表 <code>table</code> 中包含文字 <code>text</code> 的資料列。如果找不到文字，就會傳回空白資料表。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表中包含 \"Bob\" 的資料列。",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "傳回指定的前幾個資料列。",
        "Documentation.LongDescription": "根據 <code>countOrCondition</code> 的值，傳回資料表 <code>table</code> 的第一個資料列:\r\n    <ul>\r\n    <li> 如果 <code>countOrCondition</code> 是數字，就會傳回該數目的資料列 (從頂端開始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是條件，就會傳回符合該條件的資料列，直到資料列不符合條件為止。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表的前兩個資料列。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "找出資料表中 [a] > 0 的前幾個資料列。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "傳回結合一組分割資料表結果的資料表。",
        "Documentation.LongDescription": "傳回資料表，其為結合一組已分割表格 <code>partitions</code> 的結果。<code>partitionColumn</code> 為要新增的資料行名稱。資料行值預設為 <code>any</code>，但可由 <code>partitionColumnType</code> 指定。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "從清單 <code>{number}</code> 中尋找項目類型。",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "傳回指定數目的最後幾個資料列。",
        "Documentation.LongDescription": "根據 <code>countOrCondition</code> 的值，傳回資料表 <code>table</code> 的最後一個資料列:\r\n    <ul>\r\n    <li> 如果 <code>countOrCondition</code> 是數字，就會傳回該數目的資料列，從位置 (結尾 - <code>countOrCondition</code>) 開始。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是條件，就會按遞增位置傳回符合該條件的資料列，直到資料列不符合條件為止。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表的最後兩個資料列。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "找出資料表中 [a] > 0 的最後幾個資料列。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "傳回資料表，其中所有資料行前面都已經加上指定的文字。",
        "Documentation.LongDescription": "傳回資料表，其中來自所提供之 <code>table</code> 的所有資料行名稱前面都以 <code><code>prefix</code>.ColumnName</code> 的格式加上指定的文字 <code>prefix</code> 與句號。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "在資料表中的資料行前面加上 \"mytable\"。",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "傳回資料列，從指定的位移開始。",
        "Documentation.LongDescription": "傳回 <code>table</code> 中的資料列，從指定的 <code>offset</code> 開始。選擇性參數 <code>count</code> 會指定要傳回的資料列數目。根據預設，系統會傳回該位移之後的所有資料列。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表中的所有資料列，從位移 1 開始。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "傳回資料表中的一個資料列，從位移 1 開始。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "移除指定的資料行。",
        "Documentation.LongDescription": "從 <code>table</code> 提供的 \r 中移除指定的 <code>columns</code>。\n    如果指定的資料行不存在，就會引發錯誤，除非選用參數 <code>missingField</code> 指定了替代行為 (例如 <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "從資料表中移除 [Phone] 資料行。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "嘗試從資料表移除不存在的資料行。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "從資料表中移除所有出現的指定資料列。",
        "Documentation.LongDescription": "從 <code>table</code> 中移除所有出現的指定 <code>rows</code>。\r\n    可指定選擇性參數 <code>equationCriteria</code> 以控制資料表資料列之間的比較方式。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "從資料表 <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> 中移除 [a = 1] 的任何資料列。",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "移除指定數目的資料列。",
        "Documentation.LongDescription": "從 <code>table</code> 的開頭移除 <code>count</code> 個資料列，從指定的 <code>offset</code> 開始。如果沒有提供 <code>count</code> 參數，就會使用預設計數 1。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "從資料表中移除第一個資料列。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "從資料表中移除位於位置 1 的資料列。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "從資料表中移除兩個資料列，從位置 1 開始。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "套用 {old, new} 格式的重新命名。",
        "Documentation.LongDescription": "針對資料表 <code>table</code> 中的資料行執行指定的重新命名。取代作業 <code>renames</code> 是由兩個值的清單組成，舊的資料行名稱與新的資料行名稱 (以清單的形式提供)。\r\n    如果資料行不存在，就會擲回例外狀況，除非選擇性參數 <code>missingField</code> 指定了替代方案 (例如 <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "以 \"CustomerID\" 取代資料表中的資料行名稱 \"CustomerNum\"。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "以 \"CustomerID\" 取代資料表中的資料行名稱 \"CustomerNum\"，並以 \"Phone\" 取代 \"PhoneNum\"。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "以 \"NewColumn\" 取代資料表中的資料行名稱 \"NewCol\"，如果資料行不存在，則忽略。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "傳回資料表，其中資料行會按照指定的順序排列。",
        "Documentation.LongDescription": "根據輸入 <code>table</code> 傳回資料表，其中資料行會按照 <code>columnOrder</code> 指定的順序排列。清單中未指定之資料行將不會重新排列。\r\n     如果資料行不存在，就會擲回例外狀況，除非選擇性參數 <code>missingField</code> 指定了替代方案 (例如 <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "切換資料表中 [Phone] 和 [Name] 資料行的順序。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "切換資料表中 [Phone] 和 [Address] 資料行的順序或使用 \"MissingField.Ignore\"。這不會變更表格，因為 [Address] 資料行不存在。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "將資料表的資料列重複指定的次數。",
        "Documentation.LongDescription": "傳回資料表，其中來自輸入 <code>table</code> 的資料列會重複指定 <code>count</code> 次。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "將資料表中的資料列重複兩次。",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "以相對應的指定值取代指定資料行中的錯誤值。",
        "Documentation.LongDescription": "以 <code>errorReplacement</code> 清單中的新值取代 <code>table</code> 指定資料行中的錯誤值。清單格式為 {{column1, value1}, …}。每個資料行都只會有一個取代值，多次指定資料行可能會發生錯誤。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "以文字 \"world\" 取代資料表中的錯誤值。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "以文字 \"hello\" 取代資料表內 A 資料行中的錯誤值，並以文字 \"world\" 取代 B 資料行中的錯誤值。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "取代指定資料表的索引鍵。",
        "Documentation.LongDescription": "取代指定資料表的索引鍵。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "取代資料表的現有索引鍵。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "以提供的資料列取代所有指定的資料列。",
        "Documentation.LongDescription": "以提供的資料列取代 <code>table</code> 中所有指定的資料列。要取代的資料列和取代項目會使用 {old, new} 格式在 <code>replacements</code> 中指定。\r\n    可指定選擇性 <code>equationCriteria</code> 參數以控制資料表資料列之間的比較方式。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "以 [a = -1, b = -2],[a = -2, b = -3] 取代資料表中的 [a = 1, b = 2] 和 [a = 2, b = 3] 資料列。",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "傳回只包含指定資料行的資料表。",
        "Documentation.LongDescription": "傳回只包含指定 <code>columns</code> 的 <code>table</code>。\r\n    <ul>\r\n       <li><code>table</code>: 提供的資料表。</li>\r\n       <li><code>columns</code>: 要從資料表 <code>table</code> 傳回的資料行清單。傳回資料表中的資料行會按照 <code>columns</code> 所列的順序排列。</li>\r\n       <li><code>missingField</code>: <i>(選擇性)</i> 如果資料行不存在，該如何處理。範例: <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>。\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "僅包含資料行 [Name]。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "僅包含資料行 [CustomerID] 和 [Name]。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "如果所包含的資料行不存在，則預設結果為錯誤。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "如果所包含的資料行不存在，選項 <code>MissingField.UseNull</code> 會建立 Null 值的資料行。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "選取符合條件函數的資料列。",
        "Documentation.LongDescription": "傳回 <code>table</code> 中符合選取範圍 <code>condition</code> 的資料列資料表。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "在資料表中選取 [CustomerID] 資料行中的值大於 2 的資料列。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "在資料表中選取名稱沒有包含 \"B\" 的資料列。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "使用一個或多個資料行名稱和比較準則來排序資料表。",
        "Documentation.LongDescription": "以 { { col1, comparisonCriteria }, {col2} } 的格式，使用一個或多個資料行名稱與選擇性 <code>comparisonCriteria</code> 的清單來排序 <code>table</code>。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "依據 \"OrderID\" 資料行排序資料表。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "依據 \"OrderID\" 資料行以遞減順序排序資料表。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "先依據 \"CustomerID\" 資料行再依據 \"OrderID\" 排序資料表，其中 \"CustomerID\" 以遞減順序排列。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "使用提供的函式以轉換資料行名稱。",
        "Documentation.LongDescription": "使用指定的 <code>nameGenerator</code> 函數轉換資料行名稱。有效選項:\r\n    <div>\r\n      <code>MaxLength</code> 可指定新資料行名稱的長度上限。若指定函數的結果包含較長的資料行名稱，將會加以修剪。\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> 可用來控制產生新資料行名稱時的比較。比較子可用來提供不區分大小寫或文化特性與地區設定感知的比較。\r\n    </div>\r\n    <div>\r\n      公式語言中提供下列內建比較子:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: 用來執行精確序數比較</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的精確序數比較</li>\r\n      <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "請從資料行名稱移除 <code>#(tab)</code> 字元",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "轉換資料行名稱，以產生長度為 6 並區分大小寫的名稱。",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "使用特定文化特性來套用 { column, type } 格式的類型轉換。",
        "Documentation.LongDescription": "使用選用參數 <code>culture</code> 中指定的文化特性 (Culture) (例如 \"en-US\")，將轉換作業套用至參數 <code>typeTransformations</code> 中指定的資料行 (格式為 { column name, type name})，以從輸入 <code>table</code> 傳回資料表。\r\n    如果資料行不存在，則會擲回例外狀況。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中資料行 [a] 的數值轉換成文字值。",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "轉換一或多個資料行的值。",
        "Documentation.LongDescription": "套用 <code>transformOperations</code> 列出的每個資料行作業 (格式為 { column name, transformation } 或 { column name, transformation, new column type }) 以轉換 <code>table</code>。\r\n    如果指定了 <code>defaultTransformation</code>，則會套用到 <code>transformOperations</code> 中未列出的所有資料行。\r\n    如果 <code>transformOperations</code> 中列出的資料行不存在，則除非選擇性參數 <code>missingField</code> 指定替代專案，否則會擲出例外狀況 (例如，<code>MissingField.UseNull</code>或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料行 [A] 中的文字值轉換為數字值，將資料行 [B] 中的數字值轉換為文字值。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "將遺漏資料行 [X] 中的數值轉換成文字值，忽略不存在的資料行。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "將遺漏的資料行 [X] 中的數值轉換成文字值，若為不存在的資料行，則預設值為 NULL。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "將資料行 [B] 中的數字值遞增並將它們轉換成文字值，並將所有其他資料行轉換成數字。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "以使用者定義的處理常式來建立或擴充資料表以進行查詢和動作操作。",
        "Documentation.LongDescription": "<p>傳回 <code>table</code> 的檢視，其中 <code>handlers</code> 所指定的函式可在將作業套用至檢視時，用於取代預設的作業行為。</p>\r\n<p>若有提供 <code>table</code>，則所有處理常式函式都為選用項目。若未提供 <code>table</code>，則 <code>GetType</code> 與 <code>GetRows</code> 處理常式函式為必要項目。若沒有為作業指定處理常式函式，就會改為將作業的預設行為套用至 <code>table</code> (但在 <code>GetExpression</code> 的情況下除外)。</p>\r\n<p>處理常式函式傳回的值必須在語意上等同於在 <code>table</code> (在 <code>GetExpression</code> 的情況下則為產生的檢視) 套用作業的結果。</p>\r\n<p>若處理常式函式引發錯誤，就會將預設的作業行為套用至檢視。</p>\r\n<p><code>Table.View</code> 可用於實作摺疊資料來源 – 將 M 查詢轉譯成來源特定查詢 (例如從 M 查詢建立 T-SQL 陳述式)。</p>\r\n<p>如需更完整的 <code>Table.View</code> 描述，請參閱已發佈的 Power Query 自訂連接器文件。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "建立不需要存取資料列的基本檢視，以判斷類型或資料列計數。",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "輸入組織和專案名稱。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (僅限 Boards)",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 Analytics 檢視資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "從 Vertica 匯入資料",
        "Documentation.LongDescription": "傳回 <code>database</code> 參數所命名之資料庫內，由 <code>server</code> 參數所命名之伺服器上所提供的結構描述資料表。\r\n可提供選擇性的記錄參數 <code>options</code>，來指定其他屬性。記錄可包含下列欄位:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: 用於控制在放棄嘗試連線到伺服器之前，所等待的時間。預設值取決於驅動程式。</li>\r\n    <li><code>CommandTimeout </code>: 用於控制伺服器端查詢在取消之前，可執行多長時間。預設值取決於驅動程式。</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "列出 Vertica 中的資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "從 Webtrends 傳回內含報告內容的資料表。",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "呼叫指定的 Webtrends 報告端點，並以資料表格式傳回所有資料。",
        "Documentation.Examples": [
          {
            "Description": "呼叫 Webtrends 訪客報告端點，以取得過去 30 天內的資料",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "內含訪客資料的資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "傳回與指定網域 (如果未指定網域，則使用目前電腦的網域) 相同樹系的 Active Directory 網域清單。",
        "Documentation.LongDescription": "傳回與指定網域 (如果未指定網域，則使用目前電腦的網域) 相同樹系的 Active Directory 網域清單。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "傳回在 ADO.NET 資料來源上執行原生查詢的結果。",
        "Documentation.LongDescription": "使用 ADO.NET 提供者 <code>providerName</code> 利用連接字串 <code>connectionString</code>，傳回執行中 <code>query</code> 的結果。<code>connectionString</code> 可以是文字或成對的屬性值記錄。屬性值可以是文字或數字。可提供選擇性的記錄參數 <code>options</code>，以指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 控制伺服器端查詢在取消之前，可以執行的持續時間長度。預設值為十分鐘。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 邏輯值 (true/false)，判斷是否要為 Windows 驗證產生與 SQL Server 相容的連接字串選項。預設值為 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "傳回 Adobe Analytics 中的報表套件。",
        "Documentation.LongDescription": "從 Adobe Analyics 傳回多維度套件的資料表。您可指定選擇性的記錄參數 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : 邏輯值 (True/False)，設定是否要依據資料表的結構描述名稱分組方式，檢視資料表 (預設值為 False)。</li>\r\n<li><code>MaxRetryCount</code> : 輪詢查詢結果時的重試次數。預設值為 120。</li>\r\n<li><code>RetryInterval</code> : 每次重試之間的持續時間。預設值為 1 秒。</li>\r\n<li><code>Implementation</code> : 指定 Adobe Analytics API 版本。有效值為: &quot;2.0&quot;。預設值使用 API 版本 1.4。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HIVE LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "從 Hive LLAP 匯入資料",
        "Documentation.LongDescription": "\r\n使用選取的<code>通訊協定</code>，從 Hive LLAP <code>伺服器</code>上之<code>資料庫</code>所指定的 Hive LLAP 傳回資料表清單。為伺服器指定連接埠號碼並非必要，但必須以冒號分隔。Thrift 傳輸通訊協定為列舉的類型，共有 \"Standard\" 及 \"HTTP\" 兩個值。您可以選擇是否要指定 <code>options</code> 參數，以控制下列選項:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 此期間控制放棄連線到伺服器前的等待時間。預設值為視驅動程式而定。</li>\r\n        <li><code>CommandTimeout</code>: 此期間控制伺服器端查詢在取消之前所能執行的時間。預設值為視驅動程式而定。</li>\r\n</ul>\r\n指定 <code>options</code> 參數時，須使用下列格式: [option1 = value1, option2 = value2...]。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "假設今天是 2017-6-15，會取得 2017-5-1 至 2017-6-15 間的摘要資料",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "函式會傳回 2017-5-1 至 2017-6-15 間的摘要資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得 2017 年 4 月的摘要資料。",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "函式會傳回 2017-4-1 至 2017-4-30 間的資料"
          },
          {
            "Description": "假設今天是 2017-6-15，會取得從 2017 年 4 月到目前為止的摘要資料。",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "函式會傳回 2017-4-1 至 2017-6-15 間的資料"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure 成本管理",
        "Documentation.Description": "Azure 成本管理",
        "Documentation.DisplayName": "Azure 成本管理",
        "Documentation.LongDescription": "Azure 成本管理",
        "Documentation.Name": "Azure 成本管理"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "輸入組織和專案名稱。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 OData 摘要資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "連線到您的 Dataverse 執行個體 (Dynamics 365 與 PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "將指定的維度資料表合併入立方的篩選內容，並展開指定的維度屬性集以變更篩選內容的維度資料粒度。",
        "Documentation.LongDescription": "將指定的維度資料表 <code>dimensionSelector</code> 合併入立方 <code>cube</code> 的篩選內容，並展開指定的維度屬性集 <code>attributeNames</code> 以變更維度資料粒度。維度屬性會加到內含名稱為 <code>newColumnNames</code> (如果未指定則為 <code>attributeNames</code>) 之資料行的表格式檢視。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "對每個資料列的資料列內容套用量值，在包含結果的立方中加入資料行。",
        "Documentation.LongDescription": "對每個資料列的資料列內容套用量值 <code>measureSelector</code>，在包含結果的 <code>cube</code> 中加入名稱為 <code>column</code> 的資料行。量值套用方式會受到維度資料粒度和切割變更的影響。量值會在某些立方作業執行後調整。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "輸入您的 Dynamics 365 Business Central 環境與公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "傳回具有相關 Dynamics 365 Business Central 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "輸入您的 Dynamics 365 Business Central 環境與公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "傳回具有相關 Dynamics 365 Business Central 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "輸入您的 Dynamics 365 Business Central 環境與公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "傳回具有相關 Dynamics 365 Business Central 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "輸入您的 Dynamics 365 Business Central 環境與公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "傳回具有相關 Dynamics 365 Business Central 資料的資料表。 "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "傳回目前 Excel 活頁簿的內容。",
        "Documentation.LongDescription": "傳回目前 Excel 活頁簿的內容。其會傳回資料表、具名範圍和動態陣列。與 Excel.Workbook <code></code>不同的是，其不會傳回工作表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "傳回來自 Microsoft Exchange 帳戶的目錄。",
        "Documentation.LongDescription": "從 Microsoft Exchange 帳戶 <code>mailboxAddress</code> 傳回內容的資料表。如果未指定 <code>mailboxAddress</code>，將會使用認證的預設帳戶。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "倉儲",
        "Documentation.Caption": "倉儲",
        "Documentation.Description": "從倉儲匯入資料",
        "Documentation.LongDescription": "從倉儲匯入資料"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "返回 Google Analytics (分析) 帳戶。",
        "Documentation.LongDescription": "返回可以透過現有認證加以存取的 Google Analytics (分析) 帳戶。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "從 Google BigQuery 資料庫匯入資料。",
        "Documentation.LongDescription": "\r\n      傳回列出 Google BigQuery 中可用專案的資料表。可指定選擇性記錄參數 <code>options</code>，以控制下列選項:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 控制放棄嘗試連線至伺服器之前，等候的時間長度。預設值為 ODBC 連線逾時值。</li>\r\n        <li><code>CommandTimeout</code>: 控制取消伺服器端查詢之前，允許其執行的時間長度。</li>\r\n        <li><code>BillingProject</code>: 帳單專案識別碼。預設值為第一個可用的專案。</li>\r\n        <li><code>UseStorageApi</code>: 指定是否要為大型結果集使用 BigQuery 儲存體 API。預設值為 true，會使用儲存體 API。若設為 false，則不會使用儲存體 API</li>\r\n      </ul>\r\n    記錄參數指定為 [option1 = value1, option2 = value2...]。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "列出 Google BigQuery 中可用的專案",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "從 Lakehouse 匯入資料",
        "Documentation.Description": "從 Lakehouse 匯入資料",
        "Documentation.LongDescription": "連線到您有權存取的所有 Lakehouse，以及選擇您要使用的實體。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "傳回含有重要 MailChimp 資料的資料表。",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "傳回含有重要 MailChimp 資料的資料表。",
        "Documentation.Examples": [
          {
            "Description": "傳回含有重要 MailChimp 資料的資料表。",
            "Code": "MailChimp.Tables()",
            "Result": "含有重要 MailChimp 資料的資料表。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "傳回包含潛在客戶活動的資料表。",
        "Documentation.LongDescription": "在 <code>url</code>/rest/v1/activities.json 呼叫 Marketo REST API 端點。所有自 <code>startTime</code> 起所發生的活動，都會透過清單 <code>activityIds</code> 傳回。",
        "Documentation.Examples": [
          {
            "Description": "提取自 2015 年 11 月 1 日起的「瀏覽網頁」活動資料表",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "此資料表包含自 11 月 1 日起之所有「瀏覽網頁」活動的詳細資料"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI 資料流程 (舊版)",
        "Documentation.Caption": "從 Power BI 資料流程匯入資料",
        "Documentation.LongDescription": "連線到您有權存取的所有 Power BI 資料流程，以及選擇您要使用的實體。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "資料超市",
        "Documentation.Caption": "資料超市",
        "Documentation.Description": "從資料超市匯入資料",
        "Documentation.LongDescription": "從資料超市匯入資料"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "資料流程",
        "Documentation.Caption": "從資料流程匯入資料。",
        "Documentation.Description": "從資料流程匯入資料。",
        "Documentation.LongDescription": "連線到您有權存取的所有資料流程，以及選擇您要使用的實體。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "從 QuickBooks Online 匯入資料。",
        "Documentation.LongDescription": "\r\n        傳回列出 QuickBooks Online 中可用資料表的資料表。可指定選用記錄參數 <code>options</code> 來控制下列選項:\r\n          <ul>\r\n             <li><code>ConnectionTimeout</code>: 此期間控制放棄嘗試連線到伺服器之前，要等候多久的時間。</li>\r\n             <li><code>CommandTimeout</code>: 此期間控制在取消伺服器端查詢之前，允許其執行多久的時間。</li>\r\n          </ul>\r\n        記錄參數的指定形式為 [option1 = value1, option2 = value2...]。\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "從 Salesforce 帳戶傳回物件。",
        "Documentation.LongDescription": "在認證中所提供的 Salesforce 帳戶傳回物件。該帳戶會透過所提供的環境 <code>loginUrl</code> 進行連線。若未提供任何環境，則該帳戶會連線至產品 (https://login.salesforce.com)。可提供選擇性的記錄參數 <code>options</code>，來指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 邏輯值 (True/False)，設定是否要在傳回的值上產生導覽屬性 (預設為 False)。</li>\r\n<li><code>ApiVersion</code> : 用於此查詢的 Salesforce API 版本。若未指定，會使用 API 版本 29.0。</li>\r\n<li><code>Timeout</code> : 控制在放棄對伺服器提出的要求之前，要等候的持續時間長度。預設值依來源而定。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "從 Salesforce 帳戶傳回報表。",
        "Documentation.LongDescription": "在認證中所提供的 Salesforce 帳戶傳回報表。該帳戶會透過所提供的環境 <code>loginUrl</code> 進行連線。若未提供任何環境，則該帳戶會連線至產品 (https://login.salesforce.com)。可提供選擇性的記錄參數 <code>options</code>，來指定其他屬性。記錄可包含下列欄位:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 用於此查詢的 Salesforce API 版本。若未指定，會使用 API 版本 29.0。</li>\r\n<li><code>Timeout</code> : 控制在放棄對伺服器提出的要求之前，要等候的持續時間長度。預設值依來源而定。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "傳回 InfoCubes 及 SAP Business Warehouse 系統中依 InfoArea 分組的查詢。",
        "Documentation.LongDescription": "傳回 InfoCubes 的資料表及依 InfoArea (來自系統編號為 <code>systemNumberOrSystemId</code> 且用戶端識別碼為 <code>clientId</code> 的伺服器 <code>server</code> 上之 SAP Business Warehouse 執行個體) 分組的查詢。可指定選擇性的記錄參數 <code>optionsOrLogonGroup</code>，來控制下列選項:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "從 Smartsheet API 傳回內含工作表、報表、資料夾與工作區的資料表",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "從 Smartsheet API 傳回內含可用工作表、報表、資料表與工作區的巢狀資料表。",
        "Documentation.Examples": [
          {
            "Description": "傳回 Smartsheet 階層頂層中的可用工作表、資料夾、報表與工作區",
            "Code": "Smartsheet.Tables()",
            "Result": "內含 Smartsheet 階層頂層中之可用工作表、資料夾、報表與工作區的資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "傳回內含 SparkPost API v1 所提供之計量的資料表",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "此函式可用來從 SparkPost API v1 的特定「計量」端點擷取資料。當您使用此連接器重新整理這些資料表或呼叫 SparkPost API 時，請留意 SparkPost API 有嚴格的 API 速率限制。若看到 SparkPost 伺服器傳回 429 狀態碼，即表示您已達到速率限制，需要稍待片刻才能進行更多呼叫。當要為天數參數選擇值時，請注意 API 只會儲存 6 個月份的資料。",
        "Documentation.Examples": [
          {
            "Description": "擷取過去三天所彙總之所有 campaign_ids 的 count_sent 及 count_rejected 傳遞能力計量。",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "資料表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "呼叫 Stripe API。",
        "Documentation.LongDescription": "在 https://api.stripe.com/v1/<code>method</code> 呼叫 Stripe API。您可以選擇是否要使用其他參數傳遞記錄 <code>additionalParameters</code>，以及是否要使用清單 <code>ColumnNames</code> 傳遞所需的資料行名稱。將使用 Stripe 2015-10-16 版。",
        "Documentation.Examples": [
          {
            "Description": "傳回包含自 2015 年 11 月 1 日起所建立之事件的資料表",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "此資料表包含目前 Stripe 帳戶的指定事件"
          },
          {
            "Description": "傳回包含所有 SKU 的資料表。",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "此資料表包含目前 Stripe 帳戶的所有 SKU"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "傳回列有可用 Stripe 資料表與函數的資料表清單。",
        "Documentation.LongDescription": "傳回列有可用 Stripe 資料表與函數的資料表清單。"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics 工作區",
        "Documentation.Caption": "Azure Synapse Analytics 工作區",
        "Documentation.LongDescription": "適用於 Azure Synapse Analytics 工作區的 PQ 連接器",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "加入具有指定名稱的資料行。其值是使用指定的選取函數來計算，並將每個資料列視為輸入。",
        "Documentation.LongDescription": "將名為 <code>newColumnName</code> 的資料行加入至資料表 <code>table</code>。此資料行的值是使用指定的選取函數 <code>columnGenerator</code> 來計算，並將每個資料列視為輸入。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將名為「TotalPrice」的數字資料行新增至資料表中，每個值都是 [Price] 和 [Shipping] 資料行的總和。",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "透過對資料表中指定資料行的值進行模糊分組以取得代表值，並新增具有該代表值的資料行。",
        "Documentation.LongDescription": "將資料行 <code>newColumnName</code> 新增至 <code>table</code>，其代表值為<code>columnName</code>。代表值是透過為每個資料列內 <code>columnName</code> 中的值進行模糊比對所得。\r\n    <p>可以選擇納入一組 <code>options</code>，以指定如何比對索引鍵資料行。選項包含:\r\n    <ul>\r\n<li><code>Culture</code> : 允許依據文化特性專屬的規則為記錄分組。其可以是任何有效的文化特性名稱。例如，&quot;ja-jp&quot; 的文化特性選項會根據日文文化特性為記錄分組。預設值為 &quot;&quot;，即不因文化特性而異 (英文) 進行分組。</li>\r\n<li><code>IgnoreCase</code> : 邏輯 (true/false) 值，允許不區分大小寫的索引鍵分組。例如，若為 true，&quot;Grapes&quot; 會與 &quot;grapes&quot; 分為同一組。預設值為 true。</li>\r\n<li><code>IgnoreSpace</code> : 邏輯 (true/false) 值，允許合併文字部分以尋找群組。例如，若為 true，&quot;Gra pes&quot; 會與 &quot;Grapes&quot; 分為同一組。預設值為 true。</li>\r\n<li><code>SimilarityColumnName</code> : 顯示輸入值與該輸入之代表值之相似性的資料行名稱。預設值為 Null，表示將不會新增資料行顯示相似性。</li>\r\n<li><code>Threshold</code> : 介於 0.00 到 1.00 之間的數字，指出將兩個值分成一組所依據的相似度分數。\r\n   例如，只有在此選項設定為小於 0.90 時，「Grapes」才會與「Graes」(缺少「p」) 分成一組。\r\n    閾值 1.00 表示指定條件為完全相符。\r\n    (請注意，模糊的「完全相符」可能會忽略大小寫、字順序和標點符號等差異。)\r\n    預設值為 0.80。</li>\r\n<li><code>TransformationTable</code> : 允許依據自訂值對應來為記錄分組的資料表。其應包含 &quot;From&quot; 和 &quot;To&quot; 資料行。例如，如果提供轉換資料表，而 &quot;From&quot; 資料行包含 &quot;Grapes&quot;，且 &quot;To&quot; 資料行包含 &quot;Raisins&quot;，則 &quot;Grapes&quot; 會與 &quot;Raisins&quot; 分為同一組。請注意，轉換會套用到轉換資料表中該文字出現的所有地方。使用上述轉換資料表時，&quot;Grapes are sweet&quot; 也會與 &quot;Raisins are sweet&quot; 分為同一組。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "尋找員工位置的代表值。",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "針對提供的資料行執行資料表之間的聯結，並且在新的資料行中產生聯結結果。",
        "Documentation.LongDescription": "根據 <code>key1</code> (代表 <code>table1</code>) 和 <code>key2</code> (代表 <code>table2</code>) 所選取之索引鍵資料行的值是否相等，聯結 <code>table1</code> 的資料列與 <code>table2</code> 的資料列。結果會輸入名為 <code>newColumnName</code> 的資料行中。\r\n這個函數的行為與 JoinKind 為 LeftOuter 的 Table.Join 很相似，不同之處在於，聯結結果是以巢狀而非以壓平合併方式呈現。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將聯結資料行加入至針對 [saleID] 聯結之資料表 ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) 中名為 \"price/stock\" 的 ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]})。",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "將索引鍵加入至指定的資料表類型。",
        "Documentation.LongDescription": "將索引鍵加入至 <code>table</code>、指定的 <code>columns</code> 是定義索引鍵之資料行名稱的子集，而且 <code>isPrimary</code> 會指定該索引鍵是否為主索引鍵。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "新增單一資料行主鍵至資料表。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "附加一欄，並使用一或多個其他欄進行排名。",
        "Documentation.LongDescription": "將名為 <code>newColumnName</code> 的欄附加到 <code>table</code>，並使用<code>comparisonCriteria</code>描述的一或多個其他欄進行排名。\r\n高級用戶可以使用<code>options</code>中的 RankKind 選項來選擇更具體的排名方法。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "新增一個名為 \"RevenueRank\" 的欄至資料表中，並將 \"Revenue\" 欄從最高到最低排名。",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "將資料表的資料行彙總成包含資料表中的多個資料行。",
        "Documentation.LongDescription": "將 <code>table</code>[<code>column</code>] 中的資料表彙總成包含資料表之彙總值的多個資料行。<code>aggregations</code> 是用來指定包含要彙總之資料表的資料行、要套用至資料表以產生其值的彙總函式，以及要建立之彙總資料行的名稱。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表 <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> 之 <code>[t]</code> 中的資料表資料行彙總成 <code>[t.a]</code> 的總和、<code>[t.b]</code> 的最小值與最大值，以及 <code>[t.a]</code> 中值的計數。",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "保留初始位移，然後交替接受和略過後續資料列。",
        "Documentation.LongDescription": "保留初始位移，然後交替接受和略過後續資料列。\r\n    <ul>\r\n       <li><code>table</code>: 輸入資料表。</li>\r\n       <li><code>offset</code>: 要在開始反覆運算之前保留的資料列數目。</li>\r\n       <li><code>skip</code>: 要在每次反覆運算中移除的資料列數目。</li>\r\n       <li><code>take</code>: 要在每次反覆運算中保留的資料列數目。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "根據資料表傳回一個從第一個資料列開始、略過 1 個值然後保留 1 個值的資料表。",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "使用指定的結合子函數，將指定的資料行結合成新的資料行。",
        "Documentation.LongDescription": "使用指定的結合子函數，將指定的資料行結合成新的資料行。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將姓和名合併至新資料行中，用逗號分隔。",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "將指定資料行合併成以記錄為值的新資料行，其中每個記錄的欄位名稱與值都對應到合併資料行的資料行名稱與值。",
        "Documentation.LongDescription": "將 <code>table</code> 的指定資料行合併成名為 <code>newColumnName</code> 的新記錄值資料行，其中每個記錄都有欄位名稱和值對應到已合併資料行的資料行名稱與值。若為 <code>options</code> 指定記錄，則可能會提供下列選項: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: 指定為文字時，表示應將指定之資料行名稱視為記錄的顯示名稱。這不需要為記錄本身的其中一個資料行。</li>\r\n     <li> <code>TypeName</code>: 指定為文字時，會為產生的記錄提供邏輯類型名稱，該名稱可在資料載入期間用於載入環境驅動行為。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "複製具有指定名稱的資料行。值和類型是從來源資料行複製的。",
        "Documentation.LongDescription": "將名為 <code>columnName</code> 的資料行複製到資料表 <code>table</code>。資料行 <code>newColumnName</code> 的值和類型是從資料行 <code>columnName</code> 複製的。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "將資料行 \"a\" 複製到資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中名為 \"copied column\" 的資料行。",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "將記錄的資料行擴充成包含每個值的資料行。",
        "Documentation.LongDescription": "指定輸入 <code>table</code> 中記錄的 <code>column</code> 之後，建立資料表，並針對記錄中的每個欄位各包含一個資料行。或者，也可指定 <code>newColumnNames</code> 以針對新資料表中的欄位確保唯一的名稱。\r\n    <ul>\r\n        <li><code>table</code>: 包含要擴充之記錄資料行的原始資料表。</li>\r\n        <li><code>column</code>: 要擴充的資料行。</li>\r\n        <li><code>fieldNames</code>: 要擴充成資料表資料行的欄位清單。</li>\r\n        <li><code>newColumnNames</code>: 要提供新資料行的資料行名稱清單。新的資料行名稱不得與新資料表中的任何資料行重複。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表 <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> 中的資料行 [a] 擴充成 3 個資料行 \"aa\"、\"bb\" 和 \"cc\"。",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "將記錄的資料行或資料表的資料行擴充成包含資料表中的多個資料行。",
        "Documentation.LongDescription": "將 <code>table</code>[<code>column</code>] 中的資料表擴充成多個資料列與資料行。<code>columnNames</code> 是用來選取內部資料表中要擴充的資料行。請指定 <code>newColumnNames</code> 以避免現有的資料行與新的資料行發生衝突。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表 <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> 之 <code>[a]</code> 中的資料表資料行擴充成 3 個資料行 <code>[t.a]</code>、<code>[t.b]</code> 和 <code>[t.c]</code>。",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "依據索引鍵的模糊比對，將資料表中資料列分組。",
        "Documentation.LongDescription": "為每個資料列內指定資料行 <code>key</code> 中的值進行模糊比對，來為 <code>table</code> 的資料列分組。\r\n    系統會針對每個群組建立一筆記錄，其中包含索引鍵資料行 (及其值) 以及 <code>aggregatedColumns</code> 指定的任何彙總資料行。\r\n    此函式無法保證傳回資料列的固定順序。\r\n    <p>可以選擇納入一組 <code>options</code>，以指定如何比較索引鍵資料行。選項包含:\r\n    <ul>\r\n<li><code>Culture</code> : 允許依據文化特性專屬的規則為記錄分組。其可以是任何有效的文化特性名稱。例如，&quot;ja-jp&quot; 的文化特性選項會根據日文文化特性為記錄分組。預設值為 &quot;&quot;，即不因文化特性而異 (英文) 進行分組。</li>\r\n<li><code>IgnoreCase</code> : 邏輯 (true/false) 值，允許不區分大小寫的索引鍵分組。例如，若為 true，&quot;Grapes&quot; 會與 &quot;grapes&quot; 分為同一組。預設值為 true。</li>\r\n<li><code>IgnoreSpace</code> : 邏輯 (true/false) 值，允許合併文字部分以尋找群組。例如，若為 true，&quot;Gra pes&quot; 會與 &quot;Grapes&quot; 分為同一組。預設值為 true。</li>\r\n<li><code>SimilarityColumnName</code> : 顯示輸入值與該輸入之代表值之相似性的資料行名稱。預設值為 Null，表示將不會新增資料行顯示相似性。</li>\r\n<li><code>Threshold</code> : 介於 0.00 到 1.00 之間的數字，指出將兩個值分成一組所依據的相似度分數。\r\n   例如，只有在此選項設定為小於 0.90 時，「Grapes」才會與「Graes」(缺少「p」) 分成一組。\r\n    閾值 1.00 表示指定條件為完全相符。\r\n    (請注意，模糊的「完全相符」可能會忽略大小寫、字順序和標點符號等差異。)\r\n    預設值為 0.80。</li>\r\n<li><code>TransformationTable</code> : 允許依據自訂值對應來為記錄分組的資料表。其應包含 &quot;From&quot; 和 &quot;To&quot; 資料行。例如，如果提供轉換資料表，而 &quot;From&quot; 資料行包含 &quot;Grapes&quot;，且 &quot;To&quot; 資料行包含 &quot;Raisins&quot;，則 &quot;Grapes&quot; 會與 &quot;Raisins&quot; 分為同一組。請注意，轉換會套用到轉換資料表中該文字出現的所有地方。使用上述轉換資料表時，&quot;Grapes are sweet&quot; 也會與 &quot;Raisins are sweet&quot; 分為同一組。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表分組並新增彙總資料行 [Count]，其中包含各個位置的員工數目 (\"each Table.RowCount(_))\")。",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "根據指定的索引鍵聯結兩份資料表中模糊比對的資料列。",
        "Documentation.LongDescription": "<p>依據 <code>key1</code> (代表 <code>table1</code>) 與 <code>key2</code> (代表 <code>table2</code>) 選取之索引鍵資料行的值所進行的模糊比對，聯結 <code>table1</code> 的資料列與 <code>table2</code> 的資料列。</p>\r\n<p>模糊比對只會比較文字的相似度，不會要求文字完全一致。</p>\r\n<p>預設會執行內部聯結，但可選擇是否要加入 <code>joinKind</code> 來指定聯結類型。選項包含:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可以選擇納入一組 <code>joinOptions</code>，以指定如何比對索引鍵資料行。選項包含:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 介於 1 到 8 之間的數字，指定要用於模糊比對的平行執行緒數目。預設值為 1。</li>\r\n<li><code>Culture</code> : 允許依據文化特性專屬的規則比對記錄。其可以是任何有效的文化特性名稱。例如，&quot;ja-jp&quot; 的文化特性選項會根據日文文化特性為記錄分組。預設值為 &quot;&quot;，即不因文化特性而異 (英文) 進行比對。</li>\r\n<li><code>IgnoreCase</code> : 邏輯 (true/false) 值，允許不區分大小寫的索引鍵比對。例如，若為 true，&quot;Grapes&quot; 會與 &quot;grapes&quot; 相符。預設值為 true。</li>\r\n<li><code>IgnoreSpace</code> : 邏輯 (true/false) 值，允許合併文字部分以尋找相符項目。例如，若為 true，&quot;Gra pes&quot; 會與 &quot;Grapes&quot; 相符。預設值為 true。</li>\r\n<li><code>NumberOfMatches</code> : 指定每個輸入資料列可傳回之相符資料列數目上限的整數。例如，值為 1 時，每個輸入資料列最多傳回一個相符的資料列。若未提供此選項，則會傳回所有相符的資料列。</li>\r\n<li><code>SimilarityColumnName</code> : 顯示輸入值與該輸入之代表值之相似性的資料行名稱。預設值為 Null，表示將不會新增資料行顯示相似性。</li>\r\n<li><code>Threshold</code> : 介於 0.00 到 1.00 之間的數字，指出比對兩個值所依據的相似度分數。\r\n   例如，只有在此選項設定為小於 0.90 時，「Grapes」才會與「Graes」(缺少「p」) 相符。\r\n    閾值 1.00 表示指定條件為完全相符。\r\n    (請注意，模糊的「完全相符」可能會忽略大小寫、字順序和標點符號等差異。)\r\n    預設值為 0.80。</li>\r\n<li><code>TransformationTable</code> : 允許依據自訂值比對來比對記錄的資料表。其應包含 &quot;From&quot; 和 &quot;To&quot; 資料行。例如，如果提供轉換資料表，而 &quot;From&quot; 資料行包含 &quot;Grapes&quot;，且 &quot;To&quot; 資料行包含 &quot;Raisins&quot;，則 &quot;Grapes&quot; 會與 &quot;Raisins&quot; 相符。請注意，轉換會套用到轉換資料表中該文字出現的所有地方。使用上述轉換資料表時，&quot;Grapes are sweet&quot; 也會與 &quot;Raisins are sweet&quot; 相符。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "根據 [FirstName] 留下兩個資料表的內部模糊聯結",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "在資料表之間對提供的資料行執行模糊聯結，並在新的資料行中產生聯結結果。",
        "Documentation.LongDescription": "<p>依據 <code>key1</code> (代表 <code>table1</code>) 與 <code>key2</code> (代表 <code>table2</code>) 選取之索引鍵資料行的值所進行的模糊比對，聯結 <code>table1</code> 的資料列與 <code>table2</code> 的資料列。結果會以名為 <code>newColumnName</code> 的新資料行傳回。</p>\r\n<p>模糊比對只會比較文字的相似度，不會要求文字完全一致。</p>\r\n<p><code>joinKind</code> (選擇性) 可指定要執行的聯結種類。若未指定 <code>joinKind</code>，則預設會執行左方外部聯結。選項包含: \r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可以選擇納入一組 <code>joinOptions</code>，以指定比較索引鍵資料行的方式。選項包含: \r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 介於 1 到 8 之間的數字，指定要用於模糊比對的平行執行緒數目。預設值為 1。</li>\r\n<li><code>Culture</code> : 允許依據文化特性專屬的規則比對記錄。其可以是任何有效的文化特性名稱。例如，&quot;ja-jp&quot; 的文化特性選項會根據日文文化特性為記錄分組。預設值為 &quot;&quot;，即不因文化特性而異 (英文) 進行比對。</li>\r\n<li><code>IgnoreCase</code> : 邏輯 (true/false) 值，允許不區分大小寫的索引鍵比對。例如，若為 true，&quot;Grapes&quot; 會與 &quot;grapes&quot; 相符。預設值為 true。</li>\r\n<li><code>IgnoreSpace</code> : 邏輯 (true/false) 值，允許合併文字部分以尋找相符項目。例如，若為 true，&quot;Gra pes&quot; 會與 &quot;Grapes&quot; 相符。預設值為 true。</li>\r\n<li><code>NumberOfMatches</code> : 指定每個輸入資料列可傳回之相符資料列數目上限的整數。例如，值為 1 時，每個輸入資料列最多傳回一個相符的資料列。若未提供此選項，則會傳回所有相符的資料列。</li>\r\n<li><code>SimilarityColumnName</code> : 顯示輸入值與該輸入之代表值之相似性的資料行名稱。預設值為 Null，表示將不會新增資料行顯示相似性。</li>\r\n<li><code>Threshold</code> : 介於 0.00 到 1.00 之間的數字，指出比對兩個值所依據的相似度分數。\r\n   例如，只有在此選項設定為小於 0.90 時，「Grapes」才會與「Graes」(缺少「p」) 相符。\r\n    閾值 1.00 表示指定條件為完全相符。\r\n    (請注意，模糊的「完全相符」可能會忽略大小寫、字順序和標點符號等差異。)\r\n    預設值為 0.80。</li>\r\n<li><code>TransformationTable</code> : 允許依據自訂值比對來比對記錄的資料表。其應包含 &quot;From&quot; 和 &quot;To&quot; 資料行。例如，如果提供轉換資料表，而 &quot;From&quot; 資料行包含 &quot;Grapes&quot;，且 &quot;To&quot; 資料行包含 &quot;Raisins&quot;，則 &quot;Grapes&quot; 會與 &quot;Raisins&quot; 相符。請注意，轉換會套用到轉換資料表中該文字出現的所有地方。使用上述轉換資料表時，&quot;Grapes are sweet&quot; 也會與 &quot;Raisins are sweet&quot; 相符。</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "根據 [FirstName] 留下兩個資料表的內部模糊聯結",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "將資料表中具有相同索引鍵的資料列組成群組。",
        "Documentation.LongDescription": "依 <code>key</code> 定義的索引鍵資料行，將 <code>table</code> 的資料列分組。<code>key</code> 可以是單一資料行名稱或資料行名稱的清單。\r\n    針對每個群組，系統會建立內含索引鍵資料行 (及其值) 的記錄，以及 <code>aggregatedColumns</code> 指定的任何匯總資料行。\r\n    也可指定 <code>groupKind</code> 和 <code>comparer</code>。<br>\r\n    <br>\r\n    若資料已經依索引鍵資料行排序，則可以提供 GroupKind.Local 的 <code>groupKind</code>。在某些情況下，這可能會改善分組的效能，\r\n    因為具有指定機碼值集合的所有資料列都假設為連續的。<br>\r\n    <br>\r\n    傳遞 <code>comparer</code> 時，請注意，如果它將不同的機碼視為相等，則資料列可能會被置於與其自身機碼不同的群組中。<br>\r\n    <br>\r\n    這個函式並不能保證它所傳回的資料列排序。\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表分組，新增包含價格總和 (\"each List.Sum([price])\") 的彙總資料行 [total]。",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "將資料列清單插入資料表中的指定位置。",
        "Documentation.LongDescription": "傳回資料表，其中資料列清單 <code>rows</code> 已插入 <code>table</code> 中的指定位置 <code>offset</code>。要插入之資料列中的每個資料行都必須符合資料表的資料行類型。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "將資料列插入資料中的位置 1。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "將兩個資料列插入資料中的位置 1。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "根據指定的索引鍵聯結兩份資料表中相符的資料列。",
        "Documentation.LongDescription": "<p>根據 <code>key1</code> (代表 <code>table1</code>) 和 <code>key2</code> (代表 <code>table2</code>) 所選取之索引鍵資料行的值是否相等，聯結 <code>table1</code> 的資料列與 <code>table2</code> 的資料列。</p>\r\n<p>根據預設，會執行內部聯結，但可能會納入選擇性的 <code>joinKind</code> 來指定聯結類型。選項包括:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可以選擇納入一組 <code>keyEqualityComparers</code> 以指定如何比較索引鍵資料行。此參數目前僅供內部使用。</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "使用單一索引鍵資料行聯結兩個數據表。",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "使用多個索引鍵資料行將兩個具有衝突資料行名稱的資料表聯結。",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "使用指定的準則傳回最大的資料列。",
        "Documentation.LongDescription": "指定 <code>comparisonCriteria</code> 之後，傳回 <code>table</code> 中最大的資料列。\r\n    當資料列經過排序之後，必須指定 <code>countOrCondition</code> 參數，才能進一步篩選結果。請注意，排序演算法不保證會有固定的排序結果。<code>countOrCondition</code> 參數可接受多種格式:\r\n    <ul>\r\n        <li> 若指定數字，將會以遞增順序傳回最多包含 <code>countOrCondition</code> 個項目的清單。</li>\r\n        <li> 若指定條件，將會傳回一開始即符合條件的項目清單。只要有任何項目不符合條件，便不再考慮其他項目。</li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在資料表內符合條件 [a] > 0 的 [a] 資料行中，找出值最大的資料列。系統會先排序資料列，然後再套用篩選。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "在資料表內符合條件 [b] > 0 的 [a] 資料行中，找出值最大的資料列。系統會先排序資料列，然後再套用篩選。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "使用指定的準則傳回最小的資料列。",
        "Documentation.LongDescription": "指定 <code>comparisonCriteria</code> 之後，傳回 <code>table</code> 中最小的資料列。 當資料列經過排序之後，必須指定 <code>countOrCondition</code> 參數，才能進一步篩選結果。請注意，排序演算法不保證會有固定的排序結果。<code>countOrCondition</code> 參數可接受多種格式:\r\n    <ul>\r\n        <li> 若指定數字，將會以遞增順序傳回最多包含 <code>countOrCondition</code> 個項目的清單。</li>\r\n        <li> 若指定條件，將會傳回一開始即符合條件的項目清單。只要有任何項目不符合條件，便不再考慮其他項目。</li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在資料表內符合條件 [a] < 3 的 [a] 資料行中，找出值最小的資料列。系統會先排序資料列，然後再套用篩選。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "在資料表內符合條件 [b] < 0 的 [a] 資料行中，找出值最小的資料列。系統會先排序資料列，然後再套用篩選。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "針對提供的資料行執行資料表之間的聯結，並且在新的資料行中產生聯結結果。",
        "Documentation.LongDescription": "<p>根據 <code>key1</code> (代表 <code>table1</code>) 和 <code>key2</code> (代表 <code>table2</code>) 所選取之索引鍵資料行的值是否相等，聯結 <code>table1</code> 的資料列與 <code>table2</code> 的資料列。結果會輸入名為 <code>newColumnName</code> 的資料行。</p>\r\n<p><code>joinKind</code> (選擇性) 可指定要執行的聯結種類。若未指定 <code>joinKind</code>，預設會執行左方外部聯結。</p>\r\n<p>可以選擇納入一組 <code>keyEqualityComparers</code> 以指定如何比較索引鍵資料行。此功能目前僅供內部使用。</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "使用單一索引鍵資料行聯結兩個數據表。",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "指定一組代表屬性/值組的資料行之後，將 attribute 資料行中的資料輪換成資料行標題。",
        "Documentation.LongDescription": "指定一組代表屬性/值組的資料行之後，將 attribute 資料行中的資料輪換成資料行標題。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "採用資料表 <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 之 attribute 資料行中的 \"a\"、\"b\" 和 \"c\" 值，並將它們樞紐分析成各自的資料行。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "採用資料表 <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 之 attribute 資料行中的 \"a\"、\"b\" 和 \"c\" 值，並將它們樞紐分析成各自的資料行。索引鍵 \"x\" 的屬性 \"c\" 具有多個相關聯的值，因此請使用函數 List.Max 來解決衝突。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "以提供的資料列取代指定範圍的資料列。",
        "Documentation.LongDescription": "以指定的 <code>rows</code> 取代輸入 <code>table</code> 中指定數目的資料列 <code>count</code>，從 <code>offset</code> 之後開始。<code>rows</code> 參數是記錄的清單。\r\n    <ul>\r\n       <li><code>table</code>: 執行取代的資料表。</li>\r\n       <li><code>offset</code>: 要在進行取代之前略過的資料列數目。</li>\r\n       <li><code>count</code>: 要取代的資料列數目。</li>\r\n       <li><code>rows</code>: 要依照 <code>offset</code> 指定的位置插入 <code>table</code> 中的資料列記錄清單。</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "從位置 1 開始，取代 3 個資料列。",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "將指定之資料行中的某個值取代成另一個值。",
        "Documentation.LongDescription": "在 <code>table</code> 的指定資料行中，以 <code>newValue</code> 取代 <code>oldValue</code>。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "以資料行 B 中的「world」取代文字「goodbye」，僅比對整個值。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "以資料行 B 中的「or」取代文字「ur」，比對值的任何部分。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "匿名美國員工的名稱。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "匿名美國員工的所有資料行。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "使用指定的分隔器函數，將指定的資料行分割成一組額外的資料行。",
        "Documentation.LongDescription": "使用指定的分隔器函數，將指定的資料行分割成一組額外的資料行。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將 [Name] 資料行從位置 \"i\" 分割成兩個資料行",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "將資料表中的一組資料行轉譯為屬性/值組。",
        "Documentation.LongDescription": "將資料表中的一組資料行轉譯為屬性/值組，並結合每個資料列中其餘的值。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "採用資料表 <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> 中的資料行 \"a\"、\"b\" 和 \"c\"，並將它們取消樞紐分析成屬性/值組。",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "將指定的集合以外的所有資料行轉譯為屬性/值組。",
        "Documentation.LongDescription": "將指定集合以外的所有資料行，翻譯為成對的「屬性/值」，並與每個資料列中其餘的值合併。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "將指定集合以外的所有資料行，翻譯為成對的「屬性/值」，並與每個資料列中其餘的值合併。",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams 個人分析",
        "Documentation.LongDescription": "<p>Teams 分析連接器可讓您獲取 Teams 使用量的見解。提供的資料包括您在 Teams 中的個人活動，以及您在所屬 Teams 中的活動。 </p>\r\n<p>提供的資料為過去 90 天的資料。</p>\r\n<p>如需提供之資料的詳細資料，請參閱下列說明文件: </p>\r\n<ul>\r\n<li><b>Teams 使用量:</b> https://docs.microsoft.com/zh-tw/microsoftteams/teams-analytics-and-reports/teams-usage-report</li> (機器翻譯)\r\n<li><b>Teams 使用者活動:</b> https://docs.microsoft.com/zh-tw/microsoftteams/teams-analytics-and-reports/user-activity-report</li> (機器翻譯)\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "輸入組織和專案名稱。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "傳回 Azure DevOps 提供的 OData 摘要資料表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "傳回讀取二進位值的二進位格式。",
        "Documentation.LongDescription": "傳回會讀取二進位值的二進位格式。如果指定 <code>length</code>，則二進位值會包含該數量的位元組。如果未指定 <code>length</code>，則二進位值會包含剩餘的位元組。<code>length</code> 可以以數字形式指定，或以長度的二進位格式指定，放在二進位資料前面。",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "依兩個指定的值為基礎進行的相等比較檢查傳回邏輯錯誤。",
        "Documentation.LongDescription": "使用提供的 <code>comparer</code> 對兩個指定值 <code>x</code> 和 <code>y</code> 進行相等比較檢查，據以傳回 <code>logical</code> 值。\r\n      <div>\r\n        <code>comparer</code> 是 <code>Comparer</code>，可用來控制比較。\r\n        比較子函數接受兩個引數，並根據第一個值小於、等於或大於秒數，傳回 -1、0 或 1。\r\n        比較子可用來提供不區分大小寫或文化特性與地區設定感知的比較。\r\n      </div>\r\n      <div>\r\n        公式語言中提供下列內建比較子:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用來執行精確序數比較</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的精確序數比較</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 \"en-US\" 地區比較  \"1\" 和 \"A\" 以判斷值是否相等。",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "傳回本地時區的目前日期與時間。這個值是固定的，不會因為連續呼叫而變更。",
        "Documentation.LongDescription": "傳回 <code>datetime</code> 值，設為系統的目前日期和時間。這個值是固定的，不會因為連續呼叫而變更，而 DateTime.LocalNow 則不同，它在運算式的執行過程中可能傳回不同值。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "傳回本地時區的目前日期與時間。",
        "Documentation.LongDescription": "傳回 <code>datetime</code> 值，設為系統的目前日期和時間。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "傳回本地時區的目前日期和時間。這個值是固定的，不會因為連續呼叫而變更。",
        "Documentation.LongDescription": "傳回 <code>datetime</code> 值，設為系統的目前日期和時間。傳回值包含代表本地時區的時區資訊。這個值是固定的，不會因為連續呼叫而變更，而 DateTimeZone.LocalNow 則不同，它在運算式的執行過程中可能傳回不同值。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "傳回 UTC (GMT 時區) 的目前日期和時間。這個值是固定的，不會因為連續呼叫而變更。",
        "Documentation.LongDescription": "傳回 UTC (GMT 時區) 的目前日期和時間。這個值是固定的，不會因為連續呼叫而變更。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "傳回本地時區的目前日期和時間。",
        "Documentation.LongDescription": "傳回 <code>datetimezone</code> 值，設為系統的目前日期和時間。\r\n    傳回的值包含代表本地時區的時區資訊。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "傳回 UTC (GMT 時區) 的目前日期和時間。",
        "Documentation.LongDescription": "傳回 UTC (GMT 時區) 的目前日期和時間。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "取得 UTC 的目前日期和時間。",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "為目前執行的評估傳回 Opaque 識別碼。",
        "Documentation.LongDescription": "為目前執行的評估傳回 Opaque 識別碼。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "傳回不透明識別碼，以將傳入要求與傳出的要求相互關聯。",
        "Documentation.LongDescription": "傳回不透明識別碼，以將傳入要求與傳出的要求相互關聯。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "若啟用追蹤，則寫入追蹤項目，並傳回值。",
        "Documentation.LongDescription": "若啟用追蹤，則寫入追蹤 <code>message</code>，並傳回 <code>value</code>。選擇性參數 <code>delayed</code> 指定是否延遲評估 <code>value</code> 直到訊息追蹤完成。<code>traceLevel</code> 可接受下列其中一個值:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>、\r\n    <code>TraceLevel.Warning</code>、\r\n    <code>TraceLevel.Information</code>、\r\n    <code>TraceLevel.Verbose</code>。\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "在叫用 Text.From 函數前追蹤訊息並傳回結果。",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "目前主機的預設識別提供者。",
        "Documentation.LongDescription": "目前主機的預設識別提供者。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "根據清單中的項目累積摘要值。",
        "Documentation.LongDescription": "使用 <code>accumulator</code> 根據清單 <code>list</code> 中的項目累積摘要值。\r\n    可設定選擇性的種子參數 <code>seed</code>。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "使用 ((state, current) => state + current) 根據清單 {1, 2, 3, 4, 5} 中的項目累積摘要值。",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "已知初始值、計數和累加持續時間值，產生 datetimezone 值的清單。",
        "Documentation.LongDescription": "傳回大小為 <code>count</code> 的 <code>datetimezone</code> 值清單，從 <code>start</code> 開始。指定的增量 <code>step</code> 是要加到每個值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 10 個值的清單，從新年前 5 分鐘 (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) 開始，逐次遞增 1 分鐘 (#duration(0, 0, 1, 0))。",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "已知初始值、計數和累加持續時間值，產生 datetime 值的清單。",
        "Documentation.LongDescription": "傳回大小為 <code>count</code> 的 <code>datetime</code> 值清單，從 <code>start</code> 開始。指定的增量 <code>step</code> 是要加到每個值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 10 個值的清單，從新年前 5 分鐘 (#datetime(2011, 12, 31, 23, 55, 0)) 開始，逐次遞增 1 分鐘 (#duration(0, 0, 1, 0))。",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "已知初始值、計數和累加持續時間值，產生 date 值的清單。",
        "Documentation.LongDescription": "傳回大小為 <code>count</code> 的 <code>date</code> 值清單，從 <code>start</code> 開始。指定的增量 <code>step</code> 是要加到每個值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 5 個值的清單，從元旦前夕 (#date(2011, 12, 31)) 開始，逐次遞增 1 日 (#duration(1, 0, 0, 0))。",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "已知初始值、計數和累加持續時間值，產生工期值清單。",
        "Documentation.LongDescription": "傳回 <code>count</code> <code>duration</code> 值的清單，從 <code>start</code> 開始，並逐次遞增指定的 <code>duration</code> <code>step</code>。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 5 個值的清單，從 1 小時開始，並逐次遞增 1 小時。",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "產生值清單。",
        "Documentation.LongDescription": "使用提供的函數產生值清單。<code>initial</code>函數會產生起始候選值，然後針對<code>condition</code>測試。\r\n    如果候選值已核准，則會作為結果清單的一部分傳回，而下一個候選值則會透過將新核准的值傳遞給<code>next</code>而產生。\r\n    一旦候選值無法比對<code>condition</code>，清單產生流程就會停止。\r\n    也可以提供選擇性參數 <code>selector</code>，以轉換結果清單中的項目。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立清單，從十開始、重複遞減一個，並確定每個項目大於零。",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "產生包含 x 和 y 的記錄清單，其中 x 是值，y 是清單。x 應保持小於 10 且代表清單 y 中的項目數目。產生清單之後，只傳回 x 值。",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "將值插入清單中指定的索引位置。",
        "Documentation.LongDescription": "將 <code>values</code> 中的值插入 <code>list</code> 的 <code>index</code> 位置，以傳回所產生的新清單。清單中的第一個位置在索引 0 處。\r\n      <ul>\r\n        <li><code>list</code>: 要插入值的目標清單。</li>\r\n        <li><code>index</code>: 目標清單 (<code>list</code>) 中要插入值的索引位置。清單中的第一個位置在索引 0 處。</li>\r\n        <li><code>values</code>: 要插入 <code>list</code> 的值清單。</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "將清單 ({3, 4}) 插入目標清單 ({1, 2, 5}) 的索引 2 位置。",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "將包含巢狀清單的清單 ({1, {1.1, 1.2}}) 插入目標清單 ({2, 3, 4}) 的索引 0 位置。",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "將某位置開始、某計數的值以取代值取代。",
        "Documentation.LongDescription": "將 <code>list</code> 中的 <code>count</code> 個值以清單 <code>replaceWith</code> 取代，從指定的位置開始 <code>index</code>。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "將清單 {1, 2, 7, 8, 9, 5} 中的 {7, 8, 9} 以 {3, 4} 取代。",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "搜尋清單中指定的值並取代它。",
        "Documentation.LongDescription": "搜尋值清單 <code>list</code> 中的值 <code>oldValue</code>，並將出現的每一次以取代值 <code>newValue</code> 取代。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "將清單 {\"a\", \"B\", \"a\", \"a\"} 中的所有 \"a\" 值以 \"A\" 取代。",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "已知初始值、計數和累加持續時間值，產生 time 值的清單。",
        "Documentation.LongDescription": "傳回大小為 <code>count</code> 的 <code>time</code> 值清單，從 <code>start</code> 開始。指定的增量 <code>step</code> 是要加到每個值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 4 個值的清單，從中午 (#time(12, 0, 0)) 開始，逐次遞增 1 小時 (#duration(0, 1, 0, 0))。",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "傳回清單，它的項目是使用指定的函數，從輸入清單轉換而成。",
        "Documentation.LongDescription": "傳回從輸入清單投射元素的清單。<br>\r\n    <br>\r\n<code>collectionTransform</code> 函數會將每個元素轉換成中繼清單，而 <code>resultTransform</code> 函數會從中繼清單接收原始元素和項目，以建構最終結果。<br>\r\n    <br>\r\n<code>collectionTransform</code> 函數的簽章 <code> (x 任意) 作為清單 => ...</code>)， 其中<code>x</code> 是 <code>list</code> 中的元素。\r\n<code>resultTransform</code> 函數會投影結果的圖形，且簽章 <code> (x 任意，y 任意) 任意 => ...</code>, 其中 <code>x</code> 是 <code>list</code> 中的元素，而 <code>y</code> 是將 <code>x</code> 傳遞至 <code>collectionTransform</code> 所產生之清單中的元素 。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "壓平個人和他們的寵物清單。",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "傳回亂數。",
        "Documentation.LongDescription": "傳回 0 到 1 之間的亂數。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "取得亂數。",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "在記錄中加入欄位。",
        "Documentation.LongDescription": "指定欄位的名稱 <code>fieldName</code> 和值 <code>value</code>，在記錄 <code>record</code> 中加入欄位。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "將 Address 欄位新增至記錄中。",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "取代提供之輸入中的文字。",
        "Documentation.LongDescription": "以 <code>new</code> 文字取代原始 <code>text</code> 中的 <code>old</code> 文字。這個取代子函數可用於 <code>List.ReplaceValue</code> 和 <code>Table.ReplaceValue</code> 中。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "以 \"He\" 取代字串 \"hEllo world\" 中的文字 \"hE\"。",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "取代提供之輸入中的值。",
        "Documentation.LongDescription": "以 <code>new</code> 值取代原始 <code>value</code> 中的 <code>old</code> 值。這個取代子函數可用於 <code>List.ReplaceValue</code> 和 <code>Table.ReplaceValue</code> 中。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "以值 10 取代值 11。",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "從 Smartsheet API 傳回 JSON 結果",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "呼叫位於指定端點的 Smartsheet 2.0 REST API，並以 JSON 記錄格式傳回結果。",
        "Documentation.Examples": [
          {
            "Description": "指定額外的引數，從 Smartsheet API 端點工作表提取資料",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "由 Smartsheet API 傳回內含工作表資訊的資料表"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "傳回不會分隔，而會將其引數以單一元素清單形式傳回的函數。",
        "Documentation.LongDescription": "傳回不會分隔，而會將其引數以單一元素清單形式傳回的函數。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "傳回函數，這個函數會在空白字元處，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會在空白字元處，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "以空格字元分割輸入，將引號與其他字元一樣處理。",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "根據指定的群組和資料行數目，將資料表分割成資料表清單。",
        "Documentation.LongDescription": "根據 <code>column</code> 的值和 <code>hash</code> 函數，將 <code>table</code> 分割成 <code>groups</code> 份資料表的清單。\r\n    <code>hash</code> 函數會套用至 <code>column</code> 資料列的值，以便取得該資料列的雜湊值。雜湊值模數 <code>groups</code> 會決定要將該資料列放入哪些傳回的資料表中。\r\n    <ul>\r\n       <li><code>table</code>: 要分割的資料表。</li>\r\n       <li><code>column</code>: 要雜湊處理的資料行，以便決定該資料列會位於哪些傳回的資料表中。</li>\r\n       <li><code>groups</code>: 輸入資料表即將分割成為的資料表數目。</li>\r\n       <li><code>hash</code>: 套用以取得雜湊值的函數。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "使用資料行的值做為雜湊函數，針對資料行 [a]，將資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 分割成 2 份資料表。",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "傳回 <code>text</code> 在指定的 <code>startDelimiter</code> 和 <code>endDelimiter</code> 之間的部分。\r\n    選擇性的數字 <code>startIndex</code>，表示應考量哪些 <code>startDelimiter</code> 的出現處。\r\n    選擇性的清單 <code>startIndex</code>，表示應考量哪些 <code>startDelimiter</code> 的出現處，以及編製索引時應從輸入的開頭或結尾開始進行。\r\n    <code>endIndex</code> 也很類似，但會以相對於 <code>startIndex</code> 的方式編製索引。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "取得 \"111 (222) 333 (444)\" 介於 (第一個) 左括弧與其後 (第一個) 右括弧之間的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "取得 \"111 (222) 333 (444)\" 介於第二個左括弧與其後第一個右括弧之間的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "取得 \"111 (222) 333 (444)\" 從結尾開始，介於第二個左括弧與其後第二個右括弧之間的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "將某個文字值插入另一個文字值的指定位置。",
        "Documentation.LongDescription": "傳回將文字值 <code>newText</code> 插入文字值 <code>text</code> 之位置 <code>offset</code> 的結果。位置從數字 0 開始。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "在 \"ABD\" 的 \"B\" 與 \"D\" 之間插入 \"C\"。",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "傳回新的隨機全域唯一識別碼 (GUID)。",
        "Documentation.LongDescription": "傳回新的隨機全域唯一識別碼 (GUID)。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "取代文字中所有出現的指定子字串。",
        "Documentation.LongDescription": "傳回以文字值 <code>new</code> 取代文字值 <code>text</code> 中所有出現之文字值 <code>old</code> 的結果。這個函數會區分大小寫。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "以 \"a\" 取代句子中每一個出現的 \"the\"。",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "移除某個範圍的字元並在指定的位置插入新的值。",
        "Documentation.LongDescription": "傳回從文字值 <code>text</code> 中移除一些字元 <code>count</code> (從位置 <code>offset</code> 開始)，然後在 <code>text</code> 中的相同位置插入文字值 <code>newText</code> 的結果。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "以新的文字值 \"CDE\" 取代文字值 \"ABGF\" 中位於位置 2 的單一字元。",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "將索引鍵加入至指定的資料表類型。",
        "Documentation.LongDescription": "將索引鍵加入至指定的資料表類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "傳回條件會接受的身分識別清單。",
        "Documentation.LongDescription": "<p>使用指定的 <code>identityProvider</code>，將 <code>condition</code> 轉換成身分識別清單。在識別提供者為 <code>identityProvider</code> 的情況下，<code>condition</code> 在所有授權內容中皆會針對這些身分識別傳回 <code>true</code>。如果無法將 <code>condition</code> 轉換為身分識別清單，就會引發錯誤。例如，<code>condition</code> 是查閱屬性來做出決定，而不是查閱使用者或群組身分識別。</p>\r\n    <p>請注意，身分識別清單代表的是以 <code>condition</code> 顯示，而且未經過正規化 (例如群組擴充) 的身分識別。</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "使用給定的壓縮類型壓縮二進位值。",
        "Documentation.LongDescription": "使用指定的壓縮類型壓縮二進位值。此呼叫的結果為輸入的壓縮副本。壓縮類型包括:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "壓縮二進位值。",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "使用指定的壓縮類型將二進位值解壓縮。",
        "Documentation.LongDescription": "使用指定的壓縮類型解壓縮二進位值。此呼叫的結果為輸入的解壓縮複本。壓縮類型包括:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "將二進位值解壓縮。",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "傳回二進位值從位移處開始的子集。",
        "Documentation.LongDescription": "傳回二進位值從位移 <code>binary</code> 開始的子集。選擇性參數 <code>offset</code> 會設定子集的長度上限。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "傳回二進位值從位移 6 開始的子集。",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "傳回二進位值從位移 6 長度為 2 開始的子集。",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "使用指定頁面大小將指定二進位分割為二進位清單。",
        "Documentation.LongDescription": "將 <code>binary</code> 分割為二進位清單，其中輸出清單的第一個元素是包含來自 \r\n    來源二進位的前 <code>pageSize</code> 個位元組的二進位，輸出清單的下一個元素是包含來自來源二進位中下一個 <code>pageSize</code> 位元組的二進位，以此類推。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "以使用者定義的處理常式來建立或擴充二進位以進行查詢及動作作業。",
        "Documentation.LongDescription": "<p>傳回 <code>binary</code> 的檢視，其中 <code>handlers</code> 所指定的函式可在將作業套用至檢視時，用於取代預設的作業行為。</p>\r\n<p>若有提供 <code>binary</code>，則所有處理常式函式都為選用項目。若未提供 <code>binary</code>，則 <code>GetStream</code> 處理常式函式為必要項目。若沒有為作業指定處理常式函式，就會改為將作業的預設行為套用至 <code>binary</code> (但在 <code>GetExpression</code> 的情況下除外)。</p>\r\n<p>處理常式函式傳回的值必須在語意上等同於對 <code>binary</code> (在 <code>GetExpression</code> 的情況下則為產生的檢視) 套用作業的結果。</p>\r\n<p>若處理常式函式引發錯誤，就會將預設的作業行為套用至檢視。</p>\r\n<p><code>Binary..View</code> 可用於實作摺疊資料來源 – 將 M 查詢轉譯成來源特定作業 (例如用以下載一個檔案區段)。</p>\r\n<p>如需更完整的 <code>Binary.View</code> 描述，請參閱已發佈的 Power Query 自訂連接器文件。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "建立不需要存取資料的基本檢視，以判斷長度。",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "傳回具有函數所指定位元組順序的二進位格式。",
        "Documentation.LongDescription": "傳回具有 <code>binaryFormat</code> 所指定位元組順序的二進位格式。預設位元組順序是 <code>ByteOrder.BigEndian</code>。",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "傳回二進位格式，此格式會根據已讀取的值選擇下一個二進位格式。",
        "Documentation.LongDescription": "傳回二進位格式，此格式會根據已讀取的值選擇下一個二進位格式。這個函數所產生的二進位格式值會分階段運作:<ul>\r\n<li>系統使用 <code>binaryFormat</code> 參數所指定的二進位格式讀取值。</li>\r\n<li>值傳遞到 <code>chooseFunction</code> 參數所指定的選擇函數。</li>\r\n<li>選擇函數檢查值，並傳回第二個二進位格式。</li>\r\n<li>系統使用第二個二進位格式讀取第二個值。</li>\r\n<li>如果指定了組合函數，第一個和第二個值會傳遞到組合函數，然後傳回結果值。</li>\r\n<li>如果未指定組合函數，則傳回第二個值。</li>\r\n<li>傳回第二個值。</li>\r\n</ul>選擇性的 <code>type</code> 參數指示選擇函數將會傳回的二進位格式類型。您可以指定 <code>type any</code>、<code>type list</code> 或 <code>type binary</code>。如果未指定 <code>type</code> 參數，即使用 <code>type any</code>。如果使用 <code>type list</code> 或 <code>type binary</code>，則系統可以傳回資料流 <code>binary</code> 或 <code>list</code> 值，而不是緩衝的值，這樣可以減少讀取格式所需的記憶體數量。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "讀取位元組清單，其項目數由第一個位元組決定。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "讀取位元組清單，其項目數由第一個位元組決定，而且會保留讀取的第一個位元組。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "讀取一連串位元組，其項目數由第一個位元組使用資料流清單來決定。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "傳回讀取一組項目的二進位格式。",
        "Documentation.LongDescription": "參數如下:\r\n<ul>\r\n<li><code>binaryFormat</code> 參數可指定索引鍵值的二進位格式。</li>\r\n<li><code>group</code> 參數可提供已知項目群組的相關資訊。</li>\r\n<li>選擇性的 <code>extra</code> 參數可用來指定函數，以針對跟在任何索引鍵之後的未預期值傳回二進位格式值。如果未指定 <code>extra</code> 參數，當發現未預期的索引鍵值時將會引發錯誤。</li>\r\n</ul>\r\n<code>group</code> 參數指定項目定義的清單。每個項目定義是包含 3-5 個值的清單，如下所示:\r\n<ul>\r\n<li>索引鍵值。對應至項目的索引鍵值。這在項目集合中必須是唯一的。</li>\r\n<li>項目格式。對應至項目值的二進位格式。這樣可讓每個項目有不同格式。</li>\r\n<li>項目發生次數。此項目預計會在群組中出現多少次的 <code>BinaryOccurrence.Type</code> 值。必要項目如果沒出現，會造成錯誤。必要或選擇性的重複項目都以類似未預期索引鍵值的方式處理。</li>\r\n<li>預設項目值 (選擇性)。如果預設項目值出現在項目定義清單中，而且不是 null，就不使用預設值，而改用它。重複或選擇性項目的預設值是 null，而重複值的預設值是空白清單 { }。</li>\r\n<li>項目值轉換 (選擇性)。如果項目值轉換函數出現在項目定義清單中，而且不是 null，系統會在項目值傳回之前呼叫它來轉換項目值。只有當項目出現在輸入中時，才會呼叫轉換函數 (絕不會以預設值呼叫它)。</li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "以下假設索引鍵值是一個位元組，群組中預期有 4 個項目，全部都是索引鍵後面接著一個位元組的資料。項目以下列方式出現在輸入中:\r\n<ul>\r\n<li>索引鍵 1 是必要項，它的確出現而且值是 11。</li>\r\n<li>索引鍵 2 重複，而且兩次出現的值都是 22，產生值 { 22, 22 }。</li>\r\n<li>索引鍵 3 是選擇性的，而且未出現，產生 Null 值。</li>\r\n<li>索引鍵 4 重複，但是未出現，產生 { } 值。</li>\r\n<li>索引鍵 5 不是群組的一部分，但是出現一次，值為 55。系統以索引鍵值 5 呼叫額外函數，並傳回對應到該值的格式 (BinaryFormat.Byte)。讀取值 55 並捨棄。</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "以下範例說明項目值轉換和預設項目值。索引鍵 1 的重複項目會使用 List.Sum 加總讀取的值清單。索引鍵 2 的選擇性項目具有預設值 123，而不是 Null。",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "傳回二進位格式，以限制可讀取的資料量。",
        "Documentation.LongDescription": "傳回二進位格式，其會限制可讀取的資料量。<code>BinaryFormat.List</code> 和 <code>BinaryFormat.Binary</code> 兩者都可以用來讀取到資料結尾。<code>BinaryFormat.Length</code> 可用來限制讀取的位元組數目。<code>binaryFormat</code> 參數會指定要限制的二進位格式。<code>length</code> 參數會指定要讀取的位元組數。<code>length</code> 參數可以是數值，也可以是二進位格式值，其指定顯示的長度值的格式，放在要讀取的值前面。",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "讀取位元組清單時，將讀取的位元組數限制為 2。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "讀取位元組清單時，將讀取的位元組數限制為清單前面的位元組值。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "傳回二進位格式，以轉換其他二進位格式讀取的值。",
        "Documentation.LongDescription": "傳回二進位格式，以轉換其他二進位格式讀取的值。<code>binaryFormat</code> 參數指定即將用來讀取值的二進位格式。系統會以讀取的值叫用 <code>function</code>，並傳回轉換的值。",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "讀取位元組，將它加一。",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "傳回使用 Ordinal 規則比較值的比較子函數。",
        "Documentation.LongDescription": "傳回比較子函數，此函數會使用序數規則來比較提供的值 <code>x</code> 和 <code>y</code>。<br>\r\n      <br>\r\n      比較子函數接受兩個引數，並根據第一個值小於、等於或大於秒數，傳回 -1、0 或 1。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 Ordinal 規則，比較 \"encyclopædia\" 和 \"encyclopaedia\" 是否相等。請注意，使用 <code>Comparer.FromCulture(\"en-US\")</code> 的結果為相等。",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "傳回不區分大小寫的比較子函數，該函數會使用序數規則來比較值。",
        "Documentation.LongDescription": "傳回不區分大小寫的比較子函數，此函數會使用序數規則來比較提供的值 <code>x</code> 和 <code>y</code>。<br>\r\n        <br>\r\n        比較函數會接受兩個引數，並根據第一個值小於、等於或大於第二個值，來傳回 -1、0 或 1。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用不區分大小寫的序數規則來比較 \"Abc\" 和 \"abc\"。請注意，使用 <code>Comparer.Ordinal</code> 時，\"Abc\" 小於 \"abc\"。",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "傳回維度屬性的屬性。",
        "Documentation.LongDescription": "傳回維度屬性 <code>attribute</code> 的屬性 <code>propertyName</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "傳回量值的屬性 (資料格屬性)。",
        "Documentation.LongDescription": "傳回量值 <code>measure</code> 的屬性 <code>propertyName</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 查詢來源",
        "Documentation.LongDescription": "定義用於執行 SQL 查詢的 Databricks 資料來源"
      },
      "ReturnType": "Databricks SQL 查詢",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 查詢來源",
        "Documentation.LongDescription": "定義用於執行 SQL 查詢的 Databricks 資料來源"
      },
      "ReturnType": "Databricks SQL 查詢",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "將日期加上指定的天數。",
        "Documentation.LongDescription": "傳回將 <code>datetime</code> 值 <code>dateTime</code> 加上 <code>numberOfDays</code> 天後所產生的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要加上天數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfDays</code>: 要加上的天數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將代表 5/14/2011 這個日期的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 5 天。",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "將日期加上指定的月數。",
        "Documentation.LongDescription": "傳回將 <code>datetime</code> 值 <code>dateTime</code> 加上 <code>numberOfMonths</code> 個月後所產生的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要加上月數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>numberOfMonths</code>: 要加上的月數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將代表 5/14/2011 這個日期的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 5 個月。",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "將代表 5/14/2011 08:15:22 AM 這個日期時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 18 個月。",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "將日期加上指定的季數。",
        "Documentation.LongDescription": "傳回將 <code>datetime</code> 值 <code>dateTime</code> 加上 <code>numberOfQuarters</code> 季後所產生的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要加上季數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfQuarters</code>: 要加上的季數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將代表 5/14/2011 這個日期的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 1 季。",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "將日期加上指定的週數。",
        "Documentation.LongDescription": "傳回將 <code>datetime</code> 值 <code>dateTime</code> 加上 <code>numberOfWeeks</code> 週後所產生的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要加上週數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfWeeks</code>: 要加上的週數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將代表 5/14/2011 這個日期的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 2 週。",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "將日期加上指定的年數。",
        "Documentation.LongDescription": "傳回將 <code>datetime</code> 值 <code>dateTime</code> 加上 <code>numberOfYears</code> 所產生的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要加上年數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>numberOfYears</code>: 要加上的年數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將代表 5/14/2011 這個日期的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 4 年。",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "將代表 5/14/2011 08:15:22 AM 這個日期時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值加 10 年。",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下幾天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>days</code>: 天數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的後一天是否是接下來的兩天。",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下幾月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>months</code>: 月數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的次月是否是接下來的兩個月。",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下幾季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>quarters</code>: 季數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的下一季是否是接下來的兩季。",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下幾週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>weeks</code>: 週數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的下一週是否是接下來的兩週。",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下幾年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>years</code>: 年數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的次年是否是接下來的兩年。",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上幾天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>·<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>days</code>: 天數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的前一天是否是之前的兩天。",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上幾月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>months</code>: 月數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的上一個月是否是之前的兩個月。",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上幾季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>quarters</code>: 季數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的上一個季度是否是之前的兩季。",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上幾週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾週發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>weeks</code>: 週數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的上一週是否是之前的兩週。",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上幾年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>years</code>: 年數。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "決定目前系統時間的前一年是否是之前的兩年。",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "將時區資訊新增至日期/時間值。",
        "Documentation.LongDescription": "將時區資訊新增至 <code>dateTime</code> 值中。時區資訊包括 <code>timezoneHours</code> 和 <code>timezoneMinutes</code> (選擇性)，它們指定與 UTC 時間的所需時差。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將時區設定為 UTC+7:30 (UTC 後 7 小時 30 分鐘)。",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的下幾小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>hours</code>: 小時數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一小時是否在接下來的兩小時中。",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的下幾分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>minutes</code>: 分鐘數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一分鐘是否在接下來的兩分鐘中。",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的下幾秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下幾秒發生。請注意，傳遞會在目前秒數發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>seconds</code>: 秒數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一秒是否在接下來的兩秒中。",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的前幾小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>hours</code>: 小時數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一小時是否在前兩小時中。",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的前幾分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>minutes</code>: 分鐘數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一分鐘是否在前兩分鐘中。",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的前幾秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>seconds</code>: 秒數。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一秒是否在前兩秒中。",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "變更值的時區。",
        "Documentation.LongDescription": "將 datetimezone 值 <code>dateTimeZone</code> 的時區資訊變更成 <code>timezoneHours</code> (及選擇性的 <code>timezoneMinutes</code>) 所提供的新時區資訊。\r\n    如果 <code>dateTimeZone</code> 沒有時區元件，則擲回例外狀況。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的時區資訊變更為 8 小時。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "將 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的時區資訊變更為 -30 分鐘。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "依名稱存取內嵌 mashup 中的值。",
        "Documentation.LongDescription": "依名稱存取內嵌 mashup 中的值。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "在使用單一清單引數的函式上建立具有特定參數簽章的函式",
        "Documentation.LongDescription": "使用一元函式 <code>function</code>，並建立類型為 <code>functionType</code> 的新函式，利用其引數建構清單，再將該新函式傳遞至 <code>function</code>。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "將 List.Sum 轉換為雙引數相加的函式",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "將使用清單的函式轉換為雙引數函式",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "叫用指定的函數",
        "Documentation.LongDescription": "使用指定的引數清單叫用指定的函數，然後傳回結果。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "使用一個引數 [A=1,B=2] 叫用 Record.FieldNames",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "在達到指定的持續時間之後，叫用指定的函數。",
        "Documentation.LongDescription": "經過持續時間 <code>delay</code> 之後，傳回叫用 <code>function</code> 的結果。",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "在向量函式之上建立純量函式，來批次處理多個引動過程。",
        "Documentation.LongDescription": "<p>傳回類型 <code>scalarFunctionType</code> 的純量函式，會以單一引數資料列叫用 <code>vectorFunction</code> 並傳回其單一輸出。此外，當純量函式反覆套用至 Table.AddColumn 等輸入資料表的各資料列時，<code>vectorFunction</code> 會改為只套用至所有輸入一次。</p>\r\n<p><code>vectorFunction</code> 會傳遞至資料行符合 <code>scalarFunctionType</code> 參數名稱與位置的資料表。此資料表的各資料列均包含呼叫一次純量函式的引數，以及與 <code>scalarFunctionType</code> 參數對應的資料行。</p>\r\n<p><code>vectorFunction</code> 必須傳回長度與輸入資料表相同的清單，其在各位置上的項目與在相同位置輸入資料列上的純量函式評估結果必須相同。</p>\r\n<p>輸入資料表應為串流輸出位置，因此 <code>vectorFunction</code> 的串流輸出與輸入在同一時間僅應適用於一個區塊。具體來說，<code>vectorFunction</code> 不得多次列舉其輸入資料表。</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "從組件建立代表地理點的記錄。",
        "Documentation.LongDescription": "從地理點的構成組件建立代表該點的記錄，例如經度、緯度，及高度 (Z) 和量值 (M) (若有的話)。若與預設值 (4326) 不同，則可以指定選擇性空間參考識別碼 (SRID)。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "從組件建立代表幾何點的記錄。",
        "Documentation.LongDescription": "從幾何點的構成組件建立代表該點的記錄，例如 X 座標、Y 座標，及 Z 座標和量值 (M) (若有的話)。若與預設值 (0) 不同，則可以指定選擇性空間參考識別碼 (SRID)。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "建立身分識別。",
        "Documentation.LongDescription": "建立身分識別。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "決定身分識別是否為身分識別集合的成員。",
        "Documentation.LongDescription": "決定身分識別是否為身分識別集合的成員。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "傳回由清單中所有奇數位移項目所組成的清單。",
        "Documentation.LongDescription": "傳回由清單中所有奇數位移項目所組成的清單。根據參數，交替接受和略過清單 <code>list</code> 中的值。\r\n    <ul>\r\n    <li><code>count</code>: 指定每次略過的值數目。</li>\r\n    <li><code>repeatInterval</code>: 選擇性的重複間隔可指出要在略過的值之間加入多少值。</li>\r\n    <li><code>offset</code>: 選擇性的位移參數可開始略過開頭位移處的值。</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "根據 {1..10} 建立清單，且略過第一個數字。",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "根據 {1..10} 建立清單，且略過每隔一個數字。",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "根據 {1..10} 建立清單，從 1 開始並略過每隔一個數字。",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "根據 {1..10} 建立清單，從 1 開始、略過一個值、保留兩個值，依此類推。",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "指出清單是否包含值。",
        "Documentation.LongDescription": "指出清單 <code>list</code> 是否包含值 <code>value</code>。\r\n    如果在清單中找到值，即傳回 True，否則傳回 False。您可指定選擇性的方程式條件值 <code>equationCriteria</code>，以控制等號比較測試。 ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 3。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 6。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "指出清單是否包含另一個清單中的所有值。",
        "Documentation.LongDescription": "指出清單 <code>list</code> 是否包含另一個清單 <code>values</code> 中的所有值。\r\n    如果在清單中找到值，即傳回 True，否則傳回 False。可指定選擇性的等式條件值 <code>equationCriteria</code>，以控制等號比較測試。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 3 和 4。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 5 和 6。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "指出清單是否包含另一個清單中的任何值。",
        "Documentation.LongDescription": "指出清單 <code>list</code> 是否包含另一個清單 <code>values</code> 中的任何值。\r\n        如果在清單中找到值，即傳回 True，否則傳回 False。可指定選擇性的等式條件值 <code>equationCriteria</code>，以控制等號比較測試。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 3 或 9。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 是否包含 6 或 7。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "傳回兩個數字清單之間的共變數。",
        "Documentation.LongDescription": "傳回兩個數字清單 <code>numberList1</code> 和 <code>numberList2</code> 之間的共變數。<code>numberList1</code> 和 <code>numberList2</code> 必須包含相同數目的 <code>number</code> 值。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "計算兩個清單之間的共變數。",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "傳回兩個指定清單的差異。",
        "Documentation.LongDescription": "傳回清單 <code>list1</code> 中不存在於清單 <code>list2</code> 的項目。支援重複的值。\r\n    您可指定選擇性的方程式條件值 <code>equationCriteria</code>，以控制等號比較測試。 ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3, 4, 5} 中未出現在 {4, 5, 3} 中的項目。",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "找出清單 {1, 2} 中不在 {1, 2, 3} 中的項目。",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "傳回包含指定之文字的值清單 (包括記錄欄位)。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中包含值 <code>text</code> 的值清單。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {\"a\", \"b\", \"ab\"} 中符合 \"a\" 的文字值。",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "指定要傳回的項目數或限定條件，以傳回清單中的第一組項目。",
        "Documentation.LongDescription": " <ul>\r\n  <li>如果指定了數字，最多傳回該數量的項目。</li>\r\n  <li>如果指定了條件，則傳回最初符合條件的所有項目。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {3, 4, 5, -1, 7, 8, 2} 中大於 0 的初始值。",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "如果清單中的所有值都符合條件函數，即傳回 True。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中的所有值都符合條件函數 <code>condition</code>，即傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "判斷清單 {11, 12, 13} 中是否所有值都大於 10。",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "判斷清單 {1, 2, 3} 中是否所有值都大於 10。",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "如果有任何值符合條件函數，即傳回 True。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中的任何值符合條件函數 <code>condition</code>，即傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {9, 10, 11} 中是否有任何值大於 10。",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2, 3} 中是否有任何值大於 10。",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "傳回清單中的最大值。必須指定要傳回的值數目或篩選條件。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中的最大值。\r\n    在資料列排序之後，可指定選擇性的參數進一步篩選結果。選擇性參數 <code>countOrCondition</code> 指定要傳回的值數目或篩選條件。選擇性參數 <code>comparisonCriteria</code> 指定清單中值的比較方式。\r\n <ul>\r\n        <li> <code>list</code>: 值清單。</li>\r\n        <li> <code>countOrCondition</code>: 如果指定了數字，就會依遞增順序傳回最多包含 <code>countOrCondition</code> 個項目的清單。如果指定了條件，就會傳回最初符合條件的項目清單。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n<li><code>comparisonCriteria</code>: [選擇性]<i></i> 可指定選擇性的 <code>comparisonCriteria</code> 值，以決定清單中項目的比較方式。如果這個參數是 null，則使用預設比較子。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "傳回清單中的最小值。可指定要傳回的值數目或篩選條件。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中的最小值。\r\n    參數 <code>countOrCondition</code> 指定要傳回的值數目或篩選條件。選擇性參數 <code>comparisonCriteria</code> 指定清單中值的比較方式。\r\n <ul>\r\n        <li> <code>list</code>: 值清單。</li>\r\n        <li> <code>countOrCondition</code>: 如果指定了數字，就會依遞增順序傳回最多包含 <code>countOrCondition</code> 個項目的清單。如果指定了條件，就會傳回最初符合條件的項目清單。一旦有項目不符合條件，就不再考慮其他項目。如果這個參數是 null，則傳回清單中一個最小的值。</li>\r\n<li><code>comparisonCriteria</code>: [選擇性]<i></i> 可指定選擇性的 <code>comparisonCriteria</code> 值，以決定清單中項目的比較方式。如果這個參數是 null，則使用預設比較子。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{3, 4, 5, -1, 7, 8, 2}</code> 中前 5 小的值。",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "已知初始值、計數和選擇性的遞增值，產生數字清單。",
        "Documentation.LongDescription": "已知初始值、計數和選擇性的遞增值，產生數字清單。預設遞增值是 1。\r\n<ul>\r\n   <li><code>start</code>: 清單中的初始值。</li>\r\n   <li><code>count</code>: 要建立的值數目。</li>\r\n   <li><code>increment</code>: <i></i>[選擇性] 做為遞增依據的值。如果省略值，則遞增 1。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "從 1 開始，產生 10 個連續數字的清單。",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "從 1 開始，產生 10 個數字的清單，每個後續數字遞增 2。",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "傳回一或多個對應到指定機率的樣本百分位數。",
        "Documentation.LongDescription": "傳回 <code>list</code> 清單的一或多個樣本百分位數。如果 <code>percentiles</code> 的值是介於 0.0 到 1.0 之間的數字，就會視為百分位數，而結果會是\r\n    對應到該機率的單一值。若 <code>percentiles</code> 值為數字清單，其值介於 0.0 到 1.0 之間，結果會是對應到輸入機率的百分位數清單。\r\n    進階使用者可使用 <code>options</code> 中的 PercentileMode 選項，挑選更明確的內插補點方法，但不建議用於大多數用途。\r\n    預先定義的符號 <code>PercentileMode.ExcelInc</code> 和 <code>PercentileMode.ExcelExc</code> 與 Excel 函式 <code>PERCENTILE.INC</code> 和 <code>PERCENTILE.EXC</code>\r\n    所使用的內插補點方法相符。預設行為與 <code>PercentileMode.ExcelInc</code> 相符。符號\r\n    <code>PercentileMode.SqlCont</code> 和 <code>PercentileMode.SqlDisc</code> 分別與 <code>PERCENTILE_CONT </code> 和\r\n    <code>PERCENTILE_DISC</code> 的 SQL Server 行為相符。\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{5, 3, 1, 7, 9}</code> 的第一四分位數。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "使用與 Excel <code>PERCENTILE.EXC</code> 相符的內插補點方法，尋找 <code>{5, 3, 1, 7, 9}</code> 清單的四分位數。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "傳回清單中值的位移。",
        "Documentation.LongDescription": "傳回值 <code>value</code> 在清單 <code>list</code> 中出現的位移。如果值未出現，則傳回 -1。\r\n    可指定選擇性的出現次數參數 <code>occurrence</code>。\r\n<ul>\r\n   <li><code>occurrence</code>: 要回報的最大出現次數。</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "找出值 3 在清單 {1, 2, 3} 中出現的位置。",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "傳回清單中值的第一個位移。",
        "Documentation.LongDescription": "傳回清單 <code>values</code> 中某值第一次出現在清單 <code>list</code> 中的位移。如果找不到發生次數，則傳回 -1。\r\n    可指定選擇性的出現次數參數 <code>occurrence</code>。\r\n<ul>\r\n   <li><code>occurrence</code>: 可傳回的最大發生次數。</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "找出值 2 或 3 在清單 {1, 2, 3} 中第一次出現的位置。",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "傳回清單從位移處開始的子集。",
        "Documentation.LongDescription": "傳回清單從位移 <code>list</code> 開始的子集。選擇性的參數 <code>offset</code> 可設定子集中的最大項目數目。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出數字 1 到 10 的清單中從位移 6 開始的子集。",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "找出數字 1 到 10 的清單中從位移 6 開始、且長度 2 的子集。",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "從 list1 中移除出現在清單中的項目。",
        "Documentation.LongDescription": "從 <code>list1</code> 中移除 <code>list2</code> 中指定之值的所有出現次數。如果 <code>list2</code> 中的值不存在 <code>list1</code> 中，則傳回原始清單。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "從清單 {1, 2, 3, 4, 2, 5, 5} 中移除清單 {2, 4, 6} 中的項目。",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "移除輸入值的所有發生次數。",
        "Documentation.LongDescription": "從清單 <code>list1</code> 中移除 <code>list2</code> 中指定之值的所有出現次數。如果 <code>list2</code> 中的值不存在 <code>list1</code> 中，則傳回原始清單。\r\n    可指定選擇性的等式條件值 <code>equationCriteria</code>，以控制等號比較測試。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "根據 {1, 2, 3, 4, 5, 5} 建立不含 {1, 5} 的清單。",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "從指定的位置開始，移除某計數的值。",
        "Documentation.LongDescription": "從指定的位置 <code>index</code> 開始，移除 <code>list</code> 中的 <code>count</code> 個值。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "從索引 4 開始，移除清單 {1, 2, 3, 4, -6, -2, -1, 5} 中的 3 個值。",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "傳回清單，此清單是將原始清單重複計數 (count) 次。",
        "Documentation.LongDescription": "傳回清單，此清單是將原始清單 <code>list</code> 重複 <code>count</code> 次。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "建立將 {1, 2} 重複 3 次的清單。",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "套用 { old, new } 的每個取代。",
        "Documentation.LongDescription": "對清單 <code>list</code> 執行指定的取代。取代作業 <code>replacements</code> 是由清單中提供的兩個值 (舊值和新值) 清單組成。\r\n    可指定選擇性的等式條件值 <code>equationCriteria</code>，以控制等號比較測試。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "根據 {1, 2, 3, 4, 5} 建立清單，並將值 5 以 -5 取代，值 1 則以 -1 取代。",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "傳回符合條件的值清單。",
        "Documentation.LongDescription": "根據清單 <code>list</code> 傳回符合選取條件 <code>selection</code> 的值清單。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, -3, 4, 9, -2} 中大於 0 的值。",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "將指定的清單分割為一組使用特定頁面大小的清單。",
        "Documentation.LongDescription": "將 <code>list</code> 分割成一組清單，其中輸出清單的第一個元素包含來自來源清單前 <code>pageSize</code> 元素的清單，\r\n輸出清單的下一個元素則是包含來自來源清單接下來 <code>pageSize</code> 個元素的清單，以此類推。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "傳回根據此清單所導出的新值清單。",
        "Documentation.LongDescription": "對清單 <code>list</code> 套用轉換函數 <code>transform</code>，以傳回新的值清單。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "將清單 {1, 2} 中的每個值加 1。",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "傳回兩個數字相除的反正切值。",
        "Documentation.LongDescription": "傳回 <code>y</code> 和 <code>x</code> 這兩個數字相除的反正切值。除式列為 <code>y</code>/<code>x</code>。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "傳回在兩個輸入之間執行位元 \"And\" 運算的結果。",
        "Documentation.LongDescription": "傳回在 <code>number1</code> 和 <code>number2</code> 之間執行位元 \"And\" 運算的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "傳回在兩個輸入之間執行位元 \"Or\" 的結果。",
        "Documentation.LongDescription": "傳回在 <code>number1</code> 和 <code>number2</code> 之間執行位元 \"Or\" 的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "將一組位元向左移。",
        "Documentation.LongDescription": "傳回對 <code>number1</code> 執行位元左移指定位元數 <code>number2</code> 的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "將一組位元向右移。",
        "Documentation.LongDescription": "傳回對 <code>number1</code> 執行位元右移指定位元數 <code>number2</code> 的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "傳回在兩個輸入之間執行位元 \"XOR\" (互斥 OR) 的結果。",
        "Documentation.LongDescription": "傳回在 <code>number1</code> 和 <code>number2</code> 之間執行位元 \"XOR\" (互斥 OR) 的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "傳回唯一組合的數目。",
        "Documentation.LongDescription": "根據項目清單 <code>setSize</code>，傳回指定之組合大小 <code>combinationSize</code> 的唯一組合數目。\r\n<ul>\r\n    <li><code>setSize</code>: 清單中的項目數目。</li>\r\n    <li><code>combinationSize</code>: 每個組合中的項目數目。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出總共 5 個項目中 3 個一組的所有組合數。",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "將兩個數字相除，然後傳回結果的整數部分。",
        "Documentation.LongDescription": "將數字 <code>number1</code> 除以另一個數字 <code>number2</code>，然後傳回結果的整數部分。\r\n    如果 <code>number1</code> 或 <code>number2</code> 是 Null，<code>Number.IntegerDivide</code> 會傳回 Null。\r\n      <ul>\r\n        <li><code>number1</code>: 被除數。</li>\r\n        <li><code>number2</code>: 除數。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "將 6 除以 4。",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "將 8.3 除以 3。",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "執行兩個數字的整數除法，然後傳回餘數。",
        "Documentation.LongDescription": "傳回 <code>number</code> 除以 <code>divisor</code> 的整數除法所產生的餘數。\r\n    如果 <code>number</code> 或 <code>divisor</code> 是 Null，<code>Number.Mod</code> 會傳回 Null。\r\n      <ul>\r\n        <li><code>number</code>: 被除數。</li>\r\n        <li><code>divisor</code>: 除數。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出 5 除以 3 的餘數。",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "傳回排列數。",
        "Documentation.LongDescription": "依據指定的排列大小 <code>permutationSize</code>，傳回可從項目數 <code>setSize</code> 產生的排列數。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出總共 5 個項目中 3 個一組的排列數。",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "求數字的指定次方。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的 <code>power</code> 次方結果。 \r\n    如果 <code>number</code> 或 <code>power</code> 是 Null，<code>Number.Power</code> 會傳回 Null。\r\n      <ul>\r\n        <li><code>number</code>: 底數。</li>\r\n        <li><code>power</code>: 指數。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出值 5 的 3 次方 (5 的立方)。",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "傳回兩個數字之間的亂數。",
        "Documentation.LongDescription": "傳回 <code>bottom</code> 到 <code>top</code> 之間的亂數。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "取得 1 到 5 之間的亂數。",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "傳回記錄中指定欄位的值。",
        "Documentation.LongDescription": "傳回 <code>record</code> 中指定 <code>field</code> 的值。如果找不到欄位，則擲回例外狀況。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出記錄中 \"CustomerID\" 欄位的值。",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "傳回記錄中指定欄位的值，如果找不到，則傳回預設值。",
        "Documentation.LongDescription": "傳回記錄 <code>record</code> 中指定欄位 <code>field</code> 的值。如果找不到欄位，則傳回選擇性的 <code>defaultValue</code>。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出記錄中 \"Phone\" 欄位的值，如果該欄位不存在，則傳回 Null。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "找出記錄中 \"Phone\" 欄位的值，如果該欄位不存在，則傳回預設值。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "已知欄位值清單和一組欄位，傳回記錄。",
        "Documentation.LongDescription": "已知欄位值 <code>list</code> 和一組欄位，傳回記錄。<code>fields</code> 可以指定為文字值清單或記錄類型。如果欄位不是唯一的，則擲回錯誤。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "根據欄位值清單和欄位名稱清單，建立記錄。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "根據欄位值清單和記錄類型，建立記錄。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "指出記錄是否有指定的欄位。",
        "Documentation.LongDescription": "傳回邏輯值 (true 或 false)，以指出記錄 <code>record</code> 是否有 <code>fields</code> 中指定的欄位。\r\n    使用清單可指定多個欄位值。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "檢查記錄是否有 \"CustomerID\" 欄位。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "檢查記錄是否有 \"CustomerID\" 和 \"Address\" 欄位。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "從輸入記錄移除指定的欄位。",
        "Documentation.LongDescription": "傳回從輸入 <code>record</code> 中移除清單 <code>fields</code> 所指定之所有欄位的記錄。如果指定的欄位不存在，則擲回例外狀況。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "從記錄中移除 \"Price\" 欄位。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "從記錄中移除 \"Price\" 和 \"Item\" 欄位。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "以 { old, new } 的格式套用清單中的重新命名。",
        "Documentation.LongDescription": "將輸入 <code>record</code> 中的欄位重新命名為清單 <code>renames</code> 中指定的新欄位名稱之後，傳回記錄。如果有多個重新命名，可能會使用巢狀清單 ({ {old1, new1}, {old2, new2} }。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "將記錄中的 \"UnitPrice\" 欄位重新命名為 \"Price\"。",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "將記錄中的 \"UnitPrice\" 欄位重新命名為 \"Price\", 並將 \"OrderNum\" 重新命名為 \"OrderID\"。",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "將指定的欄位重新排列為新的順序。",
        "Documentation.LongDescription": "按照清單 <code>fieldOrder</code> 中指定的欄位順序重新排列 <code>record</code> 中的欄位之後，傳回記錄。欄位值會保存，而且 <code>fieldOrder</code> 中未列出的欄位會保留在原始位置。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "重新排列記錄中的欄位。",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "傳回只包含指定欄位的記錄。",
        "Documentation.LongDescription": "根據輸入 <code>record</code> 傳回只包含清單 <code>fields</code> 中指定之欄位的記錄。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "選取記錄中的 \"Item\" 和 \"Price\" 欄位。",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "套用指定的轉換之後，傳回記錄。",
        "Documentation.LongDescription": "將清單 <code>transformOperations</code> 中指定的轉換套用至 <code>record</code> 之後，傳回記錄。\r\n    一個或多個欄位可能會在指定的時間轉換。\r\n      <div>如果轉換單一欄位，<code>transformOperations</code> 就應該是包含兩個項目的清單。<code>transformOperations</code> 中的第一個項目會指定欄位名稱，而 <code>transformOperations</code> 中的第二個項目會指定要用於轉換的函數。例如 <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>如果轉換多個欄位，<code>transformOperations</code> 就應該是包含多份清單的清單，其中每個內部清單都是欄位名稱與轉換作業的配對。例如 <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "將 \"Price\" 欄位轉換成數字。",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "將 \"OrderID\" 與 \"Price\" 欄位轉換成數字。",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "傳回會根據一種字元至另一種字元的轉換，來將文字分割至文字清單的函式。{0} 及 {1} 參數可以是字元的清單，或是會接收字元並傳回 true/false 的函式。",
        "Documentation.LongDescription": "傳回會根據一種字元至另一種字元的轉換，來將文字分割至文字清單的函式。<code>before</code> 及 <code>after</code> 參數可以是字元的清單，或是會接收字元並傳回 true/false 的函式。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "每當大寫或小寫字母後面跟數位時，分割輸入。",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "將提供的 SQL 查詢轉換為 M 程式碼。此函式僅供內部使用。",
        "Documentation.LongDescription": "將提供的 <code>sql</code> 查詢轉換為 M 程式碼，並包含 <code>environment</code> 定義的可用識別碼。此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "將資料表中的指定資料行傳回成清單。",
        "Documentation.LongDescription": "將資料表 <code>table</code> 中 <code>column</code> 所指定的資料行傳回成清單。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表中 [Name] 資料行的值。",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "傳回符合指定類型的資料行名稱清單。",
        "Documentation.LongDescription": "傳回符合 <code>listOfTypes</code> 中指定類型的資料表 <code>table</code> 中資料行的名稱清單。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表中 Number.Type 類型的資料行名稱。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "指出指定的記錄是否顯示成資料表中的資料列。",
        "Documentation.LongDescription": "指出指定的記錄 <code>row</code> 是否顯示成 <code>table</code> 中的資料列。\r\n    可指定選擇性參數 <code>equationCriteria</code> 以控制資料表資料列之間的比較方式。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表是否包含資料列。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "判斷資料表是否包含資料列。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "在只比較 [Name] 資料行的情況下，判斷資料表是否包含資料列。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "指出所有指定的記錄是否都顯示成資料表中的資料列。",
        "Documentation.LongDescription": "指出記錄清單 <code>rows</code> 中所有指定的記錄是否都顯示成 <code>table</code> 中的資料列。\r\n    可指定選擇性參數 <code>equationCriteria</code> 以控制資料表資料列之間的比較方式。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "在只比較 [CustomerID] 資料行的情況下，判斷資料表是否包含所有資料列。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "判斷資料表是否包含所有資料列。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "指出任何指定的記錄是否都顯示成資料表中的資料列。",
        "Documentation.LongDescription": "指出記錄清單 <code>rows</code> 中任何指定的記錄是否都顯示成 <code>table</code> 中的資料列。\r\n    可指定選擇性參數 <code>equationCriteria</code> 以控制資料表資料列之間的比較方式。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 是否包含資料列 <code>[a = 1, b = 2]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "判斷資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 是否包含資料列 <code>[a = 1, b = 3]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "在單獨比較資料行 [a] 的情況下，判斷資料表 <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> 是否包含資料列 <code>[a = 1, b = 3]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "指出資料表是否包含指定的資料行。",
        "Documentation.LongDescription": "指出 <code>table</code> 是否包含指定的資料行 <code>columns</code>。如果資料表包含資料行，則傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表是否具有 [Name] 資料行。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "找出資料表是否具有 [Name] 和 [PhoneNumber] 資料行。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "指出資料表中的所有資料列是否都符合指定的條件。",
        "Documentation.LongDescription": "指出 <code>table</code> 中的所有資料列是否都符合指定的 <code>condition</code>。如果所有資料列都符合，則傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表中 [a] 資料行的所有資料列值是否都是偶數。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "找出資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中所有資料列值是否都是 [a = 1, b = 2]。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "指出資料表中的任何資料列是否都符合指定的條件。",
        "Documentation.LongDescription": "指出 <code>table</code> 中的任何資料列是否都符合指定的 <code>condition</code>。如果任何資料列都符合，則傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表 <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 中資料行 [a] 的任何資料列值是否都是偶數。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "判斷資料表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中任何資料列值是否都是 [a = 1, b = 2]。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "使用指定的準則傳回最大的資料列或預設值。",
        "Documentation.LongDescription": "指定 <code>comparisonCriteria</code> 之後，傳回 <code>table</code> 中最大的資料列。如果資料表是空的，就會傳回選擇性 <code>default</code> 值。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在資料表 <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 的資料行 [a] 中，尋找包含最大值的資料列。",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "在資料表 <code>({})</code> 的資料行 [a] 中，尋找包含最大值的資料列。如果是空的，則傳回 -1。",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "使用指定的準則傳回最小的資料列或預設值。",
        "Documentation.LongDescription": "指定 <code>comparisonCriteria</code> 之後，傳回 <code>table</code> 中最小的資料列。如果資料表是空的，就會傳回選擇性 <code>default</code> 值。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在資料表內的 [a] 資料行中，找出值最小的資料列。",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "在資料表內的 [a] 資料行中，找出值最小的資料列。如果是空的，則傳回 -1。",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "傳回資料列在資料表中的位置。",
        "Documentation.LongDescription": "傳回指定的 <code>table</code> 中第一次出現 <code>row</code> 的資料列位置。如果找不到發生次數，則傳回 -1。\r\n    <ul>\r\n       <li><code>table</code>: 輸入資料表。</li>\r\n       <li><code>row</code>: 要在資料表中尋找其位置的資料列。</li>\r\n       <li><code>occurrence</code>: [選擇性]<i></i> 指定要傳回的資料列出現次數。</li>\r\n       <li><code>equationCriteria</code>: [選擇性]<i></i> 控制資料表資料列之間的比較方式。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "尋找資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第一次出現 [a = 2, b = 4] 的位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "尋找資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第二次出現 [a = 2, b = 4] 的位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "尋找資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中出現 [a = 2, b = 4] 的所有位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "傳回任何指定之資料列在資料表中的位置。",
        "Documentation.LongDescription": "傳回 <code>table</code> 中第一次出現 <code>rows</code> 清單的資料列位置。如果找不到出現次數，則傳回 -1。\r\n    <ul>\r\n    <li><code>table</code>: 輸入資料表。</li>\r\n       <li><code>rows</code>: 要在資料表中尋找其位置的資料列清單。</li>\r\n       <li><code>occurrence</code>: [選擇性]<i></i> 指定要傳回的資料列出現次數。</li>\r\n       <li><code>equationCriteria</code>: [選擇性]<i></i> 控制資料表資料列之間的比較方式。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "尋找資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第一次出現 [a = 2, b = 4] 或 [a = 6, b = 8] 的位置。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "尋找資料表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> 中出現 [a = 2, b = 4] 或 [a = 6, b = 8] 的所有位置。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "將指定的資料表分割為一組使用特定頁面大小的資料表。",
        "Documentation.LongDescription": "將 <code>table</code> 分割成一組資料表，其中清單的第一個元素為包含來自來源資料表前 <code>pageSize</code> 個資料列的資料表，\r\n清單的下一個元素則是包含來自來源資料表接下來 <code>pageSize</code> 個資料列的資料表，以此類推。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將具有五個記錄的資料表分割為各擁有兩個記錄的資料表。",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "傳回清單，內含指定的前幾個計數資料列及其餘的資料列。",
        "Documentation.LongDescription": "傳回包含兩個資料表的清單: 一個資料表具有 <code>table</code> 的前 N 列 (由 <code>count</code> 所指定)，另一個資料表包含 <code>table</code> 的其餘資料列。\r\n\r\n如果產生之清單的資料表剛好按順序列舉一次，則函式只會列舉 <code>table</code> 一次。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表的前兩列，以及資料表的其餘資料列。",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "使用指定的轉換函數來轉換資料表的資料列。",
        "Documentation.LongDescription": "將<code>transform</code>作業套用至<code>table</code>中的每個資料列，以建立 <code>清單</code>。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "將資料表的列轉換成數字清單。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "將數值資料表的列轉換成文字記錄。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "傳回 <code>text</code> 在指定的 <code>delimiter</code> 之後的部分。\r\n    選擇性的數字 <code>index</code>，表示應考量哪些 <code>delimiter</code> 的出現處。\r\n    選擇性的清單 <code>index</code>，表示應考量哪些 <code>delimiter</code> 的出現處，以及編製索引時應從輸入的開頭或結尾開始進行。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "取得 \"111-222-333\" 在 (第一個) 連字號之後的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "取得 \"111-222-333\" 在第二個連字號之後的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "取得 \"111-222-333\" 從結尾開始，在第二個連字號之後的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "傳回位於指定位置的字元。",
        "Documentation.LongDescription": "傳回文字值 <code>text</code> 中位於位置 <code>index</code> 的字元。文字中的第一個字元位於位置 0。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "尋找字串 \"Hello, World\" 中位於位置 4 的字元。",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "傳回 <code>text</code> 在指定的 <code>delimiter</code> 之前的部分。\r\n    選擇性的數字 <code>index</code>，表示應考量哪些 <code>delimiter</code> 的出現處。\r\n    選擇性的清單 <code>index</code>，表示應考量哪些 <code>delimiter</code> 的出現處，以及編製索引時應從輸入的開頭或結尾開始進行。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "取得 \"111-222-333\" 在 (第一個) 連字號之前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "取得 \"111-222-333\" 在第二個連字號之前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "取得 \"111-222-333\" 從結尾開始，在第二個連字號之前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "傳回文字是否包含子字串。",
        "Documentation.LongDescription": "偵測 <code>text</code> 是否包含值 <code>substring</code>。如果找到值，則傳回 True。此函數不支援萬用字元或規則運算式。\r\n      <br>\r\n      <br>\r\n      選擇性引數 <code>comparer</code> 可用來指定不區分大小寫或文化特性與地區設定感知的比較。\r\n      公式語言中提供下列內建比較子:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用來執行區分大小寫的序數比較</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的序數比較</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "找出文字 \"Hello World\" 是否包含 \"Hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "找出文字 \"Hello World\" 是否包含 \"hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "使用不區分大小寫的比較子來尋找文字 \"Hello World\" 是否包含 \"hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "傳回文字的最後幾個字元。",
        "Documentation.LongDescription": "傳回 <code>text</code> 值，這是 <code>text</code> 值 <code>text</code> 的最後 <code>count</code> 個字元。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "取得文字 \"Hello, World\" 的最後 5 個字元。",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "指出文字是否以指定的值為結尾。",
        "Documentation.LongDescription": "指出指定的文字 <code>text</code> 是否以指定的值 <code>substring</code> 做為結尾。該指示區分大小寫。\r\n\r\n      <div>\r\n        <code>comparer</code> 是 <code>Comparer</code>，用來控制比較。比較子可用來提供不區分大小寫或文化特性與地區設定感知的比較。\r\n      </div>\r\n      <div>\r\n         公式語言中提供下列內建比較子:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用來執行精確序數比較</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的精確序數比較</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "檢查 \"Hello, World\" 是否以 \"world\" 為結尾。",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "檢查 \"Hello, World\" 是否以 \"World\" 為結尾。",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "從格式字串和引數傳回格式化文字。",
        "Documentation.LongDescription": "傳回從清單或記錄將 <code>arguments</code> 套用至格式字串 <code>formatString</code> 而建立的格式化文字。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "將數值清單格式化。",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "根據美國英文文化特性，將記錄中的不同資料類型格式化。",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "傳回特定長度以內的子字串。",
        "Documentation.LongDescription": "在位移 <code>start</code> 的位置傳回 <code>count</code> 個字元，或傳回一直到 <code>text</code> 的結尾。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "從索引 6 開始跨 5 個字元，尋找文字 \"Hello World\" 中的子字串。",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "從索引 6 開始到結尾，尋找文字 \"Hello World\" 中的子字串。",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "填補指定文字的結尾，藉以傳回指定長度的文字。",
        "Documentation.LongDescription": "在文字值 <code>text</code> 的結尾插入空格，藉以傳回填補至長度 <code>count</code> 的 <code>text</code> 值。\r\n    可使用選擇性字元 <code>character</code> 來指定用於填補的字元。預設填補字元是空格。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "填補文字值的結尾，使其長度達到 10 個字元。",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "以 \"|\" 填補文字值的結尾，使其長度達到 10 個字元。",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "填補指定文字的開頭，藉以傳回指定長度的文字。",
        "Documentation.LongDescription": "在文字值 <code>text</code> 的開頭插入空格，藉以傳回填補至長度 <code>count</code> 的 <code>text</code> 值。\r\n    可使用選擇性字元 <code>character</code> 來指定用於填補的字元。預設填補字元是空格。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "填補文字值的開頭，使其長度達到 10 個字元。",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "以 \"|\" 填補文字值的開頭，使其長度達到 10 個字元。",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "傳回值的第一個位置 (如果找不到，則傳回 -1)。",
        "Documentation.LongDescription": "傳回在 <code>text</code> 中，指定的文字值 <code>substring</code> 出現位置。\r\n    選用參數 <code>occurrence</code> 可用來指定要傳回的出現位置 (預設是第一次出現的位置)。\r\n    如果找不到 <code>substring</code>，則傳回 -1。\r\n\r\n      <div>\r\n        <code>comparer</code> 是 <code>Comparer</code>，可用來控制比較。比較子可用來提供不區分大小寫或文化特性與地區設定感知的比較。\r\n      </div>\r\n      <div>\r\n        公式語言中提供下列內建比較子:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用來執行精確序數比較</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的精確序數比較</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "取得文字 \"Hello, World! Hello, World!\" 中第一次出現 \"World\" 的位置。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "取得 \"Hello, World! Hello, World!\" 中最後一次出現 \"World\" 的位置。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "傳回文字值中任何列出字元的第一個位置 (如果找不到，則傳回 -1)。",
        "Documentation.LongDescription": "傳回清單 <code>characters</code> 中在 <code>text</code> 中找到的任何字元的第一個位置。\n    選擇性參數 <code>occurrence</code> 可用於指定要傳回的發生位置。",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "在文字「Hello, World!」中尋找「W」或「H」的第一個位置。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "在文字「Hello World!」中尋找「W」或「H」的所有位置。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "傳回在位移處找到的子字串。",
        "Documentation.LongDescription": "傳回在位移 <code>offset</code> 處從文字 <code>text</code> 找到的子字串。\r\n    可包含選擇性參數 <code>count</code> 以指定要傳回的字元數。若沒有足夠的字元，則會擲回錯誤。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "從索引 6 開始，尋找文字 \"Hello World\" 中的子字串。",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "從索引 6 開始橫跨 5 個字元，尋找文字 \"Hello World Hello\" 中的子字串。",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "從輸入文字值中移除所有出現的指定字元或字元清單。",
        "Documentation.LongDescription": "傳回文字值 <code>text</code> 的複本，並移除 <code>removeChars</code> 的所有字元。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "從文字值中移除 , 和 ; 字元。",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "從指定的位移開始，移除某個數目的字元。",
        "Documentation.LongDescription": "傳回文字值 <code>text</code> 的複本，並移除位置 <code>offset</code> 的所有字元。\r\n    可使用選擇性參數 <code>count</code> 來指定要移除的字元數。<code>count</code> 的預設值為 1。位置值從 0 開始。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "從文字值 \"ABEFC\" 中移除位於位置 2 的 1 個字元。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "從位置 2 開始，移除文字值 \"ABEFC\" 中的兩個字元。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "傳回由輸入文字重複指定次數所組成的文字值。",
        "Documentation.LongDescription": "傳回由輸入文字 <code>text</code> 重複 <code>count</code> 次所組成的文字值。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "將文字 \"a\" 重複五次。",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "將文字 \"helloworld\" 重複三次。",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "從輸入文字值中選取所有出現的指定字元或字元清單。",
        "Documentation.LongDescription": "傳回文字值 <code>text</code> 的複本，並移除不在 <code>selectChars</code> 內的所有字元。  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "從文字值中選取在 'a' 到 'z' 範圍中的所有字元。",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "根據指定的分隔符號，將文字分割成文字值的清單。",
        "Documentation.LongDescription": "傳回文字值的清單，這是根據指定的分隔符號 <code>separator</code> 分割文字值 <code>text</code> 所產生的結果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "根據 \"|\" 分隔的文字值 \"Name|Address|PhoneNumber\" 建立清單。",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "傳回文字值的清單 (在分隔符號中的任何字元處分割)。",
        "Documentation.LongDescription": "傳回文字值的清單，這是根據指定之分隔符號 <code>separators</code> 中的任何字元分割文字值 <code>text</code> 所產生的結果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "根據文字值 \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\" 建立清單。",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "傳回文字的開頭。",
        "Documentation.LongDescription": "將 <code>text</code> 的前 <code>count</code> 個字元傳回成文字值。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "取得 \"Hello, World\" 的前 5 個字元。",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "指出文字是否以指定的值為開頭。",
        "Documentation.LongDescription": "若文字值 <code>text</code> 的開頭為文字值 <code>substring</code>，則傳回 true。\r\n      <ul>\r\n        <li><code>text</code>: <i></i> 要搜尋的 <code>text</code> 值</li>\r\n        <li><code>substring</code>: <i></i> 要在 <code>substring</code> 中搜尋其子字串的 <code>text</code> 值</li>\r\n        <li><code>comparer</code>: <i>[選擇性]</i> <code>Comparer</code>，用於控制比較。例如，<code>Comparer.OrdinalIgnoreCase</code> 可用來執行不區分大小寫的搜尋</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> 是 <code>Comparer</code>，可用來控制比較。比較子可用來提供不區分大小寫的比較或文化特性感知與地區設定的比較。\r\n      </div>\r\n      <div>\r\n        公式語言中提供下列內建比較子:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用來執行精確序數比較</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用來執行不區分大小寫的精確序數比較</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用來執行文化特性感知的比較</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "檢查文字 \"Hello, World\" 是否以文字 \"hello\" 為開頭。",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "檢查文字 \"Hello, World\" 是否以文字 \"Hello\" 為開頭。",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "使用特定的參數和傳回類型條件約束，傳回代表函數的類型。",
        "Documentation.LongDescription": "從 <code>signature</code> 建立叫用函數所需的 <code>function type</code>、<code>ReturnType</code> 記錄和 <code>Parameters</code> 以及 <code>min</code>，與最少數目的引數。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "為使用名為 X 之數字參數的函式建立類型並傳回數字。",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "使用欄位的特定類型條件約束，傳回代表記錄的類型。",
        "Documentation.LongDescription": "使用欄位的特定類型條件約束，傳回代表記錄的類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "動態產生資料表類型。",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "決定第一個類型的值是否與第二個類型始終相容。",
        "Documentation.LongDescription": "決定 <code>type1</code> 的值是否與 <code>type2</code> 始終相容。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "判斷類型數值的值是否也會永遠也被視為類型 Any。",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "判斷類型 Any 的值是否也會永遠也被視為類型數值。",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "取代類型的 Facet。",
        "Documentation.LongDescription": "以記錄 <code>facets</code> 中所含的 Facet 取代 <code>type</code> 的 Facet。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "傳回新的資料表類型，並以指定的索引鍵清單取代所有所有索引鍵。",
        "Documentation.LongDescription": "傳回以指定的索引鍵清單取代所有索引鍵的新資料表類型。<br>\r\n    <br>\r\n    每個索引鍵都是使用下列格式的記錄來定義:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 定義索引鍵的資料行名稱清單\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 如果索引鍵是資料表的主索引鍵，則為 <code>true</code>; 否則為 <code>false</code>\r\n      </li>\r\n    </ul>\r\n    指定的索引鍵清單會經過驗證，以確保只定義一個主索引鍵，而且資料表類型有所有索引鍵資料行名稱。\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "取代資料表類型的索引鍵資訊。",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "清除先前為資料表類型定義的索引鍵資訊。",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "傳回資料表中資料行的類型。",
        "Documentation.LongDescription": "傳回資料表類型 <code>tableType</code> 中資料行 <code>column</code> 的類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "傳回結合輸入基底 URI 與相對 URI 的絕對 URI。",
        "Documentation.LongDescription": "傳回結合輸入 <code>baseUri</code> 與 <code>relativeUri</code> 的絕對 URI。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "傳回兩個值的總和。",
        "Documentation.LongDescription": "傳回 <code>value1</code> 與 <code>value2</code> 的總和。可指定選擇性 <code>precision</code> 參數，預設使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "如果值與指定的類型相容，則傳回值。",
        "Documentation.LongDescription": "如果值與指定的類型相容，則傳回值。這相當於 M 中的「is」運算子，例外狀況是它可以接受識別碼類型參考，例如 Number.Type。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "將數字轉換為數字。",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "嘗試將文字值轉換成數字。",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "根據第一個值小於、等於或大於第二個值，傳回 -1、0 或 1。",
        "Documentation.LongDescription": "根據第一個值小於、等於或大於第二個值，傳回 -1、0 或 1。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "傳回第一個值除以第二個值的結果。",
        "Documentation.LongDescription": "傳回 <code>value1</code> 除以 <code>value2</code> 的結果。可指定選擇性 <code>precision</code> 參數，預設使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "傳回兩個值是否相等。",
        "Documentation.LongDescription": "如果值 <code>value1</code> 等於值 <code>value2</code>，則傳回 true，否則傳回 false。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "決定值是否與指定的類型相容。",
        "Documentation.LongDescription": "決定值是否與指定的類型相容。這相當於 M 中的「is」運算子，例外狀況是它可以接受識別碼類型參考，例如 Number.Type。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "比較判斷數字是否與類型數值相容的兩種方式。",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "傳回兩個值的乘積。",
        "Documentation.LongDescription": "傳回 <code>value1</code> 乘以 <code>value2</code> 的乘積。可指定選擇性 <code>precision</code> 參數，預設使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "依據目標來評估查詢。",
        "Documentation.LongDescription": "<p>使用 <code>parameters</code> 中指定的參數與 <code>options</code> 中指定的選項，依據 <code>target</code> 來評估 <code>query</code>。</p>\r\n<p>查詢的輸出由 <code>target</code> 定義。</p>\r\n<p><code>target</code> 可為 <code>query</code> 描述的作業提供內容。</p>\r\n<p><code>query</code> 描述要對 <code>target</code> 執行的查詢。<code>query</code> 會以 <code>target</code> 特有的方式表示 (例如 T-SQL 陳述式)。</p>\r\n<p>選用的 <code>parameters</code> 值會因情況不同而包含清單或記錄，以提供 <code>query</code> 所需要的參數值。</p>\r\n<p>選用的 <code>options</code> 記錄包含的選項可能會影響依據 <code>target</code> 來評估 <code>query</code> 的行為。這些選項為 <code>target</code> 專用的選項。</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "傳回兩個值是否相等。",
        "Documentation.LongDescription": "如果任何一個引數 '<code>value1</code>', '<code>value2</code>' 是 Null，則傳回 Null，否則傳回 Value.Equals 的對等值。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "取代輸入的中繼資料資訊。",
        "Documentation.LongDescription": "取代輸入的中繼資料資訊。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "取代值的類型。",
        "Documentation.LongDescription": "將 <code>value</code>的類型取代為提供的 <code>type</code>。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "以更特定的類型取代記錄的預設類型。",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "傳回兩個值的差額。",
        "Documentation.LongDescription": "傳回 <code>value1</code> 與 <code>value2</code> 的差額。可指定選擇性 <code>precision</code> 參數，預設使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "建立動作，其執行時會傳回將 HTTP 要求當做二進位值執行的結果。",
        "Documentation.LongDescription": "建立動作，其在執行時會使用 HTTP 作為二進位值傳回針對 <code>url</code> 執行 <code>method</code> 要求的結果。\r\n    可提供選擇性記錄參數 <code>options</code> 以指定其他屬性。記錄可能包含下列欄位:\r\n    <ul>\r\n<li><code>Query</code> : 以程式設計方式將查詢參數新增至 URL 中，無須擔心逸出。</li>\r\n<li><code>ApiKeyName</code> : 若目標網站採用 API 金鑰的概念，則可使用此參數來指定 URL 中必須使用的金鑰參數名稱 (而非值)。系統會在認證中提供實際的金鑰值。</li>\r\n<li><code>Headers</code> : 將此值指定為記錄，會為 HTTP 要求提供其他標頭。</li>\r\n<li><code>Timeout</code> : 將此值指定為持續時間，會變更 HTTP 要求的逾時時間。預設值為 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 將此值指定為清單，會在計算快取資料時排除這些 HTTP 標頭金鑰。</li>\r\n<li><code>IsRetry</code> : 將此邏輯值指定為 true 時，會在擷取資料時忽略快取中的任何現有回應。</li>\r\n<li><code>ManualStatusHandling</code> : 將此值指定為清單，會防止針對回應具有以下任一狀態碼的 HTTP 要求進行任何內建處理。</li>\r\n<li><code>RelativePath</code> : 將此值指定為文字，會在提出要求前將其附加到基底 URL。</li>\r\n<li><code>Content</code> : 指定此值會使其內容成為 HTTP 要求的本文。</li>\r\n</ul>\r\n\r\n    <br>\r\n    請注意，此功能在大多數情况下是停用的。請考慮改用 Web.Contents 或 Web.Headers。\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "對 Bing 執行 GET 要求。",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "輸入與您的註冊相關聯的 Azure 企業版 REST API 端點 URL",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "傳回對 URL 呼叫的二進位結果，該 URL 是針對 Azure 企業版 API 所提供的。",
        "Documentation.Examples": [
          {
            "Description": "使用 AzureEnterprise.Contents 函數傳回特定報表的結果。",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "資料表"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "從 Azure 儲存體保存庫傳回指定 blob 的內容。",
        "Documentation.LongDescription": "從 Azure 儲存體保存庫傳回位於 URL <code>url</code> 的 blob 內容。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等候資料取用者前要讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>RequestSize</code> : 嘗試在伺服器單一 HTTP 要求中讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 選項可指定要平行發送的要求數目，以讓您更快速地下載資料，但會降低記憶體使用率。需要的記憶體為 (ConcurrentRequest * RequestSize)。預設值為 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "從 Azure Data Lake Storage 檔案系統傳回指定檔案的內容。",
        "Documentation.LongDescription": "從 Azure Data Lake Storage 檔案系統傳回位於 URL <code>url</code> 的檔案內容。可指定 <code>options</code> 來控制下列選項:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等候資料取用者前要讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>RequestSize</code> : 嘗試在伺服器單一 HTTP 要求中讀取的位元組數。預設值為 4 MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 選項可指定要平行發送的要求數目，以讓您更快速地下載資料，但會降低記憶體使用率。需要的記憶體為 (ConcurrentRequest * RequestSize)。預設值為 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "傳回二進位的近似長度。",
        "Documentation.LongDescription": "傳回 <code>binary</code> 中的近似長度，如果資料來源不支援近似長度，則傳回錯誤。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "取得二進位的近似長度。",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "將二進位值緩衝在記憶體中。",
        "Documentation.LongDescription": "將二進位值緩衝在記憶體中。這個呼叫的結果是穩定的二進位值，表示它會有確定的長度和位元組順序。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "建立二進位值的穩定版本。",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "結合二進位清單成為單個二進位。",
        "Documentation.LongDescription": "結合二進位清單成為單個二進位。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "根據指定的值建立二進位",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>binary</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Binary.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>binary</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>binary</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>binary</code> 值。如需詳細資料，請參閱 <code>Binary.FromText</code>。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"1011\"</code> 的 <code>binary</code> 值。",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "將數字清單轉換成二進位值。",
        "Documentation.LongDescription": "將數字清單轉換成二進位值。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "將文字格式的資料解碼成二進位。",
        "Documentation.LongDescription": "傳回將文字值 <code>text</code> 轉換成二進位 (<code>number</code> 清單) 的結果。您可指定 <code>encoding</code>，以表示文字值中使用的編碼方式。\r\n      下列 <code>BinaryEncoding</code> 值可用於 <code>encoding</code>。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 編碼</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 十六進位編碼</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "將 \"1011\" 解碼為二進位。",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "將 \"1011\" 解碼為十六進位編碼的二進位。",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "讀取二進位串流，並嘗試判斷串流的內容類型與格式資訊。",
        "Documentation.LongDescription": "傳回包含欄位 Content.Type 的記錄，其中包含了推斷的 MIME 類型。\r\n    若推斷的內容類型為 text/*，並偵測到了編碼字碼頁，會額外傳回欄位 Content.Encoding，其中包含資料流的編碼。\r\n    若推斷的內容類型為 text/csv 並為分隔格式，會額外傳回欄位 Csv.PotentialDelimiter，其中包含資料表以分析可能的分隔符號。\r\n    若推斷的內容類型為 text/csv 並為固定寬度格式，則會額外傳回 Csv.PotentialPositions，其中包含清單以分析可能的固定寬度資料行位置。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "傳回字元數。",
        "Documentation.LongDescription": "傳回字元數。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "將一個二進位值轉換成數字清單。",
        "Documentation.LongDescription": "將一個二進位值轉換成數字清單。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "將二進位資料解碼成文字格式。",
        "Documentation.LongDescription": "傳回將二進位數字清單 <code>binary</code> 轉換成文字值的結果。您可選擇指定 <code>encoding</code>，以表示產生的文字值中要使用的編碼方式\r\n      下列 <code>BinaryEncoding</code> 值可用於 <code>encoding</code>。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 編碼</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 十六進位編碼</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "建立已修改的錯誤記錄，在由檢視表定義的處理常式 (透過 Binary.View) 擲回時，不會觸發後援。",
        "Documentation.LongDescription": "從 <code>errorRecord</code> 建立已修改的錯誤記錄，在由檢視表定義的處理常式 (透過 Binary.View) 擲回時，不會觸發後援。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "建立可由檢視表定義的處理常式攔截的函式 (透過 Binary.View)。",
        "Documentation.LongDescription": "<p>根據可在 <code>Binary.View</code> 建立的檢視中所處理的 <code>function</code> 來建立檢視函式。</p>\r\n<p><code>Binary.View</code> 的 <code>OnInvoke</code> 處理常式可用於定義檢視函式的處理常式。</p>\r\n<p>如同內建作業的處理常式，若未指定 <code>OnInvoke</code> 處理常式，或其未處理檢視函式，或是該處理常式引發錯誤，則會將 <code>function</code> 套用至檢視頂端。</p>\r\n<p>如需更完整之 <code>Binary.View</code> 與自訂檢視函式的描述，請參閱已發佈的 Power Query 自訂連接器文件。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "一種二進位格式，可讀取使用 7 位元可變長度編碼方式編碼的 64 位元帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取使用 7 位元可變長度編碼方式編碼的 64 位元帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "一種二進位格式，可讀取使用 7 位元可變長度編碼方式編碼的 64 位元不帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取使用 7 位元可變長度編碼方式編碼的 64 位元不帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "一種二進位格式，可讀取 8 位元不帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 8 位元不帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "一種二進位格式，可讀取 .NET 16 位元組十進位值。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 .NET 16 位元組十進位值。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "一種二進位格式，可讀取 8 位元組 IEEE 雙精確度浮點值。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 8 位元組 IEEE 雙精確度浮點值。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "傳回二進位格式，以讀取項目序列並傳回清單。",
        "Documentation.LongDescription": "傳回二進位格式，以讀取項目序列並傳回 <code>list</code>。<code>countOrCondition</code> 參數指定每個項目的二進位格式。判斷讀取項目數的方法有三: <ul><li>如果未指定 <code>countOrCondition</code>，二進位格式會一直讀取到沒有其他任何項目為止。</li><li>如果 <code>countOrCondition</code> 是數字，二進位格式會讀取該數量的項目。</li><li>如果 <code>binaryFormat</code> 是函數，則針對讀取的每個項目叫用該函數。函數傳回 True 即繼續，傳回 False 則停止讀取項目。最後一個項目包含在清單中。</li><li>如果 <code>countOrCondition</code> 是二進位格式，則項目計數必須列在清單前面，系統會使用指定的格式讀取計數。</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "讀取位元組直到資料結尾。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "讀取兩個位元組。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "讀取位元組，直到位元組值大於或等於二。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "一種二進位格式，可讀取零個位元組並傳回 Null。",
        "Documentation.LongDescription": "一種二進位格式，可讀取零個位元組並傳回 Null。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "傳回讀取記錄的二進位格式。",
        "Documentation.LongDescription": "傳回讀取記錄的二進位格式。<code>record</code> 參數指定記錄的格式。記錄的每個欄位可以具有不同的二進位格式。如果欄位包含的值不是二進位格式值，則不讀取該欄位的資料，直接將欄位值傳到結果。",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "讀取包含一個 16 位元整數和一個 32 位元整數的記錄。",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "一種二進位格式，可讀取 16 位元帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 16 位元帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "一種二進位格式，可讀取 32 位元帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 32 位元帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "一種二進位格式，可讀取 64 位元帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 64 位元帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "一種二進位格式，可讀取 4 位元組 IEEE 單精確度浮點值。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 4 位元組 IEEE 單精確度浮點值。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "傳回讀取文字值的二進位格式。",
        "Documentation.LongDescription": "傳回會讀取文字值的二進位格式。<code>length</code> 會指定要解碼的位元組數，或長度的二進位格式，放在文字前面。選擇性的 <code>encoding</code> 值會指定文字的編碼。如果未指定 <code>encoding</code>，則會根據 Unicode 位元組順序標記判斷編碼。如果沒有位元組順序標記，則會使用 <code>TextEncoding.Utf8</code>。",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "將兩個位元組當成 ASCII 文字解碼。",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "將 ASCII 文字解碼，其中文字的位元組長度以位元組形式出現在文字前面。",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "一種二進位格式，可讀取 16 位元不帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 16 位元不帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "一種二進位格式，可讀取 32 位元不帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 32 位元不帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "一種二進位格式，可讀取 64 位元不帶正負號的整數。",
        "Documentation.LongDescription": "一種二進位格式，可讀取 64 位元不帶正負號的整數。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "從指定的值建立 8 位元整數。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 8 位元整數 <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Byte.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 8 位元整數範圍內且無任何小數點位數部分的 <code>number</code>，則會傳回 <code>value</code>。若有小數點位數部分，則會使用指定的四捨五入模式模式將該數字四捨五入。預設的四捨五入模式為 <code>RoundingMode.ToEven</code>。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 8 位元整數 <code>number</code> 值。",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 取得 <code>\"4.5\"</code> 的 8 位元整數 <code>number</code> 值。",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "將數字轉換成文字字元。",
        "Documentation.LongDescription": "傳回數字的同等字元。<br>\r\n    <br>\r\n    提供的 <code>number</code> 應該為 21 位元 Unicode 字碼元素。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "將數字轉換成其同等字元值。",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "將字元轉換成數字，然後再次轉換回來。",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "將「露齒笑的臉」表情符號的十六進位字碼元素轉換成其同等的 UTF-16 代理字組。",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "將字元轉換成其數值。",
        "Documentation.LongDescription": "傳回 <code>character</code> 的同等數字。<br>\r\n    <br>\r\n    結果會是由提供的字元或代理字組所代表的 21 位元 Unicode 字碼元素。\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "將字元轉換成其同等數值。",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "將「露齒笑的臉」表情符號的 UTF-16 代理字組轉換成其同等的十六進位字碼元素。",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "傳回函式，其會使用指定的分隔符號結合文字清單。",
        "Documentation.LongDescription": "傳回函數，此函數會使用指定的分隔符號將文字值清單結合成為單一文字值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用分號分隔符號合併文字值清單。",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "使用逗號分隔符號和 CSV 樣式引號將兩個資料行的文字合併。",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "傳回函式，其會使用一連串分隔符號結合文字清單。",
        "Documentation.LongDescription": "傳回函式，其會使用一連串分隔符號結合文字值清單為單一文字值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用一連串分隔符號結合文字值清單。",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "傳回函式，其會使用指定的長度結合文字清單。",
        "Documentation.LongDescription": "傳回函式，其會使用指定的長度結合文字值清單為單一文字值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "從每個輸入值擷取指定的字元數，以結合文字值清單。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "使用範本文字預先填入結果之後，擷取指定的字元數，以結合文字值清單。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "傳回函式，其會使用指定的輸出位置結合文字清單。",
        "Documentation.LongDescription": "傳回函式，其會使用指定的輸出位置結合文字值清單為單一文字值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "結合文字值的清單，方法是將其放在輸出中的指定位置。",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "傳回函式，其會使用指定的位置和長度結合文字清單。",
        "Documentation.LongDescription": "傳回函式，其會使用指定的位置和長度傳回結合文字值清單為單一文字值。Null 長度表示應包含整個文字值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用指定的輸出位置和長度結合文字值清單。",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "根據指定的文化特性和區分大小寫傳回比較子函數。",
        "Documentation.LongDescription": "傳回比較子函數，該函數會使用 <code>ignoreCase</code> 指定的 <code>culture</code> 和區分大小寫來執行比較。<br>\r\n      <br>\r\n      比較子函數會接受兩個引數，並根據第一個值小於、等於或大於秒而傳回 -1、0 或 1。<br>\r\n      <br>\r\n      <code>ignoreCase</code> 的預設值為 false。<code>culture</code> 應為 .NET framework 支援的其中一個地區設定 (例如 「en-US」)。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 \"en-US\" 地區比較  \"a\" 和 \"A\" 以判斷值是否相等。",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "使用 \"en-US\" 地區比較  \"a\" 和 \"A\"，忽略大小寫，以判斷值是否相等。",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "從成員屬性值傳回唯一成員識別碼。",
        "Documentation.LongDescription": "從成員屬性值傳回唯一成員識別碼。<code>attribute</code>。若為其他值，則傳回 Null。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "傳回屬性的索引鍵。",
        "Documentation.LongDescription": "傳回屬性 <code>property</code> 的索引鍵。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "從給定的值傳回貨幣值。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>currency</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Currency.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是貨幣範圍內的 <code>number</code>，則會將 <code>value</code> 的小數點位數部分四捨五入成 4 個小數位數並傳回。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。貨幣的有效範圍是 <code>-922,337,203,685,477.5808</code> 到 <code>922,337,203,685,477.5807</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。預設為 <code>RoundingMode.ToEven</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"1.23455\"</code> 的 <code>currency</code> 值。",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "使用 <code>RoundingMode.Down</code> 取得 <code>currency</code> 值 <code>\"1.23455\"</code>。",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "傳回日元件。",
        "Documentation.LongDescription": "傳回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值的日元件。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要從中擷取日元件的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得代表 5/14/2011 05:00:00 PM 這個日期時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值的日元件。",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "傳回數字 (從 0 到 6)，指出所提供值表示一週的哪一天。",
        "Documentation.LongDescription": "傳回數字 (從 0 到 6)，指出所提供 <code>dateTime</code> 表示一週的哪一天。\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>firstDayOfWeek</code>: <code>Day</code> 值，指出哪一天應視為一週的第一天。允許的值為 Day.Sunday、Day.Monday、Day.Tuesday、Day.Wednesday、Day.Thursday、Day.Friday 或 Day.Saturday。若未指定，則會根據文化特性使用預設。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將星期日視為一週的第一天，取得 2011 年 2 月 21 日星期一代表一週的哪一天。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "將星期一視為一週的第一天，取得 2011 年 2 月 21 日星期一代表一週的哪一天。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "傳回星期幾名稱。",
        "Documentation.LongDescription": "傳回所提供 <code>date</code> 的星期幾名稱。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得星期幾名稱。",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "傳回 1 到 366 的數字，代表一年中的一天。",
        "Documentation.LongDescription": "傳回數字，代表提供的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 是一年中的哪一天。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 3 月 1 日那一年中的一天。",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "傳回 28 到 31 的數字，指出當月天數。",
        "Documentation.LongDescription": "傳回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 中當月的天數。\r\n <ul>\r\n        <li><code>dateTime</code>: 要傳回當月天數的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 01)></code> 所表示的 12 月的天數。",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "傳回當日的結束時間。",
        "Documentation.LongDescription": "傳回以 <code>dateTime</code> 代表的每日結束時間。會保留時區資訊。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要用來計算每日結束時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得 5/14/2011 05:00:00 PM 這一天的結束。",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "取得 5/17/2011 05:00:00 PM -7:00 這一天的結束。",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "傳回月度結束時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的月度結束時間。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要用來計算月底的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得 5/14/2011 的月底。",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "取得 5/17/2011 05:00:00 PM -7:00 的月底。",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "傳回季度結束時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的季度結束時間。會保留時區資訊。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要用來計算季度結束時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:00 的季度結束時間。",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "傳回週度結束時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的週度結束時間。\r\n    這個函數可以接受選擇性的 <code>Day</code> <code>firstDayOfWeek</code>，以設定此相關計算中一週的第一天。預設值為 <code>Day.Sunday</code>。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要計算週度結束時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值</li>\r\n        <li><code>firstDayOfWeek</code>: [選擇性]<i></i> 代表一週第一天的 <code>Day.Type</code> 值。可能的值包括 <code>Day.Sunday</code>、<code>Day.Monday</code>、<code>Day.Tuesday</code>、<code>Day.Wednesday</code>、<code>Day.Thursday</code>、<code>Day.Friday</code> 和 <code>Day.Saturday.</code>。預設值是 <code>Day.Sunday</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得 5/14/2011 這一週的結尾。",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "取得 5/17/2011 05:00:00 PM -7:00 這一週的結尾，而且一週的第一天是星期日。",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "傳回年度結束時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的年度結束時間，包括小數秒數。時區資訊會保留。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要計算年度結束時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得 5/14/2011 05:00:00 PM 的年底。",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "取得 5/17/2011 05:00:00 PM -7:00 這一小時的結尾。",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "根據指定的值建立日期。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>date</code> 值。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。\r\n若指定的 <code>value</code> 是 <code>null</code>，則 <code>Date.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>date</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>date</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>date</code> 值。如需詳細資料，請參閱 <code>Date.FromText</code>。</li>\r\n        <li><code>datetime</code>: <code>value</code> 的日期元件。</li>\r\n        <li><code>datetimezone</code>: 等於 <code>value</code> 之本地日期時間的日期元件。</li>\r\n        <li><code>number</code>: <code>value</code> 所表示之 OLE Automation 日期對等日期時間的日期元件。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將 <code>43910</code> 轉換成 <code>date</code> 值。",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "將 <code>#datetime(1899, 12, 30, 06, 45, 12)</code> 轉換成 <code>date</code> 值。",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "根據本地、國際和自訂日期格式建立日期。",
        "Documentation.LongDescription": "以文字表示 (<code>text</code>) 建立 <code>date</code> 值。可能會提供選用的 <code>record</code> 參數 <code>options</code> 來指定其他屬性。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將導致盡量剖析日期。</li>\r\n   <li><code>Culture</code> 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 也可以是文字值。這與 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"2010-12-31\"</code> 轉換成 <code>date</code> 值。",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "在西曆中尋找對應於回曆 1400 年初的日期。",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "表示這個日期是否發生在當日 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在當日 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在當日。",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "表示這個日期是否發生在當月 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在當月 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在當月。",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "表示這個日期是否發生在當季 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在當季 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在當季。",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "表示這個日期是否發生在當週 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在當週 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在當週。",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "表示這個日期是否發生在目前年度 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在目前年度 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在目前年度。",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下一天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間後一日是否在下一日。",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下一月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間後一個月是否在下個月。",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下一季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間後一季是否在下一季。",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下一週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間後一週是否在下週。",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的下一年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間後一年是否在明年。",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上一天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上一天發生。請注意，傳遞會在當天發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間前一日是否在前一日。",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上一月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上一月發生。請注意，傳遞會在當月發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間前一月是否在上個月。",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上一季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾季發生。請注意，傳遞會在當季發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間前一季是否在上一季。",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上一週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上一週發生。請注意，傳遞會在當週發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間前一週是否在上週。",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "指出此日期是否會在以目前系統日期和時間決定的上一年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上一年發生。請注意，傳遞會在當年發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間前一年是否在去年。",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "表示這個日期是否發生在目前年度，而且在當天或之前 (由系統目前的日期和時間決定)。",
        "Documentation.LongDescription": "表示指定的 datetime 值 <code>dateTime</code> 是否發生在目前年度，而且在當天或之前 (由系統目前的日期和時間決定)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間是否在年初至今。",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "指出這個日期是否在閏年中。",
        "Documentation.LongDescription": "指出指定的 datetime 值 <code>dateTime</code> 是否在閏年中。\r\n <ul>\r\n        <li><code>dateTime</code>: 要評估的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷 <code>#date(2012, 01, 01)</code> 所代表的 2012 年是否為閏年。",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "傳回月元件。",
        "Documentation.LongDescription": "傳回提供的 <code>datetime</code> 值 <code>dateTime</code> 的月元件。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 #datetime(2011, 12, 31, 9, 15, 36) 中的月份。",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "傳回月份元件的名稱。",
        "Documentation.LongDescription": "傳回所提供 <code>date</code> 的月份元件名稱。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得月份名稱。",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "傳回數字，指出日期落在目前年度的哪一個季度。",
        "Documentation.LongDescription": "傳回 1 到 4 的數字，指出日期 <code>dateTime</code> 落在目前年度的哪一個季度。<code>dateTime</code> 可以是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 #date(2011, 12, 31) 這個日期落在目前年度的哪一個季度。",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "傳回該日的開始時間。",
        "Documentation.LongDescription": "傳回以 <code>dateTime</code> 代表的每日開始時間。\r\n    <code>dateTime</code> 必須是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:00 當日的開始時間。",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "傳回月度開始時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的月度開始時間。\r\n    <code>dateTime</code>必須是 <code>date</code> 或 <code>datetime</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:10:32 的月度開始時間。",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "傳回季度開始時間。",
        "Documentation.LongDescription": "傳回以 <code>dateTime</code> 代表的季度開始時間的值。\r\n    <code>dateTime</code> 必須是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:00 的季度開始時間。",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "傳回當週的開頭。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的週度開始時間。\r\n    <code>dateTime</code> 必須是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "尋找 2011 年 10 月 11 日星期二當週的開頭。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "尋找 2011 年 10 月 11 日星期二當週的開頭，使用星期一做為當週的開頭。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "傳回年度開始時間。",
        "Documentation.LongDescription": "傳回包含 <code>dateTime</code> 的年度開始時間。\r\n    <code>dateTime</code> 必須是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:10:32 的年度開始時間。",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "傳回一筆包含日期值各部分的記錄。",
        "Documentation.LongDescription": "傳回記錄，內含指定的 date 值 <code>date</code> 各部分。\r\n <ul>\r\n        <li><code>date</code>: 要將其各部分計算成記錄的 <code>date</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#date(2011, 12, 31)</code> 值轉換成包含日期值各部分的記錄。",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "傳回日期值的文字表示法。",
        "Documentation.LongDescription": "傳回以文字表示的 <code>date</code>。可能會提供選用的<code>record</code>參數 (<code>options</code>) 來指定其他屬性。<code>culture</code> 僅用於舊版工作流程。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將會導致使用 <code>Culture</code> 定義的預設將日期格式化。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 與 <code>culture</code> 也可以是文字值。這與 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#date(2010, 12, 31)</code> 轉換爲 <code>text</code> 值。<i>結果輸出可能因目前文化特性而有所不同。</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "在回曆中尋找對應於西曆 2000 年 1 月 1 日的年份。",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "傳回 1 到 6 的數字，指出這個日期落在一個月的哪一週。",
        "Documentation.LongDescription": "傳回 1 到 6 的數字，指出 <code>dateTime</code> 這個日期落在一個月的哪一週。\r\n <ul>\r\n        <li><code>dateTime</code>: 用來判斷當月哪一週的 <code>datetime</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷 3 月 15 日落在 2011 年的哪一週。",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "傳回 1 到 54 的數字，指出這個日期落在年度的哪一週。",
        "Documentation.LongDescription": "傳回介於 1 至 54 之間的數字，指出日期 <code>dateTime</code> 落在該年的哪一週。\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> 值決定該年哪一週。</li>\r\n        <li><code>firstDayOfWeek</code>: 選用的 <code>Day.Type</code> 值指出哪一天為新一週的起始日 (例如 <code>Day.Sunday</code>)。若未指定，會使用依文化特性決定的預設。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "判斷 2011 年中的哪一週包含 3 月 27 日。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "決定 2011 年 3 月 27 日落在該年的哪一週 ，使用星期一作為新一週的開始時間。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "傳回年元件。",
        "Documentation.LongDescription": "傳回提供的 <code>datetime</code> 值 <code>dateTime</code> 的年元件。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 #datetime(2011, 12, 31, 9, 15, 36) 中的年度。",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "傳回指定的 date、datetime 或 datetimezone 值的日期元件。",
        "Documentation.LongDescription": "傳回指定的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的日期元件。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "找出 #datetime(2010, 12, 31, 11, 56, 02) 的日期值。",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "根據指定的值建立 datetime。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>datetime</code> 值。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。\r\n若指定的 <code>value</code> 是 <code>null</code>，則 <code>DateTime.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>datetime</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>datetime</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>datetime</code> 值。如需詳細資料，請參閱 <code>DateTime.FromText</code>。</li>\r\n        <li><code>date</code>: <code>datetime</code> 以 <code>value</code> 為日期元件，並以 <code>12:00:00 AM</code> 為時間元件。</li>\r\n        <li><code>datetimezone</code>: 等於 <code>value</code> 的本地 <code>datetime</code>。</li>\r\n        <li><code>time</code>: <code>datetime</code> 以 <code>0</code> 的 OLE Automation 日期對等日期為日期元件，並以 <code>value</code> 為時間元件。</li>\r\n        <li><code>number</code>: <code>datetime</code> 包含 <code>value</code> 所表示的 OLE Automation 日期對等。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#time(06, 45, 12)</code> 轉換成 <code>datetime</code> 值。",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "將 <code>#date(1975, 4, 4)</code> 轉換成 <code>datetime</code> 值。",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "根據 64 位元長整數建立 datetime。",
        "Documentation.LongDescription": "根據 <code>fileTime</code> 值建立 <code>datetime</code> 值，然後將它轉換成本地時區。filetime 是一個 Windows 檔案時間值，代表國際標準時間從西元 1601 年 1 月 1 日午夜 12:00 起已經過的 100 奈秒間隔數。\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將 <code>129876402529842245</code> 轉換成 datetime 值。",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "根據本地和國際日期時間格式建立 datetimezone。",
        "Documentation.LongDescription": "以文字表示 (<code>text</code>) 建立 <code>datetime</code> 值。可能會提供選用的 <code>record</code> 參數 (<code>options</code>) 來指定其他屬性。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將導致盡量剖析日期。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 也可以是文字值。這與 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"2010-12-31T01:30:00\"</code> 轉換成 datetime 值。",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "將 <code>\"2010-12-31T01:30:00.121212\"</code> 轉換成 datetime 值。",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "將 <code>\"2010-12-31T01:30:00\"</code> 轉換成 datetime 值。",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "將 <code>\"20101231T013000\"</code> 轉換成 datetime 值。",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "指出這個 datetime 是否發生在目前的小時期間 (由系統目前的日期和時間判斷)。",
        "Documentation.LongDescription": "指出指定的 datetime 值 <code>dateTime</code> 是否發生在目前的小時期間 (由系統目前的日期和時間判斷)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前的系統時間是否在目前的小時中。",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "指出這個 datetime 是否發生在目前的分鐘期間 (由系統目前的日期和時間判斷)。",
        "Documentation.LongDescription": "指出指定的 datetime 值 <code>dateTime</code> 是否發生在目前的分鐘期間 (由系統目前的日期和時間判斷)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前的系統時間是否在目前的分鐘中。",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "指出這個 datetime 是否發生在目前的秒期間 (由系統目前的日期和時間判斷)。",
        "Documentation.LongDescription": "指出指定的 datetime 值 <code>dateTime</code> 是否發生在目前的秒期間 (由系統目前的日期和時間判斷)。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前的系統時間是否在目前的秒中。",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "出此日期時間是否會在以目前系統日期和時間決定的下小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一小時是否在下一小時中。",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的下分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一分鐘是否在下一分鐘中。",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的下一秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的下一秒發生。請注意，傳遞會在當秒發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的後一秒是否在下一秒中。",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的上小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上小時發生。請注意，傳遞會在目前小時發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一小時是否在前一小時中。",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的上分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上分鐘發生。請注意，傳遞會在目前分鐘發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一分鐘是否在前一分鐘中。",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "指出此日期時間是否會在以目前系統日期和時間決定的上一秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。",
        "Documentation.LongDescription": "指出指定的日期時間值 <code>dateTime</code> 是否會在以目前系統日期和時間決定的上幾秒發生。請注意，傳遞會在目前秒發生的值時，此函式會傳回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要評估的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "判斷目前系統時間的前一秒是否在前一秒中。",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "傳回指定之 datetime 值的時間部分。",
        "Documentation.LongDescription": "傳回指定之 datetime 值 <code>dateTime</code> 的時間部分。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "找出 #datetime(2010, 12, 31, 11, 56, 02) 的時間值。",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "傳回一筆包含 datetime 值各部分的記錄。",
        "Documentation.LongDescription": "傳回記錄，內含指定的 datetime 值 <code>dateTime</code> 各部分。\r\n <ul>\r\n        <li><code>dateTime</code>: 要從中計算其各部分記錄的 <code>datetime</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#datetime(2011, 12, 31, 11, 56, 2)</code> 值轉換成包含日期和時間值的記錄。",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "傳回 datetime 值的文字表示。",
        "Documentation.LongDescription": "傳回以文字表示的 <code>dateTime</code>。可能會提供選用的<code>record</code>參數 (<code>options</code>) 來指定其他屬性。<code>culture</code> 僅用於舊版工作流程。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將會導致使用 <code>Culture</code> 定義的預設將日期格式化。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 與 <code>culture</code> 也可以是文字值。這與 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#datetime(2010, 12, 31, 01, 30, 25)</code> 轉換爲 <code>text</code> 值。<i>結果輸出可能因目前文化特性而有所不同。</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "使用 ISO 8601 模式進行轉換。",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "根據指定的值建立 datetimezone。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>datetimezone</code> 值。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。\r\n若指定的 <code>value</code> 是 <code>null</code>，則 <code>DateTimeZone.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>datetimezone</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>datetimezone</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>datetimezone</code> 值。如需詳細資料，請參閱 <code>DateTimeZone.FromText</code>。</li>\r\n        <li><code>date</code>: <code>datetimezone</code> 以 <code>value</code> 為日期元件，以 <code>12:00:00 AM</code> 為時間元件而且時區差距對應到本地時區。</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> 以 <code>value</code> 為日期時間，而且時區差距對應到本地時區。</li>\r\n        <li><code>time</code>: <code>datetimezone</code> 以 <code>0</code> 的 OLE Automation 日期對等日期為日期元件，以 <code>value</code> 為時間元件，而且時區差距對應到本地時區。</li>\r\n        <li><code>number</code>: <code>datetimezone</code> 包含 <code>value</code> 所表示的 OLE Automation 日期對等日期，而且時區差距對應到本地時區。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"2020-10-30T01:30:00-08:00\"</code> 轉換成 <code>datetimezone</code> 值。",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "根據 64 位元長整數建立 datetimezone。",
        "Documentation.LongDescription": "根據 <code>fileTime</code> 值建立 <code>datetimezone</code> 值，然後將其轉換成本地時區。filetime 是一個 Windows 檔案時間值，代表國際標準時間從西元 1601 年 1 月 1 日午夜 12:00 起已經過的 100 奈秒間隔數。\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 <code>129876402529842245</code> 轉換成 datetimezone 值。",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "根據本地、國際和自訂 datetimezone 格式建立 datetimezone。",
        "Documentation.LongDescription": "以文字表示 (<code>text</code>) 建立 <code>datetimezone</code> 值。可能會提供選用的 <code>record</code> 參數 (<code>options</code>) 來指定其他屬性。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將導致盡量剖析日期。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 也可以是文字值。這與 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"2010-12-31T01:30:00-08:00\"</code> 轉換成 <code>datetimezone</code> 值。",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "使用 ISO 8601 進行轉換。",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "從指定的 datetimezone 值移除時區資訊。",
        "Documentation.LongDescription": "根據 <code>dateTimeZone</code> 傳回已移除時區資訊的 #datetime 值。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "從 #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) 值移除時區資訊。",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "將時區元件轉換成本地時區。",
        "Documentation.LongDescription": "將 datetimezone 值 <code>dateTimeZone</code> 的時區資訊變更為本地時區資訊。\r\n    如果 <code>dateTimeZone</code> 沒有時區元件，則加入本地時區資訊。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的時區資訊變更為本地時區 (假設為 PST)。",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "傳回一筆包含 datetimezone 值各部分的記錄。",
        "Documentation.LongDescription": "傳回記錄，內含指定的 datetimezone 值 <code>dateTimeZone</code> 各部分。\r\n <ul>\r\n        <li><code>dateTimeZone</code>: 要從中計算其各部分記錄的 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> 值轉換成包含日期、時間和時區值的記錄。",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "傳回 datetimezone 值的文字表示。",
        "Documentation.LongDescription": "傳回以文字表示的 <code>dateTimeZone</code>。可能會提供選用的<code>record</code>參數 (<code>options</code>) 來指定其他屬性。<code>culture</code> 僅用於舊版工作流程。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將會導致使用 <code>Culture</code> 定義的預設將日期格式化。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 為 <code>\"Jan\", \"Feb\", \"Mar\", ...</code>，在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 為 <code>\"янв\", \"фев\", \"мар\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 與 <code>culture</code> 也可以是文字值。這與 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> 轉換爲 <code>text</code> 值。<i>結果輸出可能因目前文化特性而有所不同。</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "使用 ISO 8601 模式進行轉換。",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "將時區元件轉換成 UTC 時區。",
        "Documentation.LongDescription": "將 datetime 值 <code>dateTimeZone</code> 的時區資訊變更為 UTC 或國際標準時間時區資訊。\r\n    如果 <code>dateTimeZone</code> 沒有時區元件，則加入 UTC 時區資訊。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "將 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的時區資訊變更為 UTC 時區。",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "變更值的時區。",
        "Documentation.LongDescription": "變更值的時區。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "變更值的時區。",
        "Documentation.LongDescription": "變更值的時區。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "根據指定的值建立 Decimal。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 Decimal <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Decimal.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 Decimal 範圍內的 <code>number</code>，則會傳回 <code>value</code>，否則會傳回錯誤。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4.5\"</code> 的 Decimal <code>number</code> 值。",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "傳回 Delta Lake 資料表的內容。",
        "Documentation.LongDescription": "傳回 Delta Lake 資料表的內容。",
        "Documentation.Category": "正在存取資料",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "根據指定的值建立 Double。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 Double <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Double.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 Double 範圍內的 <code>number</code>，則會傳回 <code>value</code>，否則會傳回錯誤。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 Double <code>number</code> 值。",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "傳回持續時間的天數部分。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 的天數部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "擷取兩個日期之間的天數。",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "根據指定的值建立持續時間。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>duration</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Duration.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>duration</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>duration</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 來自文字之經過時間格式 (d.h:m:s) 的 <code>duration</code> 值。如需詳細資料，請參閱 <code>Duration.FromText</code>。</li>\r\n        <li><code>number</code>: 等於 <code>value</code> 所表示整數與分數天數的 <code>duration</code>。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "將 <code>2.525</code> 轉換成 <code>duration</code> 值。",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "從文字的經過時間格式 (d.h:m:s) 傳回持續時間值。",
        "Documentation.LongDescription": "從指定的文字 <code>text</code> 傳回持續時間值。這個函數可剖析下列格式:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (內含所有範圍)<br>\r\n        ddd: 天數。<br>\r\n        hh: 小時數，介於 0 到 23 之間。<br>\r\n        mm: 分鐘數，介於 0 到 59 之間。<br>\r\n        ss: 秒數，介於 0 到 59 之間。<br>\r\n        ff: 小數秒數，介於 0 到 9999999 之間。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"2.05:55:20\"</code> 轉換成 <code>duration</code> 值。",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "傳回持續時間的小時數部分。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 的小時部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "從持續時間值擷取時數。",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "傳回持續時間的分鐘數部分。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 的分鐘數部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "從持續時間值擷取分鐘數。",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "傳回持續時間的秒數部分。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 的秒數部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "從持續時間值擷取秒數。",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "傳回一筆包含持續時間各部分的記錄。",
        "Documentation.LongDescription": "傳回包含持續時間值 <code>duration</code> 各部分的記錄。\r\n  <ul>\r\n        <li><code>duration</code>: 要建立記錄的 <code>duration</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#duration(2, 5, 55, 20)</code> 轉換成其各部分的記錄，包括日、時、分和秒 (如果適用)。",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "傳回 \"d.h:m:s\" 格式的文字。",
        "Documentation.LongDescription": "傳回指定持續時間值 <code>duration</code> 的文字表示法，格式為 \"day.hour:mins:sec\"。\r\n <ul>\r\n        <li><code>duration</code>: 計算文字表示法的來源 <code>duration</code>。</li>\r\n  <li><code>format</code>: <i>[選用]</i> 已淘汰，若不是 null，將會擲回錯誤</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#duration(2, 5, 55, 20)</code> 轉換成文字值。",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "傳回這個持續時間跨越的總天數。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 跨越的總天數。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "尋找持續時間值跨越的總天數。",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "傳回這個持續時間跨越的總時數。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 跨越的總時數。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "尋找持續時間值跨越的總時數。",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "傳回這個持續時間跨越的總分鐘數。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 跨越的總分鐘數。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "尋找持續時間值跨越的總分鐘數。",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "傳回這個持續時間跨越的總秒數。",
        "Documentation.LongDescription": "傳回 <code>duration</code> 跨越的總秒數。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "尋找持續時間值跨越的總秒數。",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "根據提供的文字值傳回錯誤記錄，以取得原因、訊息和詳細資料。",
        "Documentation.LongDescription": "根據提供的文字值傳回錯誤記錄，以取得原因、訊息和詳細資料。",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "傳回常數值的 M 原始程式碼表示法。",
        "Documentation.LongDescription": "傳回常數值的 M 原始程式碼表示法。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "取得數值的 M 原始程式碼表示法。",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "取得日期值的 M 原始程式碼表示法。",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "取得文字值的 M 原始程式碼表示法。",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "傳回評估 M 運算式的結果。",
        "Documentation.LongDescription": "傳回評估 M 運算式 <code>document</code> 的結果，以及 <code>environment</code> 所定義可參考的可用識別碼。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "評估簡易加總。",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "評估更複雜的加總。",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "評估具有識別碼之文字值的串連。",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "傳回識別碼的 M 原始程式碼表示法。",
        "Documentation.LongDescription": "傳回識別碼 <code>name</code> 的 M 原始程式碼表示法。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "取得識別碼的 M 原始程式碼表示法。",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "取得包含空格之識別碼的 M 原始程式碼表示法。",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "以二進位傳回指定檔案的內容。",
        "Documentation.LongDescription": "以二進位形式傳回檔案 <code>path</code> 的內容。<code>options</code> 參數目前僅供內部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "傳回是否將特定函數視為資料來源。",
        "Documentation.LongDescription": "傳回是否將 <code>function</code> 視為資料來源。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "將採用 Well-Known Text (WKT) 格式且代表地理值的文字轉譯成結構化記錄。",
        "Documentation.LongDescription": "將採用 Well-Known Text (WKT) 格式且代表地理值的文字轉譯成結構化記錄。WKT 是開放地理空間協會 (OGC) 所定義的標準格式，是眾多資料庫 (包括 SQL Server 在內) 使用的一般序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "將結構化地理點的值轉譯成其 Well-Known Text (WKT) 表示法。",
        "Documentation.LongDescription": "將結構化地理點的值轉譯成開放地理空間協會 (OGC) 所定義的 Well-Known Text (WKT) 表示法，這也是眾多資料庫 (包括 SQL Server 在內) 使用的序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "將採用 Well-Known Text (WKT) 格式且代表幾何值的文字轉譯成結構化記錄。",
        "Documentation.LongDescription": "將採用 Well-Known Text (WKT) 格式且代表幾何值的文字轉譯成結構化記錄。WKT 是開放地理空間協會 (OGC) 所定義的標準格式，是眾多資料庫 (包括 SQL Server 在內) 使用的一般序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "將結構化幾何點的值轉譯成其 Well-Known Text (WKT) 表示法。",
        "Documentation.LongDescription": "將結構化幾何點的值轉譯成開放地理空間協會 (OGC) 所定義的 Well-Known Text (WKT) 表示法，這也是眾多資料庫 (包括 SQL Server 在內) 使用的序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "傳回指定值的 GUID 值。",
        "Documentation.LongDescription": "傳回指定 <code>value</code> 的 <code>Guid.Type</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Guid.From</code> 會傳回 <code>null</code>。指定的 <code>value</code> 將經過檢查，以判斷其是否為可接受的格式。範例中提供可接受的格式。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID 可為連續 32 個十六進位數字。",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID 可以是用連字號分隔成 8-4-4-4-12 區塊的 32 個十六進位數字。",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID 可以是用連字號分隔並放在大括號中的 32 個十六進位數字。",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID 可以是用連字號分隔並放在括號中的 32 個十六進位數字。",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "根據指定的值建立 16 位元整數。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 16 位元整數 <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Int16.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 16 位元整數範圍內且無任何小數點位數部分的 <code>number</code>，則會傳回 <code>value</code>。若有小數點位數部分，則會使用指定的四捨五入模式模式將該數字四捨五入。預設的四捨五入模式為 <code>RoundingMode.ToEven</code>。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 16 位元整數 <code>number</code> 值。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 取得 <code>\"4.5\"</code> 的 16 位元整數 <code>number</code> 值。",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "根據指定的值建立 32 位元整數。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 32 位元整數 <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Int32.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 32 位元整數範圍內且無任何小數點位數部分的 <code>number</code>，則會傳回 <code>value</code>。若有小數點位數部分，則會使用指定的四捨五入模式模式將該數字四捨五入。預設的四捨五入模式為 <code>RoundingMode.ToEven</code>。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 32 位元整數 <code>number</code> 值。",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 取得 <code>\"4.5\"</code> 的 32 位元整數 <code>number</code> 值。",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "從給定的值建立 64 位元整數。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 64 位元整數 <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Int64.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 64 位元整數範圍內且無任何小數點位數部分的 <code>number</code>，則會傳回 <code>value</code>。若有小數點位數部分，則會使用指定的四捨五入模式模式將該數字四捨五入。預設的四捨五入模式為 <code>RoundingMode.ToEven</code>。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 64 位元整數 <code>number</code> 值。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 取得 64 位元整數的 <code>number</code> 值 <code>\"4.5\"</code>。",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "根據指定的值建立帶正負號的 8 位元整數。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回帶正負號 8 位元整數 <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Int8.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於帶正負號 8 位元整數範圍內且無任何小數點位數部分的 <code>number</code>，則會傳回 <code>value</code>。若有小數點位數部分，則會使用指定的四捨五入模式模式將該數字四捨五入。預設的四捨五入模式為 <code>RoundingMode.ToEven</code>。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。如需可用的四捨五入模式，請參閱 <code>Number.Round</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的帶正負號 8 位元整數 <code>number</code> 值。",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 取得 <code>\"4.5\"</code> 的帶正負號 8 位元整數 <code>number</code> 值。",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "傳回函數主體的抽象語法樹狀結構 (AST)。",
        "Documentation.LongDescription": "<p>傳回已標準化為<i>項目運算式</i>之 <code>function</code> 主體的抽象語法樹狀結構 (AST):\r\n<ul>\r\n  <li>此函式必須是只有 1 個引數的 Lambda。</li>\r\n  <li>所有對該函式參數的參考皆由 <code>ItemExpression.Item</code> 取代。</li>\r\n  <li>AST 會簡化為只包含下列種類的節點:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>當無法為 <code>function</code> 主體傳回項目運算式的 AST 時，即會引發錯誤。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "傳回函數 <code>each _ <> null</code> 主體的 AST",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "傳回 JSON 文件的內容。",
        "Documentation.LongDescription": "傳回 JSON 文件的內容。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "產生指定值的 JSON 表示法。",
        "Documentation.LongDescription": "<p>使用 <code>encoding</code> 所指定的文字編碼來產生指定值 <code>value</code> 的 JSON 表示法。如果省略 <code>encoding</code>，則會使用 UTF8。值的表示方式如下:</p>\r\n <ul>\r\n        <li>Null，文字和邏輯值會以對應的 JSON 類型表示</li>\r\n        <li>數字會以 JSON 中的數字表示，但 <code>#infinity</code>、<code>-#infinity</code> 和 <code>#nan</code> 會轉換為 null</li>\r\n        <li>清單會以 JSON 陣列表示</li>\r\n        <li>記錄會以 JSON 物件表示</li>\r\n        <li>資料表會以物件的陣列表示</li>\r\n        <li>日期、時間、日期時間、datetimezone 和持續時間會以 ISO-8601 文字表示</li>\r\n        <li>二進位值會以 Base-64 編碼的文字表示</li>\r\n        <li>類型和函數會產生錯誤</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "將複雜值轉換為 JSON。",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "將二進位值轉換成文字值清單 (於分行符號處分隔)。若是指定引號樣式，分行符號可能會出現在引號內。當 includeLineSeparators 為 True 時，分行符號字元會包含在文字中。",
        "Documentation.LongDescription": "將二進位值轉換成文字值清單 (於分行符號處分隔)。若是指定引號樣式，分行符號可能會出現在引號內。當 includeLineSeparators 為 True 時，分行符號字元會包含在文字中。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "將文字值轉換成在分行符號處折行的文字值清單。如果 includeLineSeparators 為 True，則分行符號字元會包含在文字中。",
        "Documentation.LongDescription": "將文字值轉換成在分行符號分隔處折行的文字值清單。當 includeLineSeparators 為 true 時，分行符號字元會包含在文字中。\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (預設值) 無須執行加括引號動作。</li>\r\n            <li><code>QuoteStyle.Csv:</code> 引號用法比照 CSV。單一雙引號字元可用於區分這些區域，而成對的雙引號字元則可用在這些區域中指定單一雙引號字元。</li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "使用指定的編碼和 lineSeparator，將文字清單轉換成二進位值。指定的 lineSeparator 會附加至每一行。如果未指定，則使用歸位字元和換行字元。",
        "Documentation.LongDescription": "使用指定的編碼和 lineSeparator，將文字清單轉換成二進位值。指定的 lineSeparator 會附加至每一行。如果未指定，則使用歸位字元和換行字元。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "將文字清單轉換成一個文字。指定的 lineSeparator 會附加至每一行。如果未指定，則使用歸位字元和換行字元。",
        "Documentation.LongDescription": "將文字清單轉換成一個文字。指定的 lineSeparator 會附加至每一行。如果未指定，則使用歸位字元和換行字元。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "如果所有運算式都是 True，即傳回 True。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中的所有運算式都是 True，即傳回 True。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "判斷清單 {true, true, 2 > 0} 中是否所有運算式都是 True。",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "判斷清單 {true, true, 2 < 0} 中是否所有運算式都是 True。",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "如果任何運算式是 True，即傳回 True。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中的任何運算式是 True，即傳回 True。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "判斷清單 {true, false, 2 > 0} 中是否有任何運算式是 True。",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "判斷清單 {2 = 0, false, 2 < 0} 中是否有任何運算式是 True。",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "傳回值的平均值。適用於數字、日期、datetime、datetimezone 和工期值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中項目的平均值。結果的資料類型與清單中的值相同。只適用於數字、日期、時間、datetime、datetimezone 和工期值。\r\n    如果清單是空的，即傳回 Null。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "找出數字清單 <code>{3, 4, 6}</code> 的平均值。",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "找出 2011 年 1 月 1 日、2011 年 1 月 2 日和 2011 年 1 月 3 日的日期值平均。",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "緩衝清單。",
        "Documentation.LongDescription": "將清單 <code>list</code> 緩衝在記憶體中。這個呼叫的結果是穩定的清單。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "建立清單 {1..10} 的穩定複本。",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "結合多個清單以傳回一個清單。",
        "Documentation.LongDescription": "接受一連串清單 <code>lists</code>，將它們合併成一個新的清單。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "合併兩個簡單清單 {1, 2} 和 {3, 4}。",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "合併兩個簡單清單 {1, 2} 和 {3, {4, 5}}，其中一個包含巢狀清單。",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "傳回清單中的項目數。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中的項目數。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3} 中值的數目。",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "傳回移除重複項之後的值清單。",
        "Documentation.LongDescription": "傳回清單，內含清單 <code>list</code> 中移除重複項後的所有值。如果清單是空的，則結果是空白清單。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "移除清單 {1, 1, 2, 3, 3, 3} 中的重複項。",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "傳回清單的第一個值，如果是空的則傳回指定的預設值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中的第一個項目，如果清單是空的，則傳回選擇性的預設值 <code>defaultValue</code>。\r\n    如果清單是空的，而且未提供預設值，函數會傳回 <code>null</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3} 中的第一個值。",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "找出清單 {} 中的第一個值。如果清單是空的，傳回 -1。",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "傳回出現在輸入中的清單值交集。",
        "Documentation.LongDescription": "傳回出現在輸入清單 <code>lists</code> 中的清單值交集。可指定選擇性參數 <code>equationCriteria</code>。",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1..5}、{2..6}、{3..7} 的交集。",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "指出清單中是否有重複項。",
        "Documentation.LongDescription": "傳回邏輯值，指出清單 <code>list</code> 中是否有重複項。如果是相異的清單，即為 <code>true</code>，如果有重複值，則為 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3} 是否為相異 (即沒有重複項)。no duplicates).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2, 3, 3} 是否為相異 (即沒有重複項)。no duplicates).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "如果清單是空的，即傳回 True。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 不包含任何值 (長度 0)，即傳回 <code>true</code>。如果清單包含值 (長度 > 0)，則傳回 <code>false</code>。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {} 是不是空的。",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "找出清單 {1, 2} 是不是空的。",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "傳回清單的最後一個值，如果是空的則傳回指定的預設值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中的最後一個項目，如果清單是空的，則傳回選擇性的預設值 <code>defaultValue</code>。\r\n    如果清單是空的，而且未提供預設值，函數會傳回 <code>null</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3} 中的最後一個值。",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "找出清單 {} 中的最後一個值，如果是空的，則為 -1。",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "傳回清單的最後一個值。可選擇性地指定要傳回的值數目或限定條件。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 的最後一個項目。如果清單是空的，則擲回例外狀況。\r\n 這個函數可接受選擇性的參數 <code>countOrCondition</code>，以支援收集多個項目或篩選項目。<code>countOrCondition</code> 可以用三種方式指定:\r\n <ul>\r\n  <li>如果指定了數字，最多傳回該數量的項目。</li>\r\n  <li>如果指定了條件，則從清單結尾開始，傳回最初符合條件的所有項目。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n  <li>如果這個參數是 null，則傳回清單的最後一個項目。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {3, 4, 5, -1, 7, 8, 2} 中的最後一個值。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "找出清單 {3, 4, 5, -1, 7, 8, 2} 中大於 0 的最後一個值。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "傳回最大值，或針對空的清單傳回預設值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中最大的項目，如果清單是空的，則傳回選擇性的預設值 <code>default</code>。\r\n    可指定選擇性的 comparisonCriteria 值 <code>comparisonCriteria</code>，以決定清單中項目的比較方式。如果這個參數是 null，則使用預設比較子。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 4, 7, 3, -2, 5} 中的最大值。",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "找出清單 {} 中的最大值，如果是空的，則為 -1。",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "傳回清單的中間值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 的中間項目。若清單中不含非 <code>null</code> 的值，此函式會傳回 <code>null</code>。\r\n    當項目個數為偶數，且清單中包含完整的日期時間、持續時間、數字或時間，\r\n    函式會傳回兩個項目的平均值，否則會取兩個中間項目中的較小者。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{5, 3, 1, 7, 9}</code> 的中間值。",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "傳回最小值，或針對空的清單傳回預設值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中最小的項目，如果清單是空的，則傳回選擇性的預設值 <code>default</code>。\r\n    可指定選擇性的 comparisonCriteria 值 <code>comparisonCriteria</code>，以決定清單中項目的比較方式。如果這個參數是 null，則使用預設比較子。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 4, 7, 3, -2, 5} 中的最小值。",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "找出清單 {} 中的最小值，如果是空的，則為 -1。",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "傳回清單中最常出現的值。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中最常出現的項目。如果清單是空的，則擲回例外狀況。如果多個項目的最大出現頻率相同，則選擇最後一個。\r\n    可指定選擇性的 <code>comparisonCriteria</code> 值 <code>equationCriteria</code>，以控制等號比較測試。 ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{\"A\", 1, 2, 3, 3, 4, 5}</code> 中最常出現的項目。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "找出清單 <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 中最常出現的項目。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "傳回清單中最常出現的值清單。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中最常出現的項目。如果清單是空的，則擲回例外狀況。如果多個項目的最大出現頻率相同，則選擇最後一個。\r\n    可指定選擇性的 <code>comparisonCriteria</code> 值 <code>equationCriteria</code>，以控制等號比較測試。 ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 中最常出現的幾個項目。",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "傳回清單中非 null 的項目數。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中非 null 的項目數。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "傳回輸入的位移清單。",
        "Documentation.LongDescription": "傳回輸入清單 <code>list</code> 的位移清單。\r\n    使用 List.Transform 變更清單時，可以使用位置清單讓轉換能夠存取位置。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1, 2, 3, 4, null, 5} 中值的位移。",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "傳回清單中數字的乘積。",
        "Documentation.LongDescription": "傳回清單 <code>numbersList</code> 中非 null 數字的乘積。如果清單中沒有非 Null 值，則傳回 Null。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{1, 2, 3, 3, 4, 5, 5}</code> 中數字的乘積。",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "傳回亂數清單。",
        "Documentation.LongDescription": "已知要產生的值數目和選擇性的種子值，據此傳回 0 到 1 之間的亂數清單。\r\n<ul>\r\n   <li><code>count</code>: 要產生的亂數值數目。</li>\r\n   <li><code>seed</code>:  [選擇性]<i></i> 用來作為亂數產生器種子的數值。如果省略，每次呼叫函數時都會產生唯一的亂數清單。如果以數字指定種子值，則每次呼叫函數會產生相同的亂數清單。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "建立 3 個亂數的清單。",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "指定種子值建立 3 個亂數的清單。",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "傳回清單，略過清單開頭指定數目的項目。",
        "Documentation.LongDescription": "傳回清單，移除清單 <code>list</code> 的第一個項目。如果 <code>list</code> 是空的清單，即傳回空的清單。\r\n這個函數接受選擇性參數 <code>countOrCondition</code>，以支援移除下列多個值。\r\n <ul>\r\n <li>如果指定了數字，最多移除該數量的項目。</li>\r\n <li>如果指定了條件，傳回的清單開頭是 <code>list</code> 中符合條件的第一個項目。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n <li>如果這個參數是 Null，則依照預設行為。</li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "根據 {1, 2, 3, 4, 5} 建立不含前 3 個數字的清單。",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "根據 {5, 4, 2, 6, 1} 建立以小於 3 的數字開頭的清單。",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "傳回清單，移除清單結尾指定數目的項目。",
        "Documentation.LongDescription": "傳回清單，移除清單 <code>list</code> 結尾最後 <code>countOrCondition</code> 個項目。如果 <code>list</code> 中的項目數少於 <code>countOrCondition</code>，即傳回空的清單。\r\n <ul>\r\n <li>如果指定了數字，最多移除該數量的項目。</li>\r\n <li>如果指定了條件，傳回的清單結尾是 <code>list</code> 末端符合條件的第一個項目。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n <li>如果這個參數是 null，則只移除一個項目。</li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "根據 {1, 2, 3, 4, 5} 建立不含末 3 個數字的清單。",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "根據 {5, 4, 2, 6, 4} 建立以小於 3 的數字結束的清單。",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "從指定的清單移除所有 \"null\" 值。",
        "Documentation.LongDescription": "移除 <code>list</code> 中所有發生的 \"null\" 值。如果清單中沒有 'null' 值，則傳回原始清單。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "從清單 {1, 2, 3, null, 4, 5, null, 6} 移除 \"null\" 值。",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "反轉清單中值的順序。",
        "Documentation.LongDescription": "傳回清單，內含清單 <code>list</code> 中的值依相反順序排列。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "根據 {1..10} 建立順序相反的清單。",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "為長度 1 的清單傳回一個清單項目，否則擲回例外狀況。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中只有一個項目，即傳回該項目。\r\n    如果不止一個項目或清單是空的，函數會擲回例外狀況。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1} 中的一個值。",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "找出清單 {1, 2, 3} 中的一個值。",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "為長度 1 的清單傳回一個清單項目，並為空的清單傳回預設值。",
        "Documentation.LongDescription": "如果清單 <code>list</code> 中只有一個項目，即傳回該項目。\r\n    如果清單是空的，則除非指定了選擇性的 <code>default</code>，否則函數會傳回 null。如果清單中不止一個項目，函數會傳回錯誤。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出清單 {1} 中的一個值。",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "找出清單 {} 中的一個值。",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "找出清單 {} 中的一個值。如果是空的，則傳回 -1。",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "傳回清單，略過清單開頭指定數目的項目。",
        "Documentation.LongDescription": "傳回清單，略過清單 <code>list</code> 的第一個項目。如果 <code>list</code> 是空的清單，即傳回空的清單。\r\n這個函數接受選擇性參數 <code>countOrCondition</code>，以支援略過下列多個值。\r\n <ul>\r\n <li>如果指定了數字，最多略過該數量的項目。 </li>\r\n <li>如果指定了條件，傳回的清單開頭是 <code>list</code> 中符合條件的第一個項目。一旦有項目不符合條件，就不再考慮其他項目。</li>\r\n <li>如果這個參數是 Null，則依照預設行為。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "根據 {1, 2, 3, 4, 5} 建立不含前 3 個數字的清單。",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "根據 {5, 4, 2, 6, 1} 建立以小於 3 的數字開頭的清單。",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "根據指定的準則將資料清單排序。",
        "Documentation.LongDescription": "根據指定的選擇性準則將資料清單 <code>list</code> 排序。\r\n    可指定選擇性參數 <code>comparisonCriteria</code> 做為比較準則。這個參數接受下列值:\r\n    <ul>\r\n    <li> 若要控制順序，比較準則可以是 Order 列舉值。(<code>Order.Descending</code>、<code>Order.Ascending</code>)。</li>\r\n    <li> 若要計算用於排序的索引鍵，可使用有 1 個引數的函數。</li> \r\n    <li> 若要同時選取索引鍵和控制順序，比較準則可以是包含索引鍵和順序的清單 (<code>{each 1 / _, Order.Descending}</code>)。</li>\r\n    <li> 若要完全控制比較方式，可使用有 2 個引數的函數。您可以使用 Value.Compare 這個方法來委派這個邏輯。此函數將從清單中傳遞兩個項目 (任何兩個項目，以任何順序)。 該函數應返回下列其中一個值:\r\n        <ul>\r\n            <li> <code>-1</code>: 第一項小於第二項。</li>\r\n            <li> <code>0</code>: 兩個項目相等。</li>\r\n            <li> <code>1</code>: 第一項大於第二項。</li>\r\n        </ul>\r\n        Value.Compare 是一種可用於委派此邏輯的方法。 </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "將清單 {2, 3, 1} 排序。",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "將清單 {2, 3, 1} 依遞減順序排序。",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "使用 Value.Compare 方法將清單 {2, 3, 1} 依遞減順序排序。",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "傳回根據樣本估計的標準差。",
        "Documentation.LongDescription": "傳回清單 <code>numbersList</code> 中值的標準差取樣型估計值。\r\n    若 <code>numbersList</code> 為數值清單，就會傳回數值。\r\n    若為空白清單或非 <code>number</code> 類型的項目清單，則會擲回例外狀況。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "找出數字 1 到 5 的標準差。",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "傳回清單中項目的總和。",
        "Documentation.LongDescription": "傳回清單 <code>list</code> 中非 null 值的總和。如果清單中沒有非 Null 值，則傳回 Null。",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "找出清單 <code>{1, 2, 3}</code> 中數字的總和。",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "傳回出現在輸入中的清單值聯集。",
        "Documentation.LongDescription": "接受一連串的清單 <code>lists</code>，取得個別清單中項目的聯合，然後以輸出清單傳回。因此，傳回的清單中會包含任何輸入清單中的所有項目。\r\n    這項作業保持傳統 Bag 語意，所以聯合中會比對重複的值。\r\n    可指定選擇性的方程式條件值 <code>equationCriteria</code>，以控制等號比較測試。 ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "建立清單 {1..5}、{2..6}、{3..7} 的聯集。",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "透過合併位於多個清單中相同位置的項目，傳回一連串清單。",
        "Documentation.LongDescription": "接受一連串清單 <code>lists</code>，並傳回合併位於相同位置之項目的一連串清單。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "壓縮簡單清單 {1, 2} 及 {3, 4}。",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "壓縮長度不同的簡單清單 {1, 2} 及 {3}。",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "根據指定的值建立邏輯。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>logical</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Logical.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>logical</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>logical</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 根據文字值 (<code>\"true\"</code> 或 <code>\"false\"</code>) 產生的 <code>logical</code> 值。如需詳細資料，請參閱 <code>Logical.FromText</code>。</li>\r\n        <li><code>number</code>: 若 <code>value</code> 等於 <code>0</code>，即為 <code>false</code>，否則為 <code>true</code>。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "將 <code>2</code> 轉換成 <code>logical</code> 值。",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "根據文字值 \"true\" 和 \"false\" 建立邏輯值。",
        "Documentation.LongDescription": "根據文字值 <code>text</code> (\"true\" 或 \"false\") 建立邏輯值。如果 <code>text</code> 包含不同字串，則擲回例外狀況。文字值 <code>text</code> 不區分大小寫。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "根據文字字串 \"true\" 建立邏輯值。",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "根據文字字串 \"a\" 建立邏輯值。",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "已知邏輯值，傳回文字 \"true\" 或 \"false\"。",
        "Documentation.LongDescription": "根據邏輯值 <code>logicalValue</code> (<code>true</code> 或 <code>false</code>) 建立文字值。如果 <code>logicalValue</code> 不是邏輯值，則擲回例外狀況。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "根據邏輯 <code>true</code> 建立文字值。",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "傳回數字的絕對值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的絕對值。如果 <code>number</code> 是 Null，<code>Number.Abs</code> 會傳回 Null。\r\n    <ul>\r\n        <li><code>number</code>: 要計算其絕對值的 <code>number</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3 的絕對值。",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "傳回數字的反餘弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的反餘弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "傳回數字的反正弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的反正弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "傳回數字的反正切值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的反正切值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "傳回一個位元組，它的每個位元都是輸入的相反。",
        "Documentation.LongDescription": "傳回對 <code>number</code> 執行位元 \"Not\" 運算的結果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "傳回數字的餘弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的餘弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "找出角度 0 的餘弦值。",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "傳回數字的雙曲餘弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的雙曲餘弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "求 e 的指定次方。",
        "Documentation.LongDescription": "傳回 e 的 <code>number</code> 次方 (指數函數) 結果。\r\n      <ul>\r\n        <li><code>number</code>: 要計算其指數函數的 <code>number</code>。如果 <code>number</code> 是 Null，<code>Number.Exp</code> 會傳回 Null。 </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "取 e 的 3 次方。",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "傳回數字的階乘。",
        "Documentation.LongDescription": "傳回數字 <code>number</code> 的階乘。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出 10 的階乘。",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "根據指定的值建立數字。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>number</code> 值。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。\r\n若指定的 <code>value</code> 是 <code>null</code>，則 <code>Number.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>number</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>number</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>number</code> 值。會處理通用文字格式 (\"15\", \"3,423.10\", \"5.0E-10\")。如需詳細資料，請參閱 <code>Number.FromText</code>。</li>\r\n        <li><code>logical</code>: <code>true</code> 為 1，<code>false</code> 為 0。</li>\r\n        <li><code>datetime</code>: 雙精確度浮點數，包含對等的 OLE Automation 日期。</li>\r\n        <li><code>datetimezone</code>: 雙精確度浮點數，包含等於 <code>value</code> 之本地日期與時間的 OLE Automation 日期。</li>\r\n        <li><code>date</code>: 雙精確度浮點數，包含對等的 OLE Automation 日期。</li>\r\n        <li><code>time</code>: 以分數天數表示。</li>\r\n        <li><code>duration</code>: 以整數與分數天數表示。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的 <code>number</code> 值。",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "取得 <code>#datetime(2020, 3, 20, 6, 0, 0)</code> 的 <code>number</code> 值。",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "取得 <code>\"12.3%\"</code> 的<code>數值</code> 。",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "根據通用文字格式 (\"15\"、\"3,423.10\"、\"5.0E-10\") 建立數字。",
        "Documentation.LongDescription": "從指定的文字值 <code>text</code> 傳回 <code>number</code> 值。\r\n <ul>\r\n  <li><code>text</code>: 數值的文字表示法。表示法必須採用通用數字格式，例如 \"15\"、\"3,423.10\" 或 \"5.0E-10\"。</li>\r\n  <li><code>culture</code>: 控制如何解譯 <code>text</code> 的選用文化特性 (Culture) (例如 \"zh-TW\")。</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"4\"</code> 的數值。",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "取得 <code>\"5.0e-10\"</code> 的數值。",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "指出值是否為偶數。",
        "Documentation.LongDescription": "指出值 <code>number</code> 是否為偶數，如果是偶數，傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "檢查 625 是否為偶數。",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "檢查 82 是否為偶數。",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "指出值是否為 NaN (不是數字)。",
        "Documentation.LongDescription": "指出值是否為 NaN (不是數字)。如果 <code>number</code> 等於 <code>Number.IsNaN</code>，傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "檢查 0 除以 0 是否為 NaN。",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "檢查 1 除以 0 是否為 NaN。",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "指出值是否為奇數。",
        "Documentation.LongDescription": "指出值是否為奇數。如果 <code>number</code> 是奇數，傳回 <code>true</code>，否則傳回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "檢查 625 是否為奇數。",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "檢查 82 是否為奇數。",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "傳回數字的自然對數。",
        "Documentation.LongDescription": "傳回數字 <code>number</code> 的自然對數。如果 <code>number</code> 為 Null，<code>Number.Ln</code> 會傳回 Null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "取得 15 的自然對數。",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "傳回數字以指定之底數 (預設為 e) 為底的對數。",
        "Documentation.LongDescription": "傳回以指定的 <code>base</code> 為底數時，數字 <code>number</code> 的對數。若未指定 <code>base</code>，預設值為 Number.E。\r\n    若 <code>number</code> 為 Null，<code>Number.Log</code> 會傳回 Null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "取得 2 以 10 為底數的對數。",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "取得 2 以 e 為底數的對數。",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "傳回數字以 10 為底數的對數。",
        "Documentation.LongDescription": "傳回數字 <code>number</code> 以 10 為底數的對數。若 <code>number</code> 為 Null，<code>Number.Log10</code> 會傳回 Null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "取得 2 以 10 為底數的對數。",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "傳回四捨五入的數字。可指定位數和四捨五入模式。",
        "Documentation.LongDescription": "傳回將 <code>number</code> 四捨五入成最接近之數字後的結果。若 <code>number</code> 為 null，則 <code>Number.Round</code> 會傳回 null。<br>\r\n      <br>\r\n      根據預設，<code>number</code> 會四捨五入成最接近的整數，並藉由四捨五入成最接近的偶數來中斷繫結 (使用 <code>RoundingMode.ToEven</code>，也稱為「四捨六入五成雙」)。<br>\r\n      <br>\r\n      然而，這些預設值可能會透過下列選用的參數進行覆寫。\r\n      <ul>\r\n        <li><code>digits</code>: 導致 <code>number</code> 四捨五入成十進位數字的特定數字。</li>\r\n        <li><code>roundingMode</code>: 當 <code>number</code> 位於兩個可能已四捨五入之值的中點時，覆寫預設的繫結中斷行為\r\n      (如需可能的值，請參閱 <code>RoundingMode.Type</code>)。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "將 1.234 四捨五入到最接近的整數。",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "將 1.56 四捨五入到最接近的整數。",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "將 1.2345 四捨五入成兩位小數位數。",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "將 1.2345 四捨五入成三位小數位數 (向上捨入)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "將 1.2345 四捨五入成三位小數位數 (向下捨入)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "傳回結果時，將正數捨入並將負數捨去。您可以可指定位數。",
        "Documentation.LongDescription": "傳回結果時，依據數字的正負號將 <code>number</code> 四捨五入。此函數會將正數捨入並將負數捨去。\r\n   若指定 <code>digits</code>，<code>number</code> 會四捨五入成 <code>digits</code> 位小數位數。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "將數字 -1.2 背離零四捨五入。",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "將數字 1.2 背離零四捨五入。",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "將數字 -1.234 四捨五入成兩位小數位數。",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "傳回前一個最大數字。您可以指定位數。",
        "Documentation.LongDescription": "會四捨五入到 <code>number</code> 上一個最高整數。如果 <code>number</code> 為 Null，此函數會返回 Null。\r\n\r\n    如果提供 <code>digits</code>，則 <code>number</code> 會四捨五入到指定的小數位數。\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "將 1.234 向下四捨五入成整數。",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "將 1.999 向下四捨五入成整數。",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "將 1.999 捨去成兩位小數位數。",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "傳回結果時，將正數捨去並將負數捨入。您可以指定位數。",
        "Documentation.LongDescription": "傳回結果時，依據數字的正負號將 <code>number</code> 四捨五入。此函數會將正數捨去並將負數捨入。\r\n    若指定 <code>digits</code>，<code>number</code> 會四捨五入成 <code>digits</code> 位小數位數。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "將數字 -1.2 朝向零四捨五入。",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "將數字 1.2 朝向零四捨五入。",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "將數字 -1.234 捨入成兩位小數位數。",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "傳回下一個最大數字。您可以指定位數。",
        "Documentation.LongDescription": "會四捨五入到 <code>number</code> 下一個最高整數。如果 <code>number</code> 為 Null，此函數會返回 Null。\r\n    如果提供 <code>digits</code>，則 <code>number</code> 會四捨五入到指定的小數位數。\r\n",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "將 1.234 向上四捨五入成整數。",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "將 1.999 向上四捨五入成整數。",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "將 1.234 捨入成兩位小數位數。",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "如果數字是正數，傳回 1，如果是負數，傳回 -1，如果是零，則傳回 0。",
        "Documentation.LongDescription": "如果 <code>number</code> 是正數，傳回 1; 如果是負數，傳回 -1; 如果是零，則傳回 0。\r\n    如果 <code>number</code> 是 Null，<code>Number.Sign</code> 會傳回 Null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "判斷 182 的符號。",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "判斷 -182 的符號。",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "判斷 0 的符號。",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "傳回數字的正弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的正弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "找出角度 0 的正弦值。",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "傳回數字的雙曲正弦值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的雙曲正弦值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "傳回數字的平方根。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的平方根。\r\n    如果 <code>number</code> 是 Null，<code>Number.Sqrt</code> 會傳回 Null。如果是負值，則傳回 <code>Number.NaN</code> (不是數字)。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "找出 625 的平方根。",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "找出 85 的平方根。",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "傳回數字的正切值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的正切值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "找出角度 1 的正切值。",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "傳回數字的雙曲正切值。",
        "Documentation.LongDescription": "傳回 <code>number</code> 的雙曲正切值。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "將指定的數字轉換成文字。",
        "Documentation.LongDescription": "根據 <code>format</code> 指定的格式將數值 <code>number</code> 轉換成文字值。<br>\r\n    <br>\r\n    此格式是文字值，表示數字的轉換方式。如需支援格式值的詳細資料，請移至 https://go.microsoft.com/fwlink/?linkid=2241210 和 https://go.microsoft.com/fwlink/?linkid=2240884。<br>\r\n    <br>\r\n    也可能提供選用的 <code>culture</code> (例如「en-US」) 以控制 <code>format</code> 的文化相依行為。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "將數字轉換為文字，不指定格式。",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "將數字轉換成指數格式。",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "將數位轉換成只有一個小數位數的百分比格式。",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "傳回 OData 服務所提供 OData 摘要的資料表。",
        "Documentation.LongDescription": "從 URI <code>serviceUri</code>、標頭 <code>headers</code> 傳回由 OData 服務提供的 OData 摘要資料表。可以指定布林值，指定是使用同時連線還是使用選用記錄參數 <code>options</code>，以控制以下選項:\r\n    <ul>\r\n    <li><code>Query</code>: 以程式設計方式將查詢參數新增至 URL，而無須擔心逸出。</li>\r\n    <li> <code>Headers</code> : 將此值指定為記錄將為 HTTP 要求提供其他標頭。</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: 將此值指定為清單，將排除這些 HTTP 標頭機碼作為快取資料計算的一部分。</li>\r\n    <li> <code>ApiKeyName</code> : 若目標網站採用 API 金鑰概念，可使用此參數指定 URL 中必須使用的金鑰參數名稱 (而非值)。實際金鑰值則於認證中提供。</li>\r\n    <li> <code>Timeout</code> : 將此值指定為持續時間會變更 HTTP 要求的逾時。預設值為 600 秒。</li>\r\n    <li> <code>EnableBatch</code> : 邏輯 (true/false)，可設定在超過 MaxUriLength 時，是否允許產生 OData $batch 要求 (預設為 false)。</li>\r\n    <li> <code>MaxUriLength</code> : 數值，表示允許傳送給 OData 服務的 URI 長度上限。當超過該值且 EnableBatch 為 true 時，會向 OData $batch 端點提出要求，否則會失敗 (預設值為 2048)。</li>\r\n    <li> <code>Concurrent</code> : 邏輯 (true/false)，當其設為 true 時，會同時提出服務要求。當設為 false 時，則依序提出要求。若未指定，服務的 AsynchronousRequestsSupported 註釋會決定此值。若服務未指定是否支援 AsynchronousRequestsSupported，將會依序提出要求。</li>\r\n    <li> <code>ODataVersion</code> : 數字 (3 或 4)，可指定將用於 OData 服務的 OData 通訊協定版本。若未指定，將會要求所有支援的版本。此服務版本由服務傳回的 OData-Version 標頭決定。</li>\r\n    <li> <code>FunctionOverloads</code> : 邏輯 (true/false)，當其設為 true 時，函式匯入多載會以單獨的項目在導覽器中列出; 當設為 false 時，函式匯入多載會作爲聯合函式在導覽器中列出。V3 的預設值為 false，V4 的預設值為 true。</li>\r\n    <li> <code>MoreColumns</code> : 邏輯 (true/false)，當其設為 true 時，會將「更多資料行」資料行新增到包含開放式類型與多形類型的各個實體摘要。這會包含未在基底類型中宣告的欄位。當設為 false 時，此欄位不存在。預設為 false。</li>\r\n    <li> <code>IncludeAnnotations</code> : 以逗號分隔的命名空間合格字詞名稱或模式清單，以「*」爲萬用字元。根據預設，不包含任何註釋。</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : 中繼資料文件要求中要包含之命名空間合格字詞名稱或模式清單 (以逗號分隔)，以「*」爲萬用字元。根據預設，包含與 IncludeAnnotations 相同的註釋。</li>\r\n    <li> <code>OmitValues</code> : 允許 OData 服務避免寫出回應中的特定值。如果服務認可，我們將從省略的欄位中推斷這些值。包含以下選項:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : 允許 OData 服務省略 null 值。</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : 指定要使用之 OData 連接器的實作。有效值為「2.0」或 Null。</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "連線到 TripPin OData 服務。",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "傳回嘗試推斷 ODBC 驅動程式 SQL 功能的結果。",
        "Documentation.LongDescription": "傳回利用使用 ODBC 之連接字串 <code>connectionString</code> 嘗試推斷 SQL 功能的結果。<code>connectionString</code> 可以是文字或屬性值組的記錄。屬性值可以是文字或數字。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "傳回連接字串的推斷 SQL 功能。",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "以資料表形式傳回 Parquet 文件的內容。",
        "Documentation.LongDescription": "以資料表形式傳回 Parquet 文件的內容。選項包括:\n    <ul>\n    <li> <code>TypeMapping</code> : 用於控制讀取和寫入檔案時之預設類型對應的文字值。預設值為 null，並嘗試盡可能保持原始類型的逼真度。值  \"Sql\" 將產生與 Sql Server 最相容的結果。</li>\n    </ul>",
        "Documentation.Category": "存取資料",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "正在存取資料",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "傳回指定值的百分比值。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>percentage</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Percentage.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是具有尾端百分比符號的 <code>text</code>，則會傳回已轉換的十進位數字。否則會使用 <code>Number.FromText</code> 將該值轉換成 <code>number</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"12.3%\"</code> 的<code>百分比</code>值。",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "從 RData 檔案傳回資料框架的記錄。",
        "Documentation.LongDescription": "從 RData 檔案傳回資料框架的記錄。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "結合指定清單中的記錄。",
        "Documentation.LongDescription": "結合指定 <code>records</code> 中的記錄。如果 <code>records</code> 包含非記錄值，則傳回錯誤。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "根據記錄建立一個合併的記錄。",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "傳回記錄中的欄位數。",
        "Documentation.LongDescription": "傳回記錄 <code>record</code> 中的欄位數。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "找出記錄中欄位的數目。",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "傳回欄位的名稱。",
        "Documentation.LongDescription": "以文字傳回記錄 <code>record</code> 中欄位的名稱。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出記錄中欄位的名稱。",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "傳回欄位值的清單。",
        "Documentation.LongDescription": "傳回記錄 <code>record</code> 中欄位值的清單。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "找出記錄中的欄位值。",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "根據 {[Name = name, Value = value]} 格式的表格建立記錄。",
        "Documentation.LongDescription": "根據記錄表 <code>table</code> 傳回記錄，表中包含欄位名稱和值名稱 <code>{[Name = name, Value = value]}</code>。如果欄位名稱不是唯一的，則擲回例外狀況。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "根據 Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}) 格式的表格，建立記錄。",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "傳回值清單，內含輸入記錄的欄位值。",
        "Documentation.LongDescription": "根據輸入 <code>record</code> 傳回包含欄位值的值清單。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "從記錄中擷取欄位值。",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "傳回代表資料列運算式內資料行存取權的抽象語法樹狀結構 (AST)。",
        "Documentation.LongDescription": "傳回代表資料列運算式內資料列之資料行 <code>columnName</code> 存取權的抽象語法樹狀結構 (AST)。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "建立代表資料行 \"CustomerName\" 存取權的 AST。",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "傳回函數主體的抽象語法樹狀結構 (AST)。",
        "Documentation.LongDescription": "<p>傳回已標準化為<i>資料列運算式</i>之 <code>function</code> 主體的抽象語法樹狀結構 (AST):\r\n<ul>\r\n  <li>此函式必須是 1 個引數的 Lambda。</li>\r\n  <li>所有對該函式參數的參考皆由 <code>RowExpression.Row</code> 取代。</li>\r\n  <li>所有對資料行的參考都會以 <code>RowExpression.Column(<i>columnName</i>)</code> 取代。</li>\r\n  <li>AST 會簡化為只包含下列種類的節點:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>當無法為 <code>function</code> 主體傳回資料列運算式的 AST 時，即會引發錯誤。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "傳回函數 <code>each [CustomerID] = \"ALFKI\"</code> 主體的 AST",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "根據指定的值建立 Single。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 Single <code>number</code> 值。若指定的 <code>value</code> 是 <code>null</code>，則 <code>Single.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是位於 Single 範圍內的 <code>number</code>，則會傳回 <code>value</code>，否則會傳回錯誤。若指定的 <code>value</code> 是任何其他類型，則會先使用 <code>Number.FromText</code> 將其轉換成 <code>number</code>。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "取得 <code>\"1.5\"</code> 的 Single <code>number</code> 值。",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "從 Smartsheet 索引端點傳回內含資料的資料表。",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "呼叫位於指定端點的 Smartsheet 2.0 REST API，並將傳回的資料元素轉換成資料表。",
        "Documentation.Examples": [
          {
            "Description": "從 Smartsheet API 提取內含使用者資訊的資料表",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "由 Smartsheet API 傳回內含使用者資訊的資料表"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "傳回函數，這個函數會在任何指定的分隔符號處，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會在任何指定的分隔符號處，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "以逗號或分號分割輸入，略過引號和帶引號的分隔符號，並從輸入的開頭開始。",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "以逗號或分號分割輸入，略過引號和帶引號的分隔符號，並從輸入結尾開始。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "傳回函數，這個函數會根據指定的分隔符號，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會根據指定的分隔符號，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "按逗號分割輸入，略過帶引號的逗號。",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "傳回函數，這個函數會依序在每個指定的分隔符號處，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會依序在每個指定的分隔符號處，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "從輸入的開頭開始，先用逗號，然後用分號分割輸入。",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "先用逗號，然後用分號分割輸入，將引號與其他字元一樣處理，並從輸入的結尾開始。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "傳回函數，這個函數會按照每個指定的長度，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會按照每個指定的長度，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "從輸入的開頭開始，將輸入分割為前兩個字元，後接後三個字元。",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "從輸入的結尾開始，將輸入分割為前三個字元，後接後兩個字元。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "傳回函數，這個函數會在每個指定的位置，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會在每個指定的位置，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "從輸入的開頭開始，在指定位置分割輸入。",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "從輸入的結尾開始，在指定位置分割輸入。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "傳回函數，這個函數會根據指定的位移和長度，將文字分割成文字清單。",
        "Documentation.LongDescription": "會根據指定的位移和長度傳回將文字分割成文字清單的函數。Null 長度表示應該包含所有剩餘的輸入。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "從輸入的開頭開始，按指定位置和長度分割輸入。請注意，本例中的範圍重疊。",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "從輸入的結尾開始，依指定位置和長度分割輸入。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "將輸入分割為固定長度的郵遞區號，後面接著可變長度的城市名稱。",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "傳回函數，這個函數會重複地按照指定的長度，將文字分割成文字清單。",
        "Documentation.LongDescription": "傳回函數，這個函數會重複地按照指定的長度，將文字分割成文字清單。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "從輸入的開頭開始，重複將輸入分割為三個字元區塊。",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "從輸入的結尾開始，重複將輸入分割為三個字元區塊。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "傳回資料表中的約略資料列數目。",
        "Documentation.LongDescription": "傳回 <code>table</code> 中的近似列數，如果資料來源不支援近似值，則傳回錯誤。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "估計大型資料表中城市和省份之相異組合數，可以用作資料行的基數估算。基數估算非常重要，以至於各種資料來源 (如 SQL Server) 都支援這種特定的近似值，通常使用稱為 HyperLogLog 的演算法。",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "傳回資料表中的資料行數目。",
        "Documentation.LongDescription": "傳回資料表 <code>table</code> 中的資料行數目。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "找出資料表中資料行的數目。",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "將資料行名稱傳回成清單。",
        "Documentation.LongDescription": "將資料表 <code>table</code> 中的資料行名稱傳回成文字清單。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表的資料行名稱。",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "傳回第一個資料列或指定的預設值。",
        "Documentation.LongDescription": "傳回 <code>table</code> 的第一個資料列，如果資料表是空的，則傳回選擇性的預設值 <code>default</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表的第一個資料列。",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "尋找資料表 <code>({})</code> 的第一個資料列，如果是空的，則傳回 [a = 0, b = 0]。",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "傳回資料表第一個資料列的第一個資料行，或傳回指定的預設值。",
        "Documentation.LongDescription": "傳回資料表 <code>table</code> 第一個資料列的第一個資料行，或傳回指定的預設值。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "指出資料表是否只包含相異資料列 (沒有重複項目)。",
        "Documentation.LongDescription": "指出 <code>table</code> 是否只包含相異資料列 (沒有重複項目)。如果資料列相異，則傳回 <code>true</code>，否則傳回 <code>false</code>。\r\n    選擇性參數 <code>comparisonCriteria</code> 可指定要測試是否有重複情況的資料表資料行。如果未指定 <code>comparisonCriteria</code>，則會測試所有資料行。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表是否相異。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "判斷資料表的資料行是否相異。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "指出資料表是否包含任何資料列。",
        "Documentation.LongDescription": "指出 <code>table</code> 是否包含任何資料列。如果沒有任何資料列 (亦即資料表是空的)，則傳回 <code>true</code>， 否則傳回 <code>false</code>。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "判斷資料表是否是空的。",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "判斷資料表 <code>({})</code> 是否為空的。",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "傳回指定資料表的索引鍵。",
        "Documentation.LongDescription": "傳回指定資料表的索引鍵。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "取得資料表的索引鍵清單。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "傳回最後一個資料列或指定的預設值。",
        "Documentation.LongDescription": "傳回 <code>table</code> 的最後一個資料列，如果資料表是空的，則傳回選擇性的預設值 <code>default</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "找出資料表的最後一個資料列。",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "尋找資料表 <code>({})</code> 的最後一個資料列，如果是空的，則傳回 [a = 0, b = 0]。",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "傳回資料表中的資料列數目。",
        "Documentation.LongDescription": "傳回 <code>table</code> 中的資料列數目。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "找出資料表中資料列的數目。",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "傳回資料表的單一資料列。",
        "Documentation.LongDescription": "傳回單列 <code>table</code> 的單一資料列。如果 <code>table</code> 有多個資料列，則會擲回例外狀況。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表中的單一資料列。",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "根據資料表建立資料行值巢狀清單的清單。",
        "Documentation.LongDescription": "根據資料表 <code>table</code> 建立巢狀清單的清單。每個清單項目都是包含資料行值的內部清單。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "根據資料表建立資料行值的清單。",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "將指定的結合函數套用至資料表中每個資料列的值，藉以將資料表轉換成清單。",
        "Documentation.LongDescription": "將指定的結合函數套用至資料表中每個資料列的值，藉以將資料表轉換成清單。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "使用逗號將每個資料列的文字合併。",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "將資料表轉換成記錄清單。",
        "Documentation.LongDescription": "將資料表 <code>table</code> 轉換成記錄清單。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "將資料表轉換成記錄清單。",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "根據資料表建立資料列值巢狀清單的清單。",
        "Documentation.LongDescription": "根據資料表 <code>table</code> 建立巢狀清單的清單。每個清單項目都是包含資料列值的內部清單。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "根據資料表建立資料列值的清單。",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "在檢視定義的處理常式透過 [表格檢視]建立已修改的錯誤記錄擲回時，不會觸發後援。",
        "Documentation.LongDescription": "從 <code>errorRecord</code> 在檢視定義的處理常式透過 [表格檢視]建立已修改的錯誤記錄擲回時，不會觸發後援。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "建立可由檢視上定義的處理常式攔截的函式 (透過 Table.View)。",
        "Documentation.LongDescription": "<p>根據可在 <code>Table.View</code> 建立的檢視中所處理的 <code>function</code> 來建立檢視函式。</p>\r\n<p><code>Table.View</code> 的 <code>OnInvoke</code> 處理常式可用於定義檢視函式的處理常式。</p>\r\n<p>如同內建作業的處理常式，若未指定 <code>OnInvoke</code> 處理常式，或其未處理檢視函式，或是該處理常式引發錯誤，則會將 <code>function</code> 套用至檢視頂端。</p>\r\n<p>如需更完整之 <code>Table.View</code> 與自訂檢視函式的描述，請參閱已發佈的 Power Query 自訂連接器文件。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "傳回移除所有控制字元的文字值。",
        "Documentation.LongDescription": "傳回移除所有控制字元 <code>text</code> 的文字值。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "從文字值中移除換行字元以及其他控制字元。",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "將文字值的清單串連成一個文字值。",
        "Documentation.LongDescription": "傳回將文字值清單 <code>texts</code> 結合成單一文字值的結果。會忽略 <code>texts</code> 中出現的任何 <code>null</code> 值。\r\n    可以指定在最終結合文字中使用的選用 <code>separator</code>。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "結合文字值 \"Seattle\" 與 \"WA\"。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "結合文字值 \"Seattle\" 和 \"WA\"，並以逗號和空格分隔。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "結合值 \"Seattle\"、<code>null</code> 和 \"WA\"，並以逗號和空格分隔。(請注意，會忽略 <code>null</code>。)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "根據指定的值建立文字值。",
        "Documentation.LongDescription": "傳回 <code>value</code> 的文字表示法。<code>value</code> 可以是 <code>number</code>、<code>date</code>、<code>time</code>、<code>datetime</code>、<code>datetimezone</code>、<code>logical</code>、<code>duration</code> 或 <code>binary</code> 值。\r\n    如果指定的值為 null，則 <code>Text.From</code> 會傳回 null。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "根據數字 3 建立文字值。",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "將二進位格式的資料解碼成文字。",
        "Documentation.LongDescription": "使用 <code>encoding</code> 類型，將二進位值的資料 <code>binary</code> 解碼成文字值。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "推斷在文字中編碼之數字的細微數字類型 (Int64.Type、Double.Type 等)。",
        "Documentation.LongDescription": "推斷 <code>text</code> 的細微數字類型 (Int64.Type、Double.Type 等)。如果 <code>text</code> 不是數字，就會引發錯誤。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "傳回字元數。",
        "Documentation.LongDescription": "傳回文字 <code>text</code> 中的字元數。",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "找出文字 \"Hello World\" 有多少個字元。",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "將所有字元轉換成小寫。",
        "Documentation.LongDescription": "傳回將 <code>text</code> 中所有字元轉換成小寫的結果。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "取得 \"AbCd\" 的小寫版本。",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "將每個字的第一個字母變成大寫。",
        "Documentation.LongDescription": "傳回只將文字值 <code>text</code> 中每個字第一個字母變成大寫的結果。所有其他字母都以小寫格式傳回。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "將 <code>Text.Proper</code> 用於簡單的句子。",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "反轉提供的 <code>text</code>。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "反轉文字 \"123\"。",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "將文字編碼成二進位格式。",
        "Documentation.LongDescription": "使用指定的 <code>encoding</code>，將指定的文字值 <code>text</code> 編碼成二進位值。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "根據指定的文字值傳回字元值的清單。",
        "Documentation.LongDescription": "根據指定的文字值 <code>text</code> 傳回字元值的清單。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "根據文字 \"Hello World\" 建立字元值的清單。",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "移除所有開頭和尾端空白字元。",
        "Documentation.LongDescription": "傳回從文字值 <code>text</code> 中移除所有開頭和尾端空白字元的結果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "從 \"     a b c d    \" 中移除開頭和尾端空白字元。",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "移除所有尾端空白字元。",
        "Documentation.LongDescription": "傳回從文字值 <code>text</code> 中移除所有尾端空白字元的結果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "從 \"     a b c d    \" 中移除尾端空白字元。",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "移除所有開頭空白字元。",
        "Documentation.LongDescription": "傳回從文字值 <code>text</code> 中移除所有開頭空白字元的結果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "從 \"     a b c d    \" 中移除開頭空白字元。",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "將所有字元轉換成大寫。",
        "Documentation.LongDescription": "傳回將 <code>text</code> 中所有字元轉換成大寫的結果。也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "取得 \"aBcD\" 的大寫版本。",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "傳回小時的結束時間。",
        "Documentation.LongDescription": "傳回以 <code>dateTime</code> 代表的小時結束時間，包括小數秒數。時區資訊會保留。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要計算小時結束時間的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "取得 5/14/2011 05:00:00 PM 的小時結尾。",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "取得 5/17/2011 05:00:00 PM -7:00 的小時結尾。",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "根據指定的值建立時間。",
        "Documentation.LongDescription": "從指定的 <code>value</code> 傳回 <code>time</code> 值。也可能會提供選用的 <code>culture</code> (例如 \"en-US\")。\r\n若指定的 <code>value</code> 是 <code>null</code>，則 <code>Time.From</code> 會傳回 <code>null</code>。若指定的 <code>value</code> 是 <code>time</code>，則會傳回 <code>value</code>。可以將下列類型的值轉換成 <code>time</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 以文字表示的 <code>time</code> 值。如需詳細資料，請參閱 <code>Time.FromText</code>。</li>\r\n        <li><code>datetime</code>: <code>value</code> 的時間元件。</li>\r\n        <li><code>datetimezone</code>: 等於 <code>value</code> 之本地日期時間的時間元件。</li>\r\n        <li><code>number</code>: 等於 <code>value</code> 所表示分數天數的 <code>time</code>。若 <code>value</code> 是負值或者大於或等於 1，就會傳回錯誤。</li>\r\n      </ul>\r\n若 <code>value</code> 是其他任何類型，則會傳回錯誤。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "將 <code>0.7575</code> 轉換成 <code>time</code> 值。",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "將 <code>#datetime(1899, 12, 30, 06, 45, 12)</code> 轉換成 <code>time</code> 值。",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "根據本機、國際和自訂時間格式建立時間。",
        "Documentation.LongDescription": "以文字表示 (<code>text</code>) 建立 <code>time</code> 值。可能會提供選用的 <code>record</code> 參數 <code>options</code> 來指定其他屬性。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將導致盡量剖析時間。</li>\r\n   <li><code>Culture</code> 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"tt\"</code> 為 <code>\"AM\" 或 \"PM\"</code>，在 <code>\"ar-EG\"</code> 中，<code>\"tt\"</code> 為 <code>\"ص\" 或 \"م\"</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 也可以是文字值。這與 <code>options</code><code> = Format = null, Culture = <code>options</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "將 <code>\"10:12:31am\"</code> 轉換成時間值。",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "將 <code>\"1012\"</code> 轉換成 Time 值。",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "將 <code>\"10\"</code> 轉換成 Time 值。",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "傳回小時元件。",
        "Documentation.LongDescription": "傳回提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的小時元件。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "尋找 #datetime(2011, 12, 31, 9, 15, 36) 的小時。",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "傳回分鐘元件。",
        "Documentation.LongDescription": "傳回提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的分鐘元件。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "尋找 #datetime(2011, 12, 31, 9, 15, 36) 的分鐘。",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "傳回秒鐘元件。",
        "Documentation.LongDescription": "傳回提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的秒鐘元件。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "從 datetime 值尋找第二個值。",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "傳回小時的開始時間。",
        "Documentation.LongDescription": "傳回以 <code>dateTime</code> 代表的小時開始時間。\r\n    <code>dateTime</code> 必須是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "找出 2011 年 10 月 10 日上午 8:10:32 的小時開始時間。",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "傳回一筆包含時間值各部分的記錄。",
        "Documentation.LongDescription": "傳回記錄，內含指定的 time 值 <code>time</code> 各部分。\r\n <ul>\r\n        <li><code>time</code>: 要將其各部分計算成記錄的 <code>time</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#time(11, 56, 2)</code> 值轉換成包含時間值的記錄。",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "傳回時間值的文字表示法。",
        "Documentation.LongDescription": "傳回以文字表示的 <code>time</code>。可能會提供選用的 <code>record</code> 參數 (<code>options</code>) 來指定其他屬性。<code>culture</code> 僅用於舊版工作流程。<code>record</code> 可能包含下列欄位:\r\n<ul>\r\n   <li><code>Format</code>: A <code>text</code> 值，表示要使用的格式。如需詳細資料，請前往 https://go.microsoft.com/fwlink/?linkid=2180104 與 https://go.microsoft.com/fwlink/?linkid=2180105。省略此欄位或提供 <code>null</code> 將會導致使用 <code>Culture</code> 定義的預設將日期格式化。</li>\r\n   <li><code>Culture</code>: 當 <code>Format</code> 不是 null 時，<code>Culture</code> 會控制一些格式規範。例如，在 <code>\"en-US\"</code> 中，<code>\"tt\"</code> 為 <code>\"AM\" 或 \"PM\"</code>，在 <code>\"ar-EG\"</code> 中，<code>\"tt\"</code> 為 <code>\"ص\" 或 \"م\", ...</code>。當 <code>Format</code> 是 <code>null</code> 時，<code>Culture</code> 會控制要使用的預設格式。當 <code>Culture</code> 是 <code>null</code> 或已省略時，會使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n若要支援舊版工作流程，<code>options</code> 與 <code>culture</code> 也可以是文字值。這與 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 具有相同的行爲。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "將 <code>#time(01, 30, 25)</code> 轉換爲 <code>text</code> 值。<i>結果輸出可能因目前文化特性而有所不同。</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "使用自訂格式和德文文化特性進行轉換。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "使用標準時間格式進行轉換。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "傳回指定記錄類型的封閉版本 (如果己經是封閉版本則需為相同類型)。",
        "Documentation.LongDescription": "傳回指定 <code>record</code> <code>type</code> 的封閉版本 (如果己經是封閉版本則需為相同類型)。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "建立 <code>type [ A = number,…]</code> 的封閉版本。",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "傳回類型的 Facet。",
        "Documentation.LongDescription": "傳回包含 <code>type</code> 之 Facet 的記錄。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "傳回記錄，包含函數類型參數名稱的資料行值的記錄，以及其相對應類型的值設定。",
        "Documentation.LongDescription": "傳回記錄，包含 <code>type</code> 參數名稱的資料行值的記錄，以及其相對應類型的值設定。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "尋找函數 <code>(x as number, y as text)</code> 的參數類型。",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "傳回數字，表示叫用函數類型所需的最少參數數目。",
        "Documentation.LongDescription": "傳回數字，表示叫用函數輸入 <code>type</code> 所需的最少參數數目。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "尋找函數 <code>(x as number, optional y as text)</code> 的必要參數數目。",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "傳回由函數類型傳回的類型。",
        "Documentation.LongDescription": "傳回由函數 <code>type</code> 傳回的類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "尋找 <code>() as any)</code> 的傳回類型。",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "若類型為可為 Null 類型時傳回 true；否則傳回 false。",
        "Documentation.LongDescription": "若類型為 <code>nullable</code> 類型時傳回 <code>true</code>；否則為 <code>false</code>。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "判斷 <code>number</code> 是否可為 Null。",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "判斷是否 <code>type nullable number</code> 可為 Null。",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "傳回記錄類型是否開啟。",
        "Documentation.LongDescription": "傳回 <code>logical</code> 表示記錄 <code>type</code> 是否開啟。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "判斷記錄 <code>type [ A = number, ...]</code> 是否開啟。",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "從清單類型傳回項目類型。",
        "Documentation.LongDescription": "從清單 <code>type</code> 傳回項目類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "從清單 <code>{number}</code> 中尋找項目類型。",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "從類型傳回非可為 Null 類型。",
        "Documentation.LongDescription": "從 <code>type</code> 傳回非 <code>nullable</code> 類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "傳回 <code>type nullable number</code> 的可為 Null 類型。",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "傳回指定記錄類型的開放版本 (如果已經是開放版本，則要是相同類型)。",
        "Documentation.LongDescription": "傳回指定 <code>record</code> <code>type</code> 的開放版本 (如果已經是開放版本，則要是相同類型)。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "建立開放版本的 <code>type [ A = number]</code>。",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "傳回記錄，說明具有已傳回記錄類型的每個資料行的記錄類型都有相對應的名稱和值。",
        "Documentation.LongDescription": "傳回記錄，說明記錄 <code>type</code> 的欄位。傳回之記錄類型的每個欄位都有其對應名稱與值，並會以下列記錄格式表示: <code>[ Type = type, Optional = logical ]</code>。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "尋找記錄 <code>[ A = number, optional B = any]</code> 的名稱和值。",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "針對指定的資料表類型傳回可能空白的索引鍵清單。",
        "Documentation.LongDescription": "傳回指定資料表類型的索引鍵清單可能為空白。<br>\r\n    <br>\r\n    每個索引鍵都是使用下列格式的記錄來定義:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 定義索引鍵的資料行名稱清單\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 如果索引鍵是資料表的主索引鍵，則為 <code>true</code>; 否則為 <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "傳回資料表類型的索引鍵資訊。",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "傳回資料表類型的資料列類型。",
        "Documentation.LongDescription": "傳回指定資料表類型的資料列類型。結果永遠會是記錄類型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "傳回簡單資料表的資料列類型資訊。",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "傳回類型清單的聯集。",
        "Documentation.LongDescription": "傳回 <code>types</code> 中的類型聯集。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "將記錄組合至 URI 查詢字串中。",
        "Documentation.LongDescription": "將記錄 <code>query</code> 組合至 URI 查詢字串中，依需要逸出字元。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "將包含某些特殊字元的查詢字串編碼。",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "依據 RFC 3986 將特殊字元編碼。",
        "Documentation.LongDescription": "依據 RFC 3986 將輸入 <code>data</code> 中的特殊字元編碼。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "將 \"+money$\" 中的特殊字元編碼。",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "將輸入絕對 URI 的各部分傳回成記錄。",
        "Documentation.LongDescription": "將輸入 <code>absoluteUri</code> 的各部分傳回成記錄，包含 Scheme、Host、Port、Path、Query、Fragment、UserName 和 Password 等值。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "尋找絕對 URI \"www.adventure-works.com\" 的各部分。",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "將百分比編碼字串解碼。",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "請輸入您 Azure DevOps Analytics 服務的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "以二進位值格式傳回從 Azure DevOps Analytics Service URL 下載的內容。此函式對不同的組織使用不同的認證。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "請輸入您 Azure DevOps Analytics 服務的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "以二進位值格式傳回從 Azure DevOps Analytics Service URL 下載的內容。此函式會對所有能夠存取的組織使用全域認證。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "表示替代查詢計劃。",
        "Documentation.LongDescription": "在透過 Value.Expression(Value.Optimize(...)) 取得的查詢計劃運算式中，表示替代查詢計劃。不適用於其他用途。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "傳回代表值運算式的抽象語法樹狀結構 (AST)。",
        "Documentation.LongDescription": "傳回代表值運算式的抽象語法樹狀結構 (AST)",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "根據文字表示建立強型別值。",
        "Documentation.LongDescription": "從文字表示法 <code>text</code> 解碼值，並將其解譯為具有適當類型的值。\r\n    <code>Value.FromText</code> 接受文字值，並會傳回數字、邏輯值、null 值、日期時間值、持續時間值或文字值。空白的文字值會解譯為 null 值。\r\n    也可提供選用的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "傳回包含輸入中繼資料的記錄。",
        "Documentation.LongDescription": "傳回包含輸入中繼資料的記錄。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "發出 Value.Expression 訊號以傳回值的最佳化運算式。",
        "Documentation.LongDescription": "在 Value.Expression 內使用時，如果 <code>value</code> 代表可最佳化的查詢，則此函式表示應該傳回最佳化的運算式。否則將會通過 <code>value</code>，而沒有任何效果。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "移除中繼資料的輸入。",
        "Documentation.LongDescription": "移除中繼資料的輸入。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "傳回指定值的類型。",
        "Documentation.LongDescription": "傳回指定值的類型。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "此函式僅供內部使用。",
        "Documentation.LongDescription": "此函式僅供內部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "如網頁瀏覽器所檢視，傳回指定 URL 的 HTML。",
        "Documentation.LongDescription": "傳回指定 <code>url</code> 的 HTML，如網頁瀏覽器的檢視內容。您可提供選擇性記錄參數 <code>options</code> 來指定其他屬性。記錄可以包含下列欄位:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: 若目標網站採用 API 金鑰的概念，則可使用此參數來指定 URL 中必須使用的金鑰參數名稱 (而非值)。系統會在認證中提供實際的金鑰值。</li>\r\n        <li><code>WaitFor</code>: 指定在下載 HTML 前除了等待頁面載入 (這一律會完成) 以外的等待條件。可以是包含 Timeout 和 (或) Selector 欄位的記錄。如果只指定 Timeout，函式會先等待指定的時間長度，再下載 HTML。如果同時指定 Selector 和 Timeout，而且 Timeout 在 Selector 出現於頁面上之前就已結束，就會擲回錯誤。若指定 Selector 但未指定 Timeout，會套用預設為 30 秒的 Timeout。</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "正在存取資料",
        "Documentation.Examples": [
          {
            "Description": "傳回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "等待 CSS 選取器出現之後，為 https://microsoft.com 傳回 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "在等待十秒後傳回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "等待 CSS 選取器出現 (最長 10 秒) 之後，為 https://microsoft.com 傳回 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "將從 URL 下載的內容傳回成二進位。",
        "Documentation.LongDescription": "以二進位形式傳回從 <code>url</code> 下載的內容。可提供選擇性記錄參數 <code>options</code> 以指定其他屬性。記錄可以包含下欄欄位:\r\n    <ul>\r\n<li><code>Query</code> : 以程式設計方式將查詢參數新增至 URL 中，無須擔心逸出。</li>\r\n<li><code>ApiKeyName</code> : 若目標網站採用 API 金鑰的概念，則可使用此參數來指定 URL 中必須使用的金鑰參數名稱 (而非值)。系統會在認證中提供實際的金鑰值。</li>\r\n<li><code>Headers</code> : 將此值指定為記錄，會為 HTTP 要求提供其他標頭。</li>\r\n<li><code>Timeout</code> : 將此值指定為持續時間，會變更 HTTP 要求的逾時時間。預設值為 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 將此值指定為清單，會在計算快取資料時排除這些 HTTP 標頭金鑰。</li>\r\n<li><code>IsRetry</code> : 將此邏輯值指定為 true 時，會在擷取資料時忽略快取中的任何現有回應。</li>\r\n<li><code>ManualStatusHandling</code> : 將此值指定為清單，會防止針對回應具有以下任一狀態碼的 HTTP 要求進行任何內建處理。</li>\r\n<li><code>RelativePath</code> : 將此值指定為文字，會在提出要求前將其附加到基底 URL。</li>\r\n<li><code>Content</code> : 指定此值會將 Web 要求從 GET 變更為 POST，方法是使用選項值作為 POST 的內容。</li>\r\n</ul>\r\n\r\n    HTTP 要求會以 GET (未指定內容時) 或 POST (有內容時) 形式進行。POST 要求只能匿名進行。\r\n    <br>\r\n    HTTP 回應的標頭可以二進位結果上的中繼資料形式取得。除了自訂資料連線器內容以外，只能取得回應標頭的子集 (基於安全性理由)。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "使用 RelativePath 和 Query 選項來擷取 <code>\"https://bing.com/search?q=Power+Query\"</code> 的內容。這些選項可用於動態查詢靜態基底 URL。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "針對 URL 執行張貼，傳遞二進位 JSON 承載並將回應剖析為 JSON。",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "連線到接受驗證金鑰作為查詢字串一部分的安全 URL。而不是在 M 中硬式編碼驗證金鑰 (這會造成安全性風險)，\r\n    在 M 中指定金鑰的名稱 (而不是其值)，並選擇 Web API 驗證，以及在 Web API 認證中輸入金鑰值，即可安全地提供金鑰。\r\n    以此方式使用時，下列範例會產生 <code>\"https://contoso.com/api/customers/get?api_key=******\"</code> 的要求。",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "以記錄值形式傳回從該 URL 下載的 HTTP 標頭。",
        "Documentation.LongDescription": "以記錄形式傳回從 <code>url</code> 下載的標頭。可提供選擇性記錄參數 <code>options</code> 以指定其他屬性。記錄可以包含下欄欄位:\r\n    <ul>\r\n<li><code>Query</code> : 以程式設計方式將查詢參數新增至 URL 中，無須擔心逸出。</li>\r\n<li><code>ApiKeyName</code> : 若目標網站採用 API 金鑰的概念，則可使用此參數來指定 URL 中必須使用的金鑰參數名稱 (而非值)。系統會在認證中提供實際的金鑰值。</li>\r\n<li><code>Headers</code> : 將此值指定為記錄，會為 HTTP 要求提供其他標頭。</li>\r\n<li><code>Timeout</code> : 將此值指定為持續時間，會變更 HTTP 要求的逾時時間。預設值為 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 將此值指定為清單，會在計算快取資料時排除這些 HTTP 標頭金鑰。</li>\r\n<li><code>IsRetry</code> : 將此邏輯值指定為 true 時，會在擷取資料時忽略快取中的任何現有回應。</li>\r\n<li><code>ManualStatusHandling</code> : 將此值指定為清單，會防止針對回應具有以下任一狀態碼的 HTTP 要求進行任何內建處理。</li>\r\n<li><code>RelativePath</code> : 將此值指定為文字，會在提出要求前將其附加到基底 URL。</li>\r\n</ul>\r\n\r\n    HTTP 要求會以 HEAD 方法進行。除了自訂資料連線器內容以外，只能取得回應標頭的子集 (基於安全性理由)。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "使用 RelativePath 和 Query 選項擷取 <code>\"https://bing.com/search?q=Power+Query\"</code> 的 HTTP 標頭。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "作為存取控制項目 (ACE) 條件評估依據的授權內容。",
        "Documentation.LongDescription": "作為存取控制項目 (ACE) 條件評估依據的授權內容。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "存取控制項目 (ACE) 的資料表。",
        "Documentation.LongDescription": "存取控制項目 (ACE) 的排序資料表，代表授權規則。每一列都會對目前的授權內容 (依序) 進行評估，<code>Condition</code> 運算式傳回 true 的第一列會決定要套用哪個規則。<code>Action</code> 資料行代表此規則套用的動作種類。<code>AccessControlKind</code> 資料行會決定應允許或拒絕該動作的存取。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "指定存取控制的種類。",
        "Documentation.LongDescription": "指定存取控制的種類。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "代表所有值的類型。",
        "Documentation.LongDescription": "代表所有值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "代表所有二進位值的類型。",
        "Documentation.LongDescription": "代表所有二進位值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "指定二進位編碼類型。",
        "Documentation.LongDescription": "指定二進位編碼類型。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "指定這個項目應出現在群組中的次數。",
        "Documentation.LongDescription": "指定這個項目應出現在群組中的次數。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "描述要執行的緩衝類型。",
        "Documentation.LongDescription": "描述要執行的緩衝類型。",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "代表所有位元組的類型。",
        "Documentation.LongDescription": "代表所有位元組的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "指定位元組順序。",
        "Documentation.LongDescription": "指定位元組順序。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "代表所有字元的類型。",
        "Documentation.LongDescription": "代表所有字元的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "指定比較類型。",
        "Documentation.LongDescription": "指定比較類型。",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "指定 CSV 文件中單引號的有效性。",
        "Documentation.LongDescription": "指定 CSV 文件中單引號的有效性。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "代表目前值的類型。",
        "Documentation.LongDescription": "代表目前值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "代表所有日期值的類型。",
        "Documentation.LongDescription": "代表所有日期值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "代表所有沒有相關時區之日期和時間值的類型。",
        "Documentation.LongDescription": "代表所有沒有相關時區之日期和時間值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "代表所有與時區相對之日期和時間值的類型。",
        "Documentation.LongDescription": "代表所有與時區相對之日期和時間值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "指定星期幾。",
        "Documentation.LongDescription": "指定星期幾。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "代表固定點十進位數字的類型。",
        "Documentation.LongDescription": "代表固定點十進位數字的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "代表雙精確度浮點數的類型。",
        "Documentation.LongDescription": "代表雙精確度浮點數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "代表所有工期值的類型",
        "Documentation.LongDescription": "代表所有工期值的類型",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "指定其內含的資料行多於預期的資料列中，對額外的值所預計進行的動作。",
        "Documentation.LongDescription": "指定其內含的資料行多於預期的資料列中，對額外的值所預計進行的動作。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "代表所有函數的類型。",
        "Documentation.LongDescription": "代表所有函數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "指定分組種類。",
        "Documentation.LongDescription": "可以使用相同的機碼值產生多個本機群組，但對於給定的機碼值只產生一個全域群組。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "代表 GUID 值的類型。",
        "Documentation.LongDescription": "代表 GUID 值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "身分識別代表使用者、群組、裝置或其他可識別的項目。",
        "Documentation.LongDescription": "身分識別代表使用者、群組、裝置或其他可識別的項目。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "定義在其中建立及比較身分識別的範圍。",
        "Documentation.LongDescription": "定義在其中建立及比較身分識別的範圍。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "代表帶正負號 16 位元整數的類型。",
        "Documentation.LongDescription": "代表帶正負號 16 位元整數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "代表帶正負號 32 位元整數的類型。",
        "Documentation.LongDescription": "代表帶正負號 32 位元整數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "代表帶正負號 64 位元整數的類型。",
        "Documentation.LongDescription": "代表帶正負號 64 位元整數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "代表帶正負號 8 位元整數的類型。",
        "Documentation.LongDescription": "代表帶正負號 8 位元整數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "指定用於 JOIN 運算的 JOIN 演算法。",
        "Documentation.LongDescription": "指定用於 JOIN 運算的 JOIN 演算法。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "指定 JOIN 運算種類。",
        "Documentation.LongDescription": "指定 JOIN 運算種類。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "指定聯結的左方或右方資料表。",
        "Documentation.LongDescription": "指定聯結的左方或右方資料表。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "描述由此資料來源使用之 SQL 方言支援的限制子句類型。",
        "Documentation.LongDescription": "描述由此資料來源使用之 SQL 方言支援的限制子句類型。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "代表所有清單的類型。",
        "Documentation.LongDescription": "代表所有清單的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "代表所有邏輯值的類型。",
        "Documentation.LongDescription": "代表所有邏輯值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "指定其內含的資料行少於預期的資料列中，對遺漏的值所預計進行的動作。",
        "Documentation.LongDescription": "指定其內含的資料行少於預期的資料列中，對遺漏的值所預計進行的動作。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "代表 Null 的類型。",
        "Documentation.LongDescription": "代表 Null 的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "代表所有數字的類型。",
        "Documentation.LongDescription": "代表所有數字的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "指定 OData 服務可省略之值的種類。",
        "Documentation.LongDescription": "指定 OData 服務可省略之值的種類。",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "指定序列中項目的出現次數。",
        "Documentation.LongDescription": "指定序列中項目的出現次數。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "指定排序方向。",
        "Documentation.LongDescription": "指定排序方向。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "代表文字密碼的類型。",
        "Documentation.LongDescription": "代表文字密碼的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "此類型代表百分比值。",
        "Documentation.LongDescription": "此類型代表百分比值。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "指定百分位數模式類型。",
        "Documentation.LongDescription": "指定百分位數模式類型。",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "指定比較的有效位數。",
        "Documentation.LongDescription": "指定比較的有效位數。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "指定引號樣式。",
        "Documentation.LongDescription": "指定引號樣式。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "指定排名類型。",
        "Documentation.LongDescription": "指定排名類型。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "代表所有記錄的類型。",
        "Documentation.LongDescription": "代表所有記錄的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "表示編製索引時，是否應從輸入的開頭或結尾開始進行。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "指定四捨五入得出的數值可能相等時的捨入方向。",
        "Documentation.LongDescription": "指定四捨五入得出的數值可能相等時的捨入方向。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "SAP Business Warehouse 執行模式選項的有效選項。",
        "Documentation.LongDescription": "SAP Business Warehouse 執行模式選項的有效選項。",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA 散發選項的有效選項。",
        "Documentation.LongDescription": "SAP HANA 散發選項的有效選項。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA 範圍輸入參數的範圍運算子。",
        "Documentation.LongDescription": "SAP HANA 範圍輸入參數的範圍運算子。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "代表單精確度浮點數的類型。",
        "Documentation.LongDescription": "代表單精確度浮點數的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "連接到 Spark 執行個體時所要使用的通訊協定。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "代表所有資料表的類型。",
        "Documentation.LongDescription": "代表所有資料表的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "代表所有文字值的類型。",
        "Documentation.LongDescription": "代表所有文字值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "指定文字編碼類型。",
        "Documentation.LongDescription": "指定文字編碼類型。",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "代表所有時間值的類型。",
        "Documentation.LongDescription": "代表所有時間值的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "指定追蹤層級。",
        "Documentation.LongDescription": "指定追蹤層級。",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "代表所有類型的類型。",
        "Documentation.LongDescription": "代表所有類型的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "代表文字 URI 的類型。",
        "Documentation.LongDescription": "代表文字 URI 的類型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "指定 HTTP 方法。",
        "Documentation.LongDescription": "指定 HTTP 方法。",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
