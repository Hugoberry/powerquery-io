{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Menghasilkan representasi struktural dari database Access.",
        "Documentation.LongDescription": "Menghasilkan representasi struktural dari database Access, <code>database</code>. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Mengembalikan database Analysis Services di host tertentu.",
        "Documentation.LongDescription": "Menghasilkan database pada instans Layanan Analisis, <code>server</code>.  Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Nilai logika yang mengindikasikan bahwa tipe yang ditentukan di model multi dimensi atau tabel akan digunakan untuk tipe kolom pengukuran yang ditambahkan. Saat diatur ke false, &quot;nomor&quot; tipe akan digunakan untuk semua kolom pengukuran. Nilai default untuk opsi ini adalah false.</li>\r\n<li><code>Culture</code> : Nama kultur yang menetapkan kultur untuk data. Hal ini berkaitan dengan properti string koneksi &#39;Pengidentifikasi Lokal&#39;.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default tergantung pada driver.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>SubQueries</code> : Angka (0, 1 atau 2) yang mengatur nilai properti &quot;SubQueries&quot; dalam string koneksi. Ini mengontrol perilaku anggota yang dihitung pada subpilih atau subkubus. (Nilai defaultnya adalah 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Kubus AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Impor/data kubus DirectQuery dari AtScale.",
        "Documentation.LongDescription": "\r\nMenghasilkan data kubus dari AtScale di server <code>server</code>. Parameter catatan opsional, <code>opsi</code>, dapat ditetapkan untuk mengontrol opsi berikut\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Nilai logika menunjukkan apakah tipe yang ditentukan dalam model tabular atau multidimensi akan digunakan untuk tipe kolom pengukuran yang ditambahkan. Bila diatur ke false, tipe \"nomor\" akan digunakan untuk semua kolom pengukuran. Nilai default untuk opsi ini adalah false.</li>\r\n        <li><code>CommandTimeout</code>: Durasi (dalam detik) yang mengontrol berapa lama kueri sisi server yang dapat dijalankan sebelum dibatalkan. Nilai defaultnya bergantung pada driver. </li>\r\n        <li><code>ConnectionTimeout</code>: Durasi (dalam detik) yang mengontrol berapa lama waktu tunggu sebelum menghentikan upaya untuk menyambungkan ke server. Nilai defaultnya bergantung pada driver. </li>\r\n\r\n</ul>\r\nParameter catatan ditetapkan sebagai [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Cantumkan data kubus dalam kubus AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Mengimpor data dari Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Mengimpor data dari instans Azure Data Explorer (Kusto) Anda",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan tabel informasi Aktivitas Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabel dengan Aktivitas Storm dari database \"Contoh\" dalam gugusan \"bantuan\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL Layanan Analitik Azure DevOps Anda.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Menghasilkan konten yang diunduh dari url Layanan Analitik Azure DevOps sebagai nilai biner. Fungsi ini menggunakan kredensial yang berbeda untuk organisasi yang berbeda."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Umpan Layanan Azure DevOps",
        "Documentation.DisplayName": "Umpan Layanan Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Menghasilkan tabel umpan OData yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Masukkan URL dari titik akhir API REST Azure Enterprise yang berhubungan dengan pendaftaran Anda",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Menghasilkan daftar laporan dan bulan yang tersedia dari API Azure Enterprise",
        "Documentation.Name": "Impor data dari Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Menggunakan fungsi AzureEnterprise.Tables dan bernavigasi ke nilai tertentu untuk memperoleh hasil.",
            "Code": "Izinkan\r\n    Sumber = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Konten = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Konten",
            "Result": "Tabel"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Lihat https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli untuk melihat sampel kueri permulaan.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan hasil kueri dari kueri pengguna 'sumber daya'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Cantumkan tabel dalam instansi Azure Spark.",
        "Documentation.LongDescription": "Cantumkan tabel dalam instansi Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Cantumkan tabel dalam instansi Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Menghasilkan tabel navigasi berisi kontainer yang terdapat di akun yang ditetapkan dari vault penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan tabel navigasi berisi baris untuk setiap kontainer yang terdapat pada URL akun, <code>account</code>, dari vault penyimpanan Azure. Setiap baris berisi tautan ke blob kontainer. <code>options</code> mungkin ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>BlockSize</code> : Jumlah byte untuk dibaca sebelum menunggu konsumen data. Nilai default adalah 4 MB.</li>\r\n<li><code>RequestSize</code> : Jumlah byte untuk mencoba dibaca dalam satu permintaan HTTP ke server. Nilai default adalah 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opsi ConcurrentRequests mendukung pengunduhan data yang lebih cepat dengan menentukan jumlah permintaan yang akan dibuat secara paralel, dengan biaya pemanfaatan memori. Memori yang diperlukan adalah (ConcurrentRequest * RequestSize). Nilai default adalah 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Memberikan tabel navigasi berisi dokumen yang ditemukan dalam wadah yang ditentukan dan subfoldernya dari Azure Data Lake Storage.",
        "Documentation.LongDescription": "Menghasilkan tabel navigasi berisi dokumen yang ditemukan dalam kontainer yang ditentukan dan subfoldernya pada URL akun, <code>endpoint</code>, dari sistem file Azure Data Lake Storage. <code>options</code> mungkin ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>BlockSize</code> : Jumlah byte untuk dibaca sebelum menunggu konsumen data. Nilai default adalah 4 MB.</li>\r\n<li><code>RequestSize</code> : Jumlah byte untuk mencoba dibaca dalam satu permintaan HTTP ke server. Nilai default adalah 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opsi ConcurrentRequests mendukung pengunduhan data yang lebih cepat dengan menentukan jumlah permintaan yang akan dibuat secara paralel, dengan biaya pemanfaatan memori. Memori yang diperlukan adalah (ConcurrentRequest * RequestSize). Nilai default adalah 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengontrol apakah file dihasilkan dalam tampilan direktori dalam susunan seperti pohon atau dalam daftar datar. Nilai default adalah false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Menghasilkan tabel navigasi berisi tabel yang terdapat di akun yang ditetapkan dari vault penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan tabel navigasi berisi baris untuk setiap tabel yang ditemukan di URL akun, <code>account</code>, dari vault penyimpanan Azure. Setiap baris berisi tautan ke tabel azure. Parameter data opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Data dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>Timeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan permintaan ke server. Nilai defaultnya bergantung khusus pada sumber.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight pada AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Fungsi ini tidak tersedia karena memerlukan .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (Warisan)",
        "Documentation.Caption": "Common Data Service (Warisan)",
        "Documentation.LongDescription": "Sambungkan ke instans Common Data Service Anda (Dynamics 365 dan PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Menghasilkan konten dokumen CSV sebagai tabel.",
        "Documentation.LongDescription": "Menghasilkan konten dokumen CSV sebagai tabel.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> dapat berupa null, jumlah kolom, daftar nama kolom, jenis tabel, atau catatan opsi.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> dapat berupa karakter tunggal, daftar karakter, atau nilai <code>\"\"</code>, yang menunjukkan baris harus dipisahkan dengan karakter spasi kosong yang berurutan. Default: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Lihat <code>ExtraValues.Type</code> untuk mengetahui nilai <code>extraValues</code> yang didukung.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> menentukan jenis pengodean teks.\r\n      </li>\r\n    </ul>\r\n\r\n    Jika catatan ditentukan untuk <code>columns</code> (serta <code>delimiter</code>, <code>extraValues</code>, dan <code>encoding</code> adalah null), bidang catatan berikut dapat diberikan:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: Pemisah kolom. Default: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: Dapat berupa null, jumlah kolom, daftar nama kolom, atau jenis tabel. Jika jumlah kolom lebih rendah daripada jumlah yang ditemukan di input, kolom tambahan akan diabaikan. Jika jumlah kolom lebih tinggi daripada jumlah yang ditemukan di input, kolom tambahan akan menjadi null. Bila tidak ditentukan, jumlah kolom akan ditentukan oleh jumlah yang ditemukan di input.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: Pengodean teks file. Default: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Menentukan bagaimana tanda kutip ditangani.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (default): Tanda kutip dalam bidang hanya penting jika muncul tepat setelah pemisah.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Tanda kutip dalam bidang selalu penting, di mana pun tanda kutip tersebut muncul.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Menentukan bagaimana hentian baris yang diapit tanda kutip ditangani.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (default): Hentian baris yang diapit tanda kutip diperlakukan sebagai bagian dari data, bukan sebagai akhir baris saat ini.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Semua hentian baris diperlakukan sebagai akhir baris saat ini, bahkan ketika hentian baris tersebut muncul di dalam nilai yang diapit tanda kutip.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Proses teks CSV dengan judul kolom",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Menghasilkan tabel berisi kumpulan dimensi yang tersedia.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi kumpulan dimensi yang tersedia dalam <code>cube</code>. Setiap dimensi adalah tabel berisi kumpulan atribut dimensi dan setiap atribut dimensi ditampilkan sebagai kolom dalam tabel dimensi. Dimensi dapat dibuka dalam kubus menggunakan Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Menghasilkan pohon tabel bersarang yang menunjukkan hierarki folder tampilan objek (misalnya, dimensi dan pengukuran).",
        "Documentation.LongDescription": "Menghasilkan pohon tabel bersarang yang menunjukkan hierarki folder tampilan objek (misalnya, dimensi dan pengukuran) yang dapat digunakan di <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Mengembalikan tabel yang berisi serangkaian properti pengukuran yang tersedia yang diperluas dalam kubus.",
        "Documentation.LongDescription": "Mengembalikan tabel yang berisi set properti yang tersedia untuk pengukuran yang diperluas dalam kubus.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Menghasilkan tabel berisi kumpulan pengukuran yang tersedia.",
        "Documentation.LongDescription": "Mengembalikan tabel berisi kumpulan pengukuran yang tersedia dalam <code>cube</code>.\r\n    Setiap pengukuran ditampilkan sebagai fungsi. Pengukuran dapat diterapkan pada kubus menggunakan Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Menghasilkan tabel berisi himpunan parameter yang dapat diterapkan ke kubus.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi himpunan parameter yang dapat diterapkan ke <code>cube</code>. Tiap parameter adalah fungsi yang dapat dijalankan untuk mendapatkan <code>cube</code> dengan parameter dan argumen yang diterapkan.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Menghasilkan tabel yang berisi set properti yang tersedia untuk dimensi yang diperluas dalam kubus.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi set properti yang tersedia untuk dimensi yang diperluas dalam kubus.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Masukkan URL akun Azure Data Lake Storage Gen1 Anda.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap folder dan file yang ditemukan di <code>url</code> dari Azure Data Lake Storage Gen1. Setiap baris berisi properti folder atau file dan tautan ke kontennya."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Masukkan URL akun Azure Data Lake Storage Anda.",
        "Documentation.LongDescription": "Memberikan tabel yang berisi baris untuk setiap file yang ditemukan di <code>url</code>, dari Azure Data Lake Storage Gen1. Setiap baris berisi properti file dan tautan ke kontennya."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Masukkan URL akun Azure Cosmos DB.",
        "Documentation.LongDescription": "Mengembalikan tabel database Azure Cosmos DB di <code>URL</code>. Jika <code>database</code> telah ditentukan, tabel kumpulan akan dikembalikan sebagai gantinya. Selain itu, jika bidang <code>Kueri</code> telah ditentukan dalam catatan <code>opsi</code>, hasil kueri yang dijalankan di database dan/atau kumpulan tertentu akan dikembalikan."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL titik akhir layanan OData Dynamics 365 Business Central (lokal) Anda.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (lokal)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (lokal)",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Dynamics 365 Business Central (lokal) yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL titik akhir layanan Dynamics NAV OData Anda.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Mengembalikan tabel dengan data Dynamics NAV yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Menghasilkan kubus dalam instans Essbase yang dikelompokkan oleh server Essbase.",
        "Documentation.LongDescription": "Menghasilkan tabel kubus yang dikelompokkan oleh server Essbase dari instans Essbase pada server AP <code>url</code>. Parameter catatan opsional, <code>options</code>, dapat ditetapkan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Menghasilkan konten buku kerja Excel.",
        "Documentation.LongDescription": "Menghasilkan konten buku kerja Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> dapat berupa null, nilai logis (true/false) mengindikasikan apakah baris pertama dari setiap tabel yang dihasilkan harus diperlakukan sebagai header, atau catatan opsi. Default: false.</li>\r\n     <li> <code>delayTypes</code> dapat berupa nilai null atau logis (true/false) yang mengindikasikan apakah kolom dari masing-masing tabel yang dihasilkan harus dibiarkan tidak diketikkan. Default: false.</li>\r\n    </ul>\r\n\r\n    Jika catatan ditentukan untuk <code>useHeaders</code> (dan <code>delayTypes</code> null), bidang catatan berikut dapat disediakan:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Dapat berupa nilai null atau logis (true/false) yang mengindikasikan apakah baris pertama pada setiap tabel yang dihasilkan harus diperlakukan sebagai header. Default: false.</li>\r\n     <li> <code>DelayTypes</code>: Dapat berupa nilai null atau logis (true/false) yang mengindikasikan apakah kolom dari setiap tabel yang dihasilkan harus dibiarkan tidak diketikkan. Default: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: Dapat berupa nilai null atau logis (true/false) yang menunjukkan apakah area lembar kerja yang berisi data harus disimpulkan dengan membaca lembar kerja itu sendiri, bukan dengan membaca metadata dimensi dari file. Hal ini dapat berguna jika dimensi metadata salah. Perhatikan bahwa opsi ini hanya didukung untuk file Open XML Excel, bukan untuk file Excel lawas. Default: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan konten Lembar1 dari buku kerja Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Menghasilkan tabel yang berisi properti dan konten dari file dan folder yang ditemukan di folder tertentu.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap folder dan file yang ditemukan dalam folder <code>path</code>. Setiap baris berisi properti folder atau file dan tautan ke kontennya. Parameter <code>options</code> saat ini hanya ditujukan untuk penggunaan internal.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Menghasilkan tabel berisi properti dan konten dari file yang ditemukan dalam folder dan subfolder yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap file yang ditemukan dalam folder <code>path</code> dan semua subfoldernya. Setiap baris berisi properti file dan tautan ke kontennya. Parameter <code>options</code> saat ini hanya ditujukan untuk penggunaan internal.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Mengimpor data dari database Google BigQuery menggunakan Azure AD",
        "Documentation.LongDescription": "\r\n      Menghasilkan tabel yang mencantumkan proyek yang tersedia di Google BigQuery menggunakan Azure AD untuk <code>ID Proyek Penagihan</code> . Parameter catatan opsional, <code>opsi</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Durasi yang mengontrol jumlah waktu tunggu sebelum membatalkan upaya untuk membuat koneksi ke server. Nilai default-nya adalah nilai Waktu Koneksi Habis ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Durasi yang mengontrol jumlah waktu kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan.</li>\r\n        <li><code>UseStorageApi</code>: Menentukan apakah akan menggunakan API Penyimpanan BigQuery untuk kumpulan hasil yang besar. Nilai default-nya adalah true untuk menggunakan API Penyimpanan. Atur ke false agar API Penyimpanan tidak digunakan</li>\r\n        <li><code>AudienceUri</code>: Ini adalah URI audiens yang dapat digunakan driver ODBC untuk permintaan pertukaran token. Bidang ini harus berupa URI yang sepenuhnya memenuhi syarat (yaitu //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread) dengan pool_id adalah nama unik global untuk mengidentifikasi kumpulan tenaga kerja.</li>\r\n      </ul>\r\n    Parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Cantumkan proyek yang tersedia di Google BigQuery menggunakan Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "Impor data dari GoogleSheets",
        "Documentation.LongDescription": "Impor data dari GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Menghasilkan tabel navigasi yang berisi kontainer yang ditemukan di akun yang ditetapkan dari kubah penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan tabel navigasi yang berisi baris dari tiap kontainer yang ditemukan di URL akun, <code>account</code>, dari kubah penyimpanan Azure. Tiap baris berisi tautan ke blob kontainer.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Menghasilkan tabel navigasi yang berisi kontainer yang ditemukan di akun yang ditetapkan dari kubah penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan tabel navigasi yang berisi baris untuk tiap kontainer yang ditemukan di URL akun, <code>account</code>, dari kubah penyimpanan Azure. Tiap baris berisi tautan ke blob kontainer.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Menghasilkan tabel berisi properti dan konten dari file dan folder yang ditemukan dalam folder yang ditetapkan dari sistem file Hadoop.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi baris untuk setiap folder dan file yang ditemukan pada URL folder, <code>url</code>, dari sistem file Hadoop. Setiap baris berisi properti folder atau file dan link ke kontennya.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Menghasilkan tabel berisi properti dan konten dari file yang ditemukan dalam folder dan subfolder yang ditetapkan dari sistem file Hadoop.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi baris untuk setiap file yang ditemukan pada URL folder, <code>url</code>, dan subfolder dari sistem file Hadoop. Setiap baris berisi properti file dan link ke kontennya.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Impor data dari kluster impala",
        "Documentation.LongDescription": "Impor data dari kluster impala <code>server</code>. Jika port tidak ditetapkan, maka port default 21050 akan digunakan.",
        "Documentation.Examples": [
          {
            "Description": "Buat daftar tabel dalam kluster impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Mengimpor data dari Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Content",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Mengimpor data dari instans Azure Data Explorer (Kusto) Anda",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan tabel informasi Aktivitas Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabel dengan Aktivitas Storm dari database \"Contoh\" dalam gugusan \"bantuan\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel dengan data dari titik akhir MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Melakukan panggilan ke API MailChimp dan menghasilkan himpunan data sebagai tabel. Secara otomatis membuat halaman dari semua hasil. Parameter entityName opsional dapat digunakan untuk titik akhir API dengan titik akhir akar dan entityName utama dalam respons JSON tidak cocok.",
        "Documentation.Examples": [
          {
            "Description": "Menarik tabel data dari titik akhir daftar API MailChimp.",
            "Code": "MailChimp.Collection ('daftar\")",
            "Result": "Tabel dengan data daftar."
          },
          {
            "Description": "Menarik tabel data dari titik akhir folder-kampanye API MailChimp.",
            "Code": "MailChimp.Collection(\"folder-kampanye\", \"folder\")",
            "Result": "Tabel dengan data folder-kampanye."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Menghasilkan hasil respons mentah dari MailChimp API.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Melakukan panggilan ke API MailChimp dan menghasilkan respons mentah.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan data mentah dari titik akhir API MailChimp reports/click-details untuk kampanye yang diberikan.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Data detail klik mentah dari kampanye yang diberikan."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Berikan fungsi kueri tingkat lanjut.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Berikan fungsi kueri tingkat lanjut.",
        "Documentation.Examples": [
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan dari 1-5-2017 hingga 15-6-2017",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data ringkasan dari 1-5-2017 hingga 15-6-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan untuk April 2017.",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-4-2017 hingga 30-4-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan dari April 2017 sampai sekarang.",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-4-2017 hingga 15-6-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan dari Desember sampai Februari ini ",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-12-2016 hingga 28-2-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan biaya marketplace untuk 18 bulan terakhir",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-12-2015 hingga 15-6-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan detail biaya untuk Juni dan Mei 2017",
            "Code": "\r\n      biarkan    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-5-2017 hingga 15-6-2017"
          },
          {
            "Description": "Dengan mengasumsikan hari ini adalah 03-07-2017, dapatkan detail biaya untuk Juli 2016",
            "Code": "\r\n      biarkan  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          hasil = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      di     \r\n          hasil\r\n    ",
            "Result": "Fungsi akan menghasilkan data antara 01-07-2016 hingga 31-07-2016"
          },
          {
            "Description": "Asumsikan hari ini adalah 13-7-2017, dapatkan ringkasan saldo untuk 10 bulan yang lalu ditambah 13 hari bulan ini",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Fungsi akan mengembalikan data dari 1-9-2016 hingga 13-7-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Mengembalikan sebuah tabel dari tabel SQL dan tampilan dari sumber data ODBC. ",
        "Documentation.LongDescription": "Menghasilkan sebuah tabel dari tabel SQL dan tampilan dari sumber data ODBC yang ditetapkan oleh string koneksi <code>connectionString</code>. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Sebuah parameter catatan opsional, <code>options</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya adalah 15 detik.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel SQL dan tampilan dari string koneksi yang disediakan.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Menghasilkan tabel dari tabel SQL, dan tampilan dari sumber data OLE DB.",
        "Documentation.LongDescription": "Menghasilkan tabel dari tabel SQL, dan tampilan dari sumber data OLE DB yang ditentukan oleh string koneksi <code>connectionString</code>. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Parameter catatan opsional, <code>options</code>, dapat disediakan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut ini:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL dari Oracle database.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL dari Oracle database di server <code>server</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Menghasilkan tabel apa pun yang ditemukan di file PDF.",
        "Documentation.LongDescription": "Menghasilkan tabel yang ditemukan dalam <code>pdf</code>. Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menetapkan properti tambahan. Data dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>Implementation</code> : Versi algoritma yang akan digunakan saat mengidentifikasi tabel. Versi lama hanya tersedia untuk kompatibilitas mundur guna mencegah kueri lama menjadi rusak oleh pembaruan algoritma. Versi terbaru akan selalu memberikan hasil terbaik. Nilai yang valid adalah &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot;, atau null.</li>\r\n<li><code>StartPage</code> : Menetapkan halaman pertama dalam rentang halaman untuk diperiksa. Default: 1.</li>\r\n<li><code>EndPage</code> : Menetapkan halaman terakhir dalam rentang halaman untuk diperiksa. Default: halaman terakhir dokumen.</li>\r\n<li><code>MultiPageTables</code> : Mengontrol apakah tabel serupa pada halaman berurutan akan digabungkan secara otomatis dalam satu tabel. Default: true.</li>\r\n<li><code>EnforceBorderLines</code> : Mengontrol apakah garis tepi selalu diterapkan sebagai batas sel (jika true), atau hanya digunakan sebagai salah satu petunjuk untuk menentukan batas sel (jika false). Default: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel yang terdapat dalam sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Masukkan URL akun Planview Projectplace Anda.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Planview Projectplace yang relevan."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "(Þỳťнóñ ѕсѓĩþт)",
        "Documentation.Description": "(Єхзĉΰтéš Ρỳŧħοń š¢ŕϊρτ äŉδ ѓзτůгⁿś δдτа ƒŗǻměş)",
        "Documentation.Examples": {
          "Description": "(Єхзĉΰтéš Ρỳŧħοń š¢ŕϊρτ äŉδ ѓзτůгⁿś δдτа ƒŗǻměş)",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "(Я §ĉяįрţ)",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Menghasilkan tabel dengan setiap baris adalah nama bidang dan nilai data input.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi kolom <code>Name</code> dan <code>Value</code> dengan baris untuk setiap bidang dalam <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dari data.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Menghasilkan paket di database HANA SAP.",
        "Documentation.LongDescription": "Menghasilkan tabel paket multidimensi dari database SAP HANA <code>server</code>. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution yang mengatur nilai dari properti &quot;Distribusi&quot; di string koneksi. Perutean pernyataan merupakan metode evaluasi node server yang benar dari sistem yang didistribusikan sebelum pelaksanaan pernyataan. Nilai defaultnya adalah SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Menentukan implementasi konektor SAP HANA yang akan digunakan.</li>\r\n<li><code>EnableColumnBinding</code> : Mengikat variabel ke kolom kumpulan hasil SAP HANA saat mengambil data. Mungkin berpotensi meningkatkan kinerja dengan biaya penggunaan memori yang sedikit lebih tinggi. Nilai defaultnya adalah false.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya adalah 15 detik.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Menghasilkan tabel berisi konten dari situs SharePoint.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap folder dan dokumen yang ditemukan pada situs SharePoint yang ditentukan, <code>url</code>. Setiap baris berisi properti folder atau file dan tautan ke kontennya. <code>options</code> dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Angka (14 atau 15) atau teks &quot;Otomatis&quot; yang menentukan versi API SharePoint yang digunakan untuk situs ini. API versi 14 akan digunakan jika belum ditentukan. Saat Otomatis ditetapkan, versi server akan ditemukan secara otomatis apabila memungkinkan, atau versi berubah ke 14 secara default. Situs SharePoint Bukan Berbahasa Inggris memerlukan setidaknya versi 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Menghasilkan tabel berisi dokumen dari situs SharePoint.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap dokumen yang ditemukan pada situs SharePoint yang ditentukan, <code>url</code>, dan subfolder. Setiap baris berisi properti folder atau file dan tautan ke kontennya. <code>options</code> dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Angka (14 atau 15) atau teks &quot;Otomatis&quot; yang menentukan versi API SharePoint yang digunakan untuk situs ini. API versi 14 akan digunakan jika belum ditentukan. Saat Otomatis ditetapkan, versi server akan ditemukan secara otomatis apabila memungkinkan, atau versi berubah ke 14 secara default. Situs SharePoint Bukan Berbahasa Inggris memerlukan setidaknya versi 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Menghasilkan tabel berisi konten dari Daftar SharePoint.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk setiap item Daftar yang ditemukan pada daftar SharePoint yang ditentukan, <code>url</code>. Setiap baris berisi properti Daftar. <code>options</code> dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Angka (14 atau 15) atau teks &quot;Otomatis&quot; yang menentukan versi API SharePoint yang digunakan untuk situs ini. API versi 14 akan digunakan jika belum ditentukan. Saat Otomatis ditetapkan, versi server akan ditemukan secara otomatis apabila memungkinkan, atau versi berubah ke 14 secara default. Situs SharePoint Bukan Berbahasa Inggris memerlukan setidaknya versi 15.</li>\r\n<li><code>Implementation</code> : Opsional. Menentukan versi konektor SharePoint yang akan digunakan. Nilai yang diterima adalah &quot;2.0&quot; atau null. Jika nilainya &quot;2.0&quot;, implementasi konektor SharePoint 2.0 akan digunakan. Jika nilai null, implementasi konektor SharePoint asli akan digunakan.</li>\r\n<li><code>ViewMode</code> : Opsional. Opsi ini hanya berlaku untuk implementasi 2.0. Nilai yang diterima &quot;Semua&quot; dan &quot;Default&quot;. Jika nilai tidak ditentukan, nilai akan diatur ke &quot;Semua&quot;. Jika nilai diatur ke &quot;Semua&quot;, tampilan menyertakan semua kolom buatan pengguna dan yang ditentukan sistem. Jika nilai diatur ke &quot;Default&quot;, tampilan akan disesuaikan dengan tampilan yang dilihat pengguna saat melihat daftar secara online dalam tampilan mana pun yang ditetapkan oleh pengguna sebagai tampilan Default di pengaturan mereka. Jika pengguna mengedit tampilan default untuk menambah atau menghapus kolom buatan pengguna atau yang ditentukan sistem, atau dengan membuat tampilan baru dan mengaturnya sebagai default, perubahan ini akan disebarkan melalui konektor.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Mencegah konektor menggunakan titik akhir terpisah untuk kolom catatan.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Menghasilkan tabel dari konten di URL tertentu yang diformat berdasarkan API SODA 2.0.",
        "Documentation.LongDescription": "Menghasilkan tabel dari konten di URL <code>url</code> tertentu yang diformat berdasarkan API SODA 2.0. URL harus mengarah ke sumber yang sesuai dengan SODA yang valid dan diakhiri dengan ekstensi .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Fungsi ini hanya dapat digunakan untuk memanggil salah satu titik akhir \"Lists\" yang diberikan oleh SparkPost API v1. Saat melakukan panggilan ke SparkPost API menggunakan fungsi ini, perlu diketahui bahwa SparkPost API memiliki batas pengiriman API yang ketat. Jika Anda melihat kode status 429 yang dihasilkan dari server SparkPost, ini menandakan bahwa Anda telah melampaui batas pengiriman dan harus menunggu beberapa saat sebelum membuat panggilan kembali.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan kolom tunggal yang dikumpulkan dengan data dari salah satu titik akhir SparkPost API v1 \"Lists\" (Lihat dokumentasi SparkPost untuk detailnya).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Mengambil tabel bawaan yang dibuka oleh konektor SparkPost dengan data yang dikumpulkan dari jumlah hari yang ditetapkan pengguna. Saat me-refresh tabel ini atau membuat panggilan ke API SparkPost menggunakan konektor ini, perlu diingat bahwa API SparkPost memiliki batas pengiriman API yang ketat. Jika Anda melihat kode status 429 yang dikembalikan dari server SparkPost, ini menandakan Anda telah mencapai batas dan perlu menunggu beberapa saat sebelum membuat panggilan lainnya. Saat memilih nilai untuk parameter Jumlah hari, perlu diingat bahwa API hanya menyimpan data yang berusia 6 bulan."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Menghasilkan tabel database di SQL Server.",
        "Documentation.LongDescription": "Menghasilkan tabel database pada SQL server tertentu, <code>server</code>. Parameter catatan opsional, <code>options</code>, dapat ditetapkan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Angka yang menetapkan nilai klausa kueri &quot;maxdop&quot; di kueri SQL yang dibuat.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logika (true/false) yang mengatur nilai properti &quot;MultiSubnetFailover&quot; di string koneksi (defaultnya adalah false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logika (true/false) yang, jika true, berupaya untuk melipat konversi tipe yang dapat gagal dan menyebabkan seluruh kueri gagal. Tidak disarankan untuk penggunaan umum.</li>\r\n<li><code>ContextInfo</code> : Nilai biner yang digunakan untuk menetapkan CONTEXT_INFO sebelum menjalankan setiap perintah.</li>\r\n<li><code>OmitSRID</code> : Logika (true/false) yang, jika true, menghilangkan SRID saat menghasilkan Well-Known Text dari tipe geometri dan geografi.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Nilai logis (true/false) yang, jika bernilai true, memungkinkan pelipatan kueri di seluruh database pada server yang sama. Nilai defaultnya false.</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditetapkan sebagai [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Tidak mendukung pengaturan kueri SQL agar berjalan di server. <code>Sql.Database</code> harus digunakan sebagai ganti menjalankan kueri SQL.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Melakukan panggilan ke Stripe API, dengan opsi untuk membatasi jumlah panggilan API yang dilakukan.",
        "Documentation.LongDescription": "Melakukan panggilan ke Stripe API di https://api.stripe.com/v1/<code>method</code>, dengan rekaman tambahan <code>query</code> yang diberikan sebagai parameter tambahan dan <code>pageLimit</code> opsional sebagai batas jumlah permintaan API. Data terbaru dikembalikan terlebih dahulu. Jika <code>pageLimit</code> tidak disebutkan, semua data akan dikembalikan. Stripe Versi 2015-10-16 sedang digunakan.",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan semua data biaya",
            "Code": "Stripe.Contents(\"biaya\")",
            "Result": "Tabel dengan semua data biaya dari akun Stripe saat ini"
          },
          {
            "Description": "Mengembalikan satu halaman data biaya",
            "Code": "Stripe.Contents(\"biaya\", [], 1)",
            "Result": "Tabel dengan data biaya terbaru untuk akun Stripe saat ini"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Mem-buffer tabel dalam memori, sehingga mengisolasi dari perubahan eksternal selama evaluasi.",
        "Documentation.LongDescription": "Mem-buffer tabel dalam memori, mengisolasinya dari perubahan eksternal selama evaluasi.\r\n    Buffering dangkal. Tindakan ini memaksa evaluasi nilai sel skalar apa pun, namun membiarkan nilai non-skalar (rekaman, daftar, tabel, dan sebagainya) sebagaimana adanya.\r\n    <br>\r\n    <br>\r\n    Catat bahwa menggunakan fungsi ini mungkin atau mungkin tidak akan membuat kueri Anda berjalan lebih cepat. Dalam beberapa kasus, hal ini dapat membuat kueri Anda berjalan lebih lambat karena tambahan \r\n    biaya membaca semua data dan menyimpannya di memori, serta fakta bahwa buffering mencegah pelipatan downstream. Jika data tidak perlu\r\n    di-buffer, tetapi Anda hanya ingin mencegah pelipatan downstream, gunakan <code>Table.StopFolding</code> sebagai gantinya.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Muat semua baris tabel SQL ke memori, sehingga setiap operasi downstream tidak akan lagi dapat mengkueri server SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Menghasilkan tabel yang merupakan hasil penggabungan daftar tabel.",
        "Documentation.LongDescription": "Mengembalikan tabel yang merupakan hasil penggabungan daftar tabel, <code>tables</code>. Tabel yang dihasilkan akan memiliki struktur tipe baris yang ditentukan oleh <code>columns</code> atau gabungan tipe input jika <code>columns</code> tidak ditentukan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menggabungkan tiga tabel seluruhnya.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Gabungkan tiga tabel dengan struktur berbeda.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Gabungkan dua tabel dan proyek ke tipe yang diberikan.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Mendemosikan header kolom ke baris pertama nilai.",
        "Documentation.LongDescription": "Mendemosikan header kolom (misalnya, nama kolom) ke baris pertama nilai. Nama kolom default adalah \"Column1\", \"Column2\", dan sebagainya.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mendemosikan baris pertama nilai dalam tabel.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Menghapus baris duplikat dari tabel.",
        "Documentation.LongDescription": "Menghapus baris duplikat dari tabel.\r\n    Parameter opsional, <code>equationCriteria</code>, menentukan kolom tabel mana yang diuji untuk duplikasi. Jika <code>equationCriteria</code> tidak ditentukan, semua kolom akan diuji.<br>\r\n    <br>\r\n    Karena Power Query terkadang memindahkan operasi tertentu ke sumber data backend (dikenal sebagai \"pelipatan\"), dan terkadang juga mengoptimalkan kueri dengan \r\n    melewati operasi yang tidak benar-benar diperlukan, secara umum tidak ada jaminan duplikat tertentu yang akan dipertahankan.\r\n    Misalnya, Anda tidak dapat mengasumsikan bahwa baris pertama dengan rangkaian nilai kolom yang unik akan tetap ada, dan baris di bawah tabel akan dihapus.\r\n    Jika Anda ingin penghapusan duplikat berperilaku seperti yang dapat diprediksi, pertama-tama buffer tabel menggunakan <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Menghapus baris duplikat dari tabel.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Menghapus baris duplikat dari kolom [b] dalam tabel <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Membuat tabel dari daftar kolom dan nilai yang ditetapkan.",
        "Documentation.LongDescription": "Membuat tabel tipe <code>columns</code> dari daftar <code>lists</code> yang berisi daftar bersarang dengan nama dan nilai kolom.\r\n    Jika beberapa kolom memiliki lebih banyak nilai daripada yang lain, nilai yang tidak ada akan diisi dengan nilai default, 'null', jika kolom tersebut dapat dijadikan null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dari daftar nama pelanggan dalam daftar. Tiap nilai dalam item daftar pelanggan menjadi nilai baris, dan tiap daftar menjadi kolom.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Membuat tabel dari daftar kolom tertentu dan daftar nama kolom.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Membuat tabel dengan jumlah kolom yang berbeda per baris. Nilai baris yang tidak ada adalah null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Mengkonversi daftar menjadi tabel dengan menerapkan fungsi pemisah yang ditetapkan pada setiap item dalam daftar.",
        "Documentation.LongDescription": "Mengkonversi daftar <code>list</code> menjadi tabel dengan menerapkan fungsi pemisah opsional, <code>splitter</code>, pada setiap item dalam daftar. Secara default, daftar tersebut diperkirakan sebagai daftar nilai teks yang dibagi dengan koma. <code>columns</code> opsional dapat berupa jumlah kolom, daftar kolom, atau TableType. <code>default</code> dan <code>extraValues</code> opsional juga dapat ditetapkan.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Buat tabel dari daftar menggunakan pemisah default.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Buat tabel dari daftar menggunakan pemisah kustom.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Buat tabel dari daftar menggunakan pemisah Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Mengkonversi daftar data menjadi tabel.",
        "Documentation.LongDescription": "Mengkonversi <code>records</code>, daftar data, menjadi tabel.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Membuat tabel dari catatan, menggunakan nama bidang catatan sebagai nama kolom.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Buat tabel dari catatan dengan kolom yang diketikkan dan memilih kolom angka.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Membuat tabel dari daftar nilai baris dan opsional kolom.",
        "Documentation.LongDescription": "Membuat tabel dari daftar <code>rows</code> dengan setiap elemen daftar berupa daftar dalam yang berisi nilai kolom untuk satu baris. Daftar opsional nama kolom, tipe tabel, atau bilangan kolom dapat diberikan untuk <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Membuat tabel dengan kolom [CustomerID] berisi nilai {1, 2} dan kolom [Name] berisi nilai {\"Bob\", \"Jim\"}, dan kolom [Phone] dengan nilai {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Menghasilkan tabel dengan kolom [CustomerID] dengan nilai {1, 2}, kolom [Name] dengan nilai {\"Bob\", \"Jim\"}, dan kolom [Phone] dengan nilai {\"123-4567\", \"987-6543\"}, yang mana [CustomerID] adalah jenis bilangan, dan [Name] serta [Phone] adalah jenis teks.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Membuat tabel dengan kolom dari nilai yang diberikan.",
        "Documentation.LongDescription": "Membuat tabel dengan kolom berisi nilai yang diberikan atau daftar nilai, <code>value</code>. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Nama kolom yang digunakan saat membuat tabel dari nilai skala atau daftar.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Membuat tabel dari nilai 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Membuat tabel dari daftar.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Membuat tabel dari nilai 1, dengan nama kolom ubahsuaian.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Menghasilkan informasi tentang cara tabel dipartisi.",
        "Documentation.LongDescription": "Menghasilkan informasi tentang cara tabel dipartisi.  Tabel akan dihasilkan dengan setiap kolom merupakan kolom partisi dalam tabel awal dan setiap baris sesuai dengan partisi dalam tabel awal.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Menghasilkan profil kolom tabel.",
        "Documentation.LongDescription": "<p>Menghasilkan profil untuk kolom di <code>table</code>.</p>\r\n<p>Informasi berikut dihasilkan untuk setiap kolom (jika berlaku):\r\n<ul>\r\n  <li>minimum</li>\r\n  <li>maksimum</li>\r\n  <li>rata-rata</li>\r\n  <li>deviasi standar</li>\r\n  <li>jumlah</li>\r\n  <li>jumlah null</li>\r\n  <li>jumlah terpisah</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Mempromosikan baris pertama nilai sebagai header kolom baru (yaitu nama kolom).",
        "Documentation.LongDescription": "Mempromosikan baris pertama nilai sebagai header kolom baru (yaitu nama kolom). Secara default, hanya nilai teks atau angka dipromosikan ke header. Opsi valid:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : Jika ditetapkan ke <code>true</code>, semua nilai skalar pada baris pertama dipromosikan ke header menggunakan <code>Culture</code>, jika ditentukan (atau lokal dokumen saat ini).\r\n    Untuk nilai yang tidak dapat dikonversi ke teks, nama kolom default akan digunakan.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : Nama kultur yang menentukan kultur untuk data.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mempromosikan baris pertama nilai dalam tabel.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Mempromosikan semua skalar pada baris pertama tabel ke header.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Menghasilkan tabel dengan baris hitungan pertama dilewati.",
        "Documentation.LongDescription": "Mengembalikan tabel yang tidak berisi jumlah baris yang ditetapkan pertama, <code>countOrCondition</code>, pada tabel <code>table</code>.\r\n    Jumlah baris yang dihapus akan tergantung pada parameter opsional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jika <code>countOrCondition</code> dihilangkan, hanya baris pertama yang dihapus. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah angka, baris sebanyak itu (dimulai dari atas) akan dihapus. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah kondisi, baris yang memenuhi kondisi tersebut akan dihapus hingga baris yang tidak memenuhi kondisi ditemukan.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus baris pertama dalam tabel.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Menghapus dua baris pertama dalam tabel.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Menghapus baris pertama dengan [CustomerID] <= 2 dari tabel.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Menghasilkan tabel dengan baris N terakhir dihapus.",
        "Documentation.LongDescription": "Mengembalikan tabel yang tidak berisi baris <code>countOrCondition</code> terakhir pada tabel <code>table</code>.\r\n        Jumlah baris yang dihapus akan tergantung pada parameter opsional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jika <code>countOrCondition</code> dihilangkan, hanya baris terakhir yang dihapus. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah angka, baris sebanyak itu (dimulai dari bawah) akan dihapus. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah kondisi, baris yang memenuhi kondisi tersebut akan dihapus hingga baris yang tidak memenuhi kondisi ditemukan.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus baris terakhir dalam tabel.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Menghapus baris terakhir dengan [CustomerID] > 2 dari tabel.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Menghasilkan tabel dengan baris dihapus dari tabel input yang berisi kesalahan di minimal salah satu selnya. Jika daftar kolom ditetapkan, maka hanya sel di kolom tertentu yang akan diperiksa apakah ada kesalahan.",
        "Documentation.LongDescription": "Menghasilkan tabel dengan baris dihapus dari tabel input yang berisi kesalahan di minimal salah satu selnya. Jika daftar kolom ditetapkan, maka hanya sel di kolom tertentu yang akan diperiksa apakah ada kesalahan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Hapus nilai kesalahan dari baris pertama.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Menghasilkan tabel dengan baris dalam susunan terbalik.",
        "Documentation.LongDescription": "Menghasilkan tabel dengan baris dari input <code>table</code> dalam susunan terbalik.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Membalik baris dalam tabel.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Menghasilkan tabel yang berisi deskripsi kolom (misalnya, skema) tabel tertentu.",
        "Documentation.LongDescription": "<p>Menghasilkan tabel yang mendeskripsikan kolom <code>table</code>.</p>\r\n<p>Setiap baris dalam tabel mendeskripsikan properti kolom <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Nama Kolom</b></td>\r\n    <td><b>Deskripsi</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Nama</code></td>\r\n    <td>Nama Kolom.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Posisi</code></td>\r\n    <td>Posisi berbasis 0 kolom di <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Nama tipe kolom.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Jenis</code></td>\r\n    <td>Jenis tipe kolom.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Apakah kolom dapat berisi nilai <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Basis numerik (misalnya, basis-2 atau basis-10) dari bidang <code>NumericPrecision</code> dan <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Presisi kolom numerik dalam basis yang ditentukan oleh <code>NumericPrecisionBase</code>. Ini adalah jumlah digit maksimum yang dapat direpresentasikan oleh nilai jenis ini (termasuk digit pecahan).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Skala kolom numerik dalam basis yang ditentukan oleh <code>NumericPrecisionBase</code>. Ini adalah jumlah digit di bagian pecahan nilai tipe ini. Nilai <code>0</code> menunjukkan skala tetap tanpa digit pecahan. Nilai <code>null</code> menunjukkan skala tidak diketahui (karena mengambang atau tidak ditentukan).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Jumlah maksimum digit pecahan yang didukung dalam bagian detik dari nilai tanggal atau waktu.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Jumlah maksimum karakter yang diizinkan dalam kolom <code>text</code>, atau jumlah maksimum bita yang diizinkan dalam kolom <code>biner</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Menunjukkan apakah panjang kolom ini dapat bervariasi (hingga <code>MaxLength</code>) atau ukurannya tetap.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Nama tipe kolom di sistem tipe asli dari sumber (misalnya, <code>nvarchar</code> untuk SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Ekspresi default untuk nilai kolom ini dalam bahasa ekspresi asli sumber (misalnya, <code>42</code> or <code>newid()</code> untuk SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Deskripsi</code></td>\r\n    <td>Deskripsi kolom.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Menghasilkan tabel hanya dengan baris dari tabel input yang berisi kesalahan di minimal salah satu selnya. Jika daftar kolom ditetapkan, maka hanya sel di kolom tertentu yang akan diperiksa apakah ada kesalahan.",
        "Documentation.LongDescription": "Menghasilkan tabel hanya dengan baris dari tabel input yang berisi kesalahan di minimal salah satu selnya. Jika daftar kolom ditetapkan, maka hanya sel di kolom tertentu yang akan diperiksa apakah ada kesalahan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pilih nama pelanggan dengan kesalahan dalam barisnya.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Menghasilkan tabel dengan hitungan baris pertama dilewati.",
        "Documentation.LongDescription": "Mengembalikan tabel yang tidak berisi jumlah baris yang ditetapkan pertama, <code>countOrCondition</code>, pada tabel <code>table</code>.\r\n    Jumlah baris yang dilewati akan tergantung pada parameter opsional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jika <code>countOrCondition</code> dihilangkan, hanya baris pertama yang dilewati. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah angka, baris sebanyak itu (dimulai dari atas) akan dilewati. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah kondisi, baris yang memenuhi kondisi tersebut akan dilewati hingga baris yang tidak memenuhi kondisi ditemukan.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Melewati baris pertama dalam tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Melewati dua baris pertama dalam tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Melewati baris pertama dengan [Price] > 25 pada tabel.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Mencegah operasi downstream agar tidak dijalankan terhadap sumber data asli.",
        "Documentation.LongDescription": "Mencegah operasi downstream agar tidak dijalankan terhadap sumber data asli di <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Mengambil data dari tabel SQL dengan cara yang mencegah operasi downstream berjalan sebagai kueri di server SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Membuat kolom menjadi baris dan baris menjadi kolom.",
        "Documentation.LongDescription": "Membuat kolom menjadi baris dan baris menjadi kolom.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Membuat baris tabel berisi pasangan nilai nama menjadi kolom.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Mendapatkan hubungan antara himpunan tabel.",
        "Documentation.LongDescription": "Mendapatkan hubungan antara himpunan tabel. <code>tables</code> himpunan dianggap memiliki struktur yang sama dengan tabel navigasi. Kolom yang didefinisikan oleh <code>dataColumn</code> berisi tabel data aktual.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL dari database Teradata.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL dari database Teradata pada server <code>server</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Masukkan jumlah bulan dari historis data Twilio untuk diambil kembali.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Mengembalikan tabel dengan data Twilio yang relevan."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Mengembalikan tabel yang berisi deskripsi kolom (skema) jenis tabel yang ditentukan.",
        "Documentation.LongDescription": "<p>Menghasilkan tabel yang menjelaskan kolom <code>tableType</code>.</p>\r\n<p>Lihat dokumentasi untuk <code>Table.Schema</code> untuk deskripsi tabel yang dihasilkan.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Umpan Layanan Azure DevOps",
        "Documentation.DisplayName": "Umpan Layanan Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Menghasilkan tabel umpan OData yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Menyambungkan ke Data Viva Insights",
        "Documentation.LongDescription": "Impor metrik dan data atribut mingguan dari Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan atribut yang terlihat dan metrik per minggu untuk setiap karyawan yang diukur dalam partisi.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Menghasilkan konten dokumen HTML yang dipecah menjadi struktur konstituennya, dan representasi dokumen penuh beserta teksnya setelah menghapus tag.",
        "Documentation.LongDescription": "Menghasilkan konten dokumen HTML yang dipecah menjadi struktur konstituennya, dan representasi dokumen penuh beserta teksnya setelah menghapus tag.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel dengan metrik Webtrends kunci.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Melakukan panggilan ke endpoint Webtrends KeyMetrics dan menghasilkan semua data sebagai tabel.",
        "Documentation.Examples": [
          {
            "Description": "Menarik tabel metrik kunci untuk penyewa 98765 dalam 30 terakhir",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabel metrik kunci"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Masukkan ID Profil yang terkait dengan akun Webtrends Anda.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Webtrends yang relevan."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Menyambungkan ke Data Viva Insights",
        "Documentation.LongDescription": "Impor metrik dan data atribut mingguan dari Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan atribut yang terlihat dan metrik per minggu untuk setiap karyawan yang diukur dalam partisi.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Menghasilkan konten dokumen XML sebagai tabel hierarkis.",
        "Documentation.LongDescription": "Menghasilkan konten dokumen XML sebagai tabel hierarkis.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Menghasilkan konten dokumen XML sebagai koleksi bersarang tabel yang diratakan.",
        "Documentation.LongDescription": "Menghasilkan konten dokumen XML sebagai koleksi bersarang tabel yang diratakan.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ambil konten file xml lokal.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Masukkan URL akun Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Mengembalikan tabel dengan data Zendesk yang relevan."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Menghasilkan kumpulan skema untuk sumber data ADO.NET.",
        "Documentation.LongDescription": "Menghasilkan kumpulan skema untuk sumber data ADO.NET dengan nama penyedia <code>providerName</code> dan string sambungan <code>connectionString</code>. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Parameter catatan opsional, <code>options</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Impor data dari database Amazon Redshift.",
        "Documentation.LongDescription": "Menghasilkan cantuman tabel dari tabel pada kluster Amazon Redshift <code>server</code> di database <code>database</code>.  Parameter catatan opsional, <code>opsi</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n<ul>\r\n<li><code>Nama Penyedia</code>: Nilai teks yang akan digunakan sebagai Nama Penyedia koneksi. Ini digunakan saat menggunakan Autentikasi Microsoft.</li>\r\n<li><code>Ukuran Batch</code>: Jumlah baris yang diambil dalam satu panggilan ke server.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Hasilkan sebuah tabel kubus multidimensi atau model tabular dari database Layanan Analisis.",
        "Documentation.LongDescription": "Menghasilkan tabel model kubus atau tabel multidimensi dari database Layanan Analisis <code>database</code> pada server <code>server</code>. Parameter catatan opsional, <code>options</code> dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>Query</code> : Kueri MDX asli yang digunakan untuk mengambil data.</li>\r\n<li><code>TypedMeasureColumns</code> : Nilai logika yang mengindikasikan bahwa tipe yang ditentukan di model multi dimensi atau tabel akan digunakan untuk tipe kolom pengukuran yang ditambahkan. Saat diatur ke false, &quot;nomor&quot; tipe akan digunakan untuk semua kolom pengukuran. Nilai default untuk opsi ini adalah false.</li>\r\n<li><code>Culture</code> : Nama kultur yang menetapkan kultur untuk data. Hal ini berkaitan dengan properti string koneksi &#39;Pengidentifikasi Lokal&#39;.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default tergantung pada driver.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>SubQueries</code> : Angka (0, 1 atau 2) yang mengatur nilai properti &quot;SubQueries&quot; dalam string koneksi. Ini mengontrol perilaku anggota yang dihitung pada subpilih atau subkubus. (Nilai defaultnya adalah 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Menghasilkan tabel yang mencantumkan tabel pada kluster Spark yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan tabel yang mencantumkan tabel pada kluster Spark <code>host</code> menggunakan <code>protokol</code>.  Protokol yang valid adalah:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel yang mencantumkan tabel pada kluster Spark yang ditentukan.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Masukkan nama organisasi dan proyek.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (Khusus papan)",
        "Documentation.LongDescription": "Menghasilkan tabel tampilan Analytics yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Impor data dari HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nMenghasilkan daftar tabel dari HDInsight Interactive Query yang ditentukan oleh <code>database</code> pada <code>server</code> HDInsight Interactive Query. Nomor port mungkin ditentukan secara opsional dengan server dan dipisahkan oleh titik dua. Parameter <code>opsi</code> opsional mungkin ditentukan untuk mengontrol opsi berikut:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Durasi yang mengontrol waktu tunggu sebelum menghentikan upaya penyambungan koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n        <li><code>CommandTimeout</code>: Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk berjalan sebelum dibatalkan. Nilai defaultnya tergantung pada driver.</li>\r\n</ul>\r\nParameter <code>options</code> ditentukan sebagai [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Menghasilkan tabel dengan kolom yang dipetakan ke atribut entitas dalam Common Data Model, termasuk jenis data.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Menghasilkan tabel dengan kolom yang dipetakan ke atribut entitas dalam Common Data Model, termasuk jenis data. Kolom dari definisi entitas akan ditambahkan jika tidak dipetakan, dan kolom yang belum dipetakan akan dihapus.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Menghasilkan kubus setelah menerapkan parameter ke kubus.",
        "Documentation.LongDescription": "Menghasilkan kubus setelah menerapkan <code>parameter</code> dengan <code>arguments</code> ke <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Mengubah granularitas dimensi konteks filter pada kubus dengan menutup atribut yang dipetakan pada kolom yang ditentukan.",
        "Documentation.LongDescription": "Mengubah granularitas dimensi konteks filter pada <code>cube</code> dengan menutup atribut yang dipetakan pada kolom <code>columnNames</code> yang ditentukan. Kolom juga dihapus dari tampilan tabular kubus.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Menggantikan kumpulan dimensi yang dihasilkan oleh Cube.Dimensions.",
        "Documentation.LongDescription": "Menggantikan kumpulan dimensi yang dihasilkan oleh <code>Cube.Dimensions</code>.\r\n    Misalnya, fungsi ini dapat digunakan untuk menambahkan kolom ID ke atribut dimensi sehingga sumber data dapat mengelompokkan ID, bukan nilai yang ditampilkan.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Menerapkan daftar fungsi kubus.",
        "Documentation.LongDescription": "Menerapkan daftar fungsi kubus, <code>transforms</code>, pada <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia dalam database Db2.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database Db2 di server <code>server</code> dalam instans database <code>database</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>Implementation</code> : Menentukan implementasi penyedia database internal yang akan digunakan. Nilai yang valid adalah: &quot;IBM&quot; dan &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Angka untuk CCSID (Pengidentifikasi Himpunan Karakter Berkode) untuk mendekode data biner Db2 FOR BIT ke dalam string karakter. Berlaku untuk Implementasi = &quot;Microsoft&quot;. Atur 0 untuk menonaktifkan konversi (default). Atur 1 untuk mengonversi berdasarkan pengodean database. Atur angka CCSID lain untuk mengonversi ke pengodean aplikasi.</li>\r\n<li><code>PackageCollection</code> : Menentukan nilai string untuk kumpulan paket (defaultnya adalah &quot;NULLID&quot;) untuk memungkinkan penggunaan paket yang dibagikan dan diperlukan agar dapat memproses pernyataan SQL. Berlaku untuk Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Menentukan apakah koneksi dibuat gateway Db2 Connect. Berlaku untuk Implementasi = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Mengambil himpunan data dari Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Menghasilkan tabel yang berisi properti dan konten blob yang ditemukan di kontainer yang ditetapkan dari kubah penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan tabel yang berisi baris untuk tiap file blob yang ditemukan di URL kontainer, <code>account</code>, dari kubah penyimpanan Azure. Tiap baris berisi properti file dan tautan ke kontennya.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Menghasilkan tabel yang berisi hasil dari eksekusi pemilih CSS yang ditentukan terhadap HTML yang diberikan.",
        "Documentation.LongDescription": "Mengembalikan tabel yang berisi hasil dari menjalankan pemilih CSS tertentu terhadap <code>html</code> yang disediakan. Parameter catatan opsional, <code>options</code>, diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan tabel dari contoh nilai teks html.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manajer</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#tabel({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Mengekstrak semua hrefs dari sampel nilai teks html.",
            "Code": "Html.Table (\"<a href=\"\"/test.html\"\">Pengujian</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database Informix.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database Informix di server <code>server</code> dalam instans database <code>database</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Mengembalikan tabel dengan rincian prospek.",
        "Documentation.LongDescription": "Melakukan panggilan ke titik akhir Marketo REST API di <code>url</code>/rest/v1/leads.json. Semua prospek dalam daftar <code>leadIds</code> dikembalikan.",
        "Documentation.Examples": [
          {
            "Description": "Tarik rincian untuk tiga lead",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabel dengan rincian untuk lead yang diberikan"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Masukkan URL titik akhir REST API Marketo yang berhubungan dengan akun Anda.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Mengembalikan tabel dengan data Marketo yang relevan."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel, tampilan, dan fungsi skalar SQL tersimpan yang tersedia di database MySQL.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel, tampilan dan fungsi skalar SQL yang tersedia di database MySQL di server <code>server</code> dalam instans database <code>database</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>Encoding</code> : Nilai TextEncoding yang menetapkan rangkaian karakter yang digunakan untuk mengodekan semua kueri yang dikirim ke server (defaultnya null).</li>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Logika (true/false) yang menentukan apakah akan memberlakukan kolom tinyint di server sebagai nilai logika atau tidak. Nilai defaultnya adalah true.</li>\r\n<li><code>OldGuids</code> : Logika (true/false) yang mengatur apakah kolom char(36) (jika false) atau kolom biner(16) (jika true) akan diperlakukan sebagai GUID atau tidak. Nilai defaultnya adalah false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Logika (true/false) yang mengatur apakah akan menghasilkan semua tabel dari semua database (jika false) atau menghasilkan tabel dan tampilan database tertentu (jika true). Nilai defaultnya adalah false.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Impor data dari database IBM Netezza.",
        "Documentation.LongDescription": "\r\nMenghasilkan tabel dari tabel, tampilan, dan fungsi Netezza yang disimpan dari <code>database</code> database Netezza Server pada <code>server</code> server. Port mungkin ditentukan secara opsional dengan server, dan dipisahkan oleh titik dua. Parameter catatan opsional, <code>opsi</code>, mungkin ditentukan untuk mengontrol opsi berikut:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Logika (true/false) yang menentukan apakah menghasilkan properti navigasi pada nilai yang dihasilkan (defaultnya true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Logika (true/false) yang menentukan apakah menampilkan tampilan tabel yang dikelompokkan berdasarkan nama skema (defaultnya false)</li>\r\n        <li><code>ConnectionTimeout</code>: Durasi yang mengontrol waktu tunggu sebelum menghentikan upaya pembuatan koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n        <li><code>CommandTimeout</code>: Durasi yang mengontrol lamanya kueri sisi server diizinkan untuk berjalan sebelum dibatalkan. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>NormalizeDatabaseName</code>: Logika (true/false) yang mengatur normalisasi nama database ke huruf besar atau menginterpretasikannya secara literal (defaultnya true).</li>\r\n</ul>\r\nParameter catatan ditentukan sebagai [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Cantumkan tabel dalam proyek IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Mengembalikan hasil dari proses menjalankan kueri asli pada sumber data ODBC.",
        "Documentation.LongDescription": "Menghasilkan hasil dari <code>query</code> yang sedang berjalan dengan string sambungan <code>connectionString</code> menggunakan ODBC. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Sebuah parameter catatan opsional, <code>options</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya adalah 15 detik.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan hasil dari menjalankan kueri sederhana terhadap string koneksi yang disediakan.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Mengembalikan hasil dari proses menjalankan kueri asli pada sumber data OLE DB.",
        "Documentation.LongDescription": "Menghasilkan hasil dari <code>query</code> yang sedang berjalan dengan string sambungan <code>connectionString</code> menggunakan OLE DB. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Sebuah parameter catatan opsional, <code>options</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database PostgreSQL.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database PostgreSQL di server <code>server</code> dalam instans database <code>database</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Impor data dari gudang Komputasi Snowflake.",
        "Documentation.LongDescription": "Menampilkan tabel yang mencantumkan tabel dalam <code>gudang</code> Komputasi Snowflake yang ada di <code>server</code>. Parameter catatan opsional, <code>opsi</code>, dapat ditetapkan untuk mengontrol opsi berikut:\r\n<ul>\r\n<li><code>Peran</code>: Nilai teks untuk digunakan sebagai nama Peran untuk koneksi.</li>\r\n<li><code>CreateNavigationProperties</code>: Nilai logika (true/false) yang mengatur apakah menghasilkan properti navigasi pada nilai yang dihasilkan (default-nya adalah true).</li>\r\n<li><code>ConnectionTimeout</code>: Jumlah detik untuk menunggu respons jaringan dari Snowflake.</li>\r\n<li><code>CommandTimeout</code>: Jumlah detik untuk menunggu kueri dijalankan.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Daftar tabel dalam gudang Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Menghasilkan tabel yang mencantumkan tabel pada kluster Spark yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan tabel yang mencantumkan tabel pada kluster Spark <code>host</code> menggunakan <code>protokol</code>.  Protokol yang valid adalah:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Cantumkan tabel dalam instansi Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel, tampilan, dan fungsi SQL tersimpan dari database SQL Server.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel, tampilan dan fungsi SQL yang disimpan dari database SQL Server <code>database</code> di server <code>server</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Angka yang menetapkan nilai klausa kueri &quot;maxdop&quot; di kueri SQL yang dibuat.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>MultiSubnetFailover</code> : Logika (true/false) yang mengatur nilai properti &quot;MultiSubnetFailover&quot; di string koneksi (defaultnya adalah false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logika (true/false) yang, jika true, berupaya untuk melipat konversi tipe yang dapat gagal dan menyebabkan seluruh kueri gagal. Tidak disarankan untuk penggunaan umum.</li>\r\n<li><code>ContextInfo</code> : Nilai biner yang digunakan untuk menetapkan CONTEXT_INFO sebelum menjalankan setiap perintah.</li>\r\n<li><code>OmitSRID</code> : Logika (true/false) yang, jika true, menghilangkan SRID saat menghasilkan Well-Known Text dari tipe geometri dan geografi.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Nilai logis (true/false) yang, jika bernilai true, memungkinkan pelipatan kueri di seluruh database pada server yang sama. Nilai defaultnya false.</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database Sybase.",
        "Documentation.LongDescription": "Menghasilkan tabel berisi tabel dan tampilan SQL yang tersedia di database Sybase di server <code>server</code> dalam instans database <code>database</code>. Port mungkin ditentukan secara opsional dengan server, dipisahkan oleh titik dua. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol pilihan berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Fungsi yang digunakan untuk pembuatan nama properti navigasi.</li>\r\n<li><code>Query</code> : Kueri SQL asli yang digunakan untuk mengambil data. Jika kueri menghasilkan beberapa kumpulan hasil, hanya yang pertama yang akan dikembalikan.</li>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>ConnectionTimeout</code> : Durasi yang mengontrol lamanya waktu tunggu sebelum mengabaikan upaya membuat koneksi ke server. Nilai defaultnya tergantung pada driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n</ul>\r\n\r\n    Misalnya, parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...] atau [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Menambahkan kolom dengan nilai posisi eksplisit.",
        "Documentation.LongDescription": "Menambahkan kolom bernama <code>newColumnName</code> ke <code>table</code> dengan nilai posisi eksplisit.\r\n    Nilai opsional, <code>initialValue</code>, nilai indeks awal. Nilai opsional, <code>increment</code>, menetapkan jumlah inkremental untuk setiap nilai indeks.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan kolom indeks bernama \"Index\" ke tabel.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Menambahkan kolom indeks bernama \"index\", dimulai pada nilai 10 dengan inkremental sebesar 5, ke tabel.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Berdasarkan kolom daftar dalam tabel, membuat salinan baris untuk setiap nilai dalam daftar.",
        "Documentation.LongDescription": "Berdasarkan <code>table</code>, dengan <code>column</code> adalah daftar nilai, membagi daftar menjadi baris untuk setiap nilai. Nilai dalam kolom lain diduplikasi dalam setiap baris baru yang dibuat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Membagi kolom daftar [Name] dalam tabel.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Mempropagasikan nilai sel sebelumnya ke sel bernilai null di bawah dalam kolom.",
        "Documentation.LongDescription": "Menghasilkan tabel dari <code>table</code> yang ditetapkan dengan nilai sel sebelumnya yang dipropagasi ke sel bernilai null di bawah dalam <code>columns</code> yang ditetapkan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan nilai null dalam kolom [Place] yang diisi dengan nilai di atasnya dari tabel.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Mempropagasikan nilai sel ke sel bernilai null di atas dalam kolom.",
        "Documentation.LongDescription": "Menghasilkan tabel dari <code>table</code> yang ditetapkan dengan nilai sel berikutnya yang dipropagasi ke sel bernilai null di atas dalam <code>columns</code> yang ditetapkan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan nilai null dalam kolom [Column2] yang diisi dengan nilai di bawahnya dari tabel.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Menghasilkan semua baris yang berisi teks tertentu dalam tabel.",
        "Documentation.LongDescription": "Menghasilkan baris dalam tabel <code>table</code> yang berisi teks <code>text</code>. Jika teks tidak ditemukan, tabel kosong akan dihasilkan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris dalam tabel yang berisi \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Menghasilkan baris hitungan pertama yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan baris pertama tabel <code>table</code>, tergantung pada nilai <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Jika <code>countOrCondition</code> adalah angka, baris sebanyak itu (dimulai dari atas) akan dihasilkan. </li>\r\n    <li> Jika <code>countOrCondition</code> adalah ketentuan, baris yang sesuai dengan ketentuan tersebut akan dihasilkan hingga baris yang tidak sesuai dengan ketentuan.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari dua baris pertama dalam tabel.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Mencari baris pertama dengan [a] > 0 dalam tabel.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Menghasilkan tabel yang merupakan hasil penggabungan dari himpunan tabel yang dipartisi.",
        "Documentation.LongDescription": "Menghasilkan tabel yang merupakan hasil kombinasi satu set tabel partisi, <code>partitions</code>. <code>partitionColumn</code> adalah nama kolom untuk ditambahkan. Jenis kolom diatur ke default <code>any</code>, namun dapat ditetapkan oleh <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Temukan jenis item dari <code>{number}</code> daftar.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Menghasilkan jumlah baris yang ditetapkan terakhir.",
        "Documentation.LongDescription": "Menghasilkan baris terakhir dari tabel, <code>table</code>, tergantung pada nilai <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Jika <code>countOrCondition</code> adalah angka, baris sebanyak itu akan dihasilkan dimulai dari posisi (akhir - <code>countOrCondition</code>). </li>\r\n    <li> Jika <code>countOrCondition</code> adalah ketentuan, baris yang sesuai dengan ketentuan tersebut akan dihasilkan pada posisi naik hingga baris yang tidak sesuai dengan ketentuan.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari dua baris terakhir dalam tabel.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Mencari baris terakhir dengan [a] > 0 dalam tabel.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Menghasilkan tabel dan semua kolomnya diawali dengan teks yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan tabel dan semua nama kolomnya dari <code>table</code> yang dimasukkan diawali dengan teks yang diberikan, <code>prefix</code>, ditambah titik dengan format <code><code>prefix</code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Memberikan awalan \"Mytable\" pada kolom dalam tabel.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Menghasilkan baris yang dimulai pada offset yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan baris dari <code>table</code> yang dimulai pada <code>offset</code> yang ditetapkan. Parameter opsional, <code>count</code>, menetapkan jumlah baris yang dihasilkan. Secara default, semua baris setelah offset akan dihasilkan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan semua baris yang dimulai pada offset 1 dalam tabel.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Menghasilkan satu baris yang dimulai pada offset 1 dalam tabel.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Menghapus kolom yang ditetapkan.",
        "Documentation.LongDescription": "Menghapus <code>columns</code> yang ditentukan dari <code>table</code> yang disediakan. \n\rJika kolom yang ditentukan tidak ada, kesalahan akan muncul kecuali parameter opsional <code>missingField</code> menentukan perilaku alternatif (misalnya, <code>MissingField.UseNull</code> atau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus kolom [Phone] dari tabel.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Coba hapus kolom yang tidak ada dari tabel.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Menghapus semua kemunculan baris yang ditetapkan dari tabel.",
        "Documentation.LongDescription": "Menghapus semua kemunculan <code>rows</code> yang ditentukan dari <code>table</code>.\r\n    Parameter opsional <code>equationCriteria</code> dapat ditentukan untuk mengontrol perbandingan di antara baris dalam tabel.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Menghapus setiap baris dengan [a = 1] dari tabel <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Menghapus sejumlah baris tertentu.",
        "Documentation.LongDescription": "Menghapus <code>count</code> baris dari awal <code>table</code>, yang dimulai pada <code>offset</code> yang ditetapkan. Hitungan 1 default akan digunakan jika parameter <code>count</code> tidak dimasukkan. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus baris pertama dari tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Menghapus baris pada posisi 1 dari tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Menghapus dua baris mulai pada posisi 1 dari tabel.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Menerapkan perubahan nama formulir {old, new}.",
        "Documentation.LongDescription": "Menjalankan perubahan nama tertentu ke kolom dalam tabel <code>table</code>. Operasi penggantian <code>renames</code> terdiri atas daftar dua nilai, yakni nama kolom lama dan baru, yang tersedia dalam daftar.\r\n    Jika kolom tidak ada, pengecualian akan dibuat, kecuali jika parameter opsional <code>missingField</code> menetapkan alternatif (misalnya, <code>MissingField.UseNull</code> atau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mengganti nama kolom \"CustomerNum\" dengan \"CustomerID\" dalam tabel.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Mengganti nama kolom \"CustomerNum\" dengan \"CustomerID\" dan \"PhoneNum\" dengan \"Phone\" dalam tabel.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Mengganti nama kolom \"NewCol\" dengan \"NewColumn\" dalam tabel, dan mengabaikan jika kolom tidak ada.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Menghasilkan tabel dengan kolom dalam susunan tertentu.",
        "Documentation.LongDescription": "Menghasilkan tabel dari input <code>table</code>, dengan kolom dalam susunan yang ditentukan oleh <code>columnOrder</code>. Kolom yang tidak ditetapkan dalam daftar tidak akan disusun ulang.\r\n     Jika kolom tidak ada, pengecualian akan dibuat, kecuali jika parameter opsional <code>missingField</code> menetapkan alternatif (misalnya, <code>MissingField.UseNull</code> atau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menukar susunan kolom [Phone] dan [Name] dalam tabel.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Menukar susunan kolom [Phone] dan [Address] atau menggunakan \"MissingField.Ignore\" dalam tabel. Hal ini tidak mengubah tabel karena kolom [Address] tidak ada.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Mengulang baris tabel dengan frekuensi tertentu.",
        "Documentation.LongDescription": "Menghasilkan tabel dengan baris dari input <code>table</code> yang diulang <code>count</code> kali sebagaimana ditetapkan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mengulang baris dalam tabel dua kali.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Menggantikan nilai kesalahan di kolom yang ditetapkan dengan nilai terkait yang ditetapkan.",
        "Documentation.LongDescription": "Menggantikan nilai kesalahan di kolom yang ditetapkan dari <code>table</code> dengan nilai baru di daftar <code>errorReplacement</code>. Format daftarnya adalah {{column1, value1}, …}. Hanya boleh ada satu nilai pengganti per kolom, menetapkan kolom lebih dari sekali akan menyebabkan kesalahan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengganti nilai kesalahan dengan teks \"world\" di tabel.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Mengganti nilai kesalahan di kolom A dengan teks \"hello\" dan di kolom B dengan teks \"world\" di tabel.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Mengganti kunci tabel yang telah ditentukan.",
        "Documentation.LongDescription": "Mengganti kunci tabel yang telah ditentukan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ganti kunci tabel yang sudah ada.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Mengganti semua baris yang ditetapkan dengan baris yang tersedia.",
        "Documentation.LongDescription": "Mengganti semua baris yang ditetapkan dalam <code>table</code> dengan baris yang tersedia. Baris yang akan diganti dan penggantinya ditentukan di <code>replacements</code>, menggunakan format {old, new}.\r\n    Parameter <code>equationCriteria</code> opsional dapat ditentukan untuk mengontrol perbandingan di antara baris dalam tabel.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Mengganti baris [a = 1, b = 2] dan [a = 2, b = 3] dengan [a = -1, b = -2],[a = -2, b = -3] dalam tabel.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Menghasilkan tabel hanya dengan kolom tertentu.",
        "Documentation.LongDescription": "Menghasilkan <code>table</code> hanya dengan <code>columns</code> tertentu.\r\n    <ul>\r\n       <li><code>table</code>: Tabel yang tersedia.</li>\r\n       <li><code>columns</code>: Daftar kolom dari tabel <code>table</code> yang akan dihasilkan. Kolom dalam tabel yang dihasilkan berada dalam susunan yang tercantum di <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Opsional)</i> Tindakan yang harus dilakukan jika kolom tidak ada.  Contoh: <code>MissingField.UseNull</code> atau <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Hanya menyertakan kolom [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Hanya menyertakan kolom [CustomerID] dan [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Jika kolom yang disertakan tidak ada, hasil defaultnya adalah kesalahan.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Jika kolom yang dimasukkan tidak ada, opsi <code>MissingField.UseNull</code> membuat kolom dengan nilai null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Memilih baris yang memenuhi fungsi kondisi.",
        "Documentation.LongDescription": "Menghasilkan tabel baris dari <code>table</code>, yang sesuai dengan pilihan <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Memilih baris dalam tabel tempat nilai dalam kolom [CustomerID] lebih besar dari 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pilih baris dalam tabel tempat nama tidak berisi sebuah \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Mengurutkan tabel menggunakan satu nama kolom atau lebih dan kriteria perbandingan.",
        "Documentation.LongDescription": "Mengurutkan <code>table</code> menggunakan daftar berisi satu nama kolom atau lebih dan <code>comparisonCriteria</code> opsional pada formulir { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mengurutkan tabel pada kolom \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Mengurutkan tabel pada kolom \"OrderID\" dengan susunan menurun.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Mengurutkan tabel pada kolom \"CustomerID\", lalu \"OrderID\", dengan \"CustomerID\" dalam susunan menurun.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformasikan nama kolom dengan menggunakan fungsi yang diberikan.",
        "Documentation.LongDescription": "Mengubah nama kolom menggunakan fungsi <code>nameGenerator</code> yang diberikan. Opsi valid:\r\n    <div>\r\n      <code>MaxLength</code> menentukan panjang maksimum nama kolom baru. Jika fungsi yang diberikan menghasilkan nama kolom yang lebih panjang, nama panjang akan dipotong.\r\n    </div>\r\n    <div>\r\n      <code>Pembanding</code> digunakan untuk mengontrol perbandingan saat membuat nama kolom baru. Pembanding dapat digunakan untuk menyediakan perbandingan yang tidak peka huruf besar/kecil atau perbandingan sadar kultur dan lokal.\r\n    </div>\r\n    <div>\r\n      Pembanding internal berikut ini tersedia dalam bahasa rumus:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal akurat</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan ordinal akurat yang tidak peka huruf besar/kecil</li>\r\n      <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan sadar kultur</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Hapus karakter <code>#(tab)</code> dari nama kolom",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Mentransformasi nama kolom untuk membuat nama yang tidak peka huruf besar/kecil dengan panjang 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Menerapkan transformasi tipe formulir { column, type } menggunakan kultur tertentu.",
        "Documentation.LongDescription": "Menghasilkan tabel dari input <code>table</code> dengan menerapkan operasi transformasi ke kolom yang ditetapkan dalam parameter <code>typeTransformations</code> (dengan format { column name, type name}), menggunakan kultur tertentu pada parameter opsional <code>culture</code> (misalnya, \"en-US\").\r\n    Jika kolom tidak ada, pengecualian akan dibuat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mentransformasi nilai angka pada kolom [a] ke nilai teks dari tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Mengubah nilai dari satu atau beberapa kolom.",
        "Documentation.LongDescription": "Mengubah <code>table</code> dengan menerapkan setiap operasi kolom yang tercantum dalam <code>transformOperations</code> (dengan format { column name, transformation } atau { column name, transformation, new column type }).\r\n    Jika <code>defaultTransformation</code> ditentukan, itu akan diterapkan ke semua kolom yang tidak tercantum di <code>transformOperations</code>.\r\n    Jika kolom yang tercantum di <code>transformOperations</code> tidak ada, pengecualian dibuang kecuali parameter opsional <code>missingField</code> menentukan alternatif (misalnya, <code>MissingField.UseNull</code> atau <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengonversikan nilai teks dalam kolom [A] menjadi nilai angka, dan nilai angka dalam kolom [B] menjadi nilai teks.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Mengonversikan nilai angka ke kolom [X] yang hilang ke nilai teks, mengabaikan kolom yang tidak ada.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Mengonversikan nilai angka ke kolom [X] yang hilang ke nilai teks, mengubah default menjadi null dalam kolom yang tidak ada.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Menambah nilai angka di kolom [B] dan mengonversinya menjadi nilai teks, dan mengonversi semua kolom lain menjadi angka.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Membuat atau memperluas tabel dengan penangan yang ditentukan pengguna untuk kueri dan operasi tindakan.",
        "Documentation.LongDescription": "<p>Menghasilkan tampilan <code>table</code> di mana fungsi yang ditentukan di <code>handlers</code> digunakan sebagai pengganti perilaku default operasi saat operasi diterapkan ke tampilan.</p>\r\n<p>Jika <code>table</code> disediakan, semua fungsi handler bersifat opsional. Jika <code>table</code> tidak disediakan, fungsi handler <code>GetType</code> dan <code>GetRows</code> diperlukan. Jika fungsi handler tidak ditentukan untuk suatu operasi, perilaku operasi default diterapkan ke <code>table</code> sebagai gantinya (kecuali dalam kasus <code>GetExpression</code>).</p>\r\n<p>Fungsi handler harus menghasilkan nilai yang secara semantik setara dengan hasil penerapan operasi terhadap <code>table</code> (atau tampilan hasil dalam kasus <code>GetExpression</code>).</p>\r\n<p>Jika fungsi handler memunculkan kesalahan, perilaku default operasi diterapkan pada tampilan.</p>\r\n<p><code>Table.View</code> dapat digunakan untuk menerapkan pelipatan terhadap sumber data – terjemahan kueri M ke dalam kueri sumber tertentu (misalnya, untuk membuat pernyataan T-SQL dari kueri M).</p>\r\n<p>Lihat dokumentasi konektor kustom Power Query yang telah diterbitkan untuk deskripsi yang lebih lengkap tentang <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Membuat tampilan dasar yang tidak perlu mengakses baris untuk menentukan tipe atau jumlah baris.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Masukkan nama organisasi dan proyek.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (Khusus papan)",
        "Documentation.LongDescription": "Menghasilkan tabel tampilan Analytics yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Impor data dari Vertica",
        "Documentation.LongDescription": "Mengembalikan tabel skema yang tersedia pada server yang diberi nama oleh parameter <code>server</code> di database yang diberi nama oleh parameter <code>database</code>.\r\nParameter catatan opsional, <code>opsi</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Durasi yang mengatur waktu tunggu sebelum meninggalkan upaya untuk melakukan koneksi ke server. Nilai defaultnya bergantung dengan driver.</li>\r\n    <li><code> CommandTimeout</code>: Durasi yang mengatur waktu kueri sisi-server yang diizinkan berjalan sebelum dibatalkan. Nilai defaultnya bergantung dengan driver.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Daftar tabel dalam Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel dengan konten laporan dari Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Melakukan panggilan ke endpoint pelaporan Webtrends tertentu dan menghasilkan semua data sebagai tabel.",
        "Documentation.Examples": [
          {
            "Description": "Melakukan panggilan ke endpoint laporan pengunjung Webtrends untuk data dalam 30 hari terakhir",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabel data pengunjung"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Menghasilkan daftar domain Active Directory pada forest yang sama sebagaimana ditetapkan domain atau domain komputer aktif jika tidak ada yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan daftar domain Active Directory pada forest yang sama sebagaimana ditetapkan domain atau domain komputer aktif jika tidak ada yang ditetapkan.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Menghasilkan hasil menjalankan kueri asli di sumber data ADO.NET.",
        "Documentation.LongDescription": "Menghasilkan hasil dari <code>query</code> yang sedang berjalan dengan string sambungan <code>connectionString</code> menggunakan penyedia ADO.NET <code>providerName</code>. <code>connectionString</code> dapat berupa teks atau catatan pasangan nilai properti. Nilai properti dapat berupa teks atau angka. Sebuah parameter catatan opsional, <code>options</code>, mungkin diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. Nilai default adalah sepuluh menit.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logika (true/false) yang menentukan apakah akan memproduksi opsi string koneksi yang kompatibel dengan SQL Server untuk autentikasi Windows. Nilai defaultnya adalah true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Menghasilkan rangkaian laporan dalam Adobe Analytics.",
        "Documentation.LongDescription": "Mengembalikan tabel paket multidimensi dari Adobe Analytics. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut ini:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Logika (true/false) yang mengatur apakah akan melihat tabel yang dikelompokkan berdasarkan nama skema atau tidak (defaultnya adalah false).</li>\r\n<li><code>MaxRetryCount</code> : Jumlah percobaan yang dilakukan saat melakukan jajak pendapat untuk hasil kueri. Nilai defaultnya adalah 120.</li>\r\n<li><code>RetryInterval</code> : Durasi waktu di antara upaya percobaan. Nilai defaultnya adalah 1 detik.</li>\r\n<li><code>Implementation</code> : Menetapkan versi API Adobe Analytics. Nilai yang valid adalah: &quot;2.0&quot;. Default menggunakan API versi 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Impor data dari Hive LLAP",
        "Documentation.LongDescription": "\r\nMenghasilkan daftar tabel dari Hive LLAP yang ditentukan oleh <code>database</code> pada <code>server</code> Hive LLAP menggunakan <code>protokol</code> yang dipilih. Nomor port mungkin ditentukan secara opsional dengan server dan dipisahkan oleh titik dua. Protokol Thrift Transport merupakan tipe terbilang dengan nilai \"Standard\", \"HTTP\". Parameter <code>opsi</code> opsional mungkin ditentukan untuk mengontrol opsi berikut:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Durasi yang mengontrol waktu tunggu sebelum menghentikan upaya penyambungan ke server. Nilai defaultnya tergantung pada driver.</li>\r\n        <li><code>CommandTimeout</code>: Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk berjalan sebelum dibatalkan. Nilai defaultnya tergantung pada driver.</li>\r\n</ul>\r\nParameter <code>opsi</code> ditentukan sebagai [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan dari 1-5-2017 hingga 15-6-2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Fungsi akan mengembalikan data ringkasan dari 1-5-2017 hingga 15-6-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan untuk April 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Fungsi akan mengembalikan data dari 1-4-2017 hingga 30-4-2017"
          },
          {
            "Description": "Asumsikan hari ini adalah 15-6-2017, dapatkan data ringkasan dari April 2017 sampai sekarang.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Fungsi akan mengembalikan data dari 1-4-2017 hingga 15-6-2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Masukkan nama organisasi dan proyek.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Layanan Azure DevOps",
        "Documentation.LongDescription": "Menghasilkan tabel umpan OData yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Sambungkan ke instans Dataverse Anda (Dynamics 365 dan PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Menggabungkan tabel dimensi tertentu ke dalam konteks filter kubus dan mengubah granularitas dimensi konteks filter tersebut dengan membuka kumpulan atribut dimensi yang ditentukan.",
        "Documentation.LongDescription": "Menggabungkan tabel dimensi tertentu, <code>dimensionSelector</code>, ke dalam konteks filter kubus, <code>cube</code>, dan mengubah granularitas dimensi konteks filter tersebut dengan membuka kumpulan, <code>attributeNames</code>, atribut dimensi yang ditentukan. Atribut dimensi ditambahkan ke tampilan tabular dengan kolom <code>newColumnNames</code>, atau <code>attributeNames</code> jika tidak ditetapkan.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Menambahkan kolom ke kubus berisi hasil pengukuran yang diterapkan dalam konteks baris di setiap baris.",
        "Documentation.LongDescription": "Menambahkan kolom <code>column</code> ke <code>cube</code> berisi hasil pengukuran <code>measureSelector</code> yang diterapkan dalam konteks baris di setiap baris. Aplikasi pengukuran dipengaruhi oleh perubahan pada granularitas dimensi dan pengirisan. Nilai pengukuran akan disesuaikan setelah pengoperasian kubus tertentu dijalankan.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Masukkan perusahaan dan lingkungan Pusat Bisnis Dynamics 365 Anda.",
        "Documentation.DisplayName": "Pusat Bisnis Dynamics 365",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Pusat Bisnis Dynamics 365",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Pusat Bisnis Dynamics 365 yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Masukkan perusahaan dan lingkungan Pusat Bisnis Dynamics 365 Anda.",
        "Documentation.DisplayName": "Pusat Bisnis Dynamics 365",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Pusat Bisnis Dynamics 365",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Pusat Bisnis Dynamics 365 yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Masukkan perusahaan dan lingkungan Pusat Bisnis Dynamics 365 Anda.",
        "Documentation.DisplayName": "Pusat Bisnis Dynamics 365",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Pusat Bisnis Dynamics 365",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Pusat Bisnis Dynamics 365 yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Masukkan perusahaan dan lingkungan Pusat Bisnis Dynamics 365 Anda.",
        "Documentation.DisplayName": "Pusat Bisnis Dynamics 365",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Pusat Bisnis Dynamics 365",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data Pusat Bisnis Dynamics 365 yang relevan. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Menghasilkan konten dari buku kerja Excel saat ini.",
        "Documentation.LongDescription": "Menghasilkan konten buku kerja Excel saat ini. Ini menghasilkan tabel, rentang bernama, dan array dinamis. Tidak seperti <code>Excel.Workbook</code>, tidak menghasilkan lembar.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Menghasilkan tabel konten dari akun Microsoft Exchange.",
        "Documentation.LongDescription": "Menghasilkan daftar isi dari akun Microsoft Exchange <code>mailboxAddress</code>. Jika <code>mailboxAddress</code> tidak ditentukan, akun default untuk kredensial akan digunakan.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Gudang",
        "Documentation.Caption": "Gudang",
        "Documentation.Description": "Mengimpor data dari Gudang",
        "Documentation.LongDescription": "Mengimpor data dari Gudang"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Kembalikan akun Google Analytics.",
        "Documentation.LongDescription": "Kembalikan akun Google Analytics yang dapat diakses dari kredensial saat ini.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Impor data dari database Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Mengembalikan tabel yang mencantumkan proyek yang tersedia di Google BigQuery. Parameter catatan opsional, opsi <code></code>, dapat ditentukan untuk mengontrol opsi berikut: \r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Durasi yang mengontrol jumlah waktu tunggu sebelum membatalkan upaya untuk membuat sambungan ke server. Nilai default adalah nilai Batas Waktu Sambungan ODBC. </li>\r\n        <li><code>CommandTimeout</code>: Durasi yang mengontrol jumlah waktu kueri sisi server diizinkan untuk dijalankan sebelum dibatalkan. </li>\r\n        <li><code>BillingProject</code>: ID proyek penagihan. Nilai defaultnya adalah proyek pertama yang tersedia. </li>\r\n        <li><code>UseStorageApi</code>: Menentukan apakah akan menggunakan API Penyimpanan BigQuery untuk kumpulan hasil yang besar. Nilai defaultnya adalah true untuk menggunakan API Penyimpanan. Atur ke false agar tidak menggunakan API Penyimpanan</li>\r\n      </ul>\r\n    Parameter catatan ditetapkan sebagai [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Cantumkan proyek yang tersedia di Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Impor data dari Lakehouse",
        "Documentation.Description": "Impor data dari Lakehouse",
        "Documentation.LongDescription": "Sambungkan ke semua Lakehouse yang dapat Anda akses, dan pilih entitas yang ingin Anda gunakan"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel dengan data MailChimp kunci.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Menghasilkan tabel dengan data MailChimp kunci.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dengan data MailChimp kunci.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabel dengan data MailChimp kunci."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Mengembalikan tabel dengan aktivitas lead.",
        "Documentation.LongDescription": "Melakukan panggilan ke titik akhir Marketo REST API di <code>url</code>/rest/v1/activities.json. Semua aktivitas dalam daftar <code>activityIds</code> yang muncul sejak <code>startTime</code> dikembalikan.",
        "Documentation.Examples": [
          {
            "Description": "Menarik tabel aktivitas \"Kunjungan Situs Web\" sejak 1 November 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabel dengan aktivitas \"Kunjungi Situs Web\" sejak 1 November"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Aliran data Power BI (Lama)",
        "Documentation.Caption": "Impor data dari aliran data Power BI",
        "Documentation.LongDescription": "Sambungkan ke semua aliran data Power BI yang Anda miliki aksesnya, dan pilih entitas yang ingin Anda gunakan."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamart",
        "Documentation.Caption": "Datamart",
        "Documentation.Description": "Mengimpor data dari Datamart",
        "Documentation.LongDescription": "Mengimpor data dari Datamart"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Alur data",
        "Documentation.Caption": "Mengimpor data dari alur data",
        "Documentation.Description": "Mengimpor data dari alur data",
        "Documentation.LongDescription": "Hubungkan ke semua alur data yang dapat Anda akses, dan pilih entitas yang ingin digunakan."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Impor data dari QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Mengembalikan tabel berisi daftar tabel yang tersedia di QuickBooks Online. Parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut ini:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Durasi yang mengontrol waktu tunggu sebelum menghentikan upaya penyambungan ke server.</li>\r\n            <li><code>CommandTimeout</code>: Durasi yang mengontrol berapa lama kueri sisi server diizinkan untuk berjalan sebelum dibatalkan.</li>\r\n          </ul>\r\n        Parameter catatan ditentukan sebagai [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Mengembalikan objek dari akun Salesforce.",
        "Documentation.LongDescription": "Menghasilkan objek di akun Salesforce yang diberikan dalam kredensial. Akun akan disambungkan melalui lingkungan <code>loginUrl</code> yang disediakan. Jika tidak ada lingkungan yang disediakan, akun akan tersambung ke produksi (https://login.salesforce.com). Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logika (true/false) yang mengatur apakah akan membuat properti navigasi pada nilai yang dihasilkan atau tidak (defaultnya adalah true).</li>\r\n<li><code>ApiVersion</code> : Versi API Salesforce yang digunakan untuk kueri ini. Versi API 29.0 akan digunakan jika belum ditetapkan.</li>\r\n<li><code>Timeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan permintaan ke server. Nilai defaultnya bergantung khusus pada sumber.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Mengembalikan laporan dari akun Salesforce.",
        "Documentation.LongDescription": "Menghasilkan laporan di akun Salesforce yang diberikan dalam kredensial. Akun akan disambungkan melalui lingkungan <code>loginUrl</code> yang disediakan. Jika tidak ada lingkungan yang disediakan, akun akan tersambung ke produksi (https://login.salesforce.com). Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Versi API Salesforce yang digunakan untuk kueri ini. Versi API 29.0 akan digunakan jika belum ditetapkan.</li>\r\n<li><code>Timeout</code> : Durasi yang mengontrol lama waktu tunggu sebelum mengabaikan permintaan ke server. Nilai defaultnya bergantung khusus pada sumber.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Membuat InfoCube dan kueri dalam sistem SAP Business Warehouse yang dikelompokkan berdasarkan InfoArea.",
        "Documentation.LongDescription": "Menghasilkan tabel InfoCube dan kueri yang dikelompokkan berdasarkan InfoArea dari instans SAP Business Warehouse di server <code>server</code> dengan nomor sistem <code>systemNumberOrSystemId</code> dan ID Klien <code>clientId</code>. Parameter catatan opsional, <code>optionsOrLogonGroup</code>, dapat ditentukan untuk mengontrol opsi berikut::\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel lembar, laporan, folder, dan ruang kerja dari API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Menghasilkan tabel bersarang dari lembar, laporan, folder, dan ruang kerja yang tersedia dari API Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan lembar, folder, laporan, dan ruang kerja yang tersedia di tingkat atas dari hierarki Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabel folder, laporan, dan ruang kerja dari tingkat atas dari hierarki Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel metrik yang tersedia dari SparkPost API v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Fungsi ini hanya dapat digunakan untuk mengambil data titik akhir \"Metrics\" tertentu dari SparkPost API v1. Saat me-refresh tabel ini atau melakukan panggilan ke SparkPost API menggunakan konektor ini, perlu diketahui bahwa SparkPost API memiliki batas pengiriman API yang ketat. Jika Anda melihat kode status 429 yang dihasilkan dari server SparkPost, ini menandakan bahwa Anda telah melampaui batas pengiriman dan harus menunggu beberapa saat sebelum membuat panggilan lainnya. Saat memilih nilai dari parameter Jumlah hari, perhatikan bahwa API hanya menyimpan data yang berusia 6 bulan.",
        "Documentation.Examples": [
          {
            "Description": "Mengambil metrik keterkiriman count_sent dan count_rejected untuk semua campaign_ids yang diagregasikan selama tiga hari terakhir. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabel"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Melakukan panggilan ke Stripe API.",
        "Documentation.LongDescription": "Melakukan panggilan ke Stripe API di https://api.stripe.com/v1/<code>method</code>, dengan rekaman <code>additionalParameters</code> yang diberikan sebagai parameter tambahan dan daftar <code>ColumnNames</code> nama kolom yang diminta. Stripe Versi 2015-10-16 sedang digunakan.",
        "Documentation.Examples": [
          {
            "Description": "Mengembalikan tabel dengan peristiwa yang dibuat setelah 1 November 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabel dengan peristiwa tertentu untuk akun Stripe saat ini"
          },
          {
            "Description": "Mengembalikan tabel dengan semua SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabel dengan semua SKU untuk akun Stripe saat ini"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Mengembalikan tabel yang mendaftar tabel dan fungsi Stripe yang ada.",
        "Documentation.LongDescription": "Mengembalikan tabel yang mendaftar tabel dan fungsi Stripe yang ada."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Ruang kerja Azure Synapse Analytics",
        "Documentation.Caption": "Ruang kerja Azure Synapse Analytics",
        "Documentation.LongDescription": "Konektor PQ untuk ruang kerja Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Menambahkan kolom dengan nama yang ditetapkan. Nilai dikomputasi menggunakan fungsi pilihan yang ditetapkan dengan setiap baris yang diambil sebagai input.",
        "Documentation.LongDescription": "Menambahkan kolom bernama <code>newColumnName</code> ke tabel <code>table</code>. Nilai untuk kolom tersebut dikomputasi menggunakan fungsi pilihan <code>columnGenerator</code> yang ditetapkan dengan setiap baris yang diambil sebagai input.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Tambahkan kolom angka bernama \"TotalPrice\" ke tabel, yang setiap nilainya merupakan jumlah dari kolom [Price] dan [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Menambahkan kolom baru berisi nilai representatif yang diperoleh oleh nilai pengelompokan fuzzy dari kolom yang ditentukan dalam tabel.",
        "Documentation.LongDescription": "Menambahkan kolom baru <code>newColumnName</code> ke <code>table</code> dengan nilai representatif <code>columnName</code>. Perwakilan diperoleh dengan nilai yang sama secara fuzzy dalam <code>columnName</code>, untuk setiap baris.\r\n    <p>Rangkaian opsional <code>options</code> dapat disertakan untuk menentukan cara membandingkan kolom kunci. Opsi meliputi: \r\n    <ul>\r\n<li><code>Culture</code> : Mengizinkan pengelompokan data berdasarkan aturan khusus kultur. Ini dapat berupa nama kultur yang valid. Misalnya, opsi kultur &quot;ja-JP&quot; mengelompokkan catatan berdasarkan kultur Jepang. Nilai defaultnya adalah &quot;&quot;, yang grupnya berdasarkan kultur bahasa Inggris invarian.</li>\r\n<li><code>IgnoreCase</code> : Nilai logika (true/false) yang memungkinkan pengelompokan kunci tidak peka huruf besar/kecil. Misalnya, jika true, &quot;Anggur&quot; dikelompokkan dengan &quot;anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>IgnoreSpace</code> : Nilai logika (true/false) yang memungkinkan penggabungan bagian teks agar dapat menemukan grup. Misalnya, jika true, &quot;ANG GUR&quot; dikelompokkan dengan &quot;Anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>SimilarityColumnName</code> : Nama untuk kolom yang menunjukkan kesamaan antara nilai input dan nilai representatif untuk input tersebut. Nilai defaultnya adalah null, yang berarti kolom baru untuk kesamaan tidak akan ditambahkan.</li>\r\n<li><code>Threshold</code> : Angka antara 0,00 dan 1,00 yang menentukan skor kemiripan saat dua nilai akan dikelompokkan.\r\n    Misalnya, &quot;Anggur&quot; dan &quot;Anggr&quot; (tidak ada &quot;u&quot;) dikelompokkan bersama jika opsi ini diatur ke kurang dari 0,90.\r\n    Ambang batas 1,00 hanya memungkinkan kecocokan yang sama persis.\r\n    (Perhatikan bahwa &quot;kecocokan sama persis&quot; fuzzy mungkin mengabaikan perbedaan seperti huruf besar, urutan kata, dan tanda baca.)\r\n    Nilai defaultnya adalah 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabel yang mengizinkan pengelompokan data berdasarkan pemetaan nilai kustom. Harus berisi kolom &quot;Dari&quot; dan &quot;Ke&quot;. Misalnya, &quot;Anggur&quot; dikelompokkan dengan &quot;Kismis&quot; jika tabel transformasi diberikan dengan kolom &quot;Dari&quot; yang berisi &quot;Anggur&quot; dan kolom &quot;Ke&quot; yang berisi &quot;Kismis&quot;. Perhatikan bahwa transformasi akan diterapkan ke semua kemunculan teks dalam tabel transformasi. Dengan tabel transformasi di atas, &quot;Anggur manis&quot; juga akan dikelompokkan dengan &quot;Kismis manis&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Temukan nilai representatif untuk lokasi karyawan.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Melakukan penggabungan di antara tabel di kolom yang tersedia dan menampilkan hasil gabungan di kolom baru.",
        "Documentation.LongDescription": "Menggabungkan baris <code>table1</code> dengan baris <code>table2</code> berdasarkan kesamaan nilai kolom kunci yang dipilih oleh <code>key1</code> (untuk <code>table1</code>) dan <code>key2</code> (untuk <code>table2</code>). Hasilnya dimasukkan ke dalam kolom bernama <code>newColumnName</code>.\r\nFungsi ini berperilaku sama seperti Table.Join dengan JoinKind LeftOuter kecuali hasil gabungannya diberikan dalam bentuk bersarang dan bukan diratakan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan kolom gabungan ke ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) bernama \"price/stock\" dari tabel ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) yang digabungkan menurut [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Menambahkan kunci ke tabel.",
        "Documentation.LongDescription": "Menambahkan kunci ke <code>table</code>, dengan <code>columns</code> adalah daftar nama kolom yang menentukan kunci, dan <code>isPrimary</code> menetapkan apakah kunci tersebut adalah utama.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan kunci utama kolom tunggal ke tabel.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Menambahkan kolom dengan peringkat satu atau lebih kolom lainnya.",
        "Documentation.LongDescription": "Menambahkan kolom bernama <code>newColumnName</code> ke <code>table</code> dengan peringkat satu atau lebih kolom lainnya yang dijelaskan oleh <code>comparisonCriteria</code>.\r\nOpsi RankKind di <code>options</code> dapat digunakan oleh pengguna tingkat lanjut untuk memilih metode pemeringkatan yang lebih spesifik.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Tambahkan kolom bernama \"RevenueRank\" ke tabel yang memeringkat kolom \"Revenue\" dari tertinggi ke terendah.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Mengagregat kolom tabel menjadi beberapa kolom dalam tabel yang mencantumkan.",
        "Documentation.LongDescription": "Mengagregat tabel dalam <code>table</code>[<code>column</code>]menjadi beberapa kolom berisi nilai agregat untuk tabel. <code>aggregations</code> digunakan untuk menetapkan kolom berisi tabel yang akan diagregat, fungsi agregat yang akan diterapkan ke tabel untuk menghasilkan nilainya, dan nama kolom agregat yang akan dibuat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengagregat kolom tabel dalam <code>[t]</code> pada tabel <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> menjadi penjumlahan <code>[t.a]</code>, min dan maks <code>[t.b]</code>, serta hitungan nilai dalam <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Mempertahankan offset awal, lalu bergantian mengambil dan melewatkan baris berikut.",
        "Documentation.LongDescription": "Mempertahankan offset awal, lalu bergantian mengambil dan melewatkan baris berikut.\r\n    <ul>\r\n       <li><code>table</code>: Tabel input.</li>\r\n       <li><code>offset</code>: Jumlah baris yang akan dipertahankan sebelum memulai iterasi.</li>\r\n       <li><code>skip</code>: Jumlah baris yang akan dihapus dalam setiap iterasi.</li>\r\n       <li><code>take</code>: Jumlah baris yang akan dipertahankan dalam setiap iterasi.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan tabel dari tabel yang, dimulai dari baris pertama, melewati 1 nilai lalu mempertahankan 1 nilai.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Menggabungkan kolom yang ditetapkan menjadi kolom baru menggunakan fungsi pengkombinasi yang ditetapkan.",
        "Documentation.LongDescription": "Menggabungkan kolom yang ditetapkan menjadi kolom baru menggunakan fungsi pengkombinasi yang ditetapkan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengabungkan nama belakang dan depan ke dalam kolom baru yang dipisahkan dengan koma.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Menggabungkan kolom yang ditentukan ke kolom bernilai rekor baru dengan setiap catatan yang memiliki nama bidang dan nilai yang sesuai dengan nama kolom dan nilai kolom yang digabungkan.",
        "Documentation.LongDescription": "Menggabungkan kolom yang ditentukan <code>table</code> ke kolom bernilai rekor baru yang bernama <code>newColumnName</code> di mana setiap catatan memiliki nama dan nilai bidang yang sesuai dengan nama kolom dan nilai dari kolom yang digabungkan. Jika catatan ditetapkan untuk <code>options</code>, opsi berikut dapat diberikan: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Saat ditetapkan sebagai teks, menunjukkan bahwa nama kolom yang diberikan harus diperlakukan sebagai nama tampilan catatan. Ini tidak perlu salah satu kolom dalam data itu sendiri. </li>\r\n     <li> <code>TypeName</code>: Saat ditetapkan sebagai teks, memberikan nama jenis logika untuk rekaman yang dihasilkan yang dapat digunakan selama pemuatan data untuk mendorong perilaku oleh lingkungan pemuatan. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Menghapus kolom dengan nama yang ditetapkan. Nilai dan tipe akan disalin dari kolom sumber.",
        "Documentation.LongDescription": "Menduplikasikan kolom bernama <code>columnName</code> ke tabel <code>table</code>. Nilai dan tipe untuk kolom <code>newColumnName</code> akan disalin dari kolom <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menduplikasikan kolom \"a\" ke kolom \"copied column\" dalam tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Memperluas kolom data menjadi beberapa kolom dengan setiap nilai.",
        "Documentation.LongDescription": "Berdasarkan <code>column</code> data dalam input <code>table</code>, membuat tabel dengan kolom untuk setiap bidang dalam data. Secara opsional, <code>newColumnNames</code> dapat ditetapkan untuk memastikan nama unik kolom dalam tabel baru.\r\n    <ul>\r\n        <li><code>table</code>: Tabel asli dengan kolom data yang akan diperluas. </li>\r\n        <li><code>column</code>: Kolom yang akan diperluas.</li>\r\n        <li><code>fieldNames</code>: Daftar bidang yang akan diperluas menjadi beberapa kolom dalam tabel.</li>\r\n        <li><code>newColumnNames</code>: Daftar nama kolom yang akan diberikan ke kolom baru. Nama kolom baru tidak dapat menduplikasikan kolom dalam tabel baru.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Memperluas kolom [a] dalam tabel <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> menjadi 3 kolom \"aa\", \"bb\", dan \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Memperluas kolom data atau kolom tabel menjadi beberapa kolom dalam tabel yang mencantumkan.",
        "Documentation.LongDescription": "Memperluas tabel dalam <code>table</code>[<code>column</code>] menjadi beberapa baris dan kolom. <code>columnNames</code> digunakan untuk memilih kolom yang akan diperluas dari tabel dalam. Menetapkan <code>newColumnNames</code> untuk menghindari konflik antara kolom yang ada dan kolom baru.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Memperluas kolom tabel dalam <code>[a]</code> pada tabel <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> menjadi 3 kolom <code>[t.a]</code>, <code>[t.b]</code>, dan <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Mengelompokkan baris dalam tabel berdasarkan pada pencocokan fuzzy kunci.",
        "Documentation.LongDescription": "Mengelompokkan baris <code>table</code> dengan mencocokkan nilai secara fuzzy pada kolom yang ditentukan, <code>key</code>, untuk setiap baris.\r\n    Untuk setiap grup, catatan dikonstruksi berisi kolom kunci (dan nilainya) bersama dengan kolom agregat yang ditentukan oleh <code>aggregatedColumns</code>.\r\n    Fungsi ini tidak dapat menjamin untuk menghasilkan urutan baris yang tetap.\r\n    <p>Rangkaian opsional <code>options</code> dapat disertakan untuk menentukan cara membandingkan kolom kunci. Opsi meliputi: \r\n    <ul>\r\n<li><code>Culture</code> : Mengizinkan pengelompokan data berdasarkan aturan khusus kultur. Ini dapat berupa nama kultur yang valid. Misalnya, opsi kultur &quot;ja-JP&quot; mengelompokkan catatan berdasarkan kultur Jepang. Nilai defaultnya adalah &quot;&quot;, yang grupnya berdasarkan kultur bahasa Inggris invarian.</li>\r\n<li><code>IgnoreCase</code> : Nilai logika (true/false) yang memungkinkan pengelompokan kunci tidak peka huruf besar/kecil. Misalnya, jika true, &quot;Anggur&quot; dikelompokkan dengan &quot;anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>IgnoreSpace</code> : Nilai logika (true/false) yang memungkinkan penggabungan bagian teks agar dapat menemukan grup. Misalnya, jika true, &quot;ANG GUR&quot; dikelompokkan dengan &quot;Anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>SimilarityColumnName</code> : Nama untuk kolom yang menunjukkan kesamaan antara nilai input dan nilai representatif untuk input tersebut. Nilai defaultnya adalah null, yang berarti kolom baru untuk kesamaan tidak akan ditambahkan.</li>\r\n<li><code>Threshold</code> : Angka antara 0,00 dan 1,00 yang menentukan skor kemiripan saat dua nilai akan dikelompokkan.\r\n    Misalnya, &quot;Anggur&quot; dan &quot;Anggr&quot; (tidak ada &quot;u&quot;) dikelompokkan bersama jika opsi ini diatur ke kurang dari 0,90.\r\n    Ambang batas 1,00 hanya memungkinkan kecocokan yang sama persis.\r\n    (Perhatikan bahwa &quot;kecocokan sama persis&quot; fuzzy mungkin mengabaikan perbedaan seperti huruf besar, urutan kata, dan tanda baca.)\r\n    Nilai defaultnya adalah 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabel yang mengizinkan pengelompokan data berdasarkan pemetaan nilai kustom. Harus berisi kolom &quot;Dari&quot; dan &quot;Ke&quot;. Misalnya, &quot;Anggur&quot; dikelompokkan dengan &quot;Kismis&quot; jika tabel transformasi diberikan dengan kolom &quot;Dari&quot; yang berisi &quot;Anggur&quot; dan kolom &quot;Ke&quot; yang berisi &quot;Kismis&quot;. Perhatikan bahwa transformasi akan diterapkan ke semua kemunculan teks dalam tabel transformasi. Dengan tabel transformasi di atas, &quot;Anggur manis&quot; juga akan dikelompokkan dengan &quot;Kismis manis&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kelompokkan tabel dengan menambahkan kolom agregat [Count] yang berisi jumlah karyawan di setiap lokasi (\"setiap Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Menggabungkan baris dari dua tabel yang memiliki kecocokan fuzzy berdasarkan kunci tertentu.",
        "Documentation.LongDescription": "<p>Menggabungkan baris <code>table1</code> dengan baris <code>table2</code> berdasarkan pencocokan fuzzy dari nilai kolom utama yang dipilih oleh <code>key1</code> (untuk <code>table1</code>) dan <code>key2</code> (untuk <code>table2</code>).</p>\r\n<p>Pencocokan fuzzy adalah perbandingan berdasarkan pada kemiripan teks bukan persamaan teks.</p>\r\n<p>Secara default, penggabungan dalam dilakukan, namun <code>joinKind</code> opsional dapat disertakan untuk menetapkan tipe gabungan. Opsi mencakup:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Kumpulan opsional <code>joinOptions</code> dapat disertakan untuk menentukan cara membandingkan kolom utama. Opsi mencakup:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Angka antara 1 dan 8 yang menentukan jumlah utas paralel yang digunakan untuk pencocokan fuzzy. Nilai defaultnya adalah 1.</li>\r\n<li><code>Culture</code> : Mengizinkan pencocokan catatan berdasarkan aturan khusus kultur. Ini dapat berupa nama kultur yang valid. Misalnya, opsi kultur &quot;ja-JP&quot; mencocokkan catatan dengan data berdasarkan kultur Jepang. Nilai defaultnya adalah &quot;&quot;, yang cocok berdasarkan kultur bahasa Inggris Invarian.</li>\r\n<li><code>IgnoreCase</code> : Nilai logika (true/false) yang memungkinkan pencocokan kunci tidak peka huruf besar/kecil. Misalnya, jika true, &quot;Anggur&quot; cocok dengan &quot;anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>IgnoreSpace</code> : Nilai logika (true/false) yang memungkinkan penggabungan bagian teks agar dapat menemukan kecocokan. Misalnya, jika true, &quot;Ang gur&quot; cocok dengan &quot;Anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>NumberOfMatches</code> : Bilangan bulat yang menentukan jumlah maksimum baris pencocokan yang dapat dihasilkan untuk setiap baris input. Misalnya, nilai 1 akan menghasilkan paling banyak satu baris yang cocok untuk setiap baris input. Jika opsi ini tidak tersedia, semua baris yang cocok ditampilkan.</li>\r\n<li><code>SimilarityColumnName</code> : Nama untuk kolom yang menunjukkan kesamaan antara nilai input dan nilai representatif untuk input tersebut. Nilai defaultnya adalah null, yang berarti kolom baru untuk kesamaan tidak akan ditambahkan.</li>\r\n<li><code>Threshold</code> : Angka antara 0,00 dan 1,00 yang menentukan skor kemiripan saat dua nilai akan dicocokkan.\r\n    Misalnya, &quot;Anggur&quot; dan &quot;Anggr&quot; (tidak ada &quot;u&quot;) hanya akan cocok jika opsi ini diatur ke kurang dari 0,90.\r\n    Ambang batas 1,00 hanya memungkinkan kecocokan yang sama persis.\r\n    (Perhatikan bahwa &quot;kecocokan sama persis&quot; fuzzy mungkin mengabaikan perbedaan seperti huruf besar, urutan kata, dan tanda baca.)\r\n    Nilai defaultnya adalah 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabel yang mengizinkan catatan yang cocok berdasarkan pada pemetaan nilai kustom. Harus berisi kolom &quot;Dari&quot; dan &quot;Ke&quot;. Misalnya, &quot;Anggur&quot; cocok dengan &quot;Kismis&quot; jika tabel transformasi diberikan dengan kolom &quot;Dari&quot; yang berisi &quot;Anggur&quot; dan kolom &quot;Ke&quot; yang berisi &quot;Kismis&quot;. Perhatikan bahwa transformasi akan diterapkan ke semua kemunculan teks dalam tabel transformasi. Dengan tabel transformasi di atas, &quot;Anggur manis&quot; juga akan dicocokkan dengan &quot;Kismis manis&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gabungan fuzzy kiri dalam dari dua tabel berdasarkan [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Melakukan penggabungan fuzzy di antara tabel di kolom yang tersedia dan menampilkan hasil gabungan di kolom baru.",
        "Documentation.LongDescription": "<p>Menggabungkan baris <code>table1</code> dengan baris <code>table2</code> berdasarkan pencocokan fuzzy dari nilai kolom utama yang dipilih oleh <code>key1</code> (untuk <code>table1</code>) dan <code>key2</code> (untuk <code>table2</code>). Hasilnya dimasukkan ke dalam kolom baru bernama <code>newColumnName</code>.</p>\r\n<p>Pencocokan fuzzy adalah perbandingan berdasarkan kemiripan teks bukan persamaan teks.</p>\r\n<p><code>joinKind</code> opsional menentukan jenis gabungan yang akan dilakukan. Secara default, gabungan kiri luar akan dilakukan jika <code>joinKind</code> tidak ditetapkan. Opsi mencakup:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Kumpulan opsional <code>joinOptions</code> dapat disertakan untuk menentukan cara membandingkan kolom utama. Opsi mencakup:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Angka antara 1 dan 8 yang menentukan jumlah utas paralel yang digunakan untuk pencocokan fuzzy. Nilai defaultnya adalah 1.</li>\r\n<li><code>Culture</code> : Mengizinkan pencocokan catatan berdasarkan aturan khusus kultur. Ini dapat berupa nama kultur yang valid. Misalnya, opsi kultur &quot;ja-JP&quot; mencocokkan catatan dengan data berdasarkan kultur Jepang. Nilai defaultnya adalah &quot;&quot;, yang cocok berdasarkan kultur bahasa Inggris Invarian.</li>\r\n<li><code>IgnoreCase</code> : Nilai logika (true/false) yang memungkinkan pencocokan kunci tidak peka huruf besar/kecil. Misalnya, jika true, &quot;Anggur&quot; cocok dengan &quot;anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>IgnoreSpace</code> : Nilai logika (true/false) yang memungkinkan penggabungan bagian teks agar dapat menemukan kecocokan. Misalnya, jika true, &quot;Ang gur&quot; cocok dengan &quot;Anggur&quot;. Nilai defaultnya adalah true.</li>\r\n<li><code>NumberOfMatches</code> : Bilangan bulat yang menentukan jumlah maksimum baris pencocokan yang dapat dihasilkan untuk setiap baris input. Misalnya, nilai 1 akan menghasilkan paling banyak satu baris yang cocok untuk setiap baris input. Jika opsi ini tidak tersedia, semua baris yang cocok ditampilkan.</li>\r\n<li><code>SimilarityColumnName</code> : Nama untuk kolom yang menunjukkan kesamaan antara nilai input dan nilai representatif untuk input tersebut. Nilai defaultnya adalah null, yang berarti kolom baru untuk kesamaan tidak akan ditambahkan.</li>\r\n<li><code>Threshold</code> : Angka antara 0,00 dan 1,00 yang menentukan skor kemiripan saat dua nilai akan dicocokkan.\r\n    Misalnya, &quot;Anggur&quot; dan &quot;Anggr&quot; (tidak ada &quot;u&quot;) hanya akan cocok jika opsi ini diatur ke kurang dari 0,90.\r\n    Ambang batas 1,00 hanya memungkinkan kecocokan yang sama persis.\r\n    (Perhatikan bahwa &quot;kecocokan sama persis&quot; fuzzy mungkin mengabaikan perbedaan seperti huruf besar, urutan kata, dan tanda baca.)\r\n    Nilai defaultnya adalah 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabel yang mengizinkan catatan yang cocok berdasarkan pada pemetaan nilai kustom. Harus berisi kolom &quot;Dari&quot; dan &quot;Ke&quot;. Misalnya, &quot;Anggur&quot; cocok dengan &quot;Kismis&quot; jika tabel transformasi diberikan dengan kolom &quot;Dari&quot; yang berisi &quot;Anggur&quot; dan kolom &quot;Ke&quot; yang berisi &quot;Kismis&quot;. Perhatikan bahwa transformasi akan diterapkan ke semua kemunculan teks dalam tabel transformasi. Dengan tabel transformasi di atas, &quot;Anggur manis&quot; juga akan dicocokkan dengan &quot;Kismis manis&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gabungan fuzzy kiri dalam dari dua tabel berdasarkan [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Mengelompokkan baris dalam tabel yang memiliki kunci sama.",
        "Documentation.LongDescription": "Mengelompokkan baris <code>table</code> berdasarkan kolom kunci yang ditentukan oleh <code>key</code>. <code>key</code> dapat berupa nama kolom tunggal, atau daftar nama kolom.\r\n    Untuk tiap grup, catatan dikonstruksi berisi kolom kunci (dan nilainya), bersama dengan kolom agregat yang ditentukan oleh <code>aggregatedColumns</code>.\r\n    Secara opsional, <code>groupKind</code> dan <code>comparer</code> juga dapat ditentukan.<br>\r\n    <br>\r\n    Jika data sudah diurutkan berdasarkan kolom kunci, <code>groupKind</code> dari GroupKind.Local dapat diberikan. Hal ini dapat meningkatkan performa pengelompokan dalam kasus tertentu,\r\n    karena semua baris dengan rangkaian nilai kunci yang diberikan diasumsikan berdekatan.<br>\r\n    <br>\r\n    Saat meneruskan <code>comparer</code>, perhatikan bahwa jika hal tersebut memperlakukan kunci yang berbeda secara setara, baris dapat ditempatkan dalam grup dengan kunci yang berbeda dari kuncinya sendiri.<br>\r\n    <br>\r\n    Fungsi ini tidak menjamin pengurutan baris yang akan dihasilkan.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengelompokkan tabel dengan menambahkan kolom agregat [total] dengan berisi jumlah harga (\"tiap List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Menyisipkan daftar baris ke dalam tabel pada posisi yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan tabel dengan daftar baris, <code>rows</code>, disisipkan ke dalam <code>table</code> pada posisi yang diberikan, <code>offset</code>. Setiap kolom dalam baris yang akan disisipkan harus cocok dengan tipe kolom dalam tabel.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menyisipkan baris ke dalam tabel pada posisi 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Menyisipkan dua baris ke dalam tabel pada posisi 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Menggabungkan baris dari dua tabel yang cocok berdasarkan kunci tertentu.",
        "Documentation.LongDescription": "<p>Menggabungkan baris <code>table1</code> dengan baris <code>table2</code> berdasarkan kesamaan nilai kolom utama yang dipilih oleh <code>key1</code> (untuk <code>table1</code>) dan <code>key2</code> (untuk <code>table2</code>).</p>\r\n<p>Secara default, gabungan dalam akan dilakukan, tetapi <code>joinKind</code> opsional dapat disertakan untuk menetapkan tipe gabungan. Pilihan mencakup:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Kumpulan opsional <code>keyEqualityComparers</code> dapat disertakan untuk menentukan cara membandingkan kolom utama. Saat ini, parameter ini ditujukan untuk penggunaan internal saja.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gabungkan dua tabel menggunakan satu kolom kunci.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Gabungkan dua tabel yang memiliki nama kolom yang berkonflik, menggunakan beberapa kolom kunci.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Menghasilkan baris terbesar menggunakan kriteria yang diberikan.",
        "Documentation.LongDescription": "Mengembalikan baris terbesar di <code>table</code>, memberikan <code>comparisonCriteria</code>.\r\n    Setelah baris diurutkan, parameter <code>countOrCondition</code> harus ditetapkan untuk lebih lanjut memfilter hasil. Perhatikan bahwa algoritma pengurutan tidak dapat menjamin hasil pengurutan yang tetap. Parameter <code>countOrCondition</code> dapat menggunakan beberapa bentuk:\r\n    <ul>\r\n        <li> Jika jumlah ditetapkan, daftar hingga <code>countOrCondition</code> item dalam urutan naik akan dihasilkan. </li>\r\n        <li> Jika kondisi ditetapkan, daftar item yang awalnya memenuhi syarat kondisi akan dihasilkan. Jika ternyata salah satu item tidak sesuai dengan kondisi, item lainnya tidak akan diperhitungkan. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris dengan nilai terbesar di kolom [a] dengan ketentuan [a] > 0, dalam tabel . Baris akan diurutkan sebelum filter diterapkan.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Mencari baris dengan nilai terbesar di kolom [a] dengan ketentuan [b] > 0, dalam tabel. Baris akan diurutkan sebelum filter diterapkan.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Menghasilkan baris terkecil menggunakan kriteria yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan baris terkecil di <code>table</code>, memberikan <code>comparisonCriteria</code>. Setelah baris diurutkan, parameter <code>countOrCondition</code> harus ditetapkan untuk lebih lanjut memfilter hasil. Perhatikan bahwa algoritme pengurutan tidak dapat menjamin hasil pengurutan yang tetap. Parameter <code>countOrCondition</code> dapat menggunakan beberapa form:\r\n    <ul>\r\n        <li> Jika jumlah ditetapkan, daftar hingga <code>countOrCondition</code> item dalam urutan naik akan dihasilkan. </li>\r\n        <li> Jika kondisi ditetapkan, daftar item yang awalnya memenuhi syarat kondisi akan dihasilkan. Jika ternyata salah satu item tidak sesuai dengan kondisi, item lainnya tidak akan diperhitungkan. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris dengan nilai terkecil di kolom [a] dengan ketentuan [a] < 3, dalam tabel. Baris akan diurutkan sebelum filter diterapkan.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Mencari baris dengan nilai terkecil di kolom [a] dengan ketentuan [b] < 0, dalam tabel. Baris akan diurutkan sebelum filter diterapkan.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Melakukan penggabungan di antara tabel di kolom yang tersedia dan menampilkan hasil gabungan di kolom baru.",
        "Documentation.LongDescription": "<p>Menggabungkan baris <code>table1</code> dengan baris <code>table2</code> berdasarkan kesamaan nilai kolom kunci yang dipilih oleh <code>key1</code> (untuk <code>table1</code>) dan <code>key2</code> (untuk <code>table2</code>). Hasilnya dimasukkan ke dalam kolom bernama <code>newColumnName</code>.</p>\r\n<p><code>joinKind</code> opsional menentukan jenis penggabungan yang akan dilakukan. Secara default, gabungan kiri luar akan dilakukan jika <code>joinKind</code> tidak ditetapkan</p>\r\n<p>Kumpulan opsional <code>keyEqualityComparers</code> dapat disertakan untuk menentukan cara membandingkan kolom kunci. Saat ini, fitur ini ditujukan untuk penggunaan internal saja.</p> ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gabungkan dua tabel menggunakan satu kolom kunci.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Dengan sepasang kolom yang mewakili pasangan atribut-nilai, memutar posisi data di kolom atribut ke heading kolom.",
        "Documentation.LongDescription": "Dengan sepasang kolom yang mewakili pasangan atribut-nilai, memutar posisi data di kolom atribut ke heading kolom.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil nilai \"a\", \"b\", dan \"c\" di kolom atribut tabel <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> dan mempivot ke kolomnya masing-masing.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Mengambil nilai \"a\", \"b\", dan \"c\" di kolom atribut tabel <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> dan mempivot ke kolomnya masing-masing.  Atribut \"c\" untuk kunci \"x\" memiliki beberapa nilai terkait, jadi gunakan fungsi List.Max untuk mengatasi konflik.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Mengganti rentang baris tertentu dengan baris yang tersedia.",
        "Documentation.LongDescription": "Mengganti sejumlah baris tertentu, <code>count</code>, dalam input <code>table</code> dengan <code>rows</code> yang ditetapkan dan dimulai setelah <code>offset</code>. Parameter <code>rows</code> adalah daftar data.\r\n    <ul>\r\n       <li><code>table</code>: Tabel untuk menjalankan penggantian.</li>\r\n       <li><code>offset</code>: Jumlah baris yang akan dilewatkan sebelum melakukan penggantian.</li>\r\n       <li><code>count</code>: Jumlah baris yang akan diganti.</li>\r\n       <li><code>rows</code>: Daftar data baris yang akan disisipkan ke <code>table</code> di lokasi yang ditentukan oleh <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mulai pada posisi 1, mengganti 3 baris.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Mengganti satu nilai dengan nilai lain pada kolom tertentu.",
        "Documentation.LongDescription": "Mengganti <code>oldValue</code> dengan <code>newValue</code> pada kolom tertentu dalam <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ganti teks \"goodbye\" dengan \"world\" di kolom B, yang cocok hanya dengan seluruh nilai.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Ganti teks \"ur\" dengan \"or\" di kolom B, yang cocok dengan semua bagian nilai.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimkan nama karyawan AS.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimkan semua kolom karyawan AS.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Membagi kolom yang ditetapkan menjadi himpunan kolom tambahan menggunakan fungsi pemisah yang ditetapkan.",
        "Documentation.LongDescription": "Membagi kolom yang ditetapkan menjadi himpunan kolom tambahan menggunakan fungsi pemisah yang ditetapkan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pisahkan kolom [Name] dalam posisi dari \"i\" ke dalam dua kolom",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Menerjemahkan himpunan kolom pada tabel ke pasangan nilai atribut.",
        "Documentation.LongDescription": "Menerjemahkan himpunan kolom pada tabel ke pasangan nilai atribut, dikombinasikan dengan nilai lainnya pada setiap baris.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil kolom \"a\", \"b\", dan \"c\" pada tabel <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code>, lalu membatalkan pivot ke pasangan nilai atribut.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Menerjemahkan semua kolom selain himpunan yang ditetapkan ke pasangan atribut-nilai.",
        "Documentation.LongDescription": "Menerjemahkan semua kolom selain himpunan yang ditetapkan ke pasangan atribut-nilai, yang digabungkan dengan nilai lainnya di setiap baris.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menerjemahkan semua kolom selain rangkaian yang ditetapkan ke dalam pasangan nilai-atribut, yang digabungkan dengan nilai lainnya di setiap baris.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>Konektor Teams Analytics memungkinkan Anda mendapatkan wawasan tentang penggunaan Teams. Data tersedia untuk aktivitas pribadi Anda di Teams serta aktivitas dalam Teams tempat Anda menjadi anggota.</p>\r\n<p>Data tersedia untuk 90 hari sebelumnya. </p>\r\n<p> Untuk detail jenis data yang tersedia, lihat dokumentasi bantuan berikut: </p>\r\n<ul>\r\n<li><b>Penggunaan Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Aktivitas Pengguna Teams:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Masukkan nama organisasi dan proyek.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Layanan Azure DevOps",
        "Documentation.LongDescription": "Menghasilkan tabel umpan OData yang diberikan oleh Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Menghasilkan format biner yang membaca nilai biner.",
        "Documentation.LongDescription": "Menghasilkan format biner yang membaca nilai biner.  Jika <code>length</code> ditetapkan, nilai biner akan berisi banyak byte.  Jika <code>length</code> tidak ditetapkan, nilai biner akan berisi byte tersisa.  <code>length</code> dapat ditetapkan sebagai angka, atau sebagai format biner sepanjang yang melebihi data biner.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Menghasilkan nilai logika berdasarkan pemeriksaan persamaan atas dua nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>logis</code> berdasarkan pemeriksaan kesetaraan atas dua nilai yang diberikan, <code>x</code> dan <code>y</code>, menggunakan <code>comparer</code>.\r yang disediakan\n      <div>\r\n        <code>comparer</code>adalah <code>Pembanding</code> yang digunakan untuk mengontrol perbandingan.\r\n         Pembanding adalah fungsi yang menerima dua argumen dan mengembalikan -1, 0, atau 1 berdasarkan apakah nilai pertama lebih kecil, sama dengan, atau lebih besar dari yang kedua.\r\n         Pembanding dapat digunakan untuk memberikan perbandingan peka huruf besar kecil atau budaya dan paham bahasa lokal.\r\n      </div>\r\n      <div>\r\n         Pembanding bawaan berikut tersedia dalam bahasa rumus:\r\n      </div>\r\n      <ul>\r\n         <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal yang tepat</li>\r\n         <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan peka huruf besar-kecil ordinal yang tepat</li>\r\n         <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan berdasarkan budaya</li>\r\n       </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Bandingkan \"1\" dan \"A\" menggunakan lokal \"en-US\" untuk menentukan apakah nilai setara atau tidak.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Menghasilkan tanggal dan waktu saat ini dalam zona waktu lokal. Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>datetime</code> yang ditetapkan ke tanggal dan waktu saat ini pada sistem. Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut, tidak seperti DateTime.LocalNow, yang mungkin menghasilkan nilai berbeda pada rangkaian eksekusi ekspresi.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Menghasilkan tanggal dan waktu saat ini dalam zona waktu lokal.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>datetime</code> yang ditetapkan ke tanggal dan waktu saat ini pada sistem.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Menghasilkan tanggal & waktu saat ini dalam zona waktu lokal. Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>datetime</code> yang ditetapkan ke tanggal dan waktu saat ini pada sistem. Nilai yang dihasilkan berisi informasi timezone yang menunjukkan timezone lokal. Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut, tidak seperti DateTimeZone.LocalNow, yang mungkin menghasilkan nilai berbeda pada rangkaian eksekusi ekspresi.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Menghasilkan tanggal dan waktu saat ini di UTC (zona waktu GMT). Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut.",
        "Documentation.LongDescription": "Menghasilkan tanggal dan waktu saat ini di UTC (zona waktu GMT). Nilai ini tetap dan tidak akan berubah dengan pemanggilan berturut-turut.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Menghasilkan tanggal & waktu saat ini dalam zona waktu lokal.",
        "Documentation.LongDescription": "Mengembalikan serangkaian nilai <code>datetimezone</code> yang ditetapkan ke tanggal dan waktu saat ini pada sistem.\r\n    Nilai yang dihasilkan berisi informasi zona waktu yang menunjukkan zona waktu lokal.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Menghasilkan tanggal dan waktu saat ini di UTC (zona waktu GMT).",
        "Documentation.LongDescription": "Menghasilkan tanggal dan waktu saat ini di UTC (zona waktu GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengambil tanggal & waktu saat ini dalam UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Menghasilkan pengidentifikasi buram untuk evaluasi yang sedang berjalan.",
        "Documentation.LongDescription": "Menghasilkan pengidentifikasi buram untuk evaluasi yang sedang berjalan.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Menghasilkan pengidentifikasi buram untuk mengorelasikan permintaan masuk dengan yang keluar.",
        "Documentation.LongDescription": "Menghasilkan pengidentifikasi buram untuk mengorelasikan permintaan masuk dengan yang keluar.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Menulis entri pelacakan, jika pelacakan diaktifkan, dan menghasilkan nilai.",
        "Documentation.LongDescription": "Menulis pelacakan <code>message</code>, jika pelacakan diaktifkan, dan menghasilkan <code>value</code>. Sebuah parameter opsional <code>delayed</code> menentukan apakah akan menunda evaluasi <code>value</code> hingga pesan dilacak. <code>traceLevel</code> dapat mengambil salah satu dari nilai berikut:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Melacak pesan sebelum memanggil fungsi Text.From dan mengembalikan hasil.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Penyedia identitas default untuk host saat ini.",
        "Documentation.LongDescription": "Penyedia identitas default untuk host saat ini.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Mengakumulasi nilai ringkasan dari item dalam daftar.",
        "Documentation.LongDescription": "Mengakumulasi nilai ringkasan dari item dalam daftar <code>list</code>, menggunakan <code>accumulator</code>.\r\n    Parameter turunan opsional, <code>seed</code>, dapat ditetapkan.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Mengakumulasi nilai ringkasan dari item dalam daftar {1, 2, 3, 4, 5} menggunakan ((status, saat ini) => status + saat ini).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Menghasilkan daftar nilai datetimezone dengan nilai awal, jumlah, dan nilai durasi inkremental tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai <code>datetimezone</code> dengan ukuran <code>count</code> yang dimulai pada <code>start</code>. Inkremental tertentu, <code>step</code>, adalah nilai <code>duration</code> yang ditambahkan ke setiap nilai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 10 nilai yang dimulai dari 5 menit sebelum Hari Tahun Baru (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) dengan inkremental 1 menit (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Menghasilkan daftar nilai datetime dengan nilai awal, jumlah, dan nilai durasi inkremental tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai <code>datetime</code> dengan ukuran <code>count</code> yang dimulai pada <code>start</code>. Inkremental tertentu, <code>step</code>, adalah nilai <code>duration</code> yang ditambahkan ke setiap nilai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 10 nilai yang dimulai dari 5 menit sebelum Hari Tahun Baru (#datetime(2011, 12, 31, 23, 55, 0)) dengan inkremental 1 menit (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Menghasilkan daftar nilai tanggal dengan nilai awal, jumlah, dan nilai durasi inkremental tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai <code>date</code> dengan ukuran <code>count</code> yang dimulai pada <code>start</code>. Inkremental tertentu, <code>step</code>, adalah nilai <code>duration</code> yang ditambahkan ke setiap nilai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 5 nilai yang dimulai dari Malam Tahun Baru (#date(2011, 12, 31)) dengan inkremental 1 hari(#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Menghasilkan daftar nilai durasi dengan nilai awal, jumlah, dan nilai durasi inkremental tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai <code>count</code> <code>duration</code> yang dimulai pada <code>start</code> dengan inkremental sebesar <code>duration</code> tertentu, <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 5 nilai yang dimulai pada 1 jam dengan inkremental berdasarkan jam.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Buat daftar nilai.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai menggunakan fungsi yang disediakan. Fungsi <code>initial</code> menghasilkan nilai kandidat awal, yang kemudian diuji terhadap <code>condition</code>.\r\n    Jika nilai kandidat disetujui, maka akan dihasilkan sebagai bagian dari daftar yang dihasilkan, dan nilai kandidat berikutnya dihasilkan dengan meneruskan nilai yang baru disetujui ke <code>next</code>.\r\n    Setelah nilai kandidat gagal cocok dengan <code>condition</code>, proses pembuatan daftar akan berhenti.\r\n    Parameter opsional, <code>selector</code>, juga dapat diberikan untuk mengubah item dalam daftar hasil.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Buat daftar dengan mulai dari sepuluh, berulang kali dikurangi satu, dan memastikan setiap item lebih besar dari nol.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Menghasilkan daftar data berisi x dan y, dengan x adalah nilai dan y adalah daftar. x harus tetap kurang dari 10 dan menunjukkan jumlah item dalam daftar y. Setelah daftar dibuat, hanya menghasilkan nilai x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Menyisipkan nilai ke dalam daftar pada indeks tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar baru yang diproduksi dengan menyisipkan nilai dalam <code>values</code> ke <code>list</code> pada <code>index</code>. Posisi pertama dalam daftar berada pada indeks 0.\r\n      <ul>\r\n        <li><code>list</code>: Daftar target yang digunakan untuk menyisipkan nilai.</li>\r\n        <li><code>index</code>: Indeks daftar target (<code>list</code>) yang digunakan untuk menyisipkan nilai. Posisi pertama dalam daftar berada pada indeks 0.</li>\r\n        <li><code>values</code>: Daftar nilai yang akan disisipkan ke <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Menyisipkan daftar ({3, 4}) ke dalam daftar target ({1, 2, 5}) pada indeks 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Menyisipkan daftar dengan daftar bersarang ({1, {1.1, 1.2}}) ke dalam daftar target ({2, 3, 4}) pada indeks 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Mengganti jumlah nilai yang dimulai pada posisi dengan nilai pengganti.",
        "Documentation.LongDescription": "Mengganti nilai <code>count</code> dalam <code>list</code> dengan daftar <code>replaceWith</code>, yang dimulai pada posisi yang ditetapkan, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Mengganti {7, 8, 9} dalam daftar {1, 2, 7, 8, 9, 5} dengan {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Mencari daftar nilai yang ditetapkan dan menggantinya.",
        "Documentation.LongDescription": "Mencari daftar nilai, <code>list</code>, untuk nilai <code>oldValue</code> dan mengganti setiap kemunculan dengan nilai pengganti <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Mengganti semua nilai \"a\" dalam daftar {\"a\", \"B\", \"a\", \"a\"} dengan \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Menghasilkan daftar nilai waktu dengan nilai awal, jumlah, dan nilai durasi inkremental tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai <code>time</code> dengan ukuran <code>count</code> yang dimulai pada <code>start</code>. Inkremental tertentu, <code>step</code>, adalah nilai <code>duration</code> yang ditambahkan ke setiap nilai.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 4 nilai yang dimulai dari siang (#time(12, 0, 0)) dengan inkremental satu jam (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Menghasilkan daftar yang elemennya ditransformasikan dari daftar input menggunakan fungsi yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan daftar yang elemennya diproyeksikan dari daftar input.<br>\r\n    <br>\r\n    Fungsi <code>collectionTransform</code> mengubah setiap elemen menjadi daftar perantara, dan fungsi <code>resultTransform</code> menerima elemen asli serta item dari daftar perantara untuk menyusun hasil akhir.<br>\r\n    <br>\r\n    Fungsi <code>collectionTransform</code> memiliki tanda tangan <code>(x sebagai apa pun) sebagai daftar => ...</code>, di mana <code>x</code> adalah elemen dalam <code>list</code>.\r\n    Fungsi <code>resultTransform</code> memproyeksikan bentuk hasil dan memiliki tanda tangan <code>(x sebagai apa pun, y sebagai apa pun) sebagai apa pun => ...</code>, di mana <code>x</code> adalah elemen dalam <code>list</code> dan <code>y</code> adalah elemen dari daftar yang dihasilkan dengan meneruskan <code>x</code> ke <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Meratakan daftar orang dan hewan peliharaan mereka.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Menghasilkan bilangan acak.",
        "Documentation.LongDescription": "Menghasilkan bilangan acak antara 0 dan 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Mengambil bilangan acak.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Menambahkan bidang ke data.",
        "Documentation.LongDescription": "Menambahkan bidang ke data <code>record</code>, dengan nama bidang <code>fieldName</code> dan nilai <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan bidang Alamat ke data.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Mengganti teks dalam input yang diberikan.",
        "Documentation.LongDescription": "Mengganti teks <code>old</code> dalam <code>text</code> asli dengan teks <code>new</code>. Fungsi pengganti ini dapat digunakan dalam <code>List.ReplaceValue</code> dan <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Mengganti teks \"hE\" dengan \"He\" dalam string \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Mengganti nilai dalam input yang diberikan.",
        "Documentation.LongDescription": "Mengganti nilai <code>old</code> dalam <code>value</code> asli dengan nilai <code>new</code>. Fungsi pengganti ini dapat digunakan dalam <code>List.ReplaceValue</code> dan <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Mengganti nilai 11 dengan nilai 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Menghasilkan hasil JSON dari API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Melakukan panggilan ke Smartsheet 2.0 REST API pada endpoint yang ditentukan dan menghasilkan hasil sebagai data JSON.",
        "Documentation.Examples": [
          {
            "Description": "Menarik data dari endpoint API Smartsheet lembar dengan argumen tambahan yang ditentukan",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabel dengan informasi lembar yang dihasilkan oleh API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Menghasilkan fungsi yang tidak membagi, menghasilkan argumen sebagai satu daftar elemen.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang tidak membagi, menghasilkan argumen sebagai satu daftar elemen.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada spasi.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada spasi.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input dengan karakter spasi kosong, dan memperlakukan kutipan seperti karakter lain.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Mempartisi tabel menjadi daftar tabel berdasarkan jumlah grup dan kolom yang ditetapkan.",
        "Documentation.LongDescription": "Mempartisi <code>table</code> menjadi daftar jumlah tabel <code>groups</code>, berdasarkan nilai <code>column</code> dan fungsi <code>hash</code>.\r\n    Fungsi <code>hash</code> diterapkan ke nilai baris <code>column</code> untuk memperoleh nilai hash baris. Modulo nilai hash <code>groups</code> akan menentukan tabel yang dihasilkan untuk menempatkan baris.\r\n    <ul>\r\n       <li><code>table</code>: Tabel yang akan dipartisi.</li>\r\n       <li><code>column</code>: Kolom yang akan di-hash guna menentukan tabel yang dihasilkan untuk memasukkan baris.</li>\r\n       <li><code>groups</code>: Jumlah tabel untuk tabel input yang akan dipartisi.</li>\r\n       <li><code>hash</code>: Fungsi yang diterapkan untuk memperoleh nilai hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mempartisi tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> menjadi 2 tabel di kolom [a], menggunakan nilai kolom sebagai fungsi hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Menghasilkan bagian dari <code>text</code> antara <code>startDelimiter</code> dan <code>endDelimiter</code> yang ditentukan.\r\n    Angka opsional <code>startIndex</code> menunjukkan kemunculan <code>startDelimiter</code> mana yang harus dipertimbangkan.\r\n    Daftar opsional <code>startIndex</code> menunjukkan kemunculan <code>startDelimiter</code> mana yang harus dipertimbangkan, begitu pula apakah pengindeksan harus dilakukan di awal atau akhir input.\r\n    <code>endIndex</code> serupa, kecuali pengindeksan dilakukan berdasarkan <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan bagian dari \"111 (222) 333 (444)\" antara tanda kurung buka (pertama) dan tanda kurung tutup (pertama) yang mengikutinya.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Dapatkan bagian dari \"111 (222) 333 (444)\" antara tanda kurung buka kedua dan kurung tutup kedua yang mengikutinya.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Dapatkan bagian dari \"111 (222) 333 (444)\" antara tanda kurung buka kedua dari tanda kurung tutup terakhir dan kedua yang mengikutinya.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Menyisipkan satu nilai teks ke nilai teks lain pada posisi tertentu.",
        "Documentation.LongDescription": "Memberikan hasil penyisipan nilai teks <code>newText</code> ke nilai teks <code>text</code> pada posisi <code>offset</code>. Posisi dimulai pada angka 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Menyisipkan \"C\" antara \"B\" dan \"D\" pada \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Menghasilkan pengidentifikasi unik global (GUID) acak.",
        "Documentation.LongDescription": "Menghasilkan pengidentifikasi unik global (GUID) acak.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Mengganti semua kemunculan substring tertentu pada teks.",
        "Documentation.LongDescription": "Memberikan hasil penggantian semua kemunculan nilai teks <code>old</code> pada nilai teks <code>text</code> dengan nilai teks <code>new</code>. Fungsi ini peka huruf besar-kecil.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Mengganti setiap kemunculan \"the\" pada kalimat dengan \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Menghapus kisaran karakter dan menyisipkan nilai baru pada posisi tertentu.",
        "Documentation.LongDescription": "Memberikan hasil sejumlah karakter terhapus, <code>count</code>, dari nilai teks <code>text</code> dimulai pada posisi <code>offset</code>, lalu menyisipkan nilai teks <code>newText</code> di posisi yang sama pada <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Mengganti satu karakter di posisi 2 pada nilai teks \"ABGF\" dengan nilai teks baru \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Menambahkan kunci ke tipe tabel tertentu.",
        "Documentation.LongDescription": "Menambahkan kunci ke tipe tabel tertentu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Menghasilkan daftar identitas yang akan diterima kondisinya.",
        "Documentation.LongDescription": "<p>Menggunakan <code>identityProvider</code> yang ditentukan, mengonversi <code>condition</code> ke dalam daftar identitas yang akan dikembalikan sebagai <code>true</code> oleh <code>condition</code> dalam semua konteks otorisasi dengan <code>identityProvider</code> sebagai penyedia identitas. Kesalahan muncul jika tidak dimungkinkan untuk mengonversi <code>condition</code> menjadi daftar identitas, misalnya jika <code>condition</code> memanggil atribut selain identitas pengguna atau grup untuk membuat keputusan.</p>\r\n    <p>Perlu diketahui bahwa daftar identitas menunjukkan identitas saat muncul dalam <code>condition</code> dan tidak ada normalisasi (misalnya perluasan grup) yang dilakukan pada identitas tersebut.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Mengompresi nilai biner yang menggunakan jenis kompresi yang diberikan.",
        "Documentation.LongDescription": "Mengompresi nilai biner menggunakan jenis kompresi yang diberikan.  Hasil dari panggilan ini adalah salinan input yang dikompresi. Jenis kompresi mencakup:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Kompresi nilai biner.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Mendekompresi nilai biner menggunakan jenis kompresi yang tersedia.",
        "Documentation.LongDescription": "Mendekompresi nilai biner menggunakan jenis kompresi yang tersedia.  Hasil dari panggilan ini adalah salinan input yang didekompresi. Jenis kompresi mencakup:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li> \r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekompresikan nilai biner.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Menghasilkan subset nilai biner yang dimulai pada offset.",
        "Documentation.LongDescription": "Menghasilkan subset nilai biner yang dimulai pada offset <code>binary</code>. Parameter opsional, <code>offset</code>, menentukan panjang maksimum subset.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan subset nilai biner yang dimulai pada offset 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Menghasilkan subset panjang 2 dari offset 6 nilai biner.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Membagi biner yang ditentukan ke dalam daftar biner menggunakan ukuran halaman yang ditentukan.",
        "Documentation.LongDescription": "Membagi <code>binary</code> ke dalam daftar biner dengan elemen pertama daftar output adalah biner yang berisi <code>pageSize</code> byte pertama dari \r\n    biner sumber, elemen daftar output berikutnya adalah biner yang berisi <code>pageSize</code> byte berikutnya dari biner sumber, dan seterusnya.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Membuat atau memperluas biner dengan handler yang ditentukan pengguna untuk kueri dan operasi tindakan.",
        "Documentation.LongDescription": "<p>Menghasilkan tampilan <code>binary</code> saat fungsi yang ditentukan di <code>handlers</code> digunakan sebagai pengganti perilaku default operasi saat operasi diterapkan ke tampilan.</p>\r\n<p>Jika <code>binary</code> disediakan, semua fungsi handler bersifat opsional. Jika <code>binary</code> tidak disediakan, fungsi handler <code>GetStream</code> diperlukan. Jika fungsi handler tidak ditentukan untuk operasi, perilaku operasi default diterapkan ke <code>binary</code> sebagai gantinya (kecuali dalam kasus <code>GetExpression</code>).</p>\r\n<p>Fungsi handler harus menghasilkan nilai yang secara semantik setara dengan hasil penerapan operasi terhadap <code>binary</code> (atau tampilan hasil dalam kasus <code>GetExpression</code>).</p>\r\n<p>Jika fungsi handler memunculkan kesalahan, perilaku default operasi diterapkan pada tampilan.</p>\r\n<p><code>Binary.View</code> dapat digunakan untuk mengimplementasikan pelipatan ke sumber data – terjemahan kueri M ke dalam operasi khusus sumber (misalnya, untuk mengunduh bagian file).</p>\r\n<p>Lihat dokumentasi konektor kustom Power Query yang diterbitkan untuk deskripsi yang lebih lengkap tentang <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Buat tampilan dasar yang tidak memerlukan akses data untuk menentukan panjangnya.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Menghasilkan format biner dengan urutan byte yang ditentukan oleh fungsi.",
        "Documentation.LongDescription": "Menghasilkan format biner dengan urutan byte yang ditentukan oleh <code>binaryFormat</code>.  Urutan byte default adalah <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Menghasilkan format biner yang memilih format biner berikutnya berdasarkan nilai yang telah dibaca.",
        "Documentation.LongDescription": "Menghasilkan format biner yang memilih format biner berikutnya berdasarkan nilai yang telah dibaca.  Nilai format biner yang dihasilkan fungsi ini dapat digunakan pada tahap:<ul>\r\n<li>Format biner yang ditetapkan parameter <code>binaryFormat</code> digunakan untuk membaca nilai.</li>\r\n<li>Nilai diserahkan ke fungsi pilihan yang ditetapkan parameter <code>chooseFunction</code>.</li>\r\n<li>Fungsi pilihan akan memeriksa nilai dan menghasilkan format biner kedua.</li>\r\n<li>Format biner kedua yang digunakan untuk membaca nilai kedua.</li>\r\n<li>Jika fungsi kombinasi ditetapkan, maka nilai pertama dan kedua diserahkan ke fungsi kombinasi, dan menghasilkan nilai hasil.</li>\r\n<li>Jika fungsi kombinasi tidak ditetapkan, maka nilai kedua akan dihasilkan.</li>\r\n<li>Nilai kedua akan dihasilkan.</li>\r\n</ul>Parameter opsional <code>type</code> menunjukkan tipe format biner yang akan dihasilkan oleh fungsi pilihan.  Baik <code>type any</code>, <code>type list</code>, maupun <code>type binary</code> dapat ditetapkan.  Jika parameter <code>type</code> tidak ditetapkan, maka <code>type any</code> akan digunakan.   Jika <code>type list</code> atau <code>type binary</code> digunakan, maka sistem dapat menghasilkan <code>binary</code> streaming atau nilai <code>list</code> dan bukan yang di-buffer, yang dapat mengurangi jumlah memori yang diperlukan untuk membaca format.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Membaca daftar byte yang jumlah elemennya ditentukan oleh byte pertama.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Membaca daftar byte yang jumlah elemennya ditentukan oleh byte pertama, dan mempertahankan byte pertama yang terbaca.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Membaca daftar byte yang jumlah elemennya ditentukan oleh byte pertama menggunakan daftar streaming.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Menghasilkan format biner yang membaca sekelompok item.",
        "Documentation.LongDescription": "Parameter sebagai berikut:\r\n<ul>\r\n<li>Parameter <code>binaryFormat</code> yang menetapkan format biner pada nilai kunci.</li>\r\n<li>Parameter <code>group</code> memberikan informasi tentang grup item yang diketahui.</li>\r\n<li>Parameter <code>extra</code> opsional dapat digunakan untuk menentukan fungsi yang akan menghasilkan nilai format biner untuk nilai yang disertai kunci apa pun yang tidak diperkirakan.  Jika parameter <code>extra</code> tidak ditetapkan, maka kesalahan akan muncul jika terdapat nilai kunci yang tidak diperkirakan.</li>\r\n</ul>\r\nParameter <code>group</code> akan menentukan daftar definisi item.  Setiap definisi item adalah daftar, berisi 3-5 nilai, sebagai berikut:\r\n<ul>\r\n<li>Nilai kunci.  Nilai kunci yang terkait dengan item.  Nilai ini harus unik dalam sekumpulan item.</li>\r\n<li>Format item.  Format biner yang terkait dengan nilai item.  Kondisi ini memungkinkan setiap item memiliki format berbeda. </li>\r\n<li>Kemunculan item.  Nilai <code>BinaryOccurrence.Type</code> untuk jumlah item yang diperkirakan muncul dalam grup.   Item wajib yang tidak ada mengakibatkan kesalahan.  Item duplikat wajib atau opsional akan ditangani seperti nilai kunci yang tidak diperkirakan.</li>\r\n<li>Nilai item default (opsional).  Jika nilai item default muncul dalam daftar definisi item dan tidak null, maka nilai item tersebut akan digunakan, bukan default.  Default untuk item berulang atau opsional adalah null, dan default untuk nilai berulang adalah daftar kosong { }.</li>\r\n<li>Transformasi nilai item (opsional).   Jika nilai item mentransformasi fungsi terdapat dalam daftar definisi item dan tidak null, maka nilai item tersebut akan dipanggil untuk mentransformasi nilai item sebelum dihasilkan.  Fungsi transformasi hanya akan dipanggil jika item muncul dalam masukan (dan tidak akan dipanggil dengan nilai default). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Berikut adalah asumsi nilai kunci yang merupakan byte tunggal, dengan 4 item yang diperkirakan dalam grup, kesemuanya memiliki byte data yang menyertai kunci.  Item muncul dalam input sebagai berikut:\r\n<ul>\r\n<li>Kunci 1 diperlukan, dan tidak muncul dengan nilai 11.</li>\r\n<li>Kunci 2 berulang, dan muncul dua kali dengan nilai 22, dan dihasilkan dalam nilai { 22, 22 }.</li>\r\n<li>Kunci 3 adalah opsional, tidak muncul, dan dihasilkan dalam nilai null.</li>\r\n<li>Kunci 4 berulang, namun tidak muncul, dan dihasilkan dalam nilai { }.</li>\r\n<li>Kunci 5 bukan merupakan bagian dalam grup, namun muncul sekali dengan nilai 55.  Fungsi ekstra dipanggil dengan nilai kunci 5, dan menghasilkan format yang terkait dengan nilai tersebut (BinaryFormat.Byte).  Nilai 55 dibaca dan dibuang.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Contoh berikut mengilustrasikan transformasi nilai item dan nilai item default.   Item berulang dengan kunci 1 akan menjumlahkan daftar nilai yang terbaca menggunakan List.Sum.  Item opsional dengan kunci 2 memiliki nilai default 123, bukan null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Menghasilkan format biner yang membatasi jumlah data yang dapat dibaca.",
        "Documentation.LongDescription": "Menghasilkan format biner yang membatasi jumlah data yang dapat dibaca.  Baik <code>BinaryFormat.List</code> maupun <code>BinaryFormat.Binary</code> dapat digunakan untuk membaca data hingga akhir data.  <code>BinaryFormat.Length</code> dapat digunakan untuk membatasi byte yang dibaca.  Parameter <code>binaryFormat</code> akan menetapkan format biner hingga batas.  Parameter <code>length</code> menentukan jumlah byte yang akan dibaca.  Parameter <code>length</code> dapat berupa nilai angka, atau nilai format biner yang menetapkan format nilai panjang yang muncul dan melebihi nilai yang dibaca.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Membatasi jumlah byte yang dibaca ke 2 bila membaca daftar byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Membatasi jumlah byte yang dibaca ketika membaca daftar byte ke nilai byte yang melebihi daftar.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Menghasilkan format biner yang akan mentransformasi nilai yang dibaca format biner lain.",
        "Documentation.LongDescription": "Menghasilkan format biner yang akan mentransformasi nilai yang dibaca format biner lain.  Parameter <code>binaryFormat</code> menentukan format biner yang akan digunakan untuk membaca nilai.  <code>function</code> digunakan dengan nilai yang dibaca, dan menghasilkan nilai yang ditransformasi.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Membaca byte dan menambahkan ke dalamnya.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Menghasilkan fungsi pembanding yang menggunakan peraturan Ordinal untuk membandingkan nilai.",
        "Documentation.LongDescription": "Menghasilkan fungsi pembanding yang menggunakan aturan Ordinal untuk membandingkan nilai yang diberikan <code>x</code> dan <code>y</code>.<br>\r\n      <br>\r\n Fungsi pembanding menerima dua argumen dan mengembalikan -1, 0, atau 1 berdasarkan apakah nilai pertama kurang dari, sama dengan, atau lebih besar dari yang kedua.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Dengan menggunakan aturan Ordinal, membandingkan apakah \"encyclopædia\" dan \"encyclopaedia\" sama. Perlu dicatat keduanya sama menggunakan <code>Comparer.FromCulture(\"en-US\")</code>.",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Menghasilkan fungsi pembanding yang tidak peka huruf besar kecil yang menggunakan aturan Ordinal untuk membandingan nilai.",
        "Documentation.LongDescription": "Mengembalikan fungsi pembanding tidak peka huruf besar/kecil yang menggunakan aturan Ordinal untuk membandingkan nilai yang diberikan <code>x</code> dan <code>y</code>.<br>\r\n        <br>\r\n         Fungsi pembanding menerima dua argumen dan mengembalikan -1, 0, atau 1 berdasarkan apakah nilai pertama kurang dari, sama dengan, atau lebih besar dari yang kedua.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Dengan aturan Ordinal yang tidak peka huruf besar kecil, membandingkan \"Abc\" dengan \"abc\". Perhatikan bahwa \"Abc\" kurang dari \"abc\" menggunakan <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Mengembalikan properti atribut dimensi.",
        "Documentation.LongDescription": "Mengembalikan properti <code>propertyName</code> dari atribut dimensi <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Mengembalikan properti pengukuran (properti sel).",
        "Documentation.LongDescription": "Mengembalikan properti <code>propertyName</code> dari pengukuran <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Sumber Kueri SQL Databricks",
        "Documentation.LongDescription": "Tentukan sumber data Databricks untuk menjalankan kueri SQL"
      },
      "ReturnType": "Kueri SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Sumber Kueri SQL Databricks",
        "Documentation.LongDescription": "Tentukan sumber data Databricks untuk menjalankan kueri SQL"
      },
      "ReturnType": "Kueri SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Menambahkan hari yang ditetapkan ke tanggal.",
        "Documentation.LongDescription": "Memberikan hasil <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> dari menambahkan <code>numberOfDays</code> hari ke nilai <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menambahkan hari.</li>\r\n      <li><code>numberOfDays</code>: Jumlah hari yang akan ditambahkan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan 5 hari ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal 5/14/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Menambahkan bulan yang ditetapkan ke tanggal.",
        "Documentation.LongDescription": "Mengembalikan <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> dari penambahan <code>numberOfMonths</code> bulan ke nilai <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menambahkan bulan.</li>\r\n        <li><code>numberOfMonths</code>: Jumlah bulan yang akan ditambahkan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan 5 bulan ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal 5/14/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Menambahkan 18 bulan ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal dan waktu 5/14/2011 08:15:22 AM.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Menambahkan kuartal yang ditetapkan ke tanggal.",
        "Documentation.LongDescription": "Memberikan hasil <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> dari menambahkan <code>numberOfQuarters</code> kuartal ke nilai <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menambahkan kuartal.</li>\r\n      <li><code>numberOfQuarters</code>: Jumlah kuartal yang akan ditambahkan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan 1 kuartal ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal 5/14/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Menambahkan pekan yang ditetapkan ke tanggal.",
        "Documentation.LongDescription": "Memberikan hasil <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> dari menambahkan <code>numberOfWeeks</code> pekan ke nilai <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menambahkan pekan.</li>\r\n      <li><code>numberOfWeeks</code>: Jumlah pekan yang akan ditambahkan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan 2 pekan ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal 5/14/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Menambahkan tahun yang ditetapkan ke tanggal.",
        "Documentation.LongDescription": "Mengembalikan hasil <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> dari penambahan <code>numberOfYears</code> ke nilai <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menambahkan tahun.</li>\r\n        <li><code>numberOfYears</code>: Jumlah tahun yang akan ditambahkan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menambahkan 4 tahun ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal 5/14/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Menambahkan 10 tahun ke nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal dan waktu 5/14/2011 08:15:22 AM.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa hari berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi pada beberapa hari berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, atau <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>days</code>: Jumlah hari.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tanggal setelah waktu sistem saat ini terjadi dua hari lagi.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa bulan berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa bulan berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>months</code>: Jumlah bulan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah bulan setelah waktu sistem saat ini terjadi dua bulan lagi.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa kuartal berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa kuartal berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>quarters</code>: Jumlah kuartal.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah triwulan setelah waktu sistem saat ini terjadi dua triwulan lagi.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa minggu berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa minggu berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>weeks</code>: Jumlah minggu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah minggu setelah waktu sistem saat ini terjadi dua minggu lagi.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa tahun berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa tahun berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>years</code>: Jumlah tahun.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tahun setelah waktu sistem saat ini terjadi dua tahun lagi.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa hari sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa hari sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>days</code>: Jumlah hari.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tanggal setelah waktu sistem saat ini terjadi dua hari lagi.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa bulan sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa bulan sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>months</code>: Jumlah bulan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah bulan setelah waktu sistem saat ini terjadi dua bulan lagi.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa kuartal sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa kuartal sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>quarters</code>: Jumlah kuartal.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah triwulan setelah waktu sistem saat ini terjadi dua triwulan lagi.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa minggu sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa minggu sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>weeks</code>: Jumlah minggu.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah minggu setelah waktu sistem saat ini terjadi dua minggu lagi.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam beberapa tahun sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada beberapa tahun sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>years</code>: Jumlah tahun.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tahun setelah waktu sistem saat ini terjadi dua tahun lagi.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Menambahkan informasi zona waktu ke nilai tanggal/waktu.",
        "Documentation.LongDescription": "Menambahkan informasi zona waktu ke nilai <code>dateTime</code>. Informasi zona waktu meliputi <code>timezoneHours</code> dan secara opsional <code>timezoneMinutes</code>, yang menyebutkan perbedaan yang diinginkan dari waktu UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Atur zona waktu ke UTC+7:30 (7 jam dan 30 menit lebih cepat dari UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi dalam beberapa jam ke depan, seperti yang ditentukan oleh tanggal dan waktu dalam sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa jam ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>hours</code>: Jumlah jam.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah jam setelah waktu sistem saat ini dalam dua jam berikutnya.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi pada beberapa menit ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perhatikan bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam menit saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa menit ke depan, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam menit saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>minutes</code>: Jumlah menit.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah menit setelah waktu sistem saat ini dalam dua menit berikutnya.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi pada beberapa detik ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perhatikan bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam detik saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa detik ke depan, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam detik saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>seconds</code>: Jumlah detik.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah detik setelah waktu sistem saat ini dalam dua detik berikutnya.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Menentukan apakah tanggalwaktu ini terjadi dalam beberapa jam sebelumnya, seperti yang ditentukan oleh tanggal dan waktu dalam sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam jam ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa jam sebelumnya, seperti yang ditentukan oleh tanggal dan waktu dalam sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam jam ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>hours</code>: Jumlah jam.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah jam sebelum waktu sistem saat ini dalam dua jam sebelumnya.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Menentukan apakah tanggalwaktu ini terjadi dalam beberapa menit sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam menit ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa menit sebelumnya, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diisi nilai yang muncul dalam menit ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>minutes</code>: Jumlah menit.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah menit sebelum waktu sistem saat ini dalam dua menit sebelumnya.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Menentukan apakah tanggalwaktu ini terjadi dalam beberapa detik sebelumnya, seperti yang ditentukan oleh tanggal dan waktu dalam sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam detik ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam beberapa detik sebelumnya, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diisi nilai yang muncul dalam detik ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      <li><code>seconds</code>: Jumlah detik.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah detik sebelum waktu sistem saat ini dalam dua detik sebelumnya.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Mengubah timezone nilai.",
        "Documentation.LongDescription": "Mengubah informasi zona waktu pada nilai datetimezone <code>dateTimeZone</code> ke informasi zona waktu baru yang disediakan oleh <code>timezoneHours</code> dan secara opsional <code>timezoneMinutes</code>.\r\n    Jika <code>dateTimeZone</code> tidak memiliki komponen timezone, maka pengecualian akan dibuat.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengubah informasi zona waktu untuk #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) ke 8 jam.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Mengubah informasi zona waktu untuk #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) menjadi -30 menit.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Mengakses nilai berdasarkan nama dalam mashup tertanam.",
        "Documentation.LongDescription": "Mengakses nilai berdasarkan nama dalam mashup tertanam.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Membuat fungsi dengan tanda tangan parameter tertentu di atas fungsi yang membutuhkan argumen daftar tunggal",
        "Documentation.LongDescription": "Membutuhan fungsi tunggal <code>function</code> dan membuat fungsi baru dengan jenis <code>functionType</code> yang membangun daftar di luar argumen dan membagikannya ke <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Mengonversikan List.Sum menjadi fungsi dua argumen yang argumennya ditambahkan bersamaan",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Mengonversikan fungsi menulis daftar menjadi fungsi dua argumen",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Menggunakan fungsi tertentu",
        "Documentation.LongDescription": "Menggunakan fungsi tertentu dengan daftar argumen yang ditetapkan dan memberikan hasil.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Menggunakan Record.FieldNames dengan satu argumen [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Meminta fungsi yang diberikan setelah durasi yang ditentukan terlewati.",
        "Documentation.LongDescription": "Mengembalikan hasil <code>function</code> yang diminta setelah durasi <code>delay</code> terlewati.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Membuat fungsi skalar di atas fungsi vektor, mengelompokkan beberapa invokasi.",
        "Documentation.LongDescription": "<p>Menghasilkan fungsi skalar tipe <code>scalarFunctionType</code> yang menggunakan <code>vectorFunction</code> dengan baris tunggal argumen dan menghasilkan output tunggal. Selain itu, ketika fungsi skalar berulang kali diterapkan untuk setiap baris pada tabel input, seperti di Table.AddColumn, sebagai gantinya <code>vectorFunction</code> akan diterapkan sekali untuk semua input.</p>\r\n<p><code>vectorFunction</code> akan diberikan tabel yang kolomnya cocok dengan nama dan posisi parameter <code>scalarFunctionType</code>. Setiap baris pada tabel ini berisi argumen untuk satu panggilan ke fungsi skalar, dengan kolom yang sesuai dengan parameter <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> harus menghasilkan daftar dengan panjang yang sama seperti tabel input, dengan item di setiap posisi harus merupakan hasil yang sama seperti mengevaluasi fungsi skalar pada baris input pada posisi yang sama.</p>\r\n<p>Tabel input diharapkan akan dialirkan, jadi <code>vectorFunction</code> diharapkan untuk mengalirkan output-nya saat input masuk, hanya bekerja dengan satu gugus input pada satu waktu. Secara khusus, <code>vectorFunction</code> tidak harus menghitung tabel input-nya lebih dari sekali.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Membuat catatan yang mewakili titik geografis dari bagian-bagian.",
        "Documentation.LongDescription": "Membuat catatan yang mewakili titik geografis dari bagian penyusunnya, seperti garis bujur, garis lintang, dan jika ada, elevasi (Z) dan pengukuran (M). Pengidentifikasi referensi spasial (SRID) opsional dapat diberikan jika berbeda dengan nilai default (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Membuat catatan yang mewakili titik geometris dari bagian-bagian.",
        "Documentation.LongDescription": "Membuat catatan yang mewakili titik geometris dari bagian penyusunnya, seperti koordinat X, koordinat Y, dan jika ada, koordinat Z dan pengukuran (M). Pengidentifikasi referensi spasial (SRID) opsional dapat diberikan jika berbeda dengan nilai default (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Membuat identitas.",
        "Documentation.LongDescription": "Membuat identitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Menentukan apakah identitas merupakan anggota dari kumpulan identitas.",
        "Documentation.LongDescription": "Menentukan apakah identitas merupakan anggota dari kumpulan identitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Menghasilkan daftar yang terdiri atas semua elemen offset dengan bilangan ganjil dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan daftar yang terdiri atas semua elemen offset dengan bilangan ganjil dalam daftar. Beralih antara mengambil dan melewatkan nilai dari daftar <code>list</code>, tergantung pada parameter.\r\n    <ul>\r\n    <li><code>count</code>: Menetapkan jumlah nilai yang dilewatkan setiap kali.</li>\r\n    <li><code>repeatInterval</code>: Interval pengulangan opsional untuk menunjukkan jumlah nilai yang ditambahkan di antara nilai yang dilewatkan.</li>\r\n    <li><code>offset</code>: Parameter offset opsional untuk mulai melewatkan nilai pada offset awal.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1..10} yang melewatkan bilangan pertama.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Buat daftar dari {1..10} yang melewatkan setiap bilangan lainnya.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Membuat daftar dari {1..10} yang dimulai pada angka 1 dan melewatkan setiap bilangan lainnya.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Buat daftar dari {1..10} yang dimulai dari 1, melewatkan satu nilai, mempertahankan dua nilai, dan sebagainya.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Menunjukkan apakah daftar berisi nilai.",
        "Documentation.LongDescription": "Menunjukkan apakah daftar <code>list</code> berisi nilai <code>value</code>.\r\n    Menghasilkan true jika nilai ditemukan dalam daftar, atau false jika sebaliknya. Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditentukan untuk mengontrol pengujian persamaan. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Mencari apakah daftar {1, 2, 3, 4, 5} berisi 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Mencari apakah daftar {1, 2, 3, 4, 5} berisi 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Menunjukkan bila daftar mencakup semua nilai dalam daftar lain.",
        "Documentation.LongDescription": "Menunjukkan apakah daftar <code>list</code> mencakup semua nilai dalam daftar lain, <code>values</code>.\r\n    Menghasilkan benar jika nilai ditemukan dalam daftar, atau salah jika sebaliknya. Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Mencari tahu apakah daftar {1, 2, 3, 4, 5} berisi 3 dan 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Mencari tahu apakah daftar {1, 2, 3, 4, 5} berisi 5 dan 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Menunjukkan bila daftar mencakup salah satu nilai dalam daftar lain.",
        "Documentation.LongDescription": "Menunjukkan apakah daftar <code>list</code> mencakup salah satu nilai dalam daftar lain, <code>values</code>.\r\n        Menghasilkan benar jika nilai ditemukan dalam daftar, atau salah jika sebaliknya. Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Mencari tahu apakah daftar {1, 2, 3, 4, 5} berisi 3 atau 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Mencari tahu apakah daftar {1, 2, 3, 4, 5} berisi 6 atau 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Menghasilkan kovarian di antara kedua daftar angka.",
        "Documentation.LongDescription": "Menghasilkan kovarian di antara kedua daftar, <code>numberList1</code> dan <code>numberList2</code>. <code>numberList1</code> dan <code>numberList2</code> harus berisi jumlah nilai <code>number</code> yang sama.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Menghitung kovarian di antara kedua daftar.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Menghasilkan perbedaan dari dua daftar tertentu.",
        "Documentation.LongDescription": "Mengembalikan item dalam daftar <code>list1</code> yang tidak muncul dalam daftar <code>list2</code>. Nilai duplikat didukung.\r\n    Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari item dalam daftar {1, 2, 3, 4, 5} yang tidak muncul dalam {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Mencari item dalam daftar {1, 2} yang tidak muncul dalam {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Menghasilkan daftar nilai (termasuk bidang data) berisi teks yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai dari daftar <code>list</code> yang berisi nilai <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai teks dalam daftar {\"a\", \"b\", \"ab\"} yang sesuai dengan \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Menghasilkan kumpulan pertama item dalam daftar dengan menentukan jumlah item yang akan dihasilkan atau kondisi yang memenuhi syarat.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Jika jumlah ditetapkan, item sebanyak jumlah tersebut akan dihasilkan. </li>\r\n  <li>Jika kondisi ditetapkan, semua item yang awalnya sesuai dengan kondisi akan dihasilkan. Jika ternyata salah satu item tidak sesuai dengan kondisi, item lainnya tidak akan diperhitungkan. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai awal dalam daftar {3, 4, 5, -1, 7, 8, 2} yang lebih besar dari 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Menghasilkan benar jika fungsi kondisi dipenuhi oleh semua nilai dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan <code>true</code> jika fungsi kondisi, <code>condition</code>, dipenuhi oleh semua nilai dalam daftar <code>list</code>, atau jika sebaliknya, <code>false</code> akan dihasilkan.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Menentukan jika semua nilai dalam daftar {11, 12, 13} lebih besar dari 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Menentukan jika semua nilai dalam daftar {1, 2, 3} lebih besar dari 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Menghasilkan benar jika fungsi kondisi dipenuhi oleh nilai apa pun.",
        "Documentation.LongDescription": "Menghasilkan <code>true</code> jika fungsi kondisi, <code>condition</code>, dipenuhi oleh nilai apa pun dalam daftar <code>list</code>, atau jika sebaliknya, <code>false</code> akan dihasilkan.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari jika nilai apa pun dalam daftar {9, 10, 11} lebih besar dari 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Mencari jika nilai apa pun dalam daftar {1, 2, 3} lebih besar dari 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Menghasilkan nilai maksimum dalam daftar. Jumlah nilai yang akan dihasilkan atau ketentuan pemfilteran harus ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan nilai maksimum dalam daftar, <code>list</code>.\r\n    Setelah baris diurutkan, parameter opsional dapat ditetapkan untuk memfilter hasil lebih lanjut. Parameter opsional <code>countOrCondition</code> menentukan jumlah nilai yang akan dihasilkan atau ketentuan pemfilteran. Parameter opsional <code>comparisonCriteria</code> menentukan cara membandingkan nilai dalam daftar.\r\n <ul>\r\n        <li> <code>list</code>: Daftar nilai.</li>\r\n        <li> <code>countOrCondition</code>: Jika jumlah ditetapkan, daftar berisi maksimum <code>countOrCondition</code> item dalam urutan naik akan dihasilkan. Jika ketentuan ditetapkan, daftar item yang awalnya memenuhi ketentuan akan dihasilkan. Jika ternyata salah satu item tidak memenuhi ketentuan, item lainnya tidak akan diperhitungkan.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Nilai <code>comparisonCriteria</code> opsional dapat ditetapkan untuk menentukan cara membandingkan item dalam daftar. Jika parameter ini null, pembanding default akan digunakan.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Menghasilkan nilai minimum dalam daftar. Jumlah nilai yang akan dihasilkan atau ketentuan pemfilteran dapat ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan nilai minimum dalam daftar, <code>list</code>.\r\n    Parameter, <code>countOrCondition</code>, menentukan jumlah nilai yang akan dihasilkan atau ketentuan pemfilteran. Parameter opsional, <code>comparisonCriteria</code>, menentukan cara membandingkan nilai dalam daftar.\r\n <ul>\r\n        <li> <code>list</code>: Daftar nilai.</li>\r\n        <li> <code>countOrCondition</code>: Jika jumlah ditetapkan, daftar berisi maksimum <code>countOrCondition</code> item dalam urutan naik akan dihasilkan. Jika ketentuan ditetapkan, daftar item yang awalnya memenuhi ketentuan akan dihasilkan. Jika ternyata salah satu item tidak memenuhi ketentuan, item lainnya tidak akan diperhitungkan. Jika parameter ini null, nilai terkecil tunggal dalam daftar akan dihasilkan.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Optional]</i> Nilai <code>comparisonCriteria</code> opsional dapat ditetapkan untuk menentukan cara membandingkan item dalam daftar. Jika parameter ini null, pembanding default akan digunakan.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari 5 nilai terkecil dalam daftar <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Menghasilkan daftar angka dengan nilai awal, jumlah, dan nilai inkremental opsional tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar angka dengan nilai awal, jumlah, dan nilai inkremental opsional tertentu. Nilai inkremental default adalah 1.\r\n<ul>\r\n   <li><code>start</code>: Nilai awal dalam daftar.</li>\r\n   <li><code>count</code>: Jumlah nilai untuk dibuat.</li>\r\n   <li><code>increment</code>: <i>[Opsional]</i> Nilai inkremental. Jika nilai yang dihilangkan memiliki inkremental sebesar 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 10 angka berurutan yang dimulai pada angka 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Membuat daftar 10 angka yang dimulai pada angka 1, dengan inkremental sebesar 2 untuk setiap angka berikutnya.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Menghasilkan satu atau beberapa persentil sampel yang sesuai dengan probabilitas yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan satu atau beberapa persentil sampel dari daftar <code>list</code>. Jika nilai <code>percentiles</code> adalah angka antara 0,0 dan 1,0, maka akan diperlakukan sebagai persentil dan hasilnya akan berupa\r\n    nilai tunggal yang sesuai dengan probabilitas tersebut. Jika nilai <code>percentiles</code> adalah daftar angka dengan nilai antara 0,0 dan 1,0, hasilnya akan menjadi daftar persentil\r\n    sesuai dengan probabilitas input. Opsi PercentileMode di <code>options</code> dapat digunakan oleh pengguna tingkat lanjut untuk memilih metode interpolasi yang lebih spesifik, namun tidak disarankan untuk sebagian besar penggunaan.\r\n    Simbol standar <code>PercentileMode.ExcelInc</code> dan <code>PercentileMode.ExcelExc</code> cocok dengan metode interpolasi yang digunakan oleh fungsi Excel\r\n    <code>PERCENTILE.INC</code> dan <code>PERCENTILE.EXC</code>. Perilaku default cocok dengan <code>PercentileMode.ExcelInc</code>. Simbol\r\n    <code>PercentileMode.SqlCont</code> dan <code>PercentileMode.SqlDisc</code> cocok dengan perilaku SQL Server untuk masing-masing <code>PERCENTILE_CONT</code> dan\r\n    <code>PERCENTILE_DISC</code>.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari kuartil pertama dari daftar <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Mencari kuartil dari daftar <code> {5, 3, 1, 7, 9} </code> menggunakan metode interpolasi yang cocok dengan <code>PERCENTILE.EXC</code> Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Menghasilkan offset nilai dalam daftar.",
        "Documentation.LongDescription": "Mengembalikan offset yang menampilkan nilai <code>value</code> dalam daftar <code>list</code>. Mengembalikan -1 jika nilai tidak ditampilkan.\r\n    Parameter kemunculan opsional <code>occurrence</code> dapat ditetapkan.\r\n<ul>\r\n   <li><code>occurrence</code>: Jumlah maksimum kemunculan untuk dilaporkan.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Mencari posisi dalam daftar {1, 2, 3} yang menampilkan nilai 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Menghasilkan offset pertama nilai dalam daftar.",
        "Documentation.LongDescription": "Mengembalikan offset dalam daftar <code>list</code> dari kemunculan pertama nilai dalam daftar <code>values</code>. Mengembalikan -1 jika tidak ada kemunculan yang ditemukan.\r\n    Parameter kemunculan opsional <code>occurrence</code> dapat ditetapkan.\r\n<ul>\r\n   <li><code>occurrence</code>: Jumlah maksimum kemunculan yang dapat dihasilkan.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Mencari posisi pertama dalam daftar {1, 2, 3} yang menampilkan nilai 2 atau 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Menghasilkan subkumpulan daftar yang dimulai pada offset.",
        "Documentation.LongDescription": "Menghasilkan subkumpulan daftar yang dimulai pada offset <code>list</code>. Parameter opsional, <code>offset</code>, menentukan jumlah item maksimum dalam subkumpulan.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari subkumpulan yang dimulai pada offset 6 dari daftar angka 1 hingga 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Mencari subkumpulan dengan panjang 2 dari offset 6, dari daftar angka 1 hingga 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Menghapus item dari daftar 1 yang terdapat dalam daftar.",
        "Documentation.LongDescription": "Menghapus semua kemunculan nilai tertentu dalam <code>list2</code> dari <code>list1</code>. Jika nilai dalam <code>list2</code> tidak terdapat dalam <code>list1</code>, daftar asli akan dihasilkan.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Menghapus item dalam daftar {2, 4, 6} dari daftar {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Menghapus semua kemunculan nilai input.",
        "Documentation.LongDescription": "Menghapus semua kemunculan nilai tertentu dalam <code>list2</code> dari daftar <code>list1</code>. Jika nilai dalam <code>list2</code> tidak terdapat dalam <code>list1</code>, daftar asli akan dihasilkan.\r\n    Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1, 2, 3, 4, 5, 5} tanpa {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Menghapus jumlah nilai yang dimulai pada posisi yang ditetapkan.",
        "Documentation.LongDescription": "Menghapus nilai <code>count</code> dalam <code>list</code> yang dimulai pada posisi yang ditetapkan, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Menghapus 3 nilai dalam daftar {1, 2, 3, 4, -6, -2, -1, 5} yang dimulai pada indeks 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Menghasilkan daftar yang merupakan pengulangan jumlah daftar asli.",
        "Documentation.LongDescription": "Menghasilkan daftar yang merupakan pengulangan <code>count</code> daftar asli, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dengan {1, 2} diulang 3 kali.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Menerapkan setiap penggantian { old, new }.",
        "Documentation.LongDescription": "Menjalankan penggantian tertentu pada daftar <code>list</code>. Operasi penggantian <code>replacements</code> terdiri atas daftar dua nilai, yakni nilai lama dan baru, yang tersedia dalam daftar.\r\n    Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1, 2, 3, 4, 5} dengan mengganti nilai 5 ke -5 dan nilai 1 ke -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Menghasilkan daftar nilai yang sesuai dengan kondisi.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai dari daftar <code>list</code>, yang sesuai dengan kondisi pilihan <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai dalam daftar {1, -3, 4, 9, -2} yang lebih besar dari 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Membagi daftar yang ditentukan ke dalam satu daftar yang berisi beberapa daftar menggunakan ukuran halaman yang ditentukan.",
        "Documentation.LongDescription": "Membagi <code>list</code> ke dalam daftar berisi daftar dengan elemen pertama daftar output adalah daftar yang berisi elemen <code>pageSize</code> pertama dari\r\n    daftar sumber, elemen daftar output berikutnya adalah daftar yang berisi elemen <code>pageSize</code> berikutnya dari daftar sumber, dan seterusnya.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Menghasilkan daftar nilai baru yang dihitung dari daftar ini.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai baru dengan menerapkan fungsi transformasi <code>transform</code> terhadap daftar, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Menambah 1 ke setiap nilai dalam daftar {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Menghasilkan tangen inversi divisi dua bilangan.",
        "Documentation.LongDescription": "Menghasilkan tangen inversi divisi dua bilangan, yakni <code>y</code> dan <code>x</code>. Divisi akan dibuat seperti <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Memberikan hasil dari menjalankan operasi bitwise \"And\" di antara kedua input.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan operasi bitwise \"And\" antara <code>number1</code> dan <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Memberikan hasil dari menjalankan operasi bitwise \"Or\" di antara kedua input.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan operasi bitwise \"Or\" antara <code>number1</code> dan <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Menggeser kumpulan bit ke kiri.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan penggeseran bitwise ke kiri pada <code>number1</code>, berdasarkan jumlah bit yang ditetapkan <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Menggeser kumpulan bit ke kanan.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan penggeseran bitwise ke kanan pada <code>number1</code>, berdasarkan jumlah bit yang ditetapkan <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Memberikan hasil dari menjalankan operasi bitwise \"XOR\" (Exclusive-OR) di antara kedua input.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan operasi bitwise \"XOR\" (Exclusive-OR) antara <code>number1</code> dan <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Menghasilkan jumlah kombinasi unik.",
        "Documentation.LongDescription": "Menghasilkan jumlah kombinasi unik dari daftar item, <code>setSize</code>, dengan ukuran kombinasi yang ditetapkan, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Jumlah item dalam daftar.</li>\r\n    <li><code>combinationSize</code>: Jumlah item dalam setiap kombinasi.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah kombinasi dari total 5 item dengan setiap kombinasi berisi 3 item.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Membagi dua bilangan dan menampilkan bagian bilangan bulat dari hasil.",
        "Documentation.LongDescription": "Mengembalikan bagian bilangan bulat dari hasil setelah membagi bilangan, <code>number1</code>, dengan bilangan lain, <code>number2</code>.\r\n    Jika <code>number1</code> atau <code>number2</code> adalah null, <code>Number.IntegerDivide</code> akan menghasilkan null.\r\n      <ul>\r\n        <li><code>number1</code>: Dividen.</li>\r\n        <li><code>number2</code>: Pembagi.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Membagi 6 dengan 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Membagi 8,3 dengan 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Bilangan bulat membagi dua bilangan dan menghasilkan sisanya.",
        "Documentation.LongDescription": "Mengembalikan sisa hasil pembagian bilangan bulat antara <code>number</code> dengan <code>divisor</code>.\r\n    Jika <code>number</code> atau <code>divisor</code> adalah null, <code>Number.Mod</code> akan menghasilkan null.\r\n      <ul>\r\n        <li><code>number</code>: Dividen.</li>\r\n        <li><code>divisor</code>: Pembagi.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari sisa hasil pembagian 5 dengan 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Menghasilkan jumlah permutasi.",
        "Documentation.LongDescription": "Menghasilkan jumlah permutasi yang dapat dihasilkan dari sejumlah item, <code>setSize</code>, dengan ukuran permutasi yang ditetapkan, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah permutasi dari total 5 item dengan setiap permutasi berisi 3 item.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Menggunakan bilangan dengan pangkat tertentu.",
        "Documentation.LongDescription": "Mengembalikan hasil dari menggunakan <code>number</code> dengan pangkat <code>power</code>.\r\n    Jika <code>number</code> atau <code>power</code> adalah null, <code>Number.Power</code> akan menghasilkan null.\r\n      <ul>\r\n        <li><code>number</code>: Bilangan pokok.</li>\r\n        <li><code>power</code>: Eksponen.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai bilangan 5 yang digunakan dengan pangkat 3 (5 pangkat 3).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Menghasilkan bilangan acak di antara dua bilangan.",
        "Documentation.LongDescription": "Menghasilkan bilangan acak antara <code>bottom</code> hingga <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Mengambil bilangan acak antara 1 hingga 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Menghasilkan nilai bidang yang ditetapkan dalam data.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>field</code> yang ditetapkan dalam <code>record</code>. Jika bidang tidak ditemukan, pengecualian akan dibuat.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai bidang \"CustomerID\" dalam data.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Menghasilkan nilai bidang yang ditetapkan dalam data atau nilai default jika bidang tidak ditemukan.",
        "Documentation.LongDescription": "Menghasilkan nilai bidang <code>field</code> yang ditetapkan dalam data <code>record</code>. Jika bidang tidak ditemukan, <code>defaultValue</code> opsional akan dihasilkan.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai bidang \"Phone\" dalam data, atau mengembalikan null jika tidak ada.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Mencari nilai bidang \"Phone\" dalam data, atau mengembalikan default jika tidak ada.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Menghasilkan data berdasarkan daftar nilai bidang dan himpunan bidang.",
        "Documentation.LongDescription": "Menghasilkan data berdasarkan <code>list</code> nilai bidang dan himpunan bidang.  <code>fields</code> dapat ditetapkan dengan daftar nilai teks atau jenis data.  Pengecualian akan dibuat jika bidang tidak unik.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Membuat data dari daftar nilai bidang dan daftar nama bidang.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Membuat data dari daftar nilai bidang dan jenis data.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Menunjukkan apakah data memiliki bidang yang ditetapkan.",
        "Documentation.LongDescription": "Menunjukkan apakah data <code>record</code> memiliki bidang yang ditetapkan dalam <code>fields</code>, dengan menghasilkan nilai logika (benar atau salah).\r\n    Beberapa nilai bidang dapat ditetapkan menggunakan daftar.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Memastikan data memiliki bidang \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Memastikan data memiliki bidang \"CustomerID\" dan \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Menghapus bidang yang ditetapkan dari data input.",
        "Documentation.LongDescription": "Menghasilkan data yang menghapus semua bidang yang ditetapkan dalam <code>fields</code> dari input <code>record</code>. Jika bidang yang ditetapkan tidak ada, pengecualian akan dibuat.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus bidang \"Price\" dari data.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Menghapus bidang \"Price\" dan \"Item\" dari data.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Menerapkan perubahan nama { old, new } dari daftar dalam formulir.",
        "Documentation.LongDescription": "Menghasilkan data setelah mengubah nama bidang dalam input <code>record</code> menjadi nama bidang baru yang ditetapkan dalam daftar <code>renames</code>. Untuk beberapa perubahan nama, daftar bersarang dapat digunakan ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengubah nama bidang \"UnitPrice\" menjadi \"Price\" dari data.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Mengubah nama bidang \"UnitPrice\" menjadi \"Price\" dan \"OrderNum\" menjadi \"OrderID\" dari data.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Menyusun ulang bidang yang ditetapkan menjadi susunan baru.",
        "Documentation.LongDescription": "Menghasilkan data setelah menyusun ulang bidang dalam <code>record</code> menjadi susunan bidang yang ditetapkan dalam daftar <code>fieldOrder</code>. Nilai bidang dipertahankan dan bidang yang tidak tercantum dalam <code>fieldOrder</code> dibiarkan pada posisi aslinya.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menyusun ulang beberapa bidang dalam data.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Menghasilkan data yang hanya berisi bidang yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan data yang hanya mencakup bidang yang ditetapkan dalam daftar <code>fields</code> dari input <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Memilih bidang \"Item\" dan \"Price\" dalam data.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Menghasilkan data setelah menerapkan transformasi yang ditetapkan.",
        "Documentation.LongDescription": "Mengembalikan data setelah menerapkan perubahan yang ditetapkan dalam daftar <code>transformOperations</code> menjadi <code>record</code>.\r\n    Satu atau beberapa bidang dapat diubah pada satu waktu tertentu.\r\n      <div>Jika satu bidang yang diubah, <code>transformOperations</code> diperkirakan akan menjadi daftar dengan dua item. Item pertama dalam <code>transformOperations</code> menetapkan nama bidang, dan item kedua dalam <code>transformOperations</code> menetapkan fungsi yang akan digunakan untuk transformasi. Misalnya, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Jika beberapa bidang ditransformasi, <code>transformOperations</code> diperkirakan akan menjadi daftar berisi daftar dengan daftar dalam yang berupa pasangan nama bidang dan operasi transformasi. Misalnya, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi bidang \"Price\" menjadi angka.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Mengonversi bidang \"OrderID\" dan \"Price\" menjadi angka.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks menurut transisi dari satu jenis karakter ke karakter lainnya. Parameter {0} dan {1} dapat berupa daftar karakter, atau fungsi yang mengambil karakter dan menghasilkan true/false.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks menurut transisi dari satu jenis karakter ke karakter lainnya. Parameter <code>before</code> dan <code>after</code> dapat berupa daftar karakter, atau fungsi yang mengambil karakter dan menghasilkan true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input setiap kali huruf besar atau kecil diikuti dengan angka.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Mengonversi kueri SQL yang diberikan ke kode M. Fungsi ini hanya ditujukan untuk penggunaan internal.",
        "Documentation.LongDescription": "Mengonversi kueri <code>sql</code> yang diberikan ke kode M, dengan pengidentifikasi tersedia yang ditentukan oleh <code>environment</code>. Fungsi ini hanya ditujukan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Menghasilkan kolom data yang ditetapkan dari tabel sebagai daftar.",
        "Documentation.LongDescription": "Menghasilkan kolom data yang ditetapkan oleh <code>column</code> dari tabel <code>table</code> sebagai daftar.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan nilai dari kolom [Name] dalam tabel.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Menghasilkan daftar dengan nama kolom yang sesuai dengan jenis yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan daftar dengan nama kolom dari tabel <code>table</code> yang sesuai dengan jenis yang ditentukan di <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan nama kolom jenis Number.Type dari tabel.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Menunjukkan apakah data yang ditetapkan muncul sebagai baris dalam tabel.",
        "Documentation.LongDescription": "Menunjukkan apakah data yang ditetapkan, <code>row</code>, muncul sebagai baris dalam tabel <code>table</code>.\r\n    Parameter opsional <code>equationCriteria</code> dapat ditetapkan untuk mengontrol perbandingan di antara baris dalam tabel.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tabel berisi baris.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah tabel berisi baris.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Menentukan apakah tabel berisi baris dengan membandingkan hanya kolom [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Menunjukkan apakah semua data yang ditetapkan muncul sebagai baris dalam tabel.",
        "Documentation.LongDescription": "Menunjukkan apakah semua data yang ditetapkan dalam daftar data <code>rows</code> muncul sebagai baris dalam <code>table</code>.\r\n    Parameter opsional <code>equationCriteria</code> dapat ditetapkan untuk mengontrol perbandingan di antara baris dalam tabel.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah tabel berisi semua baris, dan hanya membandingkan kolom [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah tabel berisi semua baris.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Menunjukkan apakah salah satu data yang ditetapkan muncul sebagai baris dalam tabel.",
        "Documentation.LongDescription": "Menunjukkan apakah salah satu data yang ditetapkan dalam daftar data <code>rows</code> muncul sebagai baris dalam <code>table</code>.\r\n    Parameter opsional <code>equationCriteria</code> dapat ditetapkan untuk mengontrol perbandingan di antara baris dalam tabel.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> berisi baris <code>[a = 1, b = 2]</code> atau <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> berisi baris <code>[a = 1, b = 3]</code> atau <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Menentukan apakah tabel <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> berisi baris <code>[a = 1, b = 3]</code> atau <code>[a = 3, b = 5]</code> dengan membandingkan hanya kolom [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Menunjukkan apakah tabel berisi kolom yang ditetapkan.",
        "Documentation.LongDescription": "Menunjukkan apakah <code>table</code> berisi kolom yang ditetapkan, <code>columns</code>. Sebaliknya, menghasilkan <code>true</code> jika tabel berisi kolom, <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tabel memiliki kolom [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Mencari apakah tabel memiliki kolom [Name] dan [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Menunjukkan apakah semua baris dalam tabel sesuai ketentuan yang diberikan.",
        "Documentation.LongDescription": "Menunjukkan apakah semua baris di <code>table</code> cocok dengan <code>condition</code> yang diberikan. Menghasilkan <code>true</code> jika semua baris cocok, <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah semua nilai baris di kolom [a] merata dalam tabel.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Mencari jika semua nilai baris adalah [a = 1, b = 2], di tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Menunjukkan apakah setiap baris dalam tabel sesuai ketentuan yang diberikan.",
        "Documentation.LongDescription": "Menunjukkan apakah setiap baris di <code>table</code> cocok dengan <code>condition</code> yang diberikan. Menghasilkan <code>true</code> jika setiap baris cocok, <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah setiap nilai baris di kolom [a] merata dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Menentukan apakah setiap nilai baris adalah [a = 1, b = 2], di tabel <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Menghasilkan baris terbesar atau nilai default menggunakan kriteria yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan baris terbesar di <code>table</code>, memberikan <code>comparisonCriteria</code>. Jika tabel kosong, nilai <code>default</code> opsional akan dihasilkan. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris dengan nilai terbesar di kolom [a] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Mencari baris dengan nilai terbesar di kolom [a] dalam tabel <code>({})</code>. Menghasilkan -1 jika kosong.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Menghasilkan baris terkecil atau nilai default menggunakan kriteria yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan baris terkecil di <code>table</code>, memberikan <code>comparisonCriteria</code>. Jika tabel kosong, nilai <code>default</code> opsional akan dihasilkan.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris dengan nilai terkecil di kolom [a] dalam tabel.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Mencari baris dengan nilai terkecil di kolom [a] dalam tabel. Menghasilkan -1 jika kosong.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Menghasilkan posisi atau memposisikan baris dalam tabel.",
        "Documentation.LongDescription": "Mengembalikan posisi baris kemunculan pertama <code>row</code> di <code>table</code> yang ditetapkan. Mengembalikan -1 jika tidak ada kemunculan yang ditemukan.\r\n    <ul>\r\n       <li><code>table</code>: Tabel masukan.</li>\r\n       <li><code>row</code>: Baris dalam tabel yang akan dicari posisinya.</li>\r\n       <li><code>occurrence</code>: <i>[Opsional]</i> Menetapkan kemunculan baris yang akan dihasilkan.</li>\r\n       <li><code>equationCriteria</code>: <i>[Opsional]</i> Mengontrol perbandingan di antara baris tabel.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Mencari posisi kemunculan pertama [a = 2, b = 4] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Mencari posisi kemunculan kedua [a = 2, b = 4] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Mencari posisi semua kemunculan [a = 2, b = 4] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Menghasilkan posisi atau memposisikan salah satu baris yang ditetapkan dalam tabel.",
        "Documentation.LongDescription": "Mengembalikan posisi baris dari <code>table</code> pada kemunculan pertama daftar <code>rows</code>. Mengembalikan -1 jika tidak ada kemunculan yang ditemukan.\r\n    <ul>\r\n    <li><code>table</code>: Tabel masukan.</li>\r\n       <li><code>rows</code>: Daftar baris dalam tabel yang akan dicari posisinya.</li>\r\n       <li><code>occurrence</code>: <i>[Opsional]</i> Menetapkan kemunculan baris yang akan dihasilkan.</li>\r\n       <li><code>equationCriteria</code>: <i>[Opsional]</i> Mengontrol perbandingan di antara baris tabel.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Mencari posisi kemunculan pertama [a = 2, b = 4] atau [a = 6, b = 8] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Mencari posisi semua kemunculan [a = 2, b = 4] atau [a = 6, b = 8] dalam tabel <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Membagi daftar yang ditentukan ke dalam satu daftar tabel menggunakan ukuran halaman yang ditentukan.",
        "Documentation.LongDescription": "Membagi <code>table</code> ke dalam satu daftar tabel, dengan elemen pertama dari daftar berupa tabel yang berisi baris<code>pageSize</code> pertama dari \r\n  tabel sumber, elemen daftar berikutnya adalah tabel yang berisi baris<code>pageSize</code> berikutnya dari tabel sumber, dan seterusnya.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Bagi tabel yang berisi lima catatan ke dalam beberapa tabel dengan masing-masing dua catatan.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Menghasilkan daftar yang berisi baris hitungan pertama yang ditentukan dan baris yang tersisa.",
        "Documentation.LongDescription": "Menghasilkan daftar yang berisi dua tabel: tabel dengan N baris pertama dari <code>table</code> (seperti yang ditentukan oleh <code>count</code>) dan tabel yang berisi baris yang tersisa dari <code>table</code>.\r\n\r\nJika tabel dari daftar yang dihasilkan dihitung tepat satu kali dan secara berurutan, fungsi akan menghitung <code>table</code> satu kali saja.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan dua baris pertama dari tabel dan baris yang tersisa dari tabel.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Mentransformasi baris tabel menggunakan fungsi transformasi yang ditetapkan.",
        "Documentation.LongDescription": "Membuat <code>daftar</code> dengan menerapkan operasi <code>transform</code> ke setiap baris dalam <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Mengubah baris tabel menjadi daftar angka.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Mengubah baris tabel numerik menjadi catatan tekstual.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Menghasilkan bagian dari <code>text</code> setelah <code>delimiter</code> yang ditentukan.\r\n    Angka opsional <code>index</code> menunjukkan kemunculan <code>delimiter</code> mana yang harus dipertimbangkan.\r\n    Daftar opsional <code>index</code> menunjukkan kemunculan <code>delimiter</code> mana yang harus dipertimbangkan, begitu pula apakah pengindeksan harus dilakukan di awal atau akhir input.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" setelah tanda hubung (pertama).",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" setelah tanda hubung kedua.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" setelah tanda hubung kedua dari belakang.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Menghasilkan karakter pada posisi yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan karakter pada nilai teks, <code>text</code> di posisi <code>index</code>. Karakter pertama pada teks ada di posisi 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Mencari karakter di posisi 4 pada string \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Menghasilkan bagian dari <code>text</code> sebelum <code>delimiter</code> yang ditentukan.\r\n    Angka opsional <code>index</code> menunjukkan kemunculan <code>delimiter</code> mana yang harus dipertimbangkan.\r\n    Daftar opsional <code>index</code> menunjukkan kemunculan <code>delimiter</code> mana yang harus dipertimbangkan, begitu pula apakah pengindeksan harus dilakukan di awal atau akhir input.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" sebelum tanda hubung (pertama).",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" sebelum tanda hubung kedua.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Dapatkan bagian dari \"111-222-333\" sebelum tanda hubung kedua dari belakang.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Menghasilkan apakah teks berisi substring.",
        "Documentation.LongDescription": "Mendeteksi apakah <code>text</code> berisi nilai <code>substring</code>. Menghasilkan true jika nilai ditemukan. Fungsi ini tidak mendukung wildcard atau regex.\r\n      <br>\r\n      <br>\r\n      Argumen opsional <code>comparer</code> dapat digunakan untuk menentukan perbandingan ketidakpekaan huruf besar/kecil atau kesadaran budaya dan lokal.\r\n      Pembanding bawaan berikut tersedia dalam bahasa rumus:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal yang peka huruf besar/kecil</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan ordinal yang tidak peka huruf besar/kecil</li>\r\n        <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan kesadaran kultur</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Mencari apakah teks \"Hello World\" berisi \"Hello\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Mencari apakah teks \"Hello World\" berisi \"hello\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Mencari apakah teks \"Hello World\" berisi \"hello\", menggunakan pembanding yang tidak peka huruf besar/kecil.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Menghasilkan karakter terakhir pada teks.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>text</code> yang merupakan karakter terakhir <code>count</code> pada nilai <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Mengambil 5 karakter terakhir dari teks \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Menunjukkan apakah teks berakhir dalam nilai yang ditetapkan.",
        "Documentation.LongDescription": "Menunjukkan apakah teks yang diberikan, <code>text</code>, diakhiri dengan nilai yang ditentukan, <code>substring</code>. Indikasinya adalah peka huruf besar kecil.\r\n\r\n      <div>\r\n        <code>comparer</code> adalah <code>Pembanding</code> yang digunakan untuk mengontrol perbandingan. Pembanding dapat digunakan untuk menyediakan perbandingan sadar lokal dan kultur atau yang tidak peka huruf besar kecil.\r\n      </div>\r\n      <div>\r\n        Pembanding internal berikut tersedia dalam bahasa rumus:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal akurat</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan ordinal yang tidak peka huruf besar kecil yang akurat</li>\r\n        <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan sadar kultur</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Memastikan \"Hello, World\" berakhir dengan \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Memastikan \"Hello, World\" berakhir dengan \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Menghasilkan teks terformat dari sebuah string format dan argumen.",
        "Documentation.LongDescription": "Mengembalikan teks terformat yang dibuat dengan menerapkan <code>arguments</code> dari sebuah daftar atau catatan ke sebuah string format <code>formatString</code>. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Format daftar angka.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Format jenis data yang berbeda dari catatan menurut budaya Bahasa Inggris AS.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Menghasilkan substring hingga panjang tertentu.",
        "Documentation.LongDescription": "Menghasilkan <code>count</code> karakter, atau melalui akhir <code>text</code>; pada keseimbangan <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Temukan substring dari teks \"Hello World\" yang dimulai pada indeks 6 yang merentang 5 karakter.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Cari substring dari teks \"Hello World\" yang dimulai pada indeks 6 hingga akhir.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Menghasilkan teks dengan panjang yang ditetapkan melalui padding akhir teks tertentu.",
        "Documentation.LongDescription": "Mengembalikan nilai <code>text</code> yang ditambahkan ke panjang <code>count</code> dengan menyisipkan spasi di akhir nilai teks <code>text</code>.\r\n    Karakter opsional <code>character</code> dapat digunakan untuk menentukan karakter yang digunakan untuk penambahan. Karakter tambahan default adalah spasi.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mem-pad akhir nilai teks agar panjangnya mencapai 10 karakter.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Mem-pad akhir nilai teks dengan \"|\" agar panjangnya mencapai 10 karakter.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Menghasilkan teks dengan panjang yang ditetapkan melalui padding awal teks tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>text</code> yang ditambahkan ke panjang <code>count</code> dengan menyisipkan spasi di awal nilai teks <code>text</code>.\r\n    Karakter opsional <code>character</code> dapat digunakan untuk menentukan karakter yang digunakan untuk penambahan. Karakter tambahan default adalah spasi.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mem-pad awal nilai teks agar panjangnya mencapai 10 karakter.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Mem-pad awal nilai teks dengan \"|\" agar panjangnya mencapai 10 karakter.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Menghasilkan posisi pertama pada nilai (-1 jika tidak ditemukan).",
        "Documentation.LongDescription": "Mengembalikan posisi kemunculan tertentu dari nilai teks <code>substring</code> yang ditemukan dalam <code>text</code>.\r\n    Parameter opsional <code>occurrence</code> dapat digunakan untuk menentukan posisi kemunculan yang harus dihasilkan (kemunculan pertama secara default).\r\n    Mengembalikan -1 jika <code>substring</code> tidak ditemukan.\r\n\r\n      <div>\r\n        <code>comparer</code> adalah <code>Pembanding</code> yang digunakan untuk mengontrol perbandingan. Pembanding dapat digunakan untuk memberikan perbandingan yang tidak peka huruf besar kecil atau sadar kultur dan lokal.\r\n      </div>\r\n      <div>\r\n        Pembanding bawaan berikut tersedia dalam bahasa rumus:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal akurat</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan ordinal akurat yang tidak peka huruf besar kecil</li>\r\n        <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan sadar kultur</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Mendapatkan posisi kemunculan pertama \"World\" pada teks \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Mendapatkan posisi kemunculan terakhir \"World\" pada teks \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Menghasilkan posisi pertama pada nilai teks karakter tercantum (-1 jika tidak ditemukan).",
        "Documentation.LongDescription": "Menghasilkan posisi pertama dari karakter apa saja dalam daftar <code>characters</code> yang ditemukan di <code>text</code>.\n    Parameter opsional <code>occurrence</code> dapat digunakan untuk menentukan posisi kemunculan yang akan dihasilkan.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Temukan posisi pertama \"W\" atau \"H\" dalam teks \"Halo, Dunia!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Temukan semua posisi \"W\" atau \"H\" dalam teks \"Halo, Dunia!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Menghasilkan substring yang ditemukan pada offset.",
        "Documentation.LongDescription": "Mengembalikan substring dari teks <code>text</code> yang ditemukan pada offset <code>offset</code>.\r\n    Parameter opsional, <code>count</code>, dapat disertakan untuk menentukan jumlah karakter yang akan dihasilkan. Memberikan kesalahan jika karakternya tidak cukup.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Mencari substring dari teks \"Hello World\" mulai pada indeks 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Mencari substring dari teks \"Hello World Hello\" dimulai pada indeks 6 sekitar 5 karakter.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Menghapus semua kemunculan karakter atau daftar karakter tertentu dari nilai teks input.",
        "Documentation.LongDescription": "Menghasilkan salinan nilai teks <code>text</code> dengan semua karakter dari <code>removeChars</code> yang dihapus.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Menghapus karakter , dan ; dari nilai teks.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Menghapus hitungan karakter yang dimulai pada offset tertentu",
        "Documentation.LongDescription": "Mengembalikan salinan nilai teks <code>text</code> dengan semua karakter dari posisi <code>offset</code> yang dihapus.\r\n    Parameter opsional, <code>count</code> dapat digunakan untuk menentukan jumlah karakter yang akan dihapus. Nilai default <code>count</code> adalah 1. Nilai posisi dimulai dari 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Menghapus 1 karakter dari nilai teks \"ABEFC\" pada posisi 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Menghapus dua karakter dari nilai teks \"ABEFC\" yang dimulai pada posisi 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Menghasilkan nilai teks yang terdiri atas teks input yang mengulang angka tertentu beberapa kali.",
        "Documentation.LongDescription": "Menghasilkan nilai teks yang terdiri atas teks input <code>text</code> yang mengulang <code>count</code> beberapa kali.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengulang teks \"a\" lima kali.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Mengulang teks \"helloworld\" tiga kali.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Memilih semua kemunculan karakter atau daftar karakter tertentu dari nilai teks input.",
        "Documentation.LongDescription": "Menghasilkan salinan nilai teks <code>text</code> dengan semua karakter yang tidak berada di <code>selectChars</code> dihapus.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pilih semua karakter dalam kisaran 'a' sampai 'z' dari nilai teks.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Membagi teks menjadi daftar nilai teks berdasarkan pembatas yang ditetapkan.",
        "Documentation.LongDescription": "Memberikan daftar nilai teks yang dihasilkan dari membagi nilai teks <code>text</code> berdasarkan pembatas yang ditetapkan, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari \"|\" nilai teks terbatas \"Name|Address|PhoneNumber\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Menghasilkan daftar nilai teks yang terbagi di salah satu karakter pada pembatas.",
        "Documentation.LongDescription": "Memberikan daftar nilai teks yang dihasilkan dari membagi nilai teks <code>text</code> berdasarkan karakter apa pun pada pembatas yang ditetapkan, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari nilai teks \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Menghasilkan awal teks.",
        "Documentation.LongDescription": "Menghasilkan karakter <code>count</code> pertama dari <code>text</code> sebagai nilai teks.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Mengambil 5 karakter pertama dari \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Menunjukkan apakah teks diawali nilai yang ditetapkan.",
        "Documentation.LongDescription": "Mengembalikan true jika nilai teks <code>text</code> dimulai dengan nilai teks <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Nilai <code>text</code> yang perlu dicari</li>\r\n        <li><code>substring</code>: <i></i> Nilai <code>text</code> yang merupakan substring untuk dicari di <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Opsional]</i> <code>Pembanding</code> digunakan untuk mengontrol perbandingan. Misalnya, <code>Comparer.OrdinalIgnoreCase</code> dapat digunakan untuk melakukan pencarian yang tidak peka huruf besar kecil</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> adalah <code>Pembanding</code> yang digunakan untuk mengontrol perbandingan. Pembanding dapat digunakan untuk memberikan perbandingan sadar lokal dan kultur atau yang tidak peka huruf besar kecil.\r\n      </div>\r\n      <div>\r\n        Pembanding internal berikut tersedia dalam bahasa rumus:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Digunakan untuk melakukan perbandingan ordinal akurat</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Digunakan untuk melakukan perbandingan ordinal yang peka huruf besar kecil yang akurat</li>\r\n        <li> <code>Comparer.FromCulture</code>: Digunakan untuk melakukan perbandingan sadar kultur</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Memastikan teks \"Hello, World\" diawali dengan teks \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Memastikan teks \"Hello, World\" diawali dengan teks \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Menghasilkan tipe yang menunjukkan fungsi dengan parameter spesifik dan konstrain tipe hasil.",
        "Documentation.LongDescription": "Membuat <code>function type</code> dari <code>signature</code>, rekaman <code>ReturnType</code> dan <code>Parameters</code>, dan <code>min</code>, jumlah minumum argumen yang diperlukan untuk meminta fungsi.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Membuat jenis untuk fungsi yang mengambil parameter angka bernama X dan menghasilkan angka.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Menghasilkan tipe yang menunjukkan data dengan konstrain tipe spesifik pada bidang.",
        "Documentation.LongDescription": "Menghasilkan tipe yang menunjukkan data dengan konstrain tipe spesifik pada bidang.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buat tipe tabel secara dinamis.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Menentukan apakah nilai tipe pertama selalu kompatibel dengan tipe kedua.",
        "Documentation.LongDescription": "Menentukan apakah nilai <code>type1</code> selalu kompatibel dengan <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah nilai dengan tipe angka juga selalu dapat diperlakukan sebagai tipe apa pun.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Tentukan apakah nilai dengan tipe apa pun juga selalu dapat diperlakukan sebagai tipe angka.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Mengganti faset jenis.",
        "Documentation.LongDescription": "Mengganti faset <code>type</code> dengan faset yang terdapat dalam rekaman <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Menghasilkan tipe tabel baru dengan semua kunci tergantikan oleh daftar kunci yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan tipe tabel baru dengan semua kunci diganti dengan daftar kunci yang ditentukan.<br>\r\n    <br>\r\n    Setiap kunci ditentukan menggunakan rekaman dalam formulir berikut:\r\n    <ul>\r\n      <li>\r\n        <code>Kolom</code>: daftar nama kolom yang mendefinisikan kunci\r\n      </li>\r\n      <li>\r\n        <code>Utama</code>: <code>true</code> jika kuncinya adalah kunci utama tabel; jika tidak, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Daftar kunci yang ditentukan divalidasi untuk memastikan bahwa tidak lebih dari satu kunci utama ditentukan dan semua nama kolom kunci ada pada tipe tabel.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Ganti informasi kunci pada tipe tabel.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Hapus informasi kunci yang sebelumnya ditentukan pada tipe tabel.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Menghasilkan tipe kolom pada tabel.",
        "Documentation.LongDescription": "Menghasilkan tipe kolom <code>column</code> pada tipe tabel <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Menghasilkan URI absolut yang merupakan kombinasi URI dasar input dan URI relatif.",
        "Documentation.LongDescription": "Menghasilkan URI absolut yang merupakan kombinasi input <code>baseUri</code> dan <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Menghasilkan jumlah dari dua nilai.",
        "Documentation.LongDescription": "Menghasilkan jumlah dari <code>value1</code> dan <code>value2</code>. Parameter <code>precision</code> opsional dapat ditetapkan, secara default <code>Precision.Double</code> akan digunakan.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Menghasilkan nilai jika kompatibel dengan tipe yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan nilai jika kompatibel dengan tipe yang ditentukan. Nilai ini setara dengan operator \"as\" dalam M, dengan pengecualian bahwa nilai tersebut dapat menerima referensi tipe pengidentifikasi seperti Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Transmisikan angka ke angka.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Mencoba mentransmisikan nilai teks ke angka.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Menghasilkan -1, 0, atau 1 berdasarkan apakah nilai pertama kurang dari, sama dengan, atau lebih besar dari nilai kedua.",
        "Documentation.LongDescription": "Menghasilkan -1, 0, atau 1 berdasarkan apakah nilai pertama kurang dari, sama dengan, atau lebih besar dari nilai kedua.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Memberikan hasil dari pembagian nilai pertama dengan kedua.",
        "Documentation.LongDescription": "Memberikan hasil pembagian <code>value1</code> dengan <code>value2</code>. Parameter <code>precision</code> opsional dapat ditetapkan, secara default <code>Precision.Double</code> akan digunakan.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Menghasilkan apakah dua nilai sama.",
        "Documentation.LongDescription": "Menghasilkan benar jika nilai <code>value1</code> sama dengan nilai <code>value2</code>, atau salah.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Menentukan apakah nilai kompatibel dengan tipe yang ditentukan.",
        "Documentation.LongDescription": "Menentukan apakah nilai kompatibel dengan tipe yang ditentukan. Nilai ini setara dengan operator \"is\" dalam M, dengan pengecualian bahwa nilai tersebut dapat menerima referensi tipe pengidentifikasi seperti Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Bandingkan dua cara untuk menentukan apakah angka kompatibel dengan tipe angka.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Menghasilkan produk dari dua nilai.",
        "Documentation.LongDescription": "Menghasilkan produk perkalian <code>value1</code> dengan <code>value2</code>. Parameter <code>precision</code> opsional dapat ditetapkan, secara default <code>Precision.Double</code> akan digunakan.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Mengevaluasi kueri terhadap target.",
        "Documentation.LongDescription": "<p>Mengevaluasi <code>query</code> terhadap<code>target</code> menggunakan parameter yang ditentukan di <code>parameters</code> dan opsi yang ditentukan di <code>options</code>.</p>\r\n<p>Output kueri ditentukan oleh <code>target</code>.</p>\r\n<p><code>target</code> memberikan konteks untuk operasi yang dideskripsikan oleh <code>query</code>.</p>\r\n<p><code>query</code> mendeskripsikan kueri untuk dijalankan terhadap <code>target</code>. <code>query</code> diekspresikan dengan cara yang khusus untuk <code>target</code> (misalnya, pernyataan T-SQL ).</p>\r\n<p>Nilai <code>parameters</code> opsional bisa berisi baik daftar ataupun catatan sebagaimana diperlukan untuk menyediakan nilai parameter yang diharapkan oleh <code>query</code>.</p>\r\n<p>Catatan <code>options</code> opsional dapat berisi opsi yang memengaruhi perilaku evaluasi dari <code>query</code> terhadap <code>target</code>. Opsi ini khusus untuk <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Menghasilkan apakah dua nilai sama.",
        "Documentation.LongDescription": "Menghasilkan null jika argumen '<code>value1</code>', '<code>value2</code>' adalah null, atau sama dengan Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Menggantikan informasi metadata input.",
        "Documentation.LongDescription": "Menggantikan informasi metadata input.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Mengganti tipe nilai.",
        "Documentation.LongDescription": "Mengganti tipe <code>value</code> dengan <code>type</code> yang disediakan.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Ganti tipe default catatan dengan tipe yang lebih spesifik.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Menghasilkan perbedaan dari dua nilai.",
        "Documentation.LongDescription": "Menghasilkan perbedaan dari <code>value1</code> dan <code>value2</code>. Parameter <code>precision</code> opsional dapat ditetapkan, secara default <code>Precision.Double</code> akan digunakan.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Membuat tindakan yang ketika dieksekusi akan mengembalikan hasil dari melakukan permintaan HTTP sebagai nilai biner.",
        "Documentation.LongDescription": "Membuat tindakan yang ketika dieksekusi akan memberikan hasil dari pelaksanaan permintaan <code>method</code> terhadap <code>url</code> menggunakan HTTP sebagai nilai biner.\r\n    Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>Query</code> : Secara terprogram menambahkan parameter kueri ke URL tanpa harus khawatir tentang pelolosan.</li>\r\n<li><code>ApiKeyName</code> : Jika situs target memiliki gagasan tentang kunci API, parameter ini dapat digunakan untuk menentukan nama (bukan nilai) parameter kunci yang harus digunakan dalam URL. Nilai kunci aktual diberikan dalam kredensial.</li>\r\n<li><code>Headers</code> : Menetapkan nilai ini sebagai catatan akan memberikan header tambahan ke permintaan HTTP.</li>\r\n<li><code>Timeout</code> : Menetapkan nilai ini sebagai durasi akan mengubah batas waktu untuk permintaan HTTP. Nilai defaultnya adalah 100 detik.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Menetapkan nilai ini sebagai daftar akan mengecualikan kunci header HTTP ini agar tidak menjadi bagian dari penghitungan data caching.</li>\r\n<li><code>IsRetry</code> : Menetapkan nilai logika ini sebagai true akan mengabaikan respons yang ada dalam cache saat mengambil data.</li>\r\n<li><code>ManualStatusHandling</code> : Menetapkan nilai ini sebagai daftar akan mencegah penanganan builtin untuk permintaan HTTP yang tanggapannya memiliki salah satu kode status ini.</li>\r\n<li><code>RelativePath</code> : Menetapkan nilai ini sebagai teks akan menambahkannya ke URL dasar sebelum membuat permintaan.</li>\r\n<li><code>Content</code> : Menetapkan nilai ini akan menyebabkan kontennya menjadi isi permintaan HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Perhatikan bahwa fungsi ini dinonaktifkan di sebagian besar konteks. Pertimbangkan untuk menggunakan Web.Contents atau Web.Headers sebagai gantinya.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Lakukan permintaan GET terhadap Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL dari titik akhir API REST Azure Enterprise yang berhubungan dengan pendaftaran Anda",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Mengembalikan hasil biner dari panggilan terhadap url yang diberikan untuk Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Menggunakan fungsi AzureEnterprise.Contents untuk mengembalikan hasil laporan tertentu.",
            "Code": "        izinkan\r\n            laporan = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        dalam\r\n            dipromosikan",
            "Result": "Tabel"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Menghasilkan konten dari blob tertentu dari vault penyimpanan Azure.",
        "Documentation.LongDescription": "Menghasilkan konten blob di URL, <code>url</code>, dari vault penyimpanan Azure. <code>options</code> mungkin ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>BlockSize</code> : Jumlah byte untuk dibaca sebelum menunggu konsumen data. Nilai default adalah 4 MB.</li>\r\n<li><code>RequestSize</code> : Jumlah byte untuk mencoba dibaca dalam satu permintaan HTTP ke server. Nilai default adalah 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opsi ConcurrentRequests mendukung pengunduhan data yang lebih cepat dengan menentukan jumlah permintaan yang akan dibuat secara paralel, dengan biaya pemanfaatan memori. Memori yang diperlukan adalah (ConcurrentRequest * RequestSize). Nilai default adalah 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Menghasilkan konten dari file yang ditentukan dari sistem file Azure Data Lake Storage.",
        "Documentation.LongDescription": "Menghasilkan konten dari file di URL, <code>url</code>, dari sistem file Azure Data Lake Storage. <code>options</code> dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n<li><code>BlockSize</code> : Jumlah byte untuk dibaca sebelum menunggu konsumen data. Nilai default adalah 4 MB.</li>\r\n<li><code>RequestSize</code> : Jumlah byte untuk mencoba dibaca dalam satu permintaan HTTP ke server. Nilai default adalah 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Opsi ConcurrentRequests mendukung pengunduhan data yang lebih cepat dengan menentukan jumlah permintaan yang akan dibuat secara paralel, dengan biaya pemanfaatan memori. Memori yang diperlukan adalah (ConcurrentRequest * RequestSize). Nilai default adalah 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Menghasilkan perkiraan panjang biner.",
        "Documentation.LongDescription": "Menghasilkan perkiraan panjang <code>binary</code>, atau kesalahan jika sumber data tidak mendukung perkiraan panjang.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan perkiraan panjang nilai biner.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Mem-buffer nilai biner dalam memori.",
        "Documentation.LongDescription": "Mem-buffer nilai biner dalam memori.  Hasil pemanggilan ini adalah nilai biner stabil, yakni memiliki panjang deterministik dan urutan byte.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Membuat versi stabil dari nilai biner.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Mengkombinasikan daftar biner ke biner tunggal.",
        "Documentation.LongDescription": "Mengkombinasikan daftar biner ke biner tunggal.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Membuat biner dari nilai tertentu",
        "Documentation.LongDescription": "Menghasilkan nilai <code>binary</code> dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Binary.From</code> mengembalikan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>binary</code>, <code>value</code> akan dihasilkan. Nilai tipe berikut dapat dikonversi ke nilai <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>binary</code> dari representasi teks. Untuk mengetahui detailnya, lihat <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nJika <code>value</code> adalah tipe lain, kesalahan akan dihasilkan.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Mengambil nilai <code>binary</code> dari <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Mengkonversi daftar angka ke nilai biner.",
        "Documentation.LongDescription": "Mengkonversi daftar angka ke nilai biner.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Mengkodekan data dari format teks ke biner.",
        "Documentation.LongDescription": "Mengembalikan hasil konversi nilai teks <code>text</code> ke biner (daftar <code>bilangan</code>). <code>encoding</code> dapat ditetapkan untuk menunjukkan pengodean yang digunakan dalam nilai teks.\r\n      Nilai <code>BinaryEncoding</code> berikut dapat digunakan untuk <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Pengodean Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Pengodean heksadesimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Mengkodekan \"1011\" ke biner.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Mengkodekan \"1011\" ke biner dengan pengodean Heksadesimal.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Membaca aliran biner dan mencoba untuk menentukan jenis konten dan informasi format aliran.",
        "Documentation.LongDescription": "Mengembalikan catatan dengan bidang Content.Type yang berisi tipe MIME yang disimpulkan.\r\n    Jika jenis konten yang disimpulkan adalah text/*, dan halaman kode pengodean terdeteksi, bidang Content.Encoding yang berisi pengodean aliran akan dihasilkan.\r\n    Jika jenis konten yang disimpulkan adalah text/csv, dan formatnya dibatasi, bidang Csv.PotentialDelimiter yang berisi tabel akan dihasilkan untuk analisis potensi pemisah.\r\n    Jika jenis konten yang disimpulkan adalah text/csv, dan formatnya lebar tetap, bidang Csv.PotentialPositions yang berisi daftar akan dihasilkan untuk analisis potensi posisi kolom dengan lebar tetap.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Menghasilkan jumlah karakter.",
        "Documentation.LongDescription": "Menghasilkan jumlah karakter.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Mengkonversi nilai biner ke daftar angka.",
        "Documentation.LongDescription": "Mengkonversi nilai biner ke daftar angka.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Mengkodekan data biner ke format teks.",
        "Documentation.LongDescription": "Mengembalikan hasil konversi daftar biner angka <code>binary</code> ke nilai teks. Secara opsional, <code>encoding</code> dapat ditetapkan untuk menunjukkan pengodean yang akan digunakan dalam nilai teks yang dihasilkan\r\n      Nilai <code>BinaryEncoding</code> berikut dapat digunakan untuk <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Pengodean Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Pengodean heksadesimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Membuat catatan kesalahan yang dimodifikasi dan tidak akan memicu fallback saat dimunculkan oleh handler yang ditentukan pada tampilan (melalui Binary.View).",
        "Documentation.LongDescription": "Membuat catatan kesalahan yang dimodifikasi dari <code>errorRecord</code> yang tidak akan memicu fallback saat dimunculkan oleh handler yang ditentukan pada tampilan (melalui Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Membuat fungsi yang dapat dicegat oleh handler yang ditentukan pada tampilan (melalui Binary.View).",
        "Documentation.LongDescription": "<p>Membuat fungsi tampilan berdasarkan <code>function</code> yang dapat ditangani dalam tampilan yang dibuat oleh <code>Binary.View</code>.</p>\r\n<p>Handler <code>OnInvoke</code> dari <code>Binary.View</code> dapat digunakan untuk menentukan handler untuk fungsi tampilan.</p>\r\n<p>Seperti halnya handler untuk operasi bawaan, jika tidak ada handler <code>OnInvoke</code> yang ditentukan, atau jika handler tidak menangani fungsi tampilan, atau jika kesalahan dimunculkan oleh handler, <code>function</code> diterapkan di atas tampilan.</p>\r\n<p>Lihat dokumentasi konektor kustom Power Query yang diterbitkan untuk deskripsi yang lebih lengkap tentang <code>Binary.View</code> dan fungsi tampilan kustom.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Format biner yang membaca bilangan bulat bertanda 64-bit yang dikodekan menggunakan pengodean panjang variabel 7-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat bertanda 64-bit yang dikodekan menggunakan pengodean panjang variabel 7-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Format biner yang membaca bilangan bulat tidak bertanda 64-bit yang dikodekan menggunakan pengodean panjang variabel 7-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat tidak bertanda 64-bit yang dikodekan menggunakan pengodean panjang variabel 7-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Format biner yang membaca bilangan bulat tidak bertanda 8-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat tidak bertanda 8-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Format biner yang membaca nilai desimal .NET 16-byte.",
        "Documentation.LongDescription": "Format biner yang membaca nilai desimal .NET 16-byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Format biner yang membaca nilai titik mengambang presisi ganda IEEE 8-byte.",
        "Documentation.LongDescription": "Format biner yang membaca nilai titik mengambang presisi ganda IEEE 8-byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Menghasilkan format biner yang akan membaca urutan item dan menghasilkan daftar.",
        "Documentation.LongDescription": "Menghasilkan format biner, yang membaca urutan item dan menghasilkan <code>daftar</code>.  Parameter <code>binaryFormat</code> menentukan format biner dari tiap item.  Berikut adalah tiga cara untuk menentukan jumlah item yang dibaca: <ul><li>Jika <code>countOrCondition</code> tidak ditetapkan, format biner akan membaca hingga tidak ada lagi item.</li><li>Jika <code>countOrCondition</code> adalah angka, format biner akan membaca sebanyak item tersebut.</li><li>Jika <code>countOrCondition</code> adalah fungsi, fungsi tersebut akan digunakan untuk item yang dibaca.  Fungsi akan menghasilkan true untuk melanjutkan, dan false untuk berhenti membaca item.  Item akhir akan disertakan dalam daftar.</li><li>Jika <code>countOrCondition</code> adalah format biner, hitungan item diperkirakan untuk mendahului daftar, dan format yang ditetapkan akan digunakan untuk membaca hitungan.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Membaca byte hingga akhir data.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Membaca dua byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Membaca byte hingga nilai byte lebih besar dari atau sama dengan dua.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Format biner yang membaca nol byte dan menghasilkan null.",
        "Documentation.LongDescription": "Format biner yang membaca nol byte dan menghasilkan null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Menghasilkan format biner yang membaca data.",
        "Documentation.LongDescription": "Menghasilkan format biner yang membaca data.  Parameter <code>record</code> akan menetapkan format data.  Setiap bidang dalam data dapat memiliki format biner berbeda.  Jika bidang berisi nilai yang bukan berupa nilai format biner, maka tidak ada data yang dibaca untuk bidang tersebut, dan nilai bidang akan bergaung ke hasil.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Membaca data yang berisi satu bilangan bulat 16-bit dan satu bilangan bulat 32-bit.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Format biner yang membaca bilangan bulat bertanda 16-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat bertanda 16-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Format biner yang membaca bilangan bulat bertanda 32-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat bertanda 32-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Format biner yang membaca bilangan bulat bertanda 64-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat bertanda 64-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Format biner yang membaca nilai titik mengambang presisi tunggal IEEE 4-byte.",
        "Documentation.LongDescription": "Format biner yang membaca nilai titik mengambang presisi tunggal IEEE 4-byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Menghasilkan format biner yang membaca nilai teks.",
        "Documentation.LongDescription": "Menghasilkan format biner yang membaca nilai teks.  <code>length</code> akan menetapkan jumlah byte yang dikodekan, atau format biner sepanjang yang melebihi teks.  Nilai <code>encoding</code> opsional akan menetapkan pengodean teks.  Jika <code>encoding</code> tidak ditetapkan, maka pengodean akan ditentukan dari tanda urutan byte Unicode.  Jika tanda urutan byte tidak ada, maka <code>TextEncoding.Utf8</code> akan digunakan.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Mengkodekan dua byte sebagai teks ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Mengkodekan teks ASCII dengan panjang teks dalam byte muncul sebelum teks sebagai byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Format biner yang membaca bilangan bulat tidak bertanda 16-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat tidak bertanda 16-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Format biner yang membaca bilangan bulat tidak bertanda 32-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat tidak bertanda 32-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Format biner yang membaca bilangan bulat tidak bertanda 64-bit.",
        "Documentation.LongDescription": "Format biner yang membaca bilangan bulat tidak bertanda 64-bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Membuat bilangan bulat 8 bit dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> bilangan bulat 8-bit dari <code>value</code> yang ditentukan. Jika <code>value</code> yang ditentukan adalah <code>null</code>, <code>Byte.From</code> menghasilkan <code>null</code>. Jika <code>value</code> yang ditentukan adalah <code>number</code> dalam rentang bilangan bulat 8-bit tanpa bagian pecahan, dihasilkan <code>value</code>. Jika memiliki bagian pecahan, maka angka dibulatkan dengan mode pembulatan yang ditentukan. Mode pembulatan default adalah <code>RoundingMode.ToEven</code>. Jika <code>value</code> adalah tipe lain, akan dikonversi terlebih dahulu ke <code>number</code> menggunakan <code>Number.FromText</code>. Lihat <code>Number.Round</code> untuk mode pembulatan yang tersedia. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 8 bit <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 8 bit <code>\"4.5\"</code> menggunakan <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Mengonversi angka menjadi karakter teks.",
        "Documentation.LongDescription": "Menghasilkan karakter yang setara dengan angka.<br>\r\n    <br>\r\n    <code>number</code> yang diberikan harus berupa poin kode Unicode 21-bit.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi angka ke nilai karakter yang setara.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Mengonversi karakter ke angka dan kembali lagi.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Mengonversi poin kode heksadesimal untuk emotikon \"wajah menyeringai\" ke pasangan pengganti UTF-16 yang setara.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Mengonversi karakter ke nilai angkanya.",
        "Documentation.LongDescription": "Menghasilkan angka yang setara dengan <code>character</code>.<br>\r\n    <br>\r\n    Hasilnya adalah poin kode Unicode 21-bit yang ditunjukkan oleh karakter atau pasangan pengganti yang diberikan.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi karakter ke nilai angka yang setara.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Mengonversi pasangan pengganti UTF-16 untuk emotikon \"wajah menyeringai\" ke poin kode heksadesimal yang setara.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Menghasilkan fungsi yang mengkombinasikan daftar teks menggunakan pemisah yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang menggabungkan daftar nilai teks menjadi nilai teks tunggal menggunakan pemisah yang ditentukan.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Menggabungkan daftar nilai teks menggunakan pemisah titik koma.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Gabungkan teks dari dua kolom menggunakan pemisah koma dan pengutipan gaya CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Menghasilkan fungsi yang mengkombinasikan daftar teks menggunakan pemisah yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang mengkombinasikan daftar nilai teks menjadi nilai teks tunggal menggunakan serangkaian pemisah.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Mengkombinasikan daftar nilai teks menggunakan serangkaian pemisah.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Menghasilkan fungsi yang mengkombinasikan daftar teks menggunakan panjang yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang mengkombinasikan daftar nilai teks menjadi nilai teks tunggal menggunakan panjang yang ditentukan.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Mengkombinasikan daftar nilai teks dengan mengekstrak sejumlah karakter yang ditentukan dari setiap nilai input.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Mengkombinasikan daftar nilai teks dengan mengekstrak sejumlah karakter yang ditentukan, setelah terlebih dahulu mengisi hasil dengan teks templat.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Menghasilkan fungsi yang mengkombinasikan daftar teks menggunakan posisi output yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang mengkombinasikan daftar nilai teks menjadi nilai teks tunggal menggunakan posisi output yang ditetapkan.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Mengkombinasikan daftar nilai teks dengan menempatkannya dalam output pada posisi yang ditentukan.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Menghasilkan fungsi yang mengkombinasikan daftar teks menggunakan posisi dan panjang yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang mengkombinasikan daftar nilai teks menjadi nilai teks tunggal menggunakan posisi output dan panjang yang ditetapkan. Panjang null menunjukkan bahwa seluruh nilai teks harus disertakan.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Mengkombinasikan daftar nilai teks menggunakan posisi dan panjang output yang ditetapkan.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Menghasilkan fungsi pembanding berdasarkan kultur dan sensitivitas kasus yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan fungsi pembanding yang menggunakan <code>culture</code> dan sensitivitas kasus yang ditentukan oleh <code>ignoreCase</code> untuk melakukan perbandingan.<br>\r\n      <br>\r\n      Fungsi pembanding menerima dua argumen dan menghasilkan -1, 0, atau 1 berdasarkan apakah nilai pertama kurang dari, sama dengan, atau lebih besar dari yang kedua.<br>\r\n      <br>\r\n      Nilai default untuk <code>ignoreCase</code> adalah false. <code>culture</code> harus merupakan salah satu bahasa lokal yang didukung oleh .NET framework (misalnya, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Bandingkan \"a\" dan \"A\" menggunakan lokal \"en-US\" untuk menentukan apakah nilai setara atau tidak.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Bandingkan \"a\" dan \"A\" menggunakan lokal \"en-US\" dengan mengabaikan kasus untuk menentukan apakah nilai setara atau tidak.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Mengembalikan pengenal unik anggota dari nilai properti anggota.",
        "Documentation.LongDescription": "Mengembalikan pengenal unik anggota dari nilai properti anggota. <code>attribute</code>. Mengembalikan null untuk semua nilai lainnya.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Mengembalikan kunci properti.",
        "Documentation.LongDescription": "Mengembalikan kunci properti <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Mengembalikan nilai mata uang dari nilai yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>currency</code> dari <code>value</code> yang ditentukan. Jika <code>value</code> yang ditentukan adalah <code>null</code>, <code>Currency.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> yang ditentukan adalah <code>number</code> dalam rentang mata uang, bagian pecahan dari <code>value</code> dibulatkan ke 4 digit desimal dan dihasilkan. Jika <code>value</code> adalah tipe lain, akan dikonversi terlebih dahulu ke <code>number</code> menggunakan <code>Number.FromText</code>. Rentang yang valid untuk mata uang adalah <code>-922,337,203,685,477,5808</code> hingga <code>922,337,203,685,477,5807</code>. Lihat <code>Number.Round</code> untuk mode pembulatan yang tersedia. Defaultnya adalah <code>RoundingMode.ToEven</code>. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\")",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>currency</code> sebesar <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Dapatkan nilai <code>currency</code> sebesar <code>\"1.23455\"</code> menggunakan <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Menghasilkan komponen hari.",
        "Documentation.LongDescription": "Mengembalikan komponen hari pada nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan mengekstrak komponen hari.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil komponen hari dari nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menunjukkan tanggal dan waktu 5/14/2011 05:00:00 PM.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Menghasilkan angka (dari 0 hingga 6) yang menunjukkan hari dalam sepekan yang ditempati oleh nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan angka (dari 0 hingga 6) yang menunjukkan hari dalam sepekan yang ditempati oleh <code>dateTime</code> yang diberikan.\r\n  <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Nilai <code>Day</code> menunjukkan hari yang harus dianggap sebagai hari pertama dalam sepekan. Nilai yang diperbolehkan adalah Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, atau Day.Saturday. Jika tidak ditetapkan, default yang bergantung pada budaya akan digunakan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil hari dalam sepekan yang diwakili oleh Senin, 21 Februari 2011, menggunakan hari Minggu sebagai hari pertama dalam sepekan.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Mengambil hari dalam sepekan yang diwakili oleh Senin, 21 Februari 2011, menggunakan hari Senin sebagai hari pertama dalam sepekan.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Menghasilkan hari dari nama minggu.",
        "Documentation.LongDescription": "Mengembalikan hari dari nama minggu untuk <code>date</code> yang diberikan. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mendapatkan hari dari nama minggu.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Menghasilkan angka mulai dari 1 hingga 366 yang menunjukkan tahun.",
        "Documentation.LongDescription": "Menghasilkan angka yang menunjukkan hari dalam setahun pada nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Hari dalam setahun untuk 1 Maret 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Menghasilkan angka mulai dari 28 hingga 31 yang menunjukkan angka hari dalam sebulan.",
        "Documentation.LongDescription": "Mengembalikan jumlah hari dalam sebulan pada nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang menghasilkan jumlah hari dalam sebulan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Jumlah hari pada bulan Desember seperti ditunjukkan <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Menghasilkan akhir hari.",
        "Documentation.LongDescription": "Mengembalikan akhir hari yang ditunjukkan oleh <code>dateTime</code>. Informasi zona waktu dipertahankan.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, nilai <code>datetime</code>, atau <code>datetimezone</code> dari mana akhir hari dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil akhir hari untuk 5/14/2011 05:00:00 PM.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Mengambil akhir hari untuk 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Menghasilkan akhir bulan.",
        "Documentation.LongDescription": "Mengembalikan akhir bulan yang berisi <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> nilai akhir bulan dihitung</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil akhir bulan untuk 5/14/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Mengambil akhir bulan untuk 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Menghasilkan akhir kuartal.",
        "Documentation.LongDescription": "Mengembalikan akhir kuartal yang berisi <code>dateTime</code>. Informasi zona waktu dipertahankan.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> nilai akhir kuartal dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan akhir kuartal untuk 10 Oktober 2011, 08.00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Menghasilkan akhir minggu.",
        "Documentation.LongDescription": "Mengembalikan akhir minggu yang berisi <code>dateTime</code>.\r\n    Fungsi ini memerlukan <code opsional>Hari</code>, <code>firstDayOfWeek</code>, untuk ditetapkan sebagai hari pertama dalam seminggu untuk penghitungan relatif ini. Nilai defaultnya adalah <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> nilai yang dihitung hari terakhir dalam seminggu</li>\r\n        <li><code>firstDayOfWeek</code>:  <i>[Opsional]</i> Nilai <code>Day.Type</code> yang mewakili hari pertama dalam seminggu. Nilai yang mungkin <code>Hari</code>, <code>Hari.Senin</code>, <code>Hari.Selasa</code>, <code>Hari</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> dan <code>Day.Saturday.</code>. Nilai defaultnya adalah <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil akhir pekan untuk 5/14/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Mengambil akhir pekan untuk 5/17/2011 05:00:00 PM -7:00, dengan Minggu sebagai hari pertama dalam pekan.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Menghasilkan akhir tahun.",
        "Documentation.LongDescription": "Menghasilkan akhir tahun yang berisi <code>dateTime</code>, termasuk detik pecahan. Informasi zona waktu dipertahankan.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> nilai akhir tahun dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil akhir tahun untuk 5/14/2011 05:00:00 PM.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Mengambil angka belakang jam untuk 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Membuat tanggal dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>date</code> dari <code>value</code> yang diberikan. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").\r\nJika <code>value</code> yang diberikan adalah <code>null</code>, <code>Date.From</code> akan menghasilkan <code>null</code>. Jika <code>value</code> yang diberikan adalah <code>date</code>, <code>value</code> akan dihasilkan. Nilai tipe berikut dapat dikonversi ke nilai <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>date</code> dari representasi tekstual. Lihat <code>Date.FromText</code> untuk mengetahui detailnya.</li>\r\n        <li><code>datetime</code>: Komponen tanggal <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Komponen tanggal tanggalwaktu lokal yang setara dengan <code>value</code>.</li>\r\n        <li><code>number</code>: Komponen tanggal tanggalwaktu yang setara dengan Tanggal Automasi OLE yang dinyatakan oleh <code>value</code>.</li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain, kesalahan akan dihasilkan.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>43910</code> ke nilai <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Mengkonversi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> ke nilai <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Membuat Tanggal dari format Tanggal lokal, universal, dan kustom.",
        "Documentation.LongDescription": "Membuat nilai <code>date</code> dari representasi tekstual, <code>text</code>. Parameter <code>catatan</code> opsional, <code>options</code> dapat diberikan untuk menentukan properti tambahan. <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan menghasilkan penguraian tanggal menggunakan upaya terbaik.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> bukan null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara di <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti jika <code>options</code><code> = [Format = null, Kultur = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>\"2010-12-31\"</code> ke nilai <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Mencari tanggal dalam kalender Gregorian yang sesuai dengan awal 1400 dalam kalender Hijriah.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama hari ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama hari ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam hari ini.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama bulan ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama bulan ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam bulan ini.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama kuartal ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama kuartal ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam kuartal ini.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama pekan ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama pekan ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam pekan ini.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama tahun ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama tahun ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam tahun ini.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul pada hari berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi pada hari berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul pada hari ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah hari setelah waktu sistem saat ini terdapat dalam hari berikutnya.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul pada bulan berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi pada bulan berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah bulan setelah waktu sistem saat ini terdapat dalam bulan berikutnya.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam kuartal berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada kuartal berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah kuartal setelah waktu sistem saat ini terdapat dalam kuartal berikutnya.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam minggu berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada minggu berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah pekan setelah waktu sistem saat ini terdapat dalam pekan berikutnya.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam tahun berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada tahun berikutnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tahun setelah waktu sistem saat ini terdapat dalam tahun berikutnya.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam hari sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada hari sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam hari ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah hari sebelum waktu sistem saat ini terdapat dalam hari sebelumnya.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam bulan sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada bulan sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam bulan ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah bulan sebelum waktu sistem saat ini terdapat dalam bulan sebelumnya.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam kuartal sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada kuartal sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam kuartal saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah kuartal sebelum waktu sistem saat ini terdapat dalam kuartal sebelumnya.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam minggu sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada minggu sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam minggu ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah pekan sebelum waktu sistem saat ini terdapat dalam pekan sebelumnya.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Menentukan apakah tanggal ini muncul dalam tahun sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun saat ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> muncul pada tahun sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam tahun saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tahun sebelum waktu sistem saat ini terdapat dalam tahun sebelumnya.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Menunjukkan apakah tanggal ini muncul selama tahun ini dan terdapat pada atau sebelum hari ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai datetime tertentu <code>dateTime</code> muncul selama tahun ini dan terdapat pada atau sebelum hari ini, seperti ditetapkan berdasarkan tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah waktu sistem saat ini terdapat dalam tahun berjalan.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Menunjukkan apakah tanggal ini jatuh pada tahun kabisat.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai tanggalwaktu tertentu <code>dateTime</code> jatuh pada tahun kabisat.\r\n <ul>\r\n        <li><code>dateTime</code>: Nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tahun 2012, seperti ditunjukkan oleh <code>#date(2012, 01, 01)</code>, adalah tahun kabisat.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Menghasilkan komponen bulan.",
        "Documentation.LongDescription": "Menghasilkan komponen bulan dengan nilai <code>datetime</code> yang tersedia, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mencari bulan dalam #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Menghasilkan nama dari komponen bulan.",
        "Documentation.LongDescription": "Mengembalikan nama komponen bulan untuk <code>date</code> yang diberikan. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mendapatkan nama bulan.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Menghasilkan angka yang menunjukkan kuartal jatuhnya tanggal dalam tahun.",
        "Documentation.LongDescription": "Menghasilkan angka dari 1 hingga 4 yang menunjukkan kuartal jatuhnya tanggal <code>dateTime</code> dalam tahun. <code>dateTime</code> dapat berupa nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mencari kuartal jatuhnya tanggal #date(2011, 12, 31) dalam tahun.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Menghasilkan awal hari.",
        "Documentation.LongDescription": "Mengembalikan awal hari yang ditunjukkan oleh <code>dateTime</code>.\r\n    <code>dateTime</code> harus berupa <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> value.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan awal hari untuk 10 Oktober 2011, 08:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Menghasilkan awal bulan.",
        "Documentation.LongDescription": "Mengembalikan awal bulan yang berisi <code>dateTime</code>.\r\n    <code>dateTime</code> harus berupa nilai <code>date</code> atau <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan awal bulan untuk 10 Oktober 2011, 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Menghasilkan awal kuartal.",
        "Documentation.LongDescription": "Mengembalikan awal kuartal yang berisi <code>dateTime</code>.\r\n      <code>dateTime</code> harus berupa <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> value.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan awal kuartal untuk 10 Oktober 2011, 08.00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Menghasilkan awal minggu.",
        "Documentation.LongDescription": "Mengembalikan awal minggu yang berisi <code>dateTime</code>.\r\n    <code>dateTime</code> harus berupa <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> value.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mencari awal minggu untuk Selasa, 11 Oktober 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Mencari awal minggu untuk Selasa, 11 Oktober 2011, menggunakan Senin sebagai awal minggu.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Menghasilkan awal tahun.",
        "Documentation.LongDescription": "Mengembalikan awal tahun yang berisi <code>dateTime</code>.\r\n    <code>dateTime</code> harus berupa <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> value.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan awal tahun untuk 10 Oktober 2011, 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Menghasilkan data berisi bagian dari nilai tanggal.",
        "Documentation.LongDescription": "Mengembalikan data berisi bagian dari nilai tanggal tertentu, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: Nilai <code>date</code> yang data pada bagiannya akan dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi nilai <code>#date(2011, 12, 31)</code> ke data berisi bagian dari nilai tanggal.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Menghasilkan representasi tekstual dari nilai tanggal.",
        "Documentation.LongDescription": "Menghasilkan representasi tekstual <code>date</code>. Parameter <code>catatan</code> opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. <code>culture</code> hanya digunakan untuk alur kerja warisan (lihat di bawah). <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan mengakibatkan pemformatan tanggal menggunakan default yang telah ditentukan oleh <code>Kultur</code>.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> tidak null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara dalam <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> dan <code>culture</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti <code>options</code><code> = [Format = <code>options</code>, Kultur = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi <code>#date(2010, 12, 31)</code> ke nilai <code>text</code>. <i>Output hasil dapat bervariasi tergantung kultur saat ini.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Mencari tahun dalam kalender Hijriah yang sesuai dengan 1 Januari 2000 dalam kalender Gregorian.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Mengembalikan angka dari 1 hingga 6 yang menunjukkan pekan jatuhnya tanggal ini dalam bulan.",
        "Documentation.LongDescription": "Mengembalikan angka dari 1 hingga 6 yang menunjukkan pekan jatuhnya tanggal <code>dateTime</code> dalam bulan.\r\n <ul>\r\n        <li><code>dateTime</code>: Nilai <code>datetime</code> yang digunakan untuk menentukan pekan dalam bulan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tentukan minggu mana tanggal 15 Maret yang jatuh pada tahun 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Menghasilkan angka dari 1 hingga 54 yang menunjukkan pekan jatuhnya tanggal ini dalam tahun.",
        "Documentation.LongDescription": "Menghasilkan angka dari 1 hingga 54 yang menunjukkan pekan jatuhnya tanggal <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Nilai <code>tanggalwaktu</code> untuk pekan mana yang ditentukan pada tahun tersebut.</li>\r\n        <li><code>firstDayOfWeek</code>: Nilai <code>Day.Type</code> opsional yang menunjukkan hari sebagai awal dari minggu baru (misalnya, <code>Day.Sunday</code>). Jika tidak ditetapkan, default yang bergantung pada kultur akan digunakan.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Tentukan minggu mana dalam setahun yang berisi 27 Maret 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Tentukan minggu mana dalam setahun yang berisi 27 Maret 2011, menggunakan hari Senin sebagai awal minggu.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Menghasilkan komponen tahun.",
        "Documentation.LongDescription": "Menghasilkan komponen tahun dengan nilai <code>datetime</code> yang tersedia, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mencari tahun dalam #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Menghasilkan komponen tanggal dari nilai date, datetime, atau datetimezone yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan komponen tanggal <code>dateTime</code>, nilai <code>date</code>, <code>datetime</code>, atau <code>datetimezone</code> yang ditetapkan.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai tanggal dari #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Membuat datetime dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>datetime</code> dari <code>value</code> yang diberikan. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").\r\nJika <code>value</code> yang diberikan adalah <code>null</code>, <code>DateTime.From</code> akan menghasilkan <code>null</code>. Jika <code>value</code> yang diberikan adalah <code>datetime</code>, <code>value</code> akan dihasilkan. Nilai tipe berikut dapat dikonversi ke nilai <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>datetime</code> dari representasi tekstual. Lihat <code>DateTime.FromText</code> untuk mengetahui detailnya.</li>\r\n        <li><code>date</code>: <code>datetime</code> dengan <code>value</code> sebagai komponen tanggal dan <code>12:00:00</code> sebagai komponen waktu.</li>\r\n        <li><code>datetimezone</code>: <code>datetime</code> lokal yang setara dengan <code>value</code>.</li>\r\n        <li><code>time</code>: <code>datetime</code> dengan tanggal yang setara dengan Tanggal Automasi OLE <code>0</code> sebagai komponen tanggal dan <code>value</code> sebagai komponen waktu.</li>\r\n        <li><code>number</code>: <code>datetime</code> yang setara dengan Tanggal Automasi OLE yang dinyatakan oleh <code>value</code>. </li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain, kesalahan akan dihasilkan.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>#time(06, 45, 12)</code> ke nilai <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Mengkonversi <code>#date(1975, 4, 4)</code> ke nilai <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Membuat datetime dari panjang angka 64 bit.",
        "Documentation.LongDescription": "Membuat nilai <code>datetime</code> dari nilai <code>fileTime</code> dan mengkonversikannya ke zona waktu lokal. Filetime adalah nilai waktu file Windows yang menunjukkan jumlah interval 100-nanodetik yang telah berlalu sejak pukul 12.00 tengah malam, 1 Januari 1601 A.D. (C.E.) Waktu Universal Terkoordinasi (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>129876402529842245</code> ke nilai datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Membuat datetimezone dari format datetime lokal dan universal.",
        "Documentation.LongDescription": "Membuat nilai <code>datetime</code> dari representasi tekstual, <code>text</code>. Parameter <code>catatan</code> opsional, <code>options</code> dapat diberikan untuk menentukan properti tambahan. <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan menghasilkan penguraian tanggal menggunakan upaya terbaik.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> bukan null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara di <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti jika <code>options</code><code> = [Format = null, Kultur = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi <code>\"2010-12-31T01:30:00\"</code> ke nilai tanggalwaktu.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Mengonversi<code>\"2010-12-31T01:30:00.121212\"</code> ke nilai tanggalwaktu.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Mengonversi <code>\"2010-12-31T01:30:00\"</code> ke nilai tanggalwaktu.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Mengonversi <code>\"20101231T013000\"</code> ke nilai tanggalwaktu.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Mengindikasikan apakah tanggal waktu ini terjadi selama jam saat ini, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggal waktu yang diberikan <code>dateTime</code> terjadi selama jam saat ini, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah waktu sistem saat ini berada dalam jam saat ini.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Mengindikasikan apakah tanggal waktu ini terjadi dalam menit saat ini, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggal waktu yang diberikan <code>dateTime</code> terjadi dalam menit saat ini, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah waktu sistem saat ini dalam menit saat ini.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Mengindikasikan apakah tanggal waktu ini terjadi dalam detik saat ini, yang ditentukan oleh tanggal dan waktu saat ini dalam sistem.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggal waktu yang diberikan <code>dateTime</code> terjadi dalam detik saat ini, yang ditentukan oleh tanggal dan waktu saat ini pada sistem.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah waktu sistem saat ini dalam detik saat ini.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi pada satu jam ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi pada satu jam ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah jam setelah waktu sistem saat ini berada dalam jam berikutnya.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi pada satu menit ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam menit saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu ini <code>dateTime</code> terjadi pada satu menit ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini dalam sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam menit saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah jam setelah waktu sistem saat ini dalam menit berikutnya.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi pada satu detik ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perhatikan bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam detik saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi pada satu detik ke depan, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam detik saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah detik setelah waktu sistem saat ini dalam detik berikutnya.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Mengindikasikan apakah tanggalwaktu ini terjadi selama satu jam sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perhatikan bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.",
        "Documentation.LongDescription": "Mengindikasikan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi selama satu jam sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menampilkan false jika diberikan nilai yang muncul dalam jam saat ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah jam sebelum waktu sistem saat ini dalam jam sebelumnya.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Menentukan apakah tanggal waktu ini terjadi dalam satu menit sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam menit ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam satu menit sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam menit ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah menit sebelum waktu sistem saat ini dalam menit sebelumnya.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Menentukan apakah tanggalwaktu ini terjadi dalam satu detik sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam detik ini.",
        "Documentation.LongDescription": "Menentukan apakah nilai tanggalwaktu yang diberikan <code>dateTime</code> terjadi dalam satu detik sebelumnya, seperti yang ditentukan oleh tanggal dan waktu saat ini pada sistem. Perlu diketahui bahwa fungsi ini akan menghasilkan false jika diberikan nilai yang muncul dalam detik ini.\r\n      <ul>\r\n      <li><code>dateTime</code>: Nilai <code>datetime</code>, atau <code>datetimezone</code> yang akan dievaluasi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah detik sebelum waktu sistem saat ini dalam detik sebelumnya.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Menghasilkan bagian waktu dari nilai datetime tertentu.",
        "Documentation.LongDescription": "Menghasilkan bagian waktu dari nilai datetime tertentu, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai waktu dari #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Menghasilkan data berisi bagian nilai datetime.",
        "Documentation.LongDescription": "Mengembalikan data berisi bagian dari nilai datetime tertentu, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Nilai <code>datetime</code> yang data pada bagiannya akan dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi nilai <code>#datetime(2011, 12, 31, 11, 56, 2)</code> ke data berisi nilai Tanggal dan Waktu.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Menghasilkan representasi tekstual dari nilai datetime.",
        "Documentation.LongDescription": "Menghasilkan representasi tekstual <code>dateTime</code>. Parameter <code>catatan</code> opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. <code>culture</code> hanya digunakan untuk alur kerja warisan (lihat di bawah). <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan mengakibatkan pemformatan tanggal menggunakan default yang telah ditentukan oleh <code>Kultur</code>.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> tidak null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara dalam <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> dan <code>culture</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti <code>options</code><code> = [Format = <code>options</code>, Kultur = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi<code>#datetime(2010, 12, 31, 01, 30, 25)</code> ke nilai <code>text</code>. <i>Output hasil dapat bervariasi tergantung kultur saat ini.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konversi menggunakan pola ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Membuat datetimezone dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>datetimezone</code> dari <code>value</code> yang diberikan. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").\r\nJika <code>value</code> yang diberikan adalah <code>null</code>, <code>DateTimeZone.From</code> akan menghasilkan <code>null</code>. Jika <code>value</code> yang diberikan adalah <code>datetimezone</code>, <code>value</code> akan dihasilkan. Nilai tipe berikut dapat dikonversi ke nilai <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>datetimezone</code> dari representasi tekstual. Lihat <code>DateTimeZone.FromText</code> untuk mengetahui detailnya.</li>\r\n        <li><code>date</code>: <code>datetimezone</code> dengan <code>value</code> sebagai komponen tanggal, <code>12:00:00 AM</code> sebagai komponen waktu, dan offset yang sesuai dengan zona waktu lokal.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> dengan <code>value</code> sebagai tanggalwaktu dan offset yang sesuai dengan zona waktu lokal.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> dengan tanggal setara Tanggal Automasi OLE <code>0</code> sebagai komponen tanggal, <code>value</code> sebagai komponen waktu, dan offset yang sesuai dengan zona waktu lokal.</li>\r\n        <li><code>number</code>: <code>datetimezone</code> dengan tanggalwaktu yang setara dengan Tanggal Automasi OLE yang dinyatakan oleh <code>value</code> dan offset yang sesuai dengan zona waktu lokal.</li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain, kesalahan akan dihasilkan.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>\"2020-10-30T01:30:00-08:00\"</code> ke nilai <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Membuat datetimezone dari panjang angka 64 bit.",
        "Documentation.LongDescription": "Membuat nilai <code>datetimezone</code> dari nilai <code>fileTime</code> dan mengonversikannya ke zona waktu lokal. Filetime adalah nilai waktu file Windows yang menunjukkan jumlah interval 100-nanodetik yang telah berlalu sejak pukul 12:00 tengah malam, 1 Januari 1601 A.D. (C.E.) Waktu Universal Terkoordinasi (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>129876402529842245</code> ke nilai datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Membuat datetimezone dari format datetimezone lokal, universal, dan kustom.",
        "Documentation.LongDescription": "Membuat nilai <code>datetimezone</code> dari representasi tekstual, <code>text</code>. Parameter <code>catatan</code> opsional, <code>options</code> dapat diberikan untuk menentukan properti tambahan. <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan menghasilkan penguraian tanggal menggunakan upaya terbaik.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> bukan null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara di <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti jika <code>options</code><code> = [Format = null, Kultur = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi <code>\"2010-12-31T01:30:00-08:00\"</code> ke nilai <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konversi menggunakan ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Hapus informasi timezone dari nilai datetimezone tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai #datetime dari <code>dateTimeZone</code> dengan informasi timezone terhapus.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Menghapus informasi timezone dari nilai #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Mengkonversikan komponen timezone ke timezone lokal.",
        "Documentation.LongDescription": "Mengubah informasi timezone dari nilai datetimezone <code>dateTimeZone</code> ke informasi timezone lokal.\r\n    Jika <code>dateTimeZone</code> tidak memiliki komponen timezone, maka informasi timezone lokal akan ditambahkan.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengubah informasi zona waktu untuk #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) ke zona waktu lokal (misalnya, PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Menghasilkan data berisi bagian nilai datetimezone.",
        "Documentation.LongDescription": "Mengembalikan data berisi bagian dari nilai datetimezone tertentu, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Nilai <code>datetimezone</code> yang data pada bagiannya akan dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi nilai <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> ke data berisi nilai Tanggal, Waktu, dan Zona.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Menghasilkan representasi tekstual dari nilai datetimezone.",
        "Documentation.LongDescription": "Menghasilkan representasi tekstual <code>dateTimeZone</code>. Parameter <code>catatan</code> opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. <code>culture</code> hanya digunakan untuk alur kerja warisan (lihat di bawah). <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan mengakibatkan pemformatan tanggal menggunakan default yang telah ditentukan oleh <code>Kultur</code>.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> tidak null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"MMM\"</code> adalah <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, sementara dalam <code>\"ru-RU\"</code> <code>\"MMM\"</code> adalah <code>\"янв\", \"фев\", \"мар\", ...</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> dan <code>culture</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti <code>options</code><code> = [Format = <code>options</code>, Kultur = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> ke nilai <code>text</code>. <i>Output hasil dapat bervariasi tergantung pada kultur saat ini.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konversi menggunakan pola ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Mengkonversikan komponen zona waktu ke zona waktu UTC.",
        "Documentation.LongDescription": "Mengubah informasi zona waktu dari nilai datetime <code>dateTimeZone</code> ke informasi zona waktu UTC atau Universal Time.\r\n    Jika <code>dateTimeZone</code> tidak memiliki komponen zona waktu, maka informasi zona waktu UTC akan ditambahkan.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Mengubah informasi zona waktu untuk #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) ke zona waktu UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Mengubah zona waktu nilai.",
        "Documentation.LongDescription": "Mengubah zona waktu nilai.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Mengubah zona waktu nilai.",
        "Documentation.LongDescription": "Mengubah zona waktu nilai.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Membuat Desimal dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> Desimal dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Decimal.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang Desimal, dihasilkan <code>value</code>, jika tidak dihasilkan kesalahan. Jika <code>value</code> adalah tipe lain, akan terlebih dahulu dikonversi ke <code>number</code> menggunakan <code>Number.FromText</code>.<code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> Desimal <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Menghasilkan konten tabel Delta Lake.",
        "Documentation.LongDescription": "Menghasilkan konten tabel Delta Lake.",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Membuat Ganda dari nilai yang diberikan.",
        "Documentation.LongDescription": "Mengembalikan nilai <code>number</code> Ganda dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Double.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang Ganda, dihasilkan <code>value</code>, jika tidak akan dihasilkan kesalahan. Jika <code>value</code> adalah tipe lain, akan terlebih dahulu dikonversi ke <code>number</code> menggunakan <code>Number.FromText</code>.<code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> Ganda <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Menghasilkan bagian hari dari durasi.",
        "Documentation.LongDescription": "Menghasilkan bagian hari dari <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrak jumlah hari di antara dua tanggal.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Membuat durasi dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>duration</code> dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Duration.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>duration</code>, <code>value</code> dihasilkan. Nilai tipe berikut dapat dikonversi ke nilai <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>duration</code> dari format waktu berlalu tekstual (h.j:m:d). Lihat <code>Duration.FromText</code>untuk detailnya.</li>\r\n        <li><code>number</code>: <code>duration</code> setara dengan jumlah hari keseluruhan dan pecahan yang dinyatakan dengan <code>value</code>.</li>\r\n      </ul>\r\nJika <code>value</code> adalah tipe lain, kesalahan akan dihasilkan.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>2.525</code> ke nilai <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Menghasilkan nilai durasi dari format waktu berlalu tekstual (h.j:m:d).",
        "Documentation.LongDescription": "Mengembalikan nilai durasi dari teks yang ditetapkan, <code>text</code>. Format berikut dapat diurai dengan fungsi ini:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Termasuk semua rentang)<br>\r\n        ddd: Jumlah hari.<br>\r\n        hh: Jumlah jam, antara 0 hingga 23.<br>\r\n        mm: Jumlah menit, antara 0 hingga 59.<br>\r\n        ss: Jumlah detik, antara 0 hingga 59.<br>\r\n        ff: Pecahan detik, antara 0 hingga 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>\"2.05:55:20\"</code> ke nilai <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Menghasilkan bagian jam dari durasi.",
        "Documentation.LongDescription": "Menghasilkan bagian jam dari <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrak jam dari nilai durasi.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Menghasilkan bagian menit dari durasi.",
        "Documentation.LongDescription": "Menghasilkan bagian menit dari <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrak menit dari nilai durasi.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Menghasilkan bagian detik dari durasi.",
        "Documentation.LongDescription": "Menghasilkan bagian detik dari <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ekstrak detik dari nilai durasi.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Menghasilkan data berisi bagian dari durasi.",
        "Documentation.LongDescription": "Mengembalikan data berisi bagian dari nilai durasi, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: <code>duration</code> yang digunakan untuk menghasilkan data.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>#duration(2, 5, 55, 20)</code> ke data bagiannya, termasuk hari, jam, menit, dan detik jika tersedia.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Menghasilkan teks dari format \"h.j:m:d\".",
        "Documentation.LongDescription": "Menghasilkan representasi tekstual dalam format \"day.hour:mins:sec\" dari nilai durasi yang diberikan, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>Durasi</code> dari representasi tekstual yang dihitung.</li>\r\n  <li><code>format</code>: <i>[Opsional]</i> Tidak digunakan lagi, akan mengembalikan kesalahan jika tidak null</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>#duration(2, 5, 55, 20)</code> ke nilai teks.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Menghasilkan total hari yang dijangkau durasi ini.",
        "Documentation.LongDescription": "Menghasilkan total hari yang dijangkau dengan <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Temukan total hari yang dijangkau dengan nilai durasi.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Menghasilkan total jam yang dijangkau durasi ini.",
        "Documentation.LongDescription": "Menghasilkan total jam yang dijangkau dengan <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Temukan total jam yang dijangkau dengan nilai durasi.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Menghasilkan total menit yang dijangkau durasi ini.",
        "Documentation.LongDescription": "Menghasilkan total menit yang dijangkau dengan <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Temukan total menit yang dijangkau dengan nilai durasi.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Menghasilkan total detik yang dijangkau durasi ini.",
        "Documentation.LongDescription": "Menghasilkan total detik yang dijangkau dengan <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Temukan total detik yang dijangkau dengan nilai durasi.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Menghasilkan data kesalahan alasan, pesan, dan rincian dari nilai teks yang tersedia.",
        "Documentation.LongDescription": "Menghasilkan data kesalahan alasan, pesan, dan rincian dari nilai teks yang tersedia.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Menghasilkan representasi kode sumber M dari nilai konstan.",
        "Documentation.LongDescription": "Menghasilkan representasi kode sumber M dari nilai konstan.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan representasi kode sumber M dari nilai angka.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Dapatkan representasi kode sumber M dari nilai tanggal.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Dapatkan representasi kode sumber M dari nilai teks.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Menghasilkan hasil evaluasi ekspresi M.",
        "Documentation.LongDescription": "Menghasilkan hasil evaluasi ekspresi M <code>document</code>, dengan pengidentifikasi yang tersedia yang dapat direferensikan oleh <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Evaluasi jumlah sederhana.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Evaluasi jumlah yang lebih kompleks.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Evaluasi penggabungan nilai teks dengan pengidentifikasi.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Menghasilkan representasi kode sumber M dari pengidentifikasi.",
        "Documentation.LongDescription": "Menghasilkan representasi kode sumber M dari pengidentifikasi <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan representasi kode sumber M dari pengidentifikasi.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Dapatkan representasi kode sumber M dari pengidentifikasi yang berisi spasi.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Menghasilkan konten dari file yang ditetapkan sebagai biner.",
        "Documentation.LongDescription": "Menghasilkan konten file, <code>path</code>, sebagai biner. Parameter <code>options</code> saat ini hanya ditujukan untuk penggunaan internal.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Mengembalikan apakah fungsi tertentu dianggap sebagai sumber data atau tidak.",
        "Documentation.LongDescription": "Mengembalikan apakah <code>function</code> dianggap sebagai sumber data atau tidak.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Menerjemahkan teks yang mewakili nilai geografis dalam format WKT (Well-Known Text) ke dalam catatan terstruktur.",
        "Documentation.LongDescription": "Menerjemahkan teks yang mewakili nilai geografis dalam format WKT (Well-Known Text) ke dalam catatan terstruktur. WKT adalah format standar yang ditentukan oleh Open Geospatial Consortium (OGC) dan merupakan format serialisasi umum yang digunakan oleh database termasuk SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Menerjemahkan nilai titik geografis yang terstruktur ke representasi WKT (Well-Known Text).",
        "Documentation.LongDescription": "Menerjemahkan nilai titik geografis yang terstruktur ke representasi WKT (Well-Known Text) seperti yang didefinisikan oleh Open Geospatial Consortium (OGC), juga format serialisasi yang digunakan oleh banyak database termasuk SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Menerjemahkan teks yang mewakili nilai geometris dalam format WKT (Well-Known Text) ke dalam catatan terstruktur.",
        "Documentation.LongDescription": "Menerjemahkan teks yang mewakili nilai geometris dalam format WKT (Well-Known Text) ke dalam catatan terstruktur. WKT adalah format standar yang ditentukan oleh Open Geospatial Consortium (OGC) dan merupakan format serialisasi umum yang digunakan oleh database termasuk SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Menerjemahkan nilai titik geometris terstruktur ke representasi WKT (Well-Known Text).",
        "Documentation.LongDescription": "Menerjemahkan nilai titik geometris terstruktur ke representasi WKT (Well-Known Text) seperti yang didefinisikan oleh Open Geospatial Consortium (OGC), juga format serialisasi yang digunakan oleh banyak database termasuk SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Menghasilkan nilai guid dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>Guid.Type</code> dari <code>value</code> tertentu. Jika <code>value</code> yang diberikan adalah <code>null</code>, <code>Guid.From</code> menghasilkan <code>null</code>.  Pemeriksaan akan dilakukan untuk menentukan apakah <code>value</code> yang diberikan dalam format yang dapat diterima. Format yang sesuai disediakan di contoh.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Guid dapat disediakan sebagai 32 digit heksadesimal berdekatan.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid dapat disediakan sebagai 32 digit heksadesimal yang dipisahkan tanda hubung ke dalam blok 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid dapat disediakan sebagai 32 digit heksadesimal yang dipisahkan tanda hubung dan ditutup kurung kurawal.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid dapat disediakan sebagai 32 digit heksadesimal yang dipisahkan tanda hubung dan ditutup tanda kurung.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Membuat bilangan bulat 16 bit dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> bilangan bulat 16 bit dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Int16.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang bilangan bulat 16 bit tanpa bagian pecahan, dihasilkan <code>value</code>. Jika memiliki bagian pecahan, bilangan akan dibulatkan dengan modus pembulatan yang ditentukan. Modus pembulatan default adalah <code>RoundingMode.ToEven</code>. Jika <code>value</code> tipe lain, akan dikonversi terlebih dahulu ke <code>number</code> menggunakan <code>Number.FromText</code>. Lihat <code>Number.Round</code> untuk mode pembulatan yang tersedia. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 16 bit <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 16 bit <code>\"4.5\"</code> menggunakan <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Membuat bilangan bulat 32 bit dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> bilangan bulat 32 bit dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Int32.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang bilangan bulan 32 bit tanpa bagian pecahan, dihasilkan <code>value</code>. Jika memiliki bagian pecahan, bilangan akan dibulatkan dengan mode pembulatan yang ditentukan. Mode pembulatan default adalah <code>RoundingMode.ToEven</code>. Jika <code>value</code> adalah tipe lain, akan dikonversi terlebih dahulu ke <code>number</code> menggunakan <code>Number.FromText</code>. Lihat <code>Number.Round</code> untuk mode pembulatan yang tersedia. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 32 bit <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 32 bit <code>\"4.5\"</code> menggunakan <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Membuat bilangan bulat 64 bit dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> bilangan bulat 64 bit dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Int64.From</code> menghasilkan <code>null</code>. Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang bilangan bulan 64 bit tanpa bagian pecahan, dihasilkan <code>value</code>. Jika memiliki bagian pecahan, bilangan akan dibulatkan dengan modus pembulatan yang ditentukan. Modus pembulatan default adalah <code>RoundingMode.ToEven</code>. Jika <code>value</code> dari tipe lain, akan dikonversi terlebih dahulu ke <code>number</code> menggunakan <code>Number.FromText</code>. Lihat <code>Number.Round</code> untuk mode pembulatan yang tersedia. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> bilangan bulat 64 bit dari <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Mendapatkan nilai <code>number</code> bilangan bulat 64-bit sebesar <code>\"4.5\"</code> menggunakan <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Membuat bilangan bulat 8 bit yang ditandatangani dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> bilangan bulat 8 bit yang ditandai dari <code>value</code> tertentu. Jika<code>value</code> tertentu adalah <code>null</code>, <code>Int8.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang bilangan bulat 8 bit yang ditandai tanpa bagian pecahan, dihasilkan <code>value</code>. Jika memiliki bagian pecahan, bilangan akan dibulatkan dengan modus pembulatan yang ditentukan. Modus pembulatan default adalah <code>RoundingMode.ToEven</code>. Jika <code>value</code> adalah tipe lain, akan terlebih dahulu dikonversi ke <code>number</code>menggunakan <code>Number.FromText</code>. Lihat <code>Number.Round</code> untuk modus pembulatan yang tersedia. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> bulat 8 bit <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Dapatkan nilai <code>number</code> bulat 8 bit <code>\"4.5\"</code> menggunakan <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Menghasilkan pohon sintaksis abstrak (AST) untuk badan fungsi.",
        "Documentation.LongDescription": "<p>Menghasilkan pohon sintaks abstrak (AST) untuk isi <code>function</code>, yang dinormalisasi menjadi <i>ekspresi item</i>:\r\n<ul>\r\n  <li>Fungsi harus berupa lambda 1 argumen.</li>\r\n  <li>Semua referensi ke parameter fungsi diganti dengan <code>ItemExpression.Item</code>.</li>\r\n  <li>AST akan disederhanakan agar hanya berisi node jenis:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Kesalahan akan dimunculkan jika AST ekspresi item tidak dapat dihasilkan untuk isi <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan AST untuk isi fungsi <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Menghasilkan konten dari dokumen JSON.",
        "Documentation.LongDescription": "Menghasilkan konten dari dokumen JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Menghasilkan representasi JSON dari nilai yang diberikan.",
        "Documentation.LongDescription": "<p>Menghasilkan perwakilan JSON dari nilai <code>value</code> yang diberikan dengan pengpengodeanan teks yang ditentukan oleh <code>encoding</code>. Jika <code>encoding</code> diabaikan, UTF8 digunakan. Nilai ditunjukkan sebagai berikut:</p>\r\n <ul>\r\n        <li>Nilai nol, teks, dan logika ditunjukkan sebagai jenis JSON yang berkaitan</li>\r\n        <li>Bilangan ditunjukkan sebagai angka dalam JSON, kecuali <code>#infinity</code>, <code>-#infinity</code> dan <code>#nan</code> dikonversi ke nol</li>\r\n        <li>Daftar ditunjukkan sebagai array JSON</li>\r\n        <li>Rekaman ditunjukkan sebagai objek JSON</li>\r\n        <li>Tabel ditunjukkan sebagai array objek</li>\r\n        <li>Tanggal, waktu, tanggal waktu, zona tanggal waktu, dan durasi ditunjukkan sebagai teks ISO-8601</li>\r\n        <li>Nilai biner ditunjukkan sebagai teks dengan pengodean basis-64</li>\r\n        <li>Jenis dan fungsi menghasilkan kesalahan</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi nilai kompleks ke JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Mengonversi nilai biner ke daftar nilai teks yang dibagi dengan garis pemisah. Jika gaya tanda petik ditetapkan, maka garis pemisah dapat ditampilkan dalam tanda petik. Jika includeLineSeparators benar, maka karakter garis pemisah disertakan dalam teks.",
        "Documentation.LongDescription": "Mengonversi nilai biner ke daftar nilai teks yang dibagi dengan garis pemisah. Jika gaya tanda petik ditetapkan, maka garis pemisah dapat ditampilkan dalam tanda petik. Jika includeLineSeparators benar, maka karakter garis pemisah disertakan dalam teks.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Mengkonversi nilai teks ke daftar nilai teks yang dibagi dengan garis pemisah. Jika includeLineSeparators bernilai true, maka karakter garis pemisah disertakan dalam teks.",
        "Documentation.LongDescription": "Mengonversi nilai teks ke daftar nilai teks yang dipisahkan dengan baris. Jika includeLineSeparator bernilai true, karakter pemisah baris disertakan dalam teks.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (default) Tidak diperlukan perilaku pengutipan.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Pengutipan per Csv. Karakter tanda kutip ganda digunakan untuk membatasi wilayah seperti itu, dan sepasang tanda kutip digunakan untuk menunjukkan karakter kutipan ganda tunggal dalam wilayah seperti itu. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Mengkonversi daftar teks ke nilai biner menggunakan pengodean dan lineSeparator yang ditetapkan. lineSeparator yang ditetapkan tersebut ditambahkan ke setiap baris.  Jika tidak ditetapkan, maka karakter pembatas baris baru dan baris baru akan digunakan.",
        "Documentation.LongDescription": "Mengkonversi daftar teks ke nilai biner menggunakan pengodean dan lineSeparator yang ditetapkan. lineSeparator yang ditetapkan tersebut ditambahkan ke setiap baris.  Jika tidak ditetapkan, maka karakter pembatas baris baru dan baris baru akan digunakan.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Mengkonversi daftar teks ke teks tunggal.  lineSeparator yang ditetapkan ditambahkan ke setiap baris.  Jika tidak ditetapkan, maka karakter pembatas baris baru dan baris baru akan digunakan.",
        "Documentation.LongDescription": "Mengkonversi daftar teks ke teks tunggal.  lineSeparator yang ditetapkan ditambahkan ke setiap baris.  Jika tidak ditetapkan, maka karakter pembatas baris baru dan baris baru akan digunakan.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Menghasilkan benar jika semua ekspresi benar.",
        "Documentation.LongDescription": "Menghasilkan benar jika semua ekspresi dalam daftar <code>list</code> benar.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah semua ekspresi dalam daftar {true, true, 2 > 0} benar.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah semua ekspresi dalam daftar {true, true, 2 < 0} benar.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Menghasilkan benar jika ekspresi apa pun benar.",
        "Documentation.LongDescription": "Menghasilkan benar jika ekspresi apa pun dalam daftar <code>list</code> benar.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah salah satu ekspresi dalam daftar {true, false, 2 > 0} benar.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah salah satu ekspresi dalam daftar {2 = 0, false, 2 < 0} benar.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Menghasilkan rata-rata dari nilai. Berfungsi untuk nilai angka, tanggal, datetime, datetimezone, dan durasi.",
        "Documentation.LongDescription": "Menghasilkan nilai rata-rata untuk item dalam daftar, <code>list</code>. Hasilnya diberikan dalam jenis data yang sama seperti nilai dalam daftar. Hanya berfungsi untuk nilai angka, tanggal, waktu, datetime, datetimezone, dan durasi.\r\n    Jika daftar kosong, null yang akan dihasilkan.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Mencari rata-rata dari daftar angka, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Mencari rata-rata dari nilai tanggal 1 Januari 2011, 2 Januari 2011, dan 3 Januari 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Mem-buffer daftar.",
        "Documentation.LongDescription": "Mem-buffer daftar <code>list</code> dalam memori. Hasil dari panggilan ini adalah daftar stabil.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Membuat salinan stabil dari daftar {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Menghasilkan daftar tunggal dengan menggabungkan beberapa daftar.",
        "Documentation.LongDescription": "Mengambil daftar berisi daftar, <code>lists</code>, lalu menggabungkannya dalam satu daftar baru.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Menggabungkan dua daftar sederhana {1, 2} dan {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Menggabungkan kedua daftar, {1, 2} dan {3, {4, 5}}, yang salah satunya berisi daftar bersarang.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Menghasilkan jumlah item dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan jumlah item dalam daftar <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah nilai dalam daftar {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Menghasilkan daftar nilai dengan duplikat dihapus.",
        "Documentation.LongDescription": "Menghasilkan daftar yang berisi semua nilai dalam daftar <code>list</code> dengan duplikat dihapus. Jika daftar kosong, hasilnya adalah daftar kosong.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Menghapus duplikat dari daftar {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Menghasilkan nilai pertama dari daftar atau default yang ditetapkan jika kosong.",
        "Documentation.LongDescription": "Menghasilkan item pertama dalam daftar <code>list</code>, atau nilai default opsional, <code>defaultValue</code>, jika daftar kosong.\r\n    Jika daftar kosong dan nilai default tidak ditetapkan, maka fungsi akan menghasilkan <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai pertama dalam daftar {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Mencari nilai pertama dalam daftar {}. Jika daftar kosong, -1 akan dihasilkan.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Menghasilkan interseksi nilai daftar yang ditemukan dalam input.",
        "Documentation.LongDescription": "Menghasilkan interseksi nilai daftar yang ditemukan dalam daftar input <code>lists</code>. Parameter opsional, <code>equationCriteria</code>, dapat ditentukan.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari interseksi daftar {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Menunjukkan apakah terdapat duplikat dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan nilai logika apakah terdapat duplikat dalam daftar <code>list</code>; <code>true</code> jika daftar berbeda, <code>false</code> jika terdapat nilai duplikat. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari jika daftar {1, 2, 3} berbeda (misalnya, tidak ada duplikat).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Mencari jika daftar {1, 2, 3, 3} berbeda (misalnya, tidak ada duplikat).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Menghasilkan benar jika daftar kosong.",
        "Documentation.LongDescription": "Menghasilkan <code>true</code> jika daftar, <code>list</code>, tidak berisi nilai (panjang 0). Jika daftar berisi nilai (panjang > 0), <code>false</code> akan dihasilkan.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jika daftar {} kosong.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Mencari jika daftar {1, 2} kosong.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Menghasilkan nilai terakhir dari daftar atau default yang ditetapkan jika kosong.",
        "Documentation.LongDescription": "Menghasilkan item terakhir dalam daftar <code>list</code>, atau nilai default opsional, <code>defaultValue</code>, jika daftar kosong.\r\n    Jika daftar kosong dan nilai default tidak ditetapkan, maka fungsi akan menghasilkan <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai terakhir dalam daftar {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Mencari nilai terakhir dalam daftar {} atau -1 jika kosong.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Menghasilkan nilai terakhir dalam daftar.  Dapat menentukan jumlah nilai yang akan dihasilkan atau kondisi yang memenuhi syarat secara opsional.",
        "Documentation.LongDescription": "Menghasilkan item terakhir dari daftar <code>list</code>. Jika daftar kosong, pengecualian akan dibuat.\r\n Fungsi ini memerlukan parameter opsional, <code>countOrCondition</code>, untuk mendukung pengumpulan beberapa item atau pemfilteran item. <code>countOrCondition</code> dapat ditetapkan dengan tiga cara:\r\n <ul>\r\n  <li>Jika jumlah ditetapkan, item sebanyak jumlah tersebut akan dihasilkan. </li>\r\n  <li>Jika kondisi ditetapkan, semua item yang awalnya sesuai dengan kondisi akan dihasilkan, dimulai dari bagian akhir daftar. Jika ternyata salah satu item tidak sesuai dengan kondisi, item lainnya tidak akan diperhitungkan. </li>\r\n  <li>Jika parameter ini null, item terakhir dalam daftar akan dihasilkan.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai terakhir dalam daftar {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Mencari nilai terakhir dalam daftar {3, 4, 5, -1, 7, 8, 2} yang lebih besar dari 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Menghasilkan nilai maksimum atau nilai default untuk daftar kosong.",
        "Documentation.LongDescription": "Mengembalikan item maksimum dalam daftar <code>list</code>, atau nilai default opsional <code>default</code> jika daftar kosong.\r\n    Nilai comparisonCriteria opsional, <code>comparisonCriteria</code>, dapat ditetapkan untuk menentukan cara membandingkan item dalam daftar. Jika parameter ini null, pembanding default akan digunakan.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari maksimum dalam daftar {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Mencari maksimum dalam daftar {} atau -1 akan dihasilkan jika kosong. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Menghasilkan nilai median dalam daftar.",
        "Documentation.LongDescription": "Mengembalikan item median daftar <code>list</code>. Fungsi ini menghasilkan <code>null</code> jika daftar tidak berisi nilai bukan<code>null</code>.\r\n    Jika ada angka genap pada item, fungsi memilih yang lebih kecil dari dua item rata-rata kecuali daftar\r\n    semuanya terdiri dari tanggalwaktu, durasi, angka atau waktu, yang menghasilkan rata-rata dua item.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari median dari daftar <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Menghasilkan nilai minimum atau nilai default untuk daftar kosong.",
        "Documentation.LongDescription": "Mengembalikan item minimum dalam daftar <code>list</code>, atau nilai default opsional <code>default</code> jika daftar kosong.\r\n    Nilai comparisonCriteria opsional, <code>comparisonCriteria</code>, dapat ditetapkan untuk menentukan cara membandingkan item dalam daftar. Jika parameter ini null, pembanding default akan digunakan.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mencari minimum dalam daftar {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Mencari minimum dalam daftar {} atau -1 akan dihasilkan jika kosong. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Menghasilkan nilai yang paling sering muncul dalam daftar.",
        "Documentation.LongDescription": "Mengembalikan item yang paling sering muncul dalam daftar, <code>list</code>. Jika daftar kosong, pengecualian akan dibuat. Jika beberapa item muncul dengan frekuensi maksimum yang sama, item terakhir akan dipilih.\r\n    Nilai <code>comparisonCriteria</code> opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Mencari item yang paling sering muncul dalam daftar <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Mencari item yang paling sering muncul dalam daftar <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Menghasilkan daftar nilai yang paling sering muncul dalam daftar.",
        "Documentation.LongDescription": "Mengembalikan item yang paling sering muncul dalam daftar, <code>list</code>. Jika daftar kosong, pengecualian akan dibuat. Jika beberapa item muncul dengan frekuensi maksimum yang sama, item terakhir akan dipilih.\r\n    Nilai <code>comparisonCriteria</code> opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian kesamaan. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Mencari item yang paling sering muncul dalam daftar <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Menghasilkan jumlah item non-null dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan jumlah item non-null dalam daftar <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Menghasilkan daftar offset untuk input.",
        "Documentation.LongDescription": "Mengembalikan daftar offset untuk daftar input <code>list</code>. \r\n    Bila menggunakan List.Transform untuk mengubah daftar, daftar posisi dapat digunakan untuk memberikan akses transformasi ke posisi.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari offset nilai dalam daftar {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Menghasilkan produk bilangan dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan produk bilangan non-null dalam daftar, <code>numbersList</code>. Menghasilkan null jika tidak ada nilai non-null dalam daftar.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Mencari produk bilangan dalam daftar <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Menghasilkan daftar bilangan acak.",
        "Documentation.LongDescription": "Mengembalikan daftar bilangan acak antara 0 dan 1, memberikan jumlah nilai untuk dihasilkan dan nilai awal opsional.\r\n<ul>\r\n   <li><code>count</code>: Jumlah nilai acak untuk dihasilkan.</li>\r\n   <li><code>seed</code>:  <i>[Opsional]</i> Nilai numerik digunakan untuk memberikan nilai awal pada pembuat bilangan acak.  Jika dihilangkan, daftar unik bilangan acak akan dihasilkan setiap kali Anda memanggil fungsi.  Jika Anda menentukan nilai awal dengan angka, setiap panggilan fungsi akan menghasilkan daftar bilangan acak yang sama.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar 3 bilangan acak.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Membuat daftar 3 bilangan acak dengan menetapkan nilai turunan.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Menghasilkan daftar yang melewatkan jumlah elemen yang ditetapkan di awal daftar.",
        "Documentation.LongDescription": "Mengembalikan daftar yang menghapus elemen pertama daftar <code>list</code>. Jika <code>list</code> merupakan daftar kosong, daftar kosong akan dikembalikan.\r\nFungsi ini mengambil parameter opsional, <code>countOrCondition</code>, untuk mendukung penghapusan beberapa nilai seperti yang tercantum di bawah ini.\r\n <ul>\r\n <li>Jika angka ditentukan, item akan dihapus hingga jumlah tersebut. </li>\r\n <li>Jika kondisi ditentukan, item yang cocok berturut-turut di awal <code>list</code> akan dihapus.</li>\r\n <li>Jika parameter ini null, perilaku default akan dilakukan. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1, 2, 3, 4, 5} tanpa 3 bilangan pertama.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Membuat daftar dari {5, 4, 2, 6, 1} yang dimulai dengan bilangan kurang dari 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Menghasilkan daftar yang menghapus jumlah elemen yang ditetapkan dari akhir daftar.",
        "Documentation.LongDescription": "Menghasilkan daftar yang menghapus <code>countOrCondition</code> elemen terakhir dari akhir daftar <code>list</code>. Jika <code>list</code> memiliki kurang dari <code>countOrCondition</code> elemen, daftar kosong akan dikembalikan.\r\n <ul>\r\n <li>Jika angka ditentukan, item akan dihapus hingga jumlah tersebut. </li>\r\n <li>Jika kondisi ditentukan, item yang cocok berturut-turut di akhir <code>list</code> akan dihapus.</li>\r\n <li>Jika parameter ini null, hanya satu item yang dihapus. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1, 2, 3, 4, 5} tanpa 3 bilangan terakhir.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Membuat daftar dari {5, 4, 2, 6, 4} yang diakhiri dengan bilangan kurang dari 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Menghapus semua nilai \"null\" dari daftar yang ditetapkan.",
        "Documentation.LongDescription": "Menghapus semua kemunculan nilai \"null\" dalam <code>list</code>. Jika tidak ada nilai 'null' dalam daftar, daftar asli akan dihasilkan.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Menghapus nilai \"null\" dari daftar {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Membalik susunan nilai dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan daftar dengan nilai dalam daftar <code>list</code> disusun secara terbalik.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1..10} dengan susunan terbalik.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Menghasilkan satu item daftar untuk daftar dengan panjang satu, atau jika sebaliknya, membuat pengecualian.",
        "Documentation.LongDescription": "Jika hanya terdapat satu item dalam daftar <code>list</code>, item tersebut akan dihasilkan.\r\n    Jika terdapat lebih dari satu item atau daftar kosong, fungsi akan membuat pengecualian.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai tunggal dalam daftar {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Mencari nilai tunggal dalam daftar {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Menghasilkan satu item daftar untuk daftar dengan panjang satu dan nilai default untuk daftar kosong.",
        "Documentation.LongDescription": "Jika hanya terdapat satu item dalam daftar <code>list</code>, item tersebut akan dihasilkan.\r\n    Jika daftar kosong, fungsi akan menghasilkan null, kecuali jika <code>default</code> opsional ditetapkan. Jika terdapat lebih dari satu item dalam daftar, fungsi akan menghasilkan kesalahan.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai tunggal dalam daftar {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Mencari nilai tunggal dalam daftar {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Mencari nilai tunggal dalam daftar {}. Jika kosong, -1 akan dihasilkan.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Menghasilkan daftar yang melewatkan jumlah elemen yang ditetapkan di awal daftar.",
        "Documentation.LongDescription": "Mengembalikan daftar yang melewatkan elemen pertama daftar <code>list</code>. Jika <code>list</code> merupakan daftar kosong, daftar kosong akan dikembalikan.\r\nFungsi ini mengambil parameter opsional, <code>countOrCondition</code>, untuk mendukung melewati beberapa nilai seperti yang tercantum di bawah ini.\r\n <ul>\r\n <li>Jika angka ditentukan, item dilewati hingga jumlah tersebut. </li>\r\n <li>Jika kondisi ditentukan, item yang cocok berturut-turut di awal <code>list</code> akan dilewati.</li>\r\n <li>Jika parameter ini null, perilaku default akan dilakukan. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar dari {1, 2, 3, 4, 5} tanpa 3 bilangan pertama.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Membuat daftar dari {5, 4, 2, 6, 1} yang dimulai dengan bilangan kurang dari 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Mengurutkan daftar data sesuai dengan kriteria yang ditetapkan.",
        "Documentation.LongDescription": "Mengurutkan daftar data, <code>list</code>, sesuai dengan kriteria opsional yang ditentukan.\r\n    Parameter opsional, <code>comparisonCriteria</code>, dapat ditentukan sebagai kriteria perbandingan. Hal ini dapat memerlukan nilai berikut:\r\n    <ul>\r\n    <li> Untuk mengontrol urutan, kriteria perbandingan dapat berupa nilai enum Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Untuk menghitung kunci yang akan digunakan untuk mengurutkan, fungsi 1 argumen dapat digunakan. </li>\r\n    <li> Untuk memilih kunci dan mengontrol urutan, kriteria perbandingan dapat berupa daftar yang berisi kunci dan urutan (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Untuk mengontrol perbandingan sepenuhnya, fungsi 2 argumen dapat digunakan. Fungsi ini akan diberi dua item dari daftar (dua item apa pun, dalam urutan apa pun). Fungsi harus menghasilkan salah satu nilai berikut:\r\n        <ul>\r\n            <li> <code>-1</code>: Item pertama lebih kecil daripada item kedua.</li>\r\n            <li> <code>0</code>: Itemnya sama.</li>\r\n            <li> <code>1</code>: Item pertama lebih besar daripada item kedua.</li>\r\n        </ul>\r\n        Value.Compare adalah metode yang dapat digunakan untuk mendelegasikan logika ini. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Mengurutkan daftar {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Mengurutkan daftar {2, 3, 1} dengan susunan turun.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Mengurutkan daftar {2, 3, 1} dengan susunan turun menggunakan metode Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Menghasilkan perkiraan deviasi standar berdasarkan sampel.",
        "Documentation.LongDescription": "Mengembalikan sampel berdasarkan perkiraan simpangan baku nilai dalam daftar, <code>numbersList</code>.\r\n    Jika <code>numbersList</code> adalah daftar angka, angka akan dihasilkan.\r\n    Pengecualian akan dibuat pada daftar kosong atau daftar item yang bukan termasuk jenis <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Mencari deviasi standar angka 1 hingga 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Menghasilkan penjumlahan item dalam daftar.",
        "Documentation.LongDescription": "Menghasilkan penjumlahan nilai non-null dalam daftar, <code>list</code>.  Menghasilkan null jika tidak ada nilai non-null dalam daftar.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Mencari penjumlahan bilangan dalam daftar <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Menghasilkan penyatuan nilai daftar yang ditemukan dalam input.",
        "Documentation.LongDescription": "Mengambil daftar berisi daftar <code>lists</code>, menyatukan item dalam daftar terpisah, dan mengembalikannya dalam daftar output. Dengan demikian, daftar yang dikembalikan akan berisi semua item dalam daftar input apa pun.\r\n    Operasi ini mempertahankan semantik ganda tradisional, sehingga nilai duplikat dicocokkan sebagai bagian dari Gabungan.\r\n    Nilai kriteria persamaan opsional, <code>equationCriteria</code>, dapat ditetapkan untuk mengontrol pengujian persamaan. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Membuat penyatuan daftar {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Menghasilkan daftar dengan menggabungkan item pada posisi yang sama dalam beberapa daftar.",
        "Documentation.LongDescription": "Mengambil daftar dari beberapa daftar, <code>lists</code>, dan menghasilkan daftar dari beberapa daftar yang menggabungkan item pada posisi yang sama.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Membuat zip dua daftar sederhana {1, 2} dan {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Membuat zip dua daftar sederhana dari panjang yang berbeda {1, 2} dan {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Membuat logika dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>logical</code> dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Logical.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>logika</code>, dihasilkan <code>value</code>. Nilai tipe berikut dapat dikonversi ke nilai <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>logical</code> dari nilai teks, baik <code>\"true\"</code> maupun <code>\"false\"</code>. Untuk info selengkapnya, lihat <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code> jika <code>value</code> sama dengan <code>0</code>, <code>true</code> jika sebaliknya.</li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain,kesalahan dihasilkan.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>2</code> ke nilai <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Membuat nilai logika dari nilai teks \"benar\" dan \"salah\".",
        "Documentation.LongDescription": "Membuat nilai logika dari nilai teks <code>text</code>, baik \"benar\" maupun \"salah\". Jika <code>text</code> berisi string yang berbeda, pengecualian akan dibuat. Nilai teks <code>text</code> tidak peka huruf besar-kecil.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Membuat nilai logika dari string teks \"benar\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Membuat nilai logika dari string teks \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Menghasilkan teks \"benar\" atau \"salah\" dengan nilai logika tertentu.",
        "Documentation.LongDescription": "Membuat nilai teks dari nilai logika <code>logicalValue</code>, baik <code>true</code> maupun <code>false</code>. Jika <code>logicalValue</code> bukan nilai logika, maka pengecualian akan dibuat.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Membuat nilai teks dari logika <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Menghasilkan nilai absolut bilangan.",
        "Documentation.LongDescription": "Mengembalikan nilai absolut <code>number</code>. Jika <code>number</code> null, <code>Number.Abs</code> akan menghasilkan null.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code> yang nilai absolutnya akan dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nilai absolut -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Menghasilkan kosinus inversi bilangan.",
        "Documentation.LongDescription": "Menghasilkan kosinus inversi <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Menghasilkan sinus inversi bilangan.",
        "Documentation.LongDescription": "Menghasilkan sinus inversi <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Menghasilkan tangen inversi bilangan.",
        "Documentation.LongDescription": "Menghasilkan tangen inversi <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Menghasilkan byte dengan setiap bit merupakan kebalikan dari input.",
        "Documentation.LongDescription": "Memberikan hasil dari menjalankan operasi bitwise \"Not\" pada <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Menghasilkan kosinus bilangan.",
        "Documentation.LongDescription": "Menghasilkan kosinus <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Mencari kosinus sudut 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Menghasilkan kosinus hiperbolik bilangan.",
        "Documentation.LongDescription": "Menghasilkan kosinus hiperbolik <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Menggunakan e dengan pangkat tertentu.",
        "Documentation.LongDescription": "Mengembalikan hasil dari menggunakan e dengan pangkat <code>number</code> (fungsi eksponensial).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code> yang fungsi eksponensialnya akan dihitung. Jika <code>number</code> null, <code>Number.Exp</code> akan menghasilkan null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Menggunakan e dengan pangkat 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Menghasilkan faktorial bilangan.",
        "Documentation.LongDescription": "Menghasilkan faktorial bilangan <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari faktorial 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Membuat bilangan dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> dari <code>value</code> tertentu. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").\r\nJika <code>value</code> tertentu adalah <code>null</code>, <code>Number.From</code> menghasilkan <code>null</code>. Jika <code>value</code> tertentu adalah <code>number</code>, dihasilkan <code>value</code>. Nilai tipe berikut dapat dikonversi ke nilai <code>number</code>:\r\n      <ul>\r\n        <li><code>teks</code>: Nilai <code>number</code> dari representasi tekstual. Format teks umum ditangani (\"15\", \"3,423.10\", \"5.0E-10\"). Lihat <code>Number.FromText</code> untuk detailnya.</li>\r\n        <li><code>logical</code>: 1 untuk <code>true</code>, 0 untuk <code>false</code>.</li>\r\n        <li><code>datetime</code>: Bilangan titik mengambang presisi ganda yang berisi tanggal setara tanggal Automasi OLE.</li>\r\n        <li><code>datetimezone</code>: Bilangan titik mengambang presisi ganda yang berisi tanggal Automasi OLE setara tanggal dan waktu lokal <code>value</code>.</li>\r\n        <li><code>tanggal</code>: Bilangan titik mengambang presisi ganda yang berisi tanggal Automasi OLE yang setara.</li>\r\n        <li><code>date</code>: Dinyatakan dalam hari fraksional.</li>\r\n        <li><code>duration</code>: Dinyatakan secara hari keseluruhan dan pecahan.</li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain, akan menghasilkan kesalahan.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Mengambil nilai <code>number</code> dari <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Mengambil nilai <code>number</code> dari <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Dapatkan nilai <code>angka</code> dari <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Membuat bilangan dari format teks umum (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Mengembalikan nilai <code>number</code> dari nilai teks tertentu, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Representasi tekstual nilai bilangan. Representasi harus berupa format bilangan umum, seperti \"15\", \"3,423.10\", atau \"5.0E-10\".</li>\r\n  <li><code>culture</code>: Kultur opsional yang mengontrol bagaimana <code>text</code> diinterpretasi (misalnya, \"en-US\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Mengambil nilai bilangan <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Mengambil nilai bilangan <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Menunjukkan apakah nilai bersifat genap.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai, <code>number</code>, genap dengan menghasilkan <code>true</code> jika genap, <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Memastikan 625 adalah bilangan genap.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Memastikan 82 adalah bilangan genap.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Menunjukkan bahwa nilai adalah NaN (Bukan angka).",
        "Documentation.LongDescription": "Menunjukkan bahwa nilai adalah NaN (Bukan angka). Menghasilkan <code>true</code> jika <code>number</code> setara <code>Number.IsNaN</code>, atau <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Memastikan 0 dibagi 0 adalah NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Memastikan 1 dibagi 0 adalah NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Menunjukkan apakah nilai bersifat ganjil.",
        "Documentation.LongDescription": "Menunjukkan apakah nilai bersifat ganjil. Menghasilkan <code>true</code> jika <code>number</code> adalah bilangan ganjil, <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Memastikan 625 adalah bilangan ganjil.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Memastikan 82 adalah bilangan ganjil.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Menghasilkan logaritma natural dari suatu bilangan.",
        "Documentation.LongDescription": "Menghasilkan logaritma natural dari suatu bilangan, <code>number</code>. Jika <code>number</code> null <code>Number.Ln</code> akan menghasilkan null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil logaritma natural dari bilangan 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Menghasilkan logaritma dari suatu bilangan untuk basis yang ditetapkan (default e).",
        "Documentation.LongDescription": "Mengembalikan logaritma bilangan, <code>number</code>, untuk basis <code>base</code> yang ditetapkan. Jika <code>base</code> tidak ditetapkan, nilai default adalah Number.E.\r\n    Jika <code>number</code> null <code>Number.Log</code> akan menghasilkan null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil logaritma basis-10 dari 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Mengambil logaritma basis-e dari 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Menghasilkan logaritma basis-10 dari bilangan.",
        "Documentation.LongDescription": "Menghasilkan logaritma Basis-10 dari bilangan, <code>number</code>. Jika <code>number</code> null <code>Number.Log10</code> menghasilkan null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil logaritma basis-10 dari 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Menghasilkan bilangan pembulatan. Jumlah digit dan mode pembulatan dapat ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan pembulatan <code>number</code> ke angka terdekat. Jika <code>number</code> adalah null, <code>Number.Round</code> akan menghasilkan null.<br>\r\n      <br>\r\n      Secara default, <code>number</code> dibulatkan ke bilangan bulat terdekat, dan ikatan terputus dengan pembulatan ke angka genap terdekat (menggunakan <code>RoundingMode.ToEven</code>, yang juga dikenal sebagai \"pembulatan banker\").<br>\r\n      <br>\r\n      Namun, nilai default ini dapat ditimpa melalui parameter opsional berikut.\r\n      <ul>\r\n        <li><code>digits</code>: Menyebabkan <code>number</code> dibulatkan ke angka digit desimal yang ditentukan.</li>\r\n        <li><code>roundingMode</code>: Menimpa perilaku pemutusan ikatan default ketika <code>number</code> berada di titik tengah antara dua nilai yang berpotensi dibulatkan\r\n      (lihat <code>RoundingMode.Type</code> untuk nilai yang memungkinkan).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Membulatkan 1,234 ke bilangan bulat terdekat.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Membulatkan 1,56 ke bilangan bulat terdekat.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Membulatkan 1,2345 hingga dua tempat desimal.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Membulatkan 1,2345 hingga tiga tempat desimal (Pembulatan ke atas).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Membulatkan 1,2345 hingga tiga tempat desimal (Pembulatan ke bawah).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Memberikan hasil pembulatan bilangan positif ke atas dan bilangan negatif ke bawah. Jumlah digit dapat ditentukan.",
        "Documentation.LongDescription": "Memberikan hasil pembulatan <code>number</code> berdasarkan tanda bilangan. Fungsi ini akan membulatkan bilangan positif ke atas dan bilangan negatif ke bawah.\r\n   Jika <code>digits</code> dientukan, <code>number</code> dibulatkan ke jumlah digit desimal <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Membulatkan bilangan -1,2 menjauhi nol.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Membulatkan bilangan 1,2 menjauhi nol.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Membulatkan bilangan -1,234 menjadi dua desimal dari nol.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Memberikan bilangan tertinggi sebelumnya. Jumlah digit dapat ditentukan.",
        "Documentation.LongDescription": "Mengembalikan hasil pembulatan <code>number</code> ke bawah ke bilangan bulat tertinggi sebelumnya. Jika <code>number</code> null, fungsi ini mengembalikan null.\r\n\r\n    Jika <code>digits</code> disediakan, <code>number</code> dibulatkan ke jumlah digit desimal yang ditentukan.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Membulatkan 1,234 ke bawah ke bilangan bulat.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Membulatkan 1,999 ke bawah ke bilangan bulat.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Membulatkan 1,999 ke bawah menjadi dua desimal.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Memberikan hasil pembulatan bilangan positif ke bawah dan bilangan negatif ke atas. Jumlah digit dapat ditentukan.",
        "Documentation.LongDescription": "Memberikan hasil pembulatan <code>number</code> berdasarkan tanda bilangan. Fungsi ini akan membulatkan bilangan positif ke bawah dan bilangan negatif ke atas.\r\n   Jika <code>digits</code> ditentukan, <code>number</code> dibulatkan ke jumlah digit desimal <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Membulatkan angka -1,2 ke arah nol.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Membulatkan angka 1,2 ke arah nol.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Membulatkan bilangan -1,234 ke dua desimal di belakang nol.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Menghasilkan bilangan bulat tertinggi berikutnya. Jumlah digit dapat ditentukan.",
        "Documentation.LongDescription": "Mengembalikan hasil pembulatan <code>number</code> ke atas ke bilangan bulat tertinggi berikutnya. Jika <code>number</code> null, fungsi ini mengembalikan null.\r\n    Jika <code>digits</code> disediakan, <code>number</code> dibulatkan ke jumlah digit desimal yang ditentukan.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Membulatkan 1,234 ke atas ke bilangan bulat.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Membulatkan 1,999 ke atas ke bilangan bulat.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Membulatkan 1,234 ke atas ke dua tempat desimal.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Menghasilkan 1 jika bilangan adalah positif, -1 jika bilangan adalah negatif, dan 0 jika bilangan adalah nol.",
        "Documentation.LongDescription": "Menghasilkan 1 jika <code>number</code> adalah bilangan positif, -1 jika bilangan negatif, dan 0 jika nol.\r\n    Jika <code>number</code> null, <code>Number.Sign</code> akan menghasilkan null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Menentukan tanda 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Menentukan tanda -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Menentukan tanda 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Menghasilkan sinus bilangan.",
        "Documentation.LongDescription": "Menghasilkan sinus <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Mencari sinus sudut 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Menghasilkan sinus hiperbolik bilangan.",
        "Documentation.LongDescription": "Menghasilkan sinus hiperbolik <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Menghasilkan akar kuadrat dari bilangan.",
        "Documentation.LongDescription": "Mengembalikan akar kuadrat dari <code>number</code>.\r\n    Jika <code>number</code> null, <code>Number.Sqrt</code> akan menghasilkan null. Jika nilainya negatif, <code>Number.NaN</code> akan dihasilkan (Bukan angka).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari akar kuadrat dari 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Mencari akar kuadrat dari 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Menghasilkan tangen bilangan.",
        "Documentation.LongDescription": "Menghasilkan tangen <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Mencari tangen sudut 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Menghasilkan tangen hiperbolik bilangan.",
        "Documentation.LongDescription": "Menghasilkan tangen hiperbolik <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Mengonversi angka yang diberikan ke teks.",
        "Documentation.LongDescription": "Mengonversi nilai numerik <code>number</code> ke nilai teks sesuai dengan format yang ditentukan oleh <code>format</code>.<br>\r\n    <br>\r\n    Formatnya adalah nilai teks yang menunjukkan bagaimana angka harus dikonversi. Untuk detail selengkapnya tentang nilai format yang didukung, buka https://go.microsoft.com/fwlink/?linkid=2241210 dan https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\") untuk mengontrol perilaku <code>format</code> yang bergantung pada kultur.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi angka ke teks tanpa menentukan format.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Mengonversi angka ke format eksponensial.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Mengonversi angka ke format persentase dengan hanya satu tempat desimal.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Menghasilkan tabel feed OData yang diberikan oleh layanan OData.",
        "Documentation.LongDescription": "Menghasilkan tabel umpan OData yang ditawarkan oleh layanan OData dari uri <code>serviceUri</code>, header <code>headers</code>. Nilai boolean yang menentukan apakah akan menggunakan koneksi serentak atau parameter catatan opsional, <code>options</code>, dapat ditentukan untuk mengontrol opsi berikut:\r\n    <ul>\r\n    <li><code>Kueri</code>: Menambahkan parameter kueri secara terprogram ke URL tanpa harus khawatir tentang pelongkapan. </li>\r\n    <li> <code>Header</code>: Menentukan nilai ini sebagai catatan akan memberikan header tambahan ke permintaan HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Menentukan nilai ini sebagai daftar akan mengecualikan kunci header HTTP ini agar tidak menjadi bagian dari penghitungan untuk menyimpan data.</li>\r\n    <li> <code>ApiKeyName</code> : Jika situs target memiliki gagasan kunci API, parameter ini dapat digunakan untuk menentukan nama (bukan nilai) parameter kunci yang harus digunakan dalam URL. Nilai kunci yang sebenarnya diberikan dalam kredensial.</li>\r\n    <li> <code>Batas Waktu</code>: Menentukan nilai ini sebagai durasi akan mengubah batas waktu untuk permintaan HTTP. Nilai defaultnya adalah 600 detik.</li>\r\n    <li> <code>EnableBatch</code> : Logika (true/false) yang mengatur apakah akan mengizinkan pembuatan permintaan $batch OData jika MaxUriLength terlampaui (defaultnya adalah false).</li>\r\n    <li> <code>MaxUriLength</code>: Angka yang menunjukkan panjang maksimum uri yang diperbolehkan untuk dikirim ke layanan OData. Jika terlampaui dan EnableBatch benar, permintaan akan dibuat ke titik akhir $batch OData, jika tidak, permintaan akan gagal (defaultnya adalah 2048).</li>\r\n    <li> <code>Concurrent</code> : Logika (true/false) bila diatur ke true, permintaan ke layanan akan dibuat secara serentak. Jika diatur ke false, permintaan akan dibuat secara berurutan. Jika tidak ditentukan, nilai akan ditentukan berdasarkan anotasi AsynchronousRequestsSupported layanan. Jika layanan tidak menentukan apakah AsynchronousRequestsSupported didukung, permintaan akan dibuat berurutan.</li>\r\n    <li> <code>ODataVersion</code> : Angka (3 atau 4) yang menentukan versi protokol OData yang akan digunakan untuk layanan OData ini. Jika tidak ditentukan, semua versi yang didukung akan diminta. Versi layanan akan ditentukan oleh header OData-Version yang dihasilkan oleh layanan.</li>\r\n    <li> <code>FunctionOverloads</code> : Logika (true/false) jika diatur ke true, overload impor fungsi akan dicantumkan di navigator sebagai entri terpisah, bila diatur ke false, overload impor fungsi akan dicantumkan sebagai satu fungsi gabungan di navigator. Nilai default untuk V3: false. Nilai default untuk V4: true.</li>\r\n    <li> <code>MoreColumns</code> : Logika (true/false) bila diatur ke true, akan menambahkan kolom \"Kolom Lainnya\" ke setiap umpan entitas yang berisi tipe terbuka dan tipe polimorfik. Ini akan berisi bidang yang tidak dicantumkan di tipe dasar. Jika false, bidang ini tidak ada. Default ke false.</li>\r\n    <li> <code>IncludeAnnotations</code>: Daftar nama istilah atau pola namespace yang memenuhi syarat dipisahkan dengan koma yang akan disertakan \"*\" sebagai wildcard. Secara default, tidak ada anotasi yang disertakan.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : Daftar nama istilah atau pola namespace yang memenuhi syarat yang dipisahkan dengan koma untuk disertakan di permintaan dokumen metadata \"*\" sebagai wildcard. Secara default, menyertakan anotasi yang sama seperti IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: Mengizinkan layanan OData untuk menghindari menulis nilai tertentu dalam respons. Jika diakui oleh layanan, kami akan menyimpulkan nilai tersebut dari bidang yang dihilangkan. Opsinya meliputi:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : Memungkinkan layanan OData untuk menghilangkan nilai null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementasi</code>: Menentukan implementasi konektor OData yang akan digunakan. Nilai yang valid adalah \"2.0\" atau null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Sambungkan ke layanan OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Mengembalikan hasil percobaan dalam menyimpulkan kemampuan SQL untuk driver ODBC.",
        "Documentation.LongDescription": "Mengembalikan hasil percobaan dalam menyimpulkan kemampuan SQL dengan string koneksi <code>connectionString</code> menggunakan ODBC. <code>connectionString</code> bisa berupa teks atau catatan dari pasangan nilai properti. Nilai properti dapat berupa teks maupun angka.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan kemampuan SQL yang disimpulkan untuk string koneksi.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Menghasilkan konten dokumen Parquet sebagai tabel.",
        "Documentation.LongDescription": "Menghasilkan konten dokumen Parquet sebagai tabel. Opsi meliputi:\n    <ul>\n    <li> <code>TypeMapping</code> : Nilai teks yang mengontrol pemetaan tipe default saat membaca dan menulis file. Nilai default adalah null dan mencoba mempertahankan fidelitas sebanyak mungkin ke tipe asli. Nilai \"Sql\" akan menghasilkan hasil yang paling kompatibel dengan Sql Server.</li>\n    </ul>",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Menghasilkan nilai persentase dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>percentage</code> dari yang diberikan <code>value</code>. Jika nilai yang diberikan <code>value</code> is <code>null</code>, <code>Percentage.From</code> menghasilkan <code>null</code>.  Jika nilai yang diberikan <code>value</code> adalah <code>text</code> dengan simbol persen di belakang, makan angka desimal yang dikonversi akan dihasilkan. Sebaliknya, lihat <code>Number.From</code> untuk mengonversinya ke nilai <code>value</code>. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>persentase</code> dari <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Menghasilkan bingkai rekaman data dari file RData.",
        "Documentation.LongDescription": "Menghasilkan bingkai rekaman data dari file RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Menggabungkan data dalam daftar tertentu.",
        "Documentation.LongDescription": "Menggabungkan data dalam <code>records</code> tertentu. Jika <code>records</code> berisi nilai non-data, kesalahan dihasilkan.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Membuat data gabungan dari data.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Menghasilkan jumlah bidang dalam data.",
        "Documentation.LongDescription": "Menghasilkan jumlah bidang dalam data <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah bidang dalam data.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Menghasilkan nama bidang.",
        "Documentation.LongDescription": "Menghasilkan nama bidang dalam data <code>record</code> sebagai teks.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nama bidang dalam data.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Menghasilkan daftar nilai bidang.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai bidang dalam data <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai bidang dalam data.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Membuat data dari tabel formulir {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Menghasilkan data dari tabel data <code>table</code> yang berisi nama bidang dan nama nilai <code>{[Name = name, Value = value]}</code>. Pengecualian akan dibuat jika nama bidang tidak unik.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Membuat data dari tabel dengan bentuk Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Menghasilkan daftar nilai yang berisi nilai bidang dari data input.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai yang berisi nilai bidang dari input <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Mengekstrak nilai bidang dari data.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Menghasilkan pohon sintaksis abstrak (AST) yang menunjukkan akses ke kolom dalam ekspresi baris.",
        "Documentation.LongDescription": "Menghasilkan pohon sintaksis abstrak (AST) yang menunjukkan akses ke kolom <code>columnName</code> pada baris dalam ekspresi baris.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Membuat AST yang menunjukkan akses kolom \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Menghasilkan pohon sintaksis abstrak (AST) untuk badan fungsi.",
        "Documentation.LongDescription": "<p>Menghasilkan pohon sintaks abstrak (AST) untuk isi <code>function</code>, yang dinormalisasi menjadi <i>ekspresi baris</i>:\r\n<ul>\r\n  <li>Fungsi harus berupa lambda 1 argumen.</li>\r\n  <li>Semua referensi ke parameter fungsi diganti dengan <code>RowExpression.Row</code>.</li>\r\n  <li>Semua referensi ke kolom diganti dengan <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST akan disederhanakan agar hanya berisi node jenis:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Kesalahan akan dimunculkan jika AST ekspresi baris tidak dapat dihasilkan untuk isi <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan AST untuk badan fungsi <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Membuat Tunggal dari nilai yang diberikan.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>number</code> Tunggal dari <code>value</code> tertentu. Jika <code>value</code> tertentu adalah <code>null</code>, <code>Single.From</code> menghasilkan <code>null</code>.  Jika <code>value</code> tertentu adalah <code>number</code> dalam rentang Tunggal, dihasilkan <code>value</code>, jika tidak akan dihasilkan kesalahan. Jika <code>value</code> adalah tipe lain, akan terlebih dahulu dikonversi ke <code>number</code> menggunakan <code>Number.FromText</code>.<code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan nilai <code>number</code> Tunggal <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Menghasilkan tabel data dari endpoint indeks Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Melakukan panggilan ke Smartsheet 2.0 REST API pada endpoint yang ditentukan dan mengubah elemen data yang dihasilkan ke tabel.",
        "Documentation.Examples": [
          {
            "Description": "Menarik tabel informasi pengguna dari API Smartsheet",
            "Code": "Smartsheet.Content(\"pengguna\")",
            "Result": "Tabel dengan informasi pengguna yang dihasilkan oleh API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada salah satu pembatas yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada salah satu pembatas yang ditetapkan.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input dengan koma atau titik koma, dan mengabaikan tanda kutip dan pembatas berkutip, dan mulai dari awal input.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Memisahkan input dengan koma atau titik koma, dengan mengabaikan tanda kutip dan pembatas berkutip, dan mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar menurut pembatas yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar menurut pembatas yang ditetapkan.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input dengan koma, dan mengabaikan koma yang dikutip.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada setiap pembatas yang ditetapkan dalam sekuensi.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada setiap pembatas yang ditetapkan dalam sekuensi.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memiisahkan input dengan koma, lalu titik koma, mulai dari awal input.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Memisahkan input dengan koma, lalu titik koma, memperlakukan tanda petik seperti karakter lain dan mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks dengan setiap panjang yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks dengan setiap panjang yang ditetapkan.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input menjadi dua karakter pertama yang diikuti dengan tiga karakter berikutnya, mulai dari awal input.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Memisahkan input menjadi dua karakter pertama yang diikuti dengan dua karakter berikutnya, mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada setiap posisi yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks pada setiap posisi yang ditetapkan.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input pada posisi yang ditentukan, mulai dari awal input.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Memisahkan input pada posisi yang ditentukan, mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks menurut offset dan panjang yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang memisahkan teks menjadi daftar teks sesuai dengan offset dan panjang yang ditentukan. Panjang null menunjukkan bahwa semua input yang tersisa harus disertakan.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input dengan posisi dan pasangan panjang yang ditentukan, mulai dari awal input. Perhatikan bahwa rentang dalam contoh ini tumpang tindih.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Memisahkan input dengan posisi dan pasangan panjang yang ditentukan, mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Pisahkan input menjadi kode pos panjang tetap diikuti dengan nama kota dengan panjang variabel.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Menghasilkan fungsi yang membagi teks menjadi daftar teks dengan panjang yang ditetapkan berulang kali.",
        "Documentation.LongDescription": "Menghasilkan fungsi yang membagi teks menjadi daftar teks dengan panjang yang ditetapkan berulang kali.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Memisahkan input secara berulang menjadi beberapa potongan tiga karakter, mulai dari awal input.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Memisahkan input secara berulang menjadi beberapa potongan tiga karakter, mulai dari akhir input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Menghasilkan jumlah perkiraan baris dalam tabel.",
        "Documentation.LongDescription": "Menghasilkan perkiraan jumlah baris di <code>table</code>, atau kesalahan jika sumber data tidak mendukung perkiraan.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Perkirakan jumlah kombinasi kota dan negara bagian yang berbeda dalam tabel besar, yang dapat digunakan sebagai perkiraan kardinalitas untuk kolom. Perkiraan kardinalitas begitu penting hingga berbagai sumber data (seperti SQL Server) mendukung perkiraan ini, sering menggunakan algoritma yang disebut HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Menghasilkan jumlah kolom dalam tabel.",
        "Documentation.LongDescription": "Menghasilkan jumlah kolom dalam tabel <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah kolom dalam tabel.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Menghasilkan nama kolom sebagai daftar.",
        "Documentation.LongDescription": "Menghasilkan nama kolom dalam tabel <code>table</code> sebagai daftar teks.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari nama kolom pada tabel.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Menghasilkan baris pertama atau nilai default yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan baris pertama dalam <code>table</code> atau nilai default opsional, <code>default</code>, jika tabel kosong.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris pertama dalam tabel.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Mencari baris pertama dalam tabel <code>({})</code> atau menghasilkan [a = 0, b = 0] jika kosong.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Menghasilkan kolom pertama dari baris pertama tabel atau nilai default yang ditentukan.",
        "Documentation.LongDescription": "Menghasilkan kolom pertama dari baris pertama tabel <code>table</code> atau nilai default yang ditentukan.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Menunjukkan apakah tabel berisi hanya baris berbeda (tidak ada duplikat).",
        "Documentation.LongDescription": "Menunjukkan apakah <code>table</code> berisi hanya baris berbeda (tidak ada duplikat). Menghasilkan <code>true</code> jika baris berbeda, <code>false</code> jika sebaliknya.\r\n    Parameter opsional, <code>comparisonCriteria</code>, menetapkan kolom yang akan diuji untuk duplikasi. Jika <code>comparisonCriteria</code> tidak ditetapkan, semua kolom akan diuji.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tabel berbeda.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Menentukan apakah tabel berbeda dalam kolom.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Menunjukkan apakah tabel berisi baris.",
        "Documentation.LongDescription": "Menunjukkan apakah <code>table</code> berisi baris. Menghasilkan <code>true</code> jika tidak ada baris (misalnya, tabel kosong), <code>false</code> jika sebaliknya.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Menentukan apakah tabel kosong.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Menentukan apakah tabel <code>({})</code> kosong.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Menghasilkan kunci tabel yang telah ditentukan.",
        "Documentation.LongDescription": "Menghasilkan kunci tabel yang telah ditentukan.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dapatkan daftar kunci untuk tabel.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Menghasilkan baris terakhir atau nilai default yang ditetapkan.",
        "Documentation.LongDescription": "Menghasilkan baris terakhir dalam <code>table</code> atau nilai default opsional, <code>default</code>, jika tabel kosong.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Mencari baris terakhir dalam tabel.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Mencari baris terakhir dalam tabel <code>({})</code> atau menghasilkan [a = 0, b = 0] jika kosong.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Menghasilkan jumlah baris dalam tabel.",
        "Documentation.LongDescription": "Menghasilkan jumlah baris dalam <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah baris dalam tabel.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Menghasilkan satu baris dalam tabel.",
        "Documentation.LongDescription": "Menghasilkan satu baris dalam <code>table</code> satu baris. Jika <code>table</code> memiliki lebih dari satu baris, pengecualian akan dibuat.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan baris tunggal dalam tabel.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Membuat daftar berisi daftar bersarang untuk nilai kolom dari tabel.",
        "Documentation.LongDescription": "Membuat daftar berisi daftar bersarang dari tabel, <code>table</code>.  Setiap item daftar adalah daftar dalam yang berisi nilai kolom.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar nilai kolom dari tabel.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Mengkonversi tabel menjadi daftar dengan menerapkan fungsi kombinasi yang ditetapkan pada setiap baris nilai dalam tabel.",
        "Documentation.LongDescription": "Mengkonversi tabel menjadi daftar dengan menerapkan fungsi kombinasi yang ditetapkan pada setiap baris nilai dalam tabel.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Kombinasikan teks dari baris dengan koma.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Mengkonversi tabel menjadi daftar data.",
        "Documentation.LongDescription": "Mengkonversi tabel, <code>table</code>, menjadi daftar data.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi tabel menjadi daftar data.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Membuat daftar berisi daftar bersarang untuk nilai baris dari tabel.",
        "Documentation.LongDescription": "Membuat daftar berisi daftar bersarang dari tabel, <code>table</code>.  Setiap item daftar adalah daftar dalam yang berisi nilai baris.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar nilai baris dari tabel.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Membuat catatan kesalahan termodifikasi yang tidak akan memicu fallback saat dimunculkan oleh handler yang ditentukan pada tampilan (melalui Table.View).",
        "Documentation.LongDescription": "Membuat catatan kesalahan termodifikasi dari <code>errorRecord</code> yang tidak akan memicu fallback saat dimunculkan oleh handler yang ditentukan pada tampilan (melalui Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Membuat fungsi yang dapat dicegat oleh handler yang ditentukan pada tampilan (melalui Table.View).",
        "Documentation.LongDescription": "<p>Membuat fungsi tampilan berdasarkan <code>function</code> yang dapat ditangani dalam tampilan yang dibuat oleh <code>Table.View</code>.</p>\r\n<p>Handler <code>OnInvoke</code> dari <code>Table.View</code> dapat digunakan untuk menentukan handler untuk fungsi tampilan.</p>\r\n<p>Seperti halnya handler untuk operasi bawaan, jika tidak ada handler <code>OnInvoke</code> yang ditentukan, atau jika tidak menangani fungsi tampilan, atau jika kesalahan dimunculkan oleh handler, <code>function</code> diterapkan di atas tampilan.</p>\r\n<p>Lihat dokumentasi konektor kustom Power Query yang diterbitkan untuk deskripsi yang lebih lengkap tentang <code>Table.View</code> dan fungsi tampilan kustom.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Menghasilkan nilai teks dengan menghapus semua karakter kontrol.",
        "Documentation.LongDescription": "Menghasilkan sebuah nilai teks dengan menghapus semua karakter kontrol <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus umpan baris dan karakter kontrol lainnya dari nilai teks.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Menggabungkan daftar nilai teks ke satu nilai teks.",
        "Documentation.LongDescription": "Mengembalikan hasil dari menggabungkan daftar nilai teks, <code>texts</code>, menjadi nilai teks tunggal. Setiap nilai <code>null</code> yang ada di <code>texts</code> diabaikan.\r \n    <code>separator</code> opsional yang digunakan dalam teks gabungan akhir dapat ditentukan.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengkombinasikan nilai teks \"Seattle\" dan \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Menggabungkan nilai teks \"Seattle\" dan \"WA\", dipisahkan oleh koma dan spasi.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Gabungkan nilai \"Seattle\", <code></code> null, dan \"WA\", dipisahkan dengan koma dan spasi. (Perhatikan bahwa <code>null</code> diabaikan.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Membuat nilai teks dari nilai tertentu.",
        "Documentation.LongDescription": "Mengembalikan representasi teks <code>value</code>. <code>value</code> dapat berupa nilai <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code>, atau <code>binary</code>.\r\n    Jika nilai yang diberikan null, <code>Text.From</code> akan menghasilkan null. <code>culture</code> opsional juga dapat diberikan. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Membuat nilai teks dari angka 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Mengkodekan data dari format biner ke teks.",
        "Documentation.LongDescription": "Mengkodekan data, <code>binary</code>, dari nilai biner ke nilai teks, menggunakan tipe <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Menyimpulkan tipe bilangan granular (int64. Type, Double.Type, dan seterusnya) dari angka yang dikodekan dalam teks",
        "Documentation.LongDescription": "Menyimpulkan jenis angka granular (Int64.Type, Double.Type, dan seterusnya) dari <code>text</code>. Kesalahan dimunculkan jika<code>text</code> bukan angka. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Menghasilkan jumlah karakter.",
        "Documentation.LongDescription": "Menghasilkan jumlah karakter pada teks <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Mencari jumlah karakter pada teks \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Mengkonversi semua karakter ke huruf kecil.",
        "Documentation.LongDescription": "Mengembalikan hasil dari mengonversi semua karakter dalam <code>text</code> ke huruf kecil. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil versi huruf kecil dari \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Mengkapitalisasi huruf pertama setiap kata.",
        "Documentation.LongDescription": "Memberikan hasil kapitalisasi hanya huruf pertama setiap kata pada nilai teks <code>text</code>. Semua huruf lainnya dalam huruf kecil. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menggunakan <code>Text.Proper</code> pada kalimat sederhana.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Membalik <code>text</code> yang diberikan.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Membalik teks \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Mengkodekan teks ke format biner.",
        "Documentation.LongDescription": "Mengkodekan nilai teks tertentu, <code>text</code>, ke nilai biner menggunakan <code>encoding</code> yang ditetapkan.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Menghasilkan daftar nilai karakter dari nilai teks tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar nilai karakter dari nilai teks tertentu <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Membuat daftar nilai karakter dari teks \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Menghapus semua spasi depan dan belakang.",
        "Documentation.LongDescription": "Memberikan hasil penghapusan semua spasi depan dan belakang dari nilai teks <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus spasi depan dan belakang dari \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Menghapus semua spasi belakang.",
        "Documentation.LongDescription": "Memberikan hasil penghapusan semua spasi belakang dari nilai teks <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus spasi belakang dari \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Menghapus semua spasi depan.",
        "Documentation.LongDescription": "Memberikan hasil penghapusan semua spasi depan dari nilai teks <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Menghapus spasi depan dari \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Mengkonversi semua karakter ke huruf besar.",
        "Documentation.LongDescription": "Mengembalikan hasil dari mengonversi semua karakter dalam <code>text</code> huruf besar. <code>culture</code> opsional juga dapat diberikan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Mengambil versi huruf besar \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Menghasilkan akhir jam.",
        "Documentation.LongDescription": "Menghasilkan akhir jam yang ditunjukkan oleh <code>dateTime</code>, termasuk detik pecahan. Informasi zona waktu dipertahankan.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>time</code>, <code>datetime</code>, atau <code>datetimezone</code> nilai akhir jam dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Mengambil angka belakang jam untuk 5/14/2011 05:00:00 PM.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Mengambil angka belakang jam untuk 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Membuat waktu dari nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan nilai <code>time</code> dari <code>value</code> tertentu. <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").\r\nJika <code>value</code> tertentu adalah <code>null</code>, <code>Time.From</code> menghasilkan <code>null</code>. Jika <code>value</code> tertentu adalah <code>time</code>, dihasilkan <code>value</code>. Nilai tipe berikut dapat dikonversi ke nilai <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Nilai <code>time</code> dari representasi tekstual. Lihat <code>Time.FromText</code> untuk detailnya.</li>\r\n        <li><code>datetime</code>: Komponen waktu <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Komponen tanggalwaktu lokal setara dengan <code>value</code>.</li>\r\n        <li><code>number</code>: <code>time</code> setara dengan jumlah hari pecahan yang dinyatakan dengan <code>value</code>. Jika <code>value</code> negatif atau lebih besar atau setara dengan 1, akan menghasilkan kesalahan.</li>\r\n      </ul>\r\nJika <code>value</code> termasuk dalam tipe lain, akan menghasilkan kesalahan.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>0.7575</code> ke nilai <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Mengkonversi <code>#datetime(1899, 12, 30, 06, 45, 12)</code> ke nilai <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Membuat Waktu dari format Waktu lokal dan universal, serta kustom.",
        "Documentation.LongDescription": "Membuat nilai <code>time</code> dari representasi tekstual, <code>text</code>. Parameter <code>catatan</code> opsional, <code>options</code> dapat diberikan untuk menentukan properti tambahan. <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan menghasilkan penguraian waktu menggunakan upaya terbaik.</li>\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> bukan null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam <code>\"en-US\"</code> <code>\"tt\"</code> adalah <code>\"AM\" atau \"PM\"</code>, sementara di <code>\"ar-EG\"</code> <code>\"tt\"</code> adalah <code>\"ص\" or \"م\"</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja warisan, <code>options</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti jika <code>options</code><code> = [Format = null, Kultur = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi <code>\"10:12:31am\"</code> ke nilai Waktu.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Mengonversi <code>\"1012\"</code> ke dalam nilai Time.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Mengonversi <code>\"10\"</code> ke dalam nilai Time.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Menghasilkan komponen jam.",
        "Documentation.LongDescription": "Menghasilkan komponen jam dengan nilai <code>time</code>, <code>datetime</code>, atau <code>datetimezone</code> yang tersedia, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mencari jam dalam #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Menghasilkan komponen menit.",
        "Documentation.LongDescription": "Menghasilkan komponen menit dengan nilai <code>time</code>, <code>datetime</code>, atau <code>datetimezone</code> yang tersedia, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mencari menit dalam #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Menghasilkan komponen detik.",
        "Documentation.LongDescription": "Menghasilkan komponen detik dengan nilai <code>time</code>, <code>datetime</code>, atau <code>datetimezone</code> yang tersedia, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mencari nilai detik dalam nilai datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Menghasilkan awal jam.",
        "Documentation.LongDescription": "Mengembalikan awal jam yang ditunjukkan oleh <code>dateTime</code>.\r\n    <code>dateTime</code> harus berupa <code>time</code>, <code>datetime</code> atau <code>datetimezone</code> value.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Temukan awal jam untuk 10 Oktober 2011, 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Menghasilkan data berisi bagian nilai Waktu.",
        "Documentation.LongDescription": "Mengembalikan data berisi bagian nilai Waktu tertentu, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: Nilai <code>time</code> yang data pada bagiannya akan dihitung.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mengkonversi nilai <code>#time(11, 56, 2)</code> ke data berisi nilai Waktu.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Menghasilkan representasi tekstual dari nilai waktu.",
        "Documentation.LongDescription": "Menghasilkan representasi tekstual <code>time</code>. Parameter <code>catatan</code> opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. <code>culture</code> hanya digunakan untuk alur kerja lama (lihat di bawah). <code>Catatan</code> dapat berisi bidang berikut:\r\n<ul>\r\n   <li><code>Format</code>: Nilai <code>text</code> menunjukkan format yang akan digunakan. Untuk detail selengkapnya, buka https://go.microsoft.com/fwlink/?linkid=2180104 dan https://go.microsoft.com/fwlink/?linkid=2180105. Menghilangkan bidang ini atau mengisi <code>null</code> akan mengakibatkan pemformatan tanggal menggunakan default yang ditentukan oleh <code>Kultur</code></li>.\r\n   <li><code>Kultur</code>: Ketika <code>Format</code> tidak null, <code>Kultur</code> mengontrol beberapa penentu format. Misalnya, dalam<code>\"en-US\"</code> <code>\"tt\"</code> adalah <code>\"AM\" atau \"PM\"</code>, sementara dalam <code>\"ar-EG\"</code> <code>\"tt\"</code> adalah <code>\"ص\" atau \"م\"</code>. Ketika <code>Format</code> adalah <code>null</code>, <code>Kultur</code> mengontrol format default yang akan digunakan. Ketika <code>Kultur</code> adalah <code>null</code> atau dihilangkan, <code>Culture.Current</code> digunakan.</li>\r\n</ul>\r\nUntuk mendukung alur kerja lama, <code>options</code> dan <code>culture</code> juga dapat berupa nilai teks. Ini memiliki perilaku yang sama seperti <code>options</code><code> = [Format = <code>options</code>, Kultur = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Mengonversi <code>#time(01, 30, 25)</code> ke nilai <code>text</code>. <i>Output hasil dapat bervariasi tergantung nilai saat ini.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konversi menggunakan format kustom dan budaya Jerman.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konversi menggunakan format waktu standar.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Menghasilkan versi tertutup dari jenis catatan yang diberikan (atau jenis yang sama, jika sudah ditutup).",
        "Documentation.LongDescription": "Menghasilkan versi tertutup <code>record</code> <code>type</code> yang diberikan (atau jenis yang sama, jika sudah ditutup).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buat versi tertutup <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Menghasilkan faset jenis.",
        "Documentation.LongDescription": "Menghasilkan rekaman yang berisi faset <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Menghasilkan rekaman dengan nilai bidang yang diatur ke nama parameter jenis fungsi, dan nilainya diatur ke jenisnya yang terkait.",
        "Documentation.LongDescription": "Menghasilkan rekaman dengan nilai bidang yang diatur ke nama parameter <code>type</code>, dan nilainya diatur ke jenisnya yang terkait.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Temukan jenis parameter untuk fungsi <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Menghasilkan angka yang mengindikasikan jumlah minimum parameter yang diperlukan untuk meminta jenis fungsi.",
        "Documentation.LongDescription": "Menghasilkan angka yang mengindikasikan jumlah minimum parameter yang diperlukan untuk meminta input <code>type</code> fungsi.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cari jumlah parameter yang diperlukan untuk fungsi <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Menghasilkan jenis yang dihasilkan oleh jenis fungsi.",
        "Documentation.LongDescription": "Menghasilkan jenis yang dihasilkan oleh <code>type</code> fungsi.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cari jenis hasil dari <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Menghasilkan true jika jenisnya adalah jenis yang bisa memiliki nilai nol; jika tidak maka dihasilkan false.",
        "Documentation.LongDescription": "Menghasilkan <code>true</code> jika jenisnya adalah  <code>nullable</code>; jika tidak maka hasilnya <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah <code>number</code> bisa berisi nilai nol.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Tentukan apakah <code>type nullable number</code> dapat berisi nilai nol.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Menghasilkan apakah jenis rekaman terbuka atau tidak.",
        "Documentation.LongDescription": "Menghasilkan  <code>logical</code> yang mengindikasikan apakah rekaman <code>type</code> terbuka atau tidak.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Tentukan apakah rekaman <code>type [ A = number, ...]</code> terbuka.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Menghasilkan jenis item dari jenis daftar.",
        "Documentation.LongDescription": "Menghasilkan jenis item dari <code>type</code> daftar.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cari jenis item dari <code>{number}</code> daftar.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Menghasilkan jenis yang tidak dapat berisi nilai nol dari sebuah jenis.",
        "Documentation.LongDescription": "Menghasilkan jenis non <code>nullable</code> dari <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Hasilkan jenis yang tidak bisa berisi nilai nol dari <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Menghasilkan versi terbuka jenis rekaman yang diberikan (atau jenis yang sama, jika sudah terbuka).",
        "Documentation.LongDescription": "Menghasilkan versi terbuka <code>record</code> <code>type</code> yang diberikan (atau jenis yang sama, jika sudah terbuka).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buat versi terbuka dari <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Menghasilkan catatan yang menjelaskan bidang jenis rekaman dengan tiap bidang dari jenis rekaman yang dihasilkan memiliki nama dan nilai yang berkaitan.",
        "Documentation.LongDescription": "Menghasilkan rekaman yang menjelaskan bidang <code>type</code> rekaman. Tiap bidang jenis rekaman yang dihasilkan memiliki nama dan nilai yang berkaitan, dalam bentuk <code>[ Type = type, Optional = logical ]</code> rekaman.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cari nama dan nilai <code>[ A = number, optional B = any]</code> rekaman.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Menghasilkan kemungkinan daftar kunci yang kosong untuk tipe tabel tertentu.",
        "Documentation.LongDescription": "Menghasilkan daftar kunci yang mungkin kosong untuk tipe tabel yang diberikan.<br>\r\n    <br>\r\n    Setiap kunci ditentukan menggunakan rekaman dalam formulir berikut:\r\n    <ul>\r\n      <li>\r\n        <code>Kolom</code>: daftar nama kolom yang mendefinisikan kunci\r\n      </li>\r\n      <li>\r\n        <code>Utama</code>: <code>true</code> jika kuncinya adalah kunci utama tabel; jika tidak, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan informasi kunci untuk tipe tabel.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Menampilkan tipe baris dari tipe tabel.",
        "Documentation.LongDescription": "Menampilkan tipe baris dari tipe tabel yang ditentukan. Hasil akan selalu berupa tipe catatan.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Menampilkan informasi jenis baris untuk tabel sederhana.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Menghasilkan gabungan daftar jenis.",
        "Documentation.LongDescription": "Mengembalikan penyatuan dari jenis dalam <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Menggabungkan data ke string kueri URI.",
        "Documentation.LongDescription": "Menggabungkan <code>query</code> data ke string kueri URI, hindari karakter jika perlu.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Enkode string kueri yang berisi beberapa karakter khusus.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Enkode karakter khusus sesuai RFC 3986.",
        "Documentation.LongDescription": "Enkode karakter khusus di <code>data</code> masukan sesuai aturan RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Enkode karakter khusus di \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Menghasilkan bagian dari URI absolut input sebagai data.",
        "Documentation.LongDescription": "Menghasilkan bagian dari input <code>absoluteUri</code> sebagai data, berisi nilai seperti Skema, Host, Port, Jalur, Kueri, Fragmen, Nama Pengguna, dan Sandi.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Mencari bagian dari URI absolut \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekodekan string persen yang dikodekan.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL Layanan Analitik Azure DevOps Anda.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Menghasilkan konten yang diunduh dari url Layanan Analitik Azure DevOps sebagai nilai biner. Fungsi ini menggunakan kredensial yang berbeda untuk organisasi yang berbeda."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Masukkan URL Layanan Analitik Azure DevOps Anda.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Menghasilkan konten yang diunduh dari url Layanan Analitik Azure DevOps sebagai nilai biner. Fungsi ini menggunakan kredensial global untuk semua organisasi yang dapat diakses."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Ekspresikan rencana kueri alternatif.",
        "Documentation.LongDescription": "Ekspresikan rencana kueri alternatif dalam ekspresi rencana kueri yang diperoleh melalui Value.Expression (Value.Optimize(...)). Tidak dimaksudkan untuk penggunaan lainnya.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Menghasilkan pohon sintaksis abstrak (AST) yang menunjukkan ekspresi nilai.",
        "Documentation.LongDescription": "Menghasilkan pohon sintaksis abstrak (AST) yang menunjukkan ekspresi nilai",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Membuat nilai bertipe kuat dari representasi tekstual.",
        "Documentation.LongDescription": "Mendekodekan nilai dari representasi tekstual, <code>text</code>, dan menginterpretasikannya sebagai nilai dengan tipe yang sesuai.\r\n    <code>Value.FromText</code> mengambil nilai teks dan menghasilkan angka, nilai logika, nilai null, nilai datetime, nilai durasi, atau nilai teks. Nilai teks kosong akan diinterpretasikan sebagai nilai null.\r\n    <code>culture</code> opsional juga dapat disediakan (misalnya, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Menghasilkan data berisi metadata input.",
        "Documentation.LongDescription": "Menghasilkan data berisi metadata input.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Sinyal Value.Expression untuk menghasilkan ekspresi yang dioptimalkan untuk sebuah nilai.",
        "Documentation.LongDescription": "Saat digunakan dalam Value.Expression, jika <code>value</code> mewakili kueri yang dapat dioptimalkan, fungsi ini menunjukkan bahwa ekspresi yang dioptimalkan harus dikembalikan. Jika tidak, <code>value</code> akan diteruskan tanpa efek.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Menstrip input metadata.",
        "Documentation.LongDescription": "Menstrip input metadata.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Menghasilkan tipe nilai tertentu.",
        "Documentation.LongDescription": "Menghasilkan tipe nilai tertentu.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.LongDescription": "Fungsi ini hanya dimaksudkan untuk penggunaan internal.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Menghasilkan HTML untuk URL yang ditentukan, seperti yang dilihat oleh browser web.",
        "Documentation.LongDescription": "Menghasilkan HTML untuk <code>url</code> yang ditentukan, seperti yang terlihat pada browser web. Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menetapkan properti tambahan. Catatan dapat berisi bidang berikut:\r\n     <ul>\r\n       <li><code>ApiKeyName</code>: Jika situs target memiliki konsep kunci API, parameter ini dapat digunakan untuk menentukan nama (bukan nilai) parameter kunci yang harus digunakan di URL. Nilai kunci aktual diberikan dalam kredensial.</li>\r\n        <li><code>WaitFor</code>: Menentukan kondisi untuk menunggu sebelum mengunduh HTML, selain menunggu halaman yang akan dimuat (yang selalu selesai diproses). Dapat berupa catatan yang berisi bidang Timeout dan/atau Selector. Fungsi akan menunggu selama jangka waktu yang ditetapkan sebelum mengunduh HTML hanya jika Timeout ditentukan. Jika Selector dan Timeout ditetapkan, serta Timeout telah habis sebelum Selector muncul pada halaman, kesalahan akan terjadi. Jika Selector ditetapkan tanpa Timeout, Timeout default 30 detik akan diterapkan.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Mengakses data",
        "Documentation.Examples": [
          {
            "Description": "Menghasilkan HTML untuk https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Menghasilkan HTML untuk https://microsoft.com setelah menunggu pemilih CSS muncul.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div:visible\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Menghasilkan HTML untuk https://microsoft.com setelah menunggu selama 10 detik.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Menghasilkan HTML untuk https://microsoft.com setelah menunggu selama 10 detik sampai pemilih CSS muncul.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div:visible\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Menghasilkan konten yang diunduh dari url sebagai biner.",
        "Documentation.LongDescription": "Menghasilkan konten yang diunduh dari <code>url</code> sebagai biner. Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>Query</code> : Secara terprogram menambahkan parameter kueri ke URL tanpa harus khawatir tentang pelolosan.</li>\r\n<li><code>ApiKeyName</code> : Jika situs target memiliki gagasan tentang kunci API, parameter ini dapat digunakan untuk menentukan nama (bukan nilai) parameter kunci yang harus digunakan dalam URL. Nilai kunci aktual diberikan dalam kredensial.</li>\r\n<li><code>Headers</code> : Menetapkan nilai ini sebagai catatan akan memberikan header tambahan ke permintaan HTTP.</li>\r\n<li><code>Timeout</code> : Menetapkan nilai ini sebagai durasi akan mengubah batas waktu untuk permintaan HTTP. Nilai defaultnya adalah 100 detik.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Menetapkan nilai ini sebagai daftar akan mengecualikan kunci header HTTP ini agar tidak menjadi bagian dari penghitungan data caching.</li>\r\n<li><code>IsRetry</code> : Menetapkan nilai logika ini sebagai true akan mengabaikan respons yang ada dalam cache saat mengambil data.</li>\r\n<li><code>ManualStatusHandling</code> : Menetapkan nilai ini sebagai daftar akan mencegah penanganan builtin untuk permintaan HTTP yang tanggapannya memiliki salah satu kode status ini.</li>\r\n<li><code>RelativePath</code> : Menetapkan nilai ini sebagai teks akan menambahkannya ke URL dasar sebelum membuat permintaan.</li>\r\n<li><code>Content</code> : Menetapkan nilai ini akan mengubah permintaan web dari GET menjadi POST, menggunakan nilai opsi sebagai konten POST.</li>\r\n</ul>\r\n\r\n    Permintaan HTTP dibuat sebagai GET (ketika tidak ada Konten yang ditentukan) atau POST (ketika terdapat Konten). Permintaan POST hanya dapat dibuat secara anonim.\r\n    <br>\r\n    Header respons HTTP tersedia sebagai metadata pada hasil biner. Di luar konteks konektor data kustom, hanya sebagian header respons yang tersedia (untuk alasan keamanan).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ambil konten <code>\"https://bing.com/search?q=Power+Query\"</code> menggunakan opsi RelativePath dan Query. Opsi ini dapat digunakan untuk mengkueri URL dasar statis secara dinamis.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Jalankan POST terhadap URL, meneruskan payload JSON biner dan mengurai respons sebagai JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Sambungkan ke URL aman yang menerima kunci autentikasi sebagai bagian dari string kuerinya. Daripada pengodean permanen kunci rahasia di M (yang dapat menimbulkan risiko keamanan), \r\n    kunci dapat disediakan secara aman dengan menentukan namanya (bukan nilainya) di M, memilih autentikasi API Web, dan memasukkan nilai kunci sebagai bagian dari kredensial API Web.\r\n    Saat digunakan dengan cara ini, contoh berikut akan menghasilkan permintaan untuk <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Menghasilkan header HTTP yang diunduh dari url sebagai nilai catatan.",
        "Documentation.LongDescription": "Menghasilkan header yang diunduh dari <code>url</code> sebagai catatan. Parameter catatan opsional, <code>options</code>, dapat diberikan untuk menentukan properti tambahan. Catatan dapat berisi bidang berikut:\r\n    <ul>\r\n<li><code>Query</code> : Secara terprogram menambahkan parameter kueri ke URL tanpa harus khawatir tentang pelolosan.</li>\r\n<li><code>ApiKeyName</code> : Jika situs target memiliki gagasan tentang kunci API, parameter ini dapat digunakan untuk menentukan nama (bukan nilai) parameter kunci yang harus digunakan dalam URL. Nilai kunci aktual diberikan dalam kredensial.</li>\r\n<li><code>Headers</code> : Menetapkan nilai ini sebagai catatan akan memberikan header tambahan ke permintaan HTTP.</li>\r\n<li><code>Timeout</code> : Menetapkan nilai ini sebagai durasi akan mengubah batas waktu untuk permintaan HTTP. Nilai defaultnya adalah 100 detik.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Menetapkan nilai ini sebagai daftar akan mengecualikan kunci header HTTP ini agar tidak menjadi bagian dari penghitungan data caching.</li>\r\n<li><code>IsRetry</code> : Menetapkan nilai logika ini sebagai true akan mengabaikan respons yang ada dalam cache saat mengambil data.</li>\r\n<li><code>ManualStatusHandling</code> : Menetapkan nilai ini sebagai daftar akan mencegah penanganan builtin untuk permintaan HTTP yang tanggapannya memiliki salah satu kode status ini.</li>\r\n<li><code>RelativePath</code> : Menetapkan nilai ini sebagai teks akan menambahkannya ke URL dasar sebelum membuat permintaan.</li>\r\n</ul>\r\n\r\n    Permintaan HTTP dibuat dengan metode HEAD. Di luar konteks konektor data kustom, hanya sebagian header respons yang tersedia (untuk alasan keamanan).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Ambil header HTTP untuk <code>\"https://bing.com/search?q=Power+Query\"</code> menggunakan opsi RelativePath dan Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Konteks otorisasi terhadap kondisi entri kontrol akses (ACE) dievaluasi.",
        "Documentation.LongDescription": "Konteks otorisasi terhadap kondisi entri kontrol akses (ACE) dievaluasi.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabel entri kontrol akses (ACE).",
        "Documentation.LongDescription": "Tabel berurutan dari entri akses kontrol (ACE) berisi aturan otorisasi. Setiap baris dievaluasi terhadap konteks otorisasi saat ini (dalam urutan) dan baris pertama saat ekspresi <code>Kondisi</code> yang menghasilkan true menentukan aturan yang berlaku. Kolom <code>Tindakan</code> menunjukkan jenis tindakan yang menerapkan aturan tersebut. Kolom <code>AccessControlKind</code> menentukan apakah akses harus diizinkan atau ditolak untuk tindakan tersebut.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Menetapkan jenis kontrol akses.",
        "Documentation.LongDescription": "Menetapkan jenis kontrol akses.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai biner.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai biner.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Tentukan jenis pengodean biner.",
        "Documentation.LongDescription": "Tentukan jenis pengodean biner.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Menentukan berapa kali item diharapkan muncul dalam grup.",
        "Documentation.LongDescription": "Menentukan berapa kali item diharapkan muncul dalam grup.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Menjelaskan tipe buffering yang akan dilakukan.",
        "Documentation.LongDescription": "Menjelaskan tipe buffering yang akan dilakukan.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua byte.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua byte.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Menentukan urutan byte.",
        "Documentation.LongDescription": "Menentukan urutan byte.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua karakter.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua karakter.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Menentukan jenis kompresi.",
        "Documentation.LongDescription": "Menentukan jenis kompresi.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Menentukan pentingnya tanda kutip di dokumen Csv.",
        "Documentation.LongDescription": "Menentukan pentingnya tanda kutip di dokumen Csv.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Jenis yang mewakili nilai mata uang.",
        "Documentation.LongDescription": "Jenis yang mewakili nilai mata uang.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai tanggal.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai tanggal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai tanggal dan waktu tanpa zona waktu terkait.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai tanggal dan waktu tanpa zona waktu terkait.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai tanggal dan waktu relatif terhadap zona waktu.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai tanggal dan waktu relatif terhadap zona waktu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Menentukan hari.",
        "Documentation.LongDescription": "Menentukan hari.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan desimal titik tetap.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan desimal titik tetap.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan titik mengambang presisi ganda.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan titik mengambang presisi ganda.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai durasi",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai durasi",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Menentukan tindakan yang diharapkan untuk nilai ekstra dalam baris yang berisi kolom lebih dari yang diharapkan.",
        "Documentation.LongDescription": "Menentukan tindakan yang diharapkan untuk nilai ekstra dalam baris yang berisi kolom lebih dari yang diharapkan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua fungsi.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua fungsi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Menentukan jenis pengelompokkan.",
        "Documentation.LongDescription": "Beberapa grup lokal dapat dihasilkan dengan nilai kunci yang sama, tetapi hanya satu grup global yang dihasilkan untuk nilai kunci tertentu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Jenis yang mewakili nilai Guid.",
        "Documentation.LongDescription": "Jenis yang mewakili nilai Guid.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identitas menunjukkan pengguna, grup, perangkat, atau hal lain yang dapat diidentifikasi.",
        "Documentation.LongDescription": "Identitas menunjukkan pengguna, grup, perangkat, atau hal lain yang dapat diidentifikasi.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Menentukan lingkup tempat identitas dibuat dan dibandingkan.",
        "Documentation.LongDescription": "Menentukan lingkup tempat identitas dibuat dan dibandingkan.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan bulat 16 bit yang ditandatangani.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan bulat 16 bit yang ditandatangani.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan bulat 32 bit yang ditandatangani.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan bulat 32 bit yang ditandatangani.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan bulat 64 bit yang ditandatangani.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan bulat 64 bit yang ditandatangani.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan bulat 8 bit yang ditandatangani.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan bulat 8 bit yang ditandatangani.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Menentukan algoritme gabungan yang dapat digunakan dalam operasi penggabungan.",
        "Documentation.LongDescription": "Menentukan algoritme gabungan yang dapat digunakan dalam operasi penggabungan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Menentukan jenis operasi penggabungan.",
        "Documentation.LongDescription": "Menentukan jenis operasi penggabungan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Menentukan tabel kanan atau kiri penggabungan.",
        "Documentation.LongDescription": "Menentukan tabel kanan atau kiri penggabungan.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Mendeskripsikan tipe klausa batas yang didukung oleh dialek SQL yang digunakan sumber data ini.",
        "Documentation.LongDescription": "Mendeskripsikan tipe klausa batas yang didukung oleh dialek SQL yang digunakan sumber data ini.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua daftar.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua daftar.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai logika.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai logika.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Menentukan tindakan yang diharapkan untuk nilai yang tidak ada dalam baris yang berisi kolom yang kurang dari yang diharapkan.",
        "Documentation.LongDescription": "Menentukan tindakan yang diharapkan untuk nilai yang tidak ada dalam baris yang berisi kolom yang kurang dari yang diharapkan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tipe yang menunjukkan null.",
        "Documentation.LongDescription": "Tipe yang menunjukkan null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua angka.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua angka.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Menetapkan jenis nilai yang dapat diabaikan oleh layanan OData.",
        "Documentation.LongDescription": "Menetapkan jenis nilai yang dapat diabaikan oleh layanan OData.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Menentukan kemunculan elemen dalam urutan.",
        "Documentation.LongDescription": "Menentukan kemunculan elemen dalam urutan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Menentukan arah pengurutan.",
        "Documentation.LongDescription": "Menentukan arah pengurutan.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Jenis yang mewakili kata sandi teks.",
        "Documentation.LongDescription": "Jenis yang mewakili kata sandi teks.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Jenis ini yang mewakili nilai persentase.",
        "Documentation.LongDescription": "Jenis ini yang mewakili nilai persentase.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Menetapkan tipe mode persentil.",
        "Documentation.LongDescription": "Menetapkan tipe mode persentil.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Menentukan keakuratan perbandingan.",
        "Documentation.LongDescription": "Menentukan keakuratan perbandingan.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Menentukan gaya kuota.",
        "Documentation.LongDescription": "Menentukan gaya kuota.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Menentukan tipe pemeringkatan.",
        "Documentation.LongDescription": "Menentukan tipe pemeringkatan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua data.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua data.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Mengindikasikan apakah pengindeksan harus diselesaikan di awal atau akhir input.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Menentukan arah pembulatan saat tidak ada ikatan antara angka yang mungkin untuk dibulatkan.",
        "Documentation.LongDescription": "Menentukan arah pembulatan saat tidak ada ikatan antara angka yang mungkin untuk dibulatkan.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opsi yang valid untuk opsi mode eksekusi SAP Business Warehouse.",
        "Documentation.LongDescription": "Opsi yang valid untuk opsi mode eksekusi SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opsi yang valid untuk opsi distribusi SAP HANA.",
        "Documentation.LongDescription": "Opsi yang valid untuk opsi distribusi SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operator rentang untuk parameter masukan rentang SAP HANA.",
        "Documentation.LongDescription": "Operator rentang untuk parameter masukan rentang SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Jenis yang mewakili bilangan titik ambang presisi tunggal.",
        "Documentation.LongDescription": "Jenis yang mewakili bilangan titik ambang presisi tunggal.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokol yang akan digunakan saat terhubung dengan instansi Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua tabel.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua tabel.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai teks.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai teks.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Menentukan jenis pengodean teks.",
        "Documentation.LongDescription": "Menentukan jenis pengodean teks.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua nilai waktu.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua nilai waktu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Menentukan tingkat pelacakan.",
        "Documentation.LongDescription": "Menentukan tingkat pelacakan.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tipe yang menunjukkan semua tipe.",
        "Documentation.LongDescription": "Tipe yang menunjukkan semua tipe.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Tipe yang mewakili URI teks.",
        "Documentation.LongDescription": "Tipe yang mewakili URI teks.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Menentukan metode HTTP.",
        "Documentation.LongDescription": "Menentukan metode HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
