{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Vráti znázornenie štruktúry databázy programu Access.",
        "Documentation.LongDescription": "Vráti znázornenie štruktúry databázy <code>database</code> programu Access. Voliteľný parameter záznamu <code>options</code> je možné zadať na ovládanie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je False).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Vráti databázy služieb Analysis Services v konkrétnom hostiteľovi.",
        "Documentation.LongDescription": "Vráti databázy v inštancii služieb Analysis Services, <code>server</code>. Možno poskytnúť voliteľný parameter záznamu, <code>options</code>, na zadanie ďalších vlastností. Záznam môže obsahovať tieto polia:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Logick&#225; hodnota určuj&#250;ca, či sa pre typy pridan&#253;ch stĺpcov s mierkami použij&#250; typy zadan&#233; v multidimenzion&#225;lnom alebo tabuľkovom modeli. Pri nastaven&#237; na hodnotu false sa pre všetky stĺpce s mierkami bude použ&#237;vať typ number. Predvolen&#225; hodnota nastaven&#225; pre t&#250;to možnosť je false.</li>\r\n<li><code>Culture</code> : N&#225;zov kult&#250;ry určuj&#250;ci kult&#250;ru pre &#250;daje. Zodpoved&#225; to vlastnosti reťazca pripojenia Locale Identifier.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>SubQueries</code> : Č&#237;slo (0, 1 alebo 2) určuj&#250;ce hodnotu vlastnosti SubQueries v reťazci pripojenia. Riadi sa t&#253;m spr&#225;vanie vypoč&#237;tan&#253;ch členov pri podv&#253;beroch alebo podkock&#225;ch. (Predvolen&#225; hodnota je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Kocky AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Importovať údaje kocky /DirectQuery z funkcie AtScale.",
        "Documentation.LongDescription": "\r\nVráti údaje kocky z funkcie AtScale na serveri <code>server</code>. Môže sa zadať voliteľný parameter záznamu, <code>options</code>, pomocou ktorého sa dajú ovládať nasledujúce možnosti:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: Logická hodnota, ktorá udáva, či sa typy zadané v multidimenzionálnom alebo tabuľkovom modeli použijú pre typy stĺpcov pridaných mierok. Keď sú nastavené na hodnotu false, pre všetky stĺpce mierok sa použije typ number. Predvolenou hodnotou pre túto možnosť je false.</li>\r\n        <li><code>CommandTimeout</code>: Trvanie (v sekundách), ktoré ovláda, ako dlho môže byť spustený dotaz na strane servera pred tým, ako to bude zrušený. Predvolená hodnota závisí od ovládača.</li>\r\n        <li><code>ConnectionTimeout</code>: Trvanie (v sekundách), ktoré ovláda, ako dlho treba čakať pred tým, ako sa zruší pokus o pripojenie na server. Predvolená hodnota závisí od ovládača. </li>\r\n\r\n</ul>\r\nParameter záznamu je zadaný vo formáte [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Zobrazí zoznam údajov kocky v kocke AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje údaje z Azure Data Explorera (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje údaje z vašej inštancie Azure Data Explorera (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s informáciami o udalostiach Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabuľka s udalosťami Storm z databázy Samples v klastri Help"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu svojej služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS. AccountContents",
        "Documentation.Name": "VSTS. AccountContents",
        "Documentation.LongDescription": "Vráti obsah stiahnutý z URL adresy služby Azure DevOps Analytics Service ako binárnu hodnotu. Táto funkcia využíva rôzne prihlasovacie údaje pre rôzne organizácie."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Informačný kanál služby Azure DevOps Services",
        "Documentation.DisplayName": "Informačný kanál služby Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vráti tabuľku informačných kanálov OData ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Zadajte URL adresu koncového bodu rozhrania Azure Enterprise REST API, ktorý je priradený k vašej registrácii.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Vráti zoznam zostáv a mesiacov, ktoré sú k dispozícii z rozhrania Azure Enterprise API",
        "Documentation.Name": "Import údajov zo služby Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Použitie funkcie AzureEnterprise.Tables a prechod na konkrétnu hodnotu na získanie výsledkov.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabuľka"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Ukážky úvodných dotazov nájdete na https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s výsledkami dotazu na zdroje dotazu používateľa",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Zobrazte zoznam tabuliek v inštancii riešenia Azure Spark.",
        "Documentation.LongDescription": "Zobrazte zoznam tabuliek v inštancii riešenia Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Zobrazte zoznam tabuliek v inštancii riešenia Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Vráti navigačnú tabuľku obsahujúcu kontajnery nachádzajúce sa v zadanom konte z trezora ukladacieho priestoru platformy Azure.",
        "Documentation.LongDescription": "Vráti navigačnú tabuľku obsahujúcu riadok pre každý kontajner nachádzajúci sa na URL adrese konta <code>account</code> z trezora Azure Storage. Každý riadok obsahuje prepojenie na objekty BLOB kontajnera. Môžete určiť <code>options</code> na ovládanie týchto možností:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtov, ktor&#233; sa maj&#250; č&#237;tať pri čakan&#237; na spotrebiteľa &#250;dajov. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtov v r&#225;mci pokusu o č&#237;tanie jednej žiadosti HTTP na server. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnosť ConcurrentRequests podporuje r&#253;chlejšie sťahovanie &#250;dajov zadan&#237;m počtu žiadost&#237;, ktor&#233; sa maj&#250; vykonať paralelne, č&#237;m sa využije naplno pam&#228;ť. Vyžaduje sa pam&#228;ť (ConcurrentRequest * RequestSize). Predvolen&#225; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Vráti navigačnú tabuľku obsahujúcu dokumenty nájdené v zadanom kontajneri a jeho podpriečinkoch v službe Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vráti navigačnú tabuľku obsahujúcu dokumenty nájdené v zadanom kontajneri a jeho podpriečinkoch na URL adrese konta <code>endpoint</code> v systéme súborov služby Azure Data Lake Storage. Môžete určiť <code>options</code> na ovládanie týchto možností:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtov, ktor&#233; sa maj&#250; č&#237;tať pri čakan&#237; na spotrebiteľa &#250;dajov. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtov v r&#225;mci pokusu o č&#237;tanie jednej žiadosti HTTP na server. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnosť ConcurrentRequests podporuje r&#253;chlejšie sťahovanie &#250;dajov zadan&#237;m počtu žiadost&#237;, ktor&#233; sa maj&#250; vykonať paralelne, č&#237;m sa využije naplno pam&#228;ť. Vyžaduje sa pam&#228;ť (ConcurrentRequest * RequestSize). Predvolen&#225; hodnota je 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa s&#250;bory vr&#225;tia v stromovom zobrazen&#237; adres&#225;ra alebo v jednoduchom zozname. Predvolen&#225; hodnota je false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Vráti navigačnú tabuľku obsahujúcu tabuľky nachádzajúce sa v zadanom konte z trezora úložiska platformy Azure.",
        "Documentation.LongDescription": "Vráti navigačnú tabuľku obsahujúcu riadok pre každú tabuľku nachádzajúcu sa na URL adrese konta <code>account</code> z trezora úložiska Azure. Každý riadok obsahuje prepojenie na tabuľku služby Azure. Ak chcete zadať ďalšie vlastnosti, použite voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať tieto polia:\r\n    <ul>\r\n<li><code>Timeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m žiadosti odoslanej na server. Predvolen&#225; hodnota je viazan&#225; na zdroj.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight v službe AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Táto funkcia nie je k dispozícii, pretože vyžaduje .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (staršia verzia)",
        "Documentation.Caption": "Common Data Service (staršia verzia)",
        "Documentation.LongDescription": "Pripojenie k inštancii služby Common Data Service (Dynamics 365 a PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Vráti obsah dokumentu CSV ako tabuľku.",
        "Documentation.LongDescription": "Vráti obsah CSV dokumentu ako tabuľku.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> môže mať hodnotu null, môže byť počtom stĺpcov, zoznamom názvov stĺpcov, typom tabuľky alebo záznamom možností.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> môže byť samostatným znakom, zoznamom znakov alebo hodnotou <code>\"\"</code>, ktorá označuje, že riadky by sa mali rozdeliť po sebe idúcimi prázdnymi znakmi. Predvolená možnosť: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        V tabuľke <code>ExtraValues.Type</code> nájdete podporované hodnoty pre parameter <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> určuje typ kódovania textu.\r\n      </li>\r\n    </ul>\r\n\r\n    Ak je pre parameter <code>columns</code> určený záznam (a parametre <code>delimiter</code>, <code>extraValues</code> a <code>encoding</code> majú hodnotu null), môžu sa poskytnúť tieto polia záznamu:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: oddeľovač stĺpcov. Predvolená hodnota: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: môže mať hodnotu null, môže byť počtom stĺpcov, zoznamom názvov stĺpcov alebo typom tabuľky. Ak je počet stĺpcov nižší ako hodnota na vstupe, ďalšie stĺpce sa ignorujú. Ak je počet stĺpcov vyšší ako hodnota na vstupe, pre ďalšie stĺpce sa nastaví hodnota null. Ak počet stĺpcov nie je zadaný, určí ho hodnota zadaná na vstupe.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: kódovanie textu v súbore. Predvolené: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: určuje, ako sa budú používať úvodzovky.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (predvolené): úvodzovky v poli sú dôležité len v prípade, ak nasledujú hneď za oddeľovačom.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: úvodzovky v poli sú vždy dôležité bez ohľadu na to, kde sa nachádzajú.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: určuje spôsob spracovania zlomov riadkov v úvodzovkách.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.None</code> (predvolené): všetky zlomy riadka sa považujú za koniec aktuálneho riadka, aj keď sa vyskytujú v hodnote v úvodzovkách.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code>: zlomy riadka v úvodzovkách sa považujú za súčasť údajov, nie za koniec aktuálneho riadka.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Spracujte text CSV s hlavičkami stĺpcov",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Vráti tabuľku obsahujúcu množinu dostupných dimenzií.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu množinu dostupných dimenzií v rámci kocky <code>cube</code>. Každá dimenzia je tabuľka obsahujúca množinu atribútov dimenzií a každý atribút dimenzie je znázornený ako stĺpec v tabuľke dimenzií. Dimenzie možno v kocke rozbaliť pomocou funkcie Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Vráti vnorený strom tabuliek, znázorňujúc hierarchiu zobrazovaného priečinka objektov (napríklad dimenzie a mierky).",
        "Documentation.LongDescription": "Vráti vnorený strom tabuliek, znázorňujúc hierarchiu zobrazovaného priečinka objektov (napríklad dimenzie a mierky) dostupných na použitie v kocke <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Vráti tabuľku, ktorá obsahuje množinu dostupných vlastností mierky, ktoré sú rozložené v kocke.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá obsahuje množinu dostupných vlastností pre miery, ktoré sú rozbalené v kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Vráti tabuľku obsahujúcu množinu dostupných mierok.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu množinu dostupných mierok v rámci kocky <code>cube</code>.\r\n    Každá mierka je znázornená ako funkcia. Mierky možno v kocke použiť pomocou funkcie Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Vráti tabuľku obsahujúcu množinu parametrov, ktoré možno použiť na kocku.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu množinu parametrov, ktoré možno použiť na <code>cube</code>. Každý parameter je funkcia, ktorú možno vyvolať na získanie <code>cube</code> s parametrom a argumentmi, ktoré sú naň použité.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Vráti tabuľku, ktorá obsahuje množinu dostupných vlastností pre dimenzie, ktoré sú rozbalené v kocke.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá obsahuje množinu dostupných vlastností pre dimenzie, ktoré sú rozbalené v kocke.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Zadajte URL adresu svojho konta Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý priečinok a súbor nájdený na <code>URL</code> adrese zo služby Azure Data Lake Storage Gen1. Každý riadok obsahuje vlastnosti priečinka alebo súboru a prepojenie na jeho obsah."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Zadajte URL adresu svojho konta Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý súbor nájdený na <code>URL</code> adrese zo služby Azure Data Lake Storage Gen1. Každý riadok obsahuje vlastnosti súboru a prepojenie na jeho obsah."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Zadajte URL adresu konta Azure Cosmos DB.",
        "Documentation.LongDescription": "Vráti tabuľku databáz Azure Cosmos DB na <code>url</code> adrese. Ak je zadaná hodnota <code>database</code>, vráti sa tabuľka kolekcií. Ak je navyše zadané pole <code>Query</code> v zázname <code>options</code>, vrátia sa výsledky dotazu vykonaného v zadanej databáze alebo kolekcii."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu koncového bodu služby OData pre Dynamics 365 Business Central (lokálna verzia).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (lokálna verzia)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (lokálna verzia)",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi z Dynamicsu 365 Business Central (lokálna verzia). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu koncového bodu služby OData pre Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi zo služby Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "V inštancii Essbase vráti kocky zoskupené podľa servera Essbase.",
        "Documentation.LongDescription": "Z inštancie Essbase na serveri APS <code>url</code> vráti tabuľku kociek zoskupených podľa servera Essbase. Môže sa zadať voliteľný parameter záznamu <code>options</code>, ktorý bude riadiť tieto možnosti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Vráti obsah excelového zošita.",
        "Documentation.LongDescription": "Vráti obsah excelového zošita. \r\n    <ul>\r\n     <li> <code>useHeaders</code> môže mať hodnotu null, logickú hodnotu (true/false), ktorá označuje, či sa má prvý riadok každej vrátenej tabuľky považovať za hlavičku alebo záznam možností. Predvolená hodnota: False. </li>\r\n     <li> <code>delayTypes</code> môže mať hodnotu null alebo logickú hodnotu (true/false) označujúcu, či majú stĺpce každej vrátenej tabuľky ostať netypové. Predvolená hodnota: False. </li>\r\n    </ul>\r\n\r\n    Ak je záznam zadaný pre <code>useHeaders</code> (a <code>delayTypes</code> má hodnotu null), môžu sa poskytnúť nasledujúce polia záznamu: \r\n    <ul>\r\n     <li> <code>UseHeaders</code>: Môže mať hodnotu null alebo logickú hodnotu (true/false) označujúcu, či sa má prvý riadok každej vrátenej tabuľky považovať za hlavičku. Predvolená hodnota: False. </li>\r\n     <li> <code>DelayTypes</code>: Môže mať hodnotu null alebo logickú hodnotu (true/false) označujúcu, či majú stĺpce každej vrátenej tabuľky zostať netypové. Predvolená hodnota: False. </li>\r\n     <li> <code>InferSheetDimensions</code>: Môže mať hodnotu null alebo logickú hodnotu (true/false) označujúcu, či sa má oblasť hárka, ktorá obsahuje údaje, odvodiť čítaním samotného hárka, a nie čítaním metaúdajov dimenzií zo súboru. Môže to byť užitočné v prípadoch, keď sú metaúdaje dimenzií nesprávne. Táto možnosť je podporovaná len pre excelové súbory vo formáte Open XML, nie pre staršie excelové súbory. Predvolená hodnota: False. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vráti zo zošita aplikácie Excel obsah hárka 1.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Vráti tabuľku obsahujúcu vlastnosti a obsah súborov a priečinkov nachádzajúcich sa v zadanom priečinku.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý priečinok a súbor nachádzajúci sa v priečinku <code>path</code>. Každý riadok obsahuje vlastnosti príslušného priečinka alebo súboru a prepojenie na jeho obsah. Parameter <code>options</code> je momentálne určený len na interné použitie.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Vráti tabuľku obsahujúcu vlastnosti a obsah súborov nachádzajúcich sa v zadanom priečinku a podpriečinkoch.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý súbor nachádzajúci sa v priečinku <code>path</code> a všetkých jeho podpriečinkoch. Každý riadok obsahuje vlastnosti príslušného súboru a prepojenie na jeho obsah. Parameter <code>options</code> je momentálne určený len na interné použitie.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Umožní importovať údaje z databázy Google BigQuery pomocou Azure AD",
        "Documentation.LongDescription": "\r\n      Vráti tabuľku so zoznamom projektov dostupných na platforme Google BigQuery pomocou služby Azure AD pre <code>ID fakturačného projektu</code>. Môže sa zadať voliteľný parameter záznamu <code>options</code>, ktorým sa ovládajú tieto možnosti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Časový interval, ktorý ovláda, ako dlho treba čakať pred ukončením pokusu o vytvorenie pripojenia k serveru. Predvolenou hodnotou je hodnota časového limitu pripojenia ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Časový interval, ktorý ovláda, ako dlho môže byť spustený dotaz na strane servera predtým, ako sa zruší.</li>\r\n        <li><code>UseStorageApi</code>: Určuje, či sa má pre veľké množiny výsledkov použiť rozhranie BigQuery Storage API. Predvolenou hodnotou pri použití rozhrania Storage API je True. Ak sa rozhranie Storage API nemá použiť, nastavte hodnotu False</li>\r\n        <li><code>AudienceURi</code>: Toto je identifikátor URI cieľovej skupiny, ktorý môže ovládač ODBC použiť na požiadavky o výmenu tokenov. Toto pole musí byť plne kvalifikovaný identifikátor URI (t.j. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), kde pool_id je globálne jedinečný názov na identifikáciu fondu pracovníkov. </li>\r\n      </ul>\r\n    Parameter záznamu sa zadáva vo formáte [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Zoznam dostupných projektov v platforme Google BigQuery pomocou Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Tabuľky Google",
        "Documentation.Caption": "Tabuľky Google",
        "Documentation.Description": "Údaje importov z tabuliek Google",
        "Documentation.LongDescription": "Údaje importov z tabuliek Google"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Vráti navigačnú tabuľku obsahujúcu kontajnery nachádzajúce sa v zadanom konte z trezora ukladacieho priestoru platformy Azure.",
        "Documentation.LongDescription": "Vráti navigačnú tabuľku obsahujúcu riadok pre každý kontajner nachádzajúci sa na URL adrese konta, <code>account</code>, z trezora ukladacieho priestoru platformy Azure. Každý riadok obsahuje prepojenie na objekty BLOB kontajnera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Vráti navigačnú tabuľku obsahujúcu kontajnery nachádzajúce sa v zadanom konte z trezora ukladacieho priestoru platformy Azure.",
        "Documentation.LongDescription": "Vráti navigačnú tabuľku obsahujúcu riadok pre každý kontajner nachádzajúci sa na URL adrese konta, <code>account</code>, z trezora ukladacieho priestoru platformy Azure. Každý riadok obsahuje prepojenie na objekty BLOB kontajnera.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Vráti tabuľku obsahujúcu vlastnosti a obsah súborov a priečinkov nachádzajúcich sa v zadanom priečinku zo systému súborov servera Hadoop.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý priečinok a súbor nachádzajúci sa na adrese URL priečinka <code>url</code> zo systému súborov servera Hadoop. Každý riadok obsahuje vlastnosti príslušného priečinka alebo súboru a prepojenie na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Vráti tabuľku obsahujúcu vlastnosti a obsah súborov nachádzajúcich sa v zadanom priečinku a podpriečinkoch zo systému súborov servera Hadoop.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý súbor nachádzajúci sa na adrese URL priečinka <code>url</code> a v podpriečinkoch zo systému súborov servera Hadoop. Každý riadok obsahuje vlastnosti súboru a prepojenie na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Import údajov z klastra Impala",
        "Documentation.LongDescription": "Import údajov z klastra Impala <code>č. {0}</code>. Ak nebol zadaný žiaden port, použije sa predvolený port 21050.",
        "Documentation.Examples": [
          {
            "Description": "Zobrazenie zoznamu tabuliek v klastri Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importuje údaje z Azure Data Explorera (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importuje údaje z vašej inštancie Azure Data Explorera (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s informáciami o udalostiach Storm",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabuľka s udalosťami Storm z databázy Samples v klastri Help"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s údajmi z koncového bodu služby MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Uskutoční volanie do rozhrania API služby MailChimp a vráti výslednú množinu údajov ako tabuľku. Automaticky sa bude prechádzať stranami so všetkými výsledkami. V koncových bodoch rozhrania API, keď sa koreňový koncový bod a hlavný parameter entityName v odpovedi JSON nezhodujú, je možné použiť voliteľný parameter entityName.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne tabuľku s údajmi z koncového bodu zoznamov rozhrania API služby MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Tabuľka s údajmi zo zoznamu."
          },
          {
            "Description": "Stiahne tabuľku s údajmi z koncového bodu priečinkov kampaní rozhrania API služby MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Tabuľka s údajmi z priečinkov kampaní."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Vráti výsledky s nespracovanými odpoveďami z koncového bodu rozhrania API služby MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Uskutoční volanie do rozhrania API služby MailChimp a vráti nespracovanú odpoveď.",
        "Documentation.Examples": [
          {
            "Description": "Vráti nespracované údaje zistené metódou reports/click-details použitou v koncovom bode rozhrania API služby MailChimp pre určitú kampaň.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Nespracované údaje zistené metódou click details z určitej kampane."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Poskytuje rozšírené funkcie dotazu.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Poskytuje rozšírené funkcie dotazu.",
        "Documentation.Examples": [
          {
            "Description": "Načíta údaje o súhrnoch medzi 1. 5. 2017 a 15. 6. 2017 za predpokladu, že dnes je 15. 6. 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje o súhrnoch medzi 1. 5. 2017 a 15. 6. 2017"
          },
          {
            "Description": "Načíta údaje o súhrnoch z apríla 2017 za predpokladu, že dnes je 15. 6. 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 4. 2017 a 30. 4. 2017"
          },
          {
            "Description": "Načíta údaje o súhrnoch od apríla 2017 až po dnešok za predpokladu, že dnes je 15. 6. 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 4. 2017 a 15. 6. 2017"
          },
          {
            "Description": "Načíta údaje o súhrnoch od decembra predchádzajúceho roku až po február tohto roku za predpokladu, že dnes je 15. 6. 2017 ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 12. 2016 a 28. 2. 2017"
          },
          {
            "Description": "Načíta poplatky na Marketplace za posledných 18 mesiacov za predpokladu, že dnes je 15. 6. 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 12. 2015 a 15. 6. 2017"
          },
          {
            "Description": "Načíta podrobné poplatky za máj 2017 a jún 2017 za predpokladu, že dnes je 15. 6. 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 5. 2017 a 15. 6. 2017"
          },
          {
            "Description": "Načíta podrobné poplatky za júl 2016 za predpokladu, že dnes je 03.07.2017",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 01.07.2016 a 31.07.2016"
          },
          {
            "Description": "Načíta súhrny zostatkov za posledných 10 mesiacov a 13 dní z tohto mesiaca za predpokladu, že dnes je 13. 7. 2017",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcia vráti údaje medzi 1. 9. 2016 a 13. 7. 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Vráti tabuľku SQL tabuliek a zobrazení zo zdroja údajov ODBC. ",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení zo zdroja údajov ODBC zadaného reťazcom pripojenia <code>connectionString</code>. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť číselné alebo textové. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota je 15 sek&#250;nd.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľky a zobrazenia SQL zo zadaného reťazca pripojenia.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Vráti tabuľku SQL tabuliek a zobrazení zo zdroja údajov OLE DB.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení zo zdroja údajov OLE DB zadaného reťazcom pripojenia <code>connectionString</code>. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť číselné alebo textové. Voliteľný parameter záznamu <code>options</code> je možné poskytnúť na špecifikovanie ďalších vlastností. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (true/false), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je false).</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [možnosť1 = hodnota1, možnosť2 = hodnota2...] alebo [Dotaz = \"select ...\" ].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek a zobrazení SQL z Oracle Databasy.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení z Oracle Databasy na serveri <code>server</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Vráti všetky tabuľky nájdené v PDF súbore.",
        "Documentation.LongDescription": "Vráti všetky tabuľky, ktoré sa našli v umiestnení <code>pdf</code>. Môžete zadať voliteľný parameter záznamu, <code>options</code>, ktorý slúži na zadanie ďalších vlastností. Záznam môže obsahovať tieto polia:\r\n    <ul>\r\n<li><code>Implementation</code> : Verzia algoritmu, ktor&#225; sa m&#225; použiť pri identifik&#225;cii tabuliek. Star&#233; verzie s&#250; k dispoz&#237;cii iba na sp&#228;tn&#250; kompatibilitu, aby sa predišlo znefunkčneniu starš&#237;ch dotazov pri aktualiz&#225;cii algoritmov. Najnovšia verzia by mala vždy poskytovať najlepšie v&#253;sledky. Platn&#233; hodnoty s&#250; 1.3, 1.2, 1.1 alebo null.</li>\r\n<li><code>StartPage</code> : Určuje prv&#250; stranu v rozsahu str&#225;n určen&#253;ch na presk&#250;manie. Predvolen&#225; hodnota: 1.</li>\r\n<li><code>EndPage</code> : Určuje posledn&#250; stranu v rozsahu str&#225;n určen&#253;ch na presk&#250;manie. Predvolen&#225; hodnota: posledn&#225; strana dokumentu.</li>\r\n<li><code>MultiPageTables</code> : Určuje, či sa podobn&#233; tabuľky na po sebe id&#250;cich stran&#225;ch automaticky skombinuj&#250; do jednej tabuľky. Predvolen&#225; hodnota: true.</li>\r\n<li><code>EnforceBorderLines</code> : Určuje, či s&#250; čiary or&#225;movania vždy vyn&#250;ten&#233; ako ohraničenia buniek (v pr&#237;pade hodnoty true) alebo sa jednoducho použili ako jeden z viacer&#253;ch tipov pri určen&#237; ohraničenia buniek (v pr&#237;pade hodnoty false). Predvolen&#225; hodnota: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľky nachádzajúce sa v dokumente sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu svojho konta Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Vráti tabuľku s príslušnými údajmi služby Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þŷťħōл §ςřīþτ",
        "Documentation.Description": "Σ×єĉúţеŝ Ρŷťĥōп śćřïþт ăńδ řēтϋřņ§ ðąŧα ƒřªмэš",
        "Documentation.Examples": {
          "Description": "Σ×єĉúţеŝ Ρŷťĥōп śćřïþт ăńδ řēтϋřņ§ ðąŧα ƒřªмэš",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ŕ šсгϊрţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Vráti tabuľku, pričom každý riadok tvorí názov poľa a hodnota vstupného záznamu.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu stĺpce <code>Name</code> a <code>Value</code> s riadkom pre každé pole v časti <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku zo záznamu.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Vráti balíky v databáze SAP HANA.",
        "Documentation.LongDescription": "Vráti tabuľku viacrozmerných balíkov z databázy SAP HANA <code>server</code>. Voliteľný parameter záznamu <code>options</code> možno určiť na ovládanie týchto možností:\r\n    <ul>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>Distribution</code> : Možnosť distrib&#250;cie pre SAP HANA určuj&#250;ca hodnotu vlastnosti Distrib&#250;cia v reťazci pripojenia. Smerovanie pr&#237;kazu je met&#243;da určenia spr&#225;vneho serverov&#233;ho uzla distribuovan&#233;ho syst&#233;mu pred vykonan&#237;m pr&#237;kazu. Predvolen&#225; hodnota je SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Určuje implement&#225;ciu konektora SAP HANA, ktor&#253; sa m&#225; použ&#237;vať.</li>\r\n<li><code>EnableColumnBinding</code> : Pri nač&#237;tavan&#237; &#250;dajov naviaže premenn&#233; na stĺpce množiny v&#253;sledkov SAP Hana. M&#244;že potenci&#225;lne zlepšiť v&#253;kon za cenu mierne vyššieho využitia pam&#228;te. Predvolen&#225; hodnota je false.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota je 15 sek&#250;nd.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Vráti tabuľku obsahujúcu obsah z lokality SharePoint.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý priečinok a dokument nachádzajúci sa na zadanej lokalite SharePoint <code>url</code>. Každý riadok obsahuje vlastnosti príslušného priečinka alebo súboru a prepojenie na jeho obsah. Môže sa zadať <code>options</code> na kontrolu týchto možností:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 alebo 15) alebo text Auto, ktor&#253; určuje verziu rozhrania API SharePointu na použitie s touto lokalitou. Ak nie je zadan&#233;, použije sa verzia API s č&#237;slom 14. Keď zad&#225;te možnosť Automaticky, automaticky sa zist&#237; verzia servera (ak je to možn&#233;), v opačnom pr&#237;pade sa verzia predvolene nastav&#237; na č&#237;slo 14. Lokality SharePoint, ktor&#233; nie s&#250; v angličtine, vyžaduj&#250; najmenej verziu 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Vráti tabuľku obsahujúcu dokumenty z lokality SharePoint.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý dokument nachádzajúci sa na zadanej lokalite SharePoint <code>url</code> a podpriečinky. Každý riadok obsahuje vlastnosti príslušného priečinka alebo súboru a prepojenie na jeho obsah. Môže sa zadať <code>options</code> na kontrolu týchto možností:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 alebo 15) alebo text Auto, ktor&#253; určuje verziu rozhrania API SharePointu na použitie s touto lokalitou. Ak nie je zadan&#233;, použije sa verzia API s č&#237;slom 14. Keď zad&#225;te možnosť Automaticky, automaticky sa zist&#237; verzia servera (ak je to možn&#233;), v opačnom pr&#237;pade sa verzia predvolene nastav&#237; na č&#237;slo 14. Lokality SharePoint, ktor&#233; nie s&#250; v angličtine, vyžaduj&#250; najmenej verziu 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Vráti tabuľku obsahujúcu obsah zo zoznamu SharePointu.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každú položku zoznamu nachádzajúcu sa v zadanom zozname SharePoint <code>url</code>. Každý riadok obsahuje vlastnosti príslušného zoznamu. Môže sa zadať <code>options</code> na kontrolu týchto možností:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Č&#237;slo (14 alebo 15) alebo text Auto, ktor&#253; určuje verziu rozhrania API SharePointu na použitie s touto lokalitou. Ak nie je zadan&#233;, použije sa verzia API s č&#237;slom 14. Keď zad&#225;te možnosť Automaticky, automaticky sa zist&#237; verzia servera (ak je to možn&#233;), v opačnom pr&#237;pade sa verzia predvolene nastav&#237; na č&#237;slo 14. Lokality SharePoint, ktor&#233; nie s&#250; v angličtine, vyžaduj&#250; najmenej verziu 15.</li>\r\n<li><code>Implementation</code> : Voliteľn&#233;. Určuje, ktor&#225; verzia konektora služby SharePoint sa m&#225; použiť. Prijateľn&#233; hodnoty s&#250; 2.0 alebo null. Ak je hodnota 2.0, použije sa implement&#225;cia konektora služby SharePoint vo verzii 2.0. Ak je hodnota null, použije sa p&#244;vodn&#225; implement&#225;cia konektora služby SharePoint.</li>\r\n<li><code>ViewMode</code> : Voliteľn&#233;. T&#225;to možnosť plat&#237; len pre implement&#225;ciu 2.0. Prijateľn&#233; hodnoty s&#250; Všetky a Predvolen&#233;. Ak nie je uveden&#225; žiadna hodnota, nastav&#237; sa hodnota Všetky. Ak je zadan&#225; hodnota Všetky, zobrazenie obsahuje všetky stĺpce vytvoren&#233; použ&#237;vateľom a stĺpce definovan&#233; syst&#233;mom. Keď je zadan&#225; hodnota Predvolen&#233;, zobrazenie bude zodpovedať tomu, čo použ&#237;vateľ vid&#237; pri prezeran&#237; zoznamu online v tom zobrazen&#237;, ktor&#233; použ&#237;vateľ nastavil ako predvolen&#233; vo svojich nastaveniach. Ak použ&#237;vateľ uprav&#237; svoje predvolen&#233; zobrazenie tak, že prid&#225; alebo odstr&#225;ni stĺpce vytvoren&#233; použ&#237;vateľom alebo definovan&#233; syst&#233;mom, alebo vytvor&#237; nov&#233; zobrazenie a nastav&#237; ho ako predvolen&#233;, tieto zmeny sa premietnu do konektora.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Zabraňuje konektoru použ&#237;vať samostatn&#253; koncov&#253; bod pre stĺpce pozn&#225;mok.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Vráti tabuľku z obsahu na konkrétnej adrese URL formátovanej podľa rozhrania SODA 2.0 API.",
        "Documentation.LongDescription": "Vráti tabuľku z obsahu na konkrétnej adrese URL <code>url</code> formátovanej podľa rozhrania SODA 2.0 API. Adresa URL musí odkazovať na platný zdroj kompatibilný s rozhraním SODA, ktorý končí na príponu .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Túto funkciu možno použiť na volanie ktoréhokoľvek z koncových bodov List poskytovaných v rozhraní SparkPost API v1. Pri volaní rozhrania SparkPost API pomocou tejto funkcie majte na pamäti, že rozhranie SparkPost API má prísne obmedzený počet volaní rozhrania API. Ak vidíte, že server SparkPost vráti kód stavu 429, znamená to, že ste dosiahli limit počtu volaní a pred ďalším volaním budete musieť chvíľu počkať.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s jedným stĺpcom naplnenou údajmi z jedného z koncových bodov List rozhrania SparkPost API v1 (podrobnosti nájdete v dokumentácii SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Umožňuje načítanie vstavaných tabuliek zverejnených konektorom SparkPost s údajmi agregovanými za počet dní, ktoré zadal používateľ. Pri obnovovaní týchto tabuliek alebo volaní rozhrania SparkPost API pomocou tohto konektora majte na pamäti, že rozhranie SparkPost API má prísne obmedzený počet volaní rozhrania API. Ak vidíte, že server SparkPost vráti kód stavu 429, znamená to, že ste dosiahli limit počtu volaní a pred ďalším volaním budete musieť chvíľu počkať. Pri výbere hodnoty pre parameter Počet dní nezabudnite, že toto rozhranie API ukladá údaje iba za posledných 6 mesiacov."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Vráti tabuľku databáz na serveri SQL Server.",
        "Documentation.LongDescription": "Vráti tabuľku databáz na stanovenom SQL Serveri <code>server</code>. Voliteľný parameter záznamu <code>options</code> je možné zadať na ovládanie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Č&#237;slo, ktor&#233; nastavuje hodnotu klauzuly dotazu maxdop v generovanom dotaze SQL.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n<li><code>MultiSubnetFailover</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje hodnotu vlastnosti MultiSubnetFailover v reťazci pripojenia (predvolen&#225; hodnota je False).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logick&#225; hodnota (true/false), ktor&#225; sp&#244;sob&#237;, že v pr&#237;pade nadobudnutia hodnoty true d&#244;jde k pokusu o posunutie konverzie typu, ktor&#253; m&#244;že zlyhať a sp&#244;sobiť zlyhanie cel&#233;ho dotazu. Neodpor&#250;ča sa na všeobecn&#233; použitie.</li>\r\n<li><code>ContextInfo</code> : Bin&#225;rna hodnota, ktor&#225; sa použ&#237;va na nastavenie možnosti CONTEXT_INFO pred spusten&#237;m každ&#233;ho pr&#237;kazu.</li>\r\n<li><code>OmitSRID</code> : Logick&#225; hodnota (true/false), ktor&#225; v pr&#237;pade true vynech&#225; identifik&#225;tor SRID, keď sa z geometrick&#253;ch a geografick&#253;ch typov &#250;dajov vytv&#225;ra Well-Known Text.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logick&#225; hodnota (true/false), ktor&#225; v pr&#237;pade hodnoty true umožňuje postupn&#233; pos&#250;vanie dotazov naprieč datab&#225;zami na rovnakom serveri. Predvolen&#225; hodnota je false.</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...].\r\n    <br>\r\n    Nepodporuje nastavenie dotazu SQL na spúšťanie na serveri. Na spustenie dotazu SQL by sa namiesto toho mala použiť funkcia <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Uskutočňovanie volania do rozhrania Stripe API s možnosťou obmedziť počet uskutočnených volaní do rozhrania API.",
        "Documentation.LongDescription": "Uskutočňovanie volania do rozhrania Stripe API na adrese https://api.stripe.com/v1/<code>method</code> s voliteľným záznamom <code>query</code>, ktorý predstavuje dodatočné parametre, a voliteľným poľom <code>pageLimit</code>, ktoré limituje počet požiadaviek rozhrania API. Ako prvé sa vrátia najnovšie údaje. Ak v poli <code>pageLimit</code> nie je zadaná žiadna hodnota, vrátia sa všetky údaje. Používa sa Stripe verzie 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vráti všetky údaje o poplatkoch",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabuľka so všetkými údajmi o poplatkoch v aktuálnom konte Stripe"
          },
          {
            "Description": "Vráti jednu stránku s údajmi o poplatkoch",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabuľka s poslednými zmenami údajov v aktuálnom konte Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Uloží tabuľku do medzipamäte, pričom ju izoluje od externých zmien počas hodnotenia.",
        "Documentation.LongDescription": "Uloží tabuľku do medzipamäte, pričom ju izoluje od externých zmien počas hodnotenia.\r\nUloženie je medzipamäte je plytké. Vynúti vyhodnotenie všetkých skalárnych hodnôt buniek, ale ponechá neskalárne hodnoty (záznamy, zoznamy, tabuľky atď.) tak, ako sú.\r\n    <br>\r\n    <br>\r\n    Upozorňujeme, že použitie tieto funkcie môže alebo nemusí mať za následok rýchlejšie spúšťanie dotazov. V niektorých prípadoch môžu vaše dotazy bežať pomalšie z dôvodu zvýšenia \r\n    nákladov na čítanie všetkých údajov a ich ukladanie do pamäte a tiež z dôvodu, že ukladanie do medzipamäte zabraňuje následnému posúvaniu. Ak sa údaje nemusia\r\n    ukladať do medzipamäte, ale chcete iba zabrániť následnému posúvaniu, použite namiesto toho <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Načíta všetky riadky tabuľky SQL do pamäte, aby žiadne následné operácie nemohli dotazovať SQL server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Vráti tabuľku, ktorá je výsledkom zlúčenia zoznamu tabuliek.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá je výsledkom zlúčenia zoznamu tabuliek <code>tables</code>. Výsledná tabuľka bude mať štruktúru typov riadkov definovanú funkciou <code>columns</code> alebo spojením vstupných typov, ak možnosť <code>columns</code> nie je zadaná.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Zlúčte dané tri tabuľky.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Zlúči tri tabuľky s rôznymi štruktúrami.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Zlúči dve tabuľky a projekt použitím zadaného typu.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Zníži úroveň hlavičiek stĺpcov na prvý riadok hodnôt.",
        "Documentation.LongDescription": "Zníži úroveň hlavičiek stĺpcov (t. j. názvy stĺpcov) na prvý riadok hodnôt. Predvolené názvy stĺpcov sú \"Column1\", \"Column2\" atď.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Znížte úroveň prvého riadka hodnôt v tabuľke.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Odstráni duplicitné riadky z tabuľky.",
        "Documentation.LongDescription": "Odstráni z tabuľky duplicitné riadky.\r\n    Nepovinný parameter, <code>equationCriteria</code>, určuje, ktoré stĺpce tabuľky sú testované na duplikáty. Ak <code>equationCriteria</code> neurčíte, testujú sa všetky stĺpce.<br>\r\n    <br>\r\n    Keďže Power Query niekedy presmerováva určité operácie do zdrojových údajov na serveri (označované ako „posúvanie“) a tiež niekedy optimalizuje dotazy \r\n    preskakovaním operácií, ktoré nie sú vyslovene nutné, všeobecne neexistuje žiadna záruka, ktorý konkrétny duplikát sa zachová.\r\n    Nemôžete napríklad predpokladať, že prvý riadok s jedinečnou množinou hodnôt stĺpca zostane a riadky v tabuľke nižšie budú odstránené.\r\n    Ak chcete, aby sa odstraňovanie duplikátov správalo predvídateľne, najprv tabuľku uložte do medzipamäte pomocou príkazu <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte z tabuľky duplicitné riadky.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Odstráňte duplicitné riadky zo stĺpca [b] v tabuľke <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Vytvorí tabuľku zo zoznamu stĺpcov a zadaných hodnôt.",
        "Documentation.LongDescription": "Vytvorí tabuľku typu <code>columns</code> zo zoznamu <code>lists</code> obsahujúcu vnorené zoznamy s názvami stĺpcov a hodnotami.\r\n    Ak majú niektoré stĺpce viac hodnôt ako ostatné, chýbajúce hodnoty sa vyplnia predvolenou hodnotou, prípadne hodnotou null, ak majú stĺpce povolenú hodnotou null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku zo zoznamu mien zákazníkov v zozname. Každá hodnota v položke zoznamu zákazníkov sa stane hodnotou riadka a každý zoznam sa stane stĺpcom.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvorte tabuľku z daného zoznamu stĺpcov a zoznam názvov stĺpcov.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvorte tabuľku s odlišnými počtami stĺpcov v riadkoch. Chýbajúca hodnota riadka je null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Konvertuje zoznam na tabuľku použitím zadanej funkcie rozdelenia na každú položku v zozname.",
        "Documentation.LongDescription": "Konvertuje zoznam <code>list</code> na tabuľku použitím voliteľnej funkcie rozdelenia <code>splitter</code> na každú položku v zozname. V predvolenom nastavení sa predpokladá, že ide o zoznam textových hodnôt rozdelený čiarkami. Voliteľným parametrom <code>columns</code> môže byť počet stĺpcov, zoznam stĺpcov alebo typ TableType. Možno stanoviť aj voliteľné parametre <code>default</code> a <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvoriť tabuľku zo zoznamu pomocou predvoleného rozdeľovača.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Vytvoriť tabuľku zo zoznamu pomocou vlastného rozdeľovača.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Vytvorenie tabuľky zo zoznamu pomocou rozdeľovača Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Konvertuje zoznam záznamov na tabuľku.",
        "Documentation.LongDescription": "Konvertuje zoznam záznamov <code>records</code> na tabuľku.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte tabuľku zo záznamov, pričom použite názvy polí v záznamoch ako názvy stĺpcov.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Vytvorte tabuľku zo záznamov so zadanými stĺpcami a vyberte počet stĺpcov.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Vytvorí tabuľku zo zoznamu hodnôt riadka a voliteľných stĺpcov",
        "Documentation.LongDescription": "Vytvorí tabuľku zo zoznamu <code>rows</code>, kde každý prvok zoznamu je vnútorným zoznamom, ktorý obsahuje hodnoty stĺpca pre jeden riadok. Ako argument  <code>columns</code> možno zadať voliteľný zoznam názvov stĺpcov, typ tabuľky alebo počet stĺpcov.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku so stĺpcom [CustomerID] s hodnotami {1, 2}, stĺpcom [Name] s hodnotami {\"Bob\", \"Jim\"} a stĺpcom [Phone] s hodnotami {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vráťte tabuľku so stĺpcom [CustomerID] s hodnotami {1, 2}, stĺpcom [Name] s hodnotami {\"Bob\", \"Jim\"} a stĺpcom [Phone] s hodnotami {\"123-4567\", \"987-6543\"}, kde [CustomerID] je typ čísla a [Name] a [Phone] sú typy textu.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Vytvorí tabuľku so stĺpcom zo zadaných hodnôt.",
        "Documentation.LongDescription": "Vytvorí tabuľku so stĺpcom obsahujúcim zadanú hodnotu alebo zoznam hodnôt <code>value</code>. Voliteľný parameter záznamu, <code>options</code>, je možné zadať na ovládanie nasledujúcich možností:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: názov stĺpca používaný pri vytváraní tabuľky zo zoznamu alebo skalárnej hodnoty.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte tabuľku z hodnoty 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Vytvorte tabuľku zo zoznamu.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Vytvorenie tabuľky z hodnoty 1 s vlastným názvom stĺpca.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Vráti informácie o spôsobe rozdelenia tabuľky.",
        "Documentation.LongDescription": "Vráti informácie o spôsobe rozdelenia tabuľky.  Vráti sa tabuľka, v ktorej každý stĺpec je stĺpcom oblasti v pôvodnej tabuľke a každý riadok zodpovedá oblasti v pôvodnej tabuľke.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Vráti profil stĺpcov tabuľky.",
        "Documentation.LongDescription": "<p>Vráti profil pre stĺpce v tabuľke <code>table</code>.</p>\r\n<p>Pre každý stĺpec sa vrátia nasledujúce informácie (podľa vhodnosti):\r\n<ul>\r\n  <li>minimum</li>\r\n  <li>maximum</li>\r\n  <li>priemer</li>\r\n  <li>štandardná odchýlka</li>\r\n  <li>počet</li>\r\n  <li>počet hodnôt typu null</li>\r\n  <li>počet jedinečných hodnôt</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Zvýši úroveň prvého riadka hodnôt ako nové hlavičky stĺpcov (t. j. názvy stĺpcov).",
        "Documentation.LongDescription": "Zvýši úroveň prvého riadka hodnôt ako nové hlavičky stĺpcov (t. j. názvy stĺpcov). V predvolenom nastavení sa na hlavičky zvýši iba úroveň textu alebo číselných hodnôt. Platné možnosti:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: pri nastavení na hodnotu <code>true</code> sa na hlavičky zvýši úroveň všetkých skalárnych hodnôt v prvom riadku s použitím hodnoty <code>Culture</code>, ak je zadaná (alebo aktuálneho miestneho nastavenia dokumentu).\r\n    Pre hodnoty, ktoré nie je možné skonvertovať na text, sa použije predvolený názov stĺpca.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: názov jazykovej verzie určujúci jazykovú verziu údajov.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zvýšte úroveň prvého riadka hodnôt v tabuľke.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Zvýši úroveň všetkých skalárnych hodnôt v prvom riadku tabuľky na hlavičky.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Vráti tabuľku s vynechaným počtom prvých riadkov.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá neobsahuje zadaný počet prvých riadkov <code>countOrCondition</code> tabuľky <code>table</code>.\r\n    Počet odstránených riadkov závisí od voliteľného parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ak sa parameter <code>countOrCondition</code> vynechá, odstráni sa iba prvý riadok. </li>\r\n    <li> Ak <code>countOrCondition</code> je číslo, odstráni sa taký počet riadkov (počnúc navrchu). </li>\r\n    <li> Ak <code>countOrCondition</code> je podmienka, odstránia sa riadky spĺňajúce túto podmienku, až kým niektorý riadok podmienku nesplní.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte prvý riadok tabuľky.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstráňte prvé dva riadky tabuľky.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstráňte prvé riadky tabuľky, kde [CustomerID] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Vráti tabuľku s poslednými N odstránenými riadkami.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá neobsahuje počet posledných riadkov <code>countOrCondition</code> tabuľky <code>table</code>.\r\n        Počet odstránených riadkov závisí od voliteľného parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ak sa parameter <code>countOrCondition</code> vynechá, odstráni sa iba posledný riadok. </li>\r\n    <li> Ak <code>countOrCondition</code> je číslo, odstráni sa taký počet riadkov (počnúc odspodu). </li>\r\n    <li> Ak <code>countOrCondition</code> je podmienka, odstránia sa riadky spĺňajúce túto podmienku, až kým niektorý riadok podmienku nesplní.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte posledný riadok tabuľky.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Odstráňte posledné riadky tabuľky, kde [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Vráti tabuľku s riadkami odstránenými zo vstupnej tabuľky, ktoré obsahujú chybu aspoň v jednej z buniek. Ak je zadaný zoznam stĺpcov, výskyt chýb sa skontroluje iba v bunkách v zadaných stĺpcoch.",
        "Documentation.LongDescription": "Vráti tabuľku s riadkami odstránenými zo vstupnej tabuľky, ktoré obsahujú chybu aspoň v jednej z buniek. Ak je zadaný zoznam stĺpcov, výskyt chýb sa skontroluje iba v bunkách v zadaných stĺpcoch.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte chybnú hodnotu z prvého riadka.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Vráti tabuľku s riadkami v opačnom poradí.",
        "Documentation.LongDescription": "Vráti tabuľku s riadkami zo vstupu <code>table</code> v opačnom poradí.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Obráťte riadky v tabuľke.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Vráti tabuľku obsahujúcu popis stĺpcov (t. j. schému) určenej tabuľky.",
        "Documentation.LongDescription": "<p>Vráti tabuľku s popisom stĺpcov tabuľky <code>table</code>.</p>\r\n<p>Každý riadok v tabuľke popisuje vlastnosti stĺpca tabuľky <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Názov stĺpca</b></td>\r\n    <td><b>Popis</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Názov stĺpca.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Poloha v stĺpci <code>table</code> založená na nule.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Názov typu stĺpca.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Druh typu stĺpca.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Či stĺpec môže obsahovať hodnoty typu <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Číselný základ (napr. dvojkový, desiatkový) polí <code>NumericPrecision</code> a <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Presnosť číselného stĺpca v základe určenom v stĺpci <code>NumericPrecisionBase</code>. Maximálny počet číslic, ktorý možno vyjadriť hodnotou tohto typu (vrátane zlomkových číslic).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Rozsah číselného stĺpca v základe určenom stĺpcom <code>NumericPrecisionBase</code>. Počet číslic v zlomkovej časti hodnoty tohto typu. Hodnota <code>0</code> označuje pevný rozsah bez zlomkových číslic. Hodnota <code>null</code> označuje, že rozsah nie je známy (pretože je plávajúci alebo nie je definovaný).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Maximálny počet zlomkových číslic podporovaných v sekundovej časti hodnoty dátumu a času.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Maximálny počet znakov povolených v stĺpci <code>text</code> alebo maximálny počet bajtov povolených v stĺpci <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Označuje, či tento stĺpec môže mať rôznu dĺžku (max. <code>MaxLength</code>) alebo či má pevnú veľkosť.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Názov typu stĺpca v natívnom systéme typu zdroja (napr.  <code>nvarchar</code> pre SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Predvolený výraz pre hodnotu tohto stĺpca v natívnom jazyku výrazu zdroja (napr. <code>42</code> alebo <code>newid()</code> pre SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Popis stĺpca.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Vráti tabuľku iba s tými riadkami vstupnej tabuľky, ktoré obsahujú chybu aspoň v jednej z buniek. Ak je zadaný zoznam stĺpcov, výskyt chýb sa skontroluje iba v bunkách v zadaných stĺpcoch.",
        "Documentation.LongDescription": "Vráti tabuľku iba s tými riadkami vstupnej tabuľky, ktoré obsahujú chybu aspoň v jednej z buniek. Ak je zadaný zoznam stĺpcov, výskyt chýb sa skontroluje iba v bunkách v zadaných stĺpcoch.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vyberte mená zákazníkov s chybami v ich riadkoch.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Vráti tabuľku s vynechaným počtom prvých riadkov.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá neobsahuje zadaný počet prvých riadkov <code>countOrCondition</code> tabuľky <code>table</code>.\r\n    Počet vynechaných riadkov závisí od voliteľného parametra <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Ak sa parameter <code>countOrCondition</code> vynechá, vynechá sa iba prvý riadok. </li>\r\n    <li> Ak <code>countOrCondition</code> je číslo, vynechá sa taký počet riadkov (počnúc navrchu). </li>\r\n    <li> Ak <code>countOrCondition</code> je podmienka, vynechajú sa riadky spĺňajúce túto podmienku, až kým niektorý riadok podmienku nesplní.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vynechajte prvý riadok tabuľky.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vynechajte prvé dva riadky tabuľky.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vynechajte prvé riadky tabuľky, kde [Price] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Zabraňuje spusteniu všetkých následných operácií v pôvodnom zdroji údajov.",
        "Documentation.LongDescription": "Zabraňuje spusteniu všetkých následných operácií v pôvodnom zdroji údajov v <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Načíta údaje z tabuľky SQL spôsobom, ktorý zabraňuje spusteniu všetkých následných operácií ako dotazu na SQL serveri.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Zo stĺpcov urobí riadky a z riadkov urobí stĺpce.",
        "Documentation.LongDescription": "Zo stĺpcov urobí riadky a z riadkov urobí stĺpce.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Urobte stĺpce z riadkov tabuľky párov názov-hodnota.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Získa vzťahy v rámci množiny tabuliek.",
        "Documentation.LongDescription": "Získa vzťahy v rámci množiny tabuliek. Predpokladá sa, že množina <code>tables</code> má podobnú štruktúru ako navigačná tabuľka. Stĺpec definovaný položkou <code>dataColumn</code> obsahuje skutočné tabuľky údajov.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek a zobrazení SQL z databázy Teradata.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení z databázy Teradata na serveri <code>server</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Zadajte počet mesiacov, za ktoré sa majú načítať historické údaje služby Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi služby Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Vráti tabuľku s popisom stĺpcov (napr. schému) zadaného typu tabuľky.",
        "Documentation.LongDescription": "<p>Vráti tabuľku s popisom stĺpcov tabuľky <code>tableType</code>.</p>\r\n<p>Popis výslednej tabuľky nájdete v dokumentácii pre <code>Table.Schema</code>.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Informačný kanál služby Azure DevOps Services",
        "Documentation.DisplayName": "Informačný kanál služby Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Vráti tabuľku informačných kanálov OData ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Pripojenie k údajom v službe Viva Prehľady",
        "Documentation.LongDescription": "Importujte týždenné metriky a údaje atribútov zo služby Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s viditeľnými atribútmi a týždennými metrikami pre každého meraného zamestnanca v danej oblasti.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Vráti obsah dokumentu HTML rozdelený do základných štruktúr, ako aj vyjadrenie úplného dokumentu a jeho textu po odstránení značiek.",
        "Documentation.LongDescription": "Vráti obsah dokumentu HTML rozdelený do základných štruktúr, ako aj vyjadrenie úplného dokumentu a jeho textu po odstránení značiek.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s kľúčovou metrikou zo služby Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Uskutoční volanie do koncového bodu kľúčovej metriky služby Webtrends a vráti všetky údaje ako tabuľku.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne tabuľku s kľúčovou metrikou pre nájomníka 98765 za posledných 30 dní",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabuľka s kľúčovou metrikou"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Zadajte ID profilu priradené k vášmu kontu Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi zo služby Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Pripojenie k údajom v službe Viva Prehľady",
        "Documentation.LongDescription": "Importujte týždenné metriky a údaje atribútov zo služby Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s viditeľnými atribútmi a týždennými metrikami pre každého meraného zamestnanca v danej oblasti.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Vráti obsah dokumentu XML ako hierarchickú tabuľku.",
        "Documentation.LongDescription": "Vráti obsah dokumentu XML ako hierarchickú tabuľku.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Vráti obsah dokumentu XML ako vnorenú kolekciu tabuliek so zjednodušenou štruktúrou.",
        "Documentation.LongDescription": "Vráti obsah dokumentu XML ako vnorenú kolekciu tabuliek so zjednodušenou štruktúrou.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Načítajte obsah lokálneho súboru xml.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu konta Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi zo služby Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Vráti kolekciu schémy pre zdroj údajov ADO.NET.",
        "Documentation.LongDescription": "Vráti kolekciu schémy pre zdroj údajov ADO.NET s názvom poskytovateľa <code>providerName</code> a reťazcom pripojenia <code>connectionString</code>. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť číselné alebo textové. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Naimportuje údaje z databázy služby Amazon Redshift.",
        "Documentation.LongDescription": "Vráti tabuľku s tabuľkami na serveri <code>server</code> klastra služby Amazon Redshift v databáze <code>database</code>.  Možno zadať voliteľný parameter záznamu <code>options</code> na ovládanie týchto možností:\r\n<ul>\r\n<li><code>Provider Name</code>: Textová hodnota, ktorá sa použije ako názov poskytovateľa na pripojenie. Toto sa použije, keď používate Microsoft Authentication.</li>\r\n<li><code>Batch Size</code>: Počet riadkov načítaných v rámci jedného volania servera.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Vráti tabuľku multidimenzionálnych kociek alebo tabuľkových modelov z databázy služby Analysis Services.",
        "Documentation.LongDescription": "Vráti tabuľku multidimenzionálnych kociek alebo tabuľkových modelov z databázy služby Analysis Services <code>database</code> na serveri <code>server</code>. Môžete zadať voliteľný parameter záznamu <code>options</code>, ktorý bude ovládať nasledujúce možnosti:\r\n    <ul>\r\n<li><code>Query</code> : Nat&#237;vny dotaz MDX sl&#250;žiaci na nač&#237;tanie &#250;dajov.</li>\r\n<li><code>TypedMeasureColumns</code> : Logick&#225; hodnota určuj&#250;ca, či sa pre typy pridan&#253;ch stĺpcov s mierkami použij&#250; typy zadan&#233; v multidimenzion&#225;lnom alebo tabuľkovom modeli. Pri nastaven&#237; na hodnotu false sa pre všetky stĺpce s mierkami bude použ&#237;vať typ number. Predvolen&#225; hodnota nastaven&#225; pre t&#250;to možnosť je false.</li>\r\n<li><code>Culture</code> : N&#225;zov kult&#250;ry určuj&#250;ci kult&#250;ru pre &#250;daje. Zodpoved&#225; to vlastnosti reťazca pripojenia Locale Identifier.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>SubQueries</code> : Č&#237;slo (0, 1 alebo 2) určuj&#250;ce hodnotu vlastnosti SubQueries v reťazci pripojenia. Riadi sa t&#253;m spr&#225;vanie vypoč&#237;tan&#253;ch členov pri podv&#253;beroch alebo podkock&#225;ch. (Predvolen&#225; hodnota je 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vráti tabuľku, ktorá uvádza tabuľky zadané v klastri Spark.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá uvádza tabuľky v hostiteľovi <code>host</code> klastra Spark, použitím protokolu <code>protocol</code>. Platné protokoly sú:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku, ktorá uvádza tabuľky zadané v klastri Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Zadajte názvy organizácie a projektu.",
        "Documentation.DisplayName": "VSTS. AnalyticsViews",
        "Documentation.Caption": "VSTS. AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (iba Boards)",
        "Documentation.LongDescription": "Vráti tabuľku analytických zobrazení ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Import údajov z HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nVráti zoznam tabuliek z HDInsight Interactive Query, ako je určené databázou <code>database</code> na serveri <code>server</code> HDInsight Interactive Query. Voliteľne možno so serverom zadať číslo portu oddelené dvojbodkou. Môže byť zadaný voliteľný parameter <code>options</code>, ktorý ovláda tieto možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Trvanie určujúce, ako dlho sa má čakať pred zanechaním pokusu o pripojenie k serveru. Predvolená hodnota závisí od ovládača.</li>\r\n        <li><code>CommandTimeout</code>: Trvanie, ktoré určuje, ako dlho smie byť spustený dotaz na strane servera pred jeho zrušením. Predvolená hodnota závisí od ovládača.</li>\r\n</ul>\r\nParameter <code>options</code> sa zadáva vo formáte [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "CDM. MapToEntity",
        "Documentation.Description": "Vráti tabuľku so stĺpcami primapovanými k atribútom entity v Common Data Modeli vrátane typov údajov.",
        "Documentation.DisplayName": "CDM. MapToEntity",
        "Documentation.LongDescription": "Vráti tabuľku so stĺpcami primapovanými k atribútom entity v Common Data Modeli vrátane typov údajov. Stĺpce z definície entity sa pridajú, ak nie sú namapované, a všetky nenamapované stĺpce sa odstránia.",
        "Documentation.Name": "CDM. MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Vráti kocku, keď sa na ňu použije parameter.",
        "Documentation.LongDescription": "Vráti kocku, keď sa <code>parameter</code> s <code>arguments</code> použije na <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Zmení granularitu dimenzie kontextu filtra pre kocku prostredníctvom zbalenia atribútov mapovaných na zadané stĺpce.",
        "Documentation.LongDescription": "Zmení granularitu dimenzie kontextu filtra pre kocku <code>cube</code> prostredníctvom zbalenia atribútov mapovaných na zadané stĺpce <code>columnNames</code>. Z tabuľkového zobrazenia kocky sa odstránia aj stĺpce.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Nahradí množinu dimenzií vrátených vlastnosťou Cube.Dimensions.",
        "Documentation.LongDescription": "Nahradí množinu dimenzií vrátených vlastnosťou <code>Cube.Dimensions</code>\r\n    Túto funkciu možno napríklad použiť na pridanie stĺpca ID do atribútu dimenzie, aby sa zdroj údajov mohol zoskupiť podľa ID, a nie podľa zobrazenej hodnoty.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Použije zoznam funkcií kocky.",
        "Documentation.LongDescription": "Použije zoznam <code>transforms</code> funkcií kocky v kocke <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek a zobrazení SQL dostupných v databáze Db2.",
        "Documentation.LongDescription": "Vráti tabuľku tabuliek a zobrazení SQL dostupných v databáze Db2 na serveri <code>server</code> v rámci inštancie databázy s názvom <code>database</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n<li><code>Implementation</code> : Určuje implement&#225;ciu intern&#233;ho poskytovateľa datab&#225;zy, ktor&#225; sa m&#225; použiť. Platn&#233; hodnoty s&#250;: &quot;IBM&quot; a &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Č&#237;slo identifik&#225;tora CCSID (Coded Character Set Identifier) na dek&#243;dovanie bin&#225;rnych &#250;dajov Db2 FOR BIT na znakov&#233; reťazce. Vzťahuje sa na implement&#225;ciu = &quot;Microsoft&quot;. Ak chcete zak&#225;zať konverziu, nastavte hodnotu 0 (predvolen&#233;). Ak chcete vykonať konverziu založen&#250; na k&#243;dovan&#237; datab&#225;zy, nastavte hodnotu 1. Ak chcete vykonať konverziu na k&#243;dovanie aplik&#225;cie, nastavte in&#233; č&#237;slo CCSID.</li>\r\n<li><code>PackageCollection</code> : Určuje hodnotu reťazca pre kolekciu bal&#237;ka (predvolen&#225; hodnota je NULLID), ktor&#225; umožňuje použ&#237;vať zdieľan&#233; bal&#237;ky potrebn&#233; na spracovanie pr&#237;kazov SQL. Vzťahuje sa na hodnotu Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Určuje, či sa pripojenie vykon&#225;va cez br&#225;nu Db2 Connect. Vzťahuje sa na hodnotu Implementation = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Načíta množinu údajov z Data.Worldu"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Vráti tabuľku obsahujúcu vlastnosti a obsah objektov BLOB nachádzajúcich sa v zadanom kontajneri z trezora ukladacieho priestoru platformy Azure.",
        "Documentation.LongDescription": "Vráti tabuľku obsahujúcu riadok pre každý súbor objektu BLOB nachádzajúci sa na URL adrese kontajnera, <code>account</code>, z trezora ukladacieho priestoru platformy Azure. Každý riadok obsahuje vlastnosti súboru a prepojenie na jeho obsah.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Vráti tabuľku obsahujúcu výsledky spustenia zadaných selektorov CSS na základe zadaného kódu HTML.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá obsahuje výsledky spustenia zadaných selektorov CSS pre zadaný prvok <code>html</code>. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku z hodnoty ukážkového textu html.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Extrahuje všetky reťazce hrefs z hodnoty vzorového textu html.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Vráti tabuľku SQL tabuliek a zobrazení dostupných v databáze Informix.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení dostupných v databáze Informix na serveri <code>server</code> v rámci inštancie databázy s názvom <code>database</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Vráti tabuľku s podrobnosťami o potenciálnych zákazníkoch.",
        "Documentation.LongDescription": "Uskutočňovanie volania do koncového bodu rozhrania Marketo REST API na adrese <code>url</code>/rest/v1/leads.json. Vrátia sa všetci potenciálni zákazníci v zozname <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne podrobnosti o troch potenciálnych zákazníkoch",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabuľka s podrobnosťami o zadaných potenciálnych zákazníkoch"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu koncového bodu rozhrania Marketo REST API priradeného k vášmu kontu.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi služby Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek, zobrazení a uložených skalárnych funkcií SQL dostupných v databáze MySQL.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek, zobrazení a uložených skalárnych funkcií dostupných v databáze MySQL na serveri <code>server</code> v rámci inštancie databázy s názvom <code>database</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na ovládanie nasledujúcich možností:\r\n    <ul>\r\n<li><code>Encoding</code> : Hodnota TextEncoding, ktor&#225; určuje množinu znakov použ&#237;van&#250; na k&#243;dovanie všetk&#253;ch dotazov odoslan&#253;ch na server (predvolen&#225; hodnota je null).</li>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Logick&#225; hodnota (True/False), ktor&#225; určuje, či sa musia vyn&#250;tiť stĺpce tinyint na serveri ako logick&#233; hodnoty. Predvolen&#225; hodnota je True.</li>\r\n<li><code>OldGuids</code> : Logick&#225; hodnota (True/False), ktor&#225; určuje, či bud&#250; stĺpce char(36) (v pr&#237;pade hodnoty False) alebo binary(16) (v pr&#237;pade hodnoty True) sprac&#250;van&#233; ako identifik&#225;tory GUID. Predvolen&#233; nastavenie je False.</li>\r\n<li><code>ReturnSingleDatabase</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; vr&#225;tiť všetky tabuľky všetk&#253;ch datab&#225;z (v pr&#237;pade hodnoty False) alebo sa maj&#250; vr&#225;tiť tabuľky a zobrazenia zadanej datab&#225;zy (v pr&#237;pade hodnoty True). Predvolen&#225; hodnota je False.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Import údajov z databázy IBM Netezza.",
        "Documentation.LongDescription": "\r\nVráti tabuľku s tabuľkami, zobrazeniami a uloženými funkciami zo serverovej databázy Netezza <code>database</code> na serveri <code>server</code>. Voliteľne možno so serverom zadať port, ale musí byť oddelený dvojbodkou. Voliteľný parameter záznamu, <code>options</code>, možno určiť na ovládanie týchto možností:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: Logická hodnota (true/false), ktorá nastavuje, či sa majú na vrátených hodnotách generovať vlastnosti navigácie (predvolená hodnota je true)</li>\r\n        <li><code>HierarchicalNavigation</code>: Logická hodnota (true/false), ktorá nastavuje, či sa majú zobraziť tabuľky zoskupené podľa názvov schémy (predvolená hodnota je false)</li>\r\n        <li><code>ConnectionTimeout</code>: Trvanie určujúce, ako dlho sa má čakať pred zanechaním pokusu o pripojenie k serveru. Predvolená hodnota závisí od ovládača.</li>\r\n        <li><code>CommandTimeout</code>: Trvanie, ktoré určuje, ako dlho smie byť spustený dotaz na strane servera pred jeho zrušením. Predvolená hodnota závisí od ovládača.</li>\r\n<li><code>NormalizeDatabaseName</code>: Logická hodnota (true/false), ktorá nastavuje, či sa má názov databázy normalizovať na veľké písmená alebo sa má interpretovať doslovne (predvolená hodnota je true).</li>\r\n</ul>\r\nParameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Zoznam tabuliek v projekte IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Vráti výsledok spusteného natívneho dotazu v zdroji údajov ODBC.",
        "Documentation.LongDescription": "Vráti výsledok spustenia <code>query</code> s reťazcom pripojenia <code>connectionString</code> pomocou ODBC. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť číselné alebo textové. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota je 15 sek&#250;nd.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vráti výsledok spustenia jednoduchého dotazu na zadaný reťazec pripojenia.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Vráti výsledok spusteného natívneho dotazu v zdroji údajov OLE DB.",
        "Documentation.LongDescription": "Vráti výsledok spustenia <code>query</code> s reťazcom pripojenia <code>connectionString</code> pomocou OLE DB. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť číselné alebo textové. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek a zobrazení SQL dostupných v databáze PostgreSQL.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení dostupných v databáze PostgreSQL na serveri <code>server</code> v rámci inštancie databázy s názvom <code>database</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Naimportujte údaje zo skladu Snowflake Computing.",
        "Documentation.LongDescription": "Vráti tabuľku so zoznamom tabuliek v sklade <code>warehouse</code> Snowflake Computingu, ktorý sa nachádza na serveri <code>server</code>. Môže sa zadať nepovinný parameter záznamu <code>options</code>, ktorý riadi tieto možnosti:\r\n<ul>\r\n<li><code>Role</code>: textová hodnota, ktorá sa v pripojení použije ako názov roly.</li>\r\n<li><code>CreateNavigationProperties</code>: logická hodnota (true/false), ktorá určí, či sa v súvislosti s vrátenými hodnotami majú vygenerovať ich navigačné vlastnosti (predvolenou hodnotou je true).</li>\r\n<li><code>ConnectionTimeout</code>: čakanie na odpovede siete z rozhrania Snowflake, v sekundách.</li>\r\n<li><code>CommandTimeout</code>: čakanie na vykonanie dotazu, v sekundách.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Uvedie zoznam tabuliek v sklade Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Vráti tabuľku, ktorá uvádza tabuľky zadané v klastri Spark.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá uvádza tabuľky v hostiteľovi <code>host</code> klastra Spark, použitím protokolu <code>protocol</code>. Platné protokoly sú:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Zobrazte zoznam tabuliek v inštancii riešenia Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Vráti tabuľku tabuliek, zobrazení a uložených funkcií SQL z databázy servera SQL Server.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek, zobrazení a uložených funkcií z databázy SQL Servera <code>database</code> na serveri <code>server</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou alebo čiarkou. Voliteľný parameter záznamu <code>options</code> možno zadať na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Č&#237;slo, ktor&#233; nastavuje hodnotu klauzuly dotazu maxdop v generovanom dotaze SQL.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n<li><code>MultiSubnetFailover</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje hodnotu vlastnosti MultiSubnetFailover v reťazci pripojenia (predvolen&#225; hodnota je False).</li>\r\n<li><code>UnsafeTypeConversions</code> : Logick&#225; hodnota (true/false), ktor&#225; sp&#244;sob&#237;, že v pr&#237;pade nadobudnutia hodnoty true d&#244;jde k pokusu o posunutie konverzie typu, ktor&#253; m&#244;že zlyhať a sp&#244;sobiť zlyhanie cel&#233;ho dotazu. Neodpor&#250;ča sa na všeobecn&#233; použitie.</li>\r\n<li><code>ContextInfo</code> : Bin&#225;rna hodnota, ktor&#225; sa použ&#237;va na nastavenie možnosti CONTEXT_INFO pred spusten&#237;m každ&#233;ho pr&#237;kazu.</li>\r\n<li><code>OmitSRID</code> : Logick&#225; hodnota (true/false), ktor&#225; v pr&#237;pade true vynech&#225; identifik&#225;tor SRID, keď sa z geometrick&#253;ch a geografick&#253;ch typov &#250;dajov vytv&#225;ra Well-Known Text.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Logick&#225; hodnota (true/false), ktor&#225; v pr&#237;pade hodnoty true umožňuje postupn&#233; pos&#250;vanie dotazov naprieč datab&#225;zami na rovnakom serveri. Predvolen&#225; hodnota je false.</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Vráti tabuľku zobrazení a tabuliek SQL dostupných v databáze Sybase.",
        "Documentation.LongDescription": "Vráti tabuľku SQL tabuliek a zobrazení dostupných v databáze Sybase na serveri <code>server</code> v rámci inštancie databázy s názvom <code>database</code>. Port je možné voliteľne zadať spolu so serverom, pričom port musí byť oddelený dvojbodkou. Možno zadať voliteľný parameter záznamu, <code>options</code>, na nastavenie nasledujúcich možností:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcia, ktor&#225; sa použ&#237;va na tvorbu n&#225;zvov vlastnost&#237; navig&#225;cie.</li>\r\n<li><code>Query</code> : Nat&#237;vny dotaz SQL sl&#250;žiaci na nač&#237;tanie &#250;dajov. Ak s&#250; v&#253;sledkom dotazu viacer&#233; množiny v&#253;sledkov, vr&#225;ti sa iba prv&#225;.</li>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>ConnectionTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m pokusu o pripojenie k serveru. Predvolen&#225; hodnota z&#225;vis&#237; od ovl&#225;dača.</li>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n</ul>\r\n\r\n    Parameter záznamu sa zadáva napríklad ako [option1 = value1, option2 = value2...] alebo [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Pripojí stĺpec s explicitnými hodnotami pozície.",
        "Documentation.LongDescription": "Pripojí stĺpec s názvom <code>newColumnName</code> do tabuľky <code>table</code> s explicitnými hodnotami pozície.\r\n    Voliteľná hodnota <code>initialValue</code> predstavuje počiatočnú hodnotu indexu. Voliteľná hodnota <code>increment</code> určí, aký prírastok sa použije na každú hodnotu indexu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pridajte do tabuľky stĺpec indexu s názvom Index.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Pridajte do tabuľky stĺpec indexu s názvom index, počnúc hodnotou 10 a s prírastkom 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "S daným stĺpcom zoznamov v tabuľke vytvorte kópiu riadka pre každú hodnotu v príslušnom zozname.",
        "Documentation.LongDescription": "S daným stĺpcom <code>table</code>, kde <code>column</code> je zoznam hodnôt, sa zoznam rozdelí do riadka pre každú hodnotu. Hodnoty v ostatných stĺpcoch sa duplikujú v každom novom vytvorenom riadku.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdeľte stĺpec zoznamu [Name] v tabuľke.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Rozšíri hodnotu predchádzajúcej bunky do buniek s hodnotou null nižšie v stĺpci.",
        "Documentation.LongDescription": "Vráti tabuľku zo zadanej časti <code>table</code>, kde sa hodnota predchádzajúcej bunky rozšíri do buniek s hodnotou null nižšie v zadanom stĺpci <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku s hodnotami null v stĺpci [Place] vyplnenú hodnotou nad nimi z tabuľky.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Rozšíri hodnotu bunky do buniek s hodnotou null vyššie v stĺpci.",
        "Documentation.LongDescription": "Vráti tabuľku zo zadanej časti <code>table</code>, kde sa hodnota nasledujúcej bunky rozšíri do buniek s hodnotou null vyššie v zadanom stĺpci <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku s hodnotami null v stĺpci [Column2] vyplnenú hodnotou pod nimi z tabuľky.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Vráti všetky riadky obsahujúce daný text v tabuľke.",
        "Documentation.LongDescription": "Vráti riadky v tabuľke <code>table</code> obsahujúce text <code>text</code>. Ak sa text nenájde, vráti sa prázdna tabuľka.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v tabuľke riadky obsahujúce hodnotu Bob.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Vráti prvý počet zadaných riadkov.",
        "Documentation.LongDescription": "Vráti prvé riadky tabuľky <code>table</code> v závislosti od hodnoty <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Ak <code>countOrCondition</code> je číslo, vráti sa taký počet riadkov (počnúc navrchu). </li>\r\n    <li> Ak <code>countOrCondition</code> je podmienka, vrátia sa riadky spĺňajúce túto podmienku, až kým niektorý riadok podmienku nesplní.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite prvé dva riadky tabuľky.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Nájdite v tabuľke prvé riadky, kde [a] > 0.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Vráti tabuľku, ktorá je výsledkom kombinácie množiny rozdelených tabuliek.",
        "Documentation.LongDescription": "Vráti tabuľku, ktorá je výsledkom kombinácie množiny rozdelených tabuliek, <code>partitions</code>. <code>partitionColumn</code> je názov stĺpca, ktorý sa má pridať. Predvolený typ stĺpca je <code>ľubovoľný</code>, možno ho však zadať pomocou <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdi typ položky zo zoznamu <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Vráti posledný zadaný počet riadkov.",
        "Documentation.LongDescription": "Vráti posledné riadky z tabuľky <code>table</code> v závislosti od hodnoty <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Ak <code>countOrCondition</code> je číslo, vráti sa taký počet riadkov, počnúc pozíciou (koniec – <code>countOrCondition</code>). </li>\r\n    <li> Ak <code>countOrCondition</code> je podmienka, vrátia sa riadky spĺňajúce túto podmienku vo vzostupnom poradí, až kým niektorý riadok podmienku nesplní.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite posledné dva riadky tabuľky.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Nájdite v tabuľke posledné riadky, kde [a] > 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Vráti tabuľku, v ktorej budú mať všetky stĺpce na začiatku daný text v rámci predpony.",
        "Documentation.LongDescription": "Vráti tabuľku, v ktorej budú mať všetky názvy stĺpcov z uvedenej tabuľky <code>table</code> daný text v rámci predpony <code>prefix</code> a okrem toho budú mať bodku, vo formáte <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vložte predponu „Moja tabuľka“ pred stĺpce v tabuľke.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Vráti riadky, začínajúc pri zadanom posune.",
        "Documentation.LongDescription": "Vráti riadky z tabuľky <code>table</code>, začínajúc pri zadanom posune <code>offset</code>. Voliteľný parameter <code>count</code> určí, koľko riadkov sa má vrátiť. V predvolenom nastavení sa vrátia všetky riadky po posune.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vráťte všetky riadky v tabuľke, začínajúc pri posune 1.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vráťte jeden riadok v tabuľke začínajúc pri posune 1.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Odstráni zadané stĺpce.",
        "Documentation.LongDescription": "Odstráni zadané stĺpce <code>columns</code> z uvedenej tabuľky <code>table</code>.\r\n    Ak zadaný stĺpec neexistuje, vyskytne sa chyba, pokiaľ voliteľný parameter <code>missingField</code> neurčí alternatívne správanie (napr. <code>MissingField.UseNull</code> alebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte z tabuľky stĺpec [Phone].",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Skúste z tabuľky odstrániť neexistujúci stĺpec.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Odstráni všetky výskyty zadaných riadkov z tabuľky.",
        "Documentation.LongDescription": "Odstráni všetky výskyty zadaných riadkov <code>rows</code> z tabuľky <code>table</code>.\r\n    Možno stanoviť voliteľný parameter <code>equationCriteria</code> a kontrolovať tak porovnanie medzi riadkami tabuľky.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte všetky riadky, kde [a = 1], z tabuľky <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Odstráni stanovený počet riadkov.",
        "Documentation.LongDescription": "Odstráni počet riadkov: <code>count</code> zo začiatku tabuľky <code>table</code>, počnúc zadaným posunom <code>offset</code>. Ak parameter <code>count</code> nie je uvedený, použije sa predvolený počet 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte z tabuľky prvý riadok.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstráňte z tabuľky riadok na pozícii 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Odstráňte z tabuľky dva riadky začínajúc na pozícii 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Použije premenovania vo formáte {old, new}.",
        "Documentation.LongDescription": "Vykoná dané premenovania stĺpcov v tabuľke <code>table</code>. Operácia nahradenia <code>renames</code> pozostáva zo zoznamu s dvomi hodnotami, so starým názvom stĺpca a s novým názvom stĺpca, uvedenými v zozname.\r\n    Ak stĺpec neexistuje, dôjde k výnimke, pokiaľ voliteľný parameter <code>missingField</code> neurčí alternatívu (napr. <code>MissingField.UseNull</code> alebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte v tabuľke názov stĺpca CustomerNum názvom CustomerID.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Nahraďte v tabuľke názov stĺpca CustomerNum názvom CustomerID a názov PhoneNum názvom Phone.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Nahraďte v tabuľke názov stĺpca NewCol názvom NewColumn a nastavte ignorovanie, ak stĺpec neexistuje.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Vráti tabuľku so stĺpcami v zadanom poradí.",
        "Documentation.LongDescription": "Vráti tabuľku zo vstupu <code>table</code>, pričom poradie stĺpcov určuje funkcia <code>columnOrder</code>. Pre stĺpce neurčené v zozname sa poradie nezmení.\r\n     Ak stĺpec neexistuje, dôjde k výnimke, pokiaľ voliteľný parameter <code>missingField</code> neurčuje alternatívu (napr. <code>MissingField.UseNull</code> alebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zmeňte v tabuľke poradie stĺpcov [Phone] a [Name].",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Zmeňte v tabuľke poradie stĺpcov [Phone] a [Address] alebo použite funkciu MissingField.Ignore. Tabuľka sa tým nezmení, pretože stĺpec [Address] neexistuje.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Vykoná zadaný počet opakovaní riadkov tabuliek.",
        "Documentation.LongDescription": "Vráti tabuľku s riadkami zo vstupu <code>table</code> so zadaným počtom opakovaní <code>count</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Dvakrát opakujte riadky v tabuľke.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Nahradí chybové hodnoty v zadaných stĺpcoch zodpovedajúcou zadanou hodnotou.",
        "Documentation.LongDescription": "Nahradí chybové hodnoty v zadaných stĺpcoch tabuľky <code>table</code> novými hodnotami zo zoznamu <code>errorReplacement</code>. Formát zoznamu je {{column1, value1}, …}. Pre každý stĺpec môže byť určená len jedna náhradná hodnota, viacnásobné zadanie stĺpca spôsobí chybu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte v tabuľke chybovú hodnotu textom „world“.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Nahraďte v tabuľke chybovú hodnotu v stĺpci A textom „hello“ a v stĺpci B textom „world“.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Nahradí kľúče zadanej tabuľky.",
        "Documentation.LongDescription": "Nahradí kľúče zadanej tabuľky.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte existujúce kľúče tabuľky.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Nahradí všetky zadané riadky uvedenými riadkami.",
        "Documentation.LongDescription": "Nahradí všetky zadané riadky v tabuľke <code>table</code> uvedenými riadkami. Riadky, ktoré sa majú nahradiť, aj nahrádzajúce riadky sú zadané v tabuľke <code>replacements</code> pomocou formátovania {old, new}.\r\n    Možno stanoviť voliteľný parameter <code>equationCriteria</code> a kontrolovať tak porovnanie medzi riadkami tabuľky.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte v tabuľke riadky [a = 1, b = 2] a [a = 2, b = 3] riadkami [a = -1, b = -2], [a = -2, b = -3].",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Vráti tabuľku iba so zadanými stĺpcami.",
        "Documentation.LongDescription": "Vráti tabuľku <code>table</code> iba so zadanými stĺpcami <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: Uvedená tabuľka.</li>\r\n       <li><code>columns</code>: Zoznam stĺpcov z tabuľky <code>table</code>, ktorá sa má vrátiť. Stĺpce vo vrátenej tabuľke sú v poradí uvedenom v časti <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Voliteľné)</i> Čo robiť, ak stĺpec neexistuje.  Príklad: <code>MissingField.UseNull</code> alebo <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Zahrňte iba stĺpec [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Zahrňte iba stĺpce [CustomerID] a [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Ak zahrnutý stĺpec neexistuje, predvoleným výsledkom je chyba.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Ak zahrnutý stĺpec neexistuje, možnosť <code>MissingField.UseNull</code> vytvorí stĺpec s hodnotami null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Vyberie riadky tabuľky, ktoré spĺňajú funkciu podmienky.",
        "Documentation.LongDescription": "Vráti tabuľku riadkov z tabuľky <code>table</code>, ktorá spĺňa podmienku výberu <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vyberte riadky v tabuľke, v ktorých sú hodnoty v stĺpci [CustomerID] väčšie ako 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Vyberte riadky v tabuľke, v ktorých názvy neobsahujú „B“.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Zoradí tabuľku pomocou jedného alebo viacerých názvov stĺpcov a kritérií porovnania.",
        "Documentation.LongDescription": "Zoradí tabuľku <code>table</code> pomocou zoznamu jedného alebo viacerých názvov stĺpcov a voliteľného kritéria <code>comparisonCriteria</code> vo formáte { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Zoraďte tabuľku podľa stĺpca OrderID.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Zoraďte tabuľku podľa stĺpca OrderID v zostupnom poradí.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Zoraďte tabuľku podľa stĺpca CustomerID a potom podľa stĺpca OrderID, pričom stĺpec CustomerID bude v zostupnom poradí.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transformuje názvy stĺpcov použitím zadanej funkcie.",
        "Documentation.LongDescription": "Transformuje názvy stĺpcov použitím zadanej funkcie <code>nameGenerator</code>. Platné možnosti:\r\n    <div>\\\r\n     <code>MaxLength</code> určuje maximálnu dĺžku nových názvov stĺpcov. Ak bude výsledkom zadanej funkcie dlhší názov stĺpca, dlhý názov sa oreže.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> sa používa na ovládanie porovnania pri generovaní nových názvov stĺpcov. Porovnávače je možné používať na porovnávania, pri ktorých sa rozlišujú malé a veľké písmená alebo jazyková verzia a miestne nastavenia.\r\n    </div>\r\n    <div>\r\n      V jazyku vzorca sú k dispozícii nasledujúce vstavané porovnávače:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: používa sa na vykonanie presného ordinálneho porovnania,</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: používa sa na vykonanie presného ordinálneho porovnania s rozlišovaním veľkých a malých písmen,</li>\r\n      <li> <code>Comparer.FromCulture</code>: používa sa na vykonanie porovnania, pri ktorom sa zohľadňuje jazyková verzia.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte z názvov stĺpcov znak <code>#(tab)</code>",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transformuje názvy stĺpcov, aby sa vygenerovali názvy s dĺžkou 6 znakov, v ktorých sa nerozlišujú malé a veľké písmená.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Použije transformácie typov vo formáte { column, type } pomocou špecifickej kultúry.",
        "Documentation.LongDescription": "Vráti tabuľku zo vstupu <code>table</code> použitím operácie transformácie na stĺpce zadané v parametri <code>typeTransformations</code> (kde formát je { column name, type name}) pomocou zadanej kultúry vo voliteľnom parametri <code>culture</code> (napríklad en-US).\r\n    Ak stĺpec neexistuje, vyvolá sa výnimka.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformujte číselné hodnoty v stĺpci [a] na textové hodnoty z tabuľky <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformuje hodnoty jedného alebo viacerých stĺpcov.",
        "Documentation.LongDescription": "Transformuje <code>table</code> tým, že použije každú operáciu stĺpca uvedenú na mieste <code>transformOperations</code> (pričom formát je { column name, transformation } alebo { column name, transformation, new column type }).\r\n    Ak je hodnota <code>defaultTransformation</code> uvedená, použije sa na všetky stĺpce neuvedené na mieste <code>transformOperations</code>.\r\n    Ak stĺpec uvedený na mieste <code>transformOperations</code> neexistuje, vygeneruje sa výnimka, pokiaľ voliteľný parameter <code>missingField</code> neuvádza alternatívu (napríklad <code>MissingField.UseNull</code> alebo <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Skonvertuje textové hodnoty v stĺpci [A] na číselné hodnoty a číselné hodnoty v stĺpci [B] na textové hodnoty.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Konvertujte číselné hodnoty v chýbajúcom stĺpci [X] na textové hodnoty, pričom ignorujte stĺpce, ktoré neexistujú.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Skonvertujte číselné hodnoty v chýbajúcom stĺpci [X] na textové hodnoty, pričom pre stĺpce, ktoré neexistujú, nastavte predvolenú hodnotu null.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Zvýšte číselné hodnoty v stĺpci [B] a skonvertujte ich na textové hodnoty. Všetky ostatné stĺpce skonvertujte na čísla.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Vytvorí alebo rozšíri tabuľku s používateľom definovanými obslužnými programami pre operácie dotazu a akcií.",
        "Documentation.LongDescription": "<p>Vráti zobrazenie tabuľky <code>table</code>, kde sa funkcie zadané v <code>handlers</code> používajú namiesto predvoleného správania operácie, keď sa daná operácia použije na zobrazenie.</p>\r\n<p>Ak je <code>table</code> poskytnuté, funkcie obslužných programov sú voliteľné. Ak nie je <code>table</code> poskytnuté, funkcie obslužných programov <code>GetType</code> a <code>GetRows</code> sú vyžadované. Ak pre operáciu nie je zadaná funkcia obslužného programu, na zobrazenie <code>table</code> sa použije predvolené správanie operácie (okrem prípadu <code>GetExpression</code>).</p>\r\n<p>Funkcie obslužných programov musia vrátiť hodnotu, ktorá je sémanticky ekvivalentná výsledku použitia operácie na zobrazenie <code>table</code> (alebo v prípade <code>GetExpression</code> na výsledné zobrazenie).</p>\r\n<p>Ak funkcia obslužného programu vyvolá chybu, na zobrazenie sa použije predvolené správanie operácie.</p>\r\n<p><code>Table.View</code> možno použiť na implementáciu zbalenia do zdroja údajov – preklad dotazov M do dotazov špecifických pre zdroj (napríklad na vytvorenie príkazov T-SQL z dotazov M).</p>\r\n<p>Podrobnejší popis funkcie <code>Table.View</code> nájdete v publikovanej dokumentácii vlastného konektora Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Na určenie typu alebo počtu riadkov vytvorte základné zobrazenie, ktoré nevyžaduje prístup k riadkom v poradí.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Zadajte názvy organizácie a projektu.",
        "Documentation.DisplayName": "VSTS. AnalyticsViews",
        "Documentation.Caption": "VSTS. AnalyticsViews",
        "Documentation.Name": "Azure DevOps (iba Boards)",
        "Documentation.LongDescription": "Vráti tabuľku analytických zobrazení ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importovať údaje zo služby Vertica",
        "Documentation.LongDescription": "Vráti tabuľku schém, ktoré sú k dispozícii na serveri pomenovanom parametrom <code>server</code> v databáze pomenovanej parametrom <code>database</code>.\r\nNa zadanie ďalších vlastností môže byť poskytnutý voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Trvanie, ktoré určuje, ako dlho sa má čakať, kým sa zruší pokus o pripojenie k serveru. Predvolená hodnota závisí od ovládača.</li>\r\n    <li><code>CommandTimeout </code>: Trvanie, ktoré určuje, ako dlho môže byť dotaz na strane servera spustený, kým bude zrušený. Predvolená hodnota závisí od ovládača.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Zobraziť zoznam tabuliek v službe Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s obsahom zostavy zo služby Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Uskutoční volanie do určitého koncového bodu zostavy služby Webtrends a vráti všetky údaje ako tabuľku.",
        "Documentation.Examples": [
          {
            "Description": "Uskutoční volanie do koncového bodu zostavy o návštevníkoch služby Webtrends s údajmi za posledných 30 dní",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabuľka s údajmi o návštevníkoch"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Vráti zoznam domén služby Active Directory v rovnakej doménovej štruktúre ako zadaná doména alebo vráti doménu aktuálneho počítača v prípade, že nie je zadaná.",
        "Documentation.LongDescription": "Vráti zoznam domén služby Active Directory v rovnakej doménovej štruktúre ako zadaná doména alebo vráti doménu aktuálneho počítača v prípade, že nie je zadaná.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Vráti výsledok spustenia natívneho dotazu na zdroji údajov ADO.NET.",
        "Documentation.LongDescription": "Vráti výsledok spustenia <code>query</code> s reťazcom pripojenia <code>connectionString</code> s použitím poskytovateľa ADO.NET <code>providerName</code>. <code>connectionString</code> môže byť text alebo záznam párov hodnôt vlastností. Hodnoty vlastností môžu byť textové alebo číselné. Na určenie ďalších vlastností možno zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trvanie, ktor&#233; určuje, ako dlho smie byť spusten&#253; dotaz na strane servera pred zrušen&#237;m dotazu. Predvolen&#225; hodnota je desať min&#250;t.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Logick&#225; hodnota (true/false), ktor&#225; určuje, či sa pre overovanie Windowsom maj&#250; vygenerovať možnosti reťazca pripojenia kompatibiln&#233; s SQL Serverom. Predvolen&#225; hodnota je true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Vráti balíky zostáv v službe Adobe Analytics.",
        "Documentation.LongDescription": "Vráti tabuľku viacrozmerných balíkov zo služby Adobe Analytics. Zadaním voliteľného parametra záznamu, <code>options</code>, sa dajú ovládať tieto možnosti:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; zobraziť tabuľky zoskupen&#233; podľa n&#225;zvov sch&#233;my (predvolen&#225; hodnota je False).</li>\r\n<li><code>MaxRetryCount</code> : Počet opakovan&#237;, ktor&#233; sa maj&#250; vykonať pri zisťovan&#237; v&#253;sledku dotazu. Predvolen&#225; hodnota je 120.</li>\r\n<li><code>RetryInterval</code> : Čas medzi opakovan&#237;m pokusov. Predvolen&#225; hodnota je 1 sekunda.</li>\r\n<li><code>Implementation</code> : Určuje verziu rozhrania API Adobe Analytics. Platn&#233; hodnoty s&#250;: 2.0. Predvolen&#225; hodnota použ&#237;va rozhranie API verzie 1.4.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Import údajov z platformy Hive LLAP",
        "Documentation.LongDescription": "\r\nVráti zoznam tabuliek z platformy Hive LLAP určených <code>databázou</code> na <code>serveri</code> Hive LLAP použitím vybratého <code>protokolu</code>. Voliteľne možno so serverom zadať číslo portu oddelené dvojbodkou. Thrift Transport Protocol je výpočtový typ s hodnotami Standard a HTTP. Môže byť zadaný voliteľný parameter <code>options</code>, ktorý ovláda tieto možnosti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Trvanie určujúce, ako dlho sa má čakať pred ukončením pokusu o pripojenie k serveru. Predvolená hodnota závisí od ovládača.</li>\r\n        <li><code>CommandTimeout</code>: Trvanie, ktoré určuje, ako dlho smie byť spustený dotaz na strane servera, kým bude zrušený. Predvolená hodnota závisí od ovládača.</li>\r\n</ul>\r\nParameter <code>options</code> sa zadáva vo formáte [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Načíta údaje o súhrnoch medzi 1. 5. 2017 a 15. 6. 2017 za predpokladu, že dnes je 15. 6. 2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcia vráti údaje o súhrnoch medzi 1. 5. 2017 a 15. 6. 2017"
          },
          {
            "Description": "Načíta údaje o súhrnoch z apríla 2017 za predpokladu, že dnes je 15. 6. 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcia vráti údaje medzi 1. 4. 2017 a 30. 4. 2017"
          },
          {
            "Description": "Načíta údaje o súhrnoch od apríla 2017 až po dnešok za predpokladu, že dnes je 15. 6. 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Funkcia vráti údaje medzi 1. 4. 2017 a 15. 6. 2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Zadajte názvy organizácie a projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Vráti tabuľku informačných kanálov OData ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Pripojenie k inštancii Dataverse (Dynamics 365 a PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Zlúči zadanú tabuľku dimenzií do kontextu filtra kocky a zmení granularitu dimenzie kontextu filtra prostredníctvom rozbalenia zadanej množiny atribútov dimenzie.",
        "Documentation.LongDescription": "Zlúči zadanú tabuľku dimenzií <code>dimensionSelector</code> do kontextu filtra kocky <code>cube</code> a zmení granularitu dimenzie prostredníctvom rozbalenia zadanej množiny <code>attributeNames</code> atribútov dimenzie. Atribúty dimenzie sa pridajú do tabuľkového zobrazenia so stĺpcami s názvom <code>newColumnNames</code> alebo <code>attributeNames</code> (v prípade chýbajúceho zadania).",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Pridá stĺpec do kocky, ktorá obsahuje výsledky mierky použitej v kontexte každého riadka.",
        "Documentation.LongDescription": "Pridá stĺpec s názvom <code>column</code> do kocky <code>cube</code>, ktorá obsahuje výsledky mierky <code>measureSelector</code> použitej v kontexte každého riadka. Použitie mierky je ovplyvnené zmenami v granularite a výsekoch dimenzie. Hodnoty mierky sa upravia po vykonaní určitých operácií kocky.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Zadajte svoje prostredie a spoločnosť v Dynamicse 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi z Dynamicsu 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Zadajte svoje prostredie a spoločnosť v Dynamicse 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi z Dynamicsu 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Zadajte svoje prostredie a spoločnosť v Dynamicse 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi z Dynamicsu 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Zadajte svoje prostredie a spoločnosť v Dynamicse 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Vráti tabuľku s relevantnými údajmi z Dynamicsu 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Vráti obsah aktuálneho excelového zošita.",
        "Documentation.LongDescription": "Vráti obsah aktuálneho excelového zošita. Vráti tabuľky, pomenované rozsahy a dynamické polia. Na rozdiel od funkcie <code>Excel.Workbook</code> nevracia hárky.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Vráti tabuľku obsahu z konta Microsoft Exchange.",
        "Documentation.LongDescription": "Vráti obsah z konta Microsoft Exchange <code>mailboxAddress</code>. Ak nie je zadané konto <code>mailboxAddress</code>, použije sa predvolené konto poverenia.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Sklad",
        "Documentation.Caption": "Sklad",
        "Documentation.Description": "Importuje údaje zo skladu",
        "Documentation.LongDescription": "Importuje údaje zo skladu"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Vráti kontá Google Analytics.",
        "Documentation.LongDescription": "Vráti kontá Google Analytics, ktoré sú prístupné z aktuálneho poverenia.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Umožní importovať údaje z databázy Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Vráti tabuľku so zoznamom projektov dostupných na platforme Google BigQuery. Môže sa zadať voliteľný parameter záznamu <code>options</code>, ktorým sa ovládajú tieto možnosti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Časový interval, ktorý ovláda, ako dlho treba čakať pred ukončením pokusu o vytvorenie pripojenia k serveru. Predvolenou hodnotou je hodnota časového limitu pripojenia ODBC.</li>\r\n        <li><code>CommandTimeout</code>: Časový interval, ktorý ovláda, ako dlho môže byť spustený dotaz na strane servera predtým, ako sa zruší.</li>\r\n        <li><code>BillingProject</code>: ID fakturačného projektu. Predvolenou hodnotou je prvý dostupný projekt.</li>\r\n        <li><code>UseStorageApi</code>: Určuje, či sa má pre veľké množiny výsledkov použiť rozhranie BigQuery Storage API. Predvolenou hodnotou pri použití rozhrania Storage API je True. Ak sa rozhranie Storage API nemá použiť, nastavte hodnotu False.</li>\r\n      </ul>\r\n    Parameter záznamu sa zadáva vo formáte [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Zoznam dostupných projektov v platforme Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Architektúra Lakehouse",
        "Documentation.Caption": "Importovať údaje z architektúry Lakehouse",
        "Documentation.Description": "Importovať údaje z architektúry Lakehouse",
        "Documentation.LongDescription": "Pripojte sa ku všetkým architektúram Lakehouse, ku ktorým máte prístup, a vyberte entity, ktoré chcete používať"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s kľúčovými údajmi služby MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Vráti tabuľku s kľúčovými údajmi služby MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s kľúčovými údajmi služby MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabuľka s kľúčovými údajmi služby MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Vráti tabuľku s aktivitami potenciálneho zákazníka.",
        "Documentation.LongDescription": "Uskutočňovanie volania do koncového bodu rozhrania Marketo REST API na adrese <code>url</code>/rest/v1/activities.json. Vrátia sa všetky aktivity v zozname <code>activityIds</code>, ktoré sa vykonali od dátumu v poli <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne tabuľku aktivít návštev webovej stránky od 1. novembra 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabuľka s podrobnosťami o všetkých aktivitách návštev webovej stránky od 1. novembra"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Toky údajov služby Power BI (staršie)",
        "Documentation.Caption": "Import údajov z toku údajov služby Power BI",
        "Documentation.LongDescription": "Pripojte sa ku všetkým tokom údajov v Power BI, ku ktorým máte prístup, a vyberte entity, ktoré chcete používať."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarty",
        "Documentation.Caption": "Datamarty",
        "Documentation.Description": "Importuje údaje z datamartov",
        "Documentation.LongDescription": "Importuje údaje z datamartov"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Toky údajov",
        "Documentation.Caption": "Import údajov z toku údajov",
        "Documentation.Description": "Import údajov z toku údajov",
        "Documentation.LongDescription": "Pripojte sa ku všetkým tokom údajov, ku ktorým máte prístup, a vyberte entity, ktoré chcete používať"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importuje údaje zo služby QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Vráti tabuľku so zoznamom dostupných tabuliek v službe QuickBooks Online. Môže sa zadať voliteľný parameter záznamu <code>options</code> na ovládanie nasledujúcich možností:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: Časový interval ovládajúci, ako dlho treba čakať pred ukončením pokusu o vytvorenie pripojenia k serveru.</li>\r\n            <li><code>CommandTimeout</code>: Časový interval ovládajúci, ako dlho je povolené, aby bol spustený dotaz na strane servera pred zrušením.</li>\r\n          </ul>\r\n        Parameter záznamu sa zadáva vo formáte [option1 = value1, option2 = value2...].\r\n"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Vráti objekty z konta Salesforce.",
        "Documentation.LongDescription": "Vráti objekty v konte Salesforce poskytnuté v povereniach. Konto sa pripojí prostredníctvom poskytnutého prostredia <code>loginUrl</code>. Ak nie je poskytnuté žiadne prostredie, konto sa pripojí do produkčného prostredia (https://login.salesforce.com). Na zadanie ďalších vlastností možno poskytnúť voliteľný parameter záznamu, <code>options</code>. Záznam môže obsahovať tieto polia:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Logick&#225; hodnota (True/False), ktor&#225; nastavuje, či sa maj&#250; generovať vlastnosti navig&#225;cie v pr&#237;pade vr&#225;ten&#253;ch hodn&#244;t (predvolen&#225; hodnota je False).</li>\r\n<li><code>ApiVersion</code> : Verzia rozhrania API Salesforce na použitie pre tento dotaz. Ak nie je zadan&#225;, použije sa verzia rozhrania API 29.0.</li>\r\n<li><code>Timeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m žiadosti odoslanej na server. Predvolen&#225; hodnota je viazan&#225; na zdroj.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Vráti zostavy z konta Salesforce.",
        "Documentation.LongDescription": "Vráti zostavy v konte Salesforce poskytnuté v povereniach. Konto sa pripojí prostredníctvom poskytnutého prostredia <code>loginUrl</code>. Ak nie je poskytnuté žiadne prostredie, konto sa pripojí do produkčného prostredia (https://login.salesforce.com). Na zadanie ďalších vlastností možno poskytnúť voliteľný parameter záznamu, <code>options</code>. Záznam môže obsahovať tieto polia:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Verzia rozhrania API Salesforce na použitie pre tento dotaz. Ak nie je zadan&#225;, použije sa verzia rozhrania API 29.0.</li>\r\n<li><code>Timeout</code> : Trvanie, ktor&#233; určuje, ako dlho sa m&#225; čakať pred zanechan&#237;m žiadosti odoslanej na server. Predvolen&#225; hodnota je viazan&#225; na zdroj.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Vráti oblasti InfoCube a dotazy v systéme SAP Business Warehouse zoskupené podľa oblasti InfoArea.",
        "Documentation.LongDescription": "Vráti tabuľku oblastí InfoCube a dotazov zoskupených podľa oblasti InfoArea z inštancie SAP Business Warehouse na serveri <code>server</code> s číslom systému <code>systemNumberOrSystemId</code> a identifikáciou klienta <code>clientId</code>. Môžete zadať voliteľný parameter záznamu <code>optionsOrLogonGroup</code>, ktorý bude ovládať nasledujúce možnosti:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s hárkami, zostavami, priečinkami a pracovnými priestormi z rozhrania Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Vráti vnorenú tabuľku s dostupnými hárkami, zostavami, priečinkami a pracovnými priestormi z rozhrania Smartsheet API.",
        "Documentation.Examples": [
          {
            "Description": "Vráti hárky, priečinky, zostavy a pracovné priestory, ktoré sú k dispozícii na najvyššej úrovni hierarchie služby Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabuľka s priečinkami, zostavami a pracovnými priestormi z najvyššej úrovne hierarchie služby Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s dostupnou metrikou z rozhrania SparkPost API v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Túto funkciu možno použiť na načítanie údajov z konkrétneho koncového bodu Metrics v rozhraní SparkPost API v1. Pri obnovovaní týchto tabuliek alebo volaní rozhrania SparkPost API pomocou tohto konektora majte na pamäti, že rozhranie SparkPost API má prísne obmedzený počet volaní rozhrania API. Ak vidíte, že server SparkPost vráti kód stavu 429, znamená to, že ste dosiahli limit počtu volaní a pred ďalším volaním budete musieť chvíľu počkať. Pri výbere hodnoty pre parameter Počet dní nezabudnite, že toto rozhranie API ukladá údaje iba za posledných 6 mesiacov.",
        "Documentation.Examples": [
          {
            "Description": "Načíta metriky doručiteľnosti count_sent a count_rejected pre všetky campaign_ids agregované za posledné tri dni. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabuľka"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Uskutočňovanie volania do rozhrania Stripe API.",
        "Documentation.LongDescription": "Uskutočňovanie volania do rozhrania Stripe API na adrese https://api.stripe.com/v1/<code>method</code> so záznamom <code>additionalParameters</code>, ktorý predstavuje dodatočné parametre, a zoznamom <code>ColumnNames</code> s očakávanými názvami stĺpcov. Používa sa Stripe verzie 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Vráti tabuľku s udalosťami vytvorenými po 1. novembri 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabuľka so zadanými udalosťami v aktuálnom konte Stripe"
          },
          {
            "Description": "Vráti tabuľku so všetkými jednotkami SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabuľka so všetkými jednotkami SKU v aktuálnom konte Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Vráti tabuľku s dostupnými tabuľkami a funkciami služby Stripe.",
        "Documentation.LongDescription": "Vráti tabuľku s dostupnými tabuľkami a funkciami služby Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Pracovný priestor Azure Synapse Analytics",
        "Documentation.Caption": "Pracovný priestor Azure Synapse Analytics",
        "Documentation.LongDescription": "PQ konektor pre pracovný priestor Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Pridá stĺpec so zadaným názvom. Hodnota sa vypočíta pomocou zadanej funkcie výberu, pričom každý riadok sa použije ako vstup.",
        "Documentation.LongDescription": "Pridá stĺpec s názvom <code>newColumnName</code> do tabuľky <code>table</code>. Hodnoty pre tento stĺpec sa vypočítajú pomocou zadanej funkcie výberu <code>columnGenerator</code>, pričom každý riadok sa použije ako vstup.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Do tabuľky pridá stĺpec s názvom TotalPrice, pričom každá hodnota bude súčet stĺpca [Price] so stĺpcom [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Pridá nový stĺpec s reprezentatívnymi hodnotami získanými približným zoskupovaním hodnôt určeného stĺpca v tabuľke.",
        "Documentation.LongDescription": "Pridá do tabuľky <code>table</code> nový stĺpec <code>newColumnName</code> s reprezentatívnymi hodnotami <code>columnName</code>. Reprezentatívne hodnoty pre jednotlivé riadky sa získavajú podľa približnej zhody s hodnotami v stĺpci <code>columnName</code>.\r\n    <p>Dá sa zahrnúť aj nepovinná množina <code>options</code>, ktorá určuje, ako sa majú kľúčové stĺpce porovnávať. Možnosti zahŕňajú: \r\n    <ul>\r\n<li><code>Culture</code> : Povoľuje zoskupenie z&#225;znamov na z&#225;klade pravidiel špecifick&#253;ch pre jazykov&#250; verziu. M&#244;že &#237;sť o ľubovoľn&#253; platn&#253; n&#225;zov jazykovej verzie. Možnosť jazykovej verzie ja-JP napr&#237;klad zoskup&#237; z&#225;znamy podľa japonskej jazykovej verzie. Predvolen&#225; hodnota je &quot;&quot;, ktor&#225; zoskupuje na z&#225;klade invariantnej anglickej jazykovej verzie.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), ktor&#225; povoľuje zoskupenie kľ&#250;čov bez rozlišovania veľk&#253;ch a mal&#253;ch p&#237;smen. Pri hodnote True sa napr&#237;klad v&#253;raz „Hrozno“ zoskup&#237; s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), ktor&#225; umožňuje skombinovať časti textu s cieľom n&#225;jsť skupiny. Pri hodnote True sa napr&#237;klad v&#253;raz „Hro zno“ zoskup&#237; s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zov stĺpca, ktor&#253; zobrazuje podobnosť medzi vstupnou a reprezentat&#237;vnou hodnotou dan&#233;ho vstupu. Predvolen&#225; hodnota je null. V takom pr&#237;pade sa neprid&#225; nov&#253; stĺpec pre podobnosti.</li>\r\n<li><code>Threshold</code> : Č&#237;slo medzi 0,00 a 1,00 určuj&#250;ce sk&#243;re podobnosti, pri ktorom sa dve hodnoty zoskupia.\r\n     Hodnoty Hrozno“ a Hrono“ (ch&#253;ba p&#237;smeno z) sa napr&#237;klad zoskupia len vtedy, ak je t&#225;to možnosť nastaven&#225; na hodnotu nižšiu ako 0,90.\r\n    Prahov&#225; hodnota 1,00 povoľuje iba presn&#233; zhody.\r\n    (Upozorňujeme, že približn&#225; „presn&#225; zhoda“ m&#244;že ignorovať rozdiely, ako s&#250; mal&#233; a veľk&#233; p&#237;smen&#225;, slovosled alebo interpunkcia.)\r\n    Predvolen&#225; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabuľka, ktor&#225; povoľuje zoskupenie na z&#225;klade priraden&#237; vlastn&#253;ch hodn&#244;t. Mala by obsahovať stĺpce „From“ a „To“. Hodnota „Hrozno“ sa napr&#237;klad zoskup&#237; s hodnotou „Hrozienko“, ak sa zad&#225; tabuľka transform&#225;cie, v ktorej stĺpec „From“ obsahuje v&#253;raz „Hrozno“ a stĺpec „To“ obsahuje v&#253;raz „Hrozienko“. Všimnite si, že transform&#225;cia sa použije na všetky v&#253;skyty textu v tabuľke transform&#225;cie. Pomocou vyššie uvedenej tabuľky transform&#225;cie sa aj hodnoty „Hrozno je sladk&#233;“ bud&#250; zoskupovať s hodnotami „hrozienko je sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte reprezentatívne hodnoty predstavujúce polohu zamestnancov.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Vykoná spojenie medzi tabuľkami na zadaných stĺpcoch a vytvorí výsledok spojenia v novom stĺpci.",
        "Documentation.LongDescription": "Spojí riadky tabuľky <code>table1</code> s riadkami tabuľky <code>table2</code> na základe rovnosti hodnôt kľúčových stĺpcov vybratých pomocou funkcie <code>key1</code> (pre tabuľku <code>table1</code>) a <code>key2</code> (pre tabuľku <code>table2</code>). Výsledky sa zadajú do stĺpca s názvom <code>newColumnName</code>.\r\nTáto funkcia sa správa podobne ako funkcia Table.Join s druhom JoinKind spojenia LeftOuter okrem toho, že výsledky spojenia sa znázornia vnoreným spôsobom namiesto spôsobu zjednodušenia štruktúry.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pridajte stĺpec spojenia do tabuľky ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) s názvom \"price/stock\" z tabuľky ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) spojenej na základe kľúča [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Pridá kľúč do tabuľky.",
        "Documentation.LongDescription": "Pridá kľúč do tabuľky <code>table</code>, kde <code>columns</code> je zoznam názvov stĺpcov, ktoré kľúč definujú, a <code>isPrimary</code> určuje, či je kľúč primárny.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pridajte primárny kľúč s jedným stĺpcom do tabuľky.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Pripojí stĺpec s poradím jedného alebo viacerých ďalších stĺpcov.",
        "Documentation.LongDescription": "Pripojí stĺpec s názvom <code>newColumnName</code> k <code>table</code> s poradím jedného alebo viacerých stĺpcov popísaných v <code>comparisonCriteria</code>.\r\nMožnosť RankKind v <code>options</code> môžu pokročilí používatelia použiť na výber špecifickejšej metódy poradia.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Pridajte do tabuľky stĺpec s názvom RevenueBank, ktorý zoradí stĺpec Výnosy od najvyšších po najnižšie.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agreguje stĺpec tabuliek do viacerých stĺpcov v obsahujúcej tabuľke.",
        "Documentation.LongDescription": "Agreguje tabuľky v časti <code>table</code>[<code>column</code>] do viacerých stĺpcov obsahujúcich agregačné hodnoty pre tabuľky. <code>aggregations</code> sa používa na zadanie stĺpcov obsahujúcich tabuľky určené na agregáciu, agregačné funkcie určené na použitie v tabuľkách s cieľom generovať ich hodnoty, ako aj názvy agregačných stĺpcov, ktoré sa majú vytvoriť.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregujte stĺpce tabuľky v časti <code>[t]</code> v tabuľke <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> na súčet hodnôt <code>[t.a]</code>, minimum a maximum hodnôt <code>[t.b]</code> a počet hodnôt v časti <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Zachová počiatočný posun, potom striedavo používa a vynecháva nasledujúce riadky.",
        "Documentation.LongDescription": "Zachová počiatočný posun, potom striedavo používa a vynecháva nasledujúce riadky.\r\n    <ul>\r\n       <li><code>table</code>: Vstupná tabuľka.</li>\r\n       <li><code>offset</code>: Počet riadkov, ktoré sa majú zachovať pred spustením iterácií.</li>\r\n       <li><code>skip</code>: Počet riadkov, ktoré sa majú odstrániť v každej iterácii.</li>\r\n       <li><code>take</code>: Počet riadkov, ktoré sa majú zachovať v každej iterácii.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vráťte tabuľku z tabuľky, ktorá počnúc prvým riadkom vynechá jednu hodnotu a potom zachová jednu hodnotu.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Kombinuje zadané stĺpce do nového stĺpca pomocou zadanej funkcie kombinovača.",
        "Documentation.LongDescription": "Kombinuje zadané stĺpce do nového stĺpca pomocou zadanej funkcie kombinovača.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Skombinujte priezviská a krstné mená do nového stĺpca oddelené čiarkou.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Skombinuje zadané stĺpce do nového stĺpca obsahujúceho záznamy a hodnoty, v ktorom každý záznam obsahuje názvy polí a hodnoty zodpovedajúce názvom stĺpcov a hodnotám stĺpcov, ktoré boli skombinované.",
        "Documentation.LongDescription": "Kombinuje zadané stĺpce tabuľky <code>table</code> do nového stĺpca s hodnotou záznamu s názvom <code>newColumnName</code>, v ktorom každý záznam obsahuje názvy a hodnoty polí zodpovedajúce názvom a hodnotám zlúčených stĺpcov. Ak je pre <code>options</code> zadaný záznam, môžete zadať nasledujúce možnosti: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Keď je zadaný ako text, znamená to, že názov daného stĺpca sa má považovať za zobrazovaný názov záznamu. Nemusí to byť jeden zo stĺpcov v samotnom zázname. </li>\r\n     <li> <code>TypeName</code>: Keď je zadaný ako text, zastupuje pre výsledný záznam názov logického typu, ktorý sa môže použiť počas načítavania údajov na riadenie správania načítavajúcim prostredím. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplikuje stĺpec so zadaným názvom. Hodnoty a typ sa skopírujú zo zdrojového stĺpca.",
        "Documentation.LongDescription": "Duplikujte stĺpec s názvom <code>columnName</code> do tabuľky <code>table</code>. Hodnoty a typ pre stĺpec <code>newColumnName</code> sa skopírujú zo stĺpca <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Stĺpec „a“ sa duplikuje do stĺpca s názvom „skopírovaný stĺpec“ v tabuľke <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Rozbalí stĺpec záznamov na stĺpce s každou z hodnôt.",
        "Documentation.LongDescription": "S daným stĺpcom <code>column</code> záznamov vo vstupe <code>table</code> vytvorí tabuľku so stĺpcom pre každé pole v zázname. Voliteľne možno zadať hodnotu <code>newColumnNames</code> s cieľom zabezpečiť jedinečné názvy stĺpcov v novej tabuľke.\r\n    <ul>\r\n        <li><code>table</code>: Pôvodná tabuľka so stĺpcom záznamu, ktorá sa má rozbaliť. </li>\r\n        <li><code>column</code>: Stĺpec, ktorý sa má rozbaliť.</li>\r\n        <li><code>fieldNames</code>: Zoznam polí, ktoré sa majú rozbaliť do stĺpcov v tabuľke.</li>\r\n        <li><code>newColumnNames</code>: Zoznam názvov stĺpcov, ktoré majú poskytnúť nové stĺpce. Nové názvy stĺpcov nemôžu duplikovať žiadny stĺpec v novej tabuľke.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozbaľte stĺpec [a] v tabuľke <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> do 3 stĺpcov \"aa\", \"bb\" a \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Rozbalí stĺpec záznamov alebo stĺpec tabuliek do viacerých stĺpcov v obsahujúcej tabuľke.",
        "Documentation.LongDescription": "Rozbalí tabuľky v časti <code>table</code>[<code>column</code>] do viacerých riadkov a stĺpcov. <code>columnNames</code> sa používa na výber stĺpcov, ktoré sa majú rozbaliť z vnútornej tabuľky. Zadajte parameter <code>newColumnNames</code>, aby ste sa vyhli konfliktom medzi existujúcimi stĺpcami a novými stĺpcami.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozbaľte stĺpce tabuľky v časti <code>[a]</code> v tabuľke <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> do 3 stĺpcov <code>[t.a]</code>, <code>[t.b]</code> a <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Zoskupí riadky v tabuľke na základe približnej zhody kľúčov.",
        "Documentation.LongDescription": "Zoskupí riadky tabuľky <code>table</code> podľa približnej zhody hodnôt v zadanom stĺpci <code>key</code> (pre každý riadok).\r\n    Pre každú skupinu sa vytvorí záznam, ktorý obsahuje kľúčové stĺpce (a ich hodnoty) spolu so všetkými agregovanými stĺpcami určenými pomocou <code>aggregatedColumns</code>.\r\n    Táto funkcia nemôže zaručiť vrátenie pevného poradia riadkov.\r\n    <p>Dá sa zahrnúť aj nepovinná množina <code>options</code>, ktorá určuje, ako sa majú kľúčové stĺpce porovnávať. Možnosti zahŕňajú: \r\n    <ul>\r\n<li><code>Culture</code> : Povoľuje zoskupenie z&#225;znamov na z&#225;klade pravidiel špecifick&#253;ch pre jazykov&#250; verziu. M&#244;že &#237;sť o ľubovoľn&#253; platn&#253; n&#225;zov jazykovej verzie. Možnosť jazykovej verzie ja-JP napr&#237;klad zoskup&#237; z&#225;znamy podľa japonskej jazykovej verzie. Predvolen&#225; hodnota je &quot;&quot;, ktor&#225; zoskupuje na z&#225;klade invariantnej anglickej jazykovej verzie.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), ktor&#225; povoľuje zoskupenie kľ&#250;čov bez rozlišovania veľk&#253;ch a mal&#253;ch p&#237;smen. Pri hodnote True sa napr&#237;klad v&#253;raz „Hrozno“ zoskup&#237; s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), ktor&#225; umožňuje skombinovať časti textu s cieľom n&#225;jsť skupiny. Pri hodnote True sa napr&#237;klad v&#253;raz „Hro zno“ zoskup&#237; s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zov stĺpca, ktor&#253; zobrazuje podobnosť medzi vstupnou a reprezentat&#237;vnou hodnotou dan&#233;ho vstupu. Predvolen&#225; hodnota je null. V takom pr&#237;pade sa neprid&#225; nov&#253; stĺpec pre podobnosti.</li>\r\n<li><code>Threshold</code> : Č&#237;slo medzi 0,00 a 1,00 určuj&#250;ce sk&#243;re podobnosti, pri ktorom sa dve hodnoty zoskupia.\r\n     Hodnoty Hrozno“ a Hrono“ (ch&#253;ba p&#237;smeno z) sa napr&#237;klad zoskupia len vtedy, ak je t&#225;to možnosť nastaven&#225; na hodnotu nižšiu ako 0,90.\r\n    Prahov&#225; hodnota 1,00 povoľuje iba presn&#233; zhody.\r\n    (Upozorňujeme, že približn&#225; „presn&#225; zhoda“ m&#244;že ignorovať rozdiely, ako s&#250; mal&#233; a veľk&#233; p&#237;smen&#225;, slovosled alebo interpunkcia.)\r\n    Predvolen&#225; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabuľka, ktor&#225; povoľuje zoskupenie na z&#225;klade priraden&#237; vlastn&#253;ch hodn&#244;t. Mala by obsahovať stĺpce „From“ a „To“. Hodnota „Hrozno“ sa napr&#237;klad zoskup&#237; s hodnotou „Hrozienko“, ak sa zad&#225; tabuľka transform&#225;cie, v ktorej stĺpec „From“ obsahuje v&#253;raz „Hrozno“ a stĺpec „To“ obsahuje v&#253;raz „Hrozienko“. Všimnite si, že transform&#225;cia sa použije na všetky v&#253;skyty textu v tabuľke transform&#225;cie. Pomocou vyššie uvedenej tabuľky transform&#225;cie sa aj hodnoty „Hrozno je sladk&#233;“ bud&#250; zoskupovať s hodnotami „hrozienko je sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zoskupte tabuľku pridaním agregovaného stĺpca [Count], ktorý obsahuje počet zamestnancov v každom mieste (each Table.RowCount(_))).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Spojí riadky z dvoch tabuliek, ktorú sa približne zhodujú na základe daných kľúčov.",
        "Documentation.LongDescription": "<p>Spojí riadky tabuľky <code>table1</code> s riadkami tabuľky <code>table2</code> na základe približnej zhody hodnôt kľúčových stĺpcov vybratých pomocou funkcie <code>key1</code> (pre tabuľku <code>table1</code>) a <code>key2</code> (pre tabuľku <code>table2</code>).</p>\r\n<p>Približná zhoda je porovnanie založené na podobnosti textu, nie na jeho rovnakosti.</p>\r\n<p>Predvolene sa vykoná vnútorné spojenie, no možno zahrnúť voliteľný typ <code>joinKind</code> a určiť tak typ spojenia. Možnosti zahŕňajú:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Dá sa zahrnúť aj nepovinná množina <code>joinOptions</code>, ktorá určuje, ako sa majú kľúčové stĺpce porovnávať. Možnosti zahŕňajú:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Č&#237;slo medzi 1 a 8 určuj&#250;ce počet paraleln&#253;ch vl&#225;kien, ktor&#233; sa maj&#250; použiť na približn&#250; zhodu. Predvolen&#225; hodnota je 1.</li>\r\n<li><code>Culture</code> : Povoľuje zhodn&#233; z&#225;znamy na z&#225;klade pravidiel špecifick&#253;ch pre jazykov&#250; verziu. M&#244;že &#237;sť o ľubovoľn&#253; platn&#253; n&#225;zov jazykovej verzie. Možnosť jazykovej verzie ja-JP napr&#237;klad posudzuje zhodu z&#225;znamov podľa japonskej jazykovej verzie. Predvolen&#225; hodnota je &quot;&quot;, ktor&#225; posudzuje zhodu na z&#225;klade invariantnej anglickej jazykovej verzie.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), ktor&#225; povoľuje posudzovanie zhody kľ&#250;čov bez rozlišovania veľk&#253;ch a mal&#253;ch p&#237;smen. Pri hodnote True sa napr&#237;klad v&#253;raz „Hrozno“ zhoduje s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), ktor&#225; umožňuje skombinovať časti textu s cieľom n&#225;jsť zhody. Pri hodnote True sa napr&#237;klad v&#253;raz „Hro zno“ zhoduje s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>NumberOfMatches</code> : Cel&#233; č&#237;slo určuj&#250;ce maxim&#225;lny počet zhodn&#253;ch riadkov, ktor&#233; sa daj&#250; vr&#225;tiť pre každ&#253; vstupn&#253; riadok. Hodnota 1 sa napr&#237;klad vr&#225;ti pri riadku s najv&#228;čšou zhodou pre každ&#253; vstupn&#253; riadok. Ak t&#225;to možnosť nie je zadan&#225;, vr&#225;tia sa všetky zhodn&#233; riadky.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zov stĺpca, ktor&#253; zobrazuje podobnosť medzi vstupnou a reprezentat&#237;vnou hodnotou dan&#233;ho vstupu. Predvolen&#225; hodnota je null. V takom pr&#237;pade sa neprid&#225; nov&#253; stĺpec pre podobnosti.</li>\r\n<li><code>Threshold</code> : Č&#237;slo medzi 0,00 a 1,00 určuj&#250;ce sk&#243;re podobnosti, pri ktorom sa bud&#250; dve hodnoty zhodovať.\r\n    Hodnoty Hrozno“ a Hrono“ (ch&#253;ba p&#237;smeno z) sa napr&#237;klad zhoduj&#250; len vtedy, ak je t&#225;to možnosť nastaven&#225; na hodnotu nižšiu ako 0,90.\r\n    Prahov&#225; hodnota 1,00 povoľuje iba presn&#233; zhody.\r\n    (Upozorňujeme, že približn&#225; „presn&#225; zhoda“ m&#244;že ignorovať rozdiely, ako s&#250; mal&#233; a veľk&#233; p&#237;smen&#225;, slovosled a interpunkcia.)\r\n    Predvolen&#225; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabuľka, ktor&#225; povoľuje zhodn&#233; z&#225;znamy na z&#225;klade priraden&#237; vlastn&#253;ch hodn&#244;t. Mala by obsahovať stĺpce „From“ a „To“. Hodnota „Hrozno“ sa napr&#237;klad zhoduje s hodnotou „Hrozienko“, ak sa zad&#225; tabuľka transform&#225;cie, v ktorej stĺpec „From“ obsahuje v&#253;raz „Hrozno“ a stĺpec „To“ obsahuje v&#253;raz „Hrozienko“. Všimnite si, že transform&#225;cia sa použije na všetky v&#253;skyty textu v tabuľke transform&#225;cie. Pomocou vyššie uvedenej tabuľky transform&#225;cie sa aj hodnoty „Hrozno je sladk&#233;“ bud&#250; zhodovať s hodnotami „Hrozienko je sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ľavé vnútorné približné spojenie dvoch tabuliek na základe [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Vykoná približné spojenie medzi tabuľkami na zadaných stĺpcoch a vytvorí výsledok spojenia v novom stĺpci.",
        "Documentation.LongDescription": "<p>Spojí riadky tabuľky <code>table1</code> s riadkami tabuľky <code>table2</code> na základe približnej zhody kľúčových stĺpcov vybratých pomocou funkcie <code>key1</code> (pre tabuľku <code>table1</code>) a <code>key2</code> (pre tabuľku <code>table2</code>). Výsledky sa vrátia zobrazené v novom stĺpci s názvom <code>newColumnName</code>.</p>\r\n<p>Približná zhoda predstavuje porovnanie založené na podobnosti textu, nie na jeho rovnakosti.</p>\r\n<p>Voliteľná hodnota <code>joinKind</code> určuje typ spojenia, ktoré sa má vykonať. Ak sa nezadá hodnota <code>joinKind</code>, predvolene sa vykoná vonkajšie spojenie zľava. Možnosti:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Možno zahrnúť voliteľnú súpravu <code>joinOptions</code> na určenie spôsobu porovnávania kľúčových stĺpcov. Možnosti:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Č&#237;slo medzi 1 a 8 určuj&#250;ce počet paraleln&#253;ch vl&#225;kien, ktor&#233; sa maj&#250; použiť na približn&#250; zhodu. Predvolen&#225; hodnota je 1.</li>\r\n<li><code>Culture</code> : Povoľuje zhodn&#233; z&#225;znamy na z&#225;klade pravidiel špecifick&#253;ch pre jazykov&#250; verziu. M&#244;že &#237;sť o ľubovoľn&#253; platn&#253; n&#225;zov jazykovej verzie. Možnosť jazykovej verzie ja-JP napr&#237;klad posudzuje zhodu z&#225;znamov podľa japonskej jazykovej verzie. Predvolen&#225; hodnota je &quot;&quot;, ktor&#225; posudzuje zhodu na z&#225;klade invariantnej anglickej jazykovej verzie.</li>\r\n<li><code>IgnoreCase</code> : Logick&#225; hodnota (true/false), ktor&#225; povoľuje posudzovanie zhody kľ&#250;čov bez rozlišovania veľk&#253;ch a mal&#253;ch p&#237;smen. Pri hodnote True sa napr&#237;klad v&#253;raz „Hrozno“ zhoduje s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>IgnoreSpace</code> : Logick&#225; hodnota (true/false), ktor&#225; umožňuje skombinovať časti textu s cieľom n&#225;jsť zhody. Pri hodnote True sa napr&#237;klad v&#253;raz „Hro zno“ zhoduje s hodnotami „hrozno“. Predvolen&#225; hodnota je True.</li>\r\n<li><code>NumberOfMatches</code> : Cel&#233; č&#237;slo určuj&#250;ce maxim&#225;lny počet zhodn&#253;ch riadkov, ktor&#233; sa daj&#250; vr&#225;tiť pre každ&#253; vstupn&#253; riadok. Hodnota 1 sa napr&#237;klad vr&#225;ti pri riadku s najv&#228;čšou zhodou pre každ&#253; vstupn&#253; riadok. Ak t&#225;to možnosť nie je zadan&#225;, vr&#225;tia sa všetky zhodn&#233; riadky.</li>\r\n<li><code>SimilarityColumnName</code> : N&#225;zov stĺpca, ktor&#253; zobrazuje podobnosť medzi vstupnou a reprezentat&#237;vnou hodnotou dan&#233;ho vstupu. Predvolen&#225; hodnota je null. V takom pr&#237;pade sa neprid&#225; nov&#253; stĺpec pre podobnosti.</li>\r\n<li><code>Threshold</code> : Č&#237;slo medzi 0,00 a 1,00 určuj&#250;ce sk&#243;re podobnosti, pri ktorom sa bud&#250; dve hodnoty zhodovať.\r\n    Hodnoty Hrozno“ a Hrono“ (ch&#253;ba p&#237;smeno z) sa napr&#237;klad zhoduj&#250; len vtedy, ak je t&#225;to možnosť nastaven&#225; na hodnotu nižšiu ako 0,90.\r\n    Prahov&#225; hodnota 1,00 povoľuje iba presn&#233; zhody.\r\n    (Upozorňujeme, že približn&#225; „presn&#225; zhoda“ m&#244;že ignorovať rozdiely, ako s&#250; mal&#233; a veľk&#233; p&#237;smen&#225;, slovosled a interpunkcia.)\r\n    Predvolen&#225; hodnota je 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabuľka, ktor&#225; povoľuje zhodn&#233; z&#225;znamy na z&#225;klade priraden&#237; vlastn&#253;ch hodn&#244;t. Mala by obsahovať stĺpce „From“ a „To“. Hodnota „Hrozno“ sa napr&#237;klad zhoduje s hodnotou „Hrozienko“, ak sa zad&#225; tabuľka transform&#225;cie, v ktorej stĺpec „From“ obsahuje v&#253;raz „Hrozno“ a stĺpec „To“ obsahuje v&#253;raz „Hrozienko“. Všimnite si, že transform&#225;cia sa použije na všetky v&#253;skyty textu v tabuľke transform&#225;cie. Pomocou vyššie uvedenej tabuľky transform&#225;cie sa aj hodnoty „Hrozno je sladk&#233;“ bud&#250; zhodovať s hodnotami „Hrozienko je sladk&#233;“.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ľavé vnútorné približné spojenie dvoch tabuliek na základe [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Zoskupí riadky v tabuľke obsahujúce rovnaký kľúč.",
        "Documentation.LongDescription": "Zoskupí riadky <code>table</code> podľa kľúčových stĺpcov, ktoré definuje <code>key</code>. <code>key</code> môže byť názov jedného stĺpca alebo zoznam názvov stĺpcov.\r\n    Pre každú skupinu je vytvorený záznam obsahujúci kľúčové stĺpce (a ich hodnoty) spolu so všetkými agregovanými stĺpcami, ktoré zadá <code>aggregatedColumns</code>.\r\n    Voliteľne je možné zadať aj <code>groupKind</code> a <code>comparer</code>.<br>\r\n    <br>\r\n    Ak sú údaje už zoradené podľa kľúčových stĺpcov, potom je možné poskytnúť <code>groupKind</code> GroupKind.Local. V niektorých prípadoch to môže zlepšiť výkon zoskupenia,\r\n    pretože sa predpokladá, že všetky riadky s danou množinou kľúčových hodnôt sú súvislé.<br>\r\n    <br>\r\n    Keď prechádzate <code>comparer</code>, všimnite si, že ak odlišné kľúče berie ako rovnaké, môže sa umiestniť riadok do skupiny, ktorej kľúče sa líšia od jeho vlastného kľúča.<br>\r\n    <br>\r\n    Táto funkcia nezaručuje poradie riadkov, ktoré vráti.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Zoskupte tabuľku, pričom pridajte agregačný stĺpec [total] obsahujúci súčet cien (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Vloží zoznam riadkov do tabuľky v zadanej pozícii.",
        "Documentation.LongDescription": "Vráti tabuľku so zoznamom riadkov <code>rows</code> vloženým do tabuľky <code>table</code> v danej pozícii <code>offset</code>. Každý stĺpec v riadku, ktorý sa má vložiť, sa musí zhodovať s typmi stĺpcov tabuľky.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vložte do tabuľky riadok na pozícii 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Vložte do tabuľky dva riadky na pozícii 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Spojí riadky z dvoch zhodujúcich sa tabuliek na základe daných kľúčov.",
        "Documentation.LongDescription": "<p>Spojí riadky tabuľky <code>table1</code> s riadkami tabuľky <code>table2</code> na základe rovnosti hodnôt kľúčových stĺpcov vybratých pomocou funkcie <code>key1</code> (pre tabuľku <code>table1</code>) a <code>key2</code> (pre tabuľku <code>table2</code>).</p>\r\n<p>Predvolene sa vykoná vnútorné spojenie, no možno zahrnúť voliteľný parameter <code>joinKind</code> a určiť tak typ spojenia. Možnosti zahŕňajú:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Možno zahrnúť voliteľnú súpravu <code>keyEqualityComparers</code> na určenie spôsobu porovnávania kľúčových stĺpcov. Tento parameter je v súčasnosti určený iba na interné použitie.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojí dve tabuľky pomocou jedného kľúčového stĺpca.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Spojte dve tabuľky s konfliktnými názvami stĺpcov pomocou viacerých kľúčových stĺpcov.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Vráti najväčšiu hodnotu riadkov pomocou daných kritérií.",
        "Documentation.LongDescription": "Vráti najväčšiu hodnotu riadkov v tabuľke <code>table</code> s daným kritériom <code>comparisonCriteria</code>.\r\n    Po zoradení riadkov sa musí stanoviť parameter <code>countOrCondition</code> a ďalej tak filtrovať výsledok. Nezabúdajte, že algoritmus zoradenia nie je zárukou zobrazenia výsledku s pevným zoradením. Parameter <code>countOrCondition</code> môže mať viacero formátov:\r\n    <ul>\r\n        <li> Ak je stanovený počet, vráti sa zoznam s najviac <code>countOrCondition</code> položkami vo vzostupnom poradí. </li>\r\n        <li> Ak je stanovená podmienka, vráti sa zoznam položiek, ktoré pôvodne spĺňajú podmienku. Hneď ako niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v tabuľke riadok s najväčšou hodnotou v stĺpci [a] s podmienkou [a] > 0. Pred použitím filtra sa riadky zoradia.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Nájdite v tabuľke riadok s najväčšou hodnotou v stĺpci [a] s podmienkou [b] > 0. Pred použitím filtra sa riadky zoradia.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Vráti najmenšiu hodnotu riadkov pomocou daných kritérií.",
        "Documentation.LongDescription": "Vráti najmenšiu hodnotu riadkov v tabuľke <code>table</code> s daným kritériom <code>comparisonCriteria</code>. Po zoradení riadkov sa musí stanoviť parameter <code>countOrCondition</code> a ďalej tak filtrovať výsledok. Nezabúdajte, že algoritmus zoradenia nie je zárukou zobrazenia výsledku s pevným zoradením. Parameter <code>countOrCondition</code> môže mať viacero formátov:\r\n    <ul>\r\n        <li> Ak je stanovený počet, vráti sa zoznam s najviac <code>countOrCondition</code> položkami vo vzostupnom poradí. </li>\r\n        <li> Ak je stanovená podmienka, vráti sa zoznam položiek, ktoré pôvodne spĺňajú podmienku. Hneď ako niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v tabuľke riadok s najmenšou hodnotou v stĺpci [a] s podmienkou [a] < 3. Pred použitím filtra sa riadky zoradia.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Nájdite v tabuľke riadok s najmenšou hodnotou v stĺpci [a] s podmienkou [b] < 0. Pred použitím filtra sa riadky zoradia.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Vykoná spojenie medzi tabuľkami na zadaných stĺpcoch a vytvorí výsledok spojenia v novom stĺpci.",
        "Documentation.LongDescription": "<p>Spojí riadky tabuľky <code>table1</code> s riadkami tabuľky <code>table2</code> na základe rovnosti hodnôt kľúčových stĺpcov vybratých pomocou funkcie <code>key1</code> (pre tabuľku <code>table1</code>) a <code>key2</code> (pre tabuľku <code>table2</code>). Výsledky sa zadajú do stĺpca s názvom <code>newColumnName</code>.</p>\r\n<p>Voliteľná hodnota <code>joinKind</code> určuje typ spojenia, ktoré sa má vykonať. Ak sa nezadá konkrétna hodnota <code>joinKind</code>, predvolene sa vykoná vonkajšie spojenie zľava. </p>\r\n<p>Možno zahrnúť voliteľnú súpravu <code>keyEqualityComparers</code> na určenie spôsobu porovnávania kľúčových stĺpcov. Táto funkcia je v súčasnosti určená iba na interné použitie.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Spojí dve tabuľky pomocou jedného kľúčového stĺpca.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "S daným párom stĺpcov predstavujúcich páry atribút-hodnota otočí údaje v stĺpci atribútu do hlavičiek stĺpcov.",
        "Documentation.LongDescription": "S daným párom stĺpcov predstavujúcich páry atribút-hodnota otočí údaje v stĺpci atribútu do hlavičiek stĺpcov.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Použite hodnoty \"a\", \"b\" a \"c\" v stĺpci atribútu tabuľky <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> a otočte ich do vlastného stĺpca.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Použite hodnoty \"a\", \"b\" a \"c\" v stĺpci atribútu tabuľky <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> a otočte ich do vlastného stĺpca.  K atribútu \"c\" pre kľúč \"x\" je priradených viacero hodnôt, a tak na vyriešenie konfliktu použite funkciu List.Max.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Nahradí zadaný rozsah riadkov uvedenými riadkami.",
        "Documentation.LongDescription": "Nahradí zadaný počet riadkov <code>count</code> vo vstupe <code>table</code> zadaným parametrom <code>rows</code>, začínajúc po umiestnení <code>offset</code>. Parameter <code>rows</code> tvorí zoznam záznamov.\r\n    <ul>\r\n       <li><code>table</code>: Tabuľka, v ktorej sa vykoná nahradenie.</li>\r\n       <li><code>offset</code>: Počet riadkov, ktoré sa majú vynechať pred spustením nahradzovania.</li>\r\n       <li><code>count</code>: Počet riadkov, ktoré sa majú nahradiť.</li>\r\n       <li><code>rows</code>: Zoznam záznamov riadkov, ktoré sa majú vložiť do tabuľky <code>table</code> v umiestnení zadanom pomocou funkcie <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Počnúc pozíciou 1 nahraďte 3 riadky.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Nahradí jednu hodnotu v zadaných stĺpcoch inou hodnotou.",
        "Documentation.LongDescription": "Nahradí hodnotu <code>oldValue</code> v zadaných stĺpcoch tabuľky <code>table</code> hodnotou <code>newValue</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte text „zbohom“ textom „svet“ v stĺpci B, ktorý zodpovedá iba celej hodnote.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Nahraďte text „váš“ textom „alebo“ v stĺpci B, ktorý zodpovedá ľubovoľnej časti hodnoty.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonymizujte mená zamestnancov v USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonymizujte všetky stĺpce zamestnancov v USA.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Rozdelí zadané stĺpce do množiny ďalších stĺpcov pomocou zadanej funkcie rozdelenia.",
        "Documentation.LongDescription": "Rozdelí zadané stĺpce do množiny ďalších stĺpcov pomocou zadanej funkcie rozdelenia.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdeľte stĺpec [Name] v mieste, kde sa nachádza znak „i“, na dva stĺpce",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Preloží množinu stĺpcov v tabuľke na páry atribút-hodnota.",
        "Documentation.LongDescription": "Preloží množinu stĺpcov v tabuľke na páry atribút-hodnota v kombinácii so zvyškom hodnôt v každom riadku.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Použite stĺpce \"a\", \"b\" a \"c\" v tabuľke <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> a zrušte ich otočenie na páry atribút-hodnota.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Preloží všetky stĺpce iné než zo zadanej skupiny na páry atribút-hodnota.",
        "Documentation.LongDescription": "Preloží všetky stĺpce iné než zo zadanej skupiny na páry atribút-hodnota v kombinácii so zvyškom hodnôt v každom riadku.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Preloží všetky stĺpce iné než zo zadanej skupiny na páry atribút-hodnota v kombinácii so zvyškom hodnôt v každom riadku.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Osobná analýza služby Microsoft Teams",
        "Documentation.LongDescription": "<p>Konektor Teams Analytics vám umožní získať prehľady o tom, ako používate Teams. Údaje sú k dispozícii pre vašu osobnú aktivitu v službe Teams, ako aj aktivitu v tímoch, ktorých ste členom.</p>\r\n<p>Dostupné sú údaje za posledných 90 dní. </p>\r\n<p> Podrobnosti o jednotlivých typoch údajoch nájdete v tejto pomocnej dokumentácii </p>\r\n<ul>\r\n<li><b>Používanie služby Teams:</b> https://docs.microsoft.com/sk-sk/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Aktivita používateľa v službe Teams:</b> https://docs.microsoft.com/sk-sk/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Zadajte názvy organizácie a projektu.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Vráti tabuľku informačných kanálov OData ponúkaných službou Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Vráti binárny formát, ktorý prečíta binárnu hodnotu.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý prečíta binárnu hodnotu.  Ak je zadaná položka <code>length</code>, binárna hodnota bude obsahovať taký počet bajtov.  Ak položka <code>length</code> nie je zadaná, binárna hodnota bude obsahovať zostávajúci počet bajtov.  Položku <code>length</code> možno zadať buď ako číslo, alebo ako binárny formát s dĺžkou, ktorá predchádza binárne údaje.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Vráti logickú hodnotu na základe kontroly rovnosti dvoch daných hodnôt.",
        "Documentation.LongDescription": "Vráti <code>logickú hodnotu</code> na základe kontroly rovnosti dvoch daných hodnôt <code>x</code> a <code>y</code> pomocou uvedenej <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> je <code>porovnávač</code>, ktorý sa používa na riadenie porovnania.\r\n        Funkcia porovnávača je funkcia, ktorá akceptuje dva argumenty a vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá hodnota.\r\n        Porovnávače možno použiť na poskytovanie porovnaní bez rozlišovania malých a veľkých písmen alebo s ohľadom na jazykovú verziu a miestne nastavenie.\r\n      </div>\r\n      <div>\r\n        V jazyku vzorcov sú k dispozícii tieto vstavané porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: Používa sa na presné poradové porovnanie</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Používa sa na presné poradové porovnanie bez rozlišovania malých a veľkých písmen</li>\r\n        <li> <code>Comparer.FromCulture</code>: Používa sa na vykonanie porovnania s ohľadom na jazykovú verziu</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porovnaj \"1\" a \"A\" s použitím miestneho nastavenia \"en-US\" a zisti, či sa hodnoty rovnajú.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v miestnom časovom pásme. Táto hodnota je pevne stanovená a pri ďalších volaniach sa nezmení.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetime</code> nastavenú na aktuálny dátum a čas v systéme. Táto hodnota je pevne stanovená a nezmení sa pri ďalších volaniach, na rozdiel od hodnoty DateTime.LocalNow, ktorá môže vrátiť odlišné hodnoty počas uskutočnenia výrazu.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v miestnom časovom pásme.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetime</code> nastavenú na aktuálny dátum a čas v systéme.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v miestnom časovom pásme. Táto hodnota je pevne stanovená a nezmení sa pri ďalších volaniach.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetime</code> nastavenú na aktuálny dátum a čas v systéme. Vrátená hodnota obsahuje informácie o časovom pásme predstavujúce miestne časové pásmo. Táto hodnota je pevne stanovená a nezmení sa pri ďalších volaniach, na rozdiel od hodnoty DateTimeZone.LocalNow, ktorá môže vrátiť odlišné hodnoty počas uskutočnenia výrazu.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v čase UTC (časové pásmo GMT). Táto hodnota je pevne stanovená a nezmení sa pri ďalších volaniach.",
        "Documentation.LongDescription": "Vráti aktuálny dátum a čas v čase UTC (časové pásmo GMT). Táto hodnota je pevne stanovená a nezmení sa pri ďalších volaniach.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v miestnom časovom pásme.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetimezone</code> nastavenú na aktuálny dátum a čas v systéme.\r\n    Vrátená hodnota obsahuje informácie o časovom pásme predstavujúce miestne časové pásmo.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Vráti aktuálny dátum a čas v čase UTC (časové pásmo GMT).",
        "Documentation.LongDescription": "Vráti aktuálny dátum a čas v čase UTC (časové pásmo GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Získajte aktuálny dátum a čas v pásme UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Vráti nepriehľadný identifikátor pre vyhodnotenie, ktoré je momentálne spustené.",
        "Documentation.LongDescription": "Vráti nepriehľadný identifikátor pre vyhodnotenie, ktoré je momentálne spustené.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Vracia nepriehľadný identifikátor na koreláciu prichádzajúcich požiadaviek s odchádzajúcimi požiadavkami.",
        "Documentation.LongDescription": "Vracia nepriehľadný identifikátor na koreláciu prichádzajúcich požiadaviek s odchádzajúcimi požiadavkami.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Zapíše položku sledovania, ak je sledovanie povolené, a vráti hodnotu.",
        "Documentation.LongDescription": "Zapíše sledovanie <code>message</code>, ak je sledovanie povolené, a vráti <code>value</code>. Voliteľný parameter <code>delayed</code> určuje, či sa má oneskoriť vyhodnotenie <code>value</code>, kým sa nezačne správa sledovať. <code>traceLevel</code> môže mať jednu z nasledujúcich hodnôt:\r\n    <code>TraceLevel.Critical</code>,\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Sleduje správu pred vyvolaním funkcie Text.From a vráti výsledok.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Predvolený poskytovateľ identity pre aktuálneho hostiteľa.",
        "Documentation.LongDescription": "Predvolený poskytovateľ identity pre aktuálneho hostiteľa.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Nahromadí súhrnnú hodnotu z položiek v zozname.",
        "Documentation.LongDescription": "Nahromadí súhrnnú hodnotu z položiek v zozname <code>list</code> pomocou parametra <code>accumulator</code>.\r\n    Možno nastaviť voliteľný počiatočný parameter <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nahromadí súhrnnú hodnotu z položiek v zozname {1, 2, 3, 4, 5} pomocou parametra ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Vygeneruje zoznam hodnôt date s danou počiatočnou hodnotou, počtom a hodnotou prírastku trvania.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt <code>datetimezone</code> s veľkosťou <code>count</code>, počnúc od hodnoty <code>start</code>. Daný prírastok <code>step</code> je hodnota <code>duration</code>, ktorá sa pripočítava ku každej hodnote.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 10 hodnôt, počnúc 5 minútami pred Novým rokom (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) s prírastkom 1 minúta (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Vygeneruje zoznam hodnôt datetime s danou počiatočnou hodnotou, počtom a hodnotou prírastku trvania.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt <code>datetime</code> s veľkosťou <code>count</code>, počnúc od hodnoty <code>start</code>. Daný prírastok <code>step</code> je hodnota <code>duration</code>, ktorá sa pripočítava ku každej hodnote.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 10 hodnôt, počnúc 5 minútami pred Novým rokom (#datetime(2011, 12, 31, 23, 55, 0)) s prírastkom 1 minúta (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Vygeneruje zoznam hodnôt datetimezone s danou počiatočnou hodnotou, počtom a hodnotou prírastku trvania.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt <code>date</code> s veľkosťou <code>count</code>, počnúc od hodnoty <code>start</code>. Daný prírastok <code>step</code> je hodnota <code>duration</code>, ktorá sa pripočítava ku každej hodnote.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 5 hodnôt, počnúc Silvestrom (#date(2011, 12, 31)) s prírastkom 1 deň (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Vygeneruje zoznam hodnôt trvania s danou počiatočnou hodnotou, počtom a hodnotou prírastku trvania.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt <code>count</code> <code>duration</code>, počnúc od hodnoty <code>start</code> a s prírastkom daným funkciou <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 5 hodnôt, počnúc 1 hodinou a s prírastkom o jednu hodinu.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Vygeneruje zoznam hodnôt.",
        "Documentation.LongDescription": "Vygeneruje zoznam hodnôt pomocou poskytnutých funkcií. Funkcia <code>initial</code> vygeneruje počiatočnú hodnotu kandidáta, ktorá sa potom testuje na základe <code>condition</code>.\r\n Ak je kandidátska hodnota schválená, vráti sa ako súčasť výsledného zoznamu a ďalšia kandidátska hodnota sa vygeneruje odovzdaním novo schválenej hodnoty do <code>next</code>.\r\n Keď sa hodnote kandidáta nepodarí zhodovať <code>condition</code>, proces generovania zoznamu sa zastaví.\r\n Na transformáciu položiek vo výslednom zozname možno zadať voliteľný parameter <code>selector</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam tak, že začnete od desiatich a opakovane znížte o jednu položku a zabezpečte, aby každá položka bola väčšia ako nula.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Vygenerujte zoznam záznamov obsahujúci hodnoty x a y, kde „x“ predstavuje hodnotu a „y“ zoznam. Hodnota „x“ by nemala byť vyššia ako 10 a mala by vyjadrovať počet položiek v zozname „y“. Po vygenerovaní zoznamu vráťte iba hodnoty „x“.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Vloží hodnoty do zoznamu s daným indexom.",
        "Documentation.LongDescription": "Vráti nový zoznam vytvorený vložením hodnôt <code>values</code> do zoznamu <code>list</code> s indexom <code>index</code>. Prvá pozícia v zozname má index 0.\r\n      <ul>\r\n        <li><code>list</code>: Cieľový zoznam, do ktorého sa majú vložiť hodnoty.</li>\r\n        <li><code>index</code>: Index cieľového zoznamu (<code>list</code>), do ktorého sa majú vložiť hodnoty. Prvá pozícia v zozname má index 0.</li>\r\n        <li><code>values</code>: Zoznam hodnôt, ktoré sa majú vložiť do zoznamu <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vložte zoznam ({3, 4}) do cieľového zoznamu ({1, 2, 5}) s indexom 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Vložte zoznam s vnoreným zoznamom ({1, {1.1, 1.2}}) do cieľového zoznamu ({2, 3, 4}) s indexom 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Nahradí počet hodnôt, počnúc od pozície s náhradnými hodnotami.",
        "Documentation.LongDescription": "Nahradí počet hodnôt: <code>count</code> v zozname <code>list</code> zoznamom <code>replaceWith</code>, počnúc od stanovenej pozície <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte zoznam {7, 8, 9} v zozname {1, 2, 7, 8, 9, 5} zoznamom {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "V zozname vyhľadá stanovenú hodnotu a nahradí ju.",
        "Documentation.LongDescription": "V zozname hodnôt <code>list</code> vyhľadá hodnotu <code>oldValue</code> a nahradí každý výskyt náhradnou hodnotou <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte všetky hodnoty \"a\" v zozname {\"a\", \"B\", \"a\", \"a\"} hodnotou \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Vygeneruje zoznam hodnôt time s danou počiatočnou hodnotou, počtom a hodnotou prírastku trvania.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt <code>time</code> s veľkosťou <code>count</code>, počnúc od hodnoty <code>start</code>. Daný prírastok <code>step</code> je hodnota <code>duration</code>, ktorá sa pripočítava ku každej hodnote.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 4 hodnôt, počnúc poludním (#time(12, 0, 0)) s prírastkom jedna hodina (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Vráti zoznam, ktorého prvky sa transformujú zo vstupného zoznamu pomocou stanovených funkcií.",
        "Documentation.LongDescription": "Vráti zoznam, ktorého prvky sa premietajú zo vstupného zoznamu.<br>\r\n    <br>\r\n    Funkcia <code>collectionTransform</code> transformuje každý prvok na sprostredkujúci zoznam a funkcia <code>resultTransform</code> prijíma pôvodný prvok a položku zo sprostredkujúceho zoznamu, aby bolo možné vytvoriť konečný výsledok.<br>\r\n    <br>\r\n    Funkcia <code>collectionTransform</code> má podpis <code>(x ako ľubovoľný) ako zoznam => ...</code>, kde <code>x</code> je prvok v <code>list</code>.\r\n    Funkcia <code>resultTransform</code> premieta tvar výsledku a má podpis <code>(x ako ľubovoľný, y ako ľubovoľný) ako ľubovoľný => ...</code>, kde <code>x</code> je prvok v <code>list</code> a <code>y</code> je prvok zo zoznamu vygenerovaný zadaním <code>x</code> do <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Zjednodušte štruktúru zoznamu ľudí a ich domácich zvierat.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Vráti náhodné číslo.",
        "Documentation.LongDescription": "Vráti náhodné číslo v rozsahu 0 až 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Získajte náhodné číslo.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Pridá pole k záznamu.",
        "Documentation.LongDescription": "Pridá pole k záznamu <code>record</code> s daným názvom poľa <code>fieldName</code> a s hodnotou <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pridajte k záznamu pole Address.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Nahradí text v rámci uvedeného vstupu.",
        "Documentation.LongDescription": "Nahradí text <code>old</code> v pôvodnom zázname <code>text</code> textom <code>new</code>. Túto funkciu nahrádzača možno použiť v časti <code>List.ReplaceValue</code> a <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte text \"hE\" textom \"He\" v reťazci \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Nahradí hodnoty v rámci uvedeného vstupu.",
        "Documentation.LongDescription": "Nahradí hodnotu <code>old</code> v pôvodnom zázname <code>value</code> hodnotou <code>new</code>. Túto funkciu nahrádzača možno použiť v časti <code>List.ReplaceValue</code> a <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte hodnotu 11 hodnotou 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Vráti výsledok vo formáte JSON z rozhrania Smartsheet API",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Uskutoční volanie do zadaného koncového bodu rozhrania Smartsheet 2.0 REST API a vráti výsledok ako záznam vo formáte JSON.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne údaje z hárkov koncového bodu rozhrania Smartsheet API s ďalšími zadanými argumentmi",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabuľka s informáciami o hárkoch, ktorú vrátilo rozhranie API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Vráti funkciu, ktorá nerozdeľuje, pričom vráti príslušný argument ako jednoprvkový zoznam.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá nerozdeľuje, pričom vráti príslušný argument ako jednoprvkový zoznam.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v prázdnom znaku.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v prázdnom znaku.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup prázdnymi znakmi a spracuje úvodzovky ako akýkoľvek iný znak.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Rozdelí tabuľku do zoznamu tabuliek na základe počtu skupín a zadaného stĺpca.",
        "Documentation.LongDescription": "Rozdelí tabuľku <code>table</code> do zoznamu <code>groups</code> tabuliek na základe hodnoty <code>column</code> a funkcie <code>hash</code>.\r\n    Funkcia <code>hash</code> sa použije na hodnotu riadka <code>column</code> s cieľom získať hodnotu hash pre príslušný riadok. Modulo hodnoty hash <code>groups</code> určí, do ktorej z vrátených tabuliek sa vloží riadok.\r\n    <ul>\r\n       <li><code>table</code>: Tabuľka, ktorá sa má rozdeliť.</li>\r\n       <li><code>column</code>: Stĺpec, ktorý má získať hodnotu hash, s cieľom určiť, v ktorej vrátenej tabuľke sa nachádza riadok.</li>\r\n       <li><code>groups</code>: Počet tabuliek, do ktorých sa rozdelí vstupná tabuľka.</li>\r\n       <li><code>hash</code>: Funkcia použitá na získanie hodnoty hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rozdeľte tabuľku <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> do 2 tabuliek v stĺpci [a] použitím hodnoty stĺpcov ako funkcie hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Vráti časť <code>text</code> medzi zadanými hodnotami <code>startDelimiter</code> a <code>endDelimiter</code>.\r\n    Voliteľná číselná hodnota <code>startIndex</code> určuje, ktorá hodnota <code>startDelimiter</code> sa má vziať do úvahy.\r\n    Voliteľný zoznam <code>startIndex</code> určuje, ktorý výskyt hodnoty <code>startDelimiter</code> sa má vziať do úvahy a či sa má indexovanie vykonať od začiatku alebo od konca vstupu.\r\n    <code>endIndex</code> je podobné, ale indexovanie je relatívne vzhľadom na <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získať časť 111 (222) 333 (444) medzi (prvou) ľavou zátvorkou a (prvou) pravou zátvorkou, ktorá za ňou nasleduje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Získať časť 111 (222) 333 (444) medzi druhou ľavou zátvorkou a prvou pravou zátvorkou, ktorá za ňou nasleduje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Získať časť 111 (222) 333 (444) medzi druhou ľavou zátvorkou od konca a druhou pravou zátvorkou, ktorá za ňou nasleduje.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Vloží jednu textovú hodnotu do inej na danej pozícii.",
        "Documentation.LongDescription": "Vráti výsledok vloženia textovej hodnoty <code>newText</code> do textovej hodnoty <code>text</code> na pozícii <code>offset</code>. Pozície začínajú číslom 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Vložte znak \"C\" medzi znaky \"B\" a \"D\" v hodnote \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Vráti nový, náhodný identifikátor GUID.",
        "Documentation.LongDescription": "Vráti nový, náhodný identifikátor GUID.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Nahradí všetky výskyty daného podreťazca v texte.",
        "Documentation.LongDescription": "Vráti výsledok nahradenia všetkých výskytov textovej hodnoty <code>old</code> v textovej hodnote <code>text</code> textovou hodnotou <code>new</code>. Táto funkcia rozlišuje malé a veľké písmená.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte každý výskyt textu \"the\" vo vete textom \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Odstráni rozsah znakov a vloží novú hodnotu na zadanú pozíciu.",
        "Documentation.LongDescription": "Vráti výsledok odstránenia počtu znakov: <code>count</code> z textovej hodnoty <code>text</code>, počnúc na pozícii <code>offset</code>, a potom vloží textovú hodnotu <code>newText</code> na rovnakú pozíciu v hodnote <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte jeden znak na pozícii 2 v textovej hodnote \"ABGF\" novou textovou hodnotou \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Pridá kľúč k danému typu tabuľky.",
        "Documentation.LongDescription": "Pridá kľúč k danému typu tabuľky.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Vráti zoznam identít, ktoré bude podmienka prijímať.",
        "Documentation.LongDescription": "<p>Pomocou zadaného <code>identityProvider</code> konvertuje <code>condition</code> na zoznam identít, pre ktoré by <code>condition</code> vrátilo hodnotu <code>true</code> vo všetkých kontextoch autorizácie s poskytovateľom identity <code>identityProvider</code>. Ak <code>condition</code> nie je možné konvertovať na zoznam identít, vyvolá sa chyba – napríklad ak sa <code>condition</code> pri rozhodovaní obráti na iné atribúty než na identity používateľa alebo skupiny.</p>\r\n    <p>Upozorňujeme, že tento zoznam identít predstavuje identity tak, ako ich zobrazuje <code>condition</code>, a to bez vykonania normalizácie (ako napríklad rozšírenie skupiny).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Komprimuje binárnu hodnotu použitím zadaného typu kompresie.",
        "Documentation.LongDescription": "Skomprimuje binárnu hodnotu použitím zadaného typu kompresie. Výsledkom tohto volania je komprimovaná kópia vstupu. Typy kompresie zahŕňajú:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Komprimujte binárnu hodnotu.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Dekomprimuje binárnu hodnotu použitím daného typu kompresie.",
        "Documentation.LongDescription": "Dekomprimuje binárnu hodnotu použitím daného typu kompresie.  Výsledkom tohto volania je dekomprimovaná kópia vstupu. Medzi typy kompresie patria:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekomprimuje binárnu hodnotu.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Vráti podmnožinu binárnej hodnoty začínajúcu posunom.",
        "Documentation.LongDescription": "Vráti podmnožinu binárnej hodnoty začínajúcu posunom <code>binary</code>. Voliteľný parameter <code>offset</code> určuje maximálnu dĺžku podmnožiny.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vráti podmnožinu binárnej hodnoty začínajúcu posunom 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Vráti podmnožinu s dĺžkou 2 z posunu 6 binárnej hodnoty.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Rozdelí zadaný binárny údaj na zoznam binárnych údajov použitím zadanej veľkosti stránky.",
        "Documentation.LongDescription": "Rozdelí <code>binary</code> na zoznam binárnych súborov, kde prvým prvkom výstupného zoznamu je binárny súbor obsahujúci prvé bajty (<code>pageSize</code>) zo\r\n    zdrojového binárneho súboru. Ďalším prvkom vo výstupnom zozname je binárny súbor obsahujúci ďalšie bajty (<code>pageSize</code>) zo zdrojového binárneho súboru atď.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Vytvorí alebo rozšíri binárny súbor s používateľom definovanými obslužnými programami pre operácie dotazu a akcií.",
        "Documentation.LongDescription": "<p>Vráti zobrazenie tabuľky <code>binary</code>, kde sa funkcie zadané v <code>handlers</code> používajú namiesto predvoleného správania operácie, keď sa daná operácia použije na zobrazenie.</p>\r\n<p>Ak je <code>binary</code> poskytnuté, funkcie obslužných programov sú voliteľné. Ak nie je <code>binary</code> poskytnuté, funkcia obslužných programov <code>GetStream</code> je vyžadovaná. Ak pre operáciu nie je zadaná funkcia obslužného programu, na zobrazenie <code>binary</code> sa použije predvolené správanie operácie (okrem prípadu <code>GetExpression</code>).</p>\r\n<p>Funkcie obslužných programov musia vrátiť hodnotu, ktorá je sémanticky ekvivalentná výsledku použitia operácie na zobrazenie <code>binary</code> (alebo v prípade <code>GetExpression</code> na výsledné zobrazenie).</p>\r\n<p>Ak funkcia obslužného programu vyvolá chybu, na zobrazenie sa použije predvolené správanie operácie.</p>\r\n<p><code>Binary.View</code> možno použiť na implementáciu zbalenia do zdroja údajov – preklad dotazov M do operácií špecifických pre zdroj (napríklad na stiahnutie sekcie súboru).</p>\r\n<p>Podrobnejší popis funkcie <code>Binary.View</code> nájdete v publikovanej dokumentácii vlastného konektora Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Na určenie dĺžky vytvorte základné zobrazenie, ktoré nevyžaduje prístup k údajom.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Vráti binárny formát s poradím bajtov zadaným pomocou funkcie.",
        "Documentation.LongDescription": "Vráti binárny formát s poradím bajtov zadaným pomocou výrazu <code>binaryFormat</code>.  Predvolené poradie bajtov je <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Vráti binárny formát, ktorý vyberie nasledujúci binárny formát na základe už prečítanej hodnoty.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý vyberie nasledujúci binárny formát na základe už prečítanej hodnoty.  Hodnota binárneho formátu vytvorená touto funkciou funguje v etapách:<ul>\r\n<li>Binárny formát zadaný parametrom <code>binaryFormat</code> sa použije na prečítanie hodnoty.</li>\r\n<li>Táto hodnota sa odovzdá funkcii výberu zadanej parametrom <code>chooseFunction</code>.</li>\r\n<li>Funkcia výberu skontroluje hodnotu a vráti druhý binárny formát.</li>\r\n<li>Druhý binárny formát sa použije na prečítanie druhej hodnoty.</li>\r\n<li>Ak sa zadá funkcia kombinovania, prvá a druhá hodnota sa odovzdá funkcii kombinovania a vráti sa výsledná hodnota.</li>\r\n<li>Ak funkcia kombinovania nie je zadaná, vráti sa druhá hodnota.</li>\r\n<li>Vráti sa druhá hodnota.</li>\r\n</ul>Voliteľný parameter <code>type</code> označuje typ binárneho formátu, ktorý vráti funkcia výberu.  Možno zadať buď typ <code>type any</code>, <code>type list</code>, alebo <code>type binary</code>.  Ak parameter <code>type</code> nie je zadaný, použije sa typ <code>type any</code>.   Ak sa použije typ <code>type list</code> alebo <code>type binary</code>, systém môže namiesto hodnoty uloženej do medzipamäte vrátiť hodnotu prúdu údajov <code>binary</code> alebo hodnotu <code>list</code>, čo môže zmenšiť množstvo pamäte potrebné na prečítanie formátu.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Prečítajte zoznam bajtov, v ktorom je počet prvkov určený prvým bajtom.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Prečítajte zoznam bajtov, v ktorom je počet prvkov určený prvým bajtom, a zachovajte prvý prečítaný bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Prečítajte zoznam bajtov, v ktorom je počet prvkov určený prvým bajtom, a to pomocou zoznamu prúdu údajov.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Vráti binárny formát, ktorý prečíta skupinu položiek.",
        "Documentation.LongDescription": "Parametre sú takéto:\r\n<ul>\r\n<li>Parameter <code>binaryFormat</code> zadá binárny formát hodnoty kľúča.</li>\r\n<li>Parameter <code>group</code> poskytne informácie o skupine známych položiek.</li>\r\n<li>Voliteľný parameter <code>extra</code> možno použiť na zadanie funkcie, ktorá vráti hodnotu binárneho formátu pre hodnotu za každým neočakávaným kľúčom. Ak parameter <code>extra</code> nie je zadaný, potom v prípade výskytu neočakávaných hodnôt kľúča dôjde k chybe.</li>\r\n</ul>\r\nParameter <code>group</code> zadáva zoznam definícií položiek. Každá definícia položky je zoznam obsahujúci 3 – 5 hodnôt takto:\r\n<ul>\r\n<li>Hodnota kľúča. Hodnota kľúča, ktorý zodpovedá položke. Musí byť jedinečná v rámci množiny položiek.</li>\r\n<li>Formát položky. Binárny formát zodpovedajúci hodnote položky. Takto môže mať každá položka iný formát. </li>\r\n<li>Výskyt položky. Hodnota <code>BinaryOccurrence.Type</code> predstavujúca počet očakávaných výskytov položky v skupine. Požadované položky, ktoré nie sú prítomné, spôsobia chybu. Požadované alebo voliteľné duplicitné položky sa spracujú rovnako ako neočakávané hodnoty kľúča.</li>\r\n<li>Predvolená hodnota položky (voliteľné). Ak sa predvolená hodnota položky vyskytne v zozname definícií položiek a nemá hodnotu null, použije sa namiesto predvolenej hodnoty. Predvolená hodnota pre opakujúce sa alebo voliteľné položky je null a predvolená hodnota pre opakujúce sa hodnoty je prázdny zoznam { }.</li>\r\n<li>Transformácia hodnoty položky (voliteľné). Ak je funkcia transformácie hodnoty položky prítomná v zozname definícií položiek a nemá hodnotu null, potom bude vyvolaná na transformáciu hodnoty položky ešte pred jej návratom. Funkcia transformácie sa vyvolá iba v prípade, keď sa položka vyskytne vo vstupe (nikdy sa nevyvolá s predvolenou hodnotou). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Podľa nasledujúcich informácií sa hodnota považuje za hodnotu kľúča, keď ide o jeden bajt, so 4 očakávanými položkami v skupine, pričom všetky majú za kľúčom bajt údajov.  Položky sa vyskytujú vo vstupe takto:\r\n<ul>\r\n<li>Vyžaduje sa kľúč 1 a vyskytuje sa s hodnotou 11.</li>\r\n<li>Kľúč 2 sa opakuje a vyskytuje sa dvakrát s hodnotou 22, pričom výsledkom je hodnota { 22, 22 }.</li>\r\n<li>Kľúč 3 je voliteľný a nevyskytuje sa, pričom výsledkom je hodnota null.</li>\r\n<li>Kľúč 4 sa opakuje, no nevyskytuje sa, pričom výsledkom je hodnota { }.</li>\r\n<li>Kľúč 5 nie je súčasťou skupiny, no vyskytuje sa raz s hodnotou 55.  Mimoriadna funkcia sa vyvolá s hodnotou kľúča 5 a vráti formát zodpovedajúci tejto hodnote (BinaryFormat.Byte).  Hodnota 55 sa prečíta a zahodí.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Nasledujúci príklad ilustruje transformáciu hodnoty položky a predvolenú hodnotu položky.   Opakujúca sa hodnota s kľúčom 1 sčíta zoznam hodnôt prečítaných pomocou funkcie List.Sum.  Voliteľná položka s kľúčom 2 má namiesto hodnoty null predvolenú hodnotu 123.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Vráti binárny formát obmedzujúci množstvo údajov, ktoré možno prečítať.",
        "Documentation.LongDescription": "Vráti binárny formát obmedzujúci množstvo údajov, ktoré možno prečítať.  Na čítanie až do konca údajov možno použiť formát <code>BinaryFormat.List</code> aj <code>BinaryFormat.Binary</code>.  Hodnotu <code>BinaryFormat.Length</code> možno použiť na obmedzenie počtu prečítaných bajtov.  Parameter <code>binaryFormat</code> určuje binárny formát, ktorý sa má obmedziť.  Parameter <code>length</code> určuje počet bajtov, ktoré sa majú prečítať.  Parameter <code>length</code> môže byť buď číselná hodnota, alebo hodnota binárneho formátu, ktorá zadáva formát vyskytovanej hodnoty dĺžky, ktorá predchádza čítanú hodnotu.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Obmedzte počet prečítaných bajtov na hodnotu 2 pri čítaní zoznamu bajtov.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Obmedzte počet prečítaných bajtov pri čítaní zoznamu bajtov na hodnotu bajtov predchádzajúcu zoznam.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Vráti binárny formát, ktorý transformuje hodnoty prečítané iným binárnym formátom.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý transformuje hodnoty prečítané iným binárnym formátom.  Parameter <code>binaryFormat</code> určuje binárny formát, ktorý sa použije na prečítanie hodnoty.  Funkcia <code>function</code> sa vyvolá s prečítanou hodnotou a vráti transformovanú hodnotu.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Prečítajte bajt a pripočítajte k nemu hodnotu jeden.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Vráti funkciu porovnávača, ktorá používa pravidlá poradia na porovnanie hodnôt.",
        "Documentation.LongDescription": "Vráti funkciu porovnávača, ktorá používa pravidlá poradia na porovnanie zadaných hodnôt <code>x</code> a <code>y</code>.<br>\r\n      <br>\r\n      Funkcia porovnávača akceptuje dva argumenty a vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá hodnota.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "S použitím pravidiel poradia porovnaj, či sú hodnoty „encyclopædia“ a „encyclopaedia“ ekvivalentné. Všimnite si, že tieto sú ekvivalentné s použitím porovnávača <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Vráti funkciu porovnávača bez rozlíšenia malých a veľkých písmen, ktorá používa pravidlá poradia na porovnanie hodnôt.",
        "Documentation.LongDescription": "Vráti funkciu porovnávača bez rozlíšenia malých a veľkých písmen, ktorá používa pravidlá poradia na porovnanie zadaných hodnôt <code>x</code> a <code>y</code>.<br>\r\n        <br>\r\n        Funkcia porovnávača akceptuje dva argumenty a vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá hodnota.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "S použitím pravidiel poradia bez rozlíšenia malých a veľkých písmen porovnajte hodnoty \"Abc\" a \"abc\". Všimnite si, že hodnota \"Abc\" je menej než \"abc\" s použitím porovnávača <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Vráti vlastnosť atribútu dimenzie.",
        "Documentation.LongDescription": "Vráti vlastnosť <code>propertyName</code> atribútu dimenzie <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Vráti vlastnosť miery (vlastnosť bunky).",
        "Documentation.LongDescription": "Vráti vlastnosť <code>propertyName</code> miery <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Zdroj dotazu SQL Databricks",
        "Documentation.LongDescription": "Definovanie zdroja údajov služby Databricks na spúšťanie dotazov SQL"
      },
      "ReturnType": "Dotaz SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Zdroj dotazu SQL Databricks",
        "Documentation.LongDescription": "Definovanie zdroja údajov služby Databricks na spúšťanie dotazov SQL"
      },
      "ReturnType": "Dotaz SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Pripočíta zadané dni k dátumu.",
        "Documentation.LongDescription": "Vráti výsledok <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> z pripočítania <code>numberOfDays</code> dní k hodnote <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ku ktorej sa pripočítavajú dni.</li>\r\n      <li><code>numberOfDays</code>: Počet dní, ktoré sa majú pripočítať.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pripočítajte 5 dní k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Pripočíta zadané mesiace k dátumu.",
        "Documentation.LongDescription": "Vráti výsledok <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> z pripočítania <code>numberOfMonths</code> mesiacov k hodnote <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ku ktorej sa pripočítavajú mesiace.</li>\r\n        <li><code>numberOfMonths</code>: Počet mesiacov, ktoré sa majú pripočítať.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pripočítajte 5 mesiacov k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Pripočítajte 18 mesiacov k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011 a čas 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Pripočíta zadané štvrťroky k dátumu.",
        "Documentation.LongDescription": "Vráti výsledok <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> z pripočítania <code>numberOfQuarters</code> štvrťrokov k hodnote <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ku ktorej sa pripočítavajú štvrťroky.</li>\r\n      <li><code>numberOfQuarters</code>: Počet štvrťrokov, ktoré sa majú pripočítať.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pripočítajte 1 štvrťrok k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Pripočíta zadané týždne k dátumu.",
        "Documentation.LongDescription": "Vráti výsledok <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> z pripočítania <code>numberOfWeeks</code> týždňov k hodnote <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ku ktorej sa pripočítavajú týždne.</li>\r\n      <li><code>numberOfWeeks</code>: Počet týždňov, ktoré sa majú pripočítať.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pripočítajte 2 týždne k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Pripočíta zadané roky k dátumu.",
        "Documentation.LongDescription": "Vráti výsledok <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> z pripočítania <code>numberOfYears</code> rokov k hodnote <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ku ktorej sa pripočítavajú roky.</li>\r\n        <li><code>numberOfYears</code>: Počet rokov, ktoré sa majú pripočítať.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pripočítajte 4 roky k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Pripočítajte 10 rokov k hodnote <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011 a čas 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu nasledujúcich dní, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich dní, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>days</code>: Počet dní.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určuje, či sa deň po aktuálnom systémovom čase nachádza v nasledujúcich dvoch dňoch.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu nasledujúcich mesiacov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich mesiacov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>months</code>: Počet mesiacov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určuje, či sa mesiac po aktuálnom systémovom čase nachádza v nasledujúcich dvoch mesiacoch.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu nasledujúcich štvrťrokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich štvrťrokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>quarters</code>: Počet štvrťrokov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa štvrťrok po aktuálnom systémovom čase nachádza v nasledujúcich dvoch štvrťrokoch.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu nasledujúcich týždňov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich týždňov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>weeks</code>: Počet týždňov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určíte, či sa týždeň po aktuálnom systémovom čase nachádza v nasledujúcich dvoch týždňoch.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu nasledujúcich rokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich rokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>years</code>: Počet rokov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa rok po aktuálnom systémovom čase nachádza v nasledujúcich dvoch rokoch.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu predchádzajúcich dní, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich dní, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>days</code>: Počet dní.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa deň pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch dňoch.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu predchádzajúcich mesiacov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich mesiacov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>months</code>: Počet mesiacov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa mesiac pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch mesiacoch.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu predchádzajúcich štvrťrokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich štvrťrokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>quarters</code>: Počet štvrťrokov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa štvrťrok pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch štvrťrokoch.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu predchádzajúcich týždňov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich týždňov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>weeks</code>: Počet týždňov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa týždeň pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch týždňoch.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas určitého počtu predchádzajúcich rokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich rokov, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>years</code>: Počet rokov.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určite, či sa rok pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch rokoch.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "K hodnote dátumu a času pridá informáciu o časovom pásme.",
        "Documentation.LongDescription": "K hodnote <code>dateTime</code> pridá informáciu o časovom pásme. Informácia o časovom pásme zahŕňa <code>timezoneHours</code> a voliteľne <code>timezoneMinutes</code>, čím sa určuje požadovaný posun od času UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nastaví časové pásmo na UTC+7:30 (7 hodín a 30 minút po UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu nasledujúcich hodín, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich hodín, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>hours</code>: Počet hodín.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa hodina po aktuálnom systémovom čase nachádza v nasledujúcich dvoch hodinách.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu nasledujúcich minút, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich minút, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>minutes</code>: Počet minút.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa minúta po aktuálnom systémovom čase nachádza v nasledujúcich dvoch minútach.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu nasledujúcich sekúnd, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu nasledujúcich sekúnd, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>seconds</code>: Počet sekúnd.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa sekunda po aktuálnom systémovom čase nachádza v nasledujúcich dvoch sekundách.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu predchádzajúcich hodín, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich hodín, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>hours</code>: Počet hodín.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa hodina pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch hodinách.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu predchádzajúcich minút, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich minút, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>minutes</code>: Počet minút.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa minúta pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch minútach.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas určitého počtu predchádzajúcich sekúnd, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas určitého počtu predchádzajúcich sekúnd, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      <li><code>seconds</code>: Počet sekúnd.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa sekunda pred aktuálnym systémovým časom nachádza v predchádzajúcich dvoch sekundách.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Zmení časové pásmo hodnoty.",
        "Documentation.LongDescription": "Zmení informácie o časovom pásme týkajúce sa hodnoty datetimezone <code>dateTimeZone</code> na nové informácie o časovom pásme uvedené vo funkcii <code>timezoneHours</code> a voliteľne <code>timezoneMinutes</code>.\r\n    Ak funkcia <code>dateTimeZone</code> neobsahuje komponent časového pásma, dôjde k výnimke.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmeňte informácie o časovom pásme pre hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na 8 hodín.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Zmeňte informácie o časovom pásme pre položku #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na hodnotu –30 minút.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Pristupuje k hodnote podľa názvu vo vloženej hybridnej webovej aplikácii.",
        "Documentation.LongDescription": "Pristupuje k hodnote podľa názvu vo vloženej hybridnej webovej aplikácii.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Vytvára funkciu s konkrétnym podpisom parametra nad funkciou, ktorá vezme jeden argument zoznamu",
        "Documentation.LongDescription": "Vezme unárnu funkciu <code>function</code> a vytvorí novú funkciu s typom <code>functionType</code>, ktorá konštruuje zoznam zo svojich argumentov a odovzdá ho do funkcie <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Skonvertuje hodnotu List.Sum na funkciu s dvomi argumentmi, ktorej argumenty sa pridajú spolu",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Skonvertuje funkciu, ktorá prijíma zoznam, na funkciu s dvomi argumentami",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Vyvolá danú funkciu",
        "Documentation.LongDescription": "Vyvolá danú funkciu pomocou zadaného zoznamu argumentov a vráti výsledok.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Vyvolá funkciu Record.FieldNames s jedným argumentom [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Po uplynutí zadaného trvania vyvolá zadanú funkciu.",
        "Documentation.LongDescription": "Vráti výsledok vyvolania <code>function</code> po uplynutí trvania <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Vytvorí skalárnu funkciu nad vektorovou funkciou, dávkuje viacero vyvolaní.",
        "Documentation.LongDescription": "<p>Vráti skalárnu funkciu typu <code>scalarFunctionType</code>, ktorá vyvolá <code>vectorFunction</code> s jedným riadkom argumentov a vráti jeden výstup. Okrem toho, keď sa skalárna funkcia opakovane použije pre každý riadok tabuľky vstupov, ako napríklad Table.AddColumn, namiesto toho sa <code>vectorFunction</code> použije raz pre všetky vstupy. </p>\r\n<p><code>vectorFunction</code> sa odovzdá ako tabuľka, ktorej stĺpce sa zhodujú v názve a v umiestnení parametra v <code>scalarFunctionType</code>. Každý riadok tejto tabuľky obsahuje argumenty pre jedno volanie skalárnej funkcie so stĺpcami zodpovedajúcimi parametrom vo funkcii <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> musí vrátiť zoznam rovnakej dĺžky ako vstupná tabuľka, ktorej položky v každej pozícii musia mať rovnaký výsledok, ako by prinieslo vyhodnotenie skalárnej funkcie na vstupnom riadku v rovnakej pozícii.</p>\r\n<p>Očakáva sa, že vstupnú tabuľku dodá stream, takže sa očakáva, že <code>vectorFunction</code> bude streamovať svoj výstup popri tom, ako bude prichádzať vstup. Vždy sa pracuje len s jedným blokom vstupných údajov naraz. <code>vectorFunction</code> hlavne nesmie vykonať enumeráciu vstupnej tabuľky viac než raz.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Vytvorí záznam reprezentujúci geografický bod zo súčastí.",
        "Documentation.LongDescription": "Vytvorí záznam reprezentujúci geografický bod zo zástupných súčastí, ako napríklad zemepisná dĺžka, zemepisná šírka a ak sú k dispozícii, nadmorská výška (Z) a mierka (M). Ak sa líši od predvolenej hodnoty (4326), môžete uviesť voliteľný identifikátor referenčného súradnicového systému (SRID).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Vytvorí záznam reprezentujúci geometrický bod zo súčastí.",
        "Documentation.LongDescription": "Vytvorí záznam reprezentujúci geometrický bod zo zástupných súčastí, ako napríklad súradnica na osi X, súradnica na osi Y a ak je prítomná, súradnica na osi Z a mierka (M). Ak sa líši od predvolenej hodnoty (0), môžete uviesť voliteľný identifikátor referenčného súradnicového systému (SRID).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Vytvorí identitu.",
        "Documentation.LongDescription": "Vytvorí identitu.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Určuje, či je identita členom kolekcie identít.",
        "Documentation.LongDescription": "Určuje, či je identita členom kolekcie identít.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Vráti zoznam skladajúci sa zo všetkých nepárnych prvkov posunu v zozname.",
        "Documentation.LongDescription": "Vráti zoznam skladajúci sa zo všetkých nepárnych prvkov posunu v zozname. Strieda medzi použitím a vynechaním hodnôt zo zoznamu <code>list</code> v závislosti od parametrov.\r\n    <ul>\r\n    <li><code>count</code>: Stanoví počet hodnôt, ktoré sa zakaždým vynechajú.</li>\r\n    <li><code>repeatInterval</code>: Voliteľný interval opakovania, ktorý označí počet hodnôt pridaných pomedzi vynechané hodnoty.</li>\r\n    <li><code>offset</code>: Voliteľný parameter posunu, ktorým sa začnú vynechávať hodnoty v počiatočnom posune.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam z hodnôt {1..10}, v ktorom sa vynechá prvé číslo.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Vytvorte zoznam z hodnôt {1..10}, v ktorom sa vynechá každé druhé číslo.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Vytvorte zoznam z hodnôt {1..10}, ktorý začne číslom 1 a v ktorom sa vynechá každé druhé číslo.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Vytvorte zoznam z hodnôt {1..10}, ktorý začne číslom 1, vynechá jednu hodnotu, zachová dve hodnoty atď.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Udáva, či zoznam obsahuje hodnotu.",
        "Documentation.LongDescription": "Udáva, či zoznam <code>list</code> obsahuje hodnotu <code>value</code>.\r\n    Vráti hodnotu True, ak sa príslušná hodnota nájde v zozname, v opačnom prípade vráti hodnotu False. Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje číslo 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje číslo 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Udáva, či zoznam obsahuje všetky hodnoty v inom zozname.",
        "Documentation.LongDescription": "Udáva, či zoznam <code>list</code> obsahuje všetky hodnoty v inom zozname <code>values</code>.\r\n    Vráti hodnotu True, ak sa príslušná hodnota nájde v zozname, v opačnom prípade vráti hodnotu False. Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje čísla 3 a 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje čísla 5 a 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Udáva, či zoznam obsahuje niektorú z hodnôt v inom zozname.",
        "Documentation.LongDescription": "Udáva, či zoznam <code>list</code> obsahuje niektorú z hodnôt v inom zozname <code>values</code>.\r\n        Vráti hodnotu True, ak sa príslušná hodnota nájde v zozname, v opačnom prípade vráti hodnotu False. Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje číslo 3 alebo 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 4, 5} obsahuje číslo 6 alebo 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Vráti kovarianciu medzi dvomi zoznamami čísel.",
        "Documentation.LongDescription": "Vráti kovarianciu medzi dvomi zoznamami <code>numberList1</code> a <code>numberList2</code>. <code>numberList1</code> a <code>numberList2</code> musia obsahovať rovnaký počet hodnôt <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Vypočítajte kovarianciu medzi dvomi zoznamami.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Vráti rozdiel dvoch daných zoznamov.",
        "Documentation.LongDescription": "Vráti položky v zozname <code>list1</code>, ktoré sa nevyskytujú v zozname <code>list2</code>. Duplicitné hodnoty sa podporujú.\r\n    Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite položky v zozname {1, 2, 3, 4, 5}, ktoré sa nevyskytujú v zozname {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Nájdite položky v zozname {1, 2}, ktoré sa nevyskytujú v zozname {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Vráti zoznam hodnôt (vrátane polí záznamov) obsahujúcich zadaný text.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt zo zoznamu <code>list</code>, ktorý obsahoval hodnotu <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite textové hodnoty v zozname {\"a\", \"b\", \"ab\"}, ktoré sa zhodujú s hodnotou \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Vráti prvú množinu položiek v zozname stanovením počtu položiek, ktoré sa majú vrátiť, alebo oprávňujúcej podmienky.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Ak je stanovený počet, vráti sa najviac toľko položiek. </li>\r\n  <li>Ak je stanovená podmienka, vrátia sa všetky položky, ktoré pôvodne spĺňali podmienku. Keď niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite počiatočné hodnoty v zozname {3, 4, 5, -1, 7, 8, 2}, ktoré sú väčšie ako 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Vráti hodnotu True, ak funkciu podmienky spĺňajú všetky hodnoty v zozname.",
        "Documentation.LongDescription": "Vráti hodnotu <code>true</code>, ak funkciu podmienky <code>condition</code> spĺňajú všetky hodnoty v zozname <code>list</code>, v opačnom prípade vráti hodnotu <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Určte, či všetky hodnoty v zozname {11, 12, 13} sú väčšie ako 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Určte, či všetky hodnoty v zozname {1, 2, 3} sú väčšie ako 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Vráti hodnotu True, ak funkciu podmienky spĺňa ľubovoľná hodnota.",
        "Documentation.LongDescription": "Vráti hodnotu <code>true</code>, ak funkciu podmienky <code>condition</code> spĺňa ľubovoľná z hodnôt v zozname <code>list</code>, v opačnom prípade vráti hodnotu <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či niektorá z hodnôt v zozname {9, 10, 11} je väčšia ako 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Zistite, či niektorá z hodnôt v zozname {1, 2, 3} je väčšia ako 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Vráti maximálne hodnoty v zozname. Musí sa stanoviť počet hodnôt, ktoré sa majú vrátiť, alebo podmienka filtrovania.",
        "Documentation.LongDescription": "Vráti maximálne hodnoty v zozname, <code>list</code>.\r\n    Po zoradení riadkov možno stanoviť voliteľné parametre a ďalej tak filtrovať výsledok. Voliteľný parameter <code>countOrCondition</code> určí počet hodnôt, ktoré sa majú vrátiť, alebo podmienku filtrovania. Voliteľný parameter <code>comparisonCriteria</code> určí spôsob porovnania hodnôt v zozname.\r\n <ul>\r\n        <li> <code>list</code>: Zoznam hodnôt.</li>\r\n        <li> <code>countOrCondition</code>: Ak je stanovený počet, vráti sa zoznam s najviac <code>countOrCondition</code> položkami vo vzostupnom poradí. Ak je stanovená podmienka, vráti sa zoznam položiek, ktoré pôvodne spĺňajú podmienku. Hneď ako niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Voliteľné]</i> Možno stanoviť voliteľnú hodnotu <code>comparisonCriteria</code> s cieľom určiť spôsob porovnania položiek v zozname. Ak má tento parameter hodnotu null, použije sa predvolený porovnávač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Vráti minimálne hodnoty v zozname. Možno stanoviť počet hodnôt, ktoré sa majú vrátiť, alebo podmienku filtrovania.",
        "Documentation.LongDescription": "Vráti minimálne hodnoty v zozname, <code>list</code>.\r\n    Parameter <code>countOrCondition</code> určí počet hodnôt, ktoré sa majú vrátiť, alebo podmienku filtrovania. Voliteľný parameter <code>comparisonCriteria</code> určí spôsob porovnania hodnôt v zozname.\r\n <ul>\r\n        <li> <code>list</code>: Zoznam hodnôt.</li>\r\n        <li> <code>countOrCondition</code>: Ak je stanovený počet, vráti sa zoznam s najviac <code>countOrCondition</code> položkami vo vzostupnom poradí. Ak je stanovená podmienka, vráti sa zoznam položiek, ktoré pôvodne spĺňajú podmienku. Hneď ako niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú. Ak má tento parameter hodnotu null, vráti sa jedna najmenšia hodnota v zozname.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Voliteľné]</i> Možno stanoviť voliteľnú hodnotu <code>comparisonCriteria</code> s cieľom určiť spôsob porovnania položiek v zozname. Ak má tento parameter hodnotu null, použije sa predvolený porovnávač.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite 5 najmenších hodnôt v zozname <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Vráti zoznam čísel s danou počiatočnou hodnotou, počtom a voliteľnou hodnotou prírastku.",
        "Documentation.LongDescription": "Vráti zoznam čísel s danou počiatočnou hodnotou, počtom a voliteľnou hodnotou prírastku. Predvolená hodnota prírastku je 1.\r\n<ul>\r\n   <li><code>start</code>: Počiatočná hodnota v zozname.</li>\r\n   <li><code>count</code>: Počet hodnôt, ktoré sa majú vytvoriť.</li>\r\n   <li><code>increment</code>: <i>[Voliteľné]</i> Hodnota, ktorá má predstavovať prírastok. Ak je táto hodnota vynechaná, k hodnotám sa pripočíta prírastok s hodnotou 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vygenerujte zoznam 10 po sebe nasledujúcich čísel, počnúc od čísla 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Vygenerujte zoznam 10 čísel, počnúc od čísla 1, s prírastkom s hodnotou 2 pre každé nasledujúce číslo.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Vráti minimálne jednu hodnotu percentilu vzorky zodpovedajúcu danej pravdepodobnosti.",
        "Documentation.LongDescription": "Vráti minimálne jednu hodnotu percentilu vzorky zoznamu <code>list</code>. Ak je hodnota <code>percentiles</code> číslo v rozsahu od 0,0 do 1,0, spracuje sa ako percentil a výsledkom bude\r\n    jediná hodnota zodpovedajúca danej pravdepodobnosti. Ak je hodnota <code>percentiles</code> zoznamom čísel s hodnotami v rozsahu od 0,0 do 1,0, výsledok bude zoznam percentilov\r\n    zodpovedajúcich vstupnej pravdepodobnosti. Možnosť PercentileMode v <code>options</code> môžu využiť skúsení používatelia na výber konkrétnej metódy interpolácie, ale pre väčšinu použití sa neodporúča.\r\n    Vopred zadefinované symboly <code>PercentileMode.ExcelInc</code> a <code>PercentileMode.ExcelExc</code> zodpovedajú metóde interpolácie, ktorú používajú funkcie Excelu \r\n    <code>PERCENTILE.INC</code> a <code>PERCENTILE.EXC</code>. Predvolené správanie zodpovedá <code>PercentileMode.ExcelInc</code>. Symboly\r\n    <code>PercentileMode.SqlCont</code> a <code>PercentileMode.SqlDisc</code> zodpovedajú správaniu SQL Servera pri použití funkcie <code>PERCENTILE_CONT</code> a\r\n    <code>PERCENTILE_DISC</code> v uvedenom poradí.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite prvý kvartil zoznamu <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Nájdite kvartily zoznamu <code> {5, 3, 1, 7, 9} </code> pomocou metódy interpolácie zodpovedajúcej excelovej funkcii <code>PERCENTILE.EXC</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Vráti posuny hodnoty v zozname.",
        "Documentation.LongDescription": "Vráti posun, pri ktorom sa hodnota <code>value</code> vyskytuje v zozname <code>list</code>. Ak sa príslušná hodnota nevyskytuje, vráti hodnotu –1.\r\n    Možno stanoviť voliteľný parameter výskytu <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maximálny počet výskytov, ktoré sa majú nahlásiť.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nájdite pozíciu v zozname {1, 2, 3}, v ktorej sa vyskytuje hodnota 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Vráti prvý posun hodnoty v zozname.",
        "Documentation.LongDescription": "Vráti posun v zozname <code>list</code> prvého výskytu hodnoty v zozname <code>values</code>. Ak sa nenájdu žiadne výskyty, vráti hodnotu –1.\r\n    Možno stanoviť voliteľný parameter výskytu <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: Maximálny počet výskytov, ktoré možno vrátiť.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nájdite prvú pozíciu v zozname {1, 2, 3}, v ktorej sa vyskytuje hodnota 2 alebo 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Vráti podmnožinu zoznamu začínajúcu pri posune.",
        "Documentation.LongDescription": "Vráti podmnožinu zoznamu začínajúcu pri posune <code>list</code>. Voliteľný parameter <code>offset</code> určuje maximálny počet položiek v podmnožine.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite podmnožinu začínajúcu s posunom 6 zoznamu čísel od 1 až po 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Nájdite podmnožinu s dĺžkou 2 od posunu 6 zo zoznamu čísel od 1 až po 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Odstráni položky zo zoznamu list1, ktoré sa nachádzajú v zozname.",
        "Documentation.LongDescription": "Odstráni všetky výskyty daných hodnôt v zozname <code>list2</code> zo zoznamu <code>list1</code>. Ak hodnoty v zozname <code>list2</code> neexistujú v zozname <code>list1</code>, vráti sa pôvodný zoznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte položky v zozname {2, 4, 6} zo zoznamu {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Odstráni všetky výskyty vstupných hodnôt.",
        "Documentation.LongDescription": "Odstráni všetky výskyty daných hodnôt v zozname <code>list2</code> zo zoznamu <code>list1</code>. Ak hodnoty v zozname <code>list2</code> neexistujú v zozname <code>list1</code>, vráti sa pôvodný zoznam.\r\n    Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1, 2, 3, 4, 5, 5} bez zoznamu {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Odstráni počet hodnôt, počnúc od stanovenej pozície.",
        "Documentation.LongDescription": "Odstráni počet hodnôt: <code>count</code> v zozname <code>list</code>, počnúc od stanovenej pozície <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte 3 hodnoty v zozname {1, 2, 3, 4, -6, -2, -1, 5}, počnúc indexom 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Vráti zoznam, ktorý je opakovaním počtu pôvodného zoznamu.",
        "Documentation.LongDescription": "Vráti zoznam, ktorý je opakovaním počtu <code>count</code> pôvodného zoznamu <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam, v ktorom sa 3-krát opakuje zoznam {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "použije každú náhradu zoznamu { old, new }.",
        "Documentation.LongDescription": "Vykoná dané náhrady v rámci zoznamu <code>list</code>. Operácia nahradenia <code>replacements</code> pozostáva zo zoznamu s dvomi hodnotami, s hodnotou old a hodnotou new, uvedenými v zozname.\r\n    Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1, 2, 3, 4, 5} nahradením hodnoty 5 hodnotou –5 a nahradením hodnoty 1 hodnotou –1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Vráti zoznam hodnôt, ktoré spĺňajú podmienku.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt zo zoznamu <code>list</code>, ktoré spĺňajú podmienku výberu <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite hodnoty v zozname {1, -3, 4, 9, -2}, ktoré sú väčšie ako 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Rozdelí zadaný zoznam na zoznam zoznamov použitím zadanej veľkosti stránky.",
        "Documentation.LongDescription": "Rozdelí <code>list</code> na zoznam zoznamov, kde prvým prvkom výstupného zoznamu je zoznam obsahujúci prvé prvky (<code>pageSize</code>) zo\r\n    zdrojového zoznamu. Ďalším prvkom vo výstupnom zozname je zoznam obsahujúci ďalšie prvky (<code>pageSize</code>) zo zdrojového zoznamu atď.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Vráti nový zoznam hodnôt vypočítaných z tohto zoznamu.",
        "Documentation.LongDescription": "Vráti nový zoznam hodnôt použitím funkcie transformácie <code>transform</code> na zoznam <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pripočíta hodnotu 1 ku každej hodnote v zozname {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Vráti arkustangens delenia dvoch čísel.",
        "Documentation.LongDescription": "Vráti arkustangens delenia dvoch čísel <code>y</code> a <code>x</code>. Delenie sa skonštruuje ako <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Vráti výsledok vykonania bitovej operácie \"And\" medzi dvomi vstupmi.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitovej operácie \"And\" medzi vstupmi <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Vráti výsledok vykonania bitovej operácie \"Or\" medzi dvomi vstupmi.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitovej operácie \"Or\" medzi vstupmi <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Posunie množinu bitov doľava.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitového posunu doľava vo vstupe <code>number1</code> o stanovený počet bitov <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Posunie množinu bitov doprava.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitového posunu doprava vo vstupe <code>number1</code> o stanovený počet bitov <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Vráti výsledok vykonania bitovej operácie \"XOR\" (Exclusive-OR) medzi dvomi vstupmi.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitovej operácie \"XOR\" (Exclusive-OR) medzi vstupmi <code>number1</code> a <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Vráti počet jedinečných kombinácií.",
        "Documentation.LongDescription": "Vráti počet jedinečných kombinácií zo zoznamu položiek <code>setSize</code> so stanovenou veľkosťou kombinácie <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Počet položiek v zozname.</li>\r\n    <li><code>combinationSize</code>: Počet položiek v každej kombinácii.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite počet kombinácií z celkového počtu 5 položiek, pričom každú kombináciu tvorí skupina 3 položiek.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Vydelí dve čísla a vráti celočíselnú časť výsledku.",
        "Documentation.LongDescription": "Vráti celočíselnú časť výsledku z delenia čísla <code>number1</code> iným číslom <code>number2</code>.\r\n    Ak hodnota <code>number1</code> alebo <code>number2</code> je null, funkcia <code>Number.IntegerDivide</code> vráti hodnotu null.\r\n      <ul>\r\n        <li><code>number1</code>: Delenec.</li>\r\n        <li><code>number2</code>: Deliteľ.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Vydeľte číslo 6 číslom 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Vydeľte číslo 8,3 číslom 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Celé číslo vydelí dve čísla a vráti zvyšok.",
        "Documentation.LongDescription": "Vráti zvyšok z delenia celého čísla <code>number</code> číslom <code>divisor</code>.\r\n    Ak hodnota <code>number</code> alebo <code>divisor</code> je null, funkcia <code>Number.Mod</code> vráti hodnotu null.\r\n      <ul>\r\n        <li><code>number</code>: Delenec.</li>\r\n        <li><code>divisor</code>: Deliteľ.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite zvyšok delenia čísla 5 číslom 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Vráti počet permutácií.",
        "Documentation.LongDescription": "Vráti počet permutácií, ktoré možno generovať z určitého počtu položiek <code>setSize</code>, so stanovenou veľkosťou permutácie <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite počet permutácií z celkového počtu 5 položiek v skupinách 3 položiek.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Umocní číslo na danú mocninu.",
        "Documentation.LongDescription": "Vráti výsledok umocnenia čísla <code>number</code> na mocninu <code>power</code>.\r\n    Ak hodnota <code>number</code> alebo <code>power</code> je null, funkcia <code>Number.Power</code> vráti hodnotu null.\r\n      <ul>\r\n        <li><code>number</code>: Základ.</li>\r\n        <li><code>power</code>: Exponent.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite hodnotu čísla 5 umocneného na 3. mocninu.",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Vráti náhodné číslo medzi dvomi číslami.",
        "Documentation.LongDescription": "Vráti náhodné číslo medzi číslami <code>bottom</code> a <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Získajte náhodné číslo medzi číslami 1 a 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Vráti hodnotu zadaného poľa v zázname.",
        "Documentation.LongDescription": "Vráti hodnotu zadaného poľa <code>field</code> v zázname <code>record</code>. Ak sa pole nenájde, dôjde k výnimke.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v zázname hodnotu poľa CustomerID.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Vráti hodnotu zadaného poľa v zázname alebo predvolenú hodnotu, ak sa pole nenájde.",
        "Documentation.LongDescription": "Vráti hodnotu zadaného poľa <code>field</code> v zázname <code>record</code>. Ak sa pole nenájde, vráti sa voliteľná hodnota <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v zázname hodnotu poľa Phone alebo sa vráti hodnota null, ak pole neexistuje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Nájdite v zázname hodnotu poľa Phone alebo sa vráti predvolená hodnota, ak pole neexistuje.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Vráti záznam s daným zoznamom hodnôt polí a s množinou polí.",
        "Documentation.LongDescription": "Vráti záznam s daným zoznamom <code>list</code> hodnôt polí a s množinou polí.  Zoznam <code>fields</code> možno zadať pomocou zoznamu textových hodnôt alebo pomocou typu záznamu.  Ak polia nie sú jedinečné, dôjde k výnimke.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Zostavte záznam zo zoznamu hodnôt polí a zo zoznamu názvov polí.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Zostavte záznam zo zoznamu hodnôt polí a z typu záznamu.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Udáva, či záznam obsahuje zadané polia.",
        "Documentation.LongDescription": "Udáva, či záznam <code>record</code> obsahuje polia zadané v zozname <code>fields</code>, a to vrátením logickej hodnoty (True alebo False).\r\n    Pomocou zoznamu možno zadať viacero hodnôt polí.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či záznam obsahuje pole CustomerID.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Skontrolujte, či záznam obsahuje polia CustomerID a Address.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Odstráni zadané polia zo vstupného záznamu.",
        "Documentation.LongDescription": "Vráti záznam, ktorý odstráni všetky polia zadané v zozname <code>fields</code> zo vstupu <code>record</code>. Ak zadané pole neexistuje, dôjde k výnimke.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte zo záznamu pole Price.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Odstráňte zo záznamu polia Price a Item.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Použije premenovania zo zoznamu vo formáte { old, new }.",
        "Documentation.LongDescription": "Vráti záznam po premenovaní polí vo vstupe <code>record</code> na nové názvy polí zadané v zozname <code>renames</code>. Pre viaceré premenovania možno použiť vnorený zoznam ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Premenujte pole UnitPrice na Price zo záznamu.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Premenujte pole UnitPrice na Price a pole OrderNum na OrderID zo záznamu.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Zmeňte poradie zadaných polí na nové poradie.",
        "Documentation.LongDescription": "Vráti záznam po zmene poradia polí vo vstupe <code>record</code> na poradie polí zadané v zozname <code>fieldOrder</code>. Zachovajú sa hodnoty polí a polia neuvedené v zozname <code>fieldOrder</code> sa ponechajú v pôvodných pozíciách.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zmeňte poradie polí v zázname.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Vráti záznam, ktorý obsahuje iba zadané polia.",
        "Documentation.LongDescription": "Vráti záznam, ktorý zahŕňa iba polia zadané v zozname <code>fields</code> zo vstupu <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vyberte v zázname polia Item a Price.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Vráti záznam po použití zadaných transformácií.",
        "Documentation.LongDescription": "Vráti záznam po použití transformácií zadaných v zozname <code>transformOperations</code> v rámci <code>record</code>.\r\n    V danom čase možno transformovať najmenej jedno pole.\r\n      <div>V prípade transformácie jedného poľa sa očakáva, že zoznam <code>transformOperations</code> bude zoznamom s dvomi položkami. Prvá položka v zozname <code>transformOperations</code> určí názov poľa a druhá položka v zozname <code>transformOperations</code> určí funkciu, ktorá sa má použiť na transformáciu. Príklad: <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>V prípade transformácie viacerých polí sa očakáva, že zoznam <code>transformOperations</code> bude zoznamom zoznamov, pričom každý vnútorný zoznam tvorí dvojica názov poľa a operácia transformácie. Príklad: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Skonvertujte pole Price na číslo.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Skonvertujte polia OrderID a Price na čísla.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text na zoznam textu podľa prechodu z jedného druhu znaku na iný. Parametrami {0} a {1} môže byť buď zoznam znakov, alebo funkcia, ktorá použije znak a vráti hodnotu pravda alebo nepravda.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text na zoznam textu podľa prechodu z jedného druhu znaku na iný. Parametrami <code>before</code> a <code>after</code> môže byť buď zoznam znakov, alebo funkcia, ktorá použije znak a vráti hodnotu pravda alebo nepravda.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup vždy, keď za veľkým alebo malým písmenom nasleduje číslica.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Konvertuje zadaný dotaz SQL na kód M. Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Konvertuje zadaný dotaz <code>sql</code> na kód M s dostupnými identifikátormi definovanými <code>environment</code>. Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Vráti zadaný stĺpec údajov z tabuľky ako zoznam.",
        "Documentation.LongDescription": "Vráti stĺpec údajov zadaný pomocou funkcie <code>column</code> z tabuľky <code>table</code> ako zoznam.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vráti hodnoty zo stĺpca [Name] v tabuľke .",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Vráti zoznam s názvami stĺpcov, ktoré zodpovedajú zadaným typom.",
        "Documentation.LongDescription": "Vráti zoznam s názvami stĺpcov tabuľky <code>table</code>, ktoré zodpovedajú typom zadaným v <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Vráťte názvy stĺpcov typu Number.Type z tabuľky.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Udáva, či sa zadaný záznam zobrazuje ako riadok v tabuľke.",
        "Documentation.LongDescription": "Udáva, či sa zadaný záznam <code>row</code> zobrazuje ako riadok v tabuľke <code>table</code>.\r\n    Možno stanoviť voliteľný parameter <code>equationCriteria</code> a kontrolovať tak porovnanie medzi riadkami tabuľky.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určte, či tabuľka obsahuje riadok.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určte, či tabuľka obsahuje riadok.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určte, či tabuľka obsahuje riadok, pričom porovnáva iba stĺpec [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Udáva, či sa všetky zadané záznamy zobrazujú ako riadky v tabuľke.",
        "Documentation.LongDescription": "Udáva, či sa všetky zadané záznamy v zozname záznamov <code>rows</code> zobrazujú ako riadky v tabuľke <code>table</code>.\r\n    Možno stanoviť voliteľný parameter <code>equationCriteria</code> a kontrolovať tak porovnanie medzi riadkami tabuľky.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Porovnaním so stĺpcom [CustomerID] určite, či tabuľka obsahuje všetky riadky.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určte, či tabuľka obsahuje všetky riadky.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Udáva, či sa niektoré zo zadaných záznamov zobrazujú ako riadky v tabuľke.",
        "Documentation.LongDescription": "Udáva, či sa niektoré zadané záznamy v zozname záznamov <code>rows</code> zobrazujú ako riadky v tabuľke <code>table</code>.\r\n    Možno stanoviť voliteľný parameter <code>equationCriteria</code> a kontrolovať tak porovnanie medzi riadkami tabuľky.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určte, či tabuľka <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> obsahuje riadky <code>[a = 1, b = 2]</code> alebo <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určte, či tabuľka <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> obsahuje riadky <code>[a = 1, b = 3]</code> alebo <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určte, či tabuľka <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> obsahuje riadky <code>[a = 1, b = 3]</code> alebo <code>[a = 3, b = 5]</code>, pričom porovnáva iba stĺpec [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Udáva, či tabuľka obsahuje zadané stĺpce.",
        "Documentation.LongDescription": "Udáva, či tabuľka <code>table</code> obsahuje zadané stĺpce <code>columns</code>. Vráti hodnotu <code>true</code>, ak tabuľka obsahuje stĺpce, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Určte, či tabuľka obsahuje stĺpec [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Zistite, či tabuľka obsahuje stĺpce [Name] a [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Udáva, či všetky riadky v tabuľke spĺňajú danú podmienku.",
        "Documentation.LongDescription": "Udáva, či všetky riadky v tabuľke <code>table</code> spĺňajú danú podmienku <code>condition</code>. Vráti hodnotu <code>true</code>, ak sa všetky riadky zhodujú, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sú v tabuľke všetky hodnoty riadkov v stĺpci [a] párne.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Zistite, či všetky hodnoty riadkov sú [a = 1, b = 2] v tabuľke <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Udáva, či niektoré riadky v tabuľke spĺňajú danú podmienku.",
        "Documentation.LongDescription": "Udáva, či niektoré riadky v tabuľke <code>table</code> spĺňajú danú podmienku <code>condition</code>. Vráti hodnotu <code>true</code>, ak sa niektoré riadky zhodujú, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sú niektoré hodnoty riadkov v stĺpci [a] párne v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určte, či niektoré hodnoty riadkov sú [a = 1, b = 2] v tabuľke <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Vráti najväčšiu hodnotu riadka alebo predvolenú hodnotu pomocou daných kritérií.",
        "Documentation.LongDescription": "Vráti najväčšiu hodnotu riadka v tabuľke <code>table</code> s daným kritériom <code>comparisonCriteria</code>. Ak je tabuľka prázdna, vráti sa voliteľná hodnota <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite riadok s najväčšou hodnotou v stĺpci [a] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Nájdite riadok s najväčšou hodnotou v stĺpci [a] v tabuľke <code>({})</code>. Ak je tabuľka prázdna, vráti sa hodnota –1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Vráti najmenšiu hodnotu riadka alebo predvolenú hodnotu pomocou daných kritérií.",
        "Documentation.LongDescription": "Vráti najmenšiu hodnotu riadka v tabuľke <code>table</code> s daným kritériom <code>comparisonCriteria</code>. Ak je tabuľka prázdna, vráti sa voliteľná hodnota <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v tabuľke riadok s najmenšou hodnotou v stĺpci [a].",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Nájdite v tabuľke riadok s najmenšou hodnotou v stĺpci [a]. Ak je tabuľka prázdna, vráti sa hodnota –1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Vráti pozíciu alebo pozície riadka v rámci tabuľky.",
        "Documentation.LongDescription": "Vráti pozíciu riadka prvého výskytu hodnoty <code>row</code> v zadanej tabuľke <code>table</code>. Ak sa nenájdu žiadne výskyty, vráti hodnotu –1.\r\n    <ul>\r\n       <li><code>table</code>: Vstupná tabuľka.</li>\r\n       <li><code>row</code>: Riadok v tabuľke, ktorého pozícia sa má nájsť.</li>\r\n       <li><code>occurrence</code>: <i>[Voliteľné]</i> Udáva, ktoré výskyty riadka sa majú vrátiť.</li>\r\n       <li><code>equationCriteria</code>: <i>[Voliteľné]</i> Kontroluje porovnanie medzi riadkami tabuľky.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nájdite pozíciu prvého výskytu záznamu [a = 2, b = 4] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Nájdite pozíciu druhého výskytu záznamu [a = 2, b = 4] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Nájdite pozíciu všetkých výskytov záznamu [a = 2, b = 4] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Vráti pozíciu alebo pozície niektorého zo zadaných riadkov v rámci tabuľky.",
        "Documentation.LongDescription": "Vráti pozície riadkov z pozície <code>table</code> prvého výskytu zoznamu hodnôt <code>rows</code>. Ak sa nenájdu žiadne výskyty, vráti hodnotu –1.\r\n    <ul>\r\n    <li><code>table</code>: Vstupná tabuľka.</li>\r\n       <li><code>rows</code>: Zoznam riadkov v tabuľke, ktorých pozície sa majú nájsť.</li>\r\n       <li><code>occurrence</code>: <i>[Voliteľné]</i> Udáva, ktoré výskyty riadka sa majú vrátiť.</li>\r\n       <li><code>equationCriteria</code>: <i>[Voliteľné]</i> Kontroluje porovnanie medzi riadkami tabuľky.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nájdite pozíciu prvého výskytu záznamu [a = 2, b = 4] alebo [a = 6, b = 8] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Nájdite pozíciu všetkých výskytov záznamu [a = 2, b = 4] alebo [a = 6, b = 8] v tabuľke <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Rozdelí zadanú tabuľku na zoznam tabuliek použitím zadanej veľkosti stránky.",
        "Documentation.LongDescription": "Rozdelí <code>table</code> na zoznam tabuliek, kde prvým prvkom zoznamu je tabuľka obsahujúca prvé riadky (<code>pageSize</code>) zo\r\n    zdrojovej tabuľky. Ďalším prvkom v zozname je tabuľka obsahujúca ďalšie riadky (<code>pageSize</code>) zo zdrojovej tabuľky atď.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí tabuľku s piatimi záznamami na tabuľky s dvomi záznamami.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Vráti zoznam obsahujúci zadaný prvý počet riadkov a zvyšné riadky.",
        "Documentation.LongDescription": "Vráti zoznam obsahujúci dve tabuľky: tabuľku s prvými N riadkami <code>table</code> (určenými podľa <code>count</code>) a tabuľkou obsahujúcou zvyšné riadky <code>table</code>.\r\n\r\nAk sú tabuľky výsledného zoznamu enumerované presne raz a v poradí, funkcia bude enumerovať <code>table</code> iba raz.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vráti prvé dva riadky tabuľky a zvyšné riadky tabuľky.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformuje riadky tabuľky pomocou zadanej funkcie transformácie.",
        "Documentation.LongDescription": "Na každý riadok v <code>table</code> použije operáciu <code>transform</code> a vytvorí <code>zoznam</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformuje riadky tabuľky na zoznam čísel.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformuje riadky číselnej tabuľky na textové záznamy.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Vráti časť <code>text</code> po zadanej hodnote <code>delimiter</code>.\r\n    Voliteľná numerická položka <code>index</code> určuje, ktorý výskyt hodnoty <code>delimiter</code> sa má vziať do úvahy.\r\n    Voliteľný zoznam <code>index</code> určuje, ktorý výskyt hodnoty <code>delimiter</code> sa má vziať do úvahy a či sa má indexovanie vykonať od začiatku alebo od konca vstupu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získať časť „111-222-333“ po (prvom) spojovníku.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Získať časť „111-222-333“ po druhom spojovníku.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Získať časť „111-222-333“ po druhom spojovníku od konca.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Vráti znak na zadanej pozícii.",
        "Documentation.LongDescription": "Vráti znak v textovej hodnote <code>text</code> na pozícii <code>index</code>. Prvý znak v texte je na pozícii 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Nájdite znak na pozícii 4 v reťazci \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Vráti časť <code>text</code> po zadanej hodnote <code>delimiter</code>.\r\n    Voliteľná číselná položka <code>index</code> určuje, ktorý výskyt hodnoty <code>delimiter</code> sa má vziať do úvahy.\r\n    Voliteľný zoznam <code>index</code> určuje, ktorý výskyt hodnoty <code>delimiter</code> sa má vziať do úvahy a či sa má indexovanie vykonať od začiatku alebo od konca vstupu.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získať časť 111-222-333 pred (prvým) spojovníkom.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Získať časť 111-222-333 pred druhým spojovníkom.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Získať časť 111-222-333 pred druhým spojovníkom od konca.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Vráti informácie o tom, či text obsahuje podreťazec.",
        "Documentation.LongDescription": "Zistí, či funkcia <code>text</code> obsahuje hodnotu <code>substring</code>. Vráti hodnotu True, ak sa hodnota nájde. Táto funkcia nepodporuje zástupné znaky ani regulárne výrazy.\r\n      <br>\r\n      <br>\r\n    Voliteľný argument <code>comparer</code> možno použiť na určenie porovnaní bez rozlíšenia malých a veľkých písmen alebo porovnaní zohľadňujúcich jazyk a miestne nastavenie.\r\n      V jazyku vzorcov sú k dispozícii tieto vstavané porovnávače:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: používa sa na vykonanie porovnania poradia s rozlíšením malých a veľkých písmen</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: používa sa na vykonanie porovnania poradia bez rozlíšenia malých a veľkých písmen</li>\r\n        <li> <code>Comparer.FromCulture</code>: používa sa na vykonanie porovnania zohľadňujúceho jazyk</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či text \"Hello World\" obsahuje text \"Hello\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Zistite, či text \"Hello World\" obsahuje text \"hello\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Zistite, či text „Hello World“ obsahuje „hello“ pomocou porovnávača, ktorý nerozlišuje malé a veľké písmená.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Vráti posledné znaky textu.",
        "Documentation.LongDescription": "Vráti hodnotu <code>text</code>, ktorú tvoria posledné znaky v počte: <code>count</code> hodnoty <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Získajte posledných 5 znakov textu \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Udáva, či sa text končí na zadanú hodnotu.",
        "Documentation.LongDescription": "Udáva, či sa daný text <code>text</code> končí na zadanú hodnotu <code>substring</code>. Označenie rozlišuje malé a veľké písmená.\r\n\r\n      <div>\r\n         <code>comparer</code> je funkcia <code>Comparer</code>, ktorá sa používa na kontrolu porovnania. Porovnávače možno použiť na uvedenie porovnaní bez rozlíšenia malých a veľkých písmen alebo porovnaní zohľadňujúcich kultúru a miestne nastavenie.\r\n      </div>\r\n      <div>\r\n        V jazyku vzorcov sú k dispozícii tieto vstavané porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: používa sa na vykonanie presného ordinálneho porovnania</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: používa sa na vykonanie presného ordinálneho porovnania bez rozlíšenia malých a veľkých písmen</li>\r\n        <li> <code>Comparer.FromCulture</code>: používa sa na vykonanie porovnania zohľadňujúceho kultúru</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či text \"Hello, World\" končí textom \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Skontrolujte, či text \"Hello, World\" končí textom \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Vráti formátovaný text z reťazca formátu a argumentov.",
        "Documentation.LongDescription": "Vráti formátovaný text, ktorý je vytvorený použitím <code>arguments</code> zo zoznamu alebo záznamu na reťazec formátu <code>formatString</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formátuje zoznam čísiel.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formátuje rôzne typy údajov zo záznamu v súlade s anglickou jazykovou verziou (USA).",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Vráti podreťazec s maximálnou zadanou dĺžkou.",
        "Documentation.LongDescription": "Vráti znaky (<code>count</code>) alebo reťazec do konca položky <code>text</code> s posunom <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Nájdite podreťazec z textu \"Hello World\" začínajúci s indexom 6 a s rozsahom 5 znakov.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Nájdite podreťazec z textu \"Hello World\" začínajúci s indexom 6 a pokračujúcim až do konca.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Vráti text so zadanou dĺžkou prostredníctvom vyplnenia konca daného textu.",
        "Documentation.LongDescription": "Vráti hodnotu <code>text</code> vyplnenú k dĺžke <code>count</code> vložením medzier na koniec textovej hodnoty <code>text</code>.\r\n    Na zadanie znaku, ktorý sa použije na vyplnenie, možno použiť voliteľný znak <code>character</code>. Predvoleným znakom výplne je medzera.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vyplňte koniec textovej hodnoty tak, aby obsahovala 10 znakov.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Vyplňte koniec textovej hodnoty znakom \"|\", aby obsahovala 10 znakov.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Vráti text so zadanou dĺžkou prostredníctvom vyplnenia začiatku daného textu.",
        "Documentation.LongDescription": "Vráti hodnotu <code>text</code> vyplnenú k dĺžke <code>count</code> vložením medzier na začiatok textovej hodnoty <code>text</code>.\r\n    Na zadanie znaku, ktorý sa použije na vyplnenie, možno použiť voliteľný znak <code>character</code>. Predvoleným znakom výplne je medzera.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vyplňte začiatok textovej hodnoty tak, aby obsahovala 10 znakov.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Vyplňte začiatok textovej hodnoty znakom \"|\", aby obsahovala 10 znakov.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Vráti prvú pozíciu hodnoty (–1, ak sa nenájde).",
        "Documentation.LongDescription": "Vráti pozíciu zadaného výskytu textovej hodnoty <code>substring</code> nájdenú v hodnote <code>text</code>.\r\n    Na zadanie pozície výskytu, ktorá sa má vrátiť (predvolene prvý výskyt), možno použiť voliteľný parameter <code>occurrence</code>.\r\n    Vráti -1, ak sa hodnota <code>substring</code> nenašla.\\\r\n\r\n      <div>\r\n        <code>comparer</code> je porovnávač <code>Comparer</code>>, ktorá sa používa na kontrolu porovnania. Porovnávače možno použiť na uvedenie porovnaní bez rozlíšenia malých a veľkých písmen alebo porovnaní zohľadňujúcich kultúru a miestne nastavenie.\r\n      </div>\r\n      <div>\r\n        V jazyku vzorcov sú k dispozícii tieto vstavané porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: používa sa na vykonanie presného ordinálneho porovnania</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: používa sa na vykonanie presného ordinálneho porovnania bez rozlíšenia malých a veľkých písmen</li>\r\n        <li> <code>Comparer.FromCulture</code>: používa sa na vykonanie porovnania zohľadňujúceho kultúru</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Získajte pozíciu prvého výskytu textu \"World\" v texte \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Získajte pozíciu posledného výskytu textu \"World\" v texte \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Vráti prvú pozíciu v textovej hodnote ľubovoľného uvedeného znaku (–1, ak sa nenájde).",
        "Documentation.LongDescription": "Vráti prvú pozíciu ľubovoľného znaku v zozname <code>characters</code> nájdenú v texte <code>text</code>.\n    Na zadanie pozície výskytu, ktorá sa má vrátiť, možno použiť voliteľný parameter <code>occurrence</code>.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadá prvú pozíciu znaku W alebo H v texte „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Vyhľadá všetky pozície znaku W alebo H v texte „Hello, World!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Vráti podreťazec nájdený pri posune.",
        "Documentation.LongDescription": "Vráti podreťazec z textu <code>text</code> nájdený pri posune <code>offset</code>.\r\n    Na zadanie počtu znakov, ktoré sa majú vrátiť, možno zahrnúť voliteľný parameter <code>count</code>. Ak počet znakov nie je dostatočný, vráti sa chyba.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Nájdite podreťazec z textu \"Hello World\" začínajúci s indexom 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Nájdite podreťazec z textu \"Hello World Hello\" začínajúci s indexom 6 a s rozsahom 5 znakov.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Odstráni všetky výskyty daného znaku alebo zoznamu znakov zo vstupnej textovej hodnoty.",
        "Documentation.LongDescription": "Vráti kópiu textovej hodnoty <code>text</code>, pričom odstráni všetky znaky z pozície <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte znaky , a ; z textovej hodnoty.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Odstráni počet znakov, počnúc pri danom posune",
        "Documentation.LongDescription": "Vráti kópiu textovej hodnoty <code>text</code>, pričom odstráni všetky znaky z pozície <code>offset</code>.\r\n    Na zadanie počtu znakov, ktoré sa majú odstrániť, možno použiť voliteľný parameter <code>count</code>. Predvolená hodnota parametra <code>count</code> je 1. Hodnoty pozície začínajú číslom 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte 1 znak z textovej hodnoty \"ABEFC\" na pozícii 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Odstráňte dva znaky z textovej hodnoty \"ABEFC\", počnúc pozíciou 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Vráti textovú hodnotu zostavenú zo vstupného textu so zadaným počtom opakovaní.",
        "Documentation.LongDescription": "Vráti textovú hodnotu zostavenú zo vstupného textu <code>text</code> opakovanú <code>count</code>-krát.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Zopakujte text \"a\" päťkrát.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Zopakujte text \"helloworld\" trikrát.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Vyberie všetky výskyty daného znaku alebo zoznamu znakov zo vstupnej textovej hodnoty.",
        "Documentation.LongDescription": "Vráti kópiu textovej hodnoty <code>text</code>, pričom odstráni všetky znaky, ktoré nie sú v <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Vyberte z textovej hodnoty všetky znaky v rozsahu od a po z.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Rozdelí text do zoznamu textových hodnôt na základe stanoveného oddeľovača.",
        "Documentation.LongDescription": "Vráti zoznam textových hodnôt, ktorý je výsledkom rozdelenia textovej hodnoty <code>text</code> na základe stanoveného oddeľovača <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam z textovej hodnoty \"Name|Address|PhoneNumber\" oddelenej znakom \"|\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Vráti zoznam textových hodnôt rozdelený v niektorom znaku v oddeľovači.",
        "Documentation.LongDescription": "Vráti zoznam textových hodnôt, ktorý je výsledkom rozdelenia textovej hodnoty <code>text</code> na základe niektorého znaku v stanovenom oddeľovači <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam z textovej hodnoty \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Vráti začiatok textu.",
        "Documentation.LongDescription": "Vráti počet prvých znakov: <code>count</code> textu <code>text</code> ako textovú hodnotu.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Získajte prvých 5 znakov textu \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Udáva, či sa text začína na zadanú hodnotu.",
        "Documentation.LongDescription": "Vráti hodnotu True, ak sa textová hodnota <code>text</code> začína textovou hodnotou <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Hodnota <code>text</code>, ktorá sa má vyhľadať,</li>\r\n        <li><code>substring</code>: <i></i> Hodnota <code>text</code>, ktorá predstavuje hľadaný podreťazec v texte <code>substring</code>.</li>\r\n        <li><code>comparer</code>: <i>[Voliteľné]</i> Funkcia <code>Comparer</code> použitá na kontrolu porovnania. Na vykonanie hľadaní bez rozlíšenia malých a veľkých písmen možno napríklad použiť funkciu <code>Comparer.OrdinalIgnoreCase</code>.</li>\r\n      </ul>\r\n      <div>\r\n         je funkcia <code>comparer</code> <code>Comparer</code>, ktorá sa používa na kontrolu porovnania. Porovnávače možno použiť na uvedenie porovnaní bez rozlíšenia malých a veľkých písmen alebo porovnaní zohľadňujúcich kultúru a miestne nastavenie.\r\n      </div>\r\n      <div>\r\n        V jazyku vzorcov sú k dispozícii tieto vstavané porovnávače:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: používa sa na vykonanie presného ordinálneho porovnania</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: používa sa na vykonanie presného ordinálneho porovnania bez rozlíšenia malých a veľkých písmen</li>\r\n        <li> <code>Comparer.FromCulture</code>: používa sa na vykonanie porovnania zohľadňujúceho kultúru</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či sa text \"Hello, World\" začína textom \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Skontrolujte, či sa text \"Hello, World\" začína textom \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Vráti typ, ktorý predstavuje funkcie so špecifickými parametrami a obmedzeniami typu návratu.",
        "Documentation.LongDescription": "Vytvorí <code>typ funkcie</code> z <code>signature</code>, zo záznamu <code>typ vrátenia</code> a <code>parametrov</code>, a <code>min</code>, minimálneho počtu argumentov požadovaných na vyvolanie funkcie.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvorí typ pre funkciu, ktorá prijíma ako vstup číselný parameter s názvom X a vracia číslo.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Vráti typ, ktorý predstavuje záznamy so špecifickými obmedzeniami typu v poliach.",
        "Documentation.LongDescription": "Vráti typ, ktorý predstavuje záznamy so špecifickými obmedzeniami typu v poliach.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dynamicky vygenerujte typ tabuľky.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Určuje, či je hodnota prvého typu vždy kompatibilná s druhým typom.",
        "Documentation.LongDescription": "Určuje, či je hodnota <code>type1</code> vždy kompatibilná s <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa hodnota typu number môže vždy považovať za typ any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Určte, či sa hodnota typu any môže vždy považovať za typ number.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Nahradí obmedzenia typu.",
        "Documentation.LongDescription": "Nahradí obmedzenia typu <code>type</code> za obmedzenia obsiahnuté v zázname <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Vráti nový typ tabuľky, pričom všetky kľúče sa nahradia zadaným zoznamom kľúčov.",
        "Documentation.LongDescription": "Vráti nový typ tabuľky so všetkými kľúčmi nahradenými zadaným zoznamom kľúčov.<br>\r\n    <br>\r\n    Každý kľúč je definovaný pomocou záznamu v nasledujúcom tvare:\r\n    <ul>\r\n      <li>\r\n        <code>Sĺpce</code>: zoznam názvov stĺpcov, ktoré definujú kľúč\r\n      </li>\r\n      <li>\r\n        <code>Hlavné</code>: <code>true</code> ak je kľúč primárnym kľúčom tabuľky; v opačnom prípade, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Zadaný zoznam kľúčov sa overí, aby sa zabezpečilo, že nie je definovaný viac ako jeden primárny kľúč a že všetky názvy stĺpcov kľúčov existujú v danom type tabuľky.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nahradiť kľúčové informácie o type tabuľky.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Vymazať informácie o kľúči, ktoré boli predtým definované pre typ tabuľky.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Vráti typ stĺpca v tabuľke.",
        "Documentation.LongDescription": "Vráti typ stĺpca <code>column</code> v tabuľke typu <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Vráti absolútny identifikátor URI, ktorý je kombináciou vstupného identifikátora URI základu a relatívneho identifikátora URI.",
        "Documentation.LongDescription": "Vráti absolútny identifikátor URI, ktorý je kombináciou vstupu <code>baseUri</code> a identifikátora <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Vráti súčet dvoch hodnôt.",
        "Documentation.LongDescription": "Vráti súčet hodnôt <code>value1</code> a <code>value2</code>. Možno stanoviť voliteľný parameter <code>precision</code>, v predvolenom nastavení sa používa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Vráti hodnotu, ak je kompatibilná so zadaným typom.",
        "Documentation.LongDescription": "Vráti hodnotu, ak je kompatibilná so zadaným typom. Je to ekvivalent operátora as v jazyku M s výnimkou, že môže prijať odkazy na typ identifikátora, ako napríklad Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Pretypovanie čísla na číslo.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Pokus o pretypovanie textovej hodnoty na číslo.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá.",
        "Documentation.LongDescription": "Vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Vráti výsledok delenia prvej hodnoty druhou hodnotou.",
        "Documentation.LongDescription": "Vráti výsledok delenia hodnoty <code>value1</code> hodnotou <code>value2</code>. Možno stanoviť voliteľný parameter <code>precision</code>, v predvolenom nastavení sa používa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Vráti informácie o tom, či sa dve hodnoty rovnajú.",
        "Documentation.LongDescription": "Vráti hodnotu True, ak sa hodnota <code>value1</code> rovná hodnote <code>value2</code>, v opačnom prípade vráti hodnotu False.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Určuje, či je hodnota kompatibilná so zadaným typom.",
        "Documentation.LongDescription": "Určuje, či je hodnota kompatibilná so zadaným typom. Je to ekvivalent operátora is v jazyku M s výnimkou, že môže prijať odkazy na typ identifikátora, ako napríklad Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Porovnanie dvoch spôsobov určenia, či je číslo kompatibilné s typom number.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Vráti súčin dvoch hodnôt.",
        "Documentation.LongDescription": "Vráti súčin vynásobením hodnoty <code>value1</code> hodnotou <code>value2</code>. Možno stanoviť voliteľný parameter <code>precision</code>, v predvolenom nastavení sa používa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Vyhodnotí dotaz v porovnaní s cieľom.",
        "Documentation.LongDescription": "<p>Vyhodnotí príkaz <code>query</code> v porovnaní s tabuľkou <code>target</code> pomocou parametrov, ktoré sú zadané v <code>parameters</code>, a možností, ktoré sú zadané vo voliteľnom zázname <code>options</code>.</p>\r\n<p>Výsledok dotazu definuje tabuľka <code>target</code>.</p>\r\n<p>Tabuľka <code>target</code> poskytuje kontext pre operáciu popísanú dotazom <code>query</code>.</p>\r\n<p><code>query</code> popisuje dotaz, ktorý sa má vykonať v tabuľke <code>target</code>. Príkaz <code>query</code> je vyjadrený spôsobom špecifickým pre tabuľku <code>target</code> (napr. príkaz T-SQL).</p>\r\n<p>Voliteľná hodnota <code>parameters</code> môže obsahovať zoznam alebo záznam, ktorý poskytne vhodné hodnoty parametrov očakávané v príkaze <code>query</code>.</p>\r\n<p>Voliteľný záznam <code>options</code> môže obsahovať možnosti, ktoré ovplyvňujú správanie pri vykonaní príkazu <code>query</code> v tabuľke <code>target</code>. Tieto možnosti sú špecifické pre tabuľku <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Vráti informácie o tom, či sa dve hodnoty rovnajú.",
        "Documentation.LongDescription": "Vráti hodnotu null, ak niektorý z argumentov <code>value1</code>, <code>value2</code> má hodnotu null, v opačnom prípade vráti ekvivalent k hodnote Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Nahradí informácie o metaúdajoch vstupu.",
        "Documentation.LongDescription": "Nahradí informácie o metaúdajoch vstupu.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Nahradí typ hodnoty.",
        "Documentation.LongDescription": "Nahradí typ <code>value</code> poskytnutým <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Nahraďte predvolený typ záznamu špecifickejším typom.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Vráti rozdiel dvoch hodnôt.",
        "Documentation.LongDescription": "Vráti rozdiel hodnôt <code>value1</code> a <code>value2</code>. Možno stanoviť voliteľný parameter <code>precision</code>, v predvolenom nastavení sa používa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Vytvorí akciu, ktorá po spustení vráti výsledky vykonania požiadavky HTTP ako binárnu hodnotu.",
        "Documentation.LongDescription": "Vytvorí akciu, ktorá po spustení vráti výsledky vykonania požiadavky <code>method</code> pre: <code>url</code> pomocou protokolu HTTP vo forme binárnej hodnoty.\r\n    Na zadanie ďalších vlastností sa môže zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>Query</code> : Umožňuje pomocou programovania pridať parametre dotazu k adrese URL bez ob&#225;v z &#250;niku &#250;dajov.</li>\r\n<li><code>ApiKeyName</code> : Ak m&#225; cieľov&#225; lokalita koncept kľ&#250;ča rozhrania API, tento parameter sa d&#225; použiť na zadanie n&#225;zvu (nie hodnoty) kľ&#250;ča parametra, ktor&#253; sa mus&#237; použiť v URL adrese. Skutočn&#225; hodnota kľ&#250;ča je zadan&#225; v poveren&#237;.</li>\r\n<li><code>Headers</code> : Ak sa t&#225;to hodnota zad&#225; ako z&#225;znam, do požiadavky HTTP sa pridaj&#250; ďalšie hlavičky.</li>\r\n<li><code>Timeout</code> : Ak sa t&#225;to hodnota zad&#225; ako trvanie, zmen&#237; sa časov&#253; limit požiadavky HTTP. Predvolen&#225; hodnota je 100 sek&#250;nd.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, vyl&#250;čia sa tieto kľ&#250;če hlavičiek HTTP a nebud&#250; s&#250;časťou v&#253;počtu s&#250;visiaceho s ukladan&#237;m &#250;dajov do vyrovn&#225;vacej pam&#228;te.</li>\r\n<li><code>IsRetry</code> : Ak bude zadan&#225; logick&#225; hodnota true, bud&#250; sa pri nač&#237;tavan&#237; &#250;dajov ignorovať ak&#233;koľvek existuj&#250;ce odpovede vo vyrovn&#225;vacej pam&#228;ti.</li>\r\n<li><code>ManualStatusHandling</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, zabr&#225;ni to ak&#233;mukoľvek vstavan&#233;mu spracov&#225;vaniu požiadaviek HTTP, ktor&#253;ch odpoveď m&#225; niektor&#253; z t&#253;chto k&#243;dov stavu.</li>\r\n<li><code>RelativePath</code> : Ak sa t&#225;to hodnota zad&#225; ako text, pripoj&#237; text k z&#225;kladu URL adresy pred vykonan&#237;m požiadavky.</li>\r\n<li><code>Content</code> : Ak sa zad&#225; t&#225;to hodnota, jej obsah sa stane telom požiadavky HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Všimnite si, že táto funkcia je vo väčšine kontextov vypnutá. Zvážte namiesto toho použitie súboru Web.Contents alebo Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Vykonajte na Bing požiadavku GET.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu koncového bodu rozhrania Azure Enterprise REST API, ktorý je priradený k vašej registrácii.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Vráti binárne výsledky volania URL adresy poskytovanej pre rozhranie Azure Enterprise API.",
        "Documentation.Examples": [
          {
            "Description": "Vrátenie výsledkov konkrétnej zostavy pomocou funkcie AzureEnterprise.Contents.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabuľka"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Vráti obsah zadaného objektu blob z trezora úložiska platformy Azure.",
        "Documentation.LongDescription": "Vráti obsah objektu BLOB na URL adrese <code>url</code> z trezora Azure Storage. Môžete určiť <code>options</code> na ovládanie týchto možností:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtov, ktor&#233; sa maj&#250; č&#237;tať pri čakan&#237; na spotrebiteľa &#250;dajov. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtov v r&#225;mci pokusu o č&#237;tanie jednej žiadosti HTTP na server. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnosť ConcurrentRequests podporuje r&#253;chlejšie sťahovanie &#250;dajov zadan&#237;m počtu žiadost&#237;, ktor&#233; sa maj&#250; vykonať paralelne, č&#237;m sa využije naplno pam&#228;ť. Vyžaduje sa pam&#228;ť (ConcurrentRequest * RequestSize). Predvolen&#225; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Vráti obsah určeného súboru zo systému súborov Azure Data Lake Storage.",
        "Documentation.LongDescription": "Vráti obsah súboru na URL adrese <code>url</code> zo systému súborov v služby Azure Data Lake Storage. Môžete určiť <code>options</code> na ovládanie týchto možností:\r\n    <ul>\r\n<li><code>BlockSize</code> : Počet bajtov, ktor&#233; sa maj&#250; č&#237;tať pri čakan&#237; na spotrebiteľa &#250;dajov. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>RequestSize</code> : Počet bajtov v r&#225;mci pokusu o č&#237;tanie jednej žiadosti HTTP na server. Predvolen&#225; hodnota je 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Možnosť ConcurrentRequests podporuje r&#253;chlejšie sťahovanie &#250;dajov zadan&#237;m počtu žiadost&#237;, ktor&#233; sa maj&#250; vykonať paralelne, č&#237;m sa využije naplno pam&#228;ť. Vyžaduje sa pam&#228;ť (ConcurrentRequest * RequestSize). Predvolen&#225; hodnota je 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Vráti približnú dĺžku binárnej hodnoty.",
        "Documentation.LongDescription": "Vráti približnú dĺžku <code>binary</code>, alebo chybu, ak zdroj údajov nepodporuje približnú dĺžku.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Získajte približnú dĺžku binárnej hodnoty.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Uloží binárnu hodnotu do medzipamäte.",
        "Documentation.LongDescription": "Uloží binárnu hodnotu do medzipamäte. Výsledkom tohto volania je stabilná binárna hodnota, t. j. bude mať definovanú dĺžku a poradie bajtov.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte stabilnú verziu binárnej hodnoty.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Kombinuje zoznam binárnych údajov do jedného binárneho údaja.",
        "Documentation.LongDescription": "Kombinuje zoznam binárnych údajov do jedného binárneho údaja.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Vytvorí binárny údaj z danej hodnoty",
        "Documentation.LongDescription": "Vráti hodnotu <code>binary</code> zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, <code>Binary.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>binary</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>binary</code> z textového vyjadrenia. Podrobnosti nájdete v časti <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Získajte hodnotu <code>binary</code> čísla <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Konvertuje zoznam čísel na binárnu hodnotu.",
        "Documentation.LongDescription": "Konvertuje zoznam čísel na binárnu hodnotu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Dekóduje údaje z textového formátu na binárny údaj.",
        "Documentation.LongDescription": "Vráti výsledok konverzie textovej hodnoty <code>text</code> na binárny údaj (zoznam čísel <code>number</code>). Možno zadať hodnotu <code>encoding</code> s cieľom určiť kódovanie použité v textovej hodnote.\r\n      Možno použiť nasledujúce hodnoty <code>BinaryEncoding</code> pre <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Kódovanie Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Hexadecimálne kódovanie</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekódujte hodnotu 1011 na binárny údaj.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekódujte hodnotu 1011 na binárny údaj s hexadecimálnym kódovaním.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Číta binárny stream a pokúša sa určiť informácie o type obsahu a formátu streamu.",
        "Documentation.LongDescription": "Vráti záznam s poľom Content.Type, ktorý obsahuje odvodený typ MIME.\r\n    Ak je odvodený typ obsahu text/* a zistí sa kódová stránka kódovania, vráti sa navyše pole Content.Encoding, ktoré obsahuje kódovanie streamu.\r\n    Ak je odvodený typ obsahu text/csv a formát používa oddeľovač, vráti sa navyše pole Csv.PotentialDelimiter obsahujúce tabuľku na analýzu potenciálnych oddeľovačov.\r\n    Ak je odvodený typ obsahu text/csv a formát má pevnú šírku, vráti navyše pole Csv.PotentialPositions obsahujúce zoznam na analýzu pozícií stĺpcov s potenciálne pevnou šírkou.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Vráti počet znakov.",
        "Documentation.LongDescription": "Vráti počet znakov.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Konvertuje binárnu hodnotu na zoznam čísel.",
        "Documentation.LongDescription": "Konvertuje binárnu hodnotu na zoznam čísel.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Kóduje binárne údaje na textový formát.",
        "Documentation.LongDescription": "Vráti výsledok konverzie binárneho zoznamu čísel <code>binary</code> na textovú hodnotu. Voliteľne možno zadať hodnotu <code>encoding</code> s cieľom určiť kódovanie, ktoré sa má použiť vo vytvorenej textovej hodnote\r\n      Možno použiť nasledujúce hodnoty <code>BinaryEncoding</code> pre <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Kódovanie Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: Hexadecimálne kódovanie</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Vytvorí upravený záznam chýb, ktorý nespustí návrat pri vygenerovaní obslužným programom definovaným v zobrazení (prostredníctvom funkcie Binary.View).",
        "Documentation.LongDescription": "Vytvorí upravený záznam chýb z <code>errorRecord</code>, ktorý nespustí návrat pri vygenerovaní obslužným programom definovaným v zobrazení (prostredníctvom funkcie Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Vytvorí funkciu, do ktorej môže zasahovať obslužný program definovaný v zobrazení (prostredníctvom funkcie Binary.View).",
        "Documentation.LongDescription": "<p>Vytvorí funkciu zobrazenia založenú na <code>function</code>, s ktorou možno pracovať v zobrazení vytvorenom pomocou funkcie <code>Binary.View</code>.</p>\r\n<p>Na definovanie obslužného programu pre funkciu zobrazenia sa dá použiť obslužný program <code>OnInvoke</code> zobrazenia <code>Binary.View</code>.</p>\r\n<p>Rovnako ako pri obslužných programoch pre vstavané operácie platí, že ak obslužný program <code>OnInvoke</code> nie je zadaný, neobsluhuje danú funkciu zobrazenia alebo zobrazí chybu, cez zobrazenie sa použije <code>function</code>.</p>\r\n<p>Úplnejší popis funkcie <code>Binary.View</code> a vlastných funkcií zobrazenia nájdete v publikovanej dokumentácii vlastného konektora Power Query.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Binárny formát, ktorý prečíta 64-bitové celé číslo so znamienkom kódované pomocou 7-bitového kódovania s premenlivou dĺžkou.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 64-bitové celé číslo so znamienkom kódované pomocou 7-bitového kódovania s premenlivou dĺžkou.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Binárny formát, ktorý prečíta 64-bitové celé číslo bez znamienka kódované pomocou 7-bitového kódovania s premenlivou dĺžkou.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 64-bitové celé číslo bez znamienka kódované pomocou 7-bitového kódovania s premenlivou dĺžkou.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Binárny formát, ktorý prečíta 8-bitové celé číslo bez znamienka.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 8-bitové celé číslo bez znamienka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Binárny formát, ktorý prečíta 16-bajtovú desatinnú hodnotu .NET.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 16-bajtovú desatinnú hodnotu .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Binárny formát, ktorý prečíta 8-bajtovú hodnotu s pohyblivou desatinnou čiarkou s dvojitou presnosťou IEEE.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 8-bajtovú hodnotu s pohyblivou desatinnou čiarkou s dvojitou presnosťou IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Vráti binárny formát, ktorý načíta postupnosť položiek a vráti zoznam.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý prečíta postupnosť položiek a vráti hodnotu <code>list</code>.  Parameter <code>binaryFormat</code> zadá binárny formát každej položky.  Existujú tri spôsoby určenia počtu prečítaných položiek: <ul><li>Ak parameter <code>countOrCondition</code> nie je zadaný, potom binárny formát bude čítať, až kým nezostanú žiadne ďalšie položky.</li><li>Ak parameter <code>countOrCondition</code> je číslo, potom binárny formát bude čítať taký počet položiek.</li><li>Ak parameter <code>countOrCondition</code> je funkcia, potom táto funkcia bude vyvolaná pre každú prečítanú položku.  Funkcia vráti hodnotu True v prípade pokračovania a hodnotu False v prípade zastavenia čítania položiek.  Posledná položka je zahrnutá v zozname.</li><li>Ak parameter <code>countOrCondition</code> je binárnym formátom, potom sa očakáva, že príslušný počet položiek bude predchádzať zoznam, a zadaný formát sa použije na prečítanie počtu.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Prečítajte bajty až do konca údajov.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Prečítajte dva bajty.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Čítajte bajty, až kým hodnota bajtu nie je väčšia ako alebo rovná hodnote dva.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Binárny formát, ktorý prečíta nula bajtov a vráti hodnotu null.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta nula bajtov a vráti hodnotu null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Vráti binárny formát, ktorý prečíta záznam.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý prečíta záznam.  Parameter <code>record</code> určuje formát záznamu.  Každé pole v zázname môže mať iný binárny formát.  Ak pole obsahuje hodnotu, ktorá nie je hodnotou binárneho formátu, tak pre toto pole sa neprečítajú žiadne údaje a hodnota poľa sa zobrazí vo výsledku.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Prečítajte záznam obsahujúci jedno 16-bitové celé číslo a jedno 32-bitové celé číslo.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Binárny formát, ktorý prečíta 16-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 16-bitové celé číslo so znamienkom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Binárny formát, ktorý prečíta 32-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 32-bitové celé číslo so znamienkom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Binárny formát, ktorý prečíta 64-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 64-bitové celé číslo so znamienkom.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Binárny formát, ktorý prečíta 4-bajtovú hodnotu s pohyblivou desatinnou čiarkou s jednoduchou presnosťou IEEE.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 4-bajtovú hodnotu s pohyblivou desatinnou čiarkou s jednoduchou presnosťou IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Vráti binárny formát, ktorý prečíta textovú hodnotu.",
        "Documentation.LongDescription": "Vráti binárny formát, ktorý prečíta textovú hodnotu.  Parameter <code>length</code> určuje počet bajtov určených na dekódovanie alebo binárny formát s dĺžkou, ktorá predchádza text.  Voliteľná hodnota <code>encoding</code> určuje kódovanie textu.  Ak parameter <code>encoding</code> nie je zadaný, potom kódovanie sa určí zo značiek poradia bajtov kódu Unicode.  Ak nie sú prítomné žiadne značky poradia bajtov, potom sa použije kódovanie <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekódujte dva bajty ako text ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dekódujte text ASCII, v ktorom sa dĺžka textu v bajtoch zobrazuje pred textom ako bajt.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Binárny formát, ktorý prečíta 16-bitové celé číslo bez znamienka.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 16-bitové celé číslo bez znamienka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Binárny formát, ktorý prečíta 32-bitové celé číslo bez znamienka.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 32-bitové celé číslo bez znamienka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Binárny formát, ktorý prečíta 64-bitové celé číslo bez znamienka.",
        "Documentation.LongDescription": "Binárny formát, ktorý prečíta 64-bitové celé číslo bez znamienka.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Vytvorí zo zadanej hodnoty 8-bitové celé číslo.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte 8-bitového celého čísla zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Byte.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu 8-bitového celého čísla bez zlomkovej časti, vráti sa <code>value</code>. Ak má zlomkovú časť, číslo sa zaokrúhli podľa zadaného spôsobu zaokrúhlenia. Predvolený spôsob zaokrúhlenia je <code>RoundingMode.ToEven</code>. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte 8-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte 8-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4.5\"</code> pomocou spôsobu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Konvertuje číslo na textový znak.",
        "Documentation.LongDescription": "Vráti znakový ekvivalent čísla.<br>\r\n    <br>\r\n    Zadaný <code>number</code> by mal byť 21-bitový bod kódu Unicode.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje číslo na jeho ekvivalentnú hodnotu znaku.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Konvertuje znak na číslo a späť.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Konvertujte šestnástkový bod kódu emotikonu „škeriaca sa tvár“ na ekvivalentný náhradný pár UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Konvertuje znak na číselnú hodnotu.",
        "Documentation.LongDescription": "Vráti číselný ekvivalent znaku <code>character</code>.<br>\r\n    <br>\r\n    Výsledkom bude 21-bitový bod kódu Unicode reprezentovaný zadaným znakom alebo náhradným párom.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje znak na jeho ekvivalentnú číselnú hodnotu.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Konvertujte náhradný pár UTF-16 emotikonu „škeriaca sa tvár“ na ekvivalentný šestnástkový bod kódu.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Vráti funkciu, ktorá kombinuje zoznam textu pomocou stanoveného oddeľovača.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá kombinuje zoznam textových hodnôt do jednej textovej hodnoty pomocou stanoveného oddeľovača.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Skombinuje zoznam textových hodnôt pomocou bodkočiarkového oddeľovača.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Skombinujte text dvoch stĺpcov pomocou oddeľovača čiarok a úvodzoviek v štýle CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Vráti funkciu, ktorá kombinuje zoznam textu pomocou postupnosti oddeľovačov.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá kombinuje zoznam textových hodnôt do jednej textovej hodnoty pomocou postupnosti oddeľovačov.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Skombinuje zoznam textových hodnôt pomocou postupnosti oddeľovačov.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Vráti funkciu, ktorá kombinuje zoznam textu pomocou stanovených dĺžok.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá kombinuje zoznam textových hodnôt do jednej textovej hodnoty pomocou stanovených dĺžok.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Skombinujte zoznam textových hodnôt extrahovaním stanoveného počtu znakov z každej vstupnej hodnoty.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Skombinujte zoznam textových hodnôt extrahovaním stanoveného počtu znakov po prvom vyplnení výsledku textom šablóny.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Vráti funkciu, ktorá kombinuje zoznam textu pomocou stanovených výstupných pozícií.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá kombinuje zoznam textových hodnôt do jednej textovej hodnoty pomocou stanovených výstupných pozícií.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Skombinujte zoznam textových hodnôt ich umiestnením do výstupu na stanovených pozíciách.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Vráti funkciu, ktorá kombinuje zoznam textu pomocou stanovených pozícií a dĺžok.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá kombinuje zoznam textových hodnôt do jednej textovej hodnoty pomocou stanovených výstupných pozícií a dĺžok. Dĺžka null označuje, že by sa mala zahrnúť celá textová hodnota.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Skombinujte zoznam textových hodnôt pomocou stanovených výstupných pozícií a dĺžok.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Vráti funkciu porovnávača na základe zadanej kultúry a rozlišovania malých a veľkých písmen.",
        "Documentation.LongDescription": "Vráti funkciu porovnávača, ktorá používa <code>culture</code> a rozlišovanie malých a veľkých písmen <code>ignoreCase</code> na vykonanie porovnaní.<br>\r\n      <br>\r\n      Funkcia porovnávača akceptuje dva argumenty a vráti hodnotu -1, 0 alebo 1 na základe toho, či je prvá hodnota menšia, rovná alebo väčšia ako druhá hodnota.<br>\r\n      <br>\r\n      Predvolená hodnota pre <code>ignoreCase</code> je false. Jazyková verzia <code>culture</code> by mala byť jedným z miestnych nastavení podporovaných rozhraním .NET framework (napríklad sk-SK).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Porovnaj \"a\" a \"A\" s použitím miestneho nastavenia \"en-US\" a zisti, či sa hodnoty rovnajú.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Porovnaj \"a\" a \"A\" s použitím miestneho nastavenia \"en-US\" pri ignorovaní veľkých a malých písmen a zisti, či sa hodnoty rovnajú.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Vráti jedinečný identifikátor člena z hodnoty vlastnosti členov.",
        "Documentation.LongDescription": "Vráti jedinečný identifikátor člena z hodnoty vlastnosti členov. <code>attribute</code>. Vráti hodnotu null pre všetky ostatné hodnoty.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Vráti kľúč vlastnosti.",
        "Documentation.LongDescription": "Vráti kľúč vlastnosti <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Vráti zo zadanej hodnoty hodnotu meny.",
        "Documentation.LongDescription": "Vráti zo zadanej hodnoty <code>value</code> hodnotu <code>currency</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Currency.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> <code>number</code> v rozsahu meny, zlomková časť hodnoty <code>value</code> sa zaokrúhli na 4 desatinné miesta a vráti sa. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Platný rozsah meny je <code>-922,337,203,685,477.5808</code> až <code>922,337,203,685,477.5807</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Predvolený spôsob je <code>RoundingMode.ToEven</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získanie hodnoty <code>currency</code> pre <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Získajte hodnotu <code>currency</code> pre <code>\"1.23455\"</code> na základe spôsobu <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Vráti komponent dňa.",
        "Documentation.LongDescription": "Vráti komponent dňa z hodnoty <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa extrahuje komponent dňa.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte komponent dňa hodnoty <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> predstavujúcej dátum 14. 5. 2011 a čas 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Vráti číslo (od 0 do 6), ktoré označuje deň v týždni zodpovedajúci zadanej hodnote.",
        "Documentation.LongDescription": "Vráti číslo (od 0 do 6), ktoré označuje deň v týždni zodpovedajúci zadanej hodnote <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: hodnota <code>Day</code> označuje, ktorý deň má byť prvým dňom týždňa. Povolené hodnoty sú Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday alebo Day.Saturday. Ak nie je táto hodnota zadaná, použije sa predvolená hodnota závislá od príslušnej jazykovej verzie.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získa deň v týždni reprezentovaný pondelkom 21. februára 2011, pričom sa nedeľa považuje za prvý deň v týždni.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Získa deň v týždni reprezentovaný pondelkom 21. februára 2011, pričom sa pondelok považuje za prvý deň v týždni.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Vráti názov dňa v týždni.",
        "Documentation.LongDescription": "Vráti názov dňa v týždni pre zadaný <code>date</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte názov dňa v týždni.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Vráti číslo od 1 do 366 predstavujúce deň v roku.",
        "Documentation.LongDescription": "Vráti číslo medzi predstavujúce deň v roku v rámci uvedenej hodnoty <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Deň v roku pre 1. marec 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Vráti číslo od 28 do 31 udávajúce počet dní v mesiaci.",
        "Documentation.LongDescription": "Vráti počet dní v mesiaci v rámci hodnoty <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, pre ktorú sa vráti počet dní v mesiaci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Počet dní v mesiaci december je vyjadrený hodnotou <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Vráti koniec dňa.",
        "Documentation.LongDescription": "Vráti koniec dňa, ktorý predstavuje hodnota <code>dateTime</code>. Informácie o časovom pásme sa zachovajú.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta koniec dňa</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte koniec dňa pre dátum 14. 5. 2011 a čas 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Získajte koniec dňa pre dátum 17. 5. 2011 a čas 17:00:00 – 7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Vráti koniec mesiaca.",
        "Documentation.LongDescription": "Vráti koniec mesiaca, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta koniec mesiaca.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte koniec mesiaca pre dátum 14. 5. 2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Získajte koniec mesiaca pre dátum 17. 5. 2011 a čas 17:00:00 – 7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Vráti koniec štvrťroka.",
        "Documentation.LongDescription": "Vráti koniec štvrťroka, ktorý obsahuje hodnotu <code>dateTime</code>. Informácie o časovom pásme sa zachovajú.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta koniec štvrťroka.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite koniec štvrťroka pre dátum 10. október 2011 a čas 8:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Vráti koniec týždňa.",
        "Documentation.LongDescription": "Vráti posledný deň v týždni, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n    Táto funkcia použije voliteľnú hodnotu <code>Day</code>, <code>firstDayOfWeek</code>, ktorá sa pre tento relatívny výpočet nastaví ako prvý deň v týždni. Predvolená hodnota je <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta posledný deň v týždni.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Voliteľné]</i> Hodnota <code>Day.Type</code> predstavujúca prvý deň v týždni. Možné hodnoty sú <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> a <code>Day.Saturday.</code>. Predvolená hodnota je <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte koniec týždňa pre dátum 14. 5. 2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Získajte koniec týždňa pre dátum 17. 5. 2011 a čas 17:00:00 – 7:00, pričom nedeľa je prvým dňom v týždni.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Vráti koniec roka.",
        "Documentation.LongDescription": "Vráti koniec roka, ktorý obsahuje hodnotu <code>dateTime</code> vrátane zlomkových sekúnd. Informácie o časovom pásme sa zachovajú.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta koniec roka.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte koniec roka pre dátum 14. 5. 2011 a čas 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Získajte koniec hodiny pre dátum 17. 5. 2011 a čas 17:00:00 – 7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Vytvorí dátum z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>date</code> zo zadanej hodnoty <code>value</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).\r\nAk zadaná hodnota <code>value</code> je <code>null</code>, <code>Date.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>date</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>date</code> z textového vyjadrenia. Podrobnosti nájdete v časti <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: Súčasť dátumu hodnoty <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Súčasť dátumu ekvivalentu miestneho dátumu a času hodnoty <code>value</code>.</li>\r\n        <li><code>number</code>: Súčasť dátumu ekvivalentu dátumu a času k dátumu automatizácie OLE vyjadrený pomocou funkcie <code>value</code>.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>43910</code> na hodnotu <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Konvertujte hodnotu <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na hodnotu <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Vytvorí dátum z lokálneho, univerzálneho a vlastného formátu dátumu.",
        "Documentation.LongDescription": "Vytvorí z textového vyjadrenia <code>text</code> hodnotu <code>date</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>.<code>Record</code> môže obsahovať tieto polia:\r\n<ul>\r\n <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu s použitím maximálneho úsilia.</li>\r\n   <li><code>Culture</code> : Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môže byť textová hodnota <code>options</code>. Je to rovnaké správanie, ako keby <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu<code>\"2010-12-31\"</code> na hodnotu <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Nájdite dátum v gregoriánskom kalendári, ktorý zodpovedá začiatku roku 1400 v kalendári Hedžra.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny deň, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny deň, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnom dni.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny mesiac, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny mesiac, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnom mesiaci.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny štvrťrok, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny štvrťrok, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnom štvrťroku.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny týždeň, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny týždeň, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnom týždni.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny rok, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny rok, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnom roku.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas nasledujúceho dňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúceho dňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa deň po aktuálnom systémovom čase nachádza v nasledujúcom dni.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas nasledujúceho mesiaca, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúceho mesiaca, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa mesiac po aktuálnom systémovom čase nachádza v nasledujúcom mesiaci.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas nasledujúceho štvrťroka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúceho štvrťroka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa štvrťrok po aktuálnom systémovom čase nachádza v nasledujúcom štvrťroku.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas nasledujúceho týždňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúceho týždňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa týždeň po aktuálnom systémovom čase nachádza v nasledujúcom týždni.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas nasledujúceho roka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúceho roka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa rok po aktuálnom systémovom čase nachádza v nasledujúcom roku.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas predchádzajúceho dňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúceho dňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho dňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa deň pred aktuálnym systémovým časom nachádza v predchádzajúcom dni.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas predchádzajúceho mesiaca, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúceho mesiaca, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho mesiaca.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa mesiac pred aktuálnym systémovým časom nachádza v predchádzajúcom mesiaci.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas predchádzajúceho štvrťroka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúceho štvrťroka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho štvrťroka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa štvrťrok pred aktuálnym systémovým časom nachádza v predchádzajúcom štvrťroku.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas predchádzajúceho týždňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúceho týždňa, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho týždňa.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa týždeň pred aktuálnym systémovým časom nachádza v predchádzajúcom týždni.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Označuje, či sa tento dátum vyskytuje počas predchádzajúceho roka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúceho roka, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálneho roka.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa rok pred aktuálnym systémovým časom nachádza v predchádzajúcom roku.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Udáva, či tento dátum pripadá na aktuálny rok a či sa nachádza v aktuálnom dni alebo pred ním, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálny rok a či sa nachádza v aktuálnom dni alebo pred ním, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v dátume od začiatku roka.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Udáva, či tento dátum spadá do priestupného roka.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> spadá do priestupného roka.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, či rok 2012 vyjadrený hodnotou <code>#date(2012, 01, 01)</code> je priestupným rokom.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Vráti komponent mesiaca.",
        "Documentation.LongDescription": "Vráti komponent mesiaca uvedenej hodnoty <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte mesiac v hodnote #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Vráti komponent názvu mesiaca.",
        "Documentation.LongDescription": "Vráti súčasť názvu mesiaca pre zadaný <code>date</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte názov mesiaca.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Vráti číslo udávajúce štvrťrok v roku, do ktorého spadá príslušný dátum.",
        "Documentation.LongDescription": "Vráti číslo od 1 do 4 udávajúce štvrťrok v roku, do ktorého spadá dátum <code>dateTime</code>. <code>dateTime</code> môže byť hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite štvrťrok v roku, do ktorého spadá dátum #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Vráti začiatok dňa.",
        "Documentation.LongDescription": "Vráti začiatok dňa, ktorý predstavuje hodnota <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok dňa pre dátum 10. október 2011 a čas 8:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Vráti začiatok mesiaca.",
        "Documentation.LongDescription": "Vráti začiatok mesiaca, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>date</code> alebo <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok mesiaca pre dátum 10. október 2011 a čas 8:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Vráti začiatok štvrťroka.",
        "Documentation.LongDescription": "Vráti začiatok štvrťroka, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok štvrťroka pre dátum 10. október 2011 a čas 8:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Vráti začiatok týždňa.",
        "Documentation.LongDescription": "Vráti začiatok týždňa, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok týždňa pre utorok 11. októbra 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Nájdite začiatok týždňa pre utorok 11. októbra 2011 a ako začiatok týždňa použite pondelok.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Vráti začiatok roka.",
        "Documentation.LongDescription": "Vráti začiatok roka, ktorý obsahuje hodnotu <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok roka pre dátum 10. október 2011 a čas 8:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Vráti záznam obsahujúci časti hodnoty dátumu.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci časti danej hodnoty date <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: Hodnota <code>date</code>, z ktorej častí sa vypočíta príslušný záznam.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje hodnotu <code>#date(2011, 12, 31)</code> na záznam obsahujúci časti z hodnoty dátumu.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Vráti textové vyjadrenie hodnoty dátumu.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie <code>date</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>. <code>culture</code> sa používa iba pre staršie pracovné postupy. <code>Record</code> môže obsahovať nasledujúce polia:\r\n<ul>\r\n   <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu pomocou predvoleného nastavenia definovaného hodnotou <code>Culture</code>.</li>\r\n    <li><code>Culture</code>: Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môžu byť textové hodnoty aj <code>options</code> a <code>culture</code>. Je to rovnaké správanie, ako keby <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#date(2010, 12, 31)</code> na hodnotu <code>text</code>. <i>Výsledok sa môže líšiť v závislosti od aktuálnej jazykovej verzie.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Vyhľadajte rok v kalendári Hedžra, ktorý zodpovedá 1. januáru 2000 v gregoriánskom kalendári.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Vráti číslo od 1 do 6 udávajúce týždeň v mesiaci, do ktorého spadá tento dátum.",
        "Documentation.LongDescription": "Vráti číslo od 1 do 6 udávajúce týždeň v mesiaci, do ktorého spadá dátum <code>dateTime</code>.\r\n <ul>\r\n         <li><code>dateTime</code>: Hodnota <code>datetime</code>, pre ktorú sa určuje týždeň v mesiaci.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, do ktorého týždňa v roku 2011 spadá dátum 15. marec.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Vráti číslo od 1 do 54 udávajúce týždeň v roku, do ktorého spadá tento dátum.",
        "Documentation.LongDescription": "Vráti číslo od 1 do 54 udávajúce týždeň v roku zodpovedajúci dátumu <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>datetime</code>, pre ktorú sa určuje týždeň v roku.</li>\r\n        <li><code>firstDayOfWeek</code>: Voliteľná hodnota <code>Day.Type</code>, ktorá určuje, ktorý deň predstavuje začiatok nového týždňa (napríklad <code>Day.Sunday</code>). Ak hodnota nie je zadaná, použije sa predvolená hodnota podľa lokálnych zvyklostí.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Určte, ktorý týždeň v roku obsahuje dátum 27. marec 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Určte, ktorý týždeň v roku obsahuje dátum 27. marec 2011, pričom sa pondelok použije ako začiatok týždňa.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Vráti komponent roka.",
        "Documentation.LongDescription": "Vráti komponent roka uvedenej hodnoty <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte rok v hodnote #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Vráti komponent dátumu vytvorený z danej hodnoty date, datetime alebo datetimezone.",
        "Documentation.LongDescription": "Vráti komponent dátumu hodnoty <code>dateTime</code>, danej hodnoty <code>date</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte hodnotu dátumu hodnoty #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Vytvorí dátum a čas z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetime</code> zo zadanej hodnoty <code>value</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).\r\nAk zadaná hodnota <code>value</code> je <code>null</code>, <code>DateTime.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>datetime</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>datetime</code> z textového vyjadrenia. Podrobnosti nájdete v časti <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: Hodnota <code>datetime</code> s údajom <code>value</code> ako súčasťou dátumu a <code>12:00:00 AM</code> ako súčasťou času.</li>\r\n        <li><code>datetimezone</code>: Miestny ekvivalent <code>datetime</code> hodnoty <code>value</code>.</li>\r\n        <li><code>time</code>: Hodnota <code>datetime</code> s dátumovým ekvivalentom k dátumu automatizácie OLE hodnoty <code>0</code> ako súčasťou dátumu a hodnoty <code>value</code> ako súčasťou času.</li>\r\n        <li><code>number</code>: Ekvivalent <code>datetime</code> k dátumu automatizácie OLE vyjadrený pomocou funkcie <code>value</code>. </li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#time(06, 45, 12)</code> na hodnotu <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Konvertujte hodnotu <code>#date(1975, 4, 4)</code> na hodnotu <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Vytvorí dátum a čas zo 64-bitov dlhého čísla.",
        "Documentation.LongDescription": "Vytvorí hodnotu <code>datetime</code> z hodnoty <code>fileTime</code> a skonvertuje ju na miestne časové pásmo. Hodnota filetime je hodnota času súboru systému Windows, ktorá predstavuje počet 100-nanosekundových intervalov, ktoré uplynuli od polnoci 1. januára 1601 (C.E.) koordinovaného svetového času (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>129876402529842245</code> na hodnotu dátumu a času.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Vytvorí hodnotu datetimezone z miestneho a svetového formátu dátumu a času.",
        "Documentation.LongDescription": "Vytvorí z textového vyjadrenia <code>text</code> hodnotu <code>datetime</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>.<code>Record</code> môže obsahovať tieto polia:\r\n<ul>\r\n <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu s použitím maximálneho úsilia.</li>\r\n   <li><code>Culture</code> : Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môže byť textová hodnota <code>options</code>. Je to rovnaké správanie, ako keby <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>\"2010-12-31T01:30:00\"</code> na hodnotu dátumu a času.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Konvertujte hodnotu <code>\"2010-12-31T01:30:00.121212\"</code> na hodnotu dátumu a času.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Konvertujte hodnotu <code>\"2010-12-31T01:30:00\"</code> na hodnotu dátumu a času.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Konvertujte hodnotu <code>\"20101231T013000\"</code> na hodnotu dátumu a času.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Udáva, či tento dátum a čas pripadá na aktuálnu hodinu, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálnu hodinu, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnej hodine.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Udáva, či tento dátum a čas pripadá na aktuálnu minútu, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálnu minútu, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnej minúte.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Udáva, či tento dátum a čas pripadá na aktuálnu sekundu, podľa určenia na základe aktuálneho dátumu a času v systéme.",
        "Documentation.LongDescription": "Udáva, či daná hodnota dátumu a času <code>dateTime</code> pripadá na aktuálnu sekundu, podľa určenia na základe aktuálneho dátumu a času v systéme.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa aktuálny systémový čas nachádza v aktuálnej sekunde.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas nasledujúcej hodiny, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúcej hodiny, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa hodina po aktuálnom systémovom čase nachádza v nasledujúcej hodine.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas nasledujúcej minúty, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúcej minúty, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa minúta po aktuálnom systémovom čase nachádza v nasledujúcej minúte.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas nasledujúcej sekundy, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas nasledujúcej sekundy, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa sekunda po aktuálnom systémovom čase nachádza v nasledujúcej sekunde.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas predchádzajúcej hodiny, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúcej hodiny, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej hodiny.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa hodina pred aktuálnym systémovým časom nachádza v predchádzajúcej hodine.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas predchádzajúcej minúty, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas prechádzajúcej minúty, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej minúty.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa minúta pred aktuálnym systémovým časom nachádza v predchádzajúcej minúte.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Označuje, či sa tento dátum a čas vyskytuje počas predchádzajúcej sekundy, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.",
        "Documentation.LongDescription": "Označuje, či sa zadaná hodnota dátumu a času <code>dateTime</code> vyskytuje počas predchádzajúcej sekundy, ako je určené aktuálnym dátumom a časom v systéme. Všimnite si, že táto funkcia vráti hodnotu false, keď je jej odovzdaná hodnota, ktorá sa vyskytuje v rámci aktuálnej sekundy.\r\n      <ul>\r\n      <li><code>dateTime</code>: Hodnota <code>datetime</code> alebo <code>datetimezone</code>, ktorá sa má vyhodnotiť.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Určte, či sa sekunda pred aktuálnym systémovým časom nachádza v predchádzajúcej sekunde.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Vráti časť času z danej hodnoty dátumu a času.",
        "Documentation.LongDescription": "Vráti časť času z danej hodnoty dátumu a času <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte hodnotu času hodnoty #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Vráti záznam obsahujúci časti hodnoty dátumu a času.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci časti danej hodnoty datetime <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>datetime</code>, z ktorej častí sa vypočíta príslušný záznam.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje hodnotu <code>#datetime(2011, 12, 31, 11, 56, 2)</code> na záznam obsahujúci hodnoty Dátum a Čas.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Vráti textové vyjadrenie hodnoty dátumu a času.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie <code>dateTime</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>. <code>culture</code> sa používa iba pre staršie pracovné postupy. <code>Record</code> môže obsahovať nasledujúce polia:\r\n<ul>\r\n   <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu pomocou predvoleného nastavenia definovaného hodnotou <code>Culture</code>.</li>\r\n    <li><code>Culture</code>: Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môžu byť textové hodnoty aj <code>options</code> a <code>culture</code>. Je to rovnaké správanie, ako keby <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#datetime(2010, 12, 31, 01, 30, 25)</code> na <code>text</code> hodnotu. <i>Výsledok sa môže líšiť v závislosti od aktuálnej jazykovej verzie.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konvertujte pomocou vzoru ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Vytvorí údaj datetimezone z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>datetimezone</code> zo zadanej hodnoty <code>value</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).\r\nAk zadaná hodnota <code>value</code> je <code>null</code>, <code>DateTimeZone.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>datetimezone</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>datetimezone</code> z textového vyjadrenia. Podrobnosti nájdete v časti <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: Hodnota <code>datetimezone</code> s údajom <code>value</code> ako súčasťou dátumu, <code>12:00:00 AM</code> ako súčasťou času a posunom zodpovedajúcim miestnemu časovému pásmu.</li>\r\n        <li><code>datetime</code>: Hodnota <code>datetimezone</code> s údajom <code>value</code> ako dátumom a časom a posunom zodpovedajúcim miestnemu časovému pásmu.</li>\r\n        <li><code>time</code>: Hodnota <code>datetimezone</code> s dátumovým ekvivalentom k dátumu automatizácie OLE hodnoty <code>0</code> ako súčasťou dátumu, <code>value</code> ako súčasťou času a posunom zodpovedajúcim miestnemu časovému pásmu.</li>\r\n        <li><code>number</code>: Hodnota <code>datetimezone</code> s ekvivalentom dátumu a času k dátumu automatizácie OLE vyjadrenému pomocou hodnoty <code>value</code> a posunom zodpovedajúcim miestnemu časovému pásmu.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>\"2020-10-30T01:30:00-08:00\"</code> na hodnotu <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Vytvorí údaj datetimezone zo 64-bitov dlhého čísla.",
        "Documentation.LongDescription": "Vytvorí hodnotu <code>datetimezone</code> z hodnoty <code>fileTime</code> a skonvertuje ju na miestne časové pásmo. Hodnota filetime je hodnota času súboru systému Windows, ktorá predstavuje počet 100-nanosekundových intervalov, ktoré uplynuli od polnoci 1. januára 1601 koordinovaného svetového času (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>129876402529842245</code> na hodnotu datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Vytvorí hodnotu datetimezone z lokálnych, univerzálnych a vlastných formátov datetimezone.",
        "Documentation.LongDescription": "Vytvorí z textového vyjadrenia <code>text</code> hodnotu <code>datetimezone</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>.<code>Record</code> môže obsahovať tieto polia:\r\n<ul>\r\n <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu s použitím maximálneho úsilia.</li>\r\n   <li><code>Culture</code> : Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môže byť textová hodnota <code>options</code>. Je to rovnaké správanie, ako keby <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>\"2010-12-31T01:30:00-08:00\"</code> na hodnotu <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konvertujte pomocou normy ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Odstráni informácie o časovom pásme z danej hodnoty datetimezone.",
        "Documentation.LongDescription": "Vráti hodnotu #datetime z funkcie <code>dateTimeZone</code> s odstránenými informáciami o časovom pásme.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte informácie o časovom pásme z hodnoty #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Konvertuje komponent časového pásma na miestne časové pásmo.",
        "Documentation.LongDescription": "Zmení informácie o časovom pásme hodnoty datetimezone <code>dateTimeZone</code> na informácie o miestnom časovom pásme.\r\n    Ak funkcia <code>dateTimeZone</code> neobsahuje komponent časového pásma, pridajú sa informácie o miestnom časovom pásme.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmeňte informácie o časovom pásme pre hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na miestne časové pásmo (použije sa tichomorský čas).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Vráti záznam obsahujúci časti hodnoty datetimezone.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci časti danej hodnoty datetimezone <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: Hodnota <code>datetimezone</code>, z ktorej častí sa vypočíta príslušný záznam.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje hodnotu <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> na záznam obsahujúci hodnoty Dátum, Čas a Pásmo.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Vráti textové vyjadrenie hodnoty datetimezone.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie <code>dateTimeZone</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>. <code>culture</code> sa používa iba pre staršie pracovné postupy. <code>Record</code> môže obsahovať nasledujúce polia:\r\n<ul>\r\n   <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu pomocou predvoleného nastavenia definovaného hodnotou <code>Culture</code>.</li>\r\n    <li><code>Culture</code>: Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"MMM\"</code> je <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, zatiaľ čo v <code>\"ru-RU\"</code> <code>\"MMM\"</code> je <code>\"янв\", \"фев\", \"мар\", ...</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môžu byť textové hodnoty aj <code>options</code> a <code>culture</code>. Je to rovnaké správanie, ako keby <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> na hodnotu <code>text</code>. <i>Výsledok sa môže líšiť v závislosti od aktuálnej jazykovej verzie.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konvertujte pomocou vzoru ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Konvertuje komponent časového pásma na časové pásmo UTC.",
        "Documentation.LongDescription": "Zmení informácie o časovom pásme hodnoty dátumu a času <code>dateTimeZone</code> na informácie o časovom pásme UTC alebo svetovom čase.\r\n    Ak funkcia <code>dateTimeZone</code> neobsahuje komponent časového pásma, pridajú sa informácie o časovom pásme UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Zmeňte informácie o časovom pásme pre hodnotu #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) na časové pásmo UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Zmení časové pásmo hodnoty.",
        "Documentation.LongDescription": "Zmení časové pásmo hodnoty.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Zmení časové pásmo hodnoty.",
        "Documentation.LongDescription": "Zmení časové pásmo hodnoty.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Vytvorí desatinné číslo z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte desatinného čísla zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Decimal.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu desatinného čísla, vráti sa <code>value</code>. V opačnom prípade sa vráti chyba. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte desatinnú hodnotu <code>number</code> čísla <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Vráti obsah tabuľky Delta Lake.",
        "Documentation.LongDescription": "Vráti obsah tabuľky Delta Lake.",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Vytvorí číslo s dvojitou presnosťou z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> s dvojitou presnosťou zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Double.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu dvojitej presnosti, vráti sa <code>value</code>. V opačnom prípade sa vráti chyba. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte hodnotu <code>number</code> s dvojitou presnosťou čísla <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Vráti časť trvania v dňoch.",
        "Documentation.LongDescription": "Vráti časť <code>duration</code> v dňoch.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahuje počet dní medzi dvomi dátumami.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Vytvorí trvanie z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>duration</code> zo zadanej hodnoty <code>value</code>. Ak zadaná hodnota <code>value</code> je <code>null</code>, <code>Duration.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>duration</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>duration</code> z textových formátov uplynutého času (d.h:m:s). Podrobnosti nájdete v časti <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: Ekvivalent <code>duration</code> k počtu celých a zlomkových dní vyjadrený pomocou funkcie <code>value</code>.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>2.525</code> na hodnotu <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Vráti hodnotu trvania z textových formátov uplynutého času (d.h:m:s).",
        "Documentation.LongDescription": "Vráti hodnotu trvania zo zadaného textu <code>text</code>. Táto funkcia dokáže analyzovať nasledujúce formáty:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Zahŕňajú sa aj všetky rozsahy)<br>\r\n        ddd: Počet dní.<br>\r\n        hh: Počet hodín, číslo medzi 0 a 23.<br>\r\n        mm: Počet minút, číslo medzi 0 a 59.<br>\r\n        ss: Počet sekúnd, číslo medzi 0 a 59.<br>\r\n        ff: Zlomky sekúnd, číslo medzi 0 a 9 999 999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>\"2.05:55:20\"</code> na hodnotu <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Vráti časť trvania v hodinách.",
        "Documentation.LongDescription": "Vráti časť <code>duration</code> v hodinách.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahujte hodiny z hodnoty trvania.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Vráti časť trvania v minútach.",
        "Documentation.LongDescription": "Vráti časť <code>duration</code> v minútach.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahuje minúty z hodnoty trvania.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Vráti časť trvania v sekundách.",
        "Documentation.LongDescription": "Vráti časť trvania v <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrahuje sekundy z hodnoty trvania.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Vráti záznam obsahujúci časti trvania.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci časti hodnoty duration <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: Hodnota <code>duration</code>, z ktorej sa vytvorí záznam.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#duration(2, 5, 55, 20)</code> na záznam z príslušných častí vrátane dní, hodín, minút a sekúnd (ak je to možné).",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Vráti text vo formáte d.h:m:s.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie vo formáte day.hour:mins:sec danej hodnoty trvania, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>duration</code>, na základe ktorého sa vypočíta textové vyjadrenie.</li>\r\n  <li><code>format</code>: <i>[Voliteľné]</i> Zastarané, vráti chybu, ak hodnota nie je null</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#duration(2, 5, 55, 20)</code> na textovú hodnotu.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Vráti celkový počet dní rozsahu tohto trvania.",
        "Documentation.LongDescription": "Vráti celkový počet dní zahrnutých podľa <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Nájdite celkový počet dní zahrnutých podľa hodnoty trvania.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Vráti celkový počet hodín rozsahu tohto trvania.",
        "Documentation.LongDescription": "Vráti celkový počet hodín zahrnutých podľa <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Nájdite celkový počet hodín zahrnutých podľa hodnoty trvania.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Vráti celkový počet minút rozsahu tohto trvania.",
        "Documentation.LongDescription": "Vráti celkový počet minút zahrnutých podľa <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Nájdite celkový počet minút zahrnutých podľa hodnoty trvania.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Vráti celkový počet sekúnd rozsahu tohto trvania.",
        "Documentation.LongDescription": "Vráti celkový počet sekúnd zahrnutých podľa <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Nájdite celkový počet sekúnd zahrnutých podľa hodnoty trvania.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Vráti záznam chyby z uvedených textových hodnôt spolu s dôvodom, hlásením a podrobnosťami.",
        "Documentation.LongDescription": "Vráti záznam chyby z uvedených textových hodnôt spolu s dôvodom, hlásením a podrobnosťami.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Vráti zobrazenie zdrojového kódu M konštantnej hodnoty.",
        "Documentation.LongDescription": "Vráti zobrazenie zdrojového kódu M konštantnej hodnoty.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Získa zobrazenie zdrojového kódu M číselnej hodnoty.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Získa zobrazenie zdrojového kódu M hodnoty dátumu.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Získa zobrazenie zdrojového kódu M textovej hodnoty.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Vráti výsledok vyhodnotenia výrazu M.",
        "Documentation.LongDescription": "Vráti výsledok vyhodnotenia výrazu M <code>document</code> s dostupnými identifikátormi, na ktoré sa dá odkazovať, a sú definované podľa <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Vyhodnotí jednoduchý súčet.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Vyhodnotí zložitejší súčet.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Vyhodnotí zreťazenie textovej hodnoty s identifikátorom.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Vráti zobrazenie zdrojového kódu M identifikátora.",
        "Documentation.LongDescription": "Vráti zobrazenie zdrojového kódu M identifikátora <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Získa zobrazenie zdrojového kódu M identifikátora.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Získa zobrazenie zdrojového kódu M identifikátora, ktorý obsahuje medzeru.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Vráti obsah zadaného súboru ako binárny údaj.",
        "Documentation.LongDescription": "Vráti obsah súboru <code>path</code> ako binárny údaj. Parameter <code>options</code> je momentálne určený len na interné použitie.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Zistí, či je určitá funkcia považovaná za zdroj údajov.",
        "Documentation.LongDescription": "Zistí, či je funkcia <code>function</code> považovaná za zdroj údajov.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Preloží text predstavujúci geografickú hodnotu vo formáte Well-Known Text (WKT) do štruktúrovaného záznamu.",
        "Documentation.LongDescription": "Preloží text predstavujúci geografickú hodnotu vo formáte Well-Known Text (WKT) do štruktúrovaného záznamu. WKT je štandardný formát definovaný konzorciom Open Geospatial Consortium (OGC) a je to typický formát serializácie používaný databázami vrátane SQL Servera.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Preloží štruktúrovanú hodnotu geografického bodu na jej reprezentáciu vo formáte Well-Known Text (WKT).",
        "Documentation.LongDescription": "Preloží štruktúrovanú hodnotu geografického bodu na jej reprezentáciu vo formáte Well-Known Text (WKT), ako je definovaná konzorciom Open Geospatial Consortium (OGC), ako aj na formát serializácie používaný databázami vrátane SQL Servera.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Preloží text predstavujúci geometrickú hodnotu vo formáte Well-Known Text (WKT) do štruktúrovaného záznamu.",
        "Documentation.LongDescription": "Preloží text predstavujúci geometrickú hodnotu vo formáte Well-Known Text (WKT) do štruktúrovaného záznamu. WKT je štandardný formát definovaný konzorciom Open Geospatial Consortium (OGC) a je to typický formát serializácie používaný databázami vrátane SQL Servera.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Preloží štruktúrovanú hodnotu geometrického bodu na jej reprezentáciu vo formáte Well-Known Text (WKT).",
        "Documentation.LongDescription": "Preloží štruktúrovanú hodnotu geometrického bodu na jej reprezentáciu vo formáte Well-Known Text (WKT), ako je definovaná konzorciom Open Geospatial Consortium (OGC), ako aj na formát serializácie používaný databázami vrátane SQL Servera.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Vráti hodnotu GUID z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>Guid.Type</code> zo zadanej hodnoty <code>value</code>. Ak má zadaná hodnota <code>value</code> hodnotu <code>null</code>, <code>Guid.From</code> vráti hodnotu <code>null</code>. Vykoná sa kontrola, či je zadaná hodnota <code>value</code> v prijateľnom formáte. Prijateľné formáty sú uvedené v príkladoch.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Identifikátor GUID sa môže zadať ako 32 súvislých šestnástkových číslic.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor GUID sa môže zadať ako 32 šestnástkových číslic oddelených spojovníkmi do blokov 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor GUID sa môže zadať ako 32 šestnástkových číslic oddelených spojovníkmi a uzavretých v zátvorkách.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Identifikátor GUID sa môže zadať ako 32 šestnástkových číslic oddelených spojovníkmi a uzavretých úvodzovkami.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Vytvorí 16-bitové celé číslo z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte 16-bitového celého čísla zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Int16.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu 16-bitového celého čísla bez zlomkovej časti, vráti sa <code>value</code>. Ak má zlomkovú časť, číslo sa zaokrúhli podľa zadaného spôsobu zaokrúhlenia. Predvolený spôsob zaokrúhlenia je <code>RoundingMode.ToEven</code>. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte 16-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte 16-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4.5\"</code> pomocou spôsobu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Vytvorí 32-bitové celé číslo z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte 32-bitového celého čísla zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Int32.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu 32-bitového celého čísla bez zlomkovej časti, vráti sa <code>value</code>. Ak má zlomkovú časť, číslo sa zaokrúhli podľa zadaného spôsobu zaokrúhlenia. Predvolený spôsob zaokrúhlenia je <code>RoundingMode.ToEven</code>. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte 32-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte 32-bitovú celočíselnú hodnotu <code>number</code> čísla <code>\"4.5\"</code> pomocou spôsobu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Vytvorí 64-bitové celé číslo z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte 64-bitového celého čísla zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Int64.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu 64-bitového celého čísla bez zlomkovej časti, vráti sa <code>value</code>. Ak má zlomkovú časť, číslo sa zaokrúhli podľa zadaného spôsobu zaokrúhlenia. Predvolený spôsob zaokrúhlenia je <code>RoundingMode.ToEven</code>. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získať hodnotu typu <code>number</code> 64-bitového celého čísla <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte hodnotu <code>number</code> vo formáte 64-bitového celého čísla z čísla <code>\"4.5\"</code> na základe spôsobu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Vytvorí 8-bitové celé číslo so znamienkom z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> vo formáte 8-bitového celého čísla so znamienkom zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Int8.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu 8-bitového celého čísla so znamienkom bez zlomkovej časti, vráti sa <code>value</code>. Ak má zlomkovú časť, číslo sa zaokrúhli podľa zadaného spôsobu zaokrúhlenia. Predvolený spôsob zaokrúhlenia je <code>RoundingMode.ToEven</code>. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Dostupné spôsoby zaokrúhlenia nájdete v časti <code>Number.Round</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte 8-bitovú celočíselnú hodnotu <code>number</code> so znamienkom čísla <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte 8-bitovú celočíselnú hodnotu <code>number</code> so znamienkom čísla <code>\"4.5\"</code> pomocou spôsobu <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Vráti abstraktný strom syntaxe (AST) pre telo funkcie.",
        "Documentation.LongDescription": "<p>Vráti abstraktný strom syntaxe (AST) tela <code>function</code> normalizovaný do výrazu <i>item</i>:\r\n<ul>\r\n  <li>Funkcia musí byť lambda s 1 argumentom.</li>\r\n  <li>Všetky odkazy na parameter funkcie sa nahradia reťazcom <code>ItemExpression.Item</code>.</li>\r\n  <li>AST bude zjednodušená tak, aby obsahovala iba uzly tohto typu:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Po výraze položky sa vyskytne chyba Hodnotu AST nemožno vrátiť pre telo súboru <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vráti hodnotu AST pre telo funkcie <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Vráti obsah dokumentu JSON.",
        "Documentation.LongDescription": "Vráti obsah dokumentu JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Vytvorí vyjadrenie JSON danej hodnoty.",
        "Documentation.LongDescription": "<p>Vytvorí zápis JSON zadanej hodnoty <code>value</code> s textovým kódovaním, ktoré určuje parameter <code>encoding</code>. Ak nie je parameter <code>encoding</code> zadaný, použije sa kódovanie UTF8. Hodnoty sú zapísané nasledovným spôsobom:</p>\r\n <ul>\r\n        <li>Hodnoty null, textové a logické hodnoty sa zobrazujú ako príslušné typy JSON</li>\r\n        <li>Čísla sa zobrazujú ako čísla vo formáte JSON, platí ale, že <code>#infinity</code>, <code>-#infinity</code> a <code>#nan</code> sa konvertujú na hodnoty null</li>\r\n        <li>Zoznamy sa zobrazujú ako polia JSON</li>\r\n        <li>Záznamy sa zobrazujú ako objekty JSON</li>\r\n        <li>Tabuľky sa zobrazujú ako polia objektov</li>\r\n        <li>Dátumy, časy, časové pásma a trvania sa zobrazujú ako text zodpovedajúci norme ISO-8601</li>\r\n        <li>Binárne hodnoty sa zobrazujú ako text s kódovaním base-64</li>\r\n        <li>Typy a funkcie generujú chybu</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Skonvertujte komplexnú hodnotu na formát JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Konvertuje binárnu hodnotu na zoznam textových hodnôt rozdelených v zlomoch riadkov. Ak je zadaný štýl citácie, zlomy riadkov sa môžu zobrazovať v úvodzovkách. Ak má hodnota includeLineSeparators hodnotu True, znaky zlomov riadkov sú zahrnuté v texte.",
        "Documentation.LongDescription": "Konvertuje binárnu hodnotu na zoznam textových hodnôt rozdelených v zlomoch riadkov. Ak je zadaný štýl citácie, zlomy riadkov sa môžu zobrazovať v úvodzovkách. Ak má hodnota includeLineSeparators hodnotu True, znaky zlomov riadkov sú zahrnuté v texte.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Konvertuje textovú hodnotu na zoznam textových hodnôt rozdelených v zlomoch riadkov. Ak má hodnota includeLineSeparators hodnotu True, znaky zlomov riadkov sa zahrnú do textu.",
        "Documentation.LongDescription": "Konvertuje textovú hodnotu na zoznam textových hodnôt rozdelených v zlomoch riadkov. Ak je hodnota includeLineSeparators nastavená na hodnotu True, do textu sa zahrnú znaky zlomu riadka.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (predvolené) Nevyžaduje sa žiadne správanie pri spracovaní úvodzoviek.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Spracovávanie úvodzoviek sa vykonáva podľa Csv. Znak dvojitej úvodzovky sa používa na vymedzenie takýchto oblastí a dva znaky dvojitej úvodzovky sa používajú na označenie jedného znaku dvojitej úvodzovky v rámci takejto oblasti. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Konvertuje zoznam textu na binárnu hodnotu pomocou zadaného kódovania a oddeľovača lineSeparator. Zadaný oddeľovač lineSeparator je pripojený ku každému riadku.  Ak nie je zadaný, použije sa koniec riadka a znaky posunu riadka.",
        "Documentation.LongDescription": "Konvertuje zoznam textu na binárnu hodnotu pomocou zadaného kódovania a oddeľovača lineSeparator. Zadaný oddeľovač lineSeparator je pripojený ku každému riadku.  Ak nie je zadaný, použije sa koniec riadka a znaky posunu riadka.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Konvertuje zoznam textu na jeden text.  Zadaný oddeľovač lineSeparator je pripojený ku každému riadku.  Ak nie je zadaný, použije sa koniec riadka a znaky posunu riadka.",
        "Documentation.LongDescription": "Konvertuje zoznam textu na jeden text.  Zadaný oddeľovač lineSeparator je pripojený ku každému riadku.  Ak nie je zadaný, použije sa koniec riadka a znaky posunu riadka.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Vráti hodnotu True, ak majú všetky výrazy hodnotu True.",
        "Documentation.LongDescription": "Vráti hodnotu True, ak majú všetky výrazy v zozname <code>list</code> hodnotu True.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Určte, či všetky výrazy v zozname {true, true, 2 > 0} majú hodnotu True.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Určte, či všetky výrazy v zozname {true, true, 2 < 0} majú hodnotu True.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Vráti hodnotu True, ak má niektorý výraz hodnotu True.",
        "Documentation.LongDescription": "Vráti hodnotu True, ak má niektorý výraz v zozname <code>list</code> hodnotu True.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Určte, či niektorý z výrazov v zozname {true, false, 2 > 0} má hodnotu True.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Určte, či niektorý z výrazov v zozname {2 = 0, false, 2 < 0} má hodnotu True.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Vráti priemer hodnôt. Funguje s číslom, s hodnotami dátumu, dátumu a času, datetimezone a trvania.",
        "Documentation.LongDescription": "Vráti priemernú hodnotu pre položky v zozname <code>list</code>. Výsledok sa uvádza v rovnakom type údajov ako hodnoty v zozname. Funguje iba s číslom, s hodnotami dátumu, času, dátumu a času, datetimezone a trvania.\r\n    Ak je zoznam prázdny, vráti sa hodnota null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte priemer zoznamu čísel <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Vyhľadajte priemer hodnôt dátumov 1. január 2011, 2. január 2011 a 3. január 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Uloží zoznam do medzipamäte.",
        "Documentation.LongDescription": "Uloží zoznam <code>list</code> do medzipamäte. Výsledkom tohto volania je stabilný zoznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte stabilnú kópiu zoznamu {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Vráti jeden zoznam skombinovaním viacerých zoznamov.",
        "Documentation.LongDescription": "Zoberie zoznam zoznamov <code>lists</code> a zlúči ich do jedného nového zoznamu.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Skombinujte dva jednoduché zoznamy {1, 2} a {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Skombinujte dva zoznamy {1, 2} a {3, {4, 5}}, z ktorého jeden obsahuje vnorený zoznam.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Vráti počet položiek v zozname.",
        "Documentation.LongDescription": "Vráti počet položiek v zozname <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Zistite počet hodnôt v zozname {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Vráti zoznam hodnôt s odstránenými duplikátmi.",
        "Documentation.LongDescription": "Vráti zoznam obsahujúci všetky hodnoty v zozname <code>list</code> s odstránenými duplikátmi. Ak je zoznam prázdny, výsledkom je prázdny zoznam.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte duplikáty zo zoznamu {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Vráti prvú hodnotu zoznamu alebo stanovenú predvolenú hodnotu, ak je zoznam prázdny.",
        "Documentation.LongDescription": "Vráti prvú položku v zozname <code>list</code> alebo voliteľnú predvolenú hodnotu <code>defaultValue</code>, ak je zoznam prázdny.\r\n    Ak je zoznam prázdny a predvolená hodnota nie je stanovená, funkcia vráti hodnotu <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zistite prvú hodnotu v zozname {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Zistite prvú hodnotu v zozname {}. Ak je zoznam prázdny, vráti sa hodnota –1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Vráti prienik hodnôt zoznamu nájdených vo vstupe.",
        "Documentation.LongDescription": "Vráti prienik hodnôt zoznamu nájdených vo vstupnom zozname <code>lists</code>. Možno stanoviť voliteľný parameter <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite prienik zoznamov {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Udáva, či sa v zozname nachádzajú duplikáty.",
        "Documentation.LongDescription": "Vráti logickú hodnotu s informáciami, či sa v zozname <code>list</code> nachádzajú duplikáty; hodnotu <code>true</code>, ak je zoznam jedinečný, hodnotu <code>false</code>, ak sa v ňom nachádzajú duplicitné hodnoty. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či zoznam {1, 2, 3} je jedinečný (t. j. bez duplikátov).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Zistite, či zoznam {1, 2, 3, 3} je jedinečný (t. j. bez duplikátov).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Vráti hodnotu True, ak je zoznam prázdny.",
        "Documentation.LongDescription": "Vráti hodnotu <code>true</code>, ak zoznam <code>list</code> neobsahuje žiadne hodnoty (dĺžka 0). Ak zoznam obsahuje hodnoty (dĺžka > 0), vráti hodnotu <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Zistite, či je zoznam {} prázdny.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Zistite, či je zoznam {1, 2} prázdny.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Vráti poslednú hodnotu zoznamu alebo stanovenú predvolenú hodnotu, ak je zoznam prázdny.",
        "Documentation.LongDescription": "Vráti poslednú položku v zozname <code>list</code> alebo voliteľnú predvolenú hodnotu <code>defaultValue</code>, ak je zoznam prázdny.\r\n    Ak je zoznam prázdny a predvolená hodnota nie je stanovená, funkcia vráti hodnotu <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite poslednú hodnotu v zozname {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Nájdite poslednú hodnotu v zozname {} alebo hodnotu –1, ak je zoznam prázdny.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Vráti poslednú hodnotu v zozname.  Voliteľne možno stanoviť počet hodnôt, ktoré sa majú vrátiť, alebo oprávňujúcu podmienku.",
        "Documentation.LongDescription": "Vráti poslednú položku zoznamu <code>list</code>. Ak je zoznam prázdny, dôjde k výnimke.\r\n Táto funkcia použije voliteľný parameter, <code>countOrCondition</code>, na podporu získania viacerých položiek alebo filtrovania položiek. Parameter <code>countOrCondition</code> možno stanoviť tromi spôsobmi:\r\n <ul>\r\n  <li>Ak je stanovený počet, vráti sa najviac toľko položiek. </li>\r\n  <li>Ak je stanovená podmienka, vrátia sa všetky položky, ktoré pôvodne spĺňali podmienku, počnúc od konca zoznamu. Keď niektorá položka nesplní túto podmienku, žiadne ďalšie položky sa nezahrnú. </li>\r\n  <li>Ak má tento parameter hodnotu null, vráti sa posledná položka v zozname.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite poslednú hodnotu v zozname {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Nájdite posledné hodnoty v zozname {3, 4, 5, -1, 7, 8, 2}, ktoré sú väčšie ako 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Vráti maximálnu hodnotu alebo predvolenú hodnotu pre prázdny zoznam.",
        "Documentation.LongDescription": "Vráti maximálnu položku v zozname <code>list</code> alebo voliteľnú predvolenú hodnotu <code>default</code>, ak je zoznam prázdny.\r\n    Možno stanoviť voliteľnú hodnotu comparisonCriteria <code>comparisonCriteria</code> s cieľom určiť spôsob porovnania položiek v zozname. Ak má tento parameter hodnotu null, použije sa predvolený porovnávač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite maximum v zozname {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Nájdite maximum v zozname {} alebo vráťte hodnotu –1, ak je zoznam prázdny. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Vráti hodnotu mediána v zozname.",
        "Documentation.LongDescription": "Vráti položku mediána zoznamu <code>list</code>. Táto funkcia vráti hodnotu <code>null</code>, ak zoznam neobsahuje žiadne hodnoty, ktoré nie sú <code>null</code>.\r\n    Ak existuje párny počet položiek, funkcia vyberie tú menšiu z dvoch položiek mediána, pokiaľ zoznam\r\n    nepozostáva výlučne z datetime, duration, number alebo time – v takom prípade vráti priemer daných dvoch položiek.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite medián zoznamu <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Vráti minimálnu hodnotu alebo predvolenú hodnotu pre prázdny zoznam.",
        "Documentation.LongDescription": "Vráti minimálnu položku v zozname <code>list</code> alebo voliteľnú predvolenú hodnotu <code>default</code>, ak je zoznam prázdny.\r\n    Možno stanoviť voliteľnú hodnotu comparisonCriteria <code>comparisonCriteria</code> s cieľom určiť spôsob porovnania položiek v zozname. Ak má tento parameter hodnotu null, použije sa predvolený porovnávač.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Nájdite minimum v zozname {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Nájdite minimum v zozname {} alebo vráťte hodnotu –1, ak je zoznam prázdny. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Vráti najčastejšie sa vyskytujúcu hodnotu v zozname.",
        "Documentation.LongDescription": "Vráti položku, ktorá sa najčastejšie vyskytuje v zozname <code>list</code>. Ak je zoznam prázdny, dôjde k výnimke. Ak sa viacero položiek vyskytuje s rovnakou maximálnou frekvenciou, vyberie sa posledná položka.\r\n    Možno zadať voliteľnú hodnotu <code>comparisonCriteria</code>, <code>equationCriteria</code>, na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Nájdite položku, ktorá sa najčastejšie vyskytuje v zozname <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Nájdite položku, ktorá sa najčastejšie vyskytuje v zozname <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Vráti zoznam najčastejšie sa vyskytujúcich hodnôt v zozname.",
        "Documentation.LongDescription": "Vráti položku, ktorá sa najčastejšie vyskytuje v zozname <code>list</code>. Ak je zoznam prázdny, dôjde k výnimke. Ak sa viacero položiek vyskytuje s rovnakou maximálnou frekvenciou, vyberie sa posledná položka.\r\n    Možno zadať voliteľnú hodnotu <code>comparisonCriteria</code>, <code>equationCriteria</code>, na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Nájdite položky, ktoré sa najčastejšie vyskytujú v zozname <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Vráti počet položiek s hodnotami rôznymi od null v zozname.",
        "Documentation.LongDescription": "Vráti počet položiek s hodnotami rôznymi od null v zozname <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Vráti zoznam posunov pre vstup.",
        "Documentation.LongDescription": "Vráti zoznam posunov pre vstupný zoznam <code>list</code>.\r\n    Pri použití parametra List.Transform na zmenu zoznamu možno použiť zoznam pozícií s cieľom poskytnúť funkcii transformácie prístup k príslušnej pozícii.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite posuny hodnôt v zozname {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Vráti súčin čísel v zozname.",
        "Documentation.LongDescription": "Vráti súčin čísel s hodnotami rôznymi od null v zozname <code>numbersList</code>. Vráti hodnotu null, ak sa v zozname nenachádzajú žiadne hodnoty rôzne od null.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Nájdite súčin čísel v zozname <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Vráti zoznam náhodných čísel.",
        "Documentation.LongDescription": "Vráti zoznam náhodných čísel v rozsahu 0 až 1 s daným počtom hodnôt, ktoré sa majú vygenerovať, a s voliteľnou počiatočnou hodnotou.\r\n<ul>\r\n   <li><code>count</code>: Počet náhodných hodnôt, ktoré sa majú vygenerovať.</li>\r\n   <li><code>seed</code>: <i>[Voliteľné]</i> Číselná hodnota na použitie generátora náhodných čísel. Ak je táto hodnota vynechaná, pri každom volaní príslušnej funkcie sa vygeneruje jedinečný zoznam náhodných čísel. Ak zadáte počiatočnú hodnotu spolu s číslom, každým volaním funkcie sa vygeneruje rovnaký zoznam náhodných čísel.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam 3 náhodných čísel.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Vytvorte zoznam 3 náhodných čísel, pričom zadajte počiatočnú hodnotu.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Vráti zoznam, ktorý vynechá stanovený počet prvkov na začiatku zoznamu.",
        "Documentation.LongDescription": "Vráti zoznam, ktorý odstráni prvý prvok zoznamu <code>list</code>. Ak je <code>list</code> prázdny zoznam, vráti sa prázdny zoznam.\r\nTáto funkcia použije voliteľný parameter <code>countOrCondition</code> na podporu odstránenia viacerých hodnôt, ako je uvedené nižšie.\r\n <ul>\r\n <li>Ak je zadané číslo, odstráni sa maximálne tento počet položiek. </li>\r\n <li>Ak je zadaná podmienka, odstránia sa všetky po sebe nasledujúce zodpovedajúce položky na začiatku <code>list</code>.</li>\r\n <li>Ak má tento parameter hodnotu null, zistí sa predvolené správanie. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1, 2, 3, 4, 5} bez prvých 3 čísel.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Vytvorte zoznam zo zoznamu {5, 4, 2, 6, 1}, ktorý začína číslom menším ako 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Vráti zoznam, ktorý odstráni stanovený počet prvkov z konca zoznamu.",
        "Documentation.LongDescription": "Vráti zoznam, ktorý odstráni posledné prvky v počte <code>countOrCondition</code> z konca zoznamu <code>list</code>. Ak <code>list</code> obsahuje menej ako počet prvkov <code>countOrCondition</code> , vráti sa prázdny zoznam.\r\n <ul>\r\n <li>Ak je zadané číslo, odstráni sa maximálne tento počet položiek. </li>\r\n <li>Ak je zadaná podmienka, odstránia sa všetky po sebe nasledujúce zodpovedajúce položky na konci <code>list</code>.</li>\r\n <li>Ak má tento parameter hodnotu null, odstráni sa len jedna položka. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1, 2, 3, 4, 5} bez posledných 3 čísel.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Vytvorte zoznam zo zoznamu {5, 4, 2, 6, 4}, ktorý končí číslom menším ako 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Odstráni všetky hodnoty null zo zadaného zoznamu.",
        "Documentation.LongDescription": "Odstráni všetky výskyty hodnôt null v zozname <code>list</code>. Ak sa v zozname nenachádzajú žiadne hodnoty null, vráti sa pôvodný zoznam.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte hodnoty null zo zoznamu {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Zmení poradie hodnôt v zozname.",
        "Documentation.LongDescription": "Vráti zoznam s hodnotami v zozname <code>list</code> v opačnom poradí.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1..10} v opačnom poradí.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Vráti jedinú položku zoznamu pre zoznam s dĺžkou jeden, v opačnom prípade dôjde k výnimke.",
        "Documentation.LongDescription": "Ak sa v zozname <code>list</code> nachádza iba jedna položka, vráti túto položku.\r\n    Ak sa v zozname nachádza viac ako jedna položka alebo je prázdny, vo funkcii dôjde k výnimke.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite jednu hodnotu v zozname {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Nájdite jednu hodnotu v zozname {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Vráti jedinú položku zoznamu pre zoznam s dĺžkou jeden a predvolenú hodnotu pre prázdny zoznam.",
        "Documentation.LongDescription": "Ak sa v zozname <code>list</code> nachádza iba jedna položka, vráti túto položku.\r\n    Ak je zoznam prázdny, funkcia vráti hodnotu null, pokiaľ nie je stanovená voliteľná hodnota <code>default</code>. Ak sa v zozname nachádza viac ako jedna položka, funkcia vráti chybu.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite jednu hodnotu v zozname {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Nájdite jednu hodnotu v zozname {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Nájdite jednu hodnotu v zozname {}. Ak je zoznam prázdny, vráti sa hodnota –1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Vráti zoznam, ktorý vynechá stanovený počet prvkov na začiatku zoznamu.",
        "Documentation.LongDescription": "Vráti zoznam, ktorý vynechá prvý prvok zoznamu <code>list</code>. Ak je <code>list</code> prázdny zoznam, vráti sa prázdny zoznam.\r\nTáto funkcia použije voliteľný parameter <code>countOrCondition</code> na podporu vynechania viacerých hodnôt, ako je uvedené nižšie.\r\n <ul>\r\n <li>Ak je zadané číslo, vynechá sa maximálne tento počet položiek. </li>\r\n <li>Ak je zadaná podmienka, všetky po sebe idúce zodpovedajúce položky na začiatku <code>list</code> sa vynechajú.</li>\r\n <li>Ak má tento parameter hodnotu null, zistí sa predvolené správanie. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam zo zoznamu {1, 2, 3, 4, 5} bez prvých 3 čísel.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Vytvorte zoznam zo zoznamu {5, 4, 2, 6, 1}, ktorý začína číslom menším ako 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Zoradí zoznam údajov podľa stanovených kritérií.",
        "Documentation.LongDescription": "Zoradí zoznam údajov, <code>list</code>, podľa stanovených voliteľných kritérií.\r\n    Ako kritérium porovnania možno stanoviť voliteľný parameter <code>comparisonCriteria</code>. Môžu sa použiť nasledujúce hodnoty:\r\n    <ul>\r\n    <li> Ak chcete ovládať poradie, kritériom porovnania môže byť hodnota enumerácie Order. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Na výpočet kľúča, ktorý sa použije na zoradenie, možno použiť funkciu 1 argumentu. </li>\r\n    <li> Ak chcete vybrať kľúč a zároveň ovládať poradie, kritériom porovnania môže byť zoznam obsahujúci kľúč aj poradie (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Ak chcete úplne ovládať porovnanie, môžete použiť funkciu 2 argumentov. Do tejto funkcie budú postúpené dve položky zo zoznamu (dve náhodné položky v náhodnom poradí). Funkcia by mala vrátiť jednu z nasledujúcich hodnôt:\r\n        <ul>\r\n            <li> <code>-1</code>: Prvá položka je menšia ako druhá.</li>\r\n            <li> <code>0</code>: Položky sú si rovné.</li>\r\n            <li> <code>1</code>: Prvá položka je väčšia ako druhá.</li>\r\n        </ul>\r\n        Value.Compare je metóda, ktorú možno použiť na delegovanie tejto logiky. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Zoraďte zoznam {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Zoraďte zoznam {2, 3, 1} v zostupnom poradí.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Zoraďte zoznam {2, 3, 1} v zostupnom poradí použitím metódy Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Vráti odhad štandardnej odchýlky na základe vzorky.",
        "Documentation.LongDescription": "Vráti odhad štandardnej odchýlky na základe vzorky od hodnôt v zozname <code>numbersList</code>.\r\n    Ak zoznam <code>numbersList</code> je zoznamom čísel, vráti sa číslo.\r\n    V prázdnom zozname alebo v zozname položiek, ktoré nie sú typu <code>number</code>, dôjde k výnimke.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Nájdite štandardnú odchýlku čísel 1 až 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Vráti súčet položiek v zozname.",
        "Documentation.LongDescription": "Vráti súčet hodnôt rôznych od null v zozname <code>list</code>.  Vráti hodnotu null, ak sa v zozname nenachádzajú žiadne hodnoty rôzne od null.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Nájdite súčet čísel v zozname <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Vráti zjednotenie hodnôt zoznamu nájdených vo vstupe.",
        "Documentation.LongDescription": "Použije zoznam zoznamov <code>lists</code>, zjednotí položky v jednotlivých zoznamoch a vráti ich vo výstupnom zozname. Vrátený zoznam ako výsledok obsahuje všetky položky vo všetkých vstupných zoznamoch.\r\n    Táto operácia zachováva tradičnú sémantiku typu bag, a tak sa duplicitné hodnoty priradia ako súčasť zjednotenia.\r\n    Možno zadať voliteľnú hodnotu kritérií rovnosti <code>equationCriteria</code> na kontrolu testovania rovnosti. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zjednotenie zoznamu {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Vráti zoznam zoznamov, pričom skombinuje položky s tou istou pozíciou do viacerých zoznamov.",
        "Documentation.LongDescription": "Zoberie zoznam zoznamov, <code>lists</code>, a vráti zoznam zoznamov, pričom skombinuje položky s tou istou pozíciou.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Skomprimuje dva jednoduché zoznamy {1, 2} a {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Skomprimuje dva jednoduché zoznamy s rozličnými dĺžkami {1, 2} a {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Vytvorí logickú hodnotu z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>logical</code> zo zadanej hodnoty <code>value</code>. Ak zadaná hodnota <code>value</code> je <code>null</code>, <code>Logical.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>logical</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>logical</code> z textovej hodnoty, buď <code>\"true\"</code>, alebo <code>\"false\"</code>. Podrobnosti nájdete v časti <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code>, ak sa <code>value</code> rovná hodnote <code>0</code>, v opačnom prípade <code>true</code>.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>2</code> na hodnotu <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Vytvorí logickú hodnotu z textových hodnôt True a False.",
        "Documentation.LongDescription": "Vytvorí logickú hodnotu z textovej hodnoty <code>text</code>, a to buď True, alebo False. Ak funkcia <code>text</code> obsahuje iný reťazec, dôjde k výnimke. Textová hodnota <code>text</code> nerozlišuje malé a veľké písmená.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte logickú hodnotu z textového reťazca True.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Vytvorte logickú hodnotu z textového reťazca \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Vráti textovú hodnotu True alebo False s danou logickou hodnotou.",
        "Documentation.LongDescription": "Vytvorí textovú hodnotu z logickej hodnoty <code>logicalValue</code>, a to buď <code>true</code>, alebo <code>false</code>. Ak hodnota <code>logicalValue</code> nie je logická hodnota, dôjde k výnimke.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte textovú hodnotu z logickej hodnoty <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Vráti absolútnu hodnotu čísla.",
        "Documentation.LongDescription": "Vráti absolútnu hodnotu čísla <code>number</code>. Ak hodnota <code>number</code> je null, funkcia <code>Number.Abs</code> vráti hodnotu null.\r\n    <ul>\r\n        <li><code>number</code>: Číslo <code>number</code>, pre ktoré sa má vypočítať absolútna hodnota.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Absolútna hodnota čísla –3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Vráti arkuskosínus čísla.",
        "Documentation.LongDescription": "Vráti arkuskosínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Vráti arkussínus čísla.",
        "Documentation.LongDescription": "Vráti arkussínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Vráti arkustangens čísla.",
        "Documentation.LongDescription": "Vráti arkustangens čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Vráti bajt, pričom každý bit je opačný voči vstupu.",
        "Documentation.LongDescription": "Vráti výsledok vykonania bitovej operácie \"Not\" vo vstupe <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Vráti kosínus čísla.",
        "Documentation.LongDescription": "Vráti kosínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Nájdite kosínus uhla 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Vráti hyperbolický kosínus čísla.",
        "Documentation.LongDescription": "Vráti hyperbolický kosínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Umocní číslo e na danú mocninu.",
        "Documentation.LongDescription": "Vráti výsledok umocnenia čísla e na mocninu <code>number</code> (exponenciálna funkcia).\r\n      <ul>\r\n        <li><code>number</code>: Hodnota <code>number</code>, pre ktorú sa má vypočítať exponenciálna funkcia. Ak hodnota <code>number</code> je null, funkcia <code>Number.Exp</code> vráti hodnotu null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Umocnite číslo e na 3. mocninu.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Vráti faktoriál čísla.",
        "Documentation.LongDescription": "Vráti faktoriál čísla <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite faktoriál čísla 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Vytvorí číslo z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> zo zadanej hodnoty <code>value</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).\r\nAk zadaná hodnota <code>value</code> je <code>null</code>, <code>Number.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>number</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>number</code> z textového vyjadrenia. Spracujú sa bežné formáty textu (\"15\", \"3,423.10\", \"5.0E-10\"). Podrobnosti nájdete v časti <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 pre hodnotu <code>true</code>, 0 pre hodnotu <code>false</code>.</li>\r\n        <li><code>datetime</code>: Číslo s pohyblivou desatinnou čiarkou s dvojitou presnosťou, ktoré obsahuje ekvivalent dátumu automatizácie OLE.</li>\r\n        <li><code>datetimezone</code>: Číslo s pohyblivou desatinnou čiarkou s dvojitou presnosťou, ktoré obsahuje ekvivalent dátumu automatizácie OLE miestneho dátumu a času <code>value</code>.</li>\r\n        <li><code>date</code>: Číslo s pohyblivou desatinnou čiarkou s dvojitou presnosťou, ktoré obsahuje ekvivalent dátumu automatizácie OLE.</li>\r\n        <li><code>time</code>: Vyjadrené v zlomkových dňoch.</li>\r\n        <li><code>duration</code>: Vyjadrené v celých a v zlomkových dňoch.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte hodnotu <code>number</code> čísla <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte hodnotu <code>number</code> čísla <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Získajte hodnotu <code>number</code> z čísla <code>\"12.3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Vytvorí čísla z bežných formátov textu (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> z danej textovej hodnoty <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: Vráti textové vyjadrenie číselnej hodnoty. Vyjadrenie musí byť v bežnom formáte textu, ako napríklad 15, 3,423.10 alebo 5.0E-10.</li>\r\n  <li><code>culture</code>: Voliteľná jazyková verzia, ktorá určuje, ako sa <code>text</code> interpretuje (napríklad en-US).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte číselnú hodnotu čísla <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Získajte číselnú hodnotu čísla <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Udáva, či je hodnota párna.",
        "Documentation.LongDescription": "Udáva, či je hodnota <code>number</code> párna. Ak je párna, vráti hodnotu <code>true</code>, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či je číslo 625 párne.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Skontrolujte, či je číslo 82 párne.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Udáva, či hodnota je NaN (nečíselná).",
        "Documentation.LongDescription": "Udáva, či hodnota je NaN (nečíselná). Vráti hodnotu <code>true</code>, ak <code>number</code> je ekvivalentom k hodnote <code>Number.IsNaN</code>, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či číslo 0 vydelené číslom 0 je NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Skontrolujte, či číslo 1 vydelené číslom 0 je NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Udáva, či je hodnota nepárna.",
        "Documentation.LongDescription": "Udáva, či je hodnota nepárna. Vráti hodnotu <code>true</code>, ak <code>number</code> je nepárne číslo, inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Skontrolujte, či je číslo 625 nepárne.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Skontrolujte, či je číslo 82 nepárne.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Vráti prirodzený logaritmus čísla.",
        "Documentation.LongDescription": "Vráti prirodzený logaritmus čísla <code>number</code>. Ak hodnota <code>number</code> je null, funkcia <code>Number.Ln</code> vráti hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Získajte prirodzený logaritmus čísla 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Vráti logaritmus čísla pri zadanom základe (predvolene číslo e).",
        "Documentation.LongDescription": "Vráti logaritmus čísla <code>number</code> pri zadanom základe <code>base</code>. Ak základ <code>base</code> nie je zadaný, použije sa predvolená hodnota Number.E.\r\n    Ak hodnota <code>number</code> je null, funkcia <code>Number.Log</code> vráti hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Získajte dekadický logaritmus (so základom 10) čísla 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Získajte prirodzený logaritmus (so základom e) čísla 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Vráti dekadický logaritmus (so základom 10) daného čísla.",
        "Documentation.LongDescription": "Vráti dekadický logaritmus (so základom 10) čísla <code>number</code>. Ak hodnota <code>number</code> je null, funkcia <code>Number.Log10</code> vráti hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Získajte dekadický logaritmus (so základom 10) čísla 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Vráti zaokrúhlené číslo. Možno zadať počet číslic aj spôsob zaokrúhlenia.",
        "Documentation.LongDescription": "Vráti výsledok zaokrúhlenia <code>number</code> na najbližšie číslo. Ak <code>number</code> má hodnotu null, <code>Number. Round</code> vráti hodnotu null.<br>\r\n      <br>\r\n      Predvolene sa <code>number</code> zaokrúhli na najbližšie celé číslo a prepojenia sa zaokrúhlia na najbližšie párne číslo (použitím <code>RoundingMode.ToEven</code>, známeho tiež ako „bankárske zaokrúhlenie“).<br>\r\n      <br>\r\n      Tieto predvolené hodnoty však možno prepísať pomocou nasledujúcich voliteľných parametrov. \r\n      <ul>\r\n        <li><code>digits</code>: spôsobí, že <code>number</code> sa zaokrúhli na zadaný počet desatinných miest. </li>\r\n        <li><code>roundingMode</code>: Prepíše predvolené riešenie zhôd, keď sa <code>number</code> nachádza v strede medzi dvomi potenciálnymi zaokrúhlenými hodnotami.\r\n      (pozrite <code>RoundingMode.Type</code> , kde nájdete možné hodnoty).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrúhlite číslo 1,234 na najbližšie celé číslo.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrúhlite číslo 1,56 na najbližšie celé číslo.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Zaokrúhlite číslo 1,2345 na dve desatinné miesta.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Zaokrúhlite číslo 1,2345 na tri desatinné miesta (zaokrúhlenie nahor).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Zaokrúhlite číslo 1,2345 na tri desatinné miesta (zaokrúhlenie nadol).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Vráti výsledok zaokrúhlenia kladných čísel nahor a záporných čísel nadol. Počet číslic je možné zadať.",
        "Documentation.LongDescription": "Vráti výsledok zaokrúhlenia čísla <code>number</code> na základe znamienka čísla. Táto funkcia zaokrúhli kladné čísla nahor a záporné čísla nadol.\r\n    Ak je zadaná funkcia <code>digits</code>, <code>number</code> sa zaokrúhli na desatinné čísla (<code>digits</code>).\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrúhlite číslo –1,2 smerom od nuly.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Zaokrúhlite číslo 1,2 smerom od nuly.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Zaokrúhlenie čísla -1,234 na dve desatinné miesta smerom od nuly.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Vráti najvyššie predchádzajúce číslo. Počet číslic je možné zadať.",
        "Documentation.LongDescription": "Vráti výsledok zaokrúhlenia čísla <code>number</code> nadol na najvyššie nasledujúce celé číslo. Ak hodnota <code>number</code> je null, táto funkcia vráti hodnotu null.\r\n\r\n    Ak sa uvedie <code>digits</code>, <code>number</code> sa zaokrúhli na zadaný počet desatinných miest.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrúhlite číslo 1,234 nadol na celé číslo.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Zaokrúhlite číslo 1,999 nadol na celé číslo.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Zaokrúhlenie čísla 1,999 na dve desatinné miesta.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Vráti výsledok zaokrúhlenia kladných čísel nadol a záporných čísel nahor. Počet číslic je možné zadať.",
        "Documentation.LongDescription": "Vráti výsledok zaokrúhlenia čísla <code>number</code> na základe znamienka čísla. Táto funkcia zaokrúhli kladné čísla nadol a záporné čísla nahor.\r\n    Ak je zadaná funkcia <code>digits</code>, <code>number</code> sa zaokrúhli na desatinné čísla (<code>digits</code>).\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrúhlite číslo –1,2 smerom k nule.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Zaokrúhlite číslo 1,2 smerom k nule.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Zaokrúhlenie čísla -1,234 na dve desatinné miesta smerom k nule.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Vráti najvyššie nasledujúce číslo. Počet číslic je možné zadať.",
        "Documentation.LongDescription": "Vráti výsledok zaokrúhlenia <code>number</code> nahor na najbližšie najvyššie celé číslo. Ak je hodnota <code>number</code> null, táto funkcia vráti hodnotu null.\r\n    Ak sa uvedie <code>digits</code>, <code>number</code> sa zaokrúhli na zadaný počet desatinných miest.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Zaokrúhlite číslo 1,234 nahor na celé číslo.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Zaokrúhlite číslo 1,999 nahor na celé číslo.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Zaokrúhlenie čísla 1,234 na dve desatinné miesta.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Vráti hodnotu 1 pre kladné číslo, hodnotu –1 pre záporné číslo a hodnotu 0 pre nulu.",
        "Documentation.LongDescription": "Vráti hodnotu 1, ak je číslo <code>number</code> kladné, hodnotu –1, ak je záporné, a hodnotu 0, ak je nula.\r\n    Ak hodnota <code>number</code> je null, funkcia <code>Number.Sign</code> vráti hodnotu null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Určte znamienko čísla 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Určte znamienko čísla –182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Určte znamienko čísla 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Vráti sínus čísla.",
        "Documentation.LongDescription": "Vráti sínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Nájdite sínus uhla 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Vráti hyperbolický sínus čísla.",
        "Documentation.LongDescription": "Vráti hyperbolický sínus čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Vráti druhú odmocninu čísla.",
        "Documentation.LongDescription": "Vráti druhú odmocninu čísla <code>number</code>.\r\n    Ak hodnota <code>number</code> je null, funkcia <code>Number.Sqrt</code> vráti hodnotu null. Ak ide o zápornú hodnotu, vráti sa hodnota <code>Number.NaN</code> (nečíselná).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite druhú odmocninu čísla 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Nájdite druhú odmocninu čísla 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Vráti tangens čísla.",
        "Documentation.LongDescription": "Vráti tangens čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Nájdite tangens uhla 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Vráti hyperbolický tangens čísla.",
        "Documentation.LongDescription": "Vráti hyperbolický tangens čísla <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Skonvertuje dané číslo na text.",
        "Documentation.LongDescription": "Skonvertuje číselnú hodnotu <code>number</code> na textovú hodnotu podľa formátu určeného <code>format</code>.<br>\r\n    <br>\r\n    Formát je textová hodnota označujúca spôsob konverzie čísla. Ďalšie podrobnosti o podporovaných hodnotách formátu nájdete v téme https://go.microsoft.com/fwlink/?linkid=2241210 a https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Môžete tiež zadať voliteľné <code>culture</code> (napríklad sk-SK) na ovládanie správania <code>format</code> závislého od kultúry.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Skonvertuje číslo na text bez zadania formátu.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Skonvertuje číslo na exponenciálny formát.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Skonvertuje číslo na percentuálny formát iba s jedným desatinným miestom.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Vráti tabuľku informačných kanálov OData ponúknutú službou OData.",
        "Documentation.LongDescription": "Vráti tabuľku informačných kanálov OData ponúknutú službou OData z identifikátora URI <code>serviceUri</code> s hlavičkami <code>headers</code>. Booleovská hodnota určujúca, či použiť súbežné pripojenia alebo voliteľný parameter záznamu <code>options</code>, sa môže zadať na ovládanie týchto možností:\r\n    <ul>\r\n    <li><code>Query</code>: Programovo pridá parametre dotazu do URL adresy bez toho, aby ste sa museli starať o zadávanie ukončovacích znakov. </li>\r\n    <li> <code>Headers</code>: Zadaním tejto hodnoty ako záznamu sa do požiadavky HTTP zadajú ďalšie hlavičky.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Zadaním tejto hodnoty ako zoznamu sa vylúčia tieto kľúče hlavičiek HTTP z výpočtu údajov vyrovnávacej pamäte.</li>\r\n    <li> <code>ApiKeyName</code>: Ak cieľová lokalita do istej miery používa kľúč rozhrania API, tento parameter možno použiť na určenie názvu (nie hodnoty) parametra kľúča, ktorý sa musí použiť v URL adrese. Skutočná hodnota kľúča je uvedená v poverení.</li>\r\n    <li> <code>Timeout</code>: Zadaním tejto hodnoty ako trvania sa zmení časový limit požiadavky HTTP. Predvolená hodnota je 600 sekúnd.</li>\r\n    <li> <code>EnableBatch</code>: Logická hodnota (true/false), ktorá nastaví, či povoliť generovanie žiadosti OData $batch v prípade prekročenia parametra MaxUriLength (predvolená možnosť je false).</li>\r\n    <li> <code>MaxUriLength</code>: Číslo, ktoré určuje maximálnu dĺžku povoleného identifikátora URI odoslaného do služby OData. V prípade, že sa prekročí a hodnota parametra EnableBatch je true, požiadavka sa vykoná v rámci koncového bodu OData $batch, v opačnom prípade zlyhá (predvolená hodnota je 2048).</li>\r\n    <li> <code>Concurrent</code>: Logická hodnota (true/false). Keď je nastavená na hodnotu true, požiadavky určené službe budú vykonané zároveň. Ak je nastavená na hodnotu false, požiadavky budú vykonané postupne. Ak nie je zadaná, hodnotu určí anotácia služby AsynchronousRequestsSupported. Ak služba neudáva, či sa podporuje AsynchronousRequestsSupported, požiadavky sa budú vykonávať postupne.</li>\r\n    <li> <code>ODataVersion</code>: Číslo (3 alebo 4) udávajúce verziu protokolu OData, ktorá sa má použiť pre túto službu OData. Ak nie je zadané, požiadavka sa odošle do všetkých podporovaných verzií. Verziu služby určí hlavička OData-Version vrátená službou.</li>\r\n    <li> <code>FunctionOverloads</code>: Logický parameter (true/false). Pri nastavení na hodnotu true budú preťaženia importu funkcií uvedené v navigátore ako samostatné položky. Pri nastavení na hodnotu false budú preťaženia importu funkcií uvedené v navigátore ako jedna zjednocovacia funkcia. Predvolená hodnota pre V3: false. Predvolená hodnota pre V4: true.</li>\r\n    <li> <code>MoreColumns</code>: Logická hodnota (true/false). Keď je nastavená na hodnotu true, ku každému informačnému kanálu entity s otvorenými typmi a polymorfnými typmi sa pridá stĺpec More Columns (Ďalšie stĺpce). Bude obsahovať polia, ktoré nie sú deklarované v základnom type. Keď je nastavená na hodnotu false, pole sa nezobrazí. Predvolená hodnota je false.</li>\r\n    <li> <code>IncludeAnnotations</code>: Zoznam čiarkou oddelených názvov alebo vzorov kvalifikovaných výrazov v priestore názvov, ktoré sa majú zahrnúť so znakom hviezdičky (*) ako zástupným znakom. Predvolene nie sú zahrnuté žiadne komentáre.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: Zoznam čiarkou oddelených názvov alebo vzorov kvalifikovaných výrazov v priestore názvov, ktoré sa majú zahrnúť do metaúdajových požiadaviek na dokument, v ktorých sa ako zástupný znak použije hviezdička (*). Predvolene obsahuje tie isté komentáre ako pre parameter IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: Umožňuje službe OData nevypisovať určité hodnoty v odpovediach. V prípade potvrdenia určíme tieto hodnoty z vynechaných polí. Možnosti:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: Umožňuje službe OData vynechať hodnoty null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code>: Určuje implementáciu konektora OData, ktorý sa má použiť. Platné hodnoty sú 2.0 alebo null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pripojí sa k službe TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Vráti výsledok pokusu o odvodenie funkcií SQL pre ovládač ODBC.",
        "Documentation.LongDescription": "Vráti výsledok pokusu o odvodenie funkcií SQL s reťazcom pripojenia <code>connectionString</code> použitím ODBC. <code>connectionString</code> môže byť text alebo záznam dvojice hodnôt vlastností. Hodnoty vlastností môžu byť textové alebo číselné.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Vráti odvodené funkcie SQL pre reťazec pripojenia.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Vráti obsah dokumentu vo formáte Parquet ako tabuľku.",
        "Documentation.LongDescription": "Vráti obsah dokumentu Parquet ako tabuľku. Možnosti zahŕňajú:\n    <ul>\n    <li> <code>TypeMapping</code>: Textová hodnota, ktorá ovláda predvolené mapovanie typov pri čítaní a zápise súborov. Predvolená hodnota je null a pokúsi sa zachovať čo najviac vernosti pôvodnému typu. Hodnota Sql vytvorí výsledky, ktoré sú najviac kompatibilné s SQL Serverom.</li>\n    </ul>",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Vráti percentuálnu hodnotu z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>percentage</code> zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, <code>Percentage.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> <code>text</code> zakončená symbolom percenta, vráti sa konvertované desatinné číslo. V opačnom prípade sa hodnota konvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.From</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte hodnotu <code>percentage</code> z čísla <code>\"12.3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Vráti záznam údajových snímok zo súboru RData.",
        "Documentation.LongDescription": "Vráti záznam údajových snímok zo súboru RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Kombinuje záznamy v danom zozname.",
        "Documentation.LongDescription": "Kombinuje záznamy v danom zozname <code>records</code>. Ak zoznam <code>records</code> obsahuje hodnoty bez záznamu, vráti sa chyba.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte kombinovaný záznam zo záznamov.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Vráti počet polí v zázname.",
        "Documentation.LongDescription": "Vráti počet polí v zázname <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Nájdite počet polí v zázname.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Vráti názvy polí.",
        "Documentation.LongDescription": "Vráti názvy polí v zázname <code>record</code> ako text.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v zázname názvy polí.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Vráti zoznam hodnôt polí.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt polí v zázname <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v zázname hodnoty polí.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Vytvorí záznam z tabuľky vo formáte {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Vráti záznam z tabuľky záznamov <code>table</code> obsahujúci názvy polí a názvy hodnôt <code>{[Name = name, Value = value]}</code>. Ak názvy polí nie sú jedinečné, dôjde k výnimke.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte záznam z tabuľky vo formáte Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Vráti zoznam hodnôt obsahujúci hodnoty polí vstupného záznamu.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt obsahujúci hodnoty polí zo vstupu <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extrahujte hodnoty polí zo záznamu.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Vráti abstraktný strom syntaxe (AST), ktorý predstavuje prístup k stĺpcu vo výraze riadka.",
        "Documentation.LongDescription": "Vráti abstraktný strom syntaxe (AST), ktorý predstavuje prístup k stĺpcu <code>columnName</code> riadka vo výraze riadka.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vytvorí hodnotu AST, ktorá predstavuje prístup stĺpca „CustomerName“.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Vráti abstraktný strom syntaxe (AST) pre telo funkcie.",
        "Documentation.LongDescription": "<p>Vráti abstraktný strom syntaxe (AST) pre hlavnú časť funkcie <code>function</code> normalizovanú do <i>výrazu riadka</i>:\r\n<ul>\r\n  <li>Funkcia musí byť lambda s 1 argumentom.</li>\r\n  <li>Všetky odkazy na parameter funkcie sa nahradia reťazcom <code>RowExpression.Row</code>.</li>\r\n  <li>Všetky odkazy na stĺpce sa nahradia reťazcom <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>Hodnota AST bude zjednodušená tak, aby obsahovala iba uzly typov:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Ak nie je možné pre hlavnú časť funkcie <code>function</code> vrátiť hodnotu AST výrazu riadka, zobrazí sa chyba.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Vráti hodnotu AST pre hlavnú časť funkcie <code>each [CustomerID] = „ALFKI“</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Vytvorí číslo s jednoduchou presnosťou z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>number</code> s jednoduchou presnosťou zo zadanej hodnoty <code>value</code>. Ak je zadaná hodnota <code>value</code> <code>null</code>, príkaz <code>Single.From</code> vráti hodnotu <code>null</code>. Ak je zadaná hodnota <code>value</code> typu <code>number</code> v rozsahu jednoduchej presnosti, vráti sa <code>value</code>. V opačnom prípade sa vráti chyba. Ak je <code>value</code> akéhokoľvek iného typu, najskôr sa skonvertuje na hodnotu <code>number</code> pomocou príkazu <code>Number.FromText</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Získajte hodnotu <code>number</code> s jednoduchou presnosťou čísla <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Vráti tabuľku s údajmi z koncového bodu indexu služby Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Uskutoční volanie do koncového bodu rozhrania Smartsheet 2.0 REST API a transformuje prvok údajov vrátený v tabuľke.",
        "Documentation.Examples": [
          {
            "Description": "Stiahne tabuľku s informáciami o používateľoch z rozhrania Smartsheet API",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Tabuľka s informáciami o používateľoch, ktorú vrátilo rozhranie Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v ľubovoľnom zo stanovených oddeľovačov.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v ľubovoľnom zo stanovených oddeľovačov.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup čiarkou alebo bodkočiarkou, pričom ignoruje úvodzovky a oddeľovače v úvodzovkách, počnúc od začiatku vstupu.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Rozdelí vstup čiarkou alebo bodkočiarkou, pričom ignoruje úvodzovky a oddeľovače v úvodzovkách, počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa stanoveného oddeľovača.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa stanoveného oddeľovača.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup čiarkou, pričom ignoruje čiarky v úvodzovkách.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v každom stanovenom oddeľovači v rámci postupnosti.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v každom stanovenom oddeľovači v rámci postupnosti.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup čiarkou a potom bodkočiarkou počnúc od začiatku vstupu.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Rozdelí vstup čiarkou, potom bodkočiarkou a spracuje úvodzovky ako akýkoľvek iný znak, počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa každej stanovenej dĺžky.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa každej stanovenej dĺžky.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup na prvé dva znaky, za ktorými nasledujú ďalšie tri znaky, počnúc od začiatku vstupu.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Rozdelí vstup na prvé tri znaky, za ktorými nasledujú ďalšie dva znaky, počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v každej stanovenej pozícii.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu v každej stanovenej pozícii.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup na zadaných pozíciách počnúc od začiatku vstupu.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Rozdelí vstup na zadaných pozíciách počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa stanovených posunov a dĺžok.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu podľa stanovených posunov a dĺžok. Dĺžka null označuje, že by sa mal zahrnúť všetok zostávajúci vstup.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Rozdelí vstup podľa zadaných párov pozície a dĺžky, počnúc od začiatku vstupu. Majte na pamäti, že rozsahy v tomto príklade sa prekrývajú.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Rozdelí vstup podľa zadaných párov pozície a dĺžky počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Rozdeľte vstup na PSČ s pevnou dĺžkou a za ním názov mesta s premenlivou dĺžkou.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Vráti funkciu, ktorá rozdelí text do zoznamu textu opakovane po stanovenej dĺžke.",
        "Documentation.LongDescription": "Vráti funkciu, ktorá rozdelí text do zoznamu textu opakovane po stanovenej dĺžke.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Opakovane rozdelí vstup na bloky troch znakov počnúc od začiatku vstupu.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Opakovane rozdelí vstup na bloky troch znakov počnúc od konca vstupu.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Vráti približný počet riadkov v tabuľke.",
        "Documentation.LongDescription": "Vráti približný počet riadkov v <code>table</code> alebo chybu, ak zdroj údajov nepodporuje odhad.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Odhadne počet jedinečných kombinácií mesta a štátu vo veľkej tabuľke, ktorú možno použiť ako odhad kardinality pre stĺpce. Odhady kardinality sú dostatočne dôležité, aby rôzne zdroje údajov (ako napríklad SQL Server) podporujú tento konkrétny odhad, často pomocou algoritmu s názvom HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Vráti počet stĺpcov v tabuľke.",
        "Documentation.LongDescription": "Vráti počet stĺpcov v tabuľke <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nájdite v tabuľke počet stĺpcov.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Vráti názvy stĺpcov ako zoznam.",
        "Documentation.LongDescription": "Vráti názvy stĺpcov v tabuľke <code>table</code> ako zoznam textu.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite názvy stĺpcov tabuľky.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Vráti prvý riadok alebo stanovenú predvolenú hodnotu.",
        "Documentation.LongDescription": "Vráti prvý riadok tabuľky <code>table</code> alebo voliteľnú predvolenú hodnotu <code>default</code>, ak je tabuľka prázdna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite prvý riadok tabuľky.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Nájdite prvý riadok tabuľky <code>({})</code> alebo vráťte hodnotu [a = 0, b = 0], ak je tabuľka prázdna.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Vráti prvý stĺpec prvého riadka tabuľky alebo zadanú predvolenú hodnotu.",
        "Documentation.LongDescription": "Vráti prvý stĺpec prvého riadka tabuľky <code>table</code> alebo zadanú predvolenú hodnotu.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Udáva, či tabuľka obsahuje iba rozdielne riadky (nie duplikáty).",
        "Documentation.LongDescription": "Udáva, či tabuľka <code>table</code> obsahuje iba rozdielne riadky (nie duplikáty). Vráti hodnotu <code>true</code>, ak sú riadky rozdielne, inak vráti hodnotu <code>false</code>.\r\n    Voliteľný parameter <code>comparisonCriteria</code> určí, v ktorých stĺpcoch tabuľky sa testuje duplicita. Ak parameter <code>comparisonCriteria</code> nie je zadaný, testujú sa všetky stĺpce.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Určte, či je tabuľka rozdielna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Určte, či je tabuľka rozdielna v stĺpci.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Udáva, či tabuľka obsahuje nejaké riadky.",
        "Documentation.LongDescription": "Udáva, či tabuľka <code>table</code> obsahuje nejaké riadky. Vráti hodnotu <code>true</code>, ak neobsahuje žiadne riadky (t. j. tabuľka je prázdna), inak vráti hodnotu <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Určte, či je tabuľka prázdna.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Určte, či tabuľka <code>({})</code> je prázdna.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Vráti kľúče zadanej tabuľky.",
        "Documentation.LongDescription": "Vráti kľúče zadanej tabuľky.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Načítajte zoznam kľúčov pre tabuľku.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Vráti posledný riadok alebo stanovenú predvolenú hodnotu.",
        "Documentation.LongDescription": "Vráti posledný riadok tabuľky <code>table</code> alebo voliteľnú predvolenú hodnotu <code>default</code>, ak je tabuľka prázdna.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nájdite posledný riadok tabuľky.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Nájdite posledný riadok tabuľky <code>({})</code> alebo vráťte hodnotu [a = 0, b = 0], ak je tabuľka prázdna.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Vráti počet riadkov v tabuľke.",
        "Documentation.LongDescription": "Vráti počet riadkov v tabuľke <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nájdite počet riadkov v tabuľke.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Vráti jeden riadok v tabuľke.",
        "Documentation.LongDescription": "Vráti jeden riadok v jednoriadkovej tabuľke <code>table</code>. Ak tabuľka <code>table</code> obsahuje viac ako jeden riadok, dôjde k výnimke.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Vráťte jeden riadok v tabuľke.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Vytvorí zoznam vnorených zoznamov hodnôt stĺpcov z tabuľky.",
        "Documentation.LongDescription": "Vytvorí zoznam vnorených zoznamov z tabuľky <code>table</code>.  Každá položka zoznamu je vnútorným zoznamom, ktorý obsahuje hodnoty stĺpcov.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam hodnôt stĺpcov z tabuľky.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Konvertuje tabuľku na zoznam použitím zadanej funkcie kombinovania na každý riadok hodnôt v tabuľke.",
        "Documentation.LongDescription": "Konvertuje tabuľku na zoznam použitím zadanej funkcie kombinovania na každý riadok hodnôt v tabuľke.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Spojte text v jednotlivých riadkoch čiarkou.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Konvertuje tabuľku na zoznam záznamov.",
        "Documentation.LongDescription": "Konvertuje tabuľku <code>table</code> na zoznam záznamov.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte tabuľku na zoznam záznamov.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Vytvorí zoznam vnorených zoznamov hodnôt riadkov z tabuľky.",
        "Documentation.LongDescription": "Vytvorí zoznam vnorených zoznamov z tabuľky <code>table</code>.  Každá položka zoznamu je vnútorným zoznamom, ktorý obsahuje hodnoty riadkov.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam hodnôt riadkov z tabuľky.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Vytvorí upravený záznam chýb, ktorý nespustí návrat pri vygenerovaní obslužným programom definovaným v zobrazení (prostredníctvom funkcie Table.View).",
        "Documentation.LongDescription": "Vytvorí upravený záznam chýb z <code>errorRecord</code>, ktorý nespustí návrat pri vygenerovaní obslužným programom definovaným v zobrazení (prostredníctvom funkcie Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Vytvorí funkciu, do ktorej môže zasahovať obslužný program definovaný v zobrazení (prostredníctvom funkcie Table.View).",
        "Documentation.LongDescription": "<p>Vytvorí funkciu zobrazenia založenú na <code>function</code>, s ktorou možno pracovať v zobrazení vytvorenom pomocou funkcie <code>Table.View</code>.</p>\r\n<p>Na definovanie obslužného programu pre funkciu zobrazenia sa dá použiť obslužný program <code>OnInvoke</code> zobrazenia <code>Table.View</code>.</p>\r\n<p>Rovnako ako pri obslužných programoch pre vstavané operácie platí, že ak obslužný program <code>OnInvoke</code> nie je zadaný, neobsluhuje danú funkciu zobrazenia alebo zobrazí chybu, cez zobrazenie sa použije <code>function</code>.</p>\r\n<p>Úplnejší popis funkcie <code>Table.View</code> a vlastných funkcií zobrazenia nájdete v publikovanej dokumentácii vlastného konektora Power Query.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Vráti textovú hodnotu, pričom odstráni všetky riadiace znaky.",
        "Documentation.LongDescription": "Vráti textovú hodnotu, pričom odstráni všetky riadiace znaky <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte znaky posunu riadka a ostatné vodiace znaky z textovej hodnoty.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Zreťazí zoznam textových hodnôt na jednu textovú hodnotu.",
        "Documentation.LongDescription": "Vráti výsledok kombinujúci zoznam textových hodnôt <code>texts</code> do jednej textovej hodnoty. Všetky hodnoty <code>null</code>, ktoré obsahuje <code>texts</code>, sa ignorujú.\r\n    Možno zadať voliteľnú hodnotu <code>separator</code> použitú v konečnom kombinovanom texte.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kombinujte textové hodnoty \"Seattle\" a \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Kombinujte textové hodnoty Seattle a WA oddelené čiarkou a medzerou.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Skombinujte hodnoty Seattle, <code>null</code> a WA oddelené čiarkou a medzerou. (Upozorňujeme, že hodnota <code>null</code> sa ignoruje.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Vytvorí textovú hodnotu z danej hodnoty.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie hodnoty <code>value</code>. Hodnotou <code>value</code> môže byť <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> alebo <code>binary</code>.\r\n    Ak je daná hodnota null, formát <code>Text.From</code> vráti hodnotu null. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte textovú hodnotu z čísla 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Dekóduje údaje z binárneho formátu na text.",
        "Documentation.LongDescription": "Dekóduje údaje <code>binary</code> z binárnej hodnoty na textovú hodnotu použitím typu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Určuje podrobný typ čísla (Int64.Type, Double.Type atď.), ktoré je zakódované v texte.",
        "Documentation.LongDescription": "Odvodí granulárny typ čísla (Int64.Type, Double.Type atď.) pre <code>text</code>. Ak <code>text</code> nie je číslo, vyvolá sa chyba. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Vráti počet znakov.",
        "Documentation.LongDescription": "Vráti počet znakov v texte <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Zistite, koľko znakov sa nachádza v texte \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Skonvertuje všetky znaky na malé písmená.",
        "Documentation.LongDescription": "Vráti výsledok konverzie všetkých znakov v <code>text</code> na malé písmená. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získajte verziu textu \"AbCd\" v malých písmenách.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Zmení prvé písmeno každého slova na veľké písmeno.",
        "Documentation.LongDescription": "Vráti výsledok zmeny iba prvého písmena každého slova v textovej hodnote <code>text</code> na veľké písmeno. Všetky ostatné písmená sa vrátia ako malé písmená. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Použite funkciu <code>Text.Proper</code> na jednoduchú vetu.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Vráti späť zadanú akciu <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obráti text „123“.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Kóduje text na binárny formát.",
        "Documentation.LongDescription": "Kóduje danú textovú hodnotu <code>text</code> na binárnu hodnotu použitím stanoveného typu <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Vráti zoznam hodnôt znakov z danej textovej hodnoty.",
        "Documentation.LongDescription": "Vráti zoznam hodnôt znakov z danej textovej hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte zoznam hodnôt znakov z textu \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Odstráni všetky úvodné aj koncové prázdne znaky.",
        "Documentation.LongDescription": "Vráti výsledok odstránenia všetkých úvodných aj koncových prázdnych znakov z textovej hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte úvodný aj koncový prázdny znak z textu \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Odstráni všetky koncové prázdne znaky.",
        "Documentation.LongDescription": "Vráti výsledok odstránenia všetkých koncových prázdnych znakov z textovej hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte koncový prázdny znak z textu \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Odstráni všetky úvodné prázdne znaky.",
        "Documentation.LongDescription": "Vráti výsledok odstránenia všetkých úvodných prázdnych znakov z textovej hodnoty <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Odstráňte úvodný prázdny znak z textu \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Skonvertuje všetky znaky na veľké písmená.",
        "Documentation.LongDescription": "Vráti výsledok konverzie všetkých znakov v <code>text</code> na veľké písmená. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Získajte verziu textu \"aBcD\" vo veľkých písmenách.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Vráti koniec hodiny.",
        "Documentation.LongDescription": "Vráti koniec hodiny, ktorý predstavuje hodnota <code>dateTime</code> vrátane zlomkových sekúnd. Informácie o časovom pásme sa zachovajú.\r\n      <ul>\r\n        <li><code>dateTime</code>: Hodnota <code>time</code>, <code>datetime</code> alebo <code>datetimezone</code>, z ktorej sa vypočíta koniec hodiny.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Získajte koniec hodiny pre dátum 14. 5. 2011 a čas 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Získajte koniec hodiny pre dátum 17. 5. 2011 a čas 17:00:00 – 7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Vytvorí čas z danej hodnoty.",
        "Documentation.LongDescription": "Vráti hodnotu <code>time</code> zo zadanej hodnoty <code>value</code>. Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).\r\nAk zadaná hodnota <code>value</code> je <code>null</code>, <code>Time.From</code> vráti hodnotu <code>null</code>. Ak zadaná hodnota <code>value</code> je <code>time</code>, vráti sa hodnota <code>value</code>. Hodnoty nasledujúcich typov možno konvertovať na hodnotu <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: Hodnota <code>time</code> z textového vyjadrenia. Podrobnosti nájdete v časti <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: Súčasť času hodnoty <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: Súčasť času ekvivalentu miestneho dátumu a času hodnoty <code>value</code>.</li>\r\n        <li><code>number</code>: Ekvivalent <code>time</code> k počtu zlomkových dní vyjadrený pomocou príkazu <code>value</code>. Ak je hodnota <code>value</code> záporná, prípadne väčšia ako alebo rovná hodnote 1, vráti sa chyba.</li>\r\n      </ul>\r\nAk je hodnota <code>value</code> akéhokoľvek iného typu, vráti sa chyba.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>0.7575</code> na hodnotu <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Konvertujte hodnotu <code>#datetime(1899, 12, 30, 06, 45, 12)</code> na hodnotu <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Vytvorí čas z lokálnych a univerzálnych a vlastných formátov času.",
        "Documentation.LongDescription": "Vytvorí z textového vyjadrenia <code>text</code> hodnotu <code>time</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>.<code>Record</code> môže obsahovať tieto polia:\r\n<ul>\r\n <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie času s použitím maximálneho úsilia.</li>\r\n   <li><code>Culture</code> : Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"tt\"</code> je <code>\"AM\" alebo \"PM\"</code>, zatiaľ čo v <code>\"ar-EG\"</code> <code>\"tt\"</code> je <code>\"ص\" alebo \"م\"</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môže byť textová hodnota <code>options</code>. Je to rovnaké správanie, ako keby <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>\"10:12:31am\"</code> na hodnotu času.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Konvertujte hodnotu <code>\"1012\"</code> na hodnotu času.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Konvertujte hodnotu <code>\"10\"</code> na hodnotu času.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Vráti komponent hodiny.",
        "Documentation.LongDescription": "Vráti komponent hodiny uvedenej hodnoty <code>time</code>, <code>datetime</code> alebo <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte hodinu v hodnote #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Vráti komponent minúty.",
        "Documentation.LongDescription": "Vráti komponent minúty uvedenej hodnoty <code>time</code>, <code>datetime</code> alebo <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Vyhľadajte minútu v hodnote #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Vráti komponent sekundy.",
        "Documentation.LongDescription": "Vráti komponent sekundy uvedenej hodnoty <code>time</code>, <code>datetime</code> alebo <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Nájdite hodnotu sekundy z hodnoty dátumu a času.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Vráti začiatok hodiny.",
        "Documentation.LongDescription": "Vráti začiatok hodiny, ktorý predstavuje hodnota <code>dateTime</code>.\r\n    <code>dateTime</code> musí byť hodnota <code>time</code>, <code>datetime</code> alebo <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nájdite začiatok hodiny pre dátum 10. október 2011 a čas 8:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Vráti záznam obsahujúci časti hodnoty času.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci časti danej hodnoty time <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: Hodnota <code>time</code>, z ktorej častí sa vypočíta príslušný záznam.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuje hodnotu <code>#time(11, 56, 2)</code> na záznam obsahujúci hodnoty času.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Vráti textové vyjadrenie hodnoty času.",
        "Documentation.LongDescription": "Vráti textové vyjadrenie <code>time</code>. K zadaniu ďalších vlastností možno zadať voliteľný parameter <code>record</code> <code>options</code>. <code>culture</code> sa používa iba pre staršie pracovné postupy. <code>Record</code> môže obsahovať nasledujúce polia:\r\n<ul>\r\n   <li><code>Format</code>: hodnota <code>text</code> označujúca formát, ktorý sa má použiť. Ďalšie podrobnosti nájdete na adrese https://go.microsoft.com/fwlink/?linkid=2180104 a https://go.microsoft.com/fwlink/?linkid=2180105. Vynechanie tohto poľa alebo poskytnutie hodnoty <code>null</code> bude mať za následok formátovanie dátumu pomocou predvoleného nastavenia definovaného hodnotou <code>Culture</code>.</li>\r\n    <li><code>Culture</code>: Ak <code>Format</code> nemá hodnotu null, <code>Culture</code> ovláda niektoré špecifikátory formátu. Napríklad v <code>\"en-US\"</code> <code>\"tt\"</code> je <code>\"AM\" alebo \"PM\"</code>, zatiaľ čo v <code>\"ar-EG\"</code> <code>\"tt\"</code> je <code>\"ص\" alebo \"م\"</code>. Keď je <code>Format</code> hodnota <code>null</code>, <code>Culture</code> ovláda predvolený formát, ktorý sa má použiť. Keď má <code>Culture</code>hodnotu <code>null</code> alebo sa vynechá, použije sa <code>Culture.Current</code>.</li>\r\n</ul>\r\nNa podporu starších pracovných postupov môžu byť textové hodnoty aj <code>options</code> a <code>culture</code>. Je to rovnaké správanie, ako keby <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertujte hodnotu <code>#time(01, 30, 25)</code> na hodnotu <code>text</code>. <i>Výsledok sa môže líšiť v závislosti od aktuálnej jazykovej verzie.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konvertujte pomocou vlastného formátu a nemeckej jazykovej verzie.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konvertujte pomocou štandardného formátu času.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Vráti uzavretú verziu daného typu záznamu (alebo rovnaký typ, ak už je uzavretý).",
        "Documentation.LongDescription": "Vráti uzavretú verziu daného <code>záznamu</code> <code>type</code> (alebo rovnaký typ, ak už je uzavretý).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvor uzavretú verziu <code>typu [ A = číslo,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Vráti obmedzenia typu.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci obmedzenia typu <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Vráti záznam s hodnotami poľa nastavený na názov parametrov typu funkcie, a ich hodnoty nastavené na zodpovedajúce typy.",
        "Documentation.LongDescription": "Vráti záznam s hodnotami poľa nastavený na názov parametrov <code>type</code>, a ich hodnoty nastavené na zodpovedajúce typy.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nájdi typy parametrov funkcie <code>(x ako číslo, y ako text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Vráti číslo označujúce minimálny počet parametrov požadovaných na vyvolanie typu funkcie.",
        "Documentation.LongDescription": "Vráti číslo označujúce minimálny počet parametrov požadovaných na vyvolanie vstupu <code>type</code> funkcie.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nájdi počet parametrov požadovaných funkciou <code>(x ako číslo, voliteľne y ako text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Vráti typ vrátený typom funkcie.",
        "Documentation.LongDescription": "Vráti typ vrátený funkciou <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nájdi typ návratu <code>() ako ľubovoľné)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Ak ide o typ s povolenou hodnotou Null, vráti hodnotu True, v opačnom prípade vráti hodnotu False.",
        "Documentation.LongDescription": "Ak ide o typ <code>s povolenou hodnotou Null</code>, vráti hodnotu <code>True</code> v opačnom prípade vráti hodnotu <code>False</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zisti, či má <code>číslo</code> povolenú hodnotu Null.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Zisti, či má <code>zadajte číslo s povolenou hodnotou Null</code> povolenú hodnotu Null.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Vráti informácie o tom, či je typ záznamu otvorený.",
        "Documentation.LongDescription": "Vráti <code>logickú hodnotu</code> označujúcu, či je záznam <code>type</code> otvorený.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Zisti, či je záznam <code>typ [ A = číslo, ...]</code> otvorený.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Vráti typ položky z typu zoznamu.",
        "Documentation.LongDescription": "Vráti typ položky zo zoznamu <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nájdi typ položky zo zoznamu <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Vráti typ s nepovolenou hodnotou Null z typu.",
        "Documentation.LongDescription": "Vráti typ s nepovolenou <code>hodnotou Null</code> z <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vráť typ s nepovolenou hodnotou Null <code>zadajte číslo s povolenou hodnotou Null</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Vráti otvorenú verziu daného typu záznamu (alebo rovnaký typ, ak už je otvorený).",
        "Documentation.LongDescription": "Vráti otvorenú verziu daného <code>záznamu</code> <code>type</code> (alebo rovnaký typ, ak už je otvorený).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vytvor otvorenú verziu <code>typu [ A = číslo]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Vráti záznam popisujúci polia typu záznamu, kde každé pole vráteného typu záznamu má zodpovedajúci názov a zodpovedajúcu hodnotu.",
        "Documentation.LongDescription": "Vráti záznam popisujúci polia záznamu <code>type</code>, kde každé pole vráteného typu záznamu má zodpovedajúci názov a zodpovedajúcu hodnotu, v tvare záznamu <code>[ Type = typ, Optional = logická hodnota ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nájdi názov a hodnotu záznamu <code>[ A = číslo, voliteľne B = ľubovoľné]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Vráti pravdepodobne prázdny zoznam kľúčov pre daný typ tabuľky.",
        "Documentation.LongDescription": "Vráti prípadne prázdny zoznam kľúčov pre daný typ tabuľky.<br>\r\n    <br>\r\n    Každý kľúč je definovaný pomocou záznamu v nasledujúcom tvare:\r\n    <ul>\r\n      <li>\r\n        <code>Sĺpce</code>: zoznam názvov stĺpcov, ktoré definujú kľúč\r\n      </li>\r\n      <li>\r\n        <code>Hlavné</code>: <code>true</code> ak je kľúč primárnym kľúčom tabuľky; v opačnom prípade, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vrátiť informácie o kľúči pre typ tabuľky.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Vráti typ riadka typu tabuľky.",
        "Documentation.LongDescription": "Vráti typ riadka zadaného typu tabuľky. Výsledok bude vždy typ záznamu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Vráti informácie o type riadka pre jednoduchú tabuľku.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Vráti zjednotenie zoznamu typov.",
        "Documentation.LongDescription": "Vráti zjednotenie typov v: <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Zostavte záznam v reťazci dotazu identifikátora URI.",
        "Documentation.LongDescription": "Zostavte záznam <code>query</code> v reťazci dotazu identifikátora URI, znaky ukončenia podľa potreby.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Vytvorte kódovanie reťazca dotazu so špeciálnymi znakmi.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Kóduje špeciálne znaky podľa štandardu RFC 3986.",
        "Documentation.LongDescription": "Kóduje špeciálne znaky v rámci vstupu <code>data</code> podľa pravidiel štandardu RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Kóduje špeciálne znaky: \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Vráti časti vstupného absolútneho identifikátora URI ako záznam.",
        "Documentation.LongDescription": "Vráti časti vstupu <code>absoluteUri</code> ako záznam, pričom bude obsahovať hodnoty ako Scheme, Host, Port, Path, Query, Fragment, UserName a Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Nájdite časti vstupného absolútneho identifikátora URI \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Dekódovať percentovo kódovaný reťazec.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu svojej služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS. AccountContents",
        "Documentation.Name": "VSTS. AccountContents",
        "Documentation.LongDescription": "Vráti obsah stiahnutý z URL adresy služby Azure DevOps Analytics Service ako binárnu hodnotu. Táto funkcia využíva rôzne prihlasovacie údaje pre rôzne organizácie."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Zadajte URL adresu svojej služby Azure DevOps Analytics Service.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Vráti obsah stiahnutý z URL adresy služby Azure DevOps Analytics Service ako binárnu hodnotu. Táto funkcia využíva globálne prihlasovacie údaje pre všetky prístupné organizácie."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Vyjadruje alternatívne plány dotazov.",
        "Documentation.LongDescription": "Vyjadruje alternatívne plány dotazov v rámci výrazu plánu dotazu získaného cez Value.Expression(Value.Optimize(...)). Nie je určené na iné použitie.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Vráti abstraktný strom syntaxe (AST), ktorý predstavuje výraz hodnoty.",
        "Documentation.LongDescription": "Vráti abstraktný strom syntaxe (AST), ktorý predstavuje výraz hodnoty",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Vytvorí hodnotu silného typu z textového vyjadrenia.",
        "Documentation.LongDescription": "Dekóduje hodnotu z textového vyjadrenia <code>text</code> a interpretuje ju ako hodnotu vhodného typu.\r\n    <code>Value.FromText</code> použije textovú hodnotu a vráti číslo, logickú hodnotu, hodnotu null, hodnotu dátumu a času, hodnotu trvania alebo textovú hodnotu. Prázdna textová hodnota sa interpretuje ako hodnota null.\r\n    Voliteľne sa tiež môže zadať <code>culture</code> (napríklad en-US).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Vráti záznam obsahujúci metaúdaje vstupu.",
        "Documentation.LongDescription": "Vráti záznam obsahujúci metaúdaje vstupu.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Signalizuje, že Value.Expression vráti optimalizovaný výraz pre hodnotu.",
        "Documentation.LongDescription": "Ak <code>value</code> predstavuje dotaz, ktorý je možné optimalizovať, táto funkcia pri použití v rámci Value.Expression indikuje, že sa má vrátiť optimalizovaný výraz. V opačnom prípade sa <code>value</code> odovzdá bez efektu.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Rozdelí vstup metaúdajov na pásy.",
        "Documentation.LongDescription": "Rozdelí vstup metaúdajov na pásy.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Vráti typ danej hodnoty.",
        "Documentation.LongDescription": "Vráti typ danej hodnoty.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.LongDescription": "Táto funkcia je určená iba na interné použitie.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Vráti HTML adresu pre zadanú URL adresu zobrazenú webovým prehliadačom.",
        "Documentation.LongDescription": "Vráti HTML kód pre zadanú stránku <code>url</code> tak, ako ju zobrazuje webový prehliadač. Na zadanie ďalších vlastností je možné zadať voliteľný parameter <code>options</code> záznamu. Záznam môže obsahovať nasledujúce polia:\r\n     <ul>\r\n        <li><code>ApiKeyName</code> Ak má cieľová lokalita do istej miery používa kľúč rozhrania API, tento parameter možno použiť na určenie názvu (nie hodnoty) parametra kľúča, ktorý sa musí použiť v tejto URL adrese. Skutočná hodnota kľúča je uvedená v poverení.</li>\r\n        <li><code>WaitFor</code>: Určuje podmienku, na ktorú sa má okrem čakania na načítanie stránky (čo sa vždy vykonáva) čakať pred stiahnutím HTML kódu. Môže ísť o záznam obsahujúci polia Timeout a/alebo Selector. Ak je zadaný len časový limit, funkcia počká pred stiahnutím HTML kódu danú zadanú dobu. Ak je zadaná možnosť Selector aj Timeout a časový limit uplynie skôr, než sa na stránke vyskytne selektor, dôjde k chybe. Ak je zadaný selektor bez časového limitu, použije sa predvolený časový limit 30 sekúnd.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Pristupuje sa k údajom",
        "Documentation.Examples": [
          {
            "Description": "Vráti HTML kód pre stránku https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vráti HTML kód pre stránku https://microsoft.com po čakaní na pridanie selektora CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vráti HTML kód pre https://microsoft.com po uplynutí intervalu desiatich sekúnd.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Vráti HTML kód pre stránku https://microsoft.com po čakaní až 10 sekúnd na pridanie selektora CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Vráti obsah stiahnutý z adresy URL ako binárny údaj.",
        "Documentation.LongDescription": "Vráti obsah stiahnutý z <code>url</code> ako binárny. Na zadanie ďalších vlastností sa môže zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>Query</code> : Umožňuje pomocou programovania pridať parametre dotazu k adrese URL bez ob&#225;v z &#250;niku &#250;dajov.</li>\r\n<li><code>ApiKeyName</code> : Ak m&#225; cieľov&#225; lokalita koncept kľ&#250;ča rozhrania API, tento parameter sa d&#225; použiť na zadanie n&#225;zvu (nie hodnoty) kľ&#250;ča parametra, ktor&#253; sa mus&#237; použiť v URL adrese. Skutočn&#225; hodnota kľ&#250;ča je zadan&#225; v poveren&#237;.</li>\r\n<li><code>Headers</code> : Ak sa t&#225;to hodnota zad&#225; ako z&#225;znam, do požiadavky HTTP sa pridaj&#250; ďalšie hlavičky.</li>\r\n<li><code>Timeout</code> : Ak sa t&#225;to hodnota zad&#225; ako trvanie, zmen&#237; sa časov&#253; limit požiadavky HTTP. Predvolen&#225; hodnota je 100 sek&#250;nd.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, vyl&#250;čia sa tieto kľ&#250;če hlavičiek HTTP a nebud&#250; s&#250;časťou v&#253;počtu s&#250;visiaceho s ukladan&#237;m &#250;dajov do vyrovn&#225;vacej pam&#228;te.</li>\r\n<li><code>IsRetry</code> : Ak bude zadan&#225; logick&#225; hodnota true, bud&#250; sa pri nač&#237;tavan&#237; &#250;dajov ignorovať ak&#233;koľvek existuj&#250;ce odpovede vo vyrovn&#225;vacej pam&#228;ti.</li>\r\n<li><code>ManualStatusHandling</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, zabr&#225;ni to ak&#233;mukoľvek vstavan&#233;mu spracov&#225;vaniu požiadaviek HTTP, ktor&#253;ch odpoveď m&#225; niektor&#253; z t&#253;chto k&#243;dov stavu.</li>\r\n<li><code>RelativePath</code> : Ak sa t&#225;to hodnota zad&#225; ako text, pripoj&#237; text k z&#225;kladu URL adresy pred vykonan&#237;m požiadavky.</li>\r\n<li><code>Content</code> : Ak sa zad&#225; t&#225;to hodnota, zmen&#237; sa webov&#225; požiadavka z met&#243;dy GET na POST, pričom sa použije hodnota možnosti ako obsah met&#243;dy POST.</li>\r\n</ul>\r\n\r\n    Požiadavka HTTP sa vykoná ako GET (ak nie je zadaný žiadny obsah) alebo POST (ak existuje obsah). Žiadosti POST je možné vykonať iba anonymne.\r\n    <br>\r\n    Hlavičky odpovede HTTP sú k dispozícii ako metaúdaje v binárnom výsledku. Mimo kontextu vlastného údajového konektora je k dispozícii iba podmnožina hlavičiek odpovedí (z bezpečnostných dôvodov).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Načítajte obsah <code>\"https://bing.com/search?q=Power+Query\"</code> pomocou možností RelativePath a Query. Tieto možnosti je možné použiť na dynamické dotazovanie statickej základnej URL adresy.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Vykonajte na URL adresu požiadavku POST, pričom sa odovzdá binárna údajová časť formátu JSON a odpoveď sa analyzuje ako JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Pripojte sa k zabezpečenej URL adrese, ktorá prijíma overovací kľúč ako súčasť reťazca dotazu. Namiesto pevného kódovania tajného kľúča v M (ktoré môže predstavovať bezpečnostné riziko) \r\n    kľúč možno poskytnúť bezpečne zadaním jeho názvu (nie jeho hodnoty) v M, výberom overenia webového rozhrania API a zadaním hodnoty kľúča ako súčasti poverenia webového rozhrania API.\r\n    Pri použití týmto spôsobom nasledujúci príklad vygeneruje požiadavku na <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Vráti hlavičky HTTP stiahnuté z adresy URL ako hodnotu záznamu.",
        "Documentation.LongDescription": "Vráti hlavičky stiahnuté z <code>url</code> ako záznam. Na zadanie ďalších vlastností sa môže zadať voliteľný parameter záznamu <code>options</code>. Záznam môže obsahovať nasledujúce polia:\r\n    <ul>\r\n<li><code>Query</code> : Umožňuje pomocou programovania pridať parametre dotazu k adrese URL bez ob&#225;v z &#250;niku &#250;dajov.</li>\r\n<li><code>ApiKeyName</code> : Ak m&#225; cieľov&#225; lokalita koncept kľ&#250;ča rozhrania API, tento parameter sa d&#225; použiť na zadanie n&#225;zvu (nie hodnoty) kľ&#250;ča parametra, ktor&#253; sa mus&#237; použiť v URL adrese. Skutočn&#225; hodnota kľ&#250;ča je zadan&#225; v poveren&#237;.</li>\r\n<li><code>Headers</code> : Ak sa t&#225;to hodnota zad&#225; ako z&#225;znam, do požiadavky HTTP sa pridaj&#250; ďalšie hlavičky.</li>\r\n<li><code>Timeout</code> : Ak sa t&#225;to hodnota zad&#225; ako trvanie, zmen&#237; sa časov&#253; limit požiadavky HTTP. Predvolen&#225; hodnota je 100 sek&#250;nd.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, vyl&#250;čia sa tieto kľ&#250;če hlavičiek HTTP a nebud&#250; s&#250;časťou v&#253;počtu s&#250;visiaceho s ukladan&#237;m &#250;dajov do vyrovn&#225;vacej pam&#228;te.</li>\r\n<li><code>IsRetry</code> : Ak bude zadan&#225; logick&#225; hodnota true, bud&#250; sa pri nač&#237;tavan&#237; &#250;dajov ignorovať ak&#233;koľvek existuj&#250;ce odpovede vo vyrovn&#225;vacej pam&#228;ti.</li>\r\n<li><code>ManualStatusHandling</code> : Ak sa t&#225;to hodnota zad&#225; ako zoznam, zabr&#225;ni to ak&#233;mukoľvek vstavan&#233;mu spracov&#225;vaniu požiadaviek HTTP, ktor&#253;ch odpoveď m&#225; niektor&#253; z t&#253;chto k&#243;dov stavu.</li>\r\n<li><code>RelativePath</code> : Ak sa t&#225;to hodnota zad&#225; ako text, pripoj&#237; text k z&#225;kladu URL adresy pred vykonan&#237;m požiadavky.</li>\r\n</ul>\r\n\r\n    Požiadavka HTTP sa vykoná pomocou metódy HEAD. Mimo kontextu vlastného údajového konektora je k dispozícii iba podmnožina hlavičiek odpovedí (z bezpečnostných dôvodov).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Načítajte hlavičky HTTP pre <code>\"https://bing.com/search?q=Power+Query\"</code> pomocou možností RelativePath a Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Kontext autorizácie, voči ktorému sa vyhodnotila podmienka položky riadenia prístupu (ACE).",
        "Documentation.LongDescription": "Kontext autorizácie, voči ktorému sa vyhodnotila podmienka položky riadenia prístupu (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabuľka položiek riadenia prístupu (ACE).",
        "Documentation.LongDescription": "Zoradená tabuľka položiek riadenia prístupu (ACE) predstavujúcich pravidlá oprávňovania. Každý riadok je v danom poradí vyhodnocovaný v aktuálnom kontexte oprávnenia a prvý riadok, pre ktorý výraz <code>Condition</code> vráti hodnotu true, určí, ktoré pravidlo sa použije. Stĺpec <code>Action</code> predstavuje druh akcie, na ktorú sa dané pravidlo použije. Stĺpec <code>AccessControlKind</code> určuje, či má byť pre túto akciu prístup povolený alebo zamietnutý.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Určuje typ riadenia prístupu.",
        "Documentation.LongDescription": "Určuje typ riadenia prístupu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky binárne hodnoty.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky binárne hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Určuje typ binárneho kódovania.",
        "Documentation.LongDescription": "Určuje typ binárneho kódovania.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Určuje, koľko zobrazení položky sa očakáva v skupine.",
        "Documentation.LongDescription": "Určuje, koľko zobrazení položky sa očakáva v skupine.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Popisuje typ medzipamäte, ktorá sa má vykonať.",
        "Documentation.LongDescription": "Popisuje typ medzipamäte, ktorá sa má vykonať.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky bajty.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky bajty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Určuje poradie bajtov.",
        "Documentation.LongDescription": "Určuje poradie bajtov.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky znaky.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky znaky.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Určuje typ kompresie.",
        "Documentation.LongDescription": "Určuje typ kompresie.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Určuje dôležitosť úvodzoviek v CSV dokumentoch.",
        "Documentation.LongDescription": "Určuje dôležitosť úvodzoviek v CSV dokumentoch.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Typ, ktorý predstavuje hodnotu meny.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje hodnotu meny.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty dátumu.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty dátumu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty dátumu a času bez priradeného časového pásma.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty dátumu a času bez priradeného časového pásma.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty dátumu a času súvisiace s časovým pásmom.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty dátumu a času súvisiace s časovým pásmom.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Určuje deň týždňa.",
        "Documentation.LongDescription": "Určuje deň týždňa.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Typ, ktorý predstavuje číslo s pevnou desatinnou čiarkou.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje číslo s pevnou desatinnou čiarkou.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Typ, ktorý predstavuje číslo s pohyblivou desatinnou čiarkou s dvojitou presnosťou.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje číslo s pohyblivou desatinnou čiarkou s dvojitou presnosťou.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty trvania",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty trvania",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Určuje očakávanú akciu pre ďalšie hodnoty v riadku, ktorý obsahuje vyšší než očakávaný počet stĺpcov.",
        "Documentation.LongDescription": "Určuje očakávanú akciu pre ďalšie hodnoty v riadku, ktorý obsahuje vyšší než očakávaný počet stĺpcov.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky funkcie.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky funkcie.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Určuje typ zoskupenia.",
        "Documentation.LongDescription": "S rovnakou hodnotou kľúča sa môže vytvoriť viacero lokálnych skupín, ale pre danú hodnotu kľúča sa vytvorí len jedna globálna skupina.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Typ, ktorý predstavuje hodnotu GUID.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje hodnotu GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Identita predstavuje používateľa, skupinu, zariadenie alebo inú identifikovateľnú položku.",
        "Documentation.LongDescription": "Identita predstavuje používateľa, skupinu, zariadenie alebo inú identifikovateľnú položku.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definuje rozsah, v ktorom sa identity vytvárajú a porovnávajú.",
        "Documentation.LongDescription": "Definuje rozsah, v ktorom sa identity vytvárajú a porovnávajú.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Typ, ktorý predstavuje 16-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje 16-bitové celé číslo so znamienkom.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Typ, ktorý predstavuje 32-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje 32-bitové celé číslo so znamienkom.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Typ, ktorý predstavuje 64-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje 64-bitové celé číslo so znamienkom.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Typ, ktorý predstavuje 8-bitové celé číslo so znamienkom.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje 8-bitové celé číslo so znamienkom.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Určuje algoritmus spájania, ktorý sa má použiť pri operácii spájania.",
        "Documentation.LongDescription": "Určuje algoritmus spájania, ktorý sa má použiť pri operácii spájania.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Určuje typ operácie spojenia.",
        "Documentation.LongDescription": "Určuje typ operácie spojenia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Určuje ľavú alebo pravú tabuľku spojenia.",
        "Documentation.LongDescription": "Určuje ľavú alebo pravú tabuľku spojenia.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Popisuje typ obmedzujúcej klauzuly podporovanej dialektom SQL používaným týmto zdrojom údajov.",
        "Documentation.LongDescription": "Popisuje typ obmedzujúcej klauzuly podporovanej dialektom SQL používaným týmto zdrojom údajov.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky zoznamy.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky zoznamy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky logické hodnoty.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky logické hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Určuje očakávanú akciu pre chýbajúce hodnoty v riadku, ktorý obsahuje nižší než očakávaný počet stĺpcov.",
        "Documentation.LongDescription": "Určuje očakávanú akciu pre chýbajúce hodnoty v riadku, ktorý obsahuje nižší než očakávaný počet stĺpcov.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Typ, ktorý predstavuje hodnotu null.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje hodnotu null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky čísla.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky čísla.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Určuje typy hodnôt, ktoré môže služba OData vynechať.",
        "Documentation.LongDescription": "Určuje typy hodnôt, ktoré môže služba OData vynechať.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Určuje výskyt prvku v poradí.",
        "Documentation.LongDescription": "Určuje výskyt prvku v poradí.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Určuje smer zoradenia.",
        "Documentation.LongDescription": "Určuje smer zoradenia.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Typ, ktorý predstavuje textové heslo.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje textové heslo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Typ, ktorý predstavuje percentuálnu hodnotu.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje percentuálnu hodnotu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Určuje typ režimu percentilu.",
        "Documentation.LongDescription": "Určuje typ režimu percentilu.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Určuje presnosť porovnania.",
        "Documentation.LongDescription": "Určuje presnosť porovnania.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Určuje štýl úvodzoviek.",
        "Documentation.LongDescription": "Určuje štýl úvodzoviek.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Určuje typ poradia.",
        "Documentation.LongDescription": "Určuje typ poradia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky záznamy.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky záznamy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Určuje, či sa má indexovanie vykonať od začiatku alebo od konca vstupu.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Určuje smer zaokrúhlenia v prípade, že existuje vzťah medzi možnými číslami, na ktoré sa zaokrúhľuje.",
        "Documentation.LongDescription": "Určuje smer zaokrúhlenia v prípade, že existuje vzťah medzi možnými číslami, na ktoré sa zaokrúhľuje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Platné možnosti pre možnosť režimu spustenia riešenia SAP Business Warehouse.",
        "Documentation.LongDescription": "Platné možnosti pre možnosť režimu spustenia riešenia SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Platné možnosti pre možnosť distribúcie SAP HANA.",
        "Documentation.LongDescription": "Platné možnosti pre možnosť distribúcie SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operátor rozsahu pre vstupné parametre databázy SAP HANA.",
        "Documentation.LongDescription": "Operátor rozsahu pre vstupné parametre databázy SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Typ, ktorý predstavuje číslo s pohyblivou desatinnou čiarkou s jednoduchou presnosťou.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje číslo s pohyblivou desatinnou čiarkou s jednoduchou presnosťou.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokol, ktorý sa má použiť pri pripojení k inštancii služby Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky tabuľky.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky tabuľky.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky textové hodnoty.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky textové hodnoty.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Určuje typ kódovania textu.",
        "Documentation.LongDescription": "Určuje typ kódovania textu.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky hodnoty času.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky hodnoty času.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Zadáva úroveň sledovania.",
        "Documentation.LongDescription": "Zadáva úroveň sledovania.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Typ, ktorý predstavuje všetky typy.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje všetky typy.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Typ, ktorý predstavuje textový identifikátor URI.",
        "Documentation.LongDescription": "Typ, ktorý predstavuje textový identifikátor URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Zadáva metódu HTTP.",
        "Documentation.LongDescription": "Zadáva metódu HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
