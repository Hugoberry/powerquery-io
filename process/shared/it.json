{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Restituisce una rappresentazione strutturale di un database di Access.",
        "Documentation.LongDescription": "Restituisce una rappresentazione strutturale di un database di Access, <code>database</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Restituisce i database di Analysis Services in un host specifico.",
        "Documentation.LongDescription": "Restituisce i database in un'istanza di Analysis Services, <code>server</code>. È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Valore logico che indica se i tipi specificati nel modello multidimensionale o tabulare verranno usati per i tipi delle colonne di misura aggiunte. Se impostato su false, verr&#224; usato il tipo &quot;number&quot; per tutte le colonne di misura. Il valore predefinito per questa opzione &#232; false.</li>\r\n<li><code>Culture</code> : Nome delle impostazioni cultura che specifica le impostazioni per i dati. Corrisponde alla propriet&#224; della stringa di connessione relativa all&#39;identificatore delle impostazioni locali (LCID).</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito dipende dal driver.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>SubQueries</code> : Numero (0, 1 o 2) che imposta il valore della propriet&#224; &quot;SubQueries&quot; nella stringa di connessione. Controlla il comportamento dei membri calcolati nelle sub-SELECT e nei sottocubi. Il valore predefinito &#232; 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Cubi AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Importa/Recupera tramite DirectQuery i dati del cubo da un'istanza di AtScale.",
        "Documentation.LongDescription": "\r\nRestituisce i dati del cubo da AtScale nel server <code>server</code>. È possibile specificare il parametro di record facoltativo <code>options</code> per controllare le opzioni seguenti:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: valore logico che indica se per i tipi delle colonne di misura aggiunte verranno usati i tipi specificati nel modello multidimensionale o tabulare. Se è impostato su false, verrà usato il tipo \"number\" per tutte le colonne di misura. Il valore predefinito per questa opzione è false.</li>\r\n        <li><code>CommandTimeout</code>: durata in secondi che controlla il tempo consentito per l'esecuzione della query lato server prima che venga annullata. Il valore predefinito dipende dal driver. </li>\r\n        <li><code>ConnectionTimeout</code>: durata in secondi che controlla il tempo di attesa prima che un tentativo di connessione al server venga interrotto. Il valore predefinito dipende dal driver. </li>\r\n\r\n</ul>\r\nIl parametro di record viene specificato nel formato [opzione1 = valore1, opzione2 = valore2...].",
        "Documentation.Examples": {
          "Description": "Elenca i dati del cubo presenti in un cubo AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importa i dati da Esplora dati di Azure (Kusto)",
        "Documentation.DisplayName": "Esplora dati di Azure (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Esplora dati di Azure (Kusto)",
        "Documentation.LongDescription": "Importa i dati dall'istanza di Esplora dati di Azure (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella di informazioni Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabella contenente Storm Events del database \"Samples\" nel cluster \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL del Servizio analisi di Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Restituisce il contenuto scaricato dall'URL del Servizio analisi di Azure DevOps come valore binario. Questa funzione usa credenziali diverse a seconda delle organizzazioni."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Feed di Azure DevOps Services",
        "Documentation.DisplayName": "Feed di Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Restituisce una tabella di feed OData offerti da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Specificare l'URL dell'endpoint API REST Azure Enterprise associato alla registrazione",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Restituisce un elenco di report e mesi disponibili dall'API Azure Enterprise",
        "Documentation.Name": "Importa i dati da Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Utilizzo della funzione AzureEnterprise.Tables e spostamento su un valore specifico per ottenere i risultati.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabella"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Per gli esempi di query starter, vedere https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella con i risultati della query delle \"risorse\" query utente",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Elenca le tabelle in un'istanza di Azure Spark.",
        "Documentation.LongDescription": "Elenca le tabelle in un'istanza di Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in un'istanza di Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Restituisce una tabella di navigazione con i contenitori disponibili nell'account specificato da un insieme di credenziali di archiviazione di Azure.",
        "Documentation.LongDescription": "Restituisce una tabella di spostamento con una riga per ogni contenitore trovato all'URL <code>account</code> dell'account da un insieme di credenziali di archiviazione di Azure. Ogni riga contiene un collegamento ai BLOB dei contenitori. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numero di byte da leggere prima dell&#39;attesa del consumer di dati. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>RequestSize</code> : Numero di byte che &#232; necessario tentare di leggere in una singola richiesta HTTP al server. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : L&#39;opzione ConcurrentRequests per le richieste simultanee supporta il download pi&#249; veloce dei dati specificando il numero di richieste da effettuare in parallelo, ma implica un utilizzo di memoria pi&#249; elevato. La memoria necessaria &#232; pari a (ConcurrentRequest * RequestSize). Il valore predefinito &#232; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Restituisce una tabella di spostamento che contiene i documenti trovati nel contenitore specificato e nelle relative sottocartelle di Azure Data Lake Storage.",
        "Documentation.LongDescription": "Restituisce una tabella di spostamento con i documenti trovati nel contenitore specificato e nelle relative sottocartelle all'URL <code>endpoint</code> dell'account da un file system di Azure Data Lake Storage. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numero di byte da leggere prima dell&#39;attesa del consumer di dati. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>RequestSize</code> : Numero di byte che &#232; necessario tentare di leggere in una singola richiesta HTTP al server. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : L&#39;opzione ConcurrentRequests per le richieste simultanee supporta il download pi&#249; veloce dei dati specificando il numero di richieste da effettuare in parallelo, ma implica un utilizzo di memoria pi&#249; elevato. La memoria necessaria &#232; pari a (ConcurrentRequest * RequestSize). Il valore predefinito &#232; 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Valore logico (true/false) che controlla se i file vengono restituiti in una visualizzazione ad albero o in un elenco semplice. Il valore predefinito &#232; false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Restituisce una tabella di navigazione con le tabelle disponibili nell'account specificato da un insieme di credenziali di archiviazione di Windows Azure.",
        "Documentation.LongDescription": "Restituisce una tabella di spostamento contenente una riga per ogni tabella trovata nell'URL dell'account, <code>account</code>, da un insieme di credenziali di archiviazione di Azure. Ogni riga contiene un collegamento alla tabella di Azure. È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>Timeout</code> : Valore di durata che controlla il tempo di attesa per la richiesta al server prima che venga abbandonata. Il valore predefinito &#232; specifico dell&#39;origine.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight sul servizio Azure Kubernetes Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Dati e analisi Bloomberg  v1.1.3",
        "Documentation.Description": "Utilizzato per il recupero di dati Bloomberg"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Questa funzione non è disponibile perché richiede .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (legacy)",
        "Documentation.Caption": "Common Data Service (legacy)",
        "Documentation.LongDescription": "Consente di connettersi all'istanza di Common Data Service (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Restituisce il contenuto del documento CSV come tabella.",
        "Documentation.LongDescription": "Restituisce il contenuto del documento CSV come tabella.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> può essere Null, il numero di colonne, un elenco di nomi di colonna, un tipo di tabella o un record di opzioni.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> può essere un singolo carattere, un elenco di caratteri o il valore <code>\"\"</code>, che indica che le righe devono essere suddivise per spazi vuoti consecutivi. Impostazione predefinita: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Fare riferimento a <code>ExtraValues.Type</code> per i valori supportati di <code>extraValues</code>.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> specifica il tipo di codifica del testo.\r\n      </li>\r\n    </ul>\r\n\r\n    Se viene specificato un record per <code>columns</code> (e <code>delimiter</code>, <code>extraValues</code>, e <code>encoding</code> sono Null), è possibile specificare i campi record seguenti:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: delimitatore di colonna. Impostazione predefinita: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: può essere Null, il numero di colonne, un elenco di nomi di colonna o un tipo di tabella. Se il numero di colonne è inferiore al numero trovato nell'input, le colonne aggiuntive verranno ignorate. Se il numero di colonne è maggiore del numero trovato nell'input, le colonne aggiuntive saranno Null. Se non specificato, il numero di colonne verrà determinato da ciò che viene trovato nell'input.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: codifica del testo del file. Valore predefinito: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: specifica la modalità di gestione delle virgolette.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (default): In un campo le virgolette sono significative solo se immediatamente successive al delimitatore.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: in un campo le virgolette sono sempre significative, indipendentemente dalla posizione.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: specifica la modalità di gestione delle interruzioni di riga tra virgolette.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (impostazione predefinita): le interruzioni di riga tra virgolette vengono considerate come parte dei dati, non come fine della riga corrente.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: tutte le interruzioni di riga vengono considerate come fine della riga corrente, anche quando si verificano all'interno di un valore racchiuso tra virgolette.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Elabora il testo CSV con le intestazioni di colonna",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Restituisce una tabella contenente il set di dimensioni disponibili.",
        "Documentation.LongDescription": "Restituisce una tabella contenente il set di dimensioni disponibili all'interno di <code>cube</code>. Ogni dimensione è una tabella contenente un set di attributi di dimensione e ogni attributo di dimensione è rappresentato come colonna della tabella delle dimensioni. Le dimensioni possono essere espanse nel cubo utilizzando Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Restituisce un albero di tabelle annidate che rappresenta la gerarchia delle cartelle visualizzate degli oggetti, ad esempio dimensioni e misure.",
        "Documentation.LongDescription": "Restituisce un albero di tabelle annidate che rappresenta la gerarchia delle cartelle visualizzate degli oggetti, ad esempio dimensioni e misure, disponibili per l'uso in<code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Restituisce una tabella che contiene il set di proprietà disponibili per le misure espanse nel cubo.",
        "Documentation.LongDescription": "Restituisce una tabella che contiene il set di proprietà disponibili per le misure espanse nel cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Restituisce una tabella contenente il set di misure disponibili.",
        "Documentation.LongDescription": "Restituisce una tabella contenente il set di misure disponibili all'interno di <code>cube</code>.\r\n    Ogni misura è rappresentata come funzione. Per applicare le misure al cubo, è possibile usare Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Restituisce una tabella contenente il set di parametri che può essere applicato al cubo.",
        "Documentation.LongDescription": "Restituisce una tabella contenente un set di parametri che può essere applicato a <code>cube</code>. Ogni parametro è una funzione che può essere richiamata per ottenere <code>cube</code> con il parametro e i relativi argomenti applicati.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Restituisce una tabella che contiene il set di proprietà disponibili per le dimensioni espanse nel cubo.",
        "Documentation.LongDescription": "Restituisce una tabella che contiene il set di proprietà disponibili per le dimensioni espanse nel cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Immettere l'URL dell'account Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni cartella e file trovati alla posizione di <code>url</code> da Azure Data Lake Storage Gen1. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Immettere l'URL dell'account Azure Data Lake Storage.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni file trovato alla posizione di <code>url</code> da Azure Data Lake Storage Gen1. Ogni riga contiene le proprietà del file e un collegamento al relativo contenuto."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (API SQL)",
        "Documentation.Description": "Specificare l'URL di un account Azure Cosmos DB.",
        "Documentation.LongDescription": "Restituisce una tabella di database Azure Cosmos DB in <code>url</code>. Se è stato specificato un <code>database</code> verrà restituita una tabella di raccolte. Se è stato specificato il campo <code>Query</code> nel record <code>options</code>, verranno restituiti i risultati della query eseguita sul database e/o sulla raccolta."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL dell'endpoint di servizio OData di Dynamics 365 Business Central (locale).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (locale)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (locale)",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics 365 Business Central (locale). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL dell'endpoint di servizio OData di Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Restituisce i cubi in un'istanza di Essbase raggruppati per server Essbase.",
        "Documentation.LongDescription": "Restituisce una tabella di cubi raggruppati per server Essbase da un'istanza di Essbase nel server della piattaforma di strumenti analitici <code>url</code>. È possibile specificare un parametro di record facoltativo <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Restituisce il contenuto della cartella di lavoro di Excel.",
        "Documentation.LongDescription": "Restituisce il contenuto della cartella di lavoro di Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> può essere Null, un valore logico (true/false) che indica se la prima riga di ogni tabella restituita deve essere considerata come intestazione o come record di opzioni. Valore predefinito: false.</li>\r\n     <li> <code>delayTypes</code> può essere Null o un valore logico (true/false) che indica se le colonne di ogni tabella restituita devono essere lasciate non tipizzate. Valore predefinito: false.</li>\r\n    </ul>\r\n\r\n    Se è specificato un record per <code>useHeaders</code> (e <code>delayTypes</code> è Null), è possibile specificare i campi dei record seguenti:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: può essere Null o un valore logico (true/false) che indica se la prima riga di ogni tabella restituita deve essere considerata come intestazione. Valore predefinito: false.</li>\r\n     <li> <code>DelayTypes</code>: può essere Null o un valore logico (true/false) che indica se le colonne di ogni tabella restituita devono essere lasciate non tipizzate. Valore predefinito: false.</li>\r\n     <li> <code>InferSheetDimensions</code>: può essere Null o un valore logico (true/false) che indica se l'area di un foglio di lavoro che contiene dati deve essere dedotta tramite la lettura del foglio di lavoro stesso, anziché tramite la lettura dei metadati delle dimensioni dal file. Questa opzione può essere utile nei casi in cui i metadati delle dimensioni non sono corretti. Si noti che questa opzione è supportata solo per i file di Excel Open XML, non per i file di Excel legacy. Valore predefinito: false.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Restituisce il contenuto di Sheet1 da una cartella di lavoro di Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Restituisce una tabella con le proprietà e i contenuti dei file e delle cartelle disponibili nella cartella specificata.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni cartella e file trovato nel <code>path</code> della cartella. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto. Il parametro <code>options</code> è attualmente destinato solo all'uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Restituisce una tabella con le proprietà e i contenuti dei file disponibili nella cartella specificata e nelle relative sottocartelle.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni file trovato nel <code>path</code> della cartella e in tutte le relative sottocartelle. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto. Il parametro <code>options</code> è attualmente destinato solo all'uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importare dati da un database Google BigQuery usando Azure AD",
        "Documentation.LongDescription": "\r\n      Restituisce una tabella che elenca i progetti disponibili in Google BigQuery usando Azure AD per <code>ID progetto di fatturazione</code> . È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa di un tentativo di connessione al server prima dell'abbandono. Il valore predefinito è quello del timeout connessione ODBC.</li>\r\n        <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione della query sul lato server prima dell'annullamento.</li>\r\n        <li><code>UseStorageApi</code>: specifica se usare l'API di archiviazione di BigQuery per i set di risultati di grandi dimensioni. Il valore predefinito è true per usare l'API di archiviazione. Impostarlo su false per non usare l'API di archiviazione</li>\r\n        <li><code>AudienceUri</code>: URI del gruppo che il driver ODBC può usare per le richieste di scambio di token. Questo campo deve essere un URI completo (ad esempio //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/aad-provider) dove pool_id è un nome univoco a livello globale che identifica il pool del personale</li>\r\n      </ul>\r\n    Il parametro del record è specificato come [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Elencare i progetti disponibili in Google BigQuery usando Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Fogli Google",
        "Documentation.Caption": "Fogli Google",
        "Documentation.Description": "Importa dati da GoogleSheets",
        "Documentation.LongDescription": "Importa dati da GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Restituisce una tabella di navigazione con i contenitori disponibili nell'account specificato da un insieme di credenziali di archiviazione di Azure.",
        "Documentation.LongDescription": "Restituisce una tabella di navigazione con una riga per ogni contenitore trovato all'URL <code>account</code> dell'account da un insieme di credenziali di archiviazione di Azure. Ogni riga contiene un collegamento ai BLOB contenitori.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Restituisce una tabella di navigazione con i contenitori disponibili nell'account specificato da un insieme di credenziali di archiviazione di Azure.",
        "Documentation.LongDescription": "Restituisce una tabella di navigazione con una riga per ogni contenitore trovato all'URL <code>account</code> dell'account da un insieme di credenziali di archiviazione di Azure. Ogni riga contiene un collegamento ai BLOB contenitori.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Restituisce una tabella con le proprietà e i contenuti dei file e delle cartelle disponibili nella cartella specificata da un file system Hadoop.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni cartella e file trovato all'URL <code>url</code> della cartella da un file system Hadoop. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Restituisce una tabella con le proprietà e i contenuti dei file disponibili nella cartella specificata e nelle relative sottocartelle da un file system Hadoop.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni file trovato all'URL <code>url</code> della cartella e relative sottocartelle da un file system Hadoop. Ogni riga contiene le proprietà del file e un collegamento al relativo contenuto.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importa i dati da un cluster Impala",
        "Documentation.LongDescription": "Importa i dati da un cluster Impala <code>server</code>. Se non è stata specificata una porta, verrà usata la porta predefinita 21050.",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in un cluster Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importa i dati da Esplora dati di Azure (Kusto)",
        "Documentation.DisplayName": "Esplora dati di Azure (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Esplora dati di Azure (Kusto)",
        "Documentation.LongDescription": "Importa i dati dall'istanza di Esplora dati di Azure (Kusto)",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella di informazioni Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Tabella contenente Storm Events del database \"Samples\" nel cluster \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella di dati da un endpoint MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Effettua una chiamata all'API MailChimp e restituisce il set di dati risultante come tabella. Esegue il paging automatico di tutti i risultati. È possibile usare un parametro di query entityName facoltativo per gli endpoint API in cui l'endpoint radice e il parametro entityName principale nella risposta JSON non corrispondono.",
        "Documentation.Examples": [
          {
            "Description": "Effettua il pull di una tabella di dati dall'endpoint elenchi dell'API MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Tabella con dati elenco."
          },
          {
            "Description": "Effettua il pull di una tabella di dati dall'endpoint cartelle delle campagne dell'API MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Tabella con i dati delle cartelle delle campagne."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Restituisce i risultati della risposta non elaborata da un endpoint API MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Effettua una chiamata all'API MailChimp e restituisce la risposta non elaborata.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce dati non elaborati dall'endpoint API MailChimp dei report/dettagli dei clic per una campagna specificata.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Dati dei dettagli dei clic non elaborati per la campagna specificata."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Offre funzioni di query avanzate.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Offre funzioni di query avanzate.",
        "Documentation.Examples": [
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi per il periodo dal 01/05/2017 al 15/06/2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati dei riepiloghi per il periodo dal 01/05/2017 al 15/06/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi per il mese di aprile 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/04/2017 al 30/04/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi dal mese di aprile 2017 a oggi",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/04/2017 al 15/06/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi dallo scorso dicembre a febbraio ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/12/2016 al 28/02/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene gli addebiti di Marketplace per gli ultimi 18 mesi",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/12/2015 al 15/06/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene gli addebiti dettagliati per i mesi di giugno 2017 e maggio 2017",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/05/2017 al 15/06/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 03/07/2017, ottiene gli addebiti dettagliati per il mese di luglio 2016",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 1/7/16 al 31/7/16"
          },
          {
            "Description": "Supponendo che oggi sia il 13/07/2017, ottiene i riepiloghi del saldo per gli ultimi dieci mesi più 13 giorni di questo mese",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "La funzione restituisce i dati per il periodo dal 01/09/2016 al 13/07/2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Informazioni dettagliate sul consumo di Microsoft Azure",
        "Documentation.Description": "Informazioni dettagliate sul consumo di Microsoft Azure",
        "Documentation.DisplayName": "Informazioni dettagliate sul consumo di Microsoft Azure",
        "Documentation.LongDescription": "Informazioni dettagliate sul consumo di Microsoft Azure",
        "Documentation.Name": "Informazioni dettagliate sul consumo di Microsoft Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL dall'origine dati ODBC. ",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL dall'origine dati ODBC specificata dalla stringa di connessione <code>connectionString</code>. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito &#232; 15 secondi.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Restituisce le tabelle e le viste SQL dalla stringa di connessione specificata.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL dall'origine dati OLE DB.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL dall'origine dati OLE DB specificata dalla stringa di connessione <code>connectionString</code>. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL dal database Oracle.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL dal database Oracle nel server <code>server</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Restituisce tutte le tabelle trovate in un file PDF.",
        "Documentation.LongDescription": "Restituisce tutte le tabelle trovate in <code>pdf</code>. È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>Implementation</code> : Versione dell&#39;algoritmo da usare per l&#39;identificazione delle tabelle. Le versioni precedenti sono disponibili solo per la compatibilit&#224; con le versioni precedenti, per evitare che le query meno recenti siano interrotte a causa degli aggiornamenti dell&#39;algoritmo. La versione pi&#249; recente garantir&#224; sempre il risultato ottimale. I valori validi sono &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; o Null.</li>\r\n<li><code>StartPage</code> : Consente di specificare la prima pagina nell&#39;intervallo di pagine da esaminare. Impostazione predefinita: 1.</li>\r\n<li><code>EndPage</code> : Consente di specificare l&#39;ultima pagina nell&#39;intervallo di pagine da esaminare. Impostazione predefinita: ultima pagina del documento.</li>\r\n<li><code>MultiPageTables</code> : Controlla se tabelle simili in pagine consecutive verranno combinate automaticamente in un&#39;unica tabella. Impostazione predefinita: true.</li>\r\n<li><code>EnforceBorderLines</code> : Controlla se le linee dei bordi vengono sempre applicate come limiti delle celle (quando &#232; true) o usate semplicemente come uno dei numerosi suggerimenti disponibili per determinare i limiti delle celle (quando &#232; false). Impostazione predefinita: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": [
          {
            "Description": "Restituisce le tabelle contenute in sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL dell'account Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Restituisce una tabella con i dati di Planview Projectplace pertinenti."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þŷŧĥоň ѕçґíþţ",
        "Documentation.Description": "Ехęćμţéѕ Рўŧђόл ѕ¢яîρţ áпδ řèτüŕⁿŝ ďåţǻ ƒґàмëś",
        "Documentation.Examples": {
          "Description": "Ехęćμţéѕ Рўŧђόл ѕ¢яîρţ áпδ řèτüŕⁿŝ ďåţǻ ƒґàмëś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ѓ śςяíрτ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Restituisce una tabella in cui ogni riga contiene il valore e il nome di un campo del record di input.",
        "Documentation.LongDescription": "Restituisce una tabella contenente le colonne <code>Name</code> e <code>Value</code> con una riga per ogni campo in <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Restituire la tabella dal record.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Restituisce i pacchetti in un database SAP HANA.",
        "Documentation.LongDescription": "Restituisce una tabella di pacchetti multidimensionali dal database SAP HANA <code>server</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>Distribution</code> : Oggetto SapHanaDistribution che imposta il valore della propriet&#224; &quot;Distribution&quot; nella stringa di connessione. Il routing delle istruzioni &#232; il metodo usato per la valutazione del nodo server corretto di un sistema distribuito prima dell&#39;esecuzione dell&#39;istruzione. Il valore predefinito &#232; SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Consente di specificare l&#39;implementazione del connettore SAP HANA da usare.</li>\r\n<li><code>EnableColumnBinding</code> : Associa le variabili alle colonne di un set di risultati SAP HANA durante il recupero dei dati. Pu&#242; potenzialmente migliorare le prestazioni a causa di un utilizzo leggermente pi&#249; elevato della memoria. Il valore predefinito &#232; False.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito &#232; 15 secondi.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Restituisce una tabella con il contenuto di un sito di SharePoint.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni cartella e documento trovato nel sito di SharePoint specificato <code>url</code>. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un numero (14 o 15) o il testo &quot;Auto&quot; che specifica la versione API di SharePoint da usare per questo sito. Se questo valore non &#232; specificato, verr&#224; usata la versione 14 dell&#39;API. Quando viene specificato Auto, la versione del server verr&#224; individuata automaticamente, se possibile. In caso contrario, il valore predefinito &#232; la versione 14. I siti di SharePoint non in lingua inglese richiedono almeno la versione 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Restituisce una tabella con i documenti di un sito di SharePoint.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni documento trovato nel sito di SharePoint specificato <code>url</code> e nelle sottocartelle. Ogni riga contiene le proprietà della cartella o del file e un collegamento al relativo contenuto. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un numero (14 o 15) o il testo &quot;Auto&quot; che specifica la versione API di SharePoint da usare per questo sito. Se questo valore non &#232; specificato, verr&#224; usata la versione 14 dell&#39;API. Quando viene specificato Auto, la versione del server verr&#224; individuata automaticamente, se possibile. In caso contrario, il valore predefinito &#232; la versione 14. I siti di SharePoint non in lingua inglese richiedono almeno la versione 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Restituisce una tabella con il contenuto di un elenco SharePoint.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni elemento elenco trovato nell'elenco SharePoint specificato <code>url</code>. Ogni riga contiene le proprietà dell'elenco. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un numero (14 o 15) o il testo &quot;Auto&quot; che specifica la versione API di SharePoint da usare per questo sito. Se questo valore non &#232; specificato, verr&#224; usata la versione 14 dell&#39;API. Quando viene specificato Auto, la versione del server verr&#224; individuata automaticamente, se possibile. In caso contrario, il valore predefinito &#232; la versione 14. I siti di SharePoint non in lingua inglese richiedono almeno la versione 15.</li>\r\n<li><code>Implementation</code> : Facoltativo. Specifica la versione del connettore SharePoint da utilizzare. I valori accettati sono &quot;2.0&quot; o Null. Se il valore &#232; &quot;2.0&quot;, viene utilizzata l&#39;implementazione 2.0 del connettore SharePoint. Se il valore &#232; Null, viene utilizzata l&#39;implementazione originale del connettore SharePoint.</li>\r\n<li><code>ViewMode</code> : Facoltativo. Questa opzione &#232; valida solo per l&#39;implementazione 2.0. I valori accettati sono &quot;All&quot; e &quot;Default&quot;. Se non viene specificato alcun valore, il valore viene impostato su &quot;All&quot;. Quando si specifica &quot;All&quot;, la vista include tutte le colonne create dall&#39;utente e definite dal sistema. Quando si specifica &quot;Predefinito&quot;, la visualizzazione corrisponder&#224; a quella visualizzata dall&#39;utente quando esamina l&#39;elenco online in qualsiasi visualizzazione impostata come Predefinita nelle impostazioni dell&#39;utente. Se l&#39;utente modifica la visualizzazione predefinita per aggiungere o rimuovere colonne create dall&#39;utente o definite dal sistema oppure creando una nuova visualizzazione e impostandola come predefinita, queste modifiche verranno propagate attraverso il connettore.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Impedisce al connettore di usare un endpoint separato per le colonne delle note.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Restituisce una tabella dai contenuti dell'URL specificato con formato basato sull'API SODA 2.0.",
        "Documentation.LongDescription": "Restituisce una tabella dai contenuti dell'URL specificato <code>url</code> con formato basato sull'API SODA 2.0. L'URL deve fare riferimento a un'origine valida conforme a SODA che termini con l'estensione csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "È possibile usare questa funzione per chiamare uno qualsiasi degli endpoint \"Lists\" offerti dall'API SparkPost v1. Quando si effettuano chiamate all'API SparkPost con questa funzione, tenere presente che l'API SparkPost prevede un rigido limite di velocità dell'API. Se il server SparkPost restituisce un codice di stato 429, il limite di velocità è stato raggiunto ed è necessario attendere qualche istante prima di effettuare altre chiamate.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella con una singola colonna popolata con i dati di uno degli endpoint \"Lists\" dell'API SparkPost v1. Per dettagli, vedere la documentazione di SparkPost.",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Recupera le tabelle predefinite esposte dal connettore SparkPost con i dati aggregati in un numero di giorni specificato dall'utente. Quando si aggiornano queste tabelle o si effettuano chiamate all'API SparkPost con questo connettore, tenere presente che l'API SparkPost prevede un rigido limite di velocità dell'API. Se il server SparkPost restituisce un codice di stato 429, il limite di velocità è stato raggiunto ed è necessario attendere qualche istante prima di effettuare altre chiamate. Quando si sceglie un valore per il parametro relativo al numero di giorni, tenere presente che l'API archivia solo i dati degli ultimi sei mesi."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Restituisce una tabella di database in un'istanza di SQL Server.",
        "Documentation.LongDescription": "Restituisce una tabella di database nell'istanza di SQL Server specificata, <code>server</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Numero che imposta il valore della clausola di query &quot;maxdop&quot; nella query SQL generata.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>MultiSubnetFailover</code> : Espressione logica (true/false) che imposta il valore della propriet&#224; &quot;MultiSubnetFailover&quot; nella stringa di connessione (il valore predefinito &#232; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Valore logico (true/false) che, se true, tenta di ridurre le conversioni dei tipi che potrebbero generare errori e determinare l&#39;esito negativo dell&#39;intera query. Non consigliato per l&#39;uso generale.</li>\r\n<li><code>ContextInfo</code> : Valore binario usato per impostare CONTEXT_INFO prima di eseguire ogni comando.</li>\r\n<li><code>OmitSRID</code> : Valore logico (true/false) che, se true, omette l&#39;ID SRID durante la generazione di Well-Known Text da tipi geometrici e geografici.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Valore logico (true/false) che, se true, consente la riduzione della query dei database nello stesso server. Il valore predefinito &#232; false.</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...].\r\n    <br>\r\n    Non supporta l'impostazione di una query SQL da eseguire nel server. Invece di eseguire una query SQL, usare <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Effettua una chiamata all'API Stripe con l'opzione per limitare il numero di chiamate API effettuate.",
        "Documentation.LongDescription": "Effettua una chiamata all'API Stripe all'indirizzo https://api.stripe.com/v1/<code>method</code>, con il record facoltativo <code>query</code> passato come parametri aggiuntivi e l'opzione facoltativa <code>pageLimit</code> come limite per il numero di richieste API. I dati più recenti vengono restituiti per primi. Se l'opzione <code>pageLimit</code> non è specificata, vengono restituiti tutti i dati. Versione di Stripe usata: 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce tutti i dati relativi agli addebiti",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Tabella contenente tutti i dati relativi agli addebiti per l'account Stripe corrente"
          },
          {
            "Description": "Restituisce una pagina di dati relativi agli addebiti",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Tabella contenente i dati più recenti relativi agli addebiti per l'account Stripe corrente"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Memorizza nel buffer una tabella in memoria, isolandola da modifiche esterne durante la valutazione.",
        "Documentation.LongDescription": "Memorizza nel buffer una tabella, isolandola dalle modifiche esterne durante la valutazione.\r\n   Il buffering è un’azione superficiale. Forza la valutazione di qualsiasi valore di cella scalare, ma lascia valori non scalari (record, elenchi, tabelle e così via) così come sono. \r\n    <br>\r\n    <br>\r\n    Si noti che l'utilizzo di questa funzione potrebbe velocizzare o meno l'esecuzione delle query. In alcuni casi, può rendere le query più lente a causa dell'aggiunta \r\n    della lettura di tutti i dati e dell'archiviazione in memoria. Inoltre, il buffering impedisce il downstream folding. Se i dati non hanno bisogno di essere \r\n  memorizzati nel buffer, ma vuoi prevenire il downstream folding, usa <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Caricare in memoria tutte le righe di una tabella SQL, in modo che le operazioni downstream non siano più in grado di eseguire query sul server SQL.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Restituisce una tabella che rappresenta il risultato dell'unione di un elenco di tabelle.",
        "Documentation.LongDescription": "Restituisce una tabella che rappresenta il risultato dell'unione dell'elenco di tabelle <code>tables</code>. Se non si specifica <code>columns</code>, la struttura dei tipi di riga della tabella risultante sarà definita da <code>columns</code> o da un'unione dei tipi di input.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Unire le tre tabelle.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Unisce tre tabelle con strutture diverse.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Unisce due tabelle e il progetto in base al tipo specificato.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Abbassa di livello le intestazioni di colonna nella prima riga di valori.",
        "Documentation.LongDescription": "Abbassa di livello le intestazioni di colonna, ad esempio i nomi di colonna, nella prima riga di valori. I nomi di colonna predefiniti sono \"Column1\", \"Column2\" e così via.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Abbassare di livello la prima riga di valori nella tabella.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Rimuove le righe duplicate dalla tabella.",
        "Documentation.LongDescription": "Rimuove le righe duplicate dalla tabella.\r\n    Un parametro facoltativo, <code>equationCriteria</code>, specifica quali colonne della tabella vengono testate per la duplicazione. Se non si specifica <code>equationCriteria</code>, verranno testate tutte le colonne.<br>\r\n    <br>\r\n    Poiché Power Query talvolta esegue l'offload di determinate operazioni nelle origini dati back-end (note come \"riduzione\") e a volte ottimizza le query in base a \r\n    ignorando le operazioni che non sono necessariamente necessarie, in generale non è garantito quale duplicato specifico verrà mantenuto.\r\n    Ad esempio, non è possibile presumere che la prima riga con un set univoco di valori di colonna rimanga e che le righe più in basso nella tabella vengano rimosse.\r\n    Se si desidera che la rimozione dei duplicati si comporti in modo prevedibile, inserire la tabella nel buffer utilizzando <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere le righe duplicate dalla tabella.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Rimuovere le righe duplicate dalla colonna [b] nella tabella <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Crea una tabella da un elenco di colonne e valori specificati.",
        "Documentation.LongDescription": "Crea una tabella di tipo <code>columns</code> da un elenco <code>lists</code> che contiene elenchi annidati con nomi di colonna e valori.\r\n    Se alcune colonne contengono più valori di altre, i valori mancanti verranno riempiti con il valore predefinito 'null', se le colonne ammettono i valori Null.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Restituire una tabella da un elenco di nomi di clienti in un elenco. Ogni valore nell'elemento elenco clienti diventa un valore di riga e ogni elenco diventa una colonna.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creare una tabella da un elenco di colonne specificato e un elenco di nomi di colonna.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creare una tabella con un numero diverso di colonne per riga. Il valore di riga mancante è Null.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Converte un elenco in una tabella applicando la funzione di divisione specificata a ogni elemento dell'elenco.",
        "Documentation.LongDescription": "Converte l'elenco <code>list</code> in una tabella applicando la funzione di divisione facoltativa <code>splitter</code> a ogni elemento dell'elenco. Per impostazione predefinita, si presuppone che l'elenco sia un elenco di valori di testo suddiviso da virgole. <code>columns</code> facoltativo può essere il numero di colonne, un elenco di colonne o TableType. Facoltativamente, è possibile specificare anche <code>default</code> e <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creare una tabella da un elenco usando la barra di divisione predefinita.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Crea una tabella da un elenco usando una barra di divisione personalizzata.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Creare una tabella dall'elenco usando la barra di divisione Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Converte un elenco di record in una tabella.",
        "Documentation.LongDescription": "Converte l'elenco di record <code>records</code> in una tabella.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creare una tabella dai record, usando i numeri di campo dei record come nomi di colonna.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Creare una tabella dai record con colonne tipizzate e selezionare le colonne numeriche.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Crea una tabella da un elenco di valori di riga e colonne facoltative",
        "Documentation.LongDescription": "Crea una tabella dall'elenco <code>rows</code> in cui ogni elemento dell'elenco è un elenco interno contenente i valori di colonna per una singola riga. È possibile fornire un elenco facoltativo di nomi di colonna, un tipo di tabella o un numero di colonne come secondo argomento per <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Restituire una tabella con la colonna [CustomerID] con i valori {1, 2}, la colonna [Name] con i valori {\"Bob\", \"Jim\"} e la colonna [Phone] con i valori {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Restituire una tabella con la colonna [CustomerID] con i valori {1, 2}, la colonna [Name] con i valori {\"Bob\", \"Jim\"} e la colonna [Phone] con i valori {\"123-4567\", \"987-6543\"}, dove [CustomerID] è di tipo numerico e [Name] e [Phone] sono di tipo testo.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Crea una tabella con una colonna dai valori specificati.",
        "Documentation.LongDescription": "Crea una tabella con una colonna contenente il valore o l'elenco di valori specificato, <code>value</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: nome di colonna usato durante la creazione di una tabella da un elenco o da un valore scalare.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creare una tabella dal valore 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Creare una tabella dall'elenco.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Creare una tabella dal valore 1 con un nome di colonna personalizzato.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Restituisce le informazioni su come una tabella viene partizionata.",
        "Documentation.LongDescription": "Restituisce le informazioni su come una tabella viene partizionata.  Viene restituita una tabella in cui ogni colonna è una colonna di partizione della tabella originale e ogni riga corrisponde a una partizione nella tabella originale.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Restituisce un profilo delle colonne di una tabella.",
        "Documentation.LongDescription": "<p>Restituisce un profilo per le colonne in <code>table</code>.</p>\r\n<p>Per ogni colonna vengono restituite le informazioni seguenti (se applicabile):\r\n<ul>\r\n  <li>minimo</li>\r\n  <li>massimo</li>\r\n  <li>media</li>\r\n  <li>deviazione standard</li>\r\n  <li>conteggio</li>\r\n  <li>conteggio valori Null</li>\r\n  <li>conteggio valori univoci</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Alza di livello la prima riga di valori come nuove intestazioni di colonna (nomi di colonna).",
        "Documentation.LongDescription": "Alza di livello la prima riga di valori come nuove intestazioni di colonna (nomi di colonna). Per impostazione predefinita, solo i valori di testo o numerici vengono alzati di livello a intestazioni. Opzioni valide:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: se è impostata su <code>true</code>, tutti i valori scalari nella prima riga vengono alzati di livello a intestazioni in base alle impostazioni cultura definite in <code>Culture</code>, se specificate, o alle impostazioni locali correnti del documento.\r\n    Per i valori che non possono essere convertiti in testo, verrà usato un nome di colonna predefinito.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: nome che specifica le impostazioni cultura per i dati.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Alzare di livello la prima riga di valori nella tabella.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Consente di alzare di livello tutti i valori scalari nella prima riga a intestazioni.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Restituisce una tabella con le prime righe del conteggio ignorate.",
        "Documentation.LongDescription": "Restituisce una tabella non contiene il primo numero specificato di righe <code>countOrCondition</code> della tabella <code>table</code>.\r\n    Il numero di righe rimosse dipende dal parametro facoltativo <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> viene omesso, verrà rimossa solo la prima riga. </li>\r\n    <li> Se <code>countOrCondition</code> è un numero, verrà rimosso lo stesso numero di righe, a partire dall'alto. </li>\r\n    <li> Se <code>countOrCondition</code> è una condizione, verranno rimosse le righe che soddisfano la condizione finché non viene trovata una riga che non soddisfa la condizione.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere la prima riga della tabella.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Rimuovere le prime due righe della tabella.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Rimuovere le prime righe in cui [CustomerID] <=2 della tabella.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Restituisce una tabella con le ultime N righe rimosse.",
        "Documentation.LongDescription": "Restituisce una tabella che non contiene le ultime <code>countOrCondition</code> righe della tabella <code>table</code>.\r\n        Il numero di righe rimosse dipende dal parametro facoltativo <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> viene omesso, verrà rimossa solo l'ultima riga. </li>\r\n    <li> Se <code>countOrCondition</code> è un numero, verrà rimosso lo stesso numero di righe, a partire dal basso. </li>\r\n    <li> Se <code>countOrCondition</code> è una condizione, verranno rimosse le righe che soddisfano la condizione finché non viene trovata una riga che non soddisfa la condizione.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere l'ultima riga della tabella.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Rimuovere le ultime righe in cui [CustomerID] > 2 della tabella.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Restituisce una tabella con le righe rimosse dalla tabella di input che contengono un errore in almeno una delle celle. Se viene specificato un elenco di colonne, la ricerca degli errori verrà eseguita solo nelle celle delle colonne specificate.",
        "Documentation.LongDescription": "Restituisce una tabella con le righe rimosse dalla tabella di input che contengono un errore in almeno una delle celle. Se viene specificato un elenco di colonne, la ricerca degli errori verrà eseguita solo nelle celle delle colonne specificate.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere il valore di errore dalla prima riga.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Restituisce una tabella con le righe nell'ordine inverso.",
        "Documentation.LongDescription": "Restituisce una tabella con le righe dall'input <code>table</code> nell'ordine inverso.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Invertire le righe nella tabella.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Restituisce una tabella contenente una descrizione delle colonne, ovvero lo schema, della tabella specificata.",
        "Documentation.LongDescription": "<p>Restituisce una tabella che descrive le colonne di <code>table</code>.</p>\r\n<p>Ogni riga nella tabella descrive le proprietà di una colonna di <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Column Name</b></td>\r\n    <td><b>Description</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>The name of the column.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>La posizione 0-based della colonna in <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Il nome del tipo di colonna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Il genere di tipo di colonna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Se la colonna può contenere valori di tipo <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n   <td><code>NumericPrecisionBase</code></td>\r\n    <td>TLa base numerica (ad esempio, base-2 o base-10) dei campi <code>NumericPrecision</code> e <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>La precisione di una colonna numerica nella base specificata da <code>NumericPrecisionBase</code>. Si tratta del numero massimo di cifre che possono essere rappresentate da un valore di questo tipo (comprese le cifre frazionarie).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>La scala di una colonna numerica nella base specificata da <code>NumericPrecisionBase</code>. Si tratta del numero di cifre nella parte frazionaria di un valore di questo tipo. Un valore di <code>0</code> indica una scala fissa senza cifre frazionarie. Un valore di <code>null</code> indica che la scala non è nota (perché mobile o non definita).</td>\r\n  </tr>\r\n  <tr>\r\n <td><code>DateTimePrecision</code></td>\r\n <td>Numero massimo di cifre frazionarie supportate</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Numero massimo di caratteri consentiti in una colonna di tipo <code>text</code> o il numero massimo di byte consentiti in una colonna di tipo <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indica se la lunghezza della colonna può variare (fino al limite definito in <code>MaxLength</code>) o se le dimensioni sono fisse..</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Nome del tipo della colonna nel sistema dei tipi nativo dell'origine (ad esempio, <code>nvarchar</code> per SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Espressione predefinita per un valore di questa colonna nel linguaggio delle espressioni nativo dell'origine (ad esempio, <code>42</code> o <code>newid()</code> per SQL Server) </td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Descrizione della colonna.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Restituisce una tabella con solo le righe della tabella di input che contengono un errore in almeno una delle celle. Se viene specificato un elenco di colonne, la ricerca degli errori verrà eseguita solo nelle celle delle colonne specificate.",
        "Documentation.LongDescription": "Restituisce una tabella con solo le righe della tabella di input che contengono un errore in almeno una delle celle. Se viene specificato un elenco di colonne, la ricerca degli errori verrà eseguita solo nelle celle delle colonne specificate.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selezionare i nomi dei clienti che contengono errori nelle rispettive righe.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Restituisce una tabella con le prime righe del conteggio ignorate.",
        "Documentation.LongDescription": "Restituisce una tabella non contiene il primo numero specificato di righe <code>countOrCondition</code> della tabella <code>table</code>.\r\n    Il numero di righe ignorate dipende dal parametro facoltativo <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> viene omesso, verrà ignorata solo la prima riga. </li>\r\n    <li> Se <code>countOrCondition</code> è un numero, verrà ignorato lo stesso numero di righe, a partire dall'alto. </li>\r\n    <li> Se <code>countOrCondition</code> è una condizione, verranno ignorate le righe che soddisfano la condizione finché non viene trovata una riga che non soddisfa la condizione.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ignorare la prima riga della tabella.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorare le prime due righe della tabella.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Ignorare le prime righe in cui [Price] > 25 della tabella.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Impedisce che qualsiasi operazione downstream venga eseguita a confronto con la fonte originale dei dati.",
        "Documentation.LongDescription": "Impedisce che qualsiasi operazione downstream venga eseguita a confronto con la fonte originale dei dati in<code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Recupera i dati da una tabella SQL in modo da impedire l'esecuzione di operazioni downstream come query in SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Trasforma le colonne in righe e le righe in colonne.",
        "Documentation.LongDescription": "Trasforma le colonne in righe e le righe in colonne.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trasformare le righe della tabella di coppie nome-valore in colonne.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Ottiene le relazioni tra un set di tabelle.",
        "Documentation.LongDescription": "Ottiene le relazioni tra un set di tabelle. Si presuppone che il set <code>tables</code> abbia una struttura simile a quella di una tabella di esplorazione. La colonna definita da <code>dataColumn</code> contiene le tabelle dati effettive.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL dal database Teradata.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL dal database Teradata nel server <code>server</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Specificare il numero di mesi di dati cronologici di Twilio da recuperare.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Restituisce una tabella con i dati Twilio pertinenti."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Restituisce una tabella contenente una descrizione delle colonne, ovvero lo schema, del tipo di tabella specificato.",
        "Documentation.LongDescription": "<p>Restituisce una tabella che descrive le colonne di <code>tableType</code>.</p>\r\n<p>Per una descrizione della tabella risultante, vedere la documentazione per <code>Table.Schema</code>.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Feed di Azure DevOps Services",
        "Documentation.DisplayName": "Feed di Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Restituisce una tabella di feed OData offerti da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Connessione ai dati di Viva Insights",
        "Documentation.LongDescription": "Importa le metriche settimanali e i dati degli attributi da Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella con attributi visibili e metriche settimanali per ogni dipendente misurato nella partizione.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Restituisce il contenuto del documento HTML suddiviso in strutture costitutive nonché una rappresentazione dell'intero documento e del relativo testo dopo la rimozione dei tag.",
        "Documentation.LongDescription": "Restituisce il contenuto del documento HTML suddiviso in strutture costitutive nonché una rappresentazione dell'intero documento e del relativo testo dopo la rimozione dei tag.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella con le metriche chiave di Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Effettua una chiamata all'endpoint metriche chiave Webtrends e restituisce tutti i dati come una tabella.",
        "Documentation.Examples": [
          {
            "Description": "Esegue il pull di una tabella di metriche chiave per il tenant 98765 negli ultimi 30 giorni",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Tabella con le metriche chiave"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Immettere l'ID profilo associato all'account Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Restituisce una tabella con i dati Webtrends pertinenti."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Connessione ai dati di Viva Insights",
        "Documentation.LongDescription": "Importa le metriche settimanali e i dati degli attributi da Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella con attributi visibili e metriche settimanali per ogni dipendente misurato nella partizione.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Restituisce il contenuto del documento XML come tabella gerarchica.",
        "Documentation.LongDescription": "Restituisce il contenuto del documento XML come tabella gerarchica.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Restituisce il contenuto del documento XML come raccolta annidata di tabelle rese flat.",
        "Documentation.LongDescription": "Restituisce il contenuto del documento XML come raccolta annidata di tabelle rese flat.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupera il contenuto di un file XML locale.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Specificare l'URL dell'account Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Restituisce una tabella con i dati Zendesk pertinenti."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Restituisce la raccolta dello schema per un'origine dati ADO.NET.",
        "Documentation.LongDescription": "Restituisce la raccolta dello schema per l'origine dati ADO.NET con nome provider <code>providerName</code> e stringa di connessione <code>connectionString</code>. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "Importa i dati da un database Amazon Redshift.",
        "Documentation.LongDescription": "Restituisce una tabella che elenca le tabelle nel server <code>cluster Amazon Redshift</code> nel database <code></code>.  È possibile specificare un parametro di record facoltativo, <code>opzioni</code>, per controllare le opzioni seguenti:\r\n<ul>\r\n<li><code>Nome provider</code>: valore di testo da utilizzare come nome provider per la connessione. Viene usato quando si usa Microsoft Authentication.</li>\r\n<li><code>Dimensione batch</code>: il numero di righe recuperate in una singola chiamata al server.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Restituisce una tabella di cubi multidimensionali o di modelli tabulari dal database Analysis Services.",
        "Documentation.LongDescription": "Restituisce una tabella di cubi multidimensionali o modelli tabulari dal database di Analysis Services <code>database</code> nel server <code>server</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>Query</code> : Query MDX nativa usata per recuperare i dati.</li>\r\n<li><code>TypedMeasureColumns</code> : Valore logico che indica se i tipi specificati nel modello multidimensionale o tabulare verranno usati per i tipi delle colonne di misura aggiunte. Se impostato su false, verr&#224; usato il tipo &quot;number&quot; per tutte le colonne di misura. Il valore predefinito per questa opzione &#232; false.</li>\r\n<li><code>Culture</code> : Nome delle impostazioni cultura che specifica le impostazioni per i dati. Corrisponde alla propriet&#224; della stringa di connessione relativa all&#39;identificatore delle impostazioni locali (LCID).</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito dipende dal driver.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>SubQueries</code> : Numero (0, 1 o 2) che imposta il valore della propriet&#224; &quot;SubQueries&quot; nella stringa di connessione. Controlla il comportamento dei membri calcolati nelle sub-SELECT e nei sottocubi. Il valore predefinito &#232; 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Restituisce una tabella che elenca le tabelle nel cluster Spark specificato.",
        "Documentation.LongDescription": "Restituisce una tabella che elenca le tabelle nell'<code>host</code> del cluster Spark usando l'oggetto <code>protocol</code>. I protocolli validi sono:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella che elenca le tabelle nel cluster Spark specificato.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Consente di immettere i nomi di progetto e organizzazione.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (solo Boards)",
        "Documentation.LongDescription": "Restituisce una tabella di visualizzazioni del Servizio analisi offerta da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Importa i dati da HDInsight Interactive Query",
        "Documentation.LongDescription": "\r\nRestituisce un elenco di tabelle di HDInsight Interactive Query specificate dal <code>database</code> nel <code>server</code> HDInsight Interactive Query. Facoltativamente con il server è possibile specificare un numero di porta, separato da due punti. È possibile specificare un parametro facoltativo <code>options</code> per controllare le opzioni seguenti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa prima che un tentativo di connessione al server venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n        <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione prima che la query sul lato server venga annullata. Il valore predefinito dipende dal driver.</li>\r\n</ul>\r\nIl parametro <code>options</code> viene specificato come [opzione1 = valore1, opzione2 = valore2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Restituisce una tabella con colonne mappate agli attributi di un'entità in Common Data Model, inclusi i tipi di dati.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Restituisce una tabella con colonne mappate agli attributi di un'entità in Common Data Model, inclusi i tipi di dati. Verranno aggiunte le colonne della definizione di entità se non sono mappate e le eventuali colonne non mappate verranno rimosse.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Restituisce un cubo dopo avervi applicato un parametro.",
        "Documentation.LongDescription": "Restituisce un cubo dopo aver applicato <code>parameter</code> con <code>arguments</code> a <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Modifica la granularità dimensionale del contesto filtro del cubo comprimendo gli attributi per cui è stato eseguito il mapping alle colonne specificate.",
        "Documentation.LongDescription": "Modifica la granularità dimensionale del contesto filtro dell'elemento <code>cube</code> comprimendo gli attributi per cui è stato eseguito il mapping alle colonne specificate <code>columnNames</code>. Le colonne vengono anche rimosse dalla visualizzazione tabulare del cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Sostituisce il set di dimensioni restituito da Cube.Dimensions.",
        "Documentation.LongDescription": "Sostituisce il set di dimensioni restituito da <code>Cube.Dimensioni</code>.\r\n    Ad esempio, questa funzione può essere utilizzata per aggiungere una colonna ID a un attributo di dimensione, in modo che l'origine dati possa raggrupparsi in base all'ID anziché al valore visualizzato.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Applica un elenco di funzioni del cubo.",
        "Documentation.LongDescription": "Applica le funzioni del cubo dell'elenco <code>transforms</code> in <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL disponibili in un database DB2.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL disponibili in un database DB2 nel server <code>server</code> nell'istanza di database denominata <code>database</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>Implementation</code> : Specifica l&#39;implementazione del provider di database interno da usare. I valori validi sono: &quot;IBM&quot; e &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Numero dell&#39;identificatore del set di caratteri CCSID (ID set di caratteri codificati) per decodificare i dati binari di DB2 FOR BIT in stringhe di caratteri. Si applica a Implementation = &quot;Microsoft&quot;. Impostare su 0 per disabilitare la conversione (valore predefinito). Impostare su 1 per convertire in base alla codifica del database. Impostare su un altro numero CCSID per convertire nella codifica dell&#39;applicazione.</li>\r\n<li><code>PackageCollection</code> : Specifica un valore stringa per la raccolta pacchetti (il valore predefinito &#232; &quot;NULLID&quot;) per consentire l&#39;uso dei pacchetti condivisi necessari per l&#39;elaborazione di istruzioni SQL. Si applica a Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Specifica se la connessione viene effettuata tramite un gateway DB2 Connect. Si applica a Implementation = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Consente di recuperare un set di dati da Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Restituisce una tabella con le proprietà e i contenuti dei BLOB disponibili nel contenitore specificato da un insieme di credenziali di archiviazione di Azure.",
        "Documentation.LongDescription": "Restituisce una tabella con una riga per ogni file di BLOB trovato all'URL <code>account</code> del contenitore da un insieme di credenziali di archiviazione di Azure. Ogni riga contiene le proprietà del file e un collegamento al relativo contenuto.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Restituisce una tabella contenente i risultati dell'esecuzione dei selettori CSS specificati rispetto al codice HTML specificato.",
        "Documentation.LongDescription": "Restituisce una tabella che contiene i risultati dell'esecuzione dei selettori CSS specificati sull'elemento <code>html</code> fornito. È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella da un valore di testo HTML di esempio.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Estrae tutti gli HREF da un valore di testo HTML di esempio.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL disponibili in un database Informix.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL disponibili in un database Informix nel server <code>server</code> nell'istanza di database denominata <code>database</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Restituisce una tabella con i dettagli relativi ai lead.",
        "Documentation.LongDescription": "Effettua una chiamata all'endpoint dell'API REST Marketo all'indirizzo <code>url</code>/rest/v1/leads.json. Verranno restituiti tutti i lead nell'elenco <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Esegue il pull dei dettagli per tre lead",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Tabella con i dettagli per i lead specificati"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Specificare l'URL dell'endpoint dell'API REST Marketo associato all'account.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Restituisce una tabella con i dati Marketo pertinenti."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle, viste e funzioni scalari archiviate SQL disponibili in un database MySQL.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle, viste e funzioni scalari archiviate di SQL disponibili in un database MySQL nel server <code>server</code> nell'istanza denominata <code>database</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>Encoding</code> : Valore TextEncoding che specifica il set di caratteri usato per codificare tutte le query inviate al server. L&#39;impostazione predefinita &#232; Null.</li>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Espressione logica (true/false) che determina se forzare o meno le colonne tinyint nel server come valori logici. Il valore predefinito &#232; true.</li>\r\n<li><code>OldGuids</code> : Espressione logica (true/false) che consente di scegliere se le colonne char(36) (se false) o le colonne binary(16) (se true) verranno considerate come GUID. Il valore predefinito &#232; false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Espressione logica (true/false) che consente di scegliere se restituire tutte le tabelle di tutti i database (se false) o restituire le tabelle e le viste del database specificato (se true). Il valore predefinito &#232; false.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importa i dati da un database IBM Netezza.",
        "Documentation.LongDescription": "\r\nRestituisce una tabella di tabelle, viste e funzioni archiviate Netezza dal database Netezza Server <code>database</code> nel server <code>server</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: espressione logica (true/false) che consente di scegliere se generare proprietà di navigazione per i valori restituiti (il valore predefinito è true)</li>\r\n        <li><code>HierarchicalNavigation</code>: espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito è false)</li>\r\n        <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n        <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione della query sul lato server prima che venga annullata. Il valore predefinito dipende dal driver.</li>\r\n<li><code>NormalizeDatabaseName</code>: valore logico (true/false) che imposta se normalizzare il nome del database in lettere maiuscole o se interpretarlo letteralmente (il valore predefinito è true).</li>\r\n</ul>\r\nIl parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...].",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in un progetto di IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di una query nativa su un'origine dati ODBC.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di <code>query</code> con la stringa di connessione <code>connectionString</code> usando ODBC. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito &#232; 15 secondi.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Restituisce il risultato dell'esecuzione di una query semplice sulla stringa di connessione specificata.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di una query nativa su un'origine dati OLE DB.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di <code>query</code> con la stringa di connessione <code>connectionString</code> usando OLE DB. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL disponibili in un database PostgreSQL.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL disponibili in un database PostgreSQL nel server <code>server</code> nell'istanza di database denominata <code>database</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importa dati da un data warehouse Snowflake Computing.",
        "Documentation.LongDescription": "Restituisce una tabella che elenca le tabelle nel <code>warehouse</code> Snowflake Computing ubicato in <code>server</code>. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n<ul>\r\n<li><code>Role</code>: valore di testo da usare come nome del ruolo per la connessione.</li>\r\n<li><code>CreateNavigationProperties</code>: valore logico (true/false) che consente di scegliere se generare proprietà di navigazione per i valori restituiti (il valore predefinito è true)</li>\r\n<li><code>ConnectionTimeout</code>: numero di secondi di attesa delle risposte di rete da Snowflake.</li>\r\n<li><code>CommandTimeout</code>: numero di secondi di attesa dell'esecuzione di una query.</li>\r\n</ul>\r\n",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in un data warehouse Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Restituisce una tabella che elenca le tabelle nel cluster Spark specificato.",
        "Documentation.LongDescription": "Restituisce una tabella che elenca le tabelle nell'<code>host</code> del cluster Spark usando l'oggetto <code>protocol</code>. I protocolli validi sono:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in un'istanza di Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle, viste e funzioni archiviate SQL dal database SQL Server.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle, viste e funzioni archiviate SQL dal database SQL Server <code>database</code> nel server <code>server</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti o la virgola. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Numero che imposta il valore della clausola di query &quot;maxdop&quot; nella query SQL generata.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>MultiSubnetFailover</code> : Espressione logica (true/false) che imposta il valore della propriet&#224; &quot;MultiSubnetFailover&quot; nella stringa di connessione (il valore predefinito &#232; false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Valore logico (true/false) che, se true, tenta di ridurre le conversioni dei tipi che potrebbero generare errori e determinare l&#39;esito negativo dell&#39;intera query. Non consigliato per l&#39;uso generale.</li>\r\n<li><code>ContextInfo</code> : Valore binario usato per impostare CONTEXT_INFO prima di eseguire ogni comando.</li>\r\n<li><code>OmitSRID</code> : Valore logico (true/false) che, se true, omette l&#39;ID SRID durante la generazione di Well-Known Text da tipi geometrici e geografici.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Valore logico (true/false) che, se true, consente la riduzione della query dei database nello stesso server. Il valore predefinito &#232; false.</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Restituisce una tabella di tabelle e viste SQL disponibili in un database di Sybase.",
        "Documentation.LongDescription": "Restituisce una tabella di tabelle e viste SQL disponibili in un database Sybase nel server <code>server</code> nell'istanza di database denominata <code>database</code>. Facoltativamente, con il server è possibile specificare la porta, separando le voci con i due punti. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funzione usata per la creazione dei nomi per le propriet&#224; di navigazione.</li>\r\n<li><code>Query</code> : Query SQL nativa usata per recuperare i dati. Se la query genera pi&#249; set di risultati, viene restituito solo il primo.</li>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>ConnectionTimeout</code> : Valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n</ul>\r\n\r\n    Ad esempio, il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...] o [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Accoda una colonna con valori di posizione espliciti.",
        "Documentation.LongDescription": "Accoda una colonna denominata <code>newColumnName</code> a <code>table</code> con valori di posizione espliciti.\r\n    Un valore facoltativo, <code>initialValue</code>, indica il valore iniziale di indice. Un valore facoltativo, <code>increment</code>, specifica l'incremento di ogni valore di indice.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere una colonna denominata \"index\" alla tabella.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Aggiungere una colonna denominata \"index\", a partire dal valore 10 con incrementi di 5, alla tabella.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Data una colonna di elenchi in una tabella, creare una copia di una riga per ogni valore nell'elenco.",
        "Documentation.LongDescription": "Dato <code>table</code>, dove <code>column</code> è un elenco di valori, divide l'elenco in una riga per ogni valore. I valori delle altre colonne vengono duplicati in ogni nuova riga creata.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividere la colonna elenco [Name] nella tabella.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propaga il valore di una cella precedente alle celle con valori Null sottostanti nella colonna.",
        "Documentation.LongDescription": "Restituisce una tabella da <code>table</code> dove il valore di una cella precedente viene propagato alle celle con valori Null sottostanti in <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Restituire una tabella con i valori Null della colonna [Place] riempita con i valori sottostanti dalla tabella.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propaga il valore di una cella alle celle con valori Null nella parte superiore della colonna.",
        "Documentation.LongDescription": "Restituisce una tabella da <code>table</code> dove il valore della cella successiva viene propagato alle celle con valori Null nella parte superiore di <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Restituire una tabella con i valori Null della colonna [Column2] riempita con i valori sottostanti dalla tabella.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Restituisce tutte le righe che contengono il testo specificato nella tabella.",
        "Documentation.LongDescription": "Restituisce le righe nella tabella <code>table</code> che contengono il testo <code>text</code>. Se il testo non viene trovato, verrà restituita una tabella vuota.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare le righe nella tabella che contengono \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Restituisce le prime righe del conteggio specificate.",
        "Documentation.LongDescription": "Restituisce le prime righe della tabella <code>table</code> a seconda del valore di <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> è un numero, verrà restituito lo stesso numero di righe, a partire dall'alto. </li>\r\n    <li> Se <code>countOrCondition</code> è una condizione, verranno restituite le righe che soddisfano la condizione finché non viene trovata una riga che non soddisfa la condizione.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare le prime due righe della tabella.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Trovare le prime righe in cui [a] > 0 nella tabella.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Restituisce una tabella che rappresenta il risultato della combinazione di un set di tabelle partizionate.",
        "Documentation.LongDescription": "Restituisce una tabella che è il risultato della combinazione di un set di tabelle partizionate, <code>partitions</code>. <code>partitionColumn</code> è il nome della colonna da aggiungere. Il tipo predefinito di colonna è <code>any</code>, ma può essere specificato da <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare il tipo di elemento dall'elenco <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Restituisce l'ultimo numero di righe specificato.",
        "Documentation.LongDescription": "Restituisce le ultime righe della tabella <code>table</code>, a seconda del valore di <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Se <code>countOrCondition</code> è un numero, verrà restituito lo stesso numero di righe, a partire dalla posizione (fine - <code>countOrCondition</code>). </li>\r\n    <li> Se <code>countOrCondition</code> è una condizione, verranno restituite le righe che soddisfano la condizione in posizione crescente finché non viene trovata una riga che non soddisfa la condizione.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare le ultime due righe della tabella.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Trovare le ultime righe in cui [a] > 0 nella tabella.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Restituisce una tabella in cui le colonne sono state precedute tutte dal testo specificato.",
        "Documentation.LongDescription": "Restituisce una tabella in cui tutti i nomi di colonna da <code>table</code> sono preceduti dal testo specificato <code>prefix</code> e da un punto nel formato <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere alle colonne il prefisso \"MyTable\" nella tabella.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Restituisce le righe a partire dall'offset specificato.",
        "Documentation.LongDescription": "Restituisce le righe da <code>table</code> a partire da <code>offset</code>. Il parametro facoltativo <code>count</code> specifica il numero di righe da restituire. Per impostazione predefinita, vengono restituite tutte le righe dopo l'offset.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Restituire tutte le righe a partire dall'offset 1 nella tabella.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Restituire una riga a partire dall'offset 1 nella tabella.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Rimuove le colonne specificate.",
        "Documentation.LongDescription": "Rimuove <code>columns</code> da <code>table</code>.\r\n    Se la colonna specificata non esiste, viene generato un errore a meno che il parametro facoltativo <code>missingField</code> non specifichi un comportamento alternativo, ad esempio <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere la colonna [Phone] dalla tabella.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Provare a rimuovere una colonna inesistente dalla tabella.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Rimuove tutte le occorrenze delle righe specificate dalla tabella.",
        "Documentation.LongDescription": "Rimuove tutte le occorrenze di <code>rows</code> da <code>table</code>.\r\n    Facoltativamente, è possibile specificare il parametro <code>equationCriteria</code> per controllare il confronto tra le righe della tabella.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere tutte le righe dove [a = 1] dalla tabella <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Rimuove il numero di righe specificato.",
        "Documentation.LongDescription": "Rimuove <code>count</code> di righe dall'inizio di <code>table</code> a partire da <code>offset</code>. Se non viene specificato il parametro <code>count</code>, verrà utilizzato il conteggio predefinito di 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere la prima riga dalla tabella.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Rimuovere la riga nella posizione 1 dalla tabella.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Rimuovere due righe a partire dalla posizione 1 dalla tabella.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Applica le ridenominazioni nel formato {old, new}.",
        "Documentation.LongDescription": "Esegue le ridenominazioni specificate nelle colonne della tabella <code>table</code>. L'operazione di sostituzione <code>renames</code> è costituta da un elenco di due valori, il vecchio e il nuovo nome di colonna.\r\n    Se la colonna non esiste, verrà generata un'eccezione a meno che il parametro facoltativo <code>missingField</code> non specifichi un'alternativa, ad esempio <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Sostituire il nome della colonna \"CustomerNum\" con \"CustomerID\" nella tabella.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Sostituire il nome della colonna \"CustomerNum\" con \"CustomerID\" e il nome della colonna \"PhoneNum\" con \"Phone\" nella tabella.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Sostituire il nome della colonna \"NewCol\" con \"NewColumn\" e ignorare l'operazione se la colonna non esiste.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Restituisce una tabella con colonne nell'ordine specificato.",
        "Documentation.LongDescription": "Restituisce una tabella dall'input <code>table</code>, con le colonne nell'ordine specificato da <code>columnOrder</code>. Le colonne non specificate nell'elenco non verranno riordinate.\r\n     Se la colonna non esiste, verrà generata un'eccezione a meno che il parametro facoltativo <code>missingField</code> non specifichi un'alternativa, ad esempio <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Scambiare l'ordine delle colonne [Phone] e [Name] nella tabella.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Scambiare l'ordine delle colonne [Phone] e [Address] o usa \"MissingField.Ignore\". Non modifica la tabella perché la colonna [Address] non esiste.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Ripete le righe delle tabelle per il numero di volte specificato.",
        "Documentation.LongDescription": "Restituisce una tabella con le righe dall'input <code>table</code> ripetute per <code>count</code> volte.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Ripetere le righe nella tabella due volte.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Sostituisce i valori di errore nelle colonne specificate con il valore corrispondente specificato.",
        "Documentation.LongDescription": "Sostituisce i valori di errore nelle colonne specificate di <code>table</code> con i nuovi valori nell'elenco <code>errorReplacement</code>. Il formato dell'elenco è {{column1, value1}, …}. È consentito un solo valore di sostituzione per colonna. Se si specifica la colonna più di una volta, verrà generato un errore.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sostituire il valore di errore con il testo \"world\" nella tabella.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Sostituire il valore di errore nella colonna A con il testo \"hello\" e nella colonna B con il testo \"world\" nella tabella.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Sostituisce le chiavi della tabella specificata.",
        "Documentation.LongDescription": "Sostituisce le chiavi della tabella specificata.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sostituire le chiavi esistenti di una tabella.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Sostituisce tutte le righe specificate con le righe fornite.",
        "Documentation.LongDescription": "Sostituisce tutte le righe specificate in <code>table</code> con le righe fornite. Le righe da sostituire e le sostituzioni vengono specificate in <code>replacements</code>, usando il formato {old, new}.\r\n    Facoltativamente, è possibile specificare il parametro <code>equationCriteria</code> per controllare il confronto tra le righe della tabella.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Sostituire le righe [a = 1, b = 2] e [a = 2, b = 3] con [a = -1, b = -2],[a = -2, b = -3] nella tabella.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Restituisce una tabella contenente solo le colonne specificate.",
        "Documentation.LongDescription": "Restituisce il <code>table</code> con solo il <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code> specificato: la tabella specificata.</li>\r\n       <li><code>columns</code>: l'elenco di colonne della tabella <code>table</code> da restituire. Le colonne nella tabella restituita sono nell'ordine elencato in <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(Facoltativo)</i> Cosa fare se la colonna non esiste.  Esempio:<code>MissingField.UseNull</code> or <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Includere solo la colonna [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Includere solo le colonne [CustomerID] e [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Se la colonna inclusa non esiste, il risultato predefinito sarà un errore.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Se la colonna inclusa non esiste, l'opzione <code>MissingField.UseNull</code> crea una colonna di valori Null.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Seleziona le righe che soddisfano la funzione di condizione.",
        "Documentation.LongDescription": "Restituisce una tabella di righe da <code>table</code> corrispondente alla selezione <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Selezionare le righe nella tabella in cui i valori nella colonna [CustomerID] sono maggiori di 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Selezionare le righe nella tabella in cui i nomi non contengono la lettera \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Ordina la tabella mediante uno o più nomi di colonna e criteri di confronto.",
        "Documentation.LongDescription": "Ordina <code>table</code> mediante l'elenco di uno o più nomi di colonna e facoltativamente <code>comparisonCriteria</code> nel formato { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordinare la tabella in base alla colonna \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Ordinare la tabella in base alla colonna \"OrderID\" in ordine decrescente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Ordinare la tabella in base alla colonna \"CustomerID\" quindi \"OrderID\", con \"CustomerID\" in ordine decrescente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Trasforma i nomi di colonna usando la funzione specificata.",
        "Documentation.LongDescription": "Trasforma i nomi di colonna usando la funzione <code>nameGenerator</code> specificata. Opzioni valide:\r\n <div>\r\n <code>MaxLength</code> specifica la lunghezza massima dei nomi delle nuove colonne. Se la funzione specificata restituisce un nome di colonna più lungo, il nome lungo verrà tagliato.\r\n </div>\r\n <div>\r\n <code>Operatore di confronto</code> viene usato per controllare il confronto durante la generazione di nuovi nomi di colonna. Gli operatori di confronto possono essere usati per fornire confronti con distinzione tra maiuscole e minuscole oppure confronti in grado di riconoscere le impostazioni cultura e locali.\r\n </div>\r\n <div>\r\n Nel linguaggio delle formule sono disponibili gli operatori di confronto predefiniti seguenti:\r\n </div>\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>:  usato per eseguire un confronto ordinale esatto</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto senza distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.FromCulture</code>: usato per eseguire un confronto in grado di riconoscere le impostazioni cultura e locali</li>\r\n </ul>\r\n",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere il carattere <code>#(tab)</code> dai nomi di colonna",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Consente di trasformare i nomi di colonna per generare nomi senza distinzione tra maiuscole e minuscole della lunghezza di 6 caratteri.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Applica le trasformazioni del tipo nel formato { column, type } utilizzando impostazioni cultura specifiche.",
        "Documentation.LongDescription": "Restituisce una tabella dall'input <code>table</code> applicando l'operazione di trasformazione alle colonne specificate nel parametro <code>typeTransformations</code>, con il formato { column name, type name}, usando le impostazioni cultura specificate nel parametro facoltativo <code>culture</code>, ad esempio \"it-IT\".\r\n    Se la colonna non esiste, verrà generata un'eccezione.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trasformare i valori numerici nella colonna [a] in valori di testo dalla tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Trasforma i valori di una o più colonne.",
        "Documentation.LongDescription": "Trasforma <code>table</code> applicando ogni operazione di colonna elencata in <code>transformOperations</code> (dove il formato è { column name, transformation } o { column name, transformation, new column type }).\r\n    Se viene specificato un <code>defaultTransformation</code>, verrà applicato a tutte le colonne non elencate in <code>transformOperations</code>.\r\n    Se una colonna elencata in <code>transformOperations</code> non esiste, viene generata un'eccezione, a meno che il parametro facoltativo <code>missingField</code> non specifichi un'alternativa (ad esempio <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Converte i valori di testo nella colonna [A] in valori numerici e i valori numerici nella colonna [B] in valori di testo.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Consente di trasformare i valori numerici nella colonna mancante [X] in valori di testo, ignorando le colonne che non esistono.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Converte i valori numerici nelle colonne mancanti [X] in valori di testo. Per le colonne che non esistono, verrà usato il valore predefinito Null.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Incrementa i valori numerici nella colonna [B], li converte in valori di testo e converte tutte le altre colonne in numeri.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Crea o estende una tabella con gestori definiti dall'utente per operazioni di query e azione.",
        "Documentation.LongDescription": "<p>Restituisce una vista di <code>table</code> in cui vengono usate le funzioni specificate in<code>handlers</code> anziché il comportamento predefinito di un'operazione quando l'operazione è applicata alla vista.</p>\r\n<p>Se<code>table</code> viene specificato, tutte le funzioni del gestore sono facoltative. Se <code>table</code> non viene specificato, sono richieste le funzioni di gestore <code>GetType</code> e <code>GetRows</code>. Se una funzione di gestore non è specificata per un'operazione, a <code>table</code> viene applicato il comportamento predefinito dell'operazione (tranne nel caso di <code>GetExpression</code>). </p>\r\n<p>Le funzioni del gestore devono restituire un valore equivalente a livello semantico al risultato dell'applicazione dell'operazione su <code>table</code> (o della vista risultante nel caso di <code>GetExpression</code>).</p>\r\n<p>Se una funzione del gestore genera un errore, alla vista viene applicato il comportamento predefinito dell'operazione.</p>\r\n<p>È possibile usare <code>Table.View</code> per implementare la riduzione per un'origine dati, ovvero la conversione di query M in query specifiche dell'origine (ad esempio, per creare istruzioni T-SQL da query M).</p>\r\n<p>Per una descrizione completa di <code>Table.View</code>, vedere la documentazione pubblicata.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Creare una visualizzazione di base che non richieda l'accesso alle righe per determinare il tipo o il numero di righe.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Consente di immettere i nomi di progetto e organizzazione.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (solo Boards)",
        "Documentation.LongDescription": "Restituisce una tabella di visualizzazioni del Servizio analisi offerta da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importa i dati da Vertica",
        "Documentation.LongDescription": "Restituisce una tabella di schemi disponibile nel server denominato in base al parametro <code>server</code> nel database denominato in base al parametro <code>database</code>.\r\nÈ possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n    <li><code>CommandTimeout </code>: valore che controlla la durata di esecuzione della query sul lato server prima che venga annullata. Il valore predefinito dipende dal driver.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Elenca le tabelle in Vertica"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella con il contenuto dei report da Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Effettua una chiamata all'endpoint dei report Webtrends e restituisce tutti i dati come una tabella.",
        "Documentation.Examples": [
          {
            "Description": "Effettua una chiamata all'endpoint del report dei visitatori Webtrends per ottenere i dati degli ultimi 30 giorni",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Tabella con i dati dei visitatori"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Restituisce il contenuto di VisualQuery (vqr), report o funzioni pubblicate dai software HR Zucchetti",
        "Documentation.Examples": [
          {
            "Description": "Richiesta elenco dei dipendenti",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Restituisce un elenco di domini Active Directory nella stessa foresta del dominio specificato o del dominio corrente del computer se non specificato.",
        "Documentation.LongDescription": "Restituisce un elenco di domini Active Directory nella stessa foresta del dominio specificato o del dominio corrente del computer se non specificato.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di una query nativa su un'origine dati ADO.NET.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di <code>query</code> con la stringa di connessione <code>connectionString</code> usando il provider ADO.NET <code>providerName</code>. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici. Per specificare altre proprietà, è possibile specificare un parametro di record facoltativo <code>options</code>. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Valore che controlla la durata di esecuzione consentita della query sul lato server prima che venga annullata. Il valore predefinito &#232; dieci minuti.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Espressione logica (true/false) che determina se produrre opzioni della stringa di connessione compatibili con SQL Server per Autenticazione di Windows. Il valore predefinito &#232; true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Restituisce i gruppi di report in Adobe Analytics.",
        "Documentation.LongDescription": "Restituisce una tabella di pacchetti multidimensionali da Adobe Analytics. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Espressione logica (true/false) che consente di scegliere se visualizzare le tabelle raggruppate in base al nome del relativo schema (il valore predefinito &#232; true).</li>\r\n<li><code>MaxRetryCount</code> : Numero di tentativi da eseguire durante il polling del risultato della query. Il valore predefinito &#232; 120.</li>\r\n<li><code>RetryInterval</code> : Durata dell&#39;intervallo di tempo tra i tentativi. Il valore predefinito &#232; 1 secondo.</li>\r\n<li><code>Implementation</code> : Specifica la versione API di Adobe Analytics. I valori validi sono: &quot;2.0&quot;. L&#39;impostazione predefinita usa la versione API 1.4</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Importa i dati da un'istanza di Hive LLAP",
        "Documentation.LongDescription": "\r\nRestituisce un elenco di tabelle di Hive LLAP specificate dal <code>database</code> nel <code>server</code> Hive LLAP usando il <code>protocollo</code> selezionato. Facoltativamente con il server è possibile specificare un numero di porta, separato da due punti. Il protocollo di trasporto Thrift è un tipo enumerato i cui valori sono \"Standard\", \"HTTP\". È possibile specificare un parametro facoltativo <code>options</code> per controllare le opzioni seguenti:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa prima che un tentativo di connessione al server venga abbandonato. Il valore predefinito dipende dal driver.</li>\r\n        <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione prima che la query sul lato server venga annullata. Il valore predefinito dipende dal driver.</li>\r\n</ul>\r\nIl parametro <code>options</code> viene specificato come [opzione1 = valore1, opzione2 = valore2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi per il periodo dal 01/05/2017 al 15/06/2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La funzione restituisce i dati dei riepiloghi per il periodo dal 01/05/2017 al 15/06/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi per il mese di aprile 2017",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La funzione restituisce i dati per il periodo dal 01/04/2017 al 30/04/2017"
          },
          {
            "Description": "Supponendo che oggi sia il 15/06/2017, ottiene i dati dei riepiloghi dal mese di aprile 2017 a oggi",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La funzione restituisce i dati per il periodo dal 01/04/2017 al 15/06/2017"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Gestione costi di Azure",
        "Documentation.Description": "Gestione costi di Azure",
        "Documentation.DisplayName": "Gestione costi di Azure",
        "Documentation.LongDescription": "Gestione costi di Azure",
        "Documentation.Name": "Gestione costi di Azure"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Consente di immettere i nomi di progetto e organizzazione.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Restituisce una tabella di feed OData offerti da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Consente di connettersi all'istanza di Dataverse (Dynamics 365 e PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Esegue il merge della tabella di dimensioni specificata nel contesto del filtro del cubo e modifica la granularità dimensionale del contesto del filtro espandendo il set specificato di attributi di dimensione.",
        "Documentation.LongDescription": "Esegue il merge della tabella di dimensioni specificata <code>dimensionSelector</code> nel contesto del filtro <code>cube</code> del cubo e modifica la granularità dimensionale del contesto del filtro espandendo il set specificato <code>attributeNames</code> di attributi di dimensione. Gli attributi di dimensione vengono aggiunti alla visualizzazione tabulare con le colonne denominate <code>newColumnNames</code> o <code>attributeNames</code> se non specificate.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Aggiunge una colonna al cubo contenente i risultati della misura applicata al contesto di ogni riga.",
        "Documentation.LongDescription": "Aggiunge una colonna con il nome <code>column</code> all'elemento <code>cube</code> contenente i risultati della misura <code>measureSelector</code> applicata al contesto di ogni riga. L'applicazione della misura è interessata dalle modifiche apportate al sezionamento e alla granularità della dimensione. I valori della misura verranno adattati dopo l'esecuzione di alcune operazioni del cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Specificare l'ambiente e la società Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Specificare l'ambiente e la società Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Specificare l'ambiente e la società Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Specificare l'ambiente e la società Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Restituisce una tabella con i dati pertinenti di Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Restituisce il contenuto della cartella di lavoro di Excel corrente.",
        "Documentation.LongDescription": "Restituisce il contenuto della cartella di lavoro di Excel corrente. Restituisce tabelle, intervalli denominati e matrici dinamiche. A differenza di <code></code> Excel.Workbook, non restituisce fogli.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Restituisce una tabella di contenuti di un account di Microsoft Exchange.",
        "Documentation.LongDescription": "Restituisce una tabella di contenuti dall'account di Microsoft Exchange <code>mailboxAddress</code>. Se non viene specificato <code>mailboxAddress</code>, verrà usato l'account predefinito per le credenziali.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Data warehouse",
        "Documentation.Caption": "Data warehouse",
        "Documentation.Description": "Importa dati da warehouse",
        "Documentation.LongDescription": "Importa dati da warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Restituisce gli account Google Analytics.",
        "Documentation.LongDescription": "Restituisce gli account Google Analytics accessibili tramite le credenziali correnti.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importa i dati da un database di Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Restituisce una tabella che elenca i progetti disponibili in Google BigQuery. È possibile specificare un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa di un tentativo di connessione al server prima dell’abbandono. Il valore predefinito è quello del timeout connessione ODBC.</li>\r\n        <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione della query sul lato server prima dell'annullamento.</li>\r\n        <li><code>BillingProject</code>:  ID del progetto di fatturazione. Il valore predefinito è il primo progetto disponibile.</li>\r\n        <li><code>UseStorageApi</code>: specifica se usare l'API di archiviazione di BigQuery per i set di risultati di grandi dimensioni. Il valore predefinito è true per usare l'API di archiviazione. Impostarlo su false per non usare l'API di archiviazione</li>\r\n      </ul>\r\n    Il parametro del record è specificato come [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Elenca i progetti disponibili in Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importare dati da un'istanza di Lakehouse",
        "Documentation.Description": "Importare dati da un'istanza di Lakehouse",
        "Documentation.LongDescription": "Connettersi a tutti i lakehouse a cui si ha accesso e scegliere le entità da usare"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella con i dati MailChimp principali.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Restituisce una tabella con i dati MailChimp principali.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella con i dati MailChimp principali.",
            "Code": "MailChimp.Tables()",
            "Result": "Tabella con i dati MailChimp principali."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Restituisce una tabella con le attività relative ai lead.",
        "Documentation.LongDescription": "Effettua una chiamata all'endpoint dell'API REST Marketo all'indirizzo <code>url</code>/rest/v1/activities.json. Verranno restituite tutte le attività nell'elenco <code>activityIds</code> che si sono verificate a partire da <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Esegue il pull di una tabella di attività \"Visita pagina Web\" a partire dal 1° novembre 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Tabella con i dettagli di tutte le attività \"Visita pagina Web\" a partire dal 1° novembre"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Flussi di dati Power BI (Legacy)",
        "Documentation.Caption": "Importa dati da un flusso di dati Power BI",
        "Documentation.LongDescription": "Consente di connettersi a tutti i flussi di dati Power BI cui si ha accesso e di scegliere le entità che si intende usare."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Data mart",
        "Documentation.Caption": "Data mart",
        "Documentation.Description": "Importa i dati da data mart",
        "Documentation.LongDescription": "Importa i dati da data mart"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Flussi di dati",
        "Documentation.Caption": "Importa i dati da un flusso di dati",
        "Documentation.Description": "Importa i dati da un flusso di dati",
        "Documentation.LongDescription": "Consente di connettersi a tutti i flussi di dati a cui si ha accesso e di scegliere le entità che si intende usare"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importa i dati da QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Restituisce una tabella che elenca le tabelle disponibili in QuickBooks Online. È possibile specificare un parametro di record facoltativo <code>options</code> per controllare le opzioni seguenti:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: valore che controlla il tempo di attesa di un tentativo di connessione al server prima che venga abbandonato.</li>\r\n            <li><code>CommandTimeout</code>: valore che controlla la durata di esecuzione della query sul lato server prima che venga annullata.</li>\r\n          </ul>\r\n        Il parametro di record è specificato nel formato [opzione1 = valore1, opzione2 = valore2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Restituisce gli oggetti dall'account Salesforce.",
        "Documentation.LongDescription": "Restituisce gli oggetti dell'account Salesforce specificato nelle credenziali. L'account verrà connesso tramite l'ambiente di <code>loginUrl</code> specificato. Se l'ambiente non è specificato, l'account si connetterà all'ambiente di produzione (https://login.salesforce.com). È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Espressione logica (true/false) che consente di scegliere se generare propriet&#224; di navigazione per i valori restituiti (il valore predefinito &#232; false).</li>\r\n<li><code>ApiVersion</code> : Versione dell&#39;API Salesforce da usare per questa query. Se questo valore non &#232; specificato, verr&#224; usata la versione 29.0 dell&#39;API.</li>\r\n<li><code>Timeout</code> : Valore di durata che controlla il tempo di attesa per la richiesta al server prima che venga abbandonata. Il valore predefinito &#232; specifico dell&#39;origine.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Restituisce i report dall'account Salesforce.",
        "Documentation.LongDescription": "Restituisce i report dell'account Salesforce specificato nelle credenziali. L'account verrà connesso tramite l'ambiente di <code>loginUrl</code> specificato. Se l'ambiente non è specificato, l'account si connetterà all'ambiente di produzione (https://login.salesforce.com). È possibile fornire un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Versione dell&#39;API Salesforce da usare per questa query. Se questo valore non &#232; specificato, verr&#224; usata la versione 29.0 dell&#39;API.</li>\r\n<li><code>Timeout</code> : Valore di durata che controlla il tempo di attesa per la richiesta al server prima che venga abbandonata. Il valore predefinito &#232; specifico dell&#39;origine.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Restituisce gli InfoCube e le query raggruppati per InfoArea in un sistema SAP Business Warehouse.",
        "Documentation.LongDescription": "Restituisce una tabella di InfoCube e query raggruppati per InfoArea da un'istanza di SAP Business Warehouse nel server <code>server</code> con numero sistema <code>systemNumberOrSystemId</code> e ID client <code>clientId</code>. È possibile specificare un parametro di record facoltativo, <code>optionsOrLogonGroup</code>, per controllare le opzioni seguenti:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella di fogli, report, cartelle e aree di lavoro dall'API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Restituisce una tabella annidata di fogli, report, cartelle e aree di lavoro disponibili dall'API Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce i fogli, le cartelle, i report e le aree di lavoro disponibili nel primo livello della gerarchia Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Tabella di cartelle, report e aree di lavoro dal primo livello della gerarchia Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella di metriche disponibili dall'API SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "È possibile usare questa funzione per recuperare dati da un particolare endpoint \"Metrics\" dell'API SparkPost v1. Quando si aggiornano queste tabelle o si effettuano chiamate all'API SparkPost con questo connettore, tenere presente che l'API SparkPost prevede un rigido limite di velocità dell'API. Se il server SparkPost restituisce un codice di stato 429, il limite di velocità è stato raggiunto ed è necessario attendere qualche istante prima di effettuare altre chiamate. Quando si sceglie un valore per il parametro relativo al numero di giorni, tenere presente che l'API archivia solo i dati degli ultimi sei mesi.",
        "Documentation.Examples": [
          {
            "Description": "Recupera le metriche count_sent e count_rejected per deliverability per tutti gli elementi campaign_ids aggregati negli ultimi tre giorni. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabella"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Effettua una chiamata all'API Stripe.",
        "Documentation.LongDescription": "Effettua una chiamata all'API Stripe all'indirizzo https://api.stripe.com/v1/<code>method</code>, con il record <code>additionalParameters</code> passato come parametri facoltativi e l'elenco <code>ColumnNames</code> dei nomi di colonna previsti. Versione di Stripe usata: 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Restituisce una tabella contenente gli eventi creati dopo il 1° novembre 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Tabella contenente gli eventi specificati per l'account Stripe corrente"
          },
          {
            "Description": "Restituisce una tabella con tutti gli SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Tabella contenente tutti gli SKU per l'account Stripe corrente"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Restituisce una tabella che elenca le tabelle e le funzioni Stripe disponibili.",
        "Documentation.LongDescription": "Restituisce una tabella che elenca le tabelle e le funzioni Stripe disponibili."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Area di lavoro di Azure Synapse Analytics",
        "Documentation.Caption": "Area di lavoro di Azure Synapse Analytics",
        "Documentation.LongDescription": "Connettore PQ per l’area di lavoro di Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Aggiunge una colonna con il nome specificato. Il valore è calcolato utilizzando la funzione di selezione specificata con ogni riga accettata come input.",
        "Documentation.LongDescription": "Aggiunge una colonna denominata <code>newColumnName</code> alla tabella <code>table</code>. I valori della colonna sono calcolati utilizzando la funzione di selezione specificata <code>columnGenerator</code> con ogni riga accettata come input.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere una colonna numerica denominata \"TotalPrice\" alla tabella, con ogni valore che corrisponde alla somma delle colonne [Price] e [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Aggiunge una nuova colonna con valori rappresentativi ottenuti dai valori di raggruppamento fuzzy della colonna specificata nella tabella.",
        "Documentation.LongDescription": "Aggiunge una nuova colonna <code>newColumnName</code> a <code>table</code> con valori rappresentativi di <code>columnName</code>. I valori rappresentativi vengono ottenuti mediante la corrispondenza fuzzy dei valori in <code>columnName</code>, per ogni riga..\r\n    <p>È anche possibile includere un set facoltativo di <code>options</code> per specificare la modalità di confronto delle colonne chiave. Le opzioni includono:\r\n    <ul>\r\n<li><code>Culture</code> : Consente di raggruppare i record in base a regole specifiche delle impostazioni cultura. Pu&#242; essere qualsiasi nome di impostazioni cultura valido. Ad esempio, l&#39;opzione delle impostazioni cultura &quot;ja-JP&quot; raggruppa i record in base alle impostazioni cultura per il giapponese. Il valore predefinito &#232; &quot;&quot;, che raggruppa in base alle impostazioni cultura inglese non dipendenti da paese/area geografica.</li>\r\n<li><code>IgnoreCase</code> : Valore logico (true/false) che consente di raggruppare le chiavi senza distinzione tra maiuscole e minuscole. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; raggruppato con &quot;uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>IgnoreSpace</code> : Valore logico (true/false) che consente la combinazione di parti di testo per trovare i gruppi. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; raggruppato con &quot;Uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>SimilarityColumnName</code> : Nome per la colonna che mostra la similarit&#224; tra un valore di input e il valore rappresentativo per tale input. Il valore predefinito &#232; Null, nel qual caso non verr&#224; aggiunta una nuova colonna per le similarit&#224;.</li>\r\n<li><code>Threshold</code> : Numero compreso tra 0,00 e 1,00 che specifica il punteggio di somiglianza in base a cui verranno raggruppati  due valori.\r\n    Ad esempio, i termini &quot;Uva&quot; e &quot;Ua&quot; (&quot;v&quot; mancante) sono raggruppati solo se questa opzione &#232; impostata su un valore inferiore a 0,90.\r\n    Una soglia di 1,00 consente corrispondenze esatte.\r\n    (Si noti che una &quot;corrispondenza esatta&quot; fuzzy potrebbe ignorare differenze quali la combinazione di maiuscole e minuscole, l&#39;ordine delle parole e la punteggiatura.)\r\n    Il valore predefinito &#232; 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabella che consente di raggruppare i record in base a mapping di valori personalizzati. Deve contenere le colonne &quot;Da&quot; e &quot;A&quot;. Ad esempio, il termine &quot;Uva&quot; viene raggruppato con &quot;Uvetta&quot; se viene specificata una tabella di trasformazione con la colonna &quot;Da&quot; contenente &quot;Uva&quot; e la colonna &quot;A&quot; contenente &quot;Uvetta&quot;. Si noti che la trasformazione verr&#224; applicata a tutte le occorrenze del testo nella tabella di trasformazione. Con la tabella di trasformazione precedente, la frase &quot;L&#39;uva &#232; dolce&quot; sar&#224; raggruppata anche con la frase &quot;L&#39;uvetta &#232; dolce&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trovare i valori rappresentativi per la sede dei dipendenti.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Esegue un join tra tabelle per le colonne specificate e fornisce il risultato del join in una nuova colonna.",
        "Documentation.LongDescription": "Unisce in join le righe di <code>table1</code> con le righe <code>table2</code> in base all'uguaglianza dei valori delle colonne chiave selezionate da <code>key1</code> (per <code>table1</code>) e da <code>key2</code> (per <code>table2</code>). I risultati sono inseriti nella colonna denominata <code>newColumnName</code>.\r\nIl comportamento di questa funzione è analogo a Table.Join con JoinKind di LeftOuter, salvo che i risultati del join sono presentati in modalità annidata anziché flat.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere una colonna di join a ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) denominata \"price/stock\" dalla tabella ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) unita in join in [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Aggiunge una chiave a una tabella.",
        "Documentation.LongDescription": "Aggiunge una chiave a <code>table</code>, dove <code>columns</code> è l'elenco di nomi di colonna che definiscono la chiave e <code>isPrimary</code> specifica se la chiave è primaria.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere una chiave primaria a colonna singola a una tabella.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Aggiunge una colonna con la classificazione di una o più altre colonne.",
        "Documentation.LongDescription": "Aggiunge una colonna denominata <code>newColumnName</code> al <code>table</code> con la classificazione di una o più altre colonne descritte da <code>comparisonCriteria</code>.\r\nL'opzione RankKind in <code>options</code> può essere usata dagli utenti esperti per scegliere un metodo di classificazione più specifico.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere una colonna denominata \"RevenueRank\" alla tabella che classifica la colonna \"Revenue\" dal più alto al più basso.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Aggrega una colonna di tabelle in più colonne nella tabella che la contiene.",
        "Documentation.LongDescription": "Aggrega le tabelle in <code>table</code>[<code>column</code>] in più colonne contenenti i valori di aggregazione per le tabelle. <code>aggregations</code> viene utilizzato per specificare le colonne contenenti le tabelle da aggregare, le funzioni di aggregazione da applicare alle tabelle per generare i relativi valori e i nomi delle colonne aggregate da creare.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Aggregare le colonne di tabella in <code>[t]</code> nella tabella <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> nella somma di <code>[t.a]</code>, il valore minimo e massimo di <code>[t.b]</code> e il conteggio dei valori in <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Mantiene l'offset iniziale, quindi accetta e ignora alternativamente le righe seguenti.",
        "Documentation.LongDescription": "Mantiene l'offset iniziale, quindi accetta e ignora alternativamente le righe seguenti.\r\n    <ul>\r\n       <li><code>table</code>: tabella di input.</li>\r\n       <li><code>offset</code>: numero di righe da mantenere prima di avviare le iterazioni.</li>\r\n       <li><code>skip</code>: numero di righe da rimuovere in ogni iterazione.</li>\r\n       <li><code>take</code>: numero di righe da mantenere in ogni iterazione.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Restituire una tabella dalla tabella che, a partire dalla prima riga, ignora 1 valore e quindi mantiene 1 valore.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Combina le colonne specificate in una nuova colonna utilizzando la funzione di combinatore specificata.",
        "Documentation.LongDescription": "Combina le colonne specificate in una nuova colonna utilizzando la funzione di combinatore specificata.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combinare i cognomi e i nomi in una nuova colonna, separati da una virgola.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Combina le colonne specificate in una nuova colonna di record con valori in cui ogni record ha nomi di campo e valori corrispondenti ai nomi di colonna e ai valori delle colonne che sono state combinate.",
        "Documentation.LongDescription": "Combina le colonne specificate di <code>table</code> in una nuova colonna di record con valori denominata <code>newColumnName</code> in cui ogni record ha nomi di campo e valori corrispondenti ai nomi di colonna e ai valori delle colonne che sono state combinate. Se viene specificato un record per <code>options</code>, è possibile specificare le opzioni seguenti:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: quando viene specificato come testo, indica che il nome della colonna specificato deve essere considerato come il nome visualizzato del record. Non deve essere una delle colonne nel record stesso.</li>\r\n     <li> <code>TypeName</code>: quando viene specificato come testo, fornisce un nome di tipo logico per il record risultante che può essere usato durante il caricamento dei dati per indirizzare il comportamento da parte dell'ambiente di caricamento.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplica una colonna con il nome specificato. I valori e il tipo vengono copiati dalla colonna di origine.",
        "Documentation.LongDescription": "Duplicare la colonna denominata <code>columnName</code> nella tabella <code>table</code>. I valori e il tipo della colonna <code>newColumnName</code> vengono copiati dalla colonna <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Duplicare la colonna \"a\" in una colonna denominata \"copied column\" nella tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Espande una colonna di record in colonne con ciascuno dei valori.",
        "Documentation.LongDescription": "Dato <code>column</code> di record nell'input <code>table</code>, crea una tabella con una colonna per ogni campo del record. Facoltativamente, è possibile specificare <code>newColumnNames</code> per garantire nomi univoci per le colonne nella nuova tabella.\r\n    <ul>\r\n        <li><code>table</code>: tabella originale con la colonna di record da espandere. </li>\r\n        <li><code>column</code>: colonna da espandere.</li>\r\n        <li><code>fieldNames</code>: elenco di campi da espandere in colonne nella tabella.</li>\r\n        <li><code>newColumnNames</code>: elenco di nomi di colonna per specificare le nuove colonne. I nuovi nomi di colonna non possono duplicare alcuna colonna nella nuova tabella.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Espandere la colonna [a] nella tabella <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> in 3 colonne \"aa\", \"bb\" e \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Espande una colonna di record o una colonna di tabelle in più colonne nella tabella che la contiene.",
        "Documentation.LongDescription": "Espande le tabelle in <code>table</code>[<code>column</code>] in più righe più e colonne. <code>columnNames</code> viene utilizzato per selezionare le colonne da espandere dalla tabella interna. Specificare <code>newColumnNames</code> per evitare conflitti tra le colonne esistenti e le nuove colonne.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Espandere le colonne di tabella in <code>[a]</code> nella tabella <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> in 3 colonne <code>[t.a]</code>, <code>[t.b]</code> e <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Raggruppa le righe nella tabella in base alla corrispondenza fuzzy delle chiavi.",
        "Documentation.LongDescription": "Raggruppa le righe di <code>table</code> in base ai valori con corrispondenza fuzzy nella colonna specificata, <code>key</code>, per ogni riga.\r\n    Per ogni gruppo, viene creato un record contenente le colonne chiave (e i relativi valori) insieme a tutte le colonne aggregate specificate da <code>aggregatedColumns</code>.\r\n    Questa funzione non può garantire la restituzione di un ordine fisso di righe.\r\n    <p>È anche possibile includere un set facoltativo di <code>options</code> per specificare la modalità di confronto delle colonne chiave. Le opzioni includono:\r\n    <ul>\r\n<li><code>Culture</code> : Consente di raggruppare i record in base a regole specifiche delle impostazioni cultura. Pu&#242; essere qualsiasi nome di impostazioni cultura valido. Ad esempio, l&#39;opzione delle impostazioni cultura &quot;ja-JP&quot; raggruppa i record in base alle impostazioni cultura per il giapponese. Il valore predefinito &#232; &quot;&quot;, che raggruppa in base alle impostazioni cultura inglese non dipendenti da paese/area geografica.</li>\r\n<li><code>IgnoreCase</code> : Valore logico (true/false) che consente di raggruppare le chiavi senza distinzione tra maiuscole e minuscole. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; raggruppato con &quot;uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>IgnoreSpace</code> : Valore logico (true/false) che consente la combinazione di parti di testo per trovare i gruppi. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; raggruppato con &quot;Uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>SimilarityColumnName</code> : Nome per la colonna che mostra la similarit&#224; tra un valore di input e il valore rappresentativo per tale input. Il valore predefinito &#232; Null, nel qual caso non verr&#224; aggiunta una nuova colonna per le similarit&#224;.</li>\r\n<li><code>Threshold</code> : Numero compreso tra 0,00 e 1,00 che specifica il punteggio di somiglianza in base a cui verranno raggruppati  due valori.\r\n    Ad esempio, i termini &quot;Uva&quot; e &quot;Ua&quot; (&quot;v&quot; mancante) sono raggruppati solo se questa opzione &#232; impostata su un valore inferiore a 0,90.\r\n    Una soglia di 1,00 consente corrispondenze esatte.\r\n    (Si noti che una &quot;corrispondenza esatta&quot; fuzzy potrebbe ignorare differenze quali la combinazione di maiuscole e minuscole, l&#39;ordine delle parole e la punteggiatura.)\r\n    Il valore predefinito &#232; 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabella che consente di raggruppare i record in base a mapping di valori personalizzati. Deve contenere le colonne &quot;Da&quot; e &quot;A&quot;. Ad esempio, il termine &quot;Uva&quot; viene raggruppato con &quot;Uvetta&quot; se viene specificata una tabella di trasformazione con la colonna &quot;Da&quot; contenente &quot;Uva&quot; e la colonna &quot;A&quot; contenente &quot;Uvetta&quot;. Si noti che la trasformazione verr&#224; applicata a tutte le occorrenze del testo nella tabella di trasformazione. Con la tabella di trasformazione precedente, la frase &quot;L&#39;uva &#232; dolce&quot; sar&#224; raggruppata anche con la frase &quot;L&#39;uvetta &#232; dolce&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Raggruppare la tabella aggiungendo una colonna aggregata [Count] contenente il numero di dipendenti in ogni sede (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Unisce in join le righe di due tabelle in cui è stata rilevata una corrispondenza fuzzy in base alle chiavi specificate.",
        "Documentation.LongDescription": "<p>Crea un join delle righe di <code>table1</code> con le righe di <code>table2</code> in base a una corrispondenza fuzzy dei valori delle colonne chiave selezionate da <code>key1</code> (per <code>table1</code>) e <code>key2</code> (per <code>table2</code>).</p>\r\n<p>Per corrispondenza fuzzy si intende un confronto basato sulla somiglianza del testo anziché sull'uguaglianza del testo.</p>\r\n<p>Per impostazione predefinita, viene eseguito un inner join, ma è possibile includere un set facoltativo di <code>joinKind</code> per specificare il tipo di join. Le opzioni includono:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>È possibile includere un set facoltativo di <code>joinOptions</code> per specificare la modalità di confronto delle colonne chiave. Le opzioni includono:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Numero compreso tra 1 e 8 che specifica il numero di thread paralleli da usare per la corrispondenza fuzzy. Il valore predefinito &#232; 1.</li>\r\n<li><code>Culture</code> : Consente la corrispondenza dei record in base a regole specifiche delle impostazioni cultura. Pu&#242; essere qualsiasi nome di impostazioni cultura valido. Ad esempio, l&#39;opzione delle impostazioni cultura &quot;ja-JP&quot; trova la corrispondenza dei record in base alle impostazioni cultura per il giapponese. Il valore predefinito &#232; &quot;&quot;, che trova la corrispondenza in base alle impostazioni cultura inglese non dipendenti da paese/area geografica.</li>\r\n<li><code>IgnoreCase</code> : Valore logico (true/false) che consente la corrispondenza delle chiavi senza distinzione tra maiuscole e minuscole. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; viene abbinato a &quot;uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>IgnoreSpace</code> : Valore logico (true/false) che consente la combinazione di parti di testo per trovare le corrispondenze. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; abbinato a &quot;Uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>NumberOfMatches</code> : Numero intero che specifica il numero massimo di righe corrispondenti che possono essere restituite per ogni riga di input. Ad esempio, un valore di 1 restituir&#224; al massimo una riga corrispondente per ogni riga di input. Se questa opzione non viene specificata, vengono restituite tutte le righe corrispondenti.</li>\r\n<li><code>SimilarityColumnName</code> : Nome per la colonna che mostra la similarit&#224; tra un valore di input e il valore rappresentativo per tale input. Il valore predefinito &#232; Null, nel qual caso non verr&#224; aggiunta una nuova colonna per le similarit&#224;.</li>\r\n<li><code>Threshold</code> : Numero compreso tra 0,00 e 1,00 che specifica il punteggio di somiglianza in base a cui verranno abbinati due valori.\r\n    Ad esempio, i termini &quot;Uva&quot; e &quot;Ua&quot; (&quot;v&quot; mancante) sono abbinati solo se questa opzione &#232; impostata su un valore inferiore a 0,90.\r\n    Una soglia di 1,00 consente corrispondenze esatte.\r\n    (Si noti che una &quot;corrispondenza esatta&quot; fuzzy potrebbe ignorare differenze quali la combinazione di maiuscole e minuscole, l&#39;ordine delle parole e la punteggiatura.)\r\n    Il valore predefinito &#232; 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabella che consente di abbinare i record in base a mapping di valori personalizzati. Deve contenere le colonne &quot;Da&quot; e &quot;A&quot;. Ad esempio, il termine &quot;Uva&quot; viene abbinato a &quot;Uvetta&quot; se viene specificata una tabella di trasformazione con la colonna &quot;Da&quot; contenente &quot;Uva&quot; e la colonna &quot;A&quot; contenente &quot;Uvetta&quot;. Si noti che la trasformazione verr&#224; applicata a tutte le occorrenze del testo nella tabella di trasformazione. Con la tabella di trasformazione precedente, la frase &quot;L&#39;uva &#232; dolce&quot; verr&#224; anche abbinata alla frase &quot;L&#39;uvetta &#232; dolce&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Inner join fuzzy a sinistra di due tabelle in base a [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Esegue un join fuzzy tra tabelle per le colonne specificate e fornisce il risultato del join in una nuova colonna.",
        "Documentation.LongDescription": "<p>Crea un join delle righe di <code>table1</code> con le righe di <code>table2</code> in base a una corrispondenza fuzzy dei valori delle colonne chiave selezionate da <code>key1</code> (per <code>table1</code>) e <code>key2</code> (per <code>table2</code>). I risultati vengono restituiti in una nuova colonna denominata <code>newColumnName</code>.</p>\r\n<p>Per corrispondenza fuzzy si intende un confronto basato sulla somiglianza del testo anziché sull'uguaglianza del testo.</p>\r\n<p>Il valore facoltativo <code>joinKind</code> specifica il tipo di join da eseguire. Per impostazione predefinita, viene eseguito un left outer join se non si specifica un tipo di join <code>joinKind</code>. Le opzioni includono:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>È possibile includere un set facoltativo di <code>joinOptions</code> per specificare la modalità di confronto delle colonne chiave. Le opzioni includono:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Numero compreso tra 1 e 8 che specifica il numero di thread paralleli da usare per la corrispondenza fuzzy. Il valore predefinito &#232; 1.</li>\r\n<li><code>Culture</code> : Consente la corrispondenza dei record in base a regole specifiche delle impostazioni cultura. Pu&#242; essere qualsiasi nome di impostazioni cultura valido. Ad esempio, l&#39;opzione delle impostazioni cultura &quot;ja-JP&quot; trova la corrispondenza dei record in base alle impostazioni cultura per il giapponese. Il valore predefinito &#232; &quot;&quot;, che trova la corrispondenza in base alle impostazioni cultura inglese non dipendenti da paese/area geografica.</li>\r\n<li><code>IgnoreCase</code> : Valore logico (true/false) che consente la corrispondenza delle chiavi senza distinzione tra maiuscole e minuscole. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; viene abbinato a &quot;uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>IgnoreSpace</code> : Valore logico (true/false) che consente la combinazione di parti di testo per trovare le corrispondenze. Ad esempio, quando &#232; true, il termine &quot;Uva&quot; &#232; abbinato a &quot;Uva&quot;. Il valore predefinito &#232; true.</li>\r\n<li><code>NumberOfMatches</code> : Numero intero che specifica il numero massimo di righe corrispondenti che possono essere restituite per ogni riga di input. Ad esempio, un valore di 1 restituir&#224; al massimo una riga corrispondente per ogni riga di input. Se questa opzione non viene specificata, vengono restituite tutte le righe corrispondenti.</li>\r\n<li><code>SimilarityColumnName</code> : Nome per la colonna che mostra la similarit&#224; tra un valore di input e il valore rappresentativo per tale input. Il valore predefinito &#232; Null, nel qual caso non verr&#224; aggiunta una nuova colonna per le similarit&#224;.</li>\r\n<li><code>Threshold</code> : Numero compreso tra 0,00 e 1,00 che specifica il punteggio di somiglianza in base a cui verranno abbinati due valori.\r\n    Ad esempio, i termini &quot;Uva&quot; e &quot;Ua&quot; (&quot;v&quot; mancante) sono abbinati solo se questa opzione &#232; impostata su un valore inferiore a 0,90.\r\n    Una soglia di 1,00 consente corrispondenze esatte.\r\n    (Si noti che una &quot;corrispondenza esatta&quot; fuzzy potrebbe ignorare differenze quali la combinazione di maiuscole e minuscole, l&#39;ordine delle parole e la punteggiatura.)\r\n    Il valore predefinito &#232; 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabella che consente di abbinare i record in base a mapping di valori personalizzati. Deve contenere le colonne &quot;Da&quot; e &quot;A&quot;. Ad esempio, il termine &quot;Uva&quot; viene abbinato a &quot;Uvetta&quot; se viene specificata una tabella di trasformazione con la colonna &quot;Da&quot; contenente &quot;Uva&quot; e la colonna &quot;A&quot; contenente &quot;Uvetta&quot;. Si noti che la trasformazione verr&#224; applicata a tutte le occorrenze del testo nella tabella di trasformazione. Con la tabella di trasformazione precedente, la frase &quot;L&#39;uva &#232; dolce&quot; verr&#224; anche abbinata alla frase &quot;L&#39;uvetta &#232; dolce&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Inner join fuzzy a sinistra di due tabelle in base a [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Raggruppa le righe nella tabella con la stessa chiave.",
        "Documentation.LongDescription": "Raggruppa le righe di <code>table</code> in base alle colonne chiave definite da <code>key</code>. <code>key</code> può essere un singolo nome di colonna o un elenco di nomi di colonna.\r\n    Per ogni gruppo viene costruito un record contenente le colonne chiave e i rispettivi valori, insieme alle colonne aggregate specificate da <code>aggregatedColumns</code>.\r\n    Facoltativamente, è possibile specificare anche <code>groupKind</code> e <code>comparer</code>.<br>\r\n    <br>\r\n    Se i dati sono già ordinati in base alle colonne chiave, è possibile fornire un oggetto <code>groupKind</code> di GroupKind.Local. In alcuni casi questo oggetto può migliorare le prestazioni del raggruppamento\r\n    dal momento che tutte le righe con un set specificato di valori chiave vengono considerate contigue.<br>\r\n    <br>\r\n    Quando si passa un oggetto <code>comparer</code>, tenere presente che se chiavi diverse vengono considerate come uguali, una riga può essere inserita in un gruppo le cui chiavi sono diverse dalle proprie.<br>\r\n    <br>\r\n    Questa funzione non garantisce l'ordinamento delle righe restituite.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Raggruppare la tabella aggiungendo una colonna aggregata [total] contenente la somma dei prezzi (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Inserisce un elenco di righe nella tabella nel percorso specificato.",
        "Documentation.LongDescription": "Restituisce una tabella con l'elenco di righe <code>rows</code>, inserite in <code>table</code> nel percorso specificato <code>offset</code>. Ogni colonna nella riga da inserire deve corrispondere ai tipi di colonna della tabella.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Inserire la riga nella tabella in corrispondenza della posizione 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Inserire due righe nella tabella in corrispondenza della posizione 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Unisce in join le righe di due tabelle che corrispondono in base alle chiavi specificate.",
        "Documentation.LongDescription": "<p>Crea un join delle righe di <code>table1</code> con le righe di <code>table2</code> in base all'uguaglianza dei valori delle colonne chiave selezionate da <code>key1</code> (per <code>table1</code>) e da <code>key2</code> (per <code>table2</code>).</p>\r\n<p>Per impostazione predefinita, viene eseguito un inner join. È possibile includere un set facoltativo di <code>joinKind</code> per specificare il tipo di join. Le opzioni includono:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>È possibile includere un set facoltativo di <code>keyEqualityComparers</code> per specificare la modalità di confronto delle colonne chiave. Questo parametro è attualmente consentito solo per uso interno.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Unisce due tabelle usando una singola colonna chiave.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Esegue il join di due tabelle con nomi di colonna in conflitto usando più colonne chiave.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Restituisce la riga o le righe più grandi mediante i criteri specificati.",
        "Documentation.LongDescription": "Restituisce la riga o le righe più grandi in <code>table</code>, dato <code>comparisonCriteria</code>.\r\n    Dopo aver ordinato le righe, specificare il parametro <code>countOrCondition</code> per filtrare ulteriormente i risultati. Si noti che l'algoritmo di ordinamento non può garantire un risultato ordinato fisso. Il parametro <code>countOrCondition</code> accetta più formati:\r\n    <ul>\r\n        <li> Se viene specificato un numero, viene restituito un elenco di un massimo di <code>countOrCondition</code> elementi in ordine crescente. </li>\r\n        <li> Se viene specificata una condizione, viene restituito un elenco di elementi che soddisfano inizialmente la condizione. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare la riga con il valore più grande nella colonna [a] con la condizione [a] > 0, nella tabella. Le righe vengono ordinate prima dell'applicazione del filtro.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Trovare la riga con il valore più grande nella colonna [a] con la condizione [b] > 0, nella tabella. Le righe vengono ordinate prima dell'applicazione del filtro.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Restituisce la riga o le righe più piccole mediante i criteri specificati.",
        "Documentation.LongDescription": "Restituisce la riga o le righe più piccole in <code>table</code>, dato <code>comparisonCriteria</code>. Dopo aver ordinato le righe, specificare il parametro <code>countOrCondition</code> per filtrare ulteriormente i risultati. Si noti che l'algoritmo di ordinamento non può garantire un risultato ordinato fisso. Il parametro <code>countOrCondition</code> accetta più formati:\r\n    <ul>\r\n        <li> Se viene specificato un numero, viene restituito un elenco di un massimo di <code>countOrCondition</code> elementi in ordine crescente. </li>\r\n        <li> Se viene specificata una condizione, viene restituito un elenco di elementi che soddisfano inizialmente la condizione. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare la riga con il valore più piccolo nella colonna [a] con la condizione [a] < 3, nella tabella. Le righe vengono ordinate prima dell'applicazione del filtro.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Trovare la riga con il valore più piccolo nella colonna [a] con la condizione [b] < 0, nella tabella. Le righe vengono ordinate prima dell'applicazione del filtro.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Esegue un join tra tabelle per le colonne specificate e fornisce il risultato del join in una nuova colonna.",
        "Documentation.LongDescription": "<p>Crea un join delle righe di <code>table1</code> con le righe di <code>table2</code> in base all'uguaglianza dei valori delle colonne chiave selezionate da <code>key1</code> (per <code>table1</code>) e da <code>key2</code> (per <code>table2</code>). I risultati sono immessi nella colonna denominata <code>newColumnName</code>.</p>\r\n<p>Il valore facoltativo <code>joinKind</code> specifica la tipologia di join da eseguire. Per impostazione predefinita, viene eseguito un left outer join se non si specifica un valore facoltativo <code>joinKind</code>.</p>\r\n<p>È possibile includere un set facoltativo di <code>keyEqualityComparers</code> per specificare la modalità di confronto delle colonne chiave. Questa funzionalità è attualmente consentita solo per uso interno.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Unisce due tabelle usando una singola colonna chiave.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Data una coppia di colonne che rappresenta le coppie attributo-valore, ruota i dati nella colonna di attributo nelle intestazioni di colonna.",
        "Documentation.LongDescription": "Data una coppia di colonne che rappresenta le coppie attributo-valore, ruota i dati nella colonna di attributo nelle intestazioni di colonna.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Accettare i valori \"a\", \"b\" e \"c\" nella colonna di attributo della tabella <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> e trasformarli tramite Pivot in una colonna personalizzata.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Accettare i valori \"a\", \"b\" e \"c\" nella colonna di attributo della tabella <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> e trasformarli tramite Pivot in una colonna personalizzata.  L'attributo \"c\" per la chiave \"X\" contiene più valori ad esso associati. Utilizzare pertanto la funzione List.Max per risolvere il conflitto.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Sostituisce l'intervallo di righe specificato con le righe fornite.",
        "Documentation.LongDescription": "Sostituisce il numero specificato di righe <code>count</code> nell'input <code>table</code> con <code>rows</code> a partire da <code>offset</code>. Il parametro <code>rows</code> è un elenco di record.\r\n    <ul>\r\n       <li><code>table</code>: tabella in cui viene eseguita la sostituzione.</li>\r\n       <li><code>offset</code>: numero di righe da ignorare prima della sostituzione.</li>\r\n       <li><code>count</code>: numero di righe da sostituire.</li>\r\n       <li><code>rows</code>: elenco di record di riga da inserire in <code>table</code> alla posizione specificata da <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Sostituire 3 righe a partire dalla posizione 1.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Sostituisce un valore con un altro nelle colonne specificate.",
        "Documentation.LongDescription": "Sostituisce <code>oldValue</code> con <code>newValue</code> nelle colonne specificate di <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sostituire il testo \"goodbye\" con \"world\" nella colonna B, con corrispondenza solo per il valore intero.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Sostituire il testo \"ur\" con \"or\" nella colonna B, con corrispondenza per qualsiasi parte del valore.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Rendi anonimi i nomi dei dipendenti degli Stati Uniti.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Rendi anonime tutte le colonne dei dipendenti degli Stati Uniti.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Divide le colonne specificate in un set di colonne aggiuntive utilizzando la funzione di suddivisione specificata.",
        "Documentation.LongDescription": "Divide le colonne specificate in un set di colonne aggiuntive utilizzando la funzione di suddivisione specificata.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividere la colonna [Name] in due colonne in corrispondenza della lettera \"i\"",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Converte un set di colonne di una tabella in coppie attributo-valore.",
        "Documentation.LongDescription": "Converte un set di colonne di una tabella in coppie attributo-valore, insieme al resto dei valori di ogni riga.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Accettare le colonne \"a\", \"b\" e \"c\" nella tabella <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> e trasformarle tramite UnPivot in coppie attributo-valore.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Converte tutte le colonne ad eccezione di un set specificato in coppie attributo-valore.",
        "Documentation.LongDescription": "Converte tutte le colonne ad eccezione di un set specificato in coppie attributo-valore, combinate con i valori restanti in ogni riga.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Converte tutte le colonne ad eccezione di un set specificato in coppie attributo-valore, combinate con i valori restanti in ogni riga.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Analisi personali di Microsoft Teams",
        "Documentation.LongDescription": "<p>Il connettore Analisi per Teams consente di ottenere informazioni dettagliate sull'utilizzo di Teams. I dati sono disponibili sia per l'attività personale in Teams sia per le attività di Teams di cui si è membri.</p>\r\n<p>I dati sono disponibili per i 90 giorni precedenti.</p>\r\n<p> Per informazioni dettagliate sui tipi di dati disponibili, vedere la documentazione della guida seguente: </p>\r\n<ul>\r\n<li><b>Utilizzo di Teams:</b> https://docs.microsoft.com/it-it/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Attività utente di Teams:</b> https://docs.microsoft.com/it-it/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Consente di immettere i nomi di progetto e organizzazione.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Restituisce una tabella di feed OData offerti da Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Restituisce un formato binario che legge un valore binario.",
        "Documentation.LongDescription": "Restituisce un formato binario che legge un valore binario.  Se <code>length</code> viene specificato, il valore binario conterrà lo stesso numero di byte.  Se <code>length</code> non viene specificato, il valore binario conterrà i byte rimanenti.  <code>length</code> può essere specificato come numero o come formato binario della lunghezza che precede i dati binari.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Restituisce un valore logico basato sul controllo di uguaglianza sui due valori specificati.",
        "Documentation.LongDescription": "Restituisce un valore <code>logico</code> in base al controllo di uguaglianza sui due valori specificati, <code>x</code> e <code>y</code>, utilizzando il <code>x</code> specificato.<code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> è un <code>operatore di confronto</code> usato per controllare il confronto.\r\n        Un operatore di confronto è una funzione che accetta due argomenti e restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale a  o maggiore del secondo.\r\n        Gli operatori di confronto possono essere usati per eseguire confronti senza distinzione tra maiuscole e minuscole oppure confronti in grado di riconoscere le impostazioni cultura e locali.\r\n      </div>\r\n      <div>\r\n        Nel linguaggio delle formule sono disponibili gli operatori di confronto predefiniti seguenti:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto senza distinzione tra maiuscole e minuscole</li>\r\n        <li> <code>Comparer.FromCulture</code>: usato per eseguire un confronto in grado di riconoscere le impostazioni cultura</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Confronta \"1\" e \"A\" tramite le impostazioni locali \"en-US\" per stabilire se i valori sono uguali.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti nel fuso orario locale. Questo valore è fisso e non cambia con le chiamate successive.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetime</code> impostato sulla data e sull'ora correnti del sistema. Questo valore è fisso e non cambia con le chiamate successive, diversamente da DateTime.LocalNow che può restituire valori diversi durante l'esecuzione di un'espressione.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti nel fuso orario locale.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetime</code> impostato sulla data e sull'ora correnti del sistema.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti nel fuso orario locale. Questo valore è fisso e non cambia con le chiamate successive.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetime</code> impostato sulla data e sull'ora correnti del sistema. Il valore restituito contiene le informazioni del fuso orario che rappresentano il fuso orario locale. Questo valore è fisso e non cambia con le chiamate successive, diversamente da DateTimeZone.LocalNow che può restituire valori diversi durante l'esecuzione di un'espressione.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti in UTC (fuso orario GMT). Questo valore è fisso e non cambia con le chiamate successive.",
        "Documentation.LongDescription": "Restituisce la data e l'ora correnti in UTC (fuso orario GMT). Questo valore è fisso e non cambia con le chiamate successive.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti nel fuso orario locale.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetimezone</code> impostato sulla data e sull'ora correnti del sistema.\r\n    Il valore restituito contiene le informazioni del fuso orario che rappresentano il fuso orario locale.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Restituisce la data e l'ora correnti in UTC (fuso orario GMT).",
        "Documentation.LongDescription": "Restituisce la data e l'ora correnti in UTC (fuso orario GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la data e l'ora correnti in UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Restituisce un identificatore opaco per la valutazione attualmente in esecuzione.",
        "Documentation.LongDescription": "Restituisce un identificatore opaco per la valutazione attualmente in esecuzione.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Restituisce un identificatore opaco per correlare le richieste in ingresso con quelle in uscita.",
        "Documentation.LongDescription": "Restituisce un identificatore opaco per correlare le richieste in ingresso con quelle in uscita.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Esegue la scrittura di una voce di traccia, se la traccia è abilitata, e restituisce il valore.",
        "Documentation.LongDescription": "Esegue la scrittura di una traccia <code>message</code>, se la traccia è abilitata, e restituisce <code>value</code>. Un parametro facoltativo, <code>delayed</code>, specifica se ritardare o meno la valutazione di <code>value</code> fino a quando il messaggio non viene tracciato. <code>traceLevel</code> può accettare uno dei valori seguenti:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Traccia il messaggio prima di richiamare la funzione Text.From e restituisce il risultato.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Provider di identità predefinito per l'host corrente.",
        "Documentation.LongDescription": "Provider di identità predefinito per l'host corrente.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Accumula un valore di riepilogo dagli elementi dell'elenco.",
        "Documentation.LongDescription": "Accumula un valore di riepilogo dagli elementi dell'elenco <code>list</code>, usando <code>accumulator</code>.\r\n    È possibile impostare un parametro facoltativo <code>seed</code> del valore di inizializzazione.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Accumula il valore di riepilogo gli elementi dell'elenco {1, 2, 3, 4, 5} utilizzando ((state, current) => state + current ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Genera un elenco di valori datetimezone specificato un valore iniziale, un conteggio e un valore incrementale di durata.",
        "Documentation.LongDescription": "Restituisce un elenco di valori <code>datetimezone</code> di dimensione <code>count</code>, a partire da <code>start</code>. L'incremento specificato <code>step</code> è un valore <code>duration</code> che viene aggiunto a ogni valore.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 10 valori a partire da 5 minuti prima del primo dell'anno (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) con incrementi di 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Genera un elenco di valori datetime specificato un valore iniziale, un conteggio e un valore incrementale di durata.",
        "Documentation.LongDescription": "Restituisce un elenco di valori <code>datetime</code> di dimensione <code>count</code>, a partire da <code>start</code>. L'incremento specificato <code>step</code> è un valore <code>duration</code> che viene aggiunto a ogni valore.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 10 valori a partire da 5 minuti prima del primo dell'anno (#datetime(2011, 12, 31, 23, 55, 0)) con incrementi di 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Genera un elenco di valori date specificato un valore iniziale, un conteggio e un valore incrementale di durata.",
        "Documentation.LongDescription": "Restituisce un elenco di valori <code>date</code> di dimensione <code>count</code>, a partire da <code>start</code>. L'incremento specificato <code>step</code> è un valore <code>duration</code> che viene aggiunto a ogni valore.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 5 valori a partire dalla sera di capodanno (#date(2011, 12, 31)) con incrementi di 1 giorno (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Genera un elenco di valori duration dato un valore iniziale, un conteggio e un valore incrementale di durata.",
        "Documentation.LongDescription": "Restituisce l'elenco dei valori <code>duration</code> <code>count</code> , a partire da <code>start</code> e con incrementi in base al valore <code>duration</code> specificato  <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 5 valori a partire da 1 ora e con incrementi di un'ora.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Genera un elenco di valori.",
        "Documentation.LongDescription": "Genera un elenco di valori usando le funzioni fornite. La funzione <code>initial</code> genera un valore candidato iniziale, che viene quindi testato su <code>condition</code>.\r\n Se il valore candidato viene approvato, viene restituito come parte dell'elenco risultante,  e il successivo valore candidato viene generato passando il valore appena approvato a <code>next</code>.\r\n Quando un valore candidato non corrisponde <code>condition</code>, il processo di generazione dell'elenco si arresta.\r\n È anche possibile specificare un parametro facoltativo, <code>selector</code>, per trasformare gli elementi nell'elenco risultante.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crea un elenco iniziando da dieci, decrementando ripetutamente di uno e assicurandoti che ogni elemento sia maggiore di zero.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generare un elenco di record contenenti x e y, dove x è un valore e y è un elenco. x deve essere meno di 10 e rappresentare il numero di elementi nell'elenco y. Dopo la generazione dell'elenco, restituire solo i valori x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Inserisce i valori in un elenco in corrispondenza dell'indice specificato.",
        "Documentation.LongDescription": "Restituisce un nuovo elenco prodotto dall'inserimento dei valori di <code>values</code> in <code>list</code> in corrispondenza di <code>index</code>. La prima posizione dell'elenco è in corrispondenza dell'indice 0.\r\n      <ul>\r\n        <li><code>list</code>: elenco di destinazione in cui devono essere inseriti i valori.</li>\r\n        <li><code>index</code>: l'indice dell'elenco di destinazione (<code>list</code>) in cui devono essere inseriti i valori. La prima posizione dell'elenco è in corrispondenza dell'indice 0.</li>\r\n        <li><code>values</code>: l'elenco dei valori che devono essere inseriti in <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Inserire l'elenco ({3, 4}) nell'elenco di destinazione ({1, 2, 5}) in corrispondenza dell'indice 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Inserire un elenco con un elenco annidato ({1, {1.1, 1.2}}) in un elenco di destinazione ({2, 3, 4}) in corrispondenza dell'indice 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Sostituisce il numero di conteggio dei valori a partire dalla posizione con i valori di sostituzione.",
        "Documentation.LongDescription": "Sostituisce <code>count</code> valori in <code>list</code> con l'elenco <code>replaceWith</code> a partire dalla posizione specificata <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sostituire {7, 8, 9} nell'elenco {1, 2, 7, 8, 9, 5} con {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Ricerca in un elenco il valore specificato e lo sostituisce.",
        "Documentation.LongDescription": "Ricerca nell'elenco di valori <code>list</code> il valore <code>oldValue</code> e sostituisce ogni occorrenza con il valore di sostituzione <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sostituire tutti i valori \"a\" nell'elenco {\"a\", \"B\", \"a\", \"a\"} con \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Genera un elenco di valori time specificato un valore iniziale, un conteggio e un valore incrementale di durata.",
        "Documentation.LongDescription": "Restituisce un elenco di valori <code>time</code> di dimensione <code>count</code>, a partire da <code>start</code>. L'incremento specificato <code>step</code> è un valore <code>duration</code> che viene aggiunto a ogni valore.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 4 valori a partire da mezzogiorno (#time(12, 0, 0)) con incrementi di un'ora (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Restituisce l'elenco degli elementi che vengono trasformati dall'elenco di input mediante le funzioni specificate.",
        "Documentation.LongDescription": "Restituisce un elenco i cui elementi vengono proiettati dall'elenco di input.<br>\r\n    <br>\r\n    La funzione <code>collectionTransform</code> trasforma ogni elemento in un elenco intermedio e la funzione <code>resultTransform</code> riceve l'elemento originale e un elemento dall'elenco intermedio per costruire il risultato finale.<br>\r\n    <br>\r\n    La funzione <code>collectionTransform</code> ha la firma <code>(x as any) come elenco => ...</code>,  dove <code>x</code> è un elemento in <code>list</code>.\r\n    La funzione <code>resultTransform</code>  proietta la forma del risultato e ha la firma <code>(x come qualsiasi, y come qualsiasi) come qualsiasi =>... </code>, dove <code>x</code> è un elemento di <code>list</code> e <code>y</code> è un elemento dell'elenco generato passando <code>x</code> a <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Appiattisci un elenco di persone e dei loro animali domestici.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Restituisce un numero casuale.",
        "Documentation.LongDescription": "Restituisce un numero casuale compreso tra 0 e 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Ottenere un numero casuale.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Aggiunge un campo a un record.",
        "Documentation.LongDescription": "Aggiunge un campo a record <code>record</code>, corrispondente al nome del campo <code>fieldName</code> e al valore <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere il campo Address al record.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Sostituisce il testo nell'input specificato.",
        "Documentation.LongDescription": "Sostituisce il testo <code>old</code> nell'originale <code>text</code> con il testo <code>new</code>. Questa funzione di sostituzione può essere utilizzata in <code>List.ReplaceValue</code> e <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Sostituire il testo \"hE\" con \"He\" nella stringa \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Sostituisce i valori nell'input specificato.",
        "Documentation.LongDescription": "Sostituisce il valore <code>old</code> nell'originale <code>value</code> con il valore <code>new</code>. Questa funzione di sostituzione può essere utilizzata in <code>List.ReplaceValue</code> e <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Sostituire il valore 11 con il valore 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Restituisce un risultato JSON dall'API Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Effettua una chiamata all'API REST Smartsheet 2.0 all'endpoint specificato e restituisce i risultati come un record JSON.",
        "Documentation.Examples": [
          {
            "Description": "Esegue il pull dei dati relativi ai fogli dall'endpoint API Smartsheet con argomenti aggiuntivi specificati",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Tabella con le informazioni sui fogli come restituita dall'API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Restituisce una funzione che non effettua la suddivisione e restituisce il relativo argomento come elenco di un singolo elemento.",
        "Documentation.LongDescription": "Restituisce una funzione che non effettua la suddivisione e restituisce il relativo argomento come elenco di un singolo elemento.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza dello spazio vuoto.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza dello spazio vuoto.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divide l'input in base a spazi vuoti, trattando le virgolette come qualsiasi altro carattere.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Partiziona la tabella in un elenco di tabelle in base al numero di gruppi e alla colonna specificati.",
        "Documentation.LongDescription": "Partiziona <code>table</code> in un elenco di <code>groups</code> tabelle in base al valore di <code>column</code> e alla funzione <code>hash</code>.\r\n    La funzione <code>hash</code> viene applicata al valore della riga <code>column</code> per ottenere un valore hash per la riga. Il modulo del valore hash <code>groups</code> determina la tabella restituita in cui verrà inserita la riga.\r\n    <ul>\r\n       <li><code>table</code>: tabella da partizionare.</li>\r\n       <li><code>column</code>: colonna di cui eseguire l'hashing per determinare la tabella restituita in cui si trova la riga.</li>\r\n       <li><code>groups</code>: numero di tabelle in cui verrà partizionata la tabella di input.</li>\r\n       <li><code>hash</code>: funzione applicata per ottenere un valore hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Partizionare la tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> in 2 tabelle nella colonna [a], utilizzando il valore delle colonne come funzione hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Restituisce la porzione di <code>text</code> tra gli oggetti <code>startDelimiter</code> e <code>endDelimiter</code> specificati.\r\n    Un valore numerico <code>startIndex</code> facoltativo indica quale occorrenza di <code>startDelimiter</code> prendere in considerazione.\r\n    Un elenco <code>startIndex</code> facoltativo indica quale occorrenza di <code>startDelimiter</code> prendere in considerazione e se eseguire l'indicizzazione dall'inizio o dalla fine dell'input.\r\n    <code>endIndex</code> è simile, ma l'indicizzazione viene eseguita rispetto a <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ottiene la porzione di \"111 (222) 333 (444)\" tra la (prima) parentesi aperta e la (prima) parentesi chiusa che la segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Ottiene la porzione di \"111 (222) 333 (444)\" tra la seconda parentesi aperta e la prima parentesi chiusa che la segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Ottiene la porzione di \"111 (222) 333 (444)\" tra la seconda parentesi aperta a partire dalla fine e la seconda parentesi chiusa che la segue.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Inserisce un valore di testo in un altro nella posizione specificata.",
        "Documentation.LongDescription": "Restituisce il risultato dell'inserimento del valore di testo <code>newText</code> nel valore di testo <code>text</code> nella posizione <code>offset</code>. Le posizioni iniziano dal numero 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Inserire \"C\" tra \"B\" e \"D\" in ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Restituisce un nuovo identificatore univoco globale (GUID) casuale.",
        "Documentation.LongDescription": "Restituisce un nuovo identificatore univoco globale (GUID) casuale.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Sostituisce tutte le occorrenze della sottostringa specificata nel testo.",
        "Documentation.LongDescription": "Restituisce il risultato della sostituzione di tutte le occorrenze del valore di testo <code>old</code> nel valore di testo <code>text</code> con il valore di testo <code>new</code>. Per questa funzione viene applicata la distinzione tra maiuscole e minuscole.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Sostituire ogni occorrenza di \"the\" in una frase con \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Rimuove un intervallo di caratteri e inserisce un nuovo valore nella posizione specificata.",
        "Documentation.LongDescription": "Restituisce il risultato della rimozione del numero di caratteri <code>count</code> dal valore di testo <code>text</code> a partire dalla posizione <code>offset</code> e quindi dell'inserimento del valore di testo <code>newText</code> nella stessa posizione in <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Sostituire un singolo carattere nella posizione 2 nel valore di testo \"ABGF\" con il nuovo valore di testo \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Aggiunge una chiave al tipo di tabella specificato.",
        "Documentation.LongDescription": "Aggiunge una chiave al tipo di tabella specificato.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Restituisce un elenco di identità accettate dalla condizione.",
        "Documentation.LongDescription": "<p>Usando l'elemento <code>identityProvider</code> specificato, converte <code>condition</code> nell'elenco di identità per le quali <code>condition</code> restituisce <code>true</code> in tutti i contesti di autorizzazione con <code>identityProvider</code> come provider di identità. Viene restituito un errore se non è possibile convertire <code>condition</code> in un elenco di identità, ad esempio se <code>condition</code> consulta attributi diversi dalle identità di utenti o gruppi per prendere una decisione.</p>\r\n    <p>Tenere presente che l'elenco di identità rappresenta le identità così come vengono visualizzate in <code>condition</code> senza eseguire alcuna normalizzazione (come l'espansione gruppo).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Comprime un valore binario usando il tipo di compressione specificato.",
        "Documentation.LongDescription": "Comprime un valore binario usando il tipo di compressione specificato. Il risultato della chiamata è una copia compressa dell'input. I tipi di compressione includono:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Comprimere il valore binario.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Decomprime un valore binario utilizzando il tipo di compressione specificato.",
        "Documentation.LongDescription": "Decomprime un valore binario usando il tipo di compressione specificato. Il risultato della chiamata è una copia decompressa dell'input. I tipi di compressione includono:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decomprimere il valore binario.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Restituisce un subset del valore binario a partire da un offset.",
        "Documentation.LongDescription": "Restituisce un subset del valore binario a partire dall'offset <code>binary</code>. Il parametro facoltativo <code>offset</code> imposta la lunghezza massima del subset.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Restituisce un subset del valore binario a partire dall'offset 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Restituisce un subset di lunghezza 2 dall'offset 6 del valore binario.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Divide il file binario specificato in un elenco di file binari usando le dimensioni di pagina specificate.",
        "Documentation.LongDescription": "Divide <code>binary</code> in un elenco di file binari in cui il primo elemento dell'elenco di output è un file binario contenente i primi <code>pageSize</code> bye del\r\n    file binario di origine, l'elemento successivo dell'elenco di output è un file binario contenente i successivi <code>pageSize</code> byte del file binario di origine e così via.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Crea o estende un binario con gestori definiti dall'utente per operazioni di query e azione.",
        "Documentation.LongDescription": "<p>Restituisce una vista di <code>binary</code> in cui vengono usate le funzioni specificate in<code>handlers</code> anziché il comportamento predefinito di un'operazione quando l'operazione è applicata alla vista.</p>\r\n<p>Se<code>binary</code> viene specificato, tutte le funzioni del gestore sono facoltative. Se <code>binary</code> non viene specificato, è richiesta la funzione di gestore <code>GetStream</code>. Se una funzione di gestore non è specificata per un'operazione, a <code>binary</code> viene applicato il comportamento predefinito dell'operazione (tranne nel caso di <code>GetExpression</code>). </p>\r\n<p>Le funzioni del gestore devono restituire un valore equivalente a livello semantico al risultato dell'applicazione dell'operazione su <code>binary</code> (o della vista risultante nel caso di <code>GetExpression</code>).</p>\r\n<p>Se una funzione del gestore genera un errore, alla vista viene applicato il comportamento predefinito dell'operazione.</p>\r\n<p>È possibile usare <code>Binary.View</code> per implementare la riduzione per un'origine dati, ovvero la conversione di query M in operazioni specifiche dell'origine (ad esempio, per scaricare una sezione di un file).</p>\r\n<p>Per una descrizione completa di <code>Binary.View</code>, vedere la documentazione pubblicata.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Creare una visualizzazione di base che non richieda l'accesso ai dati per determinare la lunghezza.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Restituisce un formato binario con l'ordine di byte specificato da una funzione.",
        "Documentation.LongDescription": "Restituisce un formato binario con l'ordine di byte specificato da <code>binaryFormat</code>.  Ordine di byte predefinito: <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Restituisce un formato binario che sceglie il formato binario successivo in base a un valore che è già stato letto.",
        "Documentation.LongDescription": "Restituisce un formato binario che sceglie il formato binario successivo in base a un valore che è già stato letto.  Il valore del formato binario prodotto dalla funzione opera in fasi:<ul>\r\n<li>Il formato binario specificato dal parametro <code>binaryFormat</code> viene utilizzato per leggere un valore.</li>\r\n<li>Il valore viene passato alla funzione di scelta specificata dal parametro <code>chooseFunction</code>.</li>\r\n<li>La funzione di scelta controlla il valore e restituisce un secondo formato binario.</li>\r\n<li>Il secondo formato binario viene utilizzato per leggere un secondo valore.</li>\r\n<li>Se la funzione di combinazione viene specificata, il primo e il secondo valore vengono passati alla funzione di combinazione e viene restituito il valore risultante.</li>\r\n<li>Se la funzione di combinazione non viene specificata, viene restituito il secondo valore.</li>\r\n<li>Il secondo valore viene restituito.</li>\r\n</ul>Il parametro facoltativo <code>type</code> specifica il tipo di formato binario che verrà restituito dalla funzione di scelta.  È possibile specificare <code>type any</code>, <code>type list</code> o <code>type binary</code>.  Se il parametro <code>type</code> non è specificato, viene utilizzato <code>type any</code>.   Se si utilizza <code>type list</code> o <code>type binary</code>, il sistema può essere in grado di restituire un valore <code>binary</code> o <code>list</code> di flusso anziché uno memorizzato nel buffer, riducendo in tal modo la quantità di memoria necessaria per leggere il formato.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Leggere un elenco di byte in cui il numero di elementi è determinato dal primo byte.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Leggere un elenco di byte in cui il numero di elementi è determinato dal primo byte e conservare il primo byte letto.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Leggere un elenco di byte in cui il numero di elementi è determinato dal primo byte utilizzando un elenco di flusso.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Restituisce un formato binario che legge un gruppo di elementi.",
        "Documentation.LongDescription": "I parametri sono i seguenti:\r\n<ul>\r\n<li> Il parametro <code>binaryFormat</code> specifica il formato binario del valore di chiave.</li>\r\n<li> Il parametro <code>group</code> include informazioni sul gruppo di elementi noti.</li>\r\n<li>Il parametro facoltativo <code>extra</code> può essere usato per specificare una funzione che restituisce un valore di formato binario per il valore che segue qualsiasi chiave imprevista. Se il parametro <code>extra</code> non è specificato, verrà generato un errore se sono presenti valori di chiave imprevisti.</li>\r\n</ul>\r\nIl parametro <code>group</code> specifica un elenco di definizioni di elementi. Ogni definizione di elemento è un elenco, contenente da 3 a 5 valori, come segue:\r\n<ul>\r\n<li>Valore di chiave. Valore della chiave corrispondente all'elemento. Deve essere univoco all'interno del set di elementi.</li>\r\n<li>Formato dell'elemento. Formato binario corrispondente al valore dell'elemento. In tal modo ogni elemento ha un formato diverso. </li>\r\n<li>Occorrenza dell'elemento. Valore <code>BinaryOccurrence.Type</code> che indica quante volte si prevede che l'elemento sia presente nel gruppo. Gli elementi obbligatori non presenti causano un errore. Gli elementi duplicati obbligatori o facoltativi vengono gestiti come valori di chiave imprevisti.</li>\r\n<li>Valore di elemento predefinito (facoltativo). Se il valore di elemento predefinito è presente nell'elenco di definizione di elementi e non è Null, verrà usato al posto del valore predefinito. Il valore predefinito degli elementi ripetuti o facoltativi è Null e l'impostazione predefinita per i valori ripetuti è un elenco vuoto { }.</li>\r\n<li>Trasformazione del valore dell'elemento (facoltativo). Se la funzione di trasformazione dell'elemento è presente nell'elenco di definizione degli elementi e non è Null verrà chiamata per trasformare il valore dell'elemento prima che venga restituito. La funzione di trasformazione è chiamata solo se l'elemento è presente nell'input e non verrà chiamata mai con il valore predefinito. </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Di seguito si presuppone un valore chiave a byte singolo, con 4 elementi previsti nel gruppo, tutti con un byte di dati dopo la chiave.  Gli elementi sono presenti nell'input come segue:\r\n<ul>\r\n<li>La chiave 1 è obbligatoria ed è presente con valore 11.</li>\r\n<li>La chiave 2 si ripete ed è presente due volte con valore 22 restituendo un valore di { 22, 22 }.</li>\r\n<li>La chiave 3 è facoltativa, non è presente e restituisce un valore Null.</li>\r\n<li>La chiave 4 si ripete, ma non è presente e restituisce un valore di { }.</li>\r\n<li>La chiave 5 non fa parte del gruppo, ma è presente una volta con valore 55.  La funzione aggiuntiva è chiamata con il valore di chiave 5 e restituisce il formato corrispondente al valore (BinaryFormat.Byte).  Il valore 55 viene letto e rimosso.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Nel seguente esempio viene illustrata la trasformazione del valore dell'elemento e il valore predefinito dell'elemento.   L'elemento ripetuto con chiave 1 somma l'elenco dei valori letti utilizzando List.Sum.  L'elemento facoltativo con chiave 2 contiene un valore predefinito di 123 anziché Null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Restituisce un formato binario che limita la quantità di dati che possono essere letti.",
        "Documentation.LongDescription": "Restituisce un formato binario che limita la quantità di dati che possono essere letti.  <code>BinaryFormat.List</code> e <code>BinaryFormat.Binary</code> possono essere utilizzati per leggere fino alla fine dei dati.  <code>BinaryFormat.Length</code> può essere utilizzato per limitare il numero di byte che vengono letti.  Il parametro <code>binaryFormat</code> specifica il formato binario da limitare.  Il parametro <code>length</code> specifica il numero di byte da leggere.  Il parametro <code>length</code> può essere un valore numerico o un valore di formato binario che specifica il formato del valore della lunghezza presente che precede il valore letto.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Limitare a 2 il numero di byte letti quando si legge un elenco di byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Consente di limitare il numero di byte letti nell'ambito della lettura di un elenco di byte al valore di byte che precede l'elenco.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Restituisce un formato binario che trasformerà i valori letti da un altro formato binario.",
        "Documentation.LongDescription": "Restituisce un formato binario che trasformerà i valori letti da un altro formato binario.  Il parametro <code>binaryFormat</code> specifica il formato binario che verrà utilizzato per leggere il valore.  <code>function</code> viene richiamato con il valore letto e restituisce il valore trasformato.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Leggere un byte e aggiungerne uno ad esso.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Restituisce una funzione operatore di confronto che usa regole ordinali per confrontare i valori.",
        "Documentation.LongDescription": "Restituisce una funzione di confronto che utilizza regole ordinali per confrontare i valori specificati <code>x</code> e <code>y</code>.<br>\r\n        <br>\r\n        Una funzione di confronto accetta due argomenti e restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale o maggiore del secondo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Tramite le regole ordinali, confronta se \"encyclopædia\" e \"encyclopaedia\" sono equivalenti. Si noti che usando <code>Comparer.FromCulture(\"en-US\")</code>, questi sono equivalenti. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Restituisce una funzione operatore di confronto senza distinzione tra maiuscole e minuscole che usa regole ordinali per confrontare i valori.",
        "Documentation.LongDescription": "Restituisce una funzione di confronto senza distinzione tra maiuscole e minuscole che utilizza regole ordinali per confrontare i valori specificati <code>x</code> e <code>y</code>.<br>\r\n        <br>\r\n        Una funzione di confronto accetta due argomenti e restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale o maggiore del secondo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Usando le regole di confronto ordinali senza distinzione tra maiuscole e minuscole, confrontare \"Abc\" con \"abc\". Notare che usando <code>Comparer.Ordinal</code>\"Abc\" è minore di \"abc\". ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Restituisce una proprietà di un attributo dimensione.",
        "Documentation.LongDescription": "Restituisce la proprietà <code>propertyName</code> dell'attributo dimensione <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Restituisce una proprietà di una misura (proprietà della cella).",
        "Documentation.LongDescription": "Restituisce la proprietà <code>propertyName</code> della misura <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Origine query Databricks SQL",
        "Documentation.LongDescription": "Definire un'origine dati Databricks per l'esecuzione di query SQL"
      },
      "ReturnType": "Query Databricks SQL",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Origine query Databricks SQL",
        "Documentation.LongDescription": "Definire un'origine dati Databricks per l'esecuzione di query SQL"
      },
      "ReturnType": "Query Databricks SQL",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Aggiunge i giorni specificati alla data.",
        "Documentation.LongDescription": "Restituisce l'elemento <code>date</code>, <code>datetime</code> o <code>datetimezone</code> risultante dall'aggiunta di <code>numberOfDays</code> giorni al valore <code>dateTime</code> di <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: il valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a cui vengono aggiunti i giorni.</li>\r\n      <li><code>numberOfDays</code>: il numero di giorni da aggiungere.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 5 giorni al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Aggiunge i mesi specificati alla data.",
        "Documentation.LongDescription": "Restituisce l'elemento <code>date</code>, <code>datetime</code> o <code>datetimezone</code> risultante dall'aggiunta di <code>numberOfMonths</code> mesi al valore <code>dateTime</code> di <code>datetime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a cui vengono aggiunti i mesi.</li>\r\n        <li><code>numberOfMonths</code>: numero di mesi da aggiungere.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 5 mesi al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Aggiungere 18 mesi al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011 e l'ora 08.15.22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Aggiunge i trimestri specificati alla data.",
        "Documentation.LongDescription": "Restituisce l'elemento <code>date</code>, <code>datetime</code> o <code>datetimezone</code> risultante dall'aggiunta di <code>numberOfQuarters</code> trimestri al valore <code>dateTime</code> di <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: il valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a cui vengono aggiunti i trimestri.</li>\r\n      <li><code>numberOfQuarters</code>: il numero di trimestri da aggiungere.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 1 trimestre al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Aggiunge le settimane specificate alla data.",
        "Documentation.LongDescription": "Restituisce l'elemento <code>date</code>, <code>datetime</code> o <code>datetimezone</code> risultante dall'aggiunta di <code>numberOfWeeks</code> settimane al valore <code>dateTime</code> di <code>datetime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: il valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a cui vengono aggiunte le settimane.</li>\r\n      <li><code>numberOfWeeks</code>: il numero di settimane da aggiungere.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 2 settimane al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Aggiunge gli anni specificati alla data.",
        "Documentation.LongDescription": "Restituisce l'elemento <code>date</code>, <code>datetime</code> o <code>datetimezone</code> risultante dall'aggiunta di <code>numberOfYears</code> al valore <code>dateTime</code> di <code>datetime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a cui vengono aggiunti gli anni.</li>\r\n        <li><code>numberOfYears</code>: numero di anni da aggiungere.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 4 anni al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Aggiungere 10 anni al valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011 e l'ora 08.15.22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di giorni successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di giorni successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>days</code>: numero di giorni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il giorno dopo l'ora di sistema corrente rientra nei due giorni successivi.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di mesi successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di mesi successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>months</code>: numero di mesi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il mese dopo l'ora di sistema corrente rientra nei due mesi successivi.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di trimestri successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di trimestri successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>quarters</code>: numero di trimestri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il trimestre dopo l'ora di sistema corrente rientra nei due trimestri successivi.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di settimane successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di settimane successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>weeks</code>: numero di settimane.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se la settimana dopo l'ora di sistema corrente rientra nelle due settimane successive.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di anni successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di anni successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>years</code>: numero di anni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'anno dopo l'ora di sistema corrente rientra nei due anni successivi.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di giorni precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di giorni precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>days</code>: numero di giorni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il giorno prima dell'ora di sistema corrente rientra nei due giorni precedenti.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di mesi precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di mesi precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>months</code>: numero di mesi.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il mese prima dell'ora di sistema corrente rientra nei due mesi precedenti.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di trimestri precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di trimestri precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>quarters</code>: numero di trimestri.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il trimestre prima dell'ora di sistema corrente rientra nei due trimestri precedenti.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di settimane precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di settimane precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>weeks</code>: numero di settimane.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se la settimana prima dell'ora di sistema corrente rientra nelle due settimane precedenti.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Indica se questo valore date rientra nel numero di anni precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di anni precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>years</code>: numero di anni.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'anno prima dell'ora di sistema corrente rientra nei due anni precedenti.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Aggiunge informazioni sul fuso orario al valore datetime.",
        "Documentation.LongDescription": "Aggiunge informazioni sul fuso orario al valore <code>dateTime</code>. Le informazioni sul fuso orario includono <code>timezoneHours</code> e facoltativamente <code>timezoneMinutes</code>, che specificano l'offset desiderato dall'ora UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Impostare il fuso orario su UTC+7:30 (7 ore e 30 minuti dopo l'ORA UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di ore successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di ore successive, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>hours</code>: numero di ore.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora dopo l'ora di sistema corrente rientra nelle due ore successive.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di minuti successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di minuti successivi, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>minutes</code>: numero di minuti.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il minuto dopo l'ora di sistema corrente rientra nei due minuti successivi.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di secondi successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di secondi successivi, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>seconds</code>: numero di secondi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il secondo dopo l'ora di sistema corrente rientra nei due secondi successivi.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di ore precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di ore precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>hours</code>: numero di ore.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora prima dell'ora di sistema corrente rientra nelle due ore precedenti.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di minuti precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di minuti precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>minutes</code>: numero di minuti.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il minuto prima dell'ora di sistema corrente rientra nei due minuti precedenti.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Indica se questo valore datetime rientra nel numero di secondi precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel numero di secondi precedenti, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      <li><code>seconds</code>: numero di secondi.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il secondo prima dell'ora di sistema corrente rientra nelle due secondi precedenti.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Modifica il fuso orario del valore.",
        "Documentation.LongDescription": "Modifica le informazioni del fuso orario nel valore <code>dateTimeZone</code> di datetimezone impostando le nuove informazioni del fuso orario specificate da <code>timezoneHours</code> e facoltativamente <code>timezoneMinutes</code>.\r\n    Se <code>dateTimeZone</code> non è un componente del fuso orario, viene generata un'eccezione.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificare le informazioni del fuso orario per #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) su 8 ore.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Modificare le informazioni del fuso orario per #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) su -30 minuti.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Accede a un valore per nome in un mashup incorporato.",
        "Documentation.LongDescription": "Accede a un valore per nome in un mashup incorporato.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Crea una funzione con una firma di parametro specifica su una funzione che accetta un singolo argomento di elenco",
        "Documentation.LongDescription": "Accetta una funzione unaria <code>function</code> e crea una nuova funzione con tipo <code>functionType</code> che costruisce un elenco dagli argomenti e la passa a <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Converte List.Sum in una funzione a due argomenti i cui argomenti vengono aggiunti insieme",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Converte una funzione che accetta un elenco in una funzione a due argomenti",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Richiama la funzione specificata",
        "Documentation.LongDescription": "Richiama la funzione specificata utilizzando l'elenco di argomenti specificato e restituisce il risultato.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Invokes Record.FieldNames con un argomento [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Richiama la funzione specificata una volta trascorsa la durata specificata.",
        "Documentation.LongDescription": "Restituisce il risultato della richiamata di <code>function</code> una volta trascorsa la durata <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Crea una funzione scalare in aggiunta a una funzione vettoriale, inviando un batch più chiamate.",
        "Documentation.LongDescription": "<p>Restituisce una funzione scalare di tipo <code>scalarFunctionType</code> che richiama <code>vectorFunction</code> con una singola riga di argomenti e restituisce il relativo output singolo. Quando inoltre la funzione scalare viene applicata ripetutamente per ogni riga di una tabella di input, come in Table.AddColumn, la funzione <code>vectorFunction</code> verrà applicata una sola volta per tutti gli input.</p>\r\n<p>A <code>vectorFunction</code> verrà passata una tabella le cui colonne corrispondono al nome e alla posizione dei parametri di <code>scalarFunctionType</code>. Ogni riga di questa tabella contiene gli argomenti per una chiamata alla funzione scalare, in cui le colonne corrispondono ai parametri di <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> deve restituire un elenco della stessa lunghezza della tabella di input, il cui elemento in ogni posizione deve essere uguale al risultato della valutazione della funzione scalare nella riga di input della stessa posizione.</p>\r\n<p>È previsto lo streaming della tabella di input, di conseguenza <code>vectorFunction</code> dovrebbe eseguire lo streaming dell'output non appena riceve l'input e usare quindi un solo blocco di input alla volta. In particolare, <code>vectorFunction</code> non deve enumerare la relativa tabella di input più di una volta.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Crea un record che rappresenta un punto geografico dalle parti.",
        "Documentation.LongDescription": "Crea un record che rappresenta un punto geografico dalle relative parti costituenti, come longitudine, latitudine e, se presenti, elevazione (Z) e misura (M). È possibile specificare un identificatore di riferimento spaziale (SRID) facoltativo, se diverso dal valore predefinito (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Crea un record che rappresenta un punto geometrico dalle parti.",
        "Documentation.LongDescription": "Crea un record che rappresenta un punto geometrico dalle relative parti costituenti, come coordinata X, coordinata Y e, se presenti, coordinata Z e misura (M). È possibile specificare un identificatore di riferimento spaziale (SRID) facoltativo, se diverso dal valore predefinito (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Crea un'identità.",
        "Documentation.LongDescription": "Crea un'identità.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Determina se un'identità fa parte di una raccolta di identità.",
        "Documentation.LongDescription": "Determina se un'identità fa parte di una raccolta di identità.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Restituisce un elenco formato da tutti gli elementi con offset dispari di un elenco.",
        "Documentation.LongDescription": "Restituisce un elenco formato da tutti gli elementi con offset dispari di un elenco. Accetta e ignora i valori dell'elenco <code>list</code> a seconda dei parametri.\r\n    <ul>\r\n    <li><code>count</code>: specifica il numero di valori che vengono ignorati ogni volta.</li>\r\n    <li><code>repeatInterval</code>: un intervallo di ripetizione facoltativo per indicare quanti valori vengono aggiunti tra i valori ignorati.</li>\r\n    <li><code>offset</code>: parametro di offset di opzione per iniziare a ignorare i valori in corrispondenza dell'offset iniziale.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1..10} che ignori il primo numero.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Creare un elenco da {1..10} che ignori un numero sì e uno no.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Creare un elenco da {1..10} che inizia in corrispondenza di 1 e ignora un numero sì e uno no.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Creare un elenco da {1..10} che inizia in corrispondenza di 1, salta un valore, mantiene due valori e così via.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Indica se l'elenco contiene il valore.",
        "Documentation.LongDescription": "Indica se l'elenco <code>list</code> contiene il valore <code>value</code>.\r\n    Restituisce true se il valore viene trovato nell'elenco, in caso contrario false. È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Indica se un elenco include tutti i valori di un altro elenco.",
        "Documentation.LongDescription": "Indica se l'elenco <code>list</code> include tutti i valori dell'altro elenco <code>values</code>.\r\n    Restituisce true se il valore viene trovato nell'elenco, in caso contrario false. È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 3 e 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 5 e 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Indica se un elenco include uno dei valori di un altro elenco.",
        "Documentation.LongDescription": "Indica se l'elenco <code>list</code> include uno dei valori dell'altro elenco <code>values</code>.\r\n        Restituisce true se il valore viene trovato nell'elenco, in caso contrario false. È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 3 o 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 4, 5} contiene 6 o 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Restituisce la covarianza tra due elenchi di numeri.",
        "Documentation.LongDescription": "Restituisce la covarianza tra due elenchi, <code>numberList1</code> e <code>numberList2</code>. <code>numberList1</code> e <code>numberList2</code> devono contenere lo stesso numero di valori <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Calcolare la covarianza tra due elenchi.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Restituisce la differenza dei due elenchi specificati.",
        "Documentation.LongDescription": "Restituisce gli elementi dell'elenco <code>list1</code> che non sono presenti nell'elenco <code>list2</code>. I valori duplicati sono supportati.\r\n    È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare gli elementi dell'elenco {1, 2, 3, 4, 5} che non sono presenti in {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Trovare gli elementi dell'elenco {1, 2} che non sono presenti in {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Restituisce un elenco di valori (compresi i campi di record) contenenti il testo specificato.",
        "Documentation.LongDescription": "Restituisce un elenco di valori dall'elenco <code>list</code> che contiene il valore <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare i valori di testo nell'elenco {\"a\", \"b\", \"ab\"} che corrispondono ad \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Restituisce il primo set di elementi dell'elenco specificando quanti elementi devono essere restituiti o una condizione idonea.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Se viene specificato un numero, indica il numero massimo di elementi restituiti. </li>\r\n  <li>Se viene specificata una condizione, vengono restituiti tutti gli elementi che soddisfano inizialmente la condizione. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare i valori iniziali dell'elenco {3, 4, 5, -1, 7, 8, 2} che sono maggiori di 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Restituisce true se la funzione di condizione viene soddisfatta da tutti i valori dell'elenco.",
        "Documentation.LongDescription": "Restituisce <code>true</code> se la funzione di condizione <code>condition</code> viene soddisfatta da tutti i valori dell'elenco <code>list</code>; in caso contrario <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determina se tutti i valori dell'elenco {11, 12, 13} sono maggiori di 0.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determina se tutti i valori dell'elenco {1, 2, 3} sono maggiori di 0.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Restituisce true se la funzione di condizione viene soddisfatta da qualsiasi valore.",
        "Documentation.LongDescription": "Restituisce <code>true</code> se la funzione di condizione <code>condition</code> viene soddisfatta da uno dei valori dell'elenco <code>list</code>; in caso contrario <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Verificare se uno dei valori dell'elenco {9, 10, 11} è maggiore di 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Verificare se uno dei valori dell'elenco {1, 2, 3} è maggiore di 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Restituisce i valori massimi dell'elenco. È necessario specificare il numero di valori da restituire o una condizione di filtro.",
        "Documentation.LongDescription": "Restituisce i valori massimi dell'elenco <code>list</code>.\r\n    Dopo aver ordinato le righe, è possibile specificare parametri facoltativi per filtrare ulteriormente i risultati. Il parametro facoltativo <code>countOrCondition</code> specifica il numero di valori da restituire o una condizione di filtro. Il parametro facoltativo <code>comparisonCriteria</code> specifica come confrontare i valori nell'elenco.\r\n <ul>\r\n        <li> <code>list</code>: elenco dei valori.</li>\r\n        <li> <code>countOrCondition</code>: se viene specificato un numero, viene restituito un elenco di un massimo di <code>countOrCondition</code> elementi in ordine crescente. Se viene specificata una condizione, viene restituito un elenco di elementi che soddisfano inizialmente la condizione. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi.</li>\r\n<li><code>comparisonCriteria</code>: <i>[facoltativo]</i> è possibile specificare un valore facoltativo <code>comparisonCriteria</code> per determinare come confrontare gli elementi nell'elenco. Se questo parametro è Null, si usa l'operatore di confronto predefinito.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Restituisce i valori minimi dell'elenco. È possibile specificare il numero di valori da restituire o una condizione di filtro.",
        "Documentation.LongDescription": "Restituisce i valori minimi dell'elenco <code>list</code>.\r\n    Il parametro <code>countOrCondition</code> specifica il numero di valori da restituire o una condizione di filtro. Il parametro facoltativo <code>comparisonCriteria</code> specifica come confrontare i valori nell'elenco.\r\n <ul>\r\n        <li> <code>list</code>: elenco dei valori.</li>\r\n        <li> <code>countOrCondition</code>: se viene specificato un numero, viene restituito un elenco di un massimo di <code>countOrCondition</code> elementi in ordine crescente. Se viene specificata una condizione, viene restituito un elenco di elementi che soddisfano inizialmente la condizione. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi. Se questo parametro è Null viene restituito il valore singolo più piccolo dell'elenco.</li>\r\n<li><code>comparisonCriteria</code>: <i>[facoltativo]</i> è possibile specificare un valore facoltativo <code>comparisonCriteria</code> per determinare come confrontare gli elementi nell'elenco. Se questo parametro è Null, si usa l'operatore di confronto predefinito.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare i 5 valori più piccoli dell'elenco <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Restituisce un elenco di numeri corrispondenti a un valore iniziale, un conteggio e un valore incrementale facoltativo.",
        "Documentation.LongDescription": "Restituisce un elenco di numeri corrispondenti a un valore iniziale, un conteggio e un valore incrementale facoltativo. Il valore incrementale predefinito è 1.\r\n<ul>\r\n   <li><code>start</code>: il valore iniziale dell'elenco.</li>\r\n   <li><code>count</code>: il numero di valori da creare.</li>\r\n   <li><code>increment</code>: <i>[Facoltativo]</i> il valore incrementale da utilizzare. Se omesso, i valori vengono incrementati di 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Generare un elenco di 10 numeri consecutivi partendo da 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Generare un elenco di 10 numeri partendo da 1, con incremento di 2 per ogni numero successivo.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Restituisce uno o più percentili del campione corrispondenti alle probabilità specificate.",
        "Documentation.LongDescription": "Restituisce uno o più percentili del campione dell'elenco <code>list</code>. Se il valore <code>percentiles</code> è un numero compreso tra 0,0 e 1,0, verrà considerato come un percentile e il risultato sarà\r\n    un unico valore corrispondente a tale probabilità. Se il valore <code>percentiles</code> è un elenco di numeri con valori compresi tra 0,0 e 1,0, il risultato sarà un elenco di percentili\r\n    corrispondenti alla probabilità di input. L'opzione PercentileMode in <code>options</code> può essere usata dagli utenti avanzati per scegliere un metodo di interpolazione più specifico, ma è sconsigliata per la maggior parte degli utilizzi.\r\n    I simboli predefiniti <code>PercentileMode.ExcelInc</code> e <code>PercentileMode.ExcelExc</code> corrispondono ai metodi di interpolazione usati dalle funzioni Excel\r\n    <code>PERCENTILE.INC</code> e <code>PERCENTILE.EXC</code>. Il comportamento predefinito corrisponde a <code>PercentileMode.ExcelInc</code>. I simboli\r\n    <code>PercentileMode.SqlCont</code> e <code>PercentileMode.SqlDisc</code> corrispondono al comportamento di SQL Server per <code>PERCENTILE_CONT</code> e\r\n    <code>PERCENTILE_DISC</code>, rispettivamente.\r\n",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare il primo quartile dell'elenco <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Trovare i quartili dell'elenco <code>{5, 3, 1, 7, 9}</code> usando un metodo di interpolazione che corrisponde al metodo <code>PERCENTILE.EXC</code> di Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Restituisce gli offset di un valore in un elenco.",
        "Documentation.LongDescription": "Restituisce l'offset in cui è presente il valore <code>value</code> nell'elenco <code>list</code>. Restituisce -1 se il valore non è presente.\r\n    È possibile specificare il parametro di occorrenza facoltativo <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: numero massimo di occorrenze da restituire.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Trovare la posizione nell'elenco {1, 2, 3} in cui è presente il valore 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Restituisce il primo offset di un valore in un elenco.",
        "Documentation.LongDescription": "Restituisce l'offset nell'elenco <code>list</code> della prima occorrenza di un valore in un elenco <code>values</code>. Restituisce -1 se non viene trovata alcuna occorrenza.\r\n    È possibile specificare il parametro di occorrenza facoltativo <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: numero massimo di occorrenze che possono essere restituite.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Trovare la prima posizione nell'elenco {1, 2, 3} in cui sono presenti i valori 2 o 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Restituisce un subset dell'elenco a partire da un offset.",
        "Documentation.LongDescription": "Restituisce un subset dell'elenco a partire dall'offset <code>list</code>. Il parametro facoltativo <code>offset</code> imposta il numero massimo di elementi nel subset.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il subset che inizia all'offset 6 dell'elenco di numeri da 1 a 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Trovare il subset di lunghezza 2 dell'offset 6, dall'elenco di numeri da 1 a 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Elimina da list1 gli elementi che sono presenti nell'elenco.",
        "Documentation.LongDescription": "Rimuove tutte le occorrenze dei valori specificati in <code>list2</code> da <code>list1</code>. Se i valori di <code>list2</code> non esistono in <code>list1</code>, viene restituito l'elenco originale.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Eliminare gli elementi dell'elenco {2, 4, 6} dall'elenco {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Rimuove tutte le occorrenze dei valori di input.",
        "Documentation.LongDescription": "Rimuove tutte le occorrenze dei valori specificati in <code>list2</code> dall'elenco <code>list1</code>. Se i valori di <code>list2</code> non esistono in <code>list1</code>, viene restituito l'elenco originale.\r\n    È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1, 2, 3, 4, 5, 5} senza {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Rimuove il numero di conteggio dei valori a partire dalla posizione specificata.",
        "Documentation.LongDescription": "Rimuove <code>count</code> valori in <code>list</code> a partire dalla posizione specificata <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere 3 valori nell'elenco {1, 2, 3, 4, -6, -2, -1, 5} a partire dall'indice 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Restituisce un elenco che è costituito dal conteggio delle ripetizioni dell'elenco originale.",
        "Documentation.LongDescription": "Restituisce un elenco che è costituito dalle <code>count</code> ripetizioni dell'elenco originale <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco con {1, 2} ripetuto 3 volte.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Applica ogni sostituzione di { old, new }.",
        "Documentation.LongDescription": "Esegue le sostituzioni specificate nell'elenco <code>list</code>. L'operazione di sostituzione <code>replacements</code> è costituta da un elenco di due valori, il vecchio valore e il nuovo valore, forniti in un elenco.\r\n    È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1, 2, 3, 4, 5} sostituendo il valore 5 con -5 e il valore 1 con -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Restituisce un elenco di valori corrispondente alla condizione.",
        "Documentation.LongDescription": "Restituisce un elenco di valori dall'elenco <code>list</code> corrispondente alla condizione di selezione <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare i valori nell'elenco {1, -3, 4, 9, -2} che sono maggiori di 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Divide l'elenco specificato in un elenco di elenchi usando le dimensioni di pagina specificate.",
        "Documentation.LongDescription": "Divide <code>list</code> in un elenco di elenchi in cui il primo elemento dell'elenco di output è un elenco contenente i primi <code>pageSize</code> elementi dell' \r\nelenco di origine, l'elemento successivo dell'elenco di output è un elenco contenente i successivi <code>pageSize</code> elementi dell'elenco di origine e così via.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Restituisce un nuovo elenco di valori calcolati da questo elenco.",
        "Documentation.LongDescription": "Restituisce un nuovo elenco di valori mediante l'applicazione della funzione di trasformazione <code>transform</code> all'elenco <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Aggiungere 1 a ogni valore nell'elenco {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Restituisce l'arcotangente della divisione dei due numeri.",
        "Documentation.LongDescription": "Restituisce l'arcotangente della divisione dei due numeri, <code>y</code> e <code>x</code>. La divisione verrà costruita come <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di un'operazione \"And\" bit per bit tra i due input.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di un'operazione \"And\" bit per bit tra <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di un'operazione \"Or\" bit per bit tra i due input.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di un'operazione \"Or\" bit per bit tra <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Scorre i set di bit verso sinistra.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di uno scorrimento bit per bit verso sinistra su <code>number1</code>, in base al numero di bit specificato <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Scorre i set di bit verso destra.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di uno scorrimento bit per bit verso destra su <code>number1</code>, in base al numero di bit specificato <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Restituisce il risultato dell'esecuzione di un'operazione \"XOR\" (OR esclusivo) bit per bit tra i due input.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di un'operazione \"XOR\" (OR esclusivo) bit per bit tra <code>number1</code> e <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Restituisce il numero di combinazioni univoche.",
        "Documentation.LongDescription": "Restituisce il numero di combinazioni univoche da un elenco di elementi, <code>setSize</code>, con la dimensione di combinazione specificata <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: il numero degli elementi nell'elenco.</li>\r\n    <li><code>combinationSize</code>: il numero degli elementi in ogni combinazione.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di combinazioni da un totale di 5 elementi dove ogni combinazione è un gruppo di 3 elementi.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Divide due numeri e restituisce la parte intera del risultato.",
        "Documentation.LongDescription": "Restituisce la parte intera del risultato della divisione di un numero, <code>number1</code>, per un altro numero, <code>number2</code>.\r\n    Se <code>number1</code> o <code>number2</code> è Null, <code>Number.IntegerDivide</code> restituisce Null.\r\n      <ul>\r\n        <li><code>number1</code>: dividendo.</li>\r\n        <li><code>number2</code>: divisore.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Dividere 6 per 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Dividere 8.3 per 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "L'intero divide due numeri e restituisce la parte restante.",
        "Documentation.LongDescription": "Restituisce la parte risultante dalla divisione dell'intero <code>number</code> per <code>divisor</code>.\r\n    Se <code>number</code> o <code>divisor</code> è Null, <code>Number.Mod</code> restituisce Null.\r\n      <ul>\r\n        <li><code>number</code>: dividendo.</li>\r\n        <li><code>divisor</code>: divisore.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare la parte restante dalla divisione di 5 per 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Restituisce il numero di permutazioni.",
        "Documentation.LongDescription": "Restituisce il numero di permutazioni che possono essere generate da un numero di elementi, <code>setSize</code>, con una dimensione di permutazione specificata, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di permutazioni da un totale 5 elementi in gruppi di 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Eleva un numero alla potenza specificata.",
        "Documentation.LongDescription": "Restituisce il risultato dell'elevazione di <code>number</code> alla potenza di <code>power</code>.\r\n    Se <code>number</code> o <code>power</code> è Null, <code>Number.Power</code> restituisce Null.\r\n      <ul>\r\n        <li><code>number</code>: base.</li>\r\n        <li><code>power</code>: esponente.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore di 5 elevato alla potenza di 3 (5 al cubo).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Restituisce un numero casuale compreso tra due numeri.",
        "Documentation.LongDescription": "Restituisce un numero casuale compreso tra <code>bottom</code> e <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Ottenere un numero casuale compreso tra 1 e 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Restituisce il valore del campo specificato in un record.",
        "Documentation.LongDescription": "Restituisce il valore dell'elemento specificato <code>field</code> in <code>record</code>. Se il campo non viene trovato, viene generata un'eccezione.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore del campo \"CustomerID\" nel record.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Restituisce il valore del campo specificato in un record o il valore predefinito se il campo non viene trovato.",
        "Documentation.LongDescription": "Restituisce il valore del campo specificato <code>field</code> nel record <code>record</code>. Se il campo non viene trovato, viene restituito l'elemento facoltativo <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore del campo \"Phone\" o restituire Null se non esiste.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Trovare il valore del campo \"Phone\" o restituire il valore predefinito se non esiste.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Restituisce un record corrispondente a un elenco di valori di campi e un set di campi.",
        "Documentation.LongDescription": "Restituisce un record corrispondente a un elemento <code>list</code> di valori di campi e un set di campi.  <code>fields</code> può essere specificato da un elenco di valori di testo o da un tipo di record.  Se i campi non sono univoci viene restituito un errore.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Compilare un record da un elenco di valori di campi e un elenco di nomi di campi.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Compilare un record da un elenco di valori di campi e un tipo di record.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Indica se il record ha campi specificati.",
        "Documentation.LongDescription": "Indica se il record <code>record</code> ha campi specificati in <code>fields</code>, restituendo un valore logico (true o false).\r\n    È possibile specificare più valori di campi utilizzando un elenco.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificare se il record contiene il campo \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Verificare se il record contiene i campi \"CustomerID\" e \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Rimuove i campi specificati dal record di input.",
        "Documentation.LongDescription": "Restituisce un record che rimuove tutti i campi specificati nell'elenco <code>fields</code> dell'input <code>record</code>. Se il campo specificato non esiste, viene generata un'eccezione.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere il campo \"Price\" dal record.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Rimuovere i campi \"Price\" e \"Item\" dal record.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Applica la ridenominazione da un elenco nel formato { old, new }.",
        "Documentation.LongDescription": "Restituisce un record dopo la ridenominazione dei campi dell'input <code>record</code> nei nuovi nomi di campo specificati nell'elenco <code>renames</code>. Per effettuare più ridenominazioni è possibile utilizzare un elenco annidato ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rinominare il campo \"UnitPrice\" in \"Price\" dal record.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Rinominare i campi \"UnitPrice\" in \"Price\" e \"OrderNum\" in \"OrderID\" dal record.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Dispone i campi specificati nel nuovo ordine.",
        "Documentation.LongDescription": "Restituisce un record dopo il riordinamento dei campi in <code>record</code> nell'ordine dei campi specificati nell'elenco <code>fieldOrder</code>. I valori dei campi vengono conservati e i campi non elencati in <code>fieldOrder</code> vengono lasciati nella posizione originale.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Riordinare alcuni dei campi nel record.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Restituisce un record contenente solo i campi specificati.",
        "Documentation.LongDescription": "Restituisce un record che include solo i campi specificati nell'elenco <code>fields</code> dell'input <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Selezionare i campi \"Item\" e \"Price\" nel record.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Restituisce un record dopo aver applicato le trasformazioni specificate.",
        "Documentation.LongDescription": "Restituisce un record dopo aver applicato le trasformazioni specificate nell'elenco <code>transformOperations</code> a <code>record</code>.\r\n    È possibile che uno o più campi siano stati trasformati in un dato momento.\r\n      <div>Nel caso di un singolo campo trasformato, è previsto che <code>transformOperations</code> sia un elenco con due elementi. Il primo elemento in <code>transformOperations</code> specifica un nome di campo e il secondo elemento in <code>transformOperations</code> specifica la funzione da usare per la trasformazione. Ad esempio, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Nel caso di più campi trasformati, è previsto che <code>transformOperations</code> sia un elenco di elenchi, in cui ogni elenco interno è una coppia di nome di campo e operazioni di trasformazione. Ad esempio, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Convertire il campo \"Price\" in un campo numerico.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Convertire i campi \"OrderID\" e \"Price\" in numeri.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in base a una transizione da un tipo di carattere a un altro. I parametri {0} e {1} possono essere un elenco di caratteri oppure una funzione che accetta un carattere e restituisce true/false.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in base a una transizione da un tipo di carattere a un altro. I parametri <code>before</code> e <code>after</code> possono essere un elenco di caratteri oppure una funzione che accetta un carattere e restituisce true/false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input ogni volta che una lettera maiuscola o minuscola è seguita da una cifra.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Converte la query SQL specificata nel codice M. Questa funzione è destinata solo all'uso interno.",
        "Documentation.LongDescription": "Converte la query di <code>sql</code> fornita in codice M, con gli identificatori disponibili definiti da <code>environment</code>. Questa funzione è destinata solo all'uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Restituisce una colonna di dati specificata dalla tabella come elenco.",
        "Documentation.LongDescription": "Restituisce la colonna di dati specificata da <code>column</code> dalla tabella <code>table</code> come elenco.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Restituisce i valori dalla colonna [Name] nella tabella.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Restituisce un elenco con i nomi delle colonne corrispondenti ai tipi specificati.",
        "Documentation.LongDescription": "Restituisce un elenco con i nomi delle colonne dalla tabella <code>table</code> corrispondenti ai tipi specificati in <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Restituire i nomi delle colonne di tipo Number.Type dalla tabella.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Indica se il record specificato viene visualizzato come riga nella tabella.",
        "Documentation.LongDescription": "Indica se il record specificato <code>row</code> viene visualizzato come riga nella tabella <code>table</code>.\r\n    Facoltativamente, è possibile specificare il parametro <code>equationCriteria</code> per controllare il confronto tra le righe della tabella.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella contiene la riga.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinare se la tabella contiene la riga.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinare se la tabella contiene la riga confrontando solo la colonna [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Indica se tutti i record specificati vengono visualizzati come righe nella tabella.",
        "Documentation.LongDescription": "Indica se tutti i record specificati nell'elenco di record <code>rows</code> vengono visualizzati come righe in <code>table</code>.\r\n    Facoltativamente, è possibile specificare il parametro <code>equationCriteria</code> per controllare il confronto tra le righe della tabella.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella contiene tutte le righe confrontando solo la colonna [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinare se la tabella contiene tutte le righe.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Indica se uno dei record specificati viene visualizzato come riga nella tabella.",
        "Documentation.LongDescription": "Indica se uno dei record specificati nell'elenco di record <code>rows</code> viene visualizzato come riga in <code>table</code>.\r\n    Facoltativamente, è possibile specificare il parametro <code>equationCriteria</code> per controllare il confronto tra le righe della tabella.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contiene le righe <code>[a = 1, b = 2]</code> o <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinare se la tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contiene le righe <code>[a = 1, b = 3]</code> o <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinare se la tabella <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> contiene le righe <code>[a = 1, b = 3]</code> o <code>[a = 3, b = 5]</code> confrontando solo la colonna [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Indica se la tabella contiene le colonne specificate.",
        "Documentation.LongDescription": "Indica se <code>table</code> contiene le colonne specificate <code>columns</code>. Restituisce <code>true</code> se la tabella contiene le colonne, in caso contrario <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella contiene la colonna [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinare se la tabella contiene le colonne [Name] e [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Indica se tutte le righe della tabella soddisfano la condizione specificata.",
        "Documentation.LongDescription": "Indica se tutte le righe in <code>table</code> corrispondono a <code>condition</code>. Restituisce <code>true</code> se tutte le righe corrispondono, in caso contrario <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinare se tutti i valori di riga nella colonna [a] sono pari nella tabella.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Trovare se tutti valori di riga sono [a = 1, b = 2], nella tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Indica se una delle righe della tabella soddisfa la condizione specificata.",
        "Documentation.LongDescription": "Indica se una delle righe in <code>table</code> corrisponde a <code>condition</code>. Restituisce <code>true</code> se una delle righe corrisponde, in caso contrario <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determinare se uno dei valori di riga nella colonna [a] si trova anche nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinare se uno dei valori di riga è [a = 1, b = 2], nella tabella <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Restituisce la riga più grande o il valore predefinito mediante i criteri specificati.",
        "Documentation.LongDescription": "Restituisce la riga più grande in <code>table</code>, dato <code>comparisonCriteria</code>. Se la tabella è vuota, verrà restituito il valore facoltativo <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare la riga con il valore più grande nella colonna [a] della tabella <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Trovare la riga con il valore più grande nella colonna [a] della tabella <code>({})</code>. Restituire -1 se vuota.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Restituisce la riga più piccola o un valore predefinito mediante i criteri specificati.",
        "Documentation.LongDescription": "Restituisce la riga più piccola in <code>table</code>, dato <code>comparisonCriteria</code>. Se la tabella è vuota, verrà restituito il valore facoltativo <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare la riga con il valore più grande nella colonna [a] nella tabella.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Trovare la riga con il valore più piccolo nella colonna [a] nella tabella. Restituire -1 se vuota.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Restituisce la posizione o le posizioni della riga all'interno della tabella.",
        "Documentation.LongDescription": "Restituisce la posizione della riga della prima occorrenza di <code>row</code> in <code>table</code>. Restituisce -1 se non viene trovata alcuna occorrenza.\r\n    <ul>\r\n       <li><code>table</code>: tabella di input.</li>\r\n       <li><code>row</code>: riga nella tabella di cui trovare la posizione.</li>\r\n       <li><code>occurrence</code>: <i>[facoltativo]</i> specifica le occorrenze della riga da restituire.</li>\r\n       <li><code>equationCriteria</code>: <i>[facoltativo]</i> controlla il confronto tra le righe di tabella.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Trovare la posizione della prima occorrenza di [a = 2, b = 4] nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Trovare la posizione della seconda occorrenza di [a = 2, b = 4] nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Trovare la posizione di tutte le occorrenze di [a = 2, b = 4] nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Restituisce la posizione o le posizioni di una delle righe specificate all'interno della tabella.",
        "Documentation.LongDescription": "Restituisce le posizioni delle righe da <code>table</code> della prima occorrenza dell'elenco di <code>rows</code>. Restituisce -1 se non viene trovata alcuna occorrenza.\r\n    <ul>\r\n    <li><code>table</code>: tabella di input.</li>\r\n       <li><code>rows</code>: elenco di righe nella tabella di cui trovare le posizioni.</li>\r\n       <li><code>occurrence</code>: <i>[facoltativo]</i> specifica le occorrenze della riga da restituire.</li>\r\n       <li><code>equationCriteria</code>: <i>[facoltativo]</i> controlla il confronto tra le righe di tabella.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Trovare la posizione della prima occorrenza di [a = 2, b = 4] o [a = 6, b = 8] nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Trovare la posizione di tutte le occorrenze di [a = 2, b = 4] o [a = 6, b = 8] nella tabella <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Divide la tabella specificata in un elenco di tabelle usando le dimensioni di pagina specificate.",
        "Documentation.LongDescription": "Divide <code>table</code> in un elenco di tabelle in cui il primo elemento dell'elenco è una tabella contenente le prime <code>pageSize</code> righe dalla\r\n  tabella di origine, l'elemento successivo dell'elenco è un tabella contenente le successive <code>pageSize</code> righe della tabella di origine e così via.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Divide una tabella di cinque record in tabelle contenenti ognuna due record.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Restituisce un elenco che contiene le prime righe del conteggio specificate e le righe rimanenti.",
        "Documentation.LongDescription": "Restituisce un elenco che contiene due tabelle, una con le prime N righe di <code>table</code> (come specificato da <code>count</code>) e una che contiene le righe rimanenti di <code>table</code>.\r\n\r\nSe le tabelle dell'elenco risultante vengono enumerate esattamente una volta e nell'ordine, la funzione enumererà <code>table</code> una sola volta.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Restituisce le prime due righe della tabella e le righe rimanenti della tabella.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Trasforma le righe della tabella utilizzando la funzione di trasformazione specificata.",
        "Documentation.LongDescription": "Crea un <code>elenco</code> applicando l'operazione <code>transform</code> a ogni riga in <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Trasformare le righe di una tabella in un elenco di numeri.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Trasformare le righe di una tabella numerica in record testuali.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Restituisce la porzione di <code>text</code> dopo l'oggetto <code>delimiter</code> specificato.\r\n    Un valore numerico <code>index</code> facoltativo indica quale occorrenza di <code>delimiter</code> prendere in considerazione.\r\n    Un elenco <code>index</code> facoltativo indica quale occorrenza di <code>delimiter</code> prendere in considerazione e se eseguire l'indicizzazione dall'inizio o dalla fine dell'input.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ottiene la porzione di \"111-222-333\" dopo il (primo) segno meno.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Ottiene la porzione di \"111-222-333\" dopo il secondo segno meno.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Ottiene la porzione di \"111-222-333\" dopo il secondo segno meno a partire dalla fine.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Restituisce il carattere nella posizione specificata.",
        "Documentation.LongDescription": "Restituisce il carattere nel valore di testo <code>text</code> nella posizione <code>index</code>. Il primo carattere nel testo è nella posizione 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Trovare il carattere nella posizione 4 nella stringa \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Restituisce la porzione di <code>text</code> prima dell'oggetto <code>delimiter</code> specificato.\r\n    Un valore numerico <code>index</code> facoltativo indica quale occorrenza di <code>delimiter</code> prendere in considerazione.\r\n    Un elenco <code>index</code> facoltativo indica quale occorrenza di <code>delimiter</code> prendere in considerazione e se eseguire l'indicizzazione dall'inizio o dalla fine dell'input.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ottiene la porzione di \"111-222-333\" prima del (primo) segno meno.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Ottiene la porzione di \"111-222-333\" prima del secondo segno meno.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Ottiene la porzione di \"111-222-333\" prima del secondo segno meno a partire dalla fine.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Restituisce un valore che indica se il testo contiene la sottostringa.",
        "Documentation.LongDescription": "Rileva se <code>text</code> contiene il valore <code>substring</code>. Restituisce true se il valore viene trovato. Questa funzione non supporta caratteri jolly o espressioni regolari.\r\n <br>\r\n <br>\r\n L'argomento facoltativo <code>comparer</code> può essere utilizzato per specificare confronti con distinzione tra maiuscole e minuscole o con distinzione tra impostazioni cultura e impostazioni locali.\r\n Nel linguaggio delle formule sono disponibili gli operatori di confronto predefiniti seguenti:\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>: consente di eseguire un confronto ordinale con distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>:  utilizzato per eseguire un confronto ordinale senza distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.FromCulture</code>: utilizzato per eseguire un confronto in grado di riconoscere le impostazioni cultura</li>\r\n</ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Trovare se il testo \"Hello World\" contiene \"Hello\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Trovare se il testo \"Hello World\" contiene \"hello\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Verificare se il testo \"Hello World\" contiene \"hello\", usando un operatore di confronto senza distinzione tra maiuscole e minuscole.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Restituisce gli ultimi caratteri del testo.",
        "Documentation.LongDescription": "Restituisce il valore <code>text</code> che rappresenta gli ultimi <code>count</code> caratteri del valore <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ottenere gli ultimi 5 caratteri del testo \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Indica se il testo termina con il valore specificato.",
        "Documentation.LongDescription": "Indica se il testo specificato, <code>text</code>, termina con il valore specificato <code>substring</code>. L'indicazione fa distinzione tra maiuscole e minuscole.\r\n\r\n <div>\r\n<code>comparer</code> è un <code>Operatore di confronto</code> usato per controllare il confronto. Gli operatori di confronto possono essere usati per fornire confronti con distinzione tra maiuscole e minuscole oppure confronti in grado di riconosce le impostazioni cultura e locali.\r\n </div>\r\n <div>\r\n Nel linguaggio delle formule sono disponibili gli strumenti di confronto predefiniti seguenti:\r\n </div>\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>:  usato per eseguire un confronto ordinale esatto</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto senza distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.FromCulture</code>: usato per eseguire un confronto in grado di riconoscere le impostazioni cultura</li>\r\n</ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Verificare se \"Hello, World\" termina con \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Verificare se \"Hello, World\" termina con \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Restituisce testo formattato da una stringa di formato e dagli argomenti.",
        "Documentation.LongDescription": "Restituisce testo formattato che viene creato applicando <code>arguments</code> da un elenco o record a una stringa di formato <code>formatString</code>. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Consente di formattare un elenco di numeri.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatta tipi di dati diversi di un record in base alle impostazioni cultura Italiano (Italia).",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Restituisce la sottostringa fino a una lunghezza specificata.",
        "Documentation.LongDescription": "Restituisce <code>count</code> caratteri o fino alla fine di <code>text</code>, a partire dall'offset <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Trovare la sottostringa nel testo \"Hello World\" a partire dall'indice 6 con un'estensione di 5 caratteri.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Trovare la sottostringa nel testo \"Hello World\" a partire dall'indice 6 fino alla fine.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Restituisce il testo della lunghezza specificata riempiendo la fine del testo specificato.",
        "Documentation.LongDescription": "Restituisce il valore <code>text</code> riempito fino al raggiungimento della lunghezza <code>count</code> inserendo spazi alla fine del valore di testo <code>text</code>.\r\n    Facoltativamente, è possibile usare il carattere <code>character</code> per specificare il carattere usato per il riempimento. Il carattere di riempimento predefinito è uno spazio.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Riempire la fine di un valore di testo in modo da raggiungere la lunghezza di 10 caratteri.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Riempire la fine di un valore di testo con \"|\" in modo da raggiungere la lunghezza di 10 caratteri.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Restituisce il testo della lunghezza specificata riempiendo l'inizio del testo specificato.",
        "Documentation.LongDescription": "Restituisce il valore <code>text</code> riempito fino al raggiungimento della lunghezza <code>count</code> inserendo spazi all'inizio del valore di testo <code>text</code>.\r\n    Facoltativamente, è possibile usare il carattere <code>character</code> per specificare il carattere usato per il riempimento. Il carattere di riempimento predefinito è uno spazio.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Riempire l'inizio di un valore di testo in modo da raggiungere la lunghezza di 10 caratteri.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Riempire l'inizio di un valore di testo con \"|\" in modo da raggiungere la lunghezza di 10 caratteri.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Restituisce la prima posizione del valore (-1 se non trovata).",
        "Documentation.LongDescription": "Restituisce la posizione dell'occorrenza specificata del valore di testo <code>substring</code> trovato in <code>text</code>.\r\n È possibile utilizzare un parametro facoltativo <code>occurrence</code> per specificare la posizione dell'occorrenza da restituire (prima occorrenza per impostazione predefinita).\r\n Restituisce -1 se <code>substring</code> non è stato trovato.\r\n\r\n <div>\r\n<code>comparer</code> è un <code>Operatore di confronto</code> usato per controllare il confronto. Gli operatori di confronto possono essere usati per fornire confronti con distinzione tra maiuscole e minuscole oppure confronti in grado di riconoscere le impostazioni cultura e locali.\r\n </div>\r\n <div>\r\n Nel linguaggio delle formule sono disponibili gli strumenti di confronto predefiniti seguenti:\r\n </div>\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>:  usato per eseguire un confronto ordinale esatto</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto senza distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.FromCulture</code>: usato per eseguire un confronto in grado di riconoscere le impostazioni cultura</li>\r\n</ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la posizione della prima occorrenza di \"World\" nel testo \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Ottenere la posizione dell'ultima occorrenza di \"World\" nel testo \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Restituisce la prima posizione nel valore di testo di un carattere elencato (-1 se non trovata).",
        "Documentation.LongDescription": "Restituisce la prima posizione di qualsiasi carattere nell'elenco <code>characters</code> presente in <code>text</code>.\n    È possibile utilizzare un parametro facoltativo <code>occurrence</code> per specificare la posizione dell'occorrenza da restituire.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Trovare la prima posizione di \"W\"o \"H\" nel testo \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Trovare tutte le posizioni di \"W\" o \"H\" nel testo \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Restituisce la sottostringa trovata in corrispondenza dell'offset.",
        "Documentation.LongDescription": "Restituisce la sottostringa dal testo <code>text</code> trovata in corrispondenza dell'offset <code>offset</code>.\r\n    Facoltativamente, è possibile includere il parametro <code>count</code> per specificare il numero di caratteri da restituire. Genera un errore se il numero di caratteri non è sufficiente.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Trovare la sottostringa nel testo \"Hello World\" a partire dall'indice 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Trovare la sottostringa nel testo \"Hello World Hello\" a partire dall'indice 6 con un'estensione di 5 caratteri.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Rimuove tutte le occorrenze del carattere o dell'elenco di caratteri specificato dal valore di testo di input.",
        "Documentation.LongDescription": "Restituisce una copia del valore di testo <code>text</code> con tutti i caratteri da <code>removeChars</code> rimosso.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere i caratteri , e ; dal valore di testo.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Rimuove un numero di caratteri a partire dall'offset specificato",
        "Documentation.LongDescription": "Restituisce una copia del valore di testo <code>text</code> con tutti i caratteri dalla posizione <code>offset</code> rimossa.\r\n    Facoltativamente, è possibile usare il parametro <code>count</code> per specificare il numero di caratteri da rimuovere. Il valore predefinito di <code>count</code> è 1. I valori delle posizioni iniziano da 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere 1 carattere dal valore di testo \"ABEFC\" nella posizione 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Rimuovere due carattere dal valore di testo \"ABEFC\" a partire dalla posizione 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Restituisce un valore di testo composto dal testo di input ripetuto per il numero di volte specificato.",
        "Documentation.LongDescription": "Restituisce un valore di testo composto dal testo di input <code>text</code> ripetuto per <code>count</code> volte.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ripetere il testo \"a\" cinque volte.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Ripetere il testo \"helloworld\" tre volte.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Seleziona tutte le occorrenze del carattere o dell'elenco di caratteri specificato dal valore di testo di input.",
        "Documentation.LongDescription": "Restituisce una copia del valore di testo <code>text</code> con tutti i caratteri non presenti in <code>selectChars</code> rimossi.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Seleziona tutti i caratteri compresi tra 'a' e 'z' dal valore di testo.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Divide il testo in un elenco di valori di testo in base al delimitatore specificato.",
        "Documentation.LongDescription": "Restituisce un elenco di valori di testo risultante dalla suddivisione del valore di testo <code>text</code> in base al delimitatore specificato <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco dal valore di testo \"Name|Address|PhoneNumber\" delimitato da \"|\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Restituisce un elenco di valori di testo, suddiviso in base a uno dei caratteri nel delimitatore.",
        "Documentation.LongDescription": "Restituisce un elenco di valori di testo risultante dalla suddivisione del valore di testo <code>text</code> in base a un carattere nel delimitatore specificato <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco dal valore di testo \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Restituisce l'inizio del testo.",
        "Documentation.LongDescription": "Restituisce i primi <code>count</code> caratteri di <code>text</code> come valore di testo.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Ottenere i primi 5 caratteri di \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Indica se il testo inizia con il valore specificato.",
        "Documentation.LongDescription": "Restituisce true se il valore di testo <code>text</code> inizia con il valore di testo <code>substring</code>.\r\n <ul>\r\n <li><code>text</code>: <i></i>Un valore <code>text</code> in cui eseguire la ricerca</li>\r\n <li><code>substring</code>: valore <i></i>A <code>text</code> che rappresenta la sottostringa da impostare come sottostringa ricercata in <code>substring</code></li>\r\n <li><code>comparer</code>: <i>[Facoltativo]</i> Un <code>Operatore di confronto</code> utilizzato per controllare il confronto. Ad esempio, <code>Comparer.OrdinalIgnoreCase</code> può essere usato per eseguire ricerche senza distinzione tra maiuscole e minuscole</li>\r\n </ul>\r\n <div>\r\n<code>comparer</code> è un <code>Operatore di confronto</code> usato per controllare il confronto. Gli operatori di confronto possono essere usati per fornire confronti con distinzione tra maiuscole e minuscole oppure confronti in grado di riconoscere le impostazioni cultura o locali.\r\n </div>\r\n <div>\r\n Nel linguaggio delle formule sono disponibili gli strumenti di confronto predefiniti seguenti:\r\n </div>\r\n <ul>\r\n <li><code>Comparer.Ordinal</code>:  usato per eseguire un confronto ordinale esatto</li>\r\n <li><code>Comparer.OrdinalIgnoreCase</code>: usato per eseguire un confronto ordinale esatto senza distinzione tra maiuscole e minuscole</li>\r\n <li><code>Comparer.FromCulture</code>: usato per eseguire un confronto in grado di riconoscere le impostazioni cultura</li>\r\n</ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Controllare se il testo \"Hello, World\" inizia con il testo \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Controllare se il testo \"Hello, World\" inizia con il testo \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Restituisce un tipo che rappresenta le funzioni con vincoli specifici per il tipo restituito e il parametro.",
        "Documentation.LongDescription": "Crea un <code>function type</code> da <code>signature</code>, un record di <code>ReturnType</code>, <code>Parameters</code> e <code>min</code>, il numero minimo di argomenti necessari per richiamare la funzione.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Crea il tipo per una funzione che accetta un parametro numerico denominato X e restituisce un numero.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Restituisce un tipo che rappresenta i record con vincoli specifici per il tipo nei campi.",
        "Documentation.LongDescription": "Restituisce un tipo che rappresenta i record con vincoli specifici per il tipo nei campi.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Genera dinamicamente un tipo di tabella.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Determina se un valore del primo tipo è sempre compatibile con il secondo tipo.",
        "Documentation.LongDescription": "Determina se un valore di <code>type1</code> è sempre compatibile con <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinare se un valore di tipo number può essere considerato sempre come type any.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Determinare se un valore di tipo any può essere considerato sempre come type number.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Sostituisce i facet di un tipo.",
        "Documentation.LongDescription": "Sostituisce i facet di <code>type</code> con i facet contenuti nel record <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Restituisce un nuovo tipo di tabella con tutte le chiavi sostituite dall'elenco di chiavi specificato.",
        "Documentation.LongDescription": "Restituisce un nuovo tipo di tabella con tutte le chiavi sostituite dall'elenco di chiavi specificato.<br>\r\n    <br>\r\n    Ogni chiave è definita usando un record nel formato seguente:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: un elenco di nomi di colonne che definiscono la chiave\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> se la chiave è la chiave primaria della tabella; altrimenti, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    L'elenco specificato di chiavi viene convalidato per garantire che non siano definite più chiavi primarie e che nel tipo di tabella ci siano tutti i nomi di colonna chiave.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Sostituisci le informazioni chiave in un tipo di tabella.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Cancella le informazioni chiave definite in precedenza in un tipo di tabella.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Restituisce il tipo di colonna in una tabella.",
        "Documentation.LongDescription": "Restituisce il tipo della colonna <code>column</code> nel tipo di tabella <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Restituisce un URI assoluto che rappresenta la combinazione dell'URI di base e dell'URI relativo di input.",
        "Documentation.LongDescription": "Restituisce un URI assoluto che rappresenta la combinazione di <code>baseUri</code> e <code>relativeUri</code> di input.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Restituisce la somma di due valori.",
        "Documentation.LongDescription": "Restituisce la somma di <code>value1</code> e <code>value2</code>. È possibile specificare il parametro facoltativo <code>precision</code>. Per impostazione predefinita, viene utilizzato <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Restituisce il valore se è compatibile con il tipo specificato.",
        "Documentation.LongDescription": "Restituisce il valore se compatibile con il tipo specificato. Equivale all'operatore \"is\" in M, con l'eccezione che può accettare riferimenti al tipo di identificatore, ad esempio Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Esegue il cast di un numero a un numero.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Tentativo di eseguire il cast di un valore di testo a un numero.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale o maggiore del secondo.",
        "Documentation.LongDescription": "Restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale o maggiore del secondo.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Restituisce il risultato della divisione del primo valore per il secondo.",
        "Documentation.LongDescription": "Restituisce il risultato della divisione di <code>value1</code> per <code>value2</code>. È possibile specificare il parametro facoltativo <code>precision</code>. Per impostazione predefinita, viene utilizzato <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Restituisce un valore che indica se due valori sono uguali.",
        "Documentation.LongDescription": "Restituisce true se il valore <code>value1</code> è uguale al valore <code>value2</code>, in caso contrario false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Determina se un valore è compatibile con il tipo specificato.",
        "Documentation.LongDescription": "Determina se un valore è compatibile con il tipo specificato. Equivale all'operatore \"is\" in M, con l'eccezione che può accettare riferimenti al tipo di identificatore, ad esempio Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Confrontare due modi per determinare se un numero è compatibile con il type number.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Restituisce il prodotto di due valori.",
        "Documentation.LongDescription": "Restituisce il prodotto di <code>value1</code> per <code>value2</code>. È possibile specificare il parametro facoltativo <code>precision</code>. Per impostazione predefinita, viene utilizzato <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Valuta una query su una destinazione.",
        "Documentation.LongDescription": "<p>Valuta <code>query</code> su <code>target</code> usando i parametri specificati in <code>parameters</code> e le opzioni specificate in <code>options</code>.</p>\r\n<p>L'output della query è definito da <code>target</code>.</p>\r\n<p><code>target</code> fornisce il contesto per l'operazione descritta da <code>query</code>.</p>\r\n<p><code>query</code> descrive la query da eseguire su <code>target</code>. <code>query</code> viene espresso in modo specifico per <code>target</code>, ad esempio in un'istruzione T-SQL.</p>\r\n<p>Il valore facoltativo <code>parameters</code> può contenere un elenco o un record, a seconda dei casi, per fornire i valori dei parametri previsti da <code>query</code>.</p>\r\n<p>Il record facoltativo <code>options</code> può contenere opzioni che influiscono sul comportamento della valutazione di <code>query</code> su <code>target</code>. Queste opzioni sono specifiche di <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Restituisce un valore che indica se due valori sono uguali.",
        "Documentation.LongDescription": "Restituisce Null se uno dei due argomenti '<code>value1</code>' o '<code>value2</code>' è Null, in caso contrario l'equivalente di Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Sostituisce le informazioni sui metadati di input.",
        "Documentation.LongDescription": "Sostituisce le informazioni sui metadati di input.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Sostituisce il tipo del valore.",
        "Documentation.LongDescription": "Sostituisce il tipo di <code>value</code> con il <code>type</code> specificato.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Consente di sostituire il tipo predefinito di un record con un tipo più specifico.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Restituisce la differenza di due valori.",
        "Documentation.LongDescription": "Restituisce la differenza di <code>value1</code> e <code>value2</code>. È possibile specificare il parametro facoltativo <code>precision</code>. Per impostazione predefinita, viene utilizzato <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Crea un'azione che, quando eseguita, restituisce i risultati dell'esecuzione di una richiesta HTTP come valore binario.",
        "Documentation.LongDescription": "Crea un'azione che, se eseguita, restituirà i risultati dell'esecuzione di una richiesta di <code>method</code> su <code>url</code> utilizzando HTTP come valore binario.\r\n    È possibile specificare un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti: \r\n    <ul>\r\n<li><code>Query</code> : Consente di aggiungere i parametri di query all&#39;URL a livello di codice senza aggiungere sequenze di caratteri di escape.</li>\r\n<li><code>ApiKeyName</code> : Se il sito di destinazione prevede la nozione di una chiave API, &#232; possibile usare questo parametro per specificare il nome (non il valore) del parametro della chiave da usare nell&#39;URL. Il valore effettivo della chiave viene fornito nelle credenziali.</li>\r\n<li><code>Headers</code> : Se si specifica questo valore come record, verranno fornite ulteriori intestazioni a una richiesta HTTP.</li>\r\n<li><code>Timeout</code> : Se si specifica questo valore come durata, il timeout per una richiesta HTTP verr&#224; modificato. Il valore predefinito &#232; 100 secondi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Se si specifica questo valore come elenco, queste chiavi di intestazione HTTP sarano escluse dal calcolo per la memorizzazione nella cache dei dati.</li>\r\n<li><code>IsRetry</code> : Se si specifica questo valore logico come true, tutte le risposte esistenti nella cache verranno ignorate durante il recupero dei dati.</li>\r\n<li><code>ManualStatusHandling</code> : Se si specifica questo valore come elenco, verr&#224; impedita qualsiasi attivit&#224; gestione predefinita per le richieste HTTP con risposte contenenti uno di questi codici di stato.</li>\r\n<li><code>RelativePath</code> : Se si specifica questo valore come testo, questo verr&#224; aggiunto all&#39;URL di base prima di effettuare la richiesta.</li>\r\n<li><code>Content</code> : Se si specifica questo valore, il relativo contenuto diventer&#224; il corpo della richiesta HTTP.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Si noti che questa funzione è disabilitata nella maggior parte dei contesti. Provare a usare Web.Contents o Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Eseguire una richiesta GET su Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Specificare l'URL dell'endpoint API REST Azure Enterprise associato alla registrazione",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Restituisce i risultati binari della chiamata all'URL specificato per l'API Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Utilizzo della funzione AzureEnterprise.Contents per restituire i risultati di un report specifico.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabella"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Restituisce il contenuto del BLOB specificato da un insieme di credenziali di archiviazione di Azure.",
        "Documentation.LongDescription": "Restituisce il contenuto del BLOB disponibile all'URL <code>url</code> da un insieme di credenziali di archiviazione di Azure. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numero di byte da leggere prima dell&#39;attesa del consumer di dati. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>RequestSize</code> : Numero di byte che &#232; necessario tentare di leggere in una singola richiesta HTTP al server. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : L&#39;opzione ConcurrentRequests per le richieste simultanee supporta il download pi&#249; veloce dei dati specificando il numero di richieste da effettuare in parallelo, ma implica un utilizzo di memoria pi&#249; elevato. La memoria necessaria &#232; pari a (ConcurrentRequest * RequestSize). Il valore predefinito &#232; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Restituisce il contenuto del file specificato da un file system di Azure Data Lake Storage.",
        "Documentation.LongDescription": "Restituisce il contenuto del file disponibile all'URL <code>url</code> da un file system di Azure Data Lake Storage. È possibile specificare <code>options</code> per controllare le opzioni seguenti:\r\n    <ul>\r\n<li><code>BlockSize</code> : Numero di byte da leggere prima dell&#39;attesa del consumer di dati. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>RequestSize</code> : Numero di byte che &#232; necessario tentare di leggere in una singola richiesta HTTP al server. Il valore predefinito &#232; 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : L&#39;opzione ConcurrentRequests per le richieste simultanee supporta il download pi&#249; veloce dei dati specificando il numero di richieste da effettuare in parallelo, ma implica un utilizzo di memoria pi&#249; elevato. La memoria necessaria &#232; pari a (ConcurrentRequest * RequestSize). Il valore predefinito &#232; 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Restituisce la lunghezza approssimativa del file binario.",
        "Documentation.LongDescription": "Restituisce il numero approssimativo di righe di <code>binary</code>o un errore se l'origine dati non supporta una lunghezza approssimativa.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Consente di ottenere la lunghezza approssimativa del valore binario.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Memorizza nel buffer il valore binario in memoria.",
        "Documentation.LongDescription": "Memorizza nel buffer il valore binario in memoria. Il risultato della chiamata è un valore binario stabile che pertanto avrà lunghezza deterministica e ordine di byte.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Creare una versione stabile del valore binario.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Combina un elenco di binari in un singolo binario.",
        "Documentation.LongDescription": "Combina un elenco di binari in un singolo binario.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Crea un binario dal valore specificato",
        "Documentation.LongDescription": "Restituisce un valore <code>binario</code> dal dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Binary.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> è <code>binario</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>binario</code>:\r\n      <ul>\r\n        <li><code>testo</code>: Un valore <code>binario</code> dalla rappresentazione di testo. Per ulteriori informazioni, fare riferimento a <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore. ",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>binary</code> di <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Converte un elenco di numeri in un valore binario.",
        "Documentation.LongDescription": "Converte un elenco di numeri in un valore binario.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Decodifica i dati da un formato di testo in binario.",
        "Documentation.LongDescription": "Restituisce il risultato della conversione del valore di testo <code>text</code> in un binario (elenco di <code>number</code>). È possibile specificare <code>encoding</code> per indicare la codifica usata nel valore di testo.\r\n      I valori seguenti di <code>BinaryEncoding</code> possono essere usati per <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codifica Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codifica esadecimale</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Decodificare \"1011\" in binario.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Decodificare \"1011\" in binario con codifica esadecimale.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Legge il flusso binario e prova a determinare le informazioni sul tipo di contenuto e sul formato del flusso.",
        "Documentation.LongDescription": "Restituisce un record con il campo Content.Type che contiene il tipo MIME dedotto.\r\n    Se il tipo di contenuto dedotto è text/* e viene rilevata una tabella codici di codifica, restituisce anche il campo Content.Encoding che contiene la codifica del flusso.\r\n    Se il tipo di contenuto dedotto è text/csv e il formato prevede valori delimitati, restituisce anche il campo Csv.PotentialDelimiter che contiene una tabella per l'analisi dei possibili delimitatori.\r\n    Se il tipo di contenuto dedotto è text/csv e il formato è a larghezza fissa, restituisce anche il campo Csv.PotentialPositions che contiene un elenco per l'analisi delle possibili posizioni di colonna a larghezza fissa.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Restituisce il numero di caratteri.",
        "Documentation.LongDescription": "Restituisce il numero di caratteri.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Converte un valore binario in un elenco di numeri.",
        "Documentation.LongDescription": "Converte un valore binario in un elenco di numeri.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codifica i dati binari in un formato di testo.",
        "Documentation.LongDescription": "Restituisce il risultato della conversione di un elenco binario di numeri <code>binary</code> in un valore di testo. Facoltativamente, è possibile specificare <code>encoding</code> per indicare la codifica da usare nel valore di testo ottenuto\r\n      I valori seguenti di <code>BinaryEncoding</code> possono essere usati per <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codifica Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codifica esadecimale</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Crea un record di errore modificato che non attiva un fallback quando viene generato da un gestore definito in una vista (tramite Binary.View).",
        "Documentation.LongDescription": "Crea un record di errore modificato da <code>errorRecord</code> che non attiva un fallback quando viene generato da un gestore definito in una vista (tramite Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Crea una funzione che può essere intercettata da un gestore definito in una vista (tramite Binary.View).",
        "Documentation.LongDescription": "<p>Crea una funzione di visualizzazione basata su<code>function</code>che può essere gestita in una vista creata da <code>Binary.View</code>.</p>\r\n<p>È possibile usare il gestore <code>OnInvoke</code> di <code>Binary.View</code> per definire un gestore per la funzione di visualizzazione.</p>\r\n<p>Come per i gestori di operazioni predefinite, se non viene specificato un gestore <code>OnInvoke</code> o se questo non gestisce la funzione di visualizzazione, oppure se il gestore genera un errore,<code>function</code>viene applicato sopra la vista.</p>\r\n<p>Per una descrizione più dettagliata di <code>Binary.View</code> e delle funzioni di visualizzazione personalizzate, vedere la documentazione pubblicata.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Formato binario che legge un intero con segno a 64 bit che è stato codificato tramite la codifica di lunghezza variabile a 7 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero con segno a 64 bit che è stato codificato tramite la codifica di lunghezza variabile a 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Formato binario che legge un intero senza segno a 64 bit che è stato codificato tramite la codifica di lunghezza variabile a 7 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero senza segno a 64 bit che è stato codificato tramite la codifica di lunghezza variabile a 7 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Formato binario che legge un intero senza segno a 8 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero senza segno a 8 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Formato binario che legge un valore .NET decimale a 16 byte.",
        "Documentation.LongDescription": "Formato binario che legge un valore .NET decimale a 16 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Formato binario che legge un valore a virgola mobile a precisione doppia IEEE a 8 byte.",
        "Documentation.LongDescription": "Formato binario che legge un valore a virgola mobile a precisione doppia IEEE a 8 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Restituisce un formato binario che legge una sequenza di elementi e restituisce un elenco.",
        "Documentation.LongDescription": "Restituisce un formato binario che legge una sequenza di elementi e restituisce un elemento <code>list</code>.  Il parametro <code>binaryFormat</code> specifica il formato binario di ogni elemento.  Sono disponibili tre modalità per determinare il numero di elementi letti: <ul><li>Se <code>countOrCondition</code> non viene specificato, il formato binario leggerà fino all'esaurimento degli elementi.</li><li>Se <code>countOrCondition</code> è un numero, il formato binario leggerà il numero di elementi specificato.</li><li>Se <code>countOrCondition</code> è una funzione, la funzione verrà richiamata per ogni elemento letto.  La funzione restituisce true per continuare e false per arrestare la lettura degli elementi.  L'elemento finale è incluso nell'elenco.</li><li>Se <code>countOrCondition</code> è un formato binario, si presume che il conteggio degli elementi preceda l'elenco e il formato specificato viene utilizzato per leggere il conteggio.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Leggere i byte fino alla fine dei dati.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Leggere due byte.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Leggere i byte finché il valore di byte non è maggiore o uguale a due.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Formato binario che legge zero byte e restituisce Null.",
        "Documentation.LongDescription": "Formato binario che legge zero byte e restituisce Null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Restituisce un formato binario che legge un record.",
        "Documentation.LongDescription": "Restituisce un formato binario che legge un record.  Il parametro <code>record</code> specifica il formato binario del record.  Ogni campo del record può avere un formato binario diverso.  Se un campo contiene un valore che non è un valore di formato binario, non viene letto alcun dato per il campo e il valore del campo è ripetuto nel risultato.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Leggere un record contenente un Integer a 16 bit e un Integer a 32 bit.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Formato binario che legge un intero con segno a 16 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero con segno a 16 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Formato binario che legge un intero con segno a 32 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero con segno a 32 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Formato binario che legge un intero con segno a 64 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero con segno a 64 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Formato binario che legge un valore a virgola mobile a precisione singola IEEE a 4 byte.",
        "Documentation.LongDescription": "Formato binario che legge un valore a virgola mobile a precisione singola IEEE a 4 byte.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Restituisce un formato binario che legge un valore di testo.",
        "Documentation.LongDescription": "Restituisce un formato binario che legge un valore di testo.  L'elemento <code>length</code> specifica il numero di byte da decodificare o il formato binario della lunghezza che precede il testo.  Il valore facoltativo <code>encoding</code> specifica la codifica del testo.  Se <code>encoding</code> non viene specificato, la codifica è determinata dai byte order mark Unicode.  Se non sono presenti byte order mark, viene utilizzato <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Decodificare due byte come testo ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Decodificare il testo ASCII in cui la lunghezza del testo in byte è presente prima del testo come byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Formato binario che legge un intero senza segno a 16 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero senza segno a 16 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Formato binario che legge un intero senza segno a 32 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero senza segno a 32 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Formato binario che legge un intero senza segno a 64 bit.",
        "Documentation.LongDescription": "Formato binario che legge un intero senza segno a 64 bit.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Crea un valore integer a 8 bit dal valore dato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numerico</code> integer a 8 bit del dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Byte.From</code> restituisce <code>null</code>. Se il dato <code>value</code> è un <code>numero</code> all'interno dell'intervallo di un integer a 8 bit senza una parte frazionaria, viene restituito <code>value</code>. Se ha una parte frazionaria, il numero viene arrotondato con la modalità di arrotondamento specificata. La modalità di arrotondamento predefinita è <code>RoundingMode.ToEven</code>. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in <code>numero</code> usando <code>Number.FromText</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. È anche possibile specificare un valore <code>culture</code> opzionale (per esempio, \"it-IT\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 8 bit di <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 8 bit di <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Converte un numero in un carattere di testo.",
        "Documentation.LongDescription": "Restituisce il carattere equivalente al numero.<br>\r\n    <br>\r\n    Il <code>number</code> fornito deve essere un codice carattere Unicode a 21bit.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte un numero nel valore di carattere equivalente.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Converte un carattere in un numero e viceversa.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Converte il codice carattere esadecimale per l'emoticon \"sogghigno\" nella relativa coppia di surrogati UTF-16 equivalente.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Converte un carattere nel valore numerico.",
        "Documentation.LongDescription": "Restituisce il numero equivalente al <code>character</code>.<br>\r\n    <br>\r\n    Il risultato sarà il codice carattere Unicode a 21 bit rappresentato dal carattere specificato o dalla coppia di surrogati.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte un carattere nel valore numerico equivalente.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Converte la coppia di surrogati UTF-16 per l'emoticon \"sogghigno\" nel relativo codice carattere esadecimale equivalente.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Restituisce una funzione che combina un elenco di testo utilizzando il delimitatore specificato.",
        "Documentation.LongDescription": "Restituisce una funzione che combina un elenco di valori di testo in un singolo valore di testo utilizzando il delimitatore specificato.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina un elenco di valori di testo utilizzando un delimitatore di punto e virgola.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Combinare il testo di due colonne usando un delimitatore di virgola e le virgolette in stile CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Restituisce una funzione che combina un elenco di testo utilizzando una sequenza di delimitatori.",
        "Documentation.LongDescription": "Restituisce una funzione che combina un elenco di valori di testo in un singolo valore di testo utilizzando una sequenza di delimitatori.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina un elenco di valori di testo utilizzando una sequenza di delimitatori.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Restituisce una funzione che combina un elenco di testo utilizzando le lunghezze specificate.",
        "Documentation.LongDescription": "Restituisce una funzione che combina un elenco di valori di testo in un singolo valore di testo utilizzando le lunghezze specificate.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina un elenco di valori di testo estraendo i numeri di caratteri specificati da ogni valore di input.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Combina un elenco di valori di testo estraendo i numeri di caratteri specificati, dopo aver pre-compilato il risultato con il testo del modello.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Restituisce una funzione che combina un elenco di testo utilizzando le posizioni di output specificate.",
        "Documentation.LongDescription": "Restituisce una funzione che combina un elenco di valori di testo in un singolo valore di testo utilizzando le posizioni di output specificate.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina un elenco di valori di testo posizionandoli nell'output alle posizioni specificate.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Restituisce una funzione che combina un elenco di testo usando le posizioni e le lunghezze specificate.",
        "Documentation.LongDescription": "Restituisce una funzione che combina un elenco di valori di testo in un singolo valore di testo utilizzando le posizioni di output e le lunghezze specificate. La lunghezza Null indica che deve essere incluso l'intero valore di testo.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina un elenco di valori di testo utilizzando le posizioni di output e le lunghezze specificate.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Restituisce una funzione dell'operatore di confronto in base alle impostazioni cultura specificate e alla distinzione tra maiuscole e minuscole.",
        "Documentation.LongDescription": "Restituisce una funzione dell'operatore di confronto che utilizza la <code>culture</code> e la distinzione tra maiuscole e minuscole specificata da <code>ignoreCase</code> per eseguire i confronti. <br>\r\n      <br>\r\n      Una funzione di confronto accetta due argomenti e restituisce -1, 0 o 1 a seconda che il primo valore sia minore, uguale o maggiore del secondo.<br>\r\n      <br>\r\n      Il valore predefinito per <code>ignoreCase</code> è false. Il <code>culture</code> deve essere una delle impostazioni locali supportate da .NET Framework, ad esempio \"it-IT\".\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Confronta \"a\" e \"A\" tramite le impostazioni locali \"en-US\" per stabilire se i valori sono uguali.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Confronta \"a\" e \"A\" tramite le impostazioni locali \"en-US\" ignorando la distinzione maiuscole/minuscole per stabilire se i valori sono uguali.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Restituisce l'identificatore del membro univoco dal valore della proprietà membro.",
        "Documentation.LongDescription": "Restituisce l'identificatore del membro univoco dal valore della proprietà membro. <code>attribute</code>. Restituisce Null per tutti gli altri valori.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Restituisce la chiave di una proprietà.",
        "Documentation.LongDescription": "Restituisce la chiave della proprietà <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Crea un valore di valuta dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>valuta</code> dal dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Currency.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> è <code>numero</code> compreso nell'intervallo della valuta, la parte frazionaria di <code>value</code> viene arrotondata a 4 decimali e quindi viene restituito il valore. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in un <code>numero</code> usando <code>Number.FromText</code>. L'intervallo valido per la valuta è da <code>-922.337.203.685,477,5808</code> a <code>922.337.203.685.477,5807</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. L'impostazione predefinita è <code>RoundingMode.ToEven</code>. Può essere previsto anche un <code>culture</code> opzionale (per esempio, \"it-IT\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottiene il valore <code>currency</code> di <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Ottenere il <code>currency</code> valore di <code>\"1.23455\"</code> usando <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Restituisce il componente dei giorni.",
        "Documentation.LongDescription": "Restituisce il componente giorno di un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene estratto il componente giorno.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il componente giorno di un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> che rappresenta la data 14/5/2011 e l'ora 17.00.00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Restituisce un numero compreso tra 0 e 6 che indica il giorno della settimana del valore specificato.",
        "Documentation.LongDescription": "Restituisce un numero compreso tra 0 e 6 che indica il giorno della settimana del valore specificato <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: valore <code>Day</code> che indica il giorno da considerare come primo giorno della settimana. I valori consentiti sono Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday o Day.Saturday. Se non è specificato, viene usato un valore predefinito dipendente dalle impostazioni cultura.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il giorno della settimana rappresentato da lunedì 21 febbraio 2011, considerando domenica come primo giorno della settimana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Ottenere il giorno della settimana rappresentato da lunedì 21 febbraio 2011, considerando lunedì come primo giorno della settimana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Restituisce il nome del giorno della settimana.",
        "Documentation.LongDescription": "Restituisce il nome del giorno della settimana per il valore <code>date</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottiene il nome del giorno della settimana.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Restituisce un numero compreso tra 1 e 366 che rappresenta il giorno dell'anno.",
        "Documentation.LongDescription": "Restituisce un numero che rappresenta il giorno dell'anno nel valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> <code>dateTime</code> fornito.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Giorno dell'anno per il 1° marzo 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Restituisce un numero compreso tra 28 e 31 che indica il numero dei giorni del mese.",
        "Documentation.LongDescription": "Restituisce il numero di giorni del mese nel valore <code>dateTime</code> di <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> per cui viene restituito il numero di giorni del mese.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Numero di giorni del mese di dicembre come rappresentato da <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Restituisce la fine del giorno.",
        "Documentation.LongDescription": "Restituisce la fine del giorno rappresentata da <code>dateTime</code>. Le informazioni sul fuso orario vengono mantenute.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolata la fine del giorno.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la fine del giorno per 14/5/2011 17.00.00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Ottenere la fine del giorno per 17/5/2011 17.00.00 -7.00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Restituisce la fine del mese.",
        "Documentation.LongDescription": "Restituisce la fine del mese contenente <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolata la fine del mese.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la fine del mese per 14/5/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Ottenere la fine del mese per 17/5/2011 05.00.00 -7.00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Restituisce la fine del trimestre.",
        "Documentation.LongDescription": "Restituisce la fine del trimestre contenente <code>dateTime</code>. Le informazioni sul fuso orario vengono mantenute.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolata la fine del trimestre.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare la fine del trimestre per il 10 ottobre 2011, 8.00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Restituisce la fine della settimana.",
        "Documentation.LongDescription": "Restituisce la fine della settimana contenente  <code>dateTime</code>.\r\nQuesta funzione accetta un valore facoltativo per <code>Day</code>, <code>firstDayOfWeek</code>, da impostare come primo giorno della settimana per il relativo calcolo. Il valore predefinito è <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolato l'ultimo giorno della settimana.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[facoltativo]</i> valore <code>Day.Type</code> che rappresenta il primo giorno della settimana. I valori possibili sono <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> e <code>Day.Saturday.</code>. Il valore predefinito è <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la fine della settimana per 14/5/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Ottenere la fine della settimana per il 17/5/2011 05.00.00 -7.00, con domenica come primo giorno della settimana.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Restituisce la fine dell’anno.",
        "Documentation.LongDescription": "Restituisce la fine dell'anno contenente <code>dateTime</code>, inclusi i secondi frazionari. Le informazioni del fuso orario sono mantenute.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolata la fine dell'anno.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la fine dell'anno per 14/5/2011 17.00.00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Ottenere la fine dell'ora per 17/5/2011 17.00.00 -7.00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Crea un data dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>date</code> dall'elemento <code>value</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".\r\nSe l'elemento specificato <code>value</code> è <code>null</code>, <code>Date.From</code> restituisce <code>null</code>. Se l'elemento specificato <code>value</code> è <code>date</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: valore <code>date</code> dalla rappresentazione testuale. Per informazioni, vedere <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: componente date di <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: componente date dell'equivalente datetime locale di <code>value</code>.</li>\r\n        <li><code>number</code>: componente date dell'equivalente datetime della data di automazione OLE espressa da <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>43910</code> in un valore <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Converte <code>#datetime(1899, 12, 30, 06, 45, 12)</code> in un valore <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Crea una data da formati date locali, universali e personalizzati.",
        "Documentation.LongDescription": "Crea un valore <code>date</code> da una rappresentazione testuale <code>text</code>. È possibile specificare un parametro facoltativo <code>record</code>, <code>options</code>, per specificare proprietà aggiuntive. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: valore <code>text</code> che indica il formato da usare. Per maggiori informazioni, vai a: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita l'analisi della data con il massimo impegno.</li>\r\n   <li><code>Impostazioni cultura</code>: quando <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Impostazioni cultura</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare i flussi di lavoro legacy, <code>options</code> può essere anche un valore di testo. Questo comportamento è identico a quello di <code>options</code><code>= [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>2010-12-31</code> in un valore <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Trovare la data nel calendario gregoriano che corrisponde all'inizio di 1400 nel calendario Hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Indica se la data rientra nel giorno corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel giorno corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente rientra nel giorno corrente.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Indica se la data rientra nel mese corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel mese corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente rientra nel mese corrente.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Indica se la data rientra nel trimestre corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel trimestre corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente rientra nel trimestre corrente.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Indica se la data rientra nella settimana corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nella settimana corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente rientra nella settimana corrente.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Indica se la data rientra nell'anno corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nell'anno corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente rientra nell'anno corrente.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Indica se questo valore date rientra nel giorno successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel giorno successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il giorno dopo l'ora di sistema corrente rientra nel giorno successivo.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Indica se questo valore date rientra nel mese successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel mese successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il mese dopo l'ora di sistema corrente rientra nel mese successivo.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Indica se questo valore date rientra nel trimestre successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel trimestre successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il trimestre dopo l'ora di sistema corrente rientra nel trimestre successivo.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Indica se questo valore date rientra nella settimana successiva, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nella settimana successiva, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se la settimana dopo l'ora di sistema corrente rientra nella settimana successiva.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Indica se questo valore date rientra nell'anno successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nell'anno successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'anno dopo l'ora di sistema corrente rientra nell'anno successivo.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Indica se il valore date rientra nel giorno precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel giorno precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel giorno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il giorno prima dell'ora di sistema corrente rientra nel giorno precedente.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Indica se questo valore date rientra nel mese precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel mese precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel mese corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il mese prima dell'ora di sistema corrente rientra nel mese precedente.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Indica se questo valore date rientra nel trimestre precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel trimestre precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel trimestre corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se il trimestre prima dell'ora di sistema corrente rientra nel trimestre precedente.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Indica se questo valore date rientra nella settimana precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nella settimana precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nella settimana corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se la settimana prima dell'ora di sistema corrente rientra nella settimana precedente.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Indica se questo valore date rientra nell'anno precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nell'anno precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'anno corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'anno prima dell'ora di sistema corrente rientra nell'anno precedente.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Indica se la data rientra nell'anno corrente e se cade in corrispondenza del giorno corrente o prima, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore specificato datetime <code>dateTime</code> rientra nell'anno corrente e se cade in corrispondenza del giorno corrente o prima, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'ora di sistema corrente cade da inizio anno a oggi.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Indica se la data cade in un anno bisestile.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> cade in un anno bisestile.\r\n <ul>\r\n        <li><code>dateTime</code>: valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina se l'anno 2012, come rappresentato da <code>#date(2012, 01, 01)</code> è un anno bisestile.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Restituisce il componente mese.",
        "Documentation.LongDescription": "Restituisce il componente mese del valore <code>datetime</code> specificato <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare il mese in #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Restituisce il nome del componente mese.",
        "Documentation.LongDescription": "Restituisce il nome del componente mese per il valore <code>date</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottiene il nome del mese.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Restituisce un numero che indica il trimestre dell'anno in cui cade la data.",
        "Documentation.LongDescription": "Restituisce un numero da 1 a 4 che indica il trimestre dell'anno in cui cade la data <code>dateTime</code>. <code>dateTime</code> può essere un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare in quale trimestre dell'anno cade #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Restituisce l'inizio del giorno.",
        "Documentation.LongDescription": "Restituisce l’inizio del giorno rappresentato da <code>dateTime</code>.\r\n    <code>dateTime</code> deve essere un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'inizio del giorno per il 10 ottobre 2011, 8.00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Restituisce l'inizio del mese.",
        "Documentation.LongDescription": "Restituisce l'inizio del mese contenente <code>dateTime</code>.\r\n    <code>dateTime</code> deve essere un valore <code>date</code> o <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'inizio del mese per il 10 ottobre 2011, 8.10.32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Restituisce l'inizio del trimestre.",
        "Documentation.LongDescription": "Restituisce l'inizio del trimestre contenente<code>dateTime</code>.\r\n      <code>dateTime</code> deve essere un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l’inizio del trimestre per il 10 ottobre 2011, 8.00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Restituisce l'inizio della settimana.",
        "Documentation.LongDescription": "Restituisce l'inizio della settimana contenente<code>dateTime</code>.\r\n      <code>dateTime</code> deve essere un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'inizio della settimana per martedì 11 ottobre 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Trovare l'inizio della settimana per martedì 11 ottobre 2011, usando lunedì come inizio della settimana.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Restituisce l'inizio dell’anno.",
        "Documentation.LongDescription": "Restituisce l'inizio dell’anno contenente<code>dateTime</code>.\r\n    <code>dateTime</code> deve essere un valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'inizio dall'anno per il 10 ottobre 2011, 8.10.32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Restituisce un record contenente le parti del valore date.",
        "Documentation.LongDescription": "Restituisce record contenente le parti del valore di date specificato <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: valore <code>date</code> da cui deve essere calcolato il record delle parti.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Converte il valore <code>#date(2011, 12, 31)</code> in un record contenente le parti del valore date.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Restituisce una rappresentazione testuale del valore di data.",
        "Documentation.LongDescription": "Restituisce una rappresentazione testuale di <code>date</code>. Per specificare proprietà aggiuntive, è possibile specificare un parametro facoltativo <code>record</code> <code>options</code>,<code>culture</code> che viene usato solo per i flussi di lavoro legacy. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: un valore <code>text</code> che indica il formato da usare. Per maggiori dettagli, vedere: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita la formattazione della data usando l'impostazione predefinita, definita da <code>Impostazioni cultura</code>.</li>\r\n   <li><code>Impostazioni cultura</code>: se <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Culture</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare flussi di lavoro legacy, <code>options</code> e <code>culture</code> possono essere anche valori di testo. Questo comportamento è identico a quello se <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>#date(2010, 12, 31)</code> in un valore <code>text</code>. <i> L'output dei risultati può variare a seconda delle impostazioni cultura correnti.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Trovare l'anno nel calendario Hijri che corrisponde al 1° gennaio 2000 nel calendario gregoriano.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Restituisce un numero da 1 a 6 che indica la settimana del mese in cui cade questa data.",
        "Documentation.LongDescription": "Restituisce un numero da 1 a 6 che indica la settimana del mese in cui cade la data <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: valore <code>datetime</code> in base al quale viene determinata la settimana del mese.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinare in quale settimana di marzo cade il giorno 15 nel 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Restituisce un numero da 1 a 54 che indica la settimana dell'anno in cui cade questa data.",
        "Documentation.LongDescription": "Restituisce un numero da 1 a 54 che indica la settimana dell'anno in cui cade la data <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: valore <code>datetime</code> per cui viene determinata la settimana dell'anno.</li>\r\n        <li><code>firstDayOfWeek</code>: valore <code>Day.Type</code> facoltativo che indica quale giorno viene considerato come inizio di una nuova settimana, ad esempio <code>Day.Sunday</code>. Se non è specificato, viene usato un valore predefinito dipendente dalle impostazioni cultura.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinare quale settimana dell'anno contiene il 27 marzo 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Determinare in quale settimana dell'anno contiene il 27 marzo 2011, usando il lunedì come inizio di una settimana.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Restituisce il componente anno.",
        "Documentation.LongDescription": "Restituisce il componente anno del valore <code>datetime</code> specificato <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'anno in #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Restituisce il componente data del valore date, datetime o datetimezone specificato.",
        "Documentation.LongDescription": "Restituisce il componente data di <code>dateTime</code>, il valore <code>date</code>, <code>datetime</code> o <code>datetimezone</code> specificato.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore di data di #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Crea un elemento datetime dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetime</code> dall'elemento <code>value</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".\r\nSe l'elemento specificato <code>value</code> è <code>null</code>, <code>DateTime.From</code> restituisce <code>null</code>. Se l'elemento specificato <code>value</code> è <code>datetime</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: valore <code>datetime</code> dalla rappresentazione testuale. Per informazioni, vedere <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: elemento <code>datetime</code> con <code>value</code> come componente di data e <code>12:00:00 AM</code> come componente di ora.</li>\r\n        <li><code>datetimezone</code>: elemento <code>datetime</code> locale equivalente a <code>value</code>.</li>\r\n        <li><code>time</code>: elemento <code>datetime</code> con l'equivalente data della data di automazione OLE di <code>0</code> come componente di data e <code>value</code> come componente di ora.</li>\r\n        <li><code>numero</code>: equivalente <code>datetime</code> della data di automazione OLE espressa da <code>value</code>. </li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>#time(06, 45, 12)</code> in un valore <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Converte <code>#date(1975, 4, 4)</code> in un valore <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Crea un elemento datetime da un numero lungo 64 bit.",
        "Documentation.LongDescription": "Crea un valore <code>datetime</code> dal valore <code>fileTime</code> e lo converte nel fuso orario locale. L'elemento filetime è un valore di ora di file di Windows che rappresenta il numero di intervalli di 100 nanosecondi che sono trascorsi dalla mezzanotte 24.00 del 1° gennaio 1601 A.D. (C.E.) UTC (Coordinated Universal Time).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>129876402529842245</code> in un valore datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Crea un valore datetimezone dai formati datetime locale e universale.",
        "Documentation.LongDescription": "Crea un valore <code>datetime</code> da una rappresentazione testuale <code>text</code>. È possibile specificare un parametro facoltativo <code>record</code>, <code>options</code>, per specificare proprietà aggiuntive. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: valore <code>text</code> che indica il formato da usare. Per maggiori informazioni, vai a: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita l'analisi della data con il massimo impegno.</li>\r\n   <li><code>Impostazioni cultura</code>: quando <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Impostazioni cultura</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare i flussi di lavoro legacy, <code>options</code> può essere anche un valore di testo. Questo comportamento è identico a quello di <code>options</code><code>= [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>\"2010-12-31T01:30:00\"</code> in un valore datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Convertire <code>\"2010-12-31T01:30:00.121212\"</code> in un valore datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Convertire <code>\"2010-12-31T01:30:00\"</code> in un valore datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Convertire <code>\"20101231T013000\"</code> in un valore datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Indica se questo valore di data/ora rientra nell'ora corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore di data/ora specificato <code>dateTime</code> rientra nell'ora corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code>, o valore <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora di sistema corrente rientra nell'ora corrente.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Indica se questo valore di data/ora rientra nel minuto corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore di data/ora specificato <code>dateTime</code> rientra nel minuto corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code>, o valore <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora di sistema corrente rientra nel minuto corrente.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Indica se questo valore di data/ora rientra nel secondo corrente, come determinato dalla data e dall'ora correnti del sistema.",
        "Documentation.LongDescription": "Indica se il valore di data/ora specificato <code>dateTime</code> rientra nel secondo corrente, come determinato dalla data e dall'ora correnti del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code>, o valore <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora di sistema corrente rientra nel secondo corrente.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Indica se questo valore datetime rientra nell'ora successiva, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nell'ora successiva, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora dopo l'ora di sistema corrente rientra nell'ora successiva.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Indica se questo valore datetime rientra nel minuto successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel minuto successivo come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il minuto dopo l'ora di sistema corrente rientra nel minuto successivo.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Indica se questo valore datetime rientra nel secondo successivo, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel secondo successivo come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il secondo dopo l'ora di sistema corrente rientra nel secondo successivo.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Indica se questo valore datetime rientra nell'ora precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.",
        "Documentation.LongDescription": "Indica se questo valore datetime specificato <code>dateTime</code> rientra nell'ora precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nell'ora corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se l'ora prima dell'ora di sistema corrente rientra nell'ora precedente.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Indica se questo valore datetime rientra nel minuto precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.",
        "Documentation.LongDescription": "Indica se il valore datetime specificato <code>dateTime</code> rientra nel minuto precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel minuto corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il minuto prima dell'ora di sistema corrente rientra nel minuto precedente.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Indica se questo valore datetime rientra nel secondo precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.",
        "Documentation.LongDescription": "Indica se questo valore datetime specificato <code>dateTime</code> rientra nel secondo precedente, come determinato dalla data e dall'ora correnti del sistema. Questa funzione restituirà false se viene passato un valore che rientra nel secondo corrente.\r\n      <ul>\r\n      <li><code>dateTime</code>: valore <code>datetime</code> o <code>datetimezone</code> da valutare.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il secondo prima dell'ora di sistema corrente rientra nel secondo precedente.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Restituisce la parte dell'ora del valore datetime specificato.",
        "Documentation.LongDescription": "Restituisce la parte dell'ora del valore datetime specificato <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore di ora di #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Restituisce record contenente le parti del valore datetime.",
        "Documentation.LongDescription": "Restituisce record contenente le parti del valore datetime specificato <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: valore <code>datetime</code> da cui deve essere calcolato il record delle parti.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Converte il valore <code>#datetime(2011, 12, 31, 11, 56, 2)</code> in un record contenente i valori di data e ora.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Restituisce una rappresentazione testuale del valore datetime.",
        "Documentation.LongDescription": "Restituisce una rappresentazione testuale di <code>dateTime</code>. Per specificare proprietà aggiuntive, è possibile specificare un parametro facoltativo <code>record</code> <code>options</code>,<code>culture</code> che viene usato solo per i flussi di lavoro legacy. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: un valore <code>text</code> che indica il formato da usare. Per maggiori dettagli, vedere: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita la formattazione della data usando l'impostazione predefinita, definita da <code>Impostazioni cultura</code>.</li>\r\n   <li><code>Impostazioni cultura</code>: se <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Culture</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare flussi di lavoro legacy, <code>options</code> e <code>culture</code> possono essere anche valori di testo. Questo comportamento è identico a quello se <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>#datetime(2010, 12, 31, 01, 30, 25)</code> in un valore <code>text</code>. <i> L'output dei risultati può variare a seconda delle impostazioni cultura correnti.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Convertire utilizzando il modello ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Crea un elemento datetimezone dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>datetimezone</code> dall'elemento <code>value</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".\r\nSe l'elemento specificato <code>value</code> è <code>Null</code>, <code>DateTimeZone.From</code> restituisce <code>Null</code>. Se l'elemento specificato <code>value</code> è <code>datetimezone</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: Un valore <code>datetimezone</code> dalla rappresentazione testuale. Per informazioni, vedere <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: un valore <code>datetimezone</code> con <code>value</code> come componente data, <code>12:00:00 AM</code> come componente ora e la differenza corrispondente al fuso orario locale.</li>\r\n        <li><code>datetime</code>: un valore <code>datetimezone</code> con <code>value</code> come valore datetime e la differenza corrispondente al fuso orario locale.</li>\r\n        <li><code>time</code>: valore <code>datetimezone</code> con l'equivalente data della data di automazione OLE di <code>0</code> come componente data, <code>value</code> come componente ora e la differenza corrispondente al fuso orario locale.</li>\r\n        <li><code>numero</code>: Un valore <code>datetimezone</code> con l'equivalente datetime della data di automazione OLE espressa da <code>value</code> e la differenza corrispondente al fuso orario locale.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>\"2020-10-30T01:30:00-08:00\"</code> in un valore <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Crea un elemento datetimezone da un numero lungo 64 bit.",
        "Documentation.LongDescription": "Crea un valore <code>datetimezone</code> dal valore <code>fileTime</code> e lo converte nel fuso orario locale. L'elemento filetime è un valore di ora di file di Windows che rappresenta il numero di intervalli di 100 nanosecondi che sono trascorsi dalla mezzanotte 24.00 del 1° gennaio 1601 D.C. (C.E.) UTC (Coordinated Universal Time).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>129876402529842245</code> in un valore datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Crea un datetimezone da formati datetimezone locali, universali e personalizzati.",
        "Documentation.LongDescription": "Crea un valore <code>datetimezone</code> da una rappresentazione testuale <code>text</code>. È possibile specificare un parametro facoltativo <code>record</code>, <code>options</code>, per specificare proprietà aggiuntive. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: valore <code>text</code> che indica il formato da usare. Per maggiori informazioni, vai a: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita l'analisi della data con il massimo impegno.</li>\r\n   <li><code>Impostazioni cultura</code>: quando <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Impostazioni cultura</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare i flussi di lavoro legacy, <code>options</code> può essere anche un valore di testo. Questo comportamento è identico a quello di <code>options</code><code>= [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>\"2010-12-31T01:30:00-08:00\"</code> in un valore <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Eseguire la conversione con ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Rimuove le informazioni del fuso orario dal valore specificato di datetimezone.",
        "Documentation.LongDescription": "Restituisce un valore #datetime <code>dateTimeZone</code> con le informazioni del fuso orario rimosse.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere le informazioni del fuso orario dal valore #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Converte il componente di fuso orario nel fuso orario locale.",
        "Documentation.LongDescription": "Modifica le informazioni del fuso orario del valore <code>dateTimeZone</code> di datetimezone sulle informazioni del fuso orario locale.\r\n    Se <code>dateTimeZone</code> non è un componente di fuso orario, le informazioni del fuso orario locale vengono aggiunte.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificare le informazioni del fuso orario per #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) sul fuso orario locale (si presume PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Restituisce record contenente le parti del valore datetimezone.",
        "Documentation.LongDescription": "Restituisce un record contenente le parti del valore datetimezone specificato <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: valore <code>datetimezone</code> da cui deve essere calcolato il record delle parti.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Converte il valore <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> in un record contenente i valori di data, ora e fuso orario.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Restituisce una rappresentazione testuale del valore datetimezone.",
        "Documentation.LongDescription": "Restituisce una rappresentazione testuale di <code>dateTimeZone</code>. Per specificare proprietà aggiuntive, è possibile specificare un parametro facoltativo <code>record</code> <code>options</code>,<code>culture</code> che viene usato solo per i flussi di lavoro legacy. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: un valore <code>text</code> che indica il formato da usare. Per maggiori dettagli, vedere: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>null</code> verrà eseguita la formattazione della data usando l'impostazione predefinita, definita da <code>Impostazioni cultura</code>.</li>\r\n   <li><code>Impostazioni cultura</code>: se <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"MMM\"</code> è <code>\"Jan\", \"Feb\", \"Mar\", ... </code>, mentre in <code>\"ru-RU\"</code> <code>\"MMM\"</code> è <code>\"янв\", \"фев\", \"мар\", ...</code>. Quando <code>Formato</code> è <code>null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Culture</code> è <code>null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare flussi di lavoro legacy, <code>options</code> e <code>culture</code> possono essere anche valori di testo. Questo comportamento è identico a quello se <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> in un valore <code>text</code>. <i>l'output dei risultati può variare in base alle impostazioni cultura correnti.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Convertire utilizzando il modello ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Converte il componente di fuso orario nel fuso orario UTC.",
        "Documentation.LongDescription": "Modifica le informazioni del fuso orario del valore <code>dateTimeZone</code> di datetime sulle informazioni del fuso orario UTC.\r\n    Se <code>dateTimeZone</code> non è un componente di fuso orario, le informazioni del fuso orario UTC vengono aggiunte.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Modificare le informazioni del fuso orario per #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) sul fuso orario UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Modifica il fuso orario del valore.",
        "Documentation.LongDescription": "Modifica il fuso orario del valore.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Modifica il fuso orario del valore.",
        "Documentation.LongDescription": "Modifica il fuso orario del valore.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Crea un valore Decimal dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore Decimale <code>numero</code> dal dato <code>value</code>. Se il dato<code>value</code> è <code>null</code>, <code>Decimale.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> si trova nell’intervallo di Decimale <code>numero</code>, <code>value</code> viene restituito, in caso contrario, viene restituito un errore. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in un <code>numero</code> usando <code>Number.FromText</code>. È anche possibile specificare <code>culture</code> facoltativo (ad esempio \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Decimal di <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Restituisce il contenuto della tabella Delta Lake.",
        "Documentation.LongDescription": "Restituisce il contenuto della tabella Delta Lake.",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Crea un valore Double dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore double <code>numero</code> dal dato <code>value</code>. Se il dato<code>value</code> è <code>null</code>, <code>Double.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> si trova nell’intervallo di Double <code>numero</code>, <code>value</code> viene restituito, in caso contrario, viene restituito un errore. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in un <code>numero</code> usando <code>Number.FromText</code>. È anche possibile specificare <code>culture</code> facoltativo (ad esempio \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Double di <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Restituisce la parte dei giorni di una durata.",
        "Documentation.LongDescription": "Restituisce la parte dei giorni di <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Estrarre il numero di giorni tra due date.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Crea un elemento duration dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>durata</code> dall'elemento <code>value</code> specificato. Se l'elemento specificato <code>value</code> è <code>null</code>, <code>Duration.From</code> restituisce <code>null</code>.  Se l'elemento specificato <code>value</code> è <code>durata</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>durata</code>:\r\n      <ul>\r\n        <li><code>testo</code>: valore <code>durata</code> da rappresentazioni testuali in formato di tempo trascorso (d.h:m:s). Per informazioni, vedere <code>Duration.FromText</code>.</li>\r\n        <li><code>numero</code>: elemento <code>durata</code> equivalente al numero di giorni interi e frazionari espressi da <code>value</code>.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>2.525</code> in un valore <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Restituisce un valore della durata da rappresentazioni testuali in formato di tempo trascorso (d.h:m:s).",
        "Documentation.LongDescription": "Restituisce un valore di durata dal testo specificato, <code>text</code>. Questa funzione può analizzare i formati seguenti:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ggg(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Tutti gli intervalli sono inclusivi)<br>\r\n        ggg: numero di giorni.<br>\r\n        hh: numero di ore, compreso tra 0 e 23.<br>\r\n        mm: numero di minuti, compreso tra 0 e 59.<br>\r\n        ss: numero di secondi, compreso tra 0 e 59.<br>\r\n        ff: frazione di secondi, compreso tra 0 e 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>\"2.05:55:20\"</code> in un valore <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Restituisce la parte delle ore di una durata.",
        "Documentation.LongDescription": "Restituisce la parte delle ore di <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Estrarre le ore da un valore di durata.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Restituisce la parte dei minuti di una durata.",
        "Documentation.LongDescription": "Restituisce la parte dei minuti di <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Estrarre i minuti da un valore di durata.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Restituisce la parte dei secondi di una durata.",
        "Documentation.LongDescription": "Restituisce la parte dei secondi di <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Estrarre i secondi da un valore di durata.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Restituisce un record contenente le parti della durata.",
        "Documentation.LongDescription": "Restituisce un record contenente le parti del valore della durata <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: elemento <code>duration</code> da cui viene creato il record.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>#duration(2, 5, 55, 20)</code> in record composto dalle relative parti, tra cui giorni, ore, minuti e secondi, se applicabile.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Restituisce il testo nel formato \"d.h:m:s\".",
        "Documentation.LongDescription": "Restituisce una rappresentazione testuale nel formato \"day.hour:mins:sec\" del valore di durata specificato <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: elemento <code>duration</code> da cui viene calcolata la rappresentazione testuale.</li>\r\n  <li><code>format</code>: <i>[facoltativo]</i> deprecato. Genererà un errore se non è Null</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>#duration(2, 5, 55, 20)</code> in un valore di testo.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Restituisce i giorni totali della durata.",
        "Documentation.LongDescription": "Restituisce i giorni totali con spanning per <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trovare i giorni totali con spanning per un valore di durata.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Restituisce le ore totali della durata.",
        "Documentation.LongDescription": "Restituisce le ore con spanning per <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trovare le ore totali con spanning per un valore di durata.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Restituisce i minuti totali della durata.",
        "Documentation.LongDescription": "Restituisce i minuti totali con spanning per <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trovare i minuti totali con spanning per un valore di durata.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Restituisce i secondi totali della durata.",
        "Documentation.LongDescription": "Restituisce i secondi totali con spanning per <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Trovare i secondi totali con spanning per un valore di durata.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Restituisce un record di errore dai valori di testo specificati per motivo, messaggio e dettagli.",
        "Documentation.LongDescription": "Restituisce un record di errore dai valori di testo specificati per motivo, messaggio e dettagli.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Restituisce la rappresentazione del codice sorgente M di un valore costante.",
        "Documentation.LongDescription": "Restituisce la rappresentazione del codice sorgente M di un valore costante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Ottiene la rappresentazione del codice sorgente M di un valore numerico.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Ottiene la rappresentazione del codice sorgente M di un valore di data.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Ottiene la rappresentazione del codice sorgente M di un valore di testo.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Restituisce il risultato della valutazione di un'espressione M.",
        "Documentation.LongDescription": "Restituisce il risultato della valutazione di un'espressione M <code>document</code>, in cui gli identificatori disponibili cui è possibile fare riferimento sono definiti da <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Valutare una somma semplice.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Valutare una somma più complessa.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Valutare la concatenazione di un valore di testo con un identificatore.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Restituisce la rappresentazione del codice sorgente M di un identificatore.",
        "Documentation.LongDescription": "Restituisce la rappresentazione del codice sorgente M di un identificatore <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Ottiene la rappresentazione del codice sorgente M di un identificatore.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Ottiene la rappresentazione del codice sorgente M di un identificatore che contiene uno spazio.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Restituisce il contenuto del file specificato come binario.",
        "Documentation.LongDescription": "Restituisce il contenuto del file, <code>path</code>, come binario. Il parametro <code>options</code> è attualmente destinato solo all'uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Restituisce se una determinata funzione è considerata un'origine dati o meno.",
        "Documentation.LongDescription": "Restituisce se la funzione <code>function</code> è considerata un'origine dati o meno.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Converte il testo che rappresenta un valore geografico in formato WKT (well-known text) in un record strutturato.",
        "Documentation.LongDescription": "Converte il testo che rappresenta un valore geografico in formato WKT (well-known text) in un record strutturato. Il formato WKT è un formato standard definito dall'Open Geospatial Consortium (OGC) ed è il formato di serializzazione tipico usato dai database, incluso SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Converte un valore di punto geografico strutturato nella relativa rappresentazione WKT (well-known text).",
        "Documentation.LongDescription": "Converte un valore di punto geografico strutturato nella relativa rappresentazione WKT (well-known text), come definito dall'Open Geospatial Consortium (OGC). È anche il formato di serializzazione usato da molti database, incluso SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Converte il testo che rappresenta un valore geometrico in formato WKT (well-known text) in un record strutturato.",
        "Documentation.LongDescription": "Converte il testo che rappresenta un valore geometrico in formato WKT (well-known text) in un record strutturato. Il formato WKT è un formato standard definito dall'Open Geospatial Consortium (OGC) ed è il formato di serializzazione tipico usato dai database, incluso SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Converte un valore di punto geometrico strutturato nella relativa rappresentazione WKT (well-known text).",
        "Documentation.LongDescription": "Converte un valore di punto geometrico strutturato nella relativa rappresentazione WKT (well-known text), come definito dall'Open Geospatial Consortium (OGC). È anche il formato di serializzazione usato da molti database, incluso SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Restituisce un valore GUID dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>Guid.Type</code> dal valore <code>value</code> specificato. Se il valore <code>value</code> specificato è <code>null</code>, <code>Guid.From</code> restituisce <code>null</code>. Viene eseguito un controllo per determinare se il valore <code>value</code> specificato è in formato accettabile. I formati accettabili sono forniti negli esempi.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "È possibile specificare il GUID sotto forma di 32 cifre esadecimali contigue.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "È possibile specificare il GUID sotto forma di 32 cifre esadecimali separate da trattini in blocchi di 8-4-4-4-12 cifre.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "È possibile specificare il GUID sotto forma di 32 cifre esadecimali separate da trattini e racchiuse tra parentesi graffe.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "È possibile specificare il GUID sotto forma di 32 cifre esadecimali separate da trattini e racchiuse tra parentesi.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Crea un valore Integer a 16 bit dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numerico</code> integer a 16 bit del dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Int16.From</code> restituisce <code>null</code>. Se il dato <code>value</code> è un <code>numero</code> all'interno dell'intervallo di un integer a 16 bit senza una parte frazionaria, viene restituito <code>value</code>.  Se ha una parte frazionaria, il numero viene arrotondato con la modalità di arrotondamento specificata. La modalità di arrotondamento predefinita è <code>RoundingMode.ToEven</code>. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in <code>numero</code> usando <code>Number.FromText</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. È anche possibile specificare un valore <code>culture</code> opzionale (per esempio, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 16 bit di <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 16 bit di <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Crea un valore Integer a 32 bit dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numerico</code> integer a 32 bit del dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Int32.From</code> restituisce <code>null</code>. Se il dato <code>value</code> è un <code>numero</code> all'interno dell'intervallo di un integer a 32 bit senza una parte frazionaria, viene restituito <code>value</code>.  Se ha una parte frazionaria, il numero viene arrotondato con la modalità di arrotondamento specificata. La modalità di arrotondamento predefinita è <code>RoundingMode.ToEven</code>. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in <code>numero</code> usando <code>Number.FromText</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. È anche possibile specificare un valore <code>culture</code> opzionale (per esempio, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 32 bit di <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore <code>number</code> Integer a 32 bit di <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Crea un valore integer a 64 bit dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numerico</code> integer a 64 bit del dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Int64.From</code> restituisce <code>null</code>. Se il dato <code>value</code> è un <code>numero</code> all'interno dell'intervallo di un integer a 64 bit senza una parte frazionaria, viene restituito <code>value</code>. Se ha una parte frazionaria, il numero viene arrotondato con la modalità di arrotondamento specificata. La modalità di arrotondamento predefinita è <code>RoundingMode.ToEven</code>. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in <code>numero</code> usando <code>Number.FromText</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. È anche possibile specificare un valore <code>culture</code> opzionale (per esempio, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> integer a 64 bit di <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore il valore <code>number</code> Integer a 64 bit di <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Crea un valore Signed Integer a 8 bit dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numerico</code> integer a 8 bit con segno del dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Int8.From</code> restituisce <code>null</code>. Se il dato <code>value</code> è un <code>numero</code> all'interno dell'intervallo di un integer a 8 bit con segno senza una parte frazionaria, viene restituito <code>value</code>.  Se ha una parte frazionaria, il numero viene arrotondato con la modalità di arrotondamento specificata. La modalità di arrotondamento predefinita è <code>RoundingMode.ToEven</code>. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in <code>numero</code> usando <code>Number.FromText</code>. Per le modalità di arrotondamento disponibili, vedere <code>Number.Round</code>. È anche possibile specificare un valore <code>culture</code> opzionale (per esempio, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Signed Integer a 8 bit di <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore <code>number</code> Signed Integer a 8 bit di <code>\"4.5\"</code> usando <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Restituisce l'albero della sintassi astratta (AST) per il corpo di una funzione.",
        "Documentation.LongDescription": "<p>Restituisce l'albero della sintassi astratta (AST) per il corpo di <code>function</code>, normalizzato in una <i>item expression</i>:\r\n<ul>\r\n  <li>La funzione deve essere una funzione lambda con 1 argomento.</li>\r\n  <li>Tutti i riferimenti al parametro di funzione sono sostituiti con <code>ItemExpression.Item</code>.</li>\r\n  <li>L'albero della sintassi astratta verrà semplificato per contenere solo i nodi dei tipi:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Un errore viene generato se non è possibile restituire un'espressione di riga AST per il corpo di <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Restituisce l'AST per il corpo della funzione <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Restituisce il contenuto del documento JSON.",
        "Documentation.LongDescription": "Restituisce il contenuto del documento JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Genera una rappresentazione JSON di un valore specificato.",
        "Documentation.LongDescription": "<p>Genera una rappresentazione JSON di un valore specificato <code>value</code> con una codifica di testo specificata da <code>encoding</code>. Se si omette <code>encoding</code>, verrà usata la codifica UTF8. I valori sono rappresentati come segue:</p>\r\n <ul>\r\n        <li>I valori logici, di testo e Null sono rappresentati come i tipi JSON corrispondenti</li>\r\n        <li>I numeri sono rappresentati come numeri in JSON, ad eccezione di <code>#infinity</code>, <code>-#infinity</code> e <code>#nan</code> che vengono convertiti in valori Null</li>\r\n        <li>Gli elenchi sono rappresentati come matrici JSON</li>\r\n        <li>I record sono rappresentati come oggetti JSON</li>\r\n        <li>Le tabelle sono rappresentate come una matrice di oggetti</li>\r\n        <li>Date, ore, valori di data/ora, fusi orari e durate sono rappresentati come testo ISO-8601</li>\r\n        <li>I valori binari sono rappresentati come testo con codifica Base 64</li>\r\n        <li>I tipi e le funzioni restituiscono un errore</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Converte un valore complesso in JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Converte un valore binario in un elenco di valori di testo suddivisi in corrispondenza delle interruzioni linee. Se si specifica uno stile della virgoletta, le interruzioni di riga possono essere visualizzate tra virgolette. Se includeLineSeparators è true, i caratteri di interruzione di riga vengono inclusi nel testo.",
        "Documentation.LongDescription": "Converte un valore binario in un elenco di valori di testo suddivisi in corrispondenza delle interruzioni linee. Se si specifica uno stile della virgoletta, le interruzioni di riga possono essere visualizzate tra virgolette. Se includeLineSeparators è true, i caratteri di interruzione di riga vengono inclusi nel testo.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Converte un valore di testo in un elenco di valori di testo suddivisi in corrispondenza delle interruzioni di riga. Se includeLineSeparators è true, i caratteri dell'interruzione di riga sono inclusi nel testo.",
        "Documentation.LongDescription": "Converte un valore di testo in un elenco di valori di testo suddivisi in corrispondenza delle interruzioni di riga. Se includeLineSeparators è true, i caratteri dell'interruzione di riga sono inclusi nel testo.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (valore predefinito) le virgolette non sono necessarie.</li>\r\n            <li><code>QuoteStyle.Csv:</code> le virgolette sono usate in base al formato CSV. Viene usato un carattere di virgoletta doppia per delimitare tali aree e viene usata una coppia di caratteri di virgoletta doppia per indicare un singolo carattere di virgoletta doppia all'interno di tale area. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Converte un elenco di testo in un valore binario utilizzando la codifica e il separatore di riga specificati. Il separatore di riga specificato viene aggiunto alla fine di ogni riga.  Se non viene specificato, vengono utilizzati i caratteri di ritorno a capo e avanzamento riga.",
        "Documentation.LongDescription": "Converte un elenco di testo in un valore binario utilizzando la codifica e il separatore di riga specificati. Il separatore di riga specificato viene aggiunto alla fine di ogni riga.  Se non viene specificato, vengono utilizzati i caratteri di ritorno a capo e avanzamento riga.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Converte un elenco di testo in un singolo testo.  Il lineSeparator specificato viene aggiunto alla fine di ogni riga.  Se non viene specificato, vengono utilizzati i caratteri di ritorno a capo e avanzamento riga.",
        "Documentation.LongDescription": "Converte un elenco di testo in un singolo testo.  Il lineSeparator specificato viene aggiunto alla fine di ogni riga.  Se non viene specificato, vengono utilizzati i caratteri di ritorno a capo e avanzamento riga.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Restituisce true se tutte le espressioni sono true.",
        "Documentation.LongDescription": "Restituisce true se tutte le espressioni dell'elenco <code>list</code> sono true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina se tutte le espressioni dell'elenco {true, true, 2 > 0} sono true.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Determina se tutte le espressioni dell'elenco {true, true, 2 < 0} sono true.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Restituisce true se un'espressione è true.",
        "Documentation.LongDescription": "Restituisce true se qualsiasi espressione dell'elenco <code>list</code> è true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina se una delle espressioni dell'elenco {true, false, 2 > 0} è true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Determina se una delle espressioni dell'elenco {2 = 0, false, 2 < 0} è true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Restituisce la media dei valori. Si utilizza con valori number, date, datetime, datetimezone e duration.",
        "Documentation.LongDescription": "Restituisce il valore medio degli elementi dell'elenco <code>list</code>. Risultato viene restituito nello stesso tipo di dati dei valori dell'elenco. Si utilizza solo con valori number, date, time, datetime, datetimezone e duration.\r\n    Se l'elenco è vuoto viene restituito Null.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Trovare la media dell'elenco di numeri <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Trovare la media dei valori di data 1° gennaio 2011, 2 gennaio 2011 e 3 gennaio 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Memorizza nel buffer un elenco.",
        "Documentation.LongDescription": "Memorizza l'elenco <code>list</code> in memoria. Il risultato della chiamata è un elenco stabile.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creare una copia stabile dell'elenco {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Restituisce un unico elenco combinando più elenchi.",
        "Documentation.LongDescription": "Accetta un elenco di elenchi, <code>lists</code>, e sottopone a merge in un nuovo singolo elenco.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Combinare i due elenchi semplici in {1, 2} e {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Combinare i due elenchi, {1, 2} e {3, {4, 5}}, uno dei quali contiene un elenco annidato.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Restituisce il numero di elementi dell'elenco.",
        "Documentation.LongDescription": "Restituisce il numero di elementi dell'elenco <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di valori dell'elenco {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Restituisce l'elenco dei valori con i duplicati rimossi.",
        "Documentation.LongDescription": "Restituisce un elenco che contiene tutti i valori dell'elenco <code>list</code> con i duplicati rimossi. Se l'elenco è vuoto, il risultato è un elenco vuoto.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere i duplicati dall'elenco {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Restituisce il primo valore dell'elenco o, se vuoto, il valore predefinito specificato.",
        "Documentation.LongDescription": "Restituisce il primo elemento dell'elenco <code>list</code> o il valore predefinito facoltativo <code>defaultValue</code>, se l'elenco è vuoto.\r\n    Se l'elenco è vuoto e un valore predefinito non è specificato, la funzione restituisce <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il primo valore dell'elenco {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Trovare il primo valore dell'elenco {}. Se l'elenco è vuoto, viene restituito -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Restituisce l'intersezione dei valori di elenco trovati nell'input.",
        "Documentation.LongDescription": "Restituisce l'intersezione dei valori di elenco trovati nell'elenco di input <code>lists</code>. È possibile specificare il parametro facoltativo <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'intersezione degli elenchi {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Indica se sono presenti duplicati nell'elenco.",
        "Documentation.LongDescription": "Restituisce un valore logico se sono presenti duplicati nell'elenco <code>list</code>; <code>true</code> se l'elenco è distinto, <code>false</code> se esistono valori duplicati. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Verificare se l'elenco {1, 2, 3} è distinto (ovvero senza duplicati).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Verificare se l'elenco {1, 2, 3, 3} è distinto (ovvero senza duplicati).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Restituisce true se l'elenco è vuoto.",
        "Documentation.LongDescription": "Restituisce <code>true</code> se l'elenco <code>list</code> non contiene valori (lunghezza 0). Restituisce <code>false</code> se l'elenco contiene valori (lunghezza > 0).",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificare se l'elenco {} è vuoto.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Verificare se l'elenco {1, 2} è vuoto.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Restituisce l'ultimo valore dell'elenco o, se vuoto, il valore predefinito specificato.",
        "Documentation.LongDescription": "Restituisce l'ultimo elemento dell'elenco <code>list</code> o il valore predefinito facoltativo <code>defaultValue</code>, se l'elenco è vuoto.\r\n    Se l'elenco è vuoto e un valore predefinito non è specificato, la funzione restituisce <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'ultimo valore dell'elenco {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Trovare l'ultimo valore dell'elenco {} o -1 se è vuoto.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Restituisce l'ultimo valore dell'elenco.  Può specificare facoltativamente quanti valori restituire o una condizione idonea.",
        "Documentation.LongDescription": "Restituisce l'ultimo elemento dell'elenco <code>list</code>. Se l'elenco è vuoto viene generata un'eccezione.\r\n Questa funzione accetta un parametro facoltativo <code>countOrCondition</code> per supportare la raccolta di più elementi o il filtro degli elementi. <code>countOrCondition</code> può essere specificato in tre modi:\r\n <ul>\r\n  <li>Se viene specificato un numero, indica il numero massimo di elementi restituiti. </li>\r\n  <li>Se viene specificata una condizione, vengono restituiti tutti gli elementi che soddisfano inizialmente la condizione, a partire dalla fine dell'elenco. Se un elemento non soddisfa la condizione, non vengono considerati altri elementi. </li>\r\n  <li>Se questo parametro è Null, viene restituito l'ultimo elemento dell'elenco.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'ultimo valore dell'elenco {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Trovare i valori finali dell'elenco {3, 4, 5, -1, 7, 8, 2} che sono maggiori di 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Restituisce il valore massimo o il valore predefinito per un elenco vuoto.",
        "Documentation.LongDescription": "Restituisce l'elemento massimo dell'elenco <code>list</code> o il valore predefinito facoltativo <code>default</code>, se l'elenco è vuoto.\r\n    È possibile specificare un valore facoltativo comparisonCriteria <code>comparisonCriteria</code> per determinare come confrontare gli elementi nell'elenco. Se questo parametro è Null, si usa l'operatore di confronto predefinito.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore massimo dell'elenco {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Trovare il valore massimo dell'elenco {} o restituire -1 se è vuoto. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Restituisce il valore mediano dell'elenco.",
        "Documentation.LongDescription": "Restituisce l'elemento mediano dell'elenco <code>list</code>. La funzione restituisce <code>null</code> se l'elenco non contiene valori non <code>null</code>.\r\n    Se è presente un numero pari di elementi, la funzione sceglie il più piccolo dei due elementi mediani, a meno che l'elenco\r\n    non sia composto interamente da valori datetime, durate, numeri o orari. In tal caso restituisce una media dei due elementi.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'elemento mediano dell'elenco <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Restituisce il valore minimo o il valore predefinito per un elenco vuoto.",
        "Documentation.LongDescription": "Restituisce l'elemento minimo dell'elenco <code>list</code> o il valore predefinito facoltativo <code>default</code>, se l'elenco è vuoto.\r\n    È possibile specificare un valore facoltativo comparisonCriteria <code>comparisonCriteria</code> per determinare come confrontare gli elementi nell'elenco. Se questo parametro è Null, si usa l'operatore di confronto predefinito.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore minimo dell'elenco {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Trovare il valore minimo dell'elenco {} o restituire -1 se è vuoto. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Restituisce il valore più frequente dell'elenco.",
        "Documentation.LongDescription": "Restituisce l'elemento più frequente dell'elenco <code>list</code>. Se l'elenco è vuoto viene generata un'eccezione. Se più elementi hanno la stessa frequenza massima, viene scelto l'ultimo elemento.\r\n    È possibile specificare un valore <code>comparisonCriteria</code> facoltativo <code>equationCriteria</code> per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'elemento più frequente dell'elenco <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Trovare l'elemento più frequente dell'elenco <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Restituisce un elenco con i valori più frequenti dell'elenco.",
        "Documentation.LongDescription": "Restituisce l'elemento più frequente dell'elenco <code>list</code>. Se l'elenco è vuoto viene generata un'eccezione. Se più elementi hanno la stessa frequenza massima, viene scelto l'ultimo elemento.\r\n    È possibile specificare un valore <code>comparisonCriteria</code> facoltativo <code>equationCriteria</code> per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Trovare gli elementi più frequenti dell'elenco <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Restituisce il numero di elementi non Null dell'elenco.",
        "Documentation.LongDescription": "Restituisce il numero di elementi non Null dell'elenco <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Restituisce l'elenco degli offset per l'input.",
        "Documentation.LongDescription": "Restituisce l'elenco degli offset per l'elenco di input <code>list</code>.\r\n    Quando si usa List.Transform per modificare un elenco, è possibile usare l'elenco delle posizioni per fornire alla trasformazione l'accesso alla posizione.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare gli offset dei valori nell'elenco {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Restituisce il prodotto dei numeri nell'elenco.",
        "Documentation.LongDescription": "Restituisce il prodotto dei numeri non Null nell'elenco <code>numbersList</code>. Restituisce Null se non sono presenti valori non Null nell'elenco.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Trovare il prodotto dei numeri nell'elenco <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Restituisce un elenco di numeri casuali.",
        "Documentation.LongDescription": "Restituisce un elenco di numeri casuali compresi tra 0 e 1 corrispondenti al numero di valori da generare e un valore di inizializzazione facoltativo.\r\n<ul>\r\n   <li><code>count</code>: numero di valori causali da generare.</li>\r\n   <li><code>seed</code>: <i>[Facoltativo]</i> valore numerico usato per inizializzare il generatore di numeri casuali. Se omesso, viene generato un elenco univoco di numeri casuali ogni volta che si chiama la funzione. Se si specifica il valore di inizializzazione con un numero, ogni chiamata alla funzione genera lo stesso elenco di numeri casuali.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di 3 numeri casuali.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Creare un elenco di 3 numeri casuali, specificando il valore di inizializzazione.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Restituisce un elenco che ignora il numero di elementi specificato a partire dall'inizio dell'elenco.",
        "Documentation.LongDescription": "Restituisce un elenco che rimuove il primo elemento dell'elenco <code>list</code>. Se <code>list</code> è un elenco vuoto, viene restituito un elenco vuoto.\r\nQuesta funzione accetta un parametro facoltativo, <code>countOrCondition</code>, per supportare la rimozione di più valori, come indicato di seguito.\r\n <ul>\r\n <li>Se viene specificato un numero, vengono rimossi fino al numero massimo di elementi. </li>\r\n <li>Se viene specificata una condizione, tutti gli elementi corrispondenti consecutivi all'inizio di <code>list</code> vengono rimossi.</li>\r\n <li>Se questo parametro è Null, viene osservato il comportamento predefinito. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1, 2, 3, 4, 5} senza i primi 3 numeri.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Creare un elenco da {5, 4, 2, 6, 1} che inizia con un numero inferiore a 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Restituisce un elenco che rimuove il numero specificato di elementi dalla fine dell'elenco.",
        "Documentation.LongDescription": "Restituisce un elenco che rimuove gli ultimi <code>countOrCondition</code> elementi dalla fine dell'elenco <code>list</code>. Se <code>list</code> contiene meno di <code>countOrCondition</code> elementi, viene restituito un elenco vuoto.\r\n <ul>\r\n <li>Se viene specificato un numero, vengono rimossi fino al numero massimo di elementi. </li>\r\n <li>Se viene specificata una condizione, tutti gli elementi corrispondenti consecutivi alla fine di <code>list</code> vengono rimossi.</li>\r\n <li>Se questo parametro è Null, viene rimosso un solo elemento. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1, 2, 3, 4, 5} senza gli ultimi 3 numeri.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Creare un elenco da {5, 4, 2, 6, 4} che termina con un numero inferiore a 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Rimuove tutti i valori \"null\" dall'elenco specificato.",
        "Documentation.LongDescription": "Rimuove tutte le occorrenze di valori \"null\" in <code>list</code>. Se nell'elenco non esistono valori \"null\", viene restituito l'elenco originale.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere i valori \"null\" dall'elenco {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Inverte l'ordine dei valori dell'elenco.",
        "Documentation.LongDescription": "Restituisce un elenco con i valori dell'elenco <code>list</code> in ordine inverso.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1..10} in ordine inverso.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Restituisce un elemento per un elenco di lunghezza uno; in caso contrario genera un'eccezione.",
        "Documentation.LongDescription": "Se è presente un solo elemento nell'elenco <code>list</code>, restituisce tale elemento.\r\n    Se è presente più di un elemento o se l'elenco è vuoto, la funzione genera un'eccezione.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore singolo nell'elenco {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Trovare il valore singolo nell'elenco {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Restituisce un elemento per un elenco di lunghezza uno e il valore predefinito per un elenco vuoto.",
        "Documentation.LongDescription": "Se è presente un solo elemento nell'elenco <code>list</code>, restituisce tale elemento.\r\n    Se l'elenco è vuoto, la funzione restituisce Null a meno che non sia specificato l'elemento facoltativo <code>default</code>. Se è presente più di un elemento nell'elenco, la funzione restituisce un errore.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare il valore singolo nell'elenco {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Trovare il valore singolo nell'elenco {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Trovare il valore singolo nell'elenco {}. Se vuoto, restituire -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Restituisce un elenco che ignora il numero di elementi specificato a partire dall'inizio dell'elenco.",
        "Documentation.LongDescription": "Restituisce un elenco che ignora il primo elemento dell'elenco <code>list</code>. Se <code>list</code> è un elenco vuoto, viene restituito un elenco vuoto.\r\nQuesta funzione accetta un parametro facoltativo, <code>countOrCondition</code>, per supportare l'omissione di più valori, come indicato di seguito.\r\n <ul>\r\n <li>Se viene specificato un numero, fino al numero massimo di elementi viene ignorato. </li>\r\n <li>Se viene specificata una condizione, tutti gli elementi corrispondenti consecutivi all'inizio di <code>list</code> vengono ignorati.</li>\r\n <li>Se questo parametro è Null, viene osservato il comportamento predefinito. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco da {1, 2, 3, 4, 5} senza i primi 3 numeri.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Creare un elenco da {5, 4, 2, 6, 1} che inizia con un numero inferiore a 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Ordina un elenco di dati in base ai criteri specificati.",
        "Documentation.LongDescription": "Ordina un elenco di dati, <code>list</code>, in base ai criteri facoltativi specificati.\r\n Un parametro facoltativo, <code>comparisonCriteria</code>, può essere specificato come criterio di confronto. Questa operazione può accettare i valori seguenti:\r\n <ul>\r\n <li>Per controllare l'ordine, il criterio di confronto può essere un valore di ordine di enumerazione. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n <li>Per calcolare una chiave da usare per l'ordinamento, è possibile usare una funzione di 1 argomento. </li>\r\n <li>Per selezionare una chiave e un ordine di controllo, il criterio di confronto può essere un elenco contenente la chiave e l'ordine (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n <li>Per controllare completamente il confronto, è possibile usare una funzione di 2 argomenti. A questa funzione verranno passati due elementi dall'elenco (due elementi qualsiasi, in qualsiasi ordine). La funzione deve restituire uno dei valori seguenti:\r\n <ul>\r\n <li><code>-1</code>: il primo elemento è minore del secondo elemento.</li>\r\n <li><code>0</code>: gli elementi sono uguali.</li>\r\n <li><code>1</code>: il primo elemento è maggiore del secondo elemento.</li>\r\n </ul>\r\n Value.Compare è un metodo che può essere usato per delegare questa logica. </li>\r\n</ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordinare l'elenco {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ordinare l'elenco {2, 3, 1} in ordine decrescente.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Ordinare l'elenco {2, 3, 1} in ordine decrescente utilizzando il metodo Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Restituisce una stima della deviazione standard sulla base di un campione.",
        "Documentation.LongDescription": "Restituisce una stima sulla base di un campione della deviazione standard dei valori nell'elenco <code>numbersList</code>.\r\n    Se <code>numbersList</code> è un elenco di numeri, viene restituito un numero.\r\n    Viene generata un'eccezione per un elenco vuoto o un elenco di elementi che non sono di tipo <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Trovare la deviazione standard dei numeri da 1 a 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Restituisce la somma degli elementi nell'elenco.",
        "Documentation.LongDescription": "Restituisce la somma dei valori non Null nell'elenco <code>list</code>.  Restituisce Null se non sono presenti valori non Null nell'elenco.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Trovare la somma dei numeri nell'elenco <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Restituisce l'unione dei valori di elenco trovati nell'input.",
        "Documentation.LongDescription": "Accetta un elenco di elenchi <code>lists</code>, unisce gli elementi nei singoli elenchi e li restituisce nell'elenco di output. L'elenco restituito contiene quindi tutti gli elementi di tutti gli elenchi di input.\r\n    L'operazione gestisce la tradizionale semantica a contenitori, di conseguenza i valori duplicati vengono confrontati come parte dell'unione.\r\n    È possibile specificare un valore dei criteri di equazione facoltativo, <code>equationCriteria</code>, per verificare il test di uguaglianza. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Creare un unione dell'elenco {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Restituisce un elenco di elenchi combinando elementi nella stessa posizione in più elenchi.",
        "Documentation.LongDescription": "Acquisisce un elenco di elenchi, <code>lists</code>, e restituisce un elenco di elenchi combinando elementi nella stessa posizione.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Comprime i due elenchi semplici {1, 2} e {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Comprime i due elenchi semplici di lunghezza diversa {1, 2} e {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Crea una logica dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>logical</code> dall'elemento <code>value</code> specificato. Se l'elemento specificato <code>value</code> è <code>null</code>, <code>Logical.From</code> restituisce <code>null</code>.  Se l'elemento specificato <code>value</code> è <code>logical</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: valore <code>logical</code> dal valore di testo, <code>\"true\"</code> o <code>\"false\"</code>. Per informazioni, vedere <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code> se <code>value</code> è uguale a <code>0</code>, in caso contrario <code>true</code>.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>2</code> in un valore <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Crea un valore logico dai valori di testo \"true\" e \"false\".",
        "Documentation.LongDescription": "Crea un valore logico dal valore di testo <code>text</code>, \"true\" o \"false\". Se <code>text</code> contiene una stringa diversa, viene generata un'eccezione. Il valore di testo <code>text</code> non rispetta la distinzione tra maiuscole e minuscole.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Creare un valore logico dalla stringa di testo \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Creare un valore logico dalla stringa di testo \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Restituisce il testo \"true\" o \"false\" corrispondente a un valore logico.",
        "Documentation.LongDescription": "Crea un valore di testo dal valore logico <code>logicalValue</code>, <code>true</code> o <code>false</code>. Se <code>logicalValue</code> non è un valore logico, viene generata un'eccezione.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Creare un valore di testo da valore logico <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Restituisce il valore assoluto del numero.",
        "Documentation.LongDescription": "Restituisce il valore assoluto di <code>number</code>. Se <code>number</code> è Null, <code>Number.Abs</code> restituisce Null.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code> per cui deve essere calcolato il valore assoluto.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Valore assoluto di -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Restituisce l'arcocoseno del numero.",
        "Documentation.LongDescription": "Restituisce l'arcocoseno di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Restituisce l'arcoseno del numero.",
        "Documentation.LongDescription": "Restituisce l'arcoseno di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Restituisce l'arcotangente del numero.",
        "Documentation.LongDescription": "Restituisce l'arcotangente di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Restituisce un byte per ogni bit che è l'opposto dell'input.",
        "Documentation.LongDescription": "Restituisce il risultato dell'esecuzione di un'operazione \"Not\" bit per bit su <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Restituisce il coseno del numero.",
        "Documentation.LongDescription": "Restituisce il coseno di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Trovare il coseno dell'angolo 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Restituisce il coseno iperbolico del numero.",
        "Documentation.LongDescription": "Restituisce il coseno iperbolico di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Eleva e alla potenza specificata.",
        "Documentation.LongDescription": "Restituisce il risultato dell'elevazione di e alla potenza di <code>number</code> (funzione esponenziale).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code> per cui deve essere calcolata la funzione esponenziale. Se <code>number</code> è Null, <code>Number.Exp</code> restituisce Null. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Elevare e alla potenza di 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Restituisce il fattoriale del numero.",
        "Documentation.LongDescription": "Restituisce il fattoriale del numero <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare il fattoriale di 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Crea un numero dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>numero</code> dall'elemento <code>value</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".\r\nSe l'elemento specificato <code>value</code> è <code>null</code>, <code>Number.From</code> restituisce <code>null</code>. Se l'elemento specificato <code>value</code> è <code>numero</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>numero</code>:\r\n      <ul>\r\n        <li><code>text</code>: valore <code>numero</code> dalla rappresentazione testuale. Vengono gestiti i formati di testo comuni (\"15\", \"3,423.10\", \"5.0E-10\"). Per informazioni, vedere <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 per <code>true</code>, 0 per <code>false</code>.</li>\r\n        <li><code>datetime</code>: numero a virgola mobile a precisione doppia contenente un equivalente della data di automazione OLE.</li>\r\n        <li><code>datetimezone</code>: numero a virgola mobile a precisione doppia che contiene un equivalente della data di automazione OLE della data e dell'ora locale di <code>value</code>.</li>\r\n        <li><code>date</code>: numero a virgola mobile a precisione doppia contenente un equivalente della data di automazione OLE.</li>\r\n        <li><code>time</code>: espresso in giorni frazionari.</li>\r\n        <li><code>duration</code>: espresso in giorni interi e frazionari.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> di <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore <code>number</code> di <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Ottenere il valore <code>number</code> di <code>\"12,3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Crea numeri dai formati di testo comuni (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Restituisce un valore <code>number</code> dal valore di testo <code>text</code> specificato.\r\n <ul>\r\n  <li><code>text</code>: rappresentazione testuale di un valore numerico. La rappresentazione deve essere in un formato numerico comune, ad esempio \"15\", \"3.423,10\" o \"5.0E-10\".</li>\r\n  <li><code>culture</code>: impostazione cultura facoltativa che controlla il modo in cui <code>text</code> viene interpretato, ad esempio \"it-IT\".</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore numerico di <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Ottenere il valore numerico di <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Indica se il valore è pari.",
        "Documentation.LongDescription": "Indica se il valore <code>number</code> è pari restituendo <code>true</code> se è pari, in caso contrario <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificare se 625 è un numero pari.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Verificare se 82 è un numero pari.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Indica se il valore è NaN (non un numero).",
        "Documentation.LongDescription": "Indica se il valore è NaN (non un numero). Restituisce <code>true</code> se <code>number</code> è equivalente a <code>Number.IsNaN</code>, in caso contrario <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificare se 0 diviso per 0 è NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Verificare se 1 diviso per 0 è NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Indica se il valore è dispari.",
        "Documentation.LongDescription": "Indica se il valore è dispari. Restituisce <code>true</code> se <code>number</code> è un numero dispari, in caso contrario <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Verificare se 625 è un numero dispari.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Verificare se 82 è un numero dispari.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Restituisce il logaritmo naturale del numero.",
        "Documentation.LongDescription": "Restituisce il logaritmo naturale del numero <code>number</code>. Se <code>number</code> è Null, <code>Number.Ln</code> restituisce Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il logaritmo naturale di 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Restituisce il logaritmo del numero alla base specificata (predefinito e).",
        "Documentation.LongDescription": "Restituisce il logaritmo di un numero, <code>number</code>, alla base <code>base</code> specificata. Se <code>base</code> non è specificato, il valore predefinito è Number.E.\r\n    Se <code>number</code> è Null, <code>Number.Log</code> restituisce Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il logaritmo in base 10 di 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Ottenere il logaritmo in base e di 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Restituisce il logaritmo in base 10 del numero.",
        "Documentation.LongDescription": "Restituisce il logaritmo in base 10 di un numero, <code>number</code>. Se <code>number</code> è Null, <code>Number.Log10</code> restituisce Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il logaritmo in base 10 di 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Restituisce il numero arrotondato. È possibile specificare il numero di cifre e la modalità di arrotondamento.",
        "Documentation.LongDescription": "Restituisce il risultato dell'arrotondamento di <code>number</code> al numero più vicino. Se <code>number</code> è Null, <code>Number.Round</code> restituisce Null.<br>\r\n      <br>\r\n      Per impostazione predefinita, <code>number</code> viene arrotondato all'intero più vicino e i legami vengono interrotti mediante l'arrotondamento al numero pari più vicino con <code>RoundingMode.ToEven</code>.<br>\r\n      <br>\r\n      È tuttavia possibile eseguire l'override di queste impostazioni predefinite con i parametri facoltativi seguenti.\r\n      <ul>\r\n        <li><code>digits</code>: fa in modo che <code>number</code> venga arrotondato al numero specificato di cifre decimali.</li>\r\n        <li><code>roundingMode</code>: esegue l'override del comportamento predefinito di interruzione dei legami quando <code>number</code> si trova in corrispondenza del punto intermedio tra due potenziali valori arrotondati.\r\n      (Per i possibili valori, vedere <code>RoundingMode.Type</code>).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arrotondare 1,234 all'intero più vicino.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arrotondare 1,56 all'intero più vicino.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Arrotondare 1,2345 a due posizioni decimali.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Arrotondare 1,2345 a tre posizioni decimali (arrotondamento per eccesso).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Arrotondare 1,2345 a tre posizioni decimali (arrotondamento per difetto).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Restituisce il risultato dell'arrotondamento dei numeri positivi per eccesso e dei numeri negativi per difetto. È possibile specificare il numero di cifre.",
        "Documentation.LongDescription": "Restituisce il risultato dell'arrotondamento di <code>number</code> in base al segno del numero. Questa funzione arrotonda i numeri positivi per eccesso e i numeri negativi per difetto.\r\n    Se è specificato <code>digits</code>, <code>number</code> viene arrotondato al numero di cifre decimali di <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arrotondare il valore assoluto del numero -1,2.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Arrotondare il valore assoluto del numero 1,2.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Arrotondare il numero -1,234 a due posizioni decimali dallo zero.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Restituisce il numero più elevato precedente. È possibile specificare il numero di cifre.",
        "Documentation.LongDescription": "Restituisce il risultato dell'arrotondamento <code>number</code> verso il basso all'intero più alto precedente. Se <code>number</code> è Null, questa funzione restituisce Null.\r\n\r\n    Se viene specificato <code>digits</code>, <code>number</code> viene arrotondato al numero di cifre decimali specificato.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arrotondare per difetto 1,234 all'intero.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Arrotondare per difetto 1,999 all'intero.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Arrotondare 1,999 per difetto a due posizioni decimali.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Restituisce il risultato dell'arrotondamento dei numeri positivi per difetto e dei numeri negativi per eccesso. È possibile specificare il numero di cifre.",
        "Documentation.LongDescription": "Restituisce il risultato dell'arrotondamento di <code>number</code> in base al segno del numero. Questa funzione arrotonda i numeri positivi per difetto e i numeri negativi per eccesso.\r\n    Se è specificato <code>digits</code>, <code>number</code> viene arrotondato al numero di cifre decimali di <code>digits</code>.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arrotondare per eccesso il numero -1,2.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Arrotondare per eccesso il numero 1,2.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Arrotondare il numero -1,234 a due posizioni decimali verso lo zero.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Restituisce il numero più elevato successivo. È possibile specificare il numero di cifre.",
        "Documentation.LongDescription": "Restituisce il risultato dell'arrotondamento di <code>number</code> fino al successivo numero intero più alto. Se <code>number</code> è Null, questa funzione restituisce null.\r\n    Se viene specificata <code>digits</code>, <code>number</code> viene arrotondato al numero specificato di cifre decimali.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Arrotondare per eccesso 1,234 all'intero.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Arrotondare per eccesso 1,999 all'intero.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Arrotondare 1,234 per eccesso a due posizioni decimali.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Restituisce 1 se il numero è positivo, -1 se è negativo e 0 se è zero.",
        "Documentation.LongDescription": "Restituisce 1 se <code>number</code> è un numero è positivo, -1 se è un numero negativo e 0 se è zero.\r\n    Se <code>number</code> è Null, <code>Number.Sign</code> restituisce Null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinare il segno di 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Determinare il segno di -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Determinare il segno di 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Restituisce il seno del numero.",
        "Documentation.LongDescription": "Restituisce il seno di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Trovare il seno dell'angolo 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Restituisce il seno iperbolico del numero.",
        "Documentation.LongDescription": "Restituisce il seno iperbolico di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Restituisce la radice quadrata del numero.",
        "Documentation.LongDescription": "Restituisce la radice quadrata di <code>number</code>.\r\n    Se <code>number</code> è Null, <code>Number.Sqrt</code> restituisce Null. Se è un valore negativo, viene restituito <code>Number.NaN</code> (non un numero).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare la radice quadrata di 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Trovare la radice quadrata di 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Restituisce la tangente del numero.",
        "Documentation.LongDescription": "Restituisce la tangente di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Trovare la tangente dell'angolo 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Restituisce la tangente iperbolica del numero.",
        "Documentation.LongDescription": "Restituisce la tangente iperbolica di <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Convertire il numero specificato in testo.",
        "Documentation.LongDescription": "Converte il valore numerico <code>number</code> in un valore di testo in base al formato specificato da <code>format</code>.<br>\r\n    <br>\r\n    Il formato è un valore di testo che indica come convertire il numero. Per ulteriori informazioni sui valori di formato supportati, passare a https://go.microsoft.com/fwlink/?linkid=2241210 e https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    È anche possibile specificare un <code>culture</code> facoltativo, ad esempio \"it-IT\", per controllare il comportamento di <code>format</code> dipendente dalle impostazioni cultura.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Convertire un numero in testo senza specificare un formato.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Convertire un numero in formato esponenziale.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Convertire un numero in formato percentuale con una sola posizione decimale.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Restituisce una tabella di feed OData offerti da un servizio OData.",
        "Documentation.LongDescription": "Restituisce una tabella di feed OData offerti da un servizio OData da un URI <code>serviceUri</code>, intestazioni <code>headers</code>. È possibile specificare un valore booleano che specifica se utilizzare connessioni simultanee o un parametro di record facoltativo, <code>options</code>, per controllare le opzioni seguenti:\r\n    <ul>\r\n    <li><code>Query</code>: aggiungere parametri di query all'URL a livello di codice senza doversi preoccupare di escape. </li>\r\n    <li> <code>Headers</code>: se si specifica questo valore come record, verranno specificate intestazioni aggiuntive per una richiesta HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: Se si specifica questo valore come elenco, le chiavi di intestazione HTTP non verranno escluse dal calcolo per la memorizzazione nella cache dei dati.</li>\r\n    <li> <code>ApiKeyName</code>: se il sito di destinazione ha una nozione di chiave API, questo parametro può essere usato per specificare il nome (non il valore) del parametro chiave che deve essere usato nell'URL. Il valore della chiave effettivo è specificato nella credenziali.</li>\r\n    <li> <code>Timeout</code>: se si specifica questo valore come durata, il timeout di una richiesta HTTP verrà modificato. Il valore predefinito è 600 secondi.</li>\r\n    <li> <code>EnableBatch</code>: valore logico (true/false) che imposta se consentire la generazione di una richiesta di $batch OData se MaxUriLength viene superato (il valore predefinito è false).</li>\r\n    <li> <code>MaxUriLength</code>: numero che indica la lunghezza massima di un URI consentito inviato a un servizio OData. Se è stato superato e EnableBatch è true, la richiesta verrà effettuata a un endpoint OData $batch, in caso contrario avrà esito negativo (il valore predefinito è 2048).</li>\r\n    <li> <code>Concurrent</code> : valore logico (true/false) che se impostato su true, le richieste al servizio verranno effettuate contemporaneamente. Se impostato su false, le richieste verranno effettuate in sequenza. Se non è specificato, il valore verrà determinato dall'annotazione AsynchronousRequestsSupported del servizio. Se il servizio non specifica se AsynchronousRequestsSupported è supportato, le richieste verranno effettuate in modo sequenziale.</li>\r\n    <li> <code>ODataVersion</code>: numero (3 o 4) che specifica la versione del protocollo OData da utilizzare per questo servizio OData. Se non è specificato, verranno richieste tutte le versioni supportate. La versione del servizio verrà determinata dall'intestazione OData-Version restituita dal servizio.</li>\r\n    <li> <code>FunctionOverloads</code>: un valore logico (true/false) se è impostato su true, gli overload di importazione delle funzioni verranno elencati nello strumento di spostamento come voci separate. Se impostato su false, gli overload di importazione delle funzioni verranno elencati come una funzione di unione nello strumento di spostamento. Valore predefinito per V3: false. Valore predefinito per V4: true.</li>\r\n    <li> <code>MoreColumns</code>: espressione logica (true/false) se impostata su true, aggiunge una colonna \"More Columns\" a ogni feed di entità contenente tipi aperti e tipi polimorfici. Contiene i campi non dichiarati nel tipo di base. Se è false, questo campo non è presente. L'impostazione predefinita è false.</li>\r\n    <li> <code>IncludeAnnotations</code>: elenco delimitato da virgole di criteri o nomi di termini qualificati dello spazio dei nomi da includere con \"*\" come carattere jolly. Per impostazione predefinita, nessuna delle annotazioni è inclusa.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: elenco delimitato da virgole di nomi di termine qualificati o modelli di spazio dei nomi da includere nelle richieste di documenti di metadati, con \"*\" come carattere jolly. Per impostazione predefinita, include le stesse annotazioni di IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : consente al servizio OData di evitare di scrivere determinati valori nelle risposte. Se confermato dal servizio, tali valori verranno dedotti dai campi omessi. Le opzioni includono:\r\n      <ul>\r\n      <li><code>ODataOmitValues.Nulls</code> : consente al servizio OData di omettere valori Null.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Specifica l'implementazione del connettore OData da usare. I valori validi sono \"2.0\" o Null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Collegarsi al servizio TripPin OData.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Restituisce il risultato del tentativo di dedurre le capacità SQL per un driver ODBC.",
        "Documentation.LongDescription": "Restituisce il risultato del tentativo di dedurre le capacità SQL con la stringa di connessione <code>connectionString</code> usando ODBC. <code>connectionString</code> può essere un testo o un record di coppie valore-proprietà. I valori di proprietà possono essere di testo o numerici.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Restituisce le funzionalità SQL dedotte per una stringa di connessione.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Restituisce il contenuto del documento Parquet come tabella.",
        "Documentation.LongDescription": "Restituisce i contenuti del documento Parquet come tabella. Le opzioni includono:\n    <ul>\n    <li> <code>TypeMapping</code> : un valore di testo che controlla il mapping del tipo predefinito durante la lettura e la scrittura di file. Il valore predefinito è Null e cerca di essere il più fedele possibile al tipo originale. Un valore di \"Sql\" produrrà risultati più compatibili con SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Restituisce un valore percentuale dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>percentuale</code> dal dato <code>value</code>. Se il dato <code>value</code> è <code>null</code>, <code>Percentage.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> è <code>testo</code> con un simbolo percentuale finale, viene restituito il numero decimale convertito. In caso contrario, il valore viene convertito in un <code>numero</code> usando <code>Number.From</code>. È anche possibile specificare un valore <code>culture</code> opzionale (ad esempio \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>percentage</code> di <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Restituisce un record di frame di dati dal file RData.",
        "Documentation.LongDescription": "Restituisce un record di frame di dati dal file RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Combina i record nell'elenco specificato.",
        "Documentation.LongDescription": "Combina i record nell'elemento specificato <code>records</code>. Se <code>records</code> contiene valori non di record, viene restituito un errore.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Creare un record combinato dai record.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Restituisce il numero di campi nel record.",
        "Documentation.LongDescription": "Restituisce il numero di campi nel record <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di campi nel record.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Restituisce i nomi dei campi.",
        "Documentation.LongDescription": "Restituisce come testo i nomi dei campi nel record <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare i nomi dei campi nel record.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Restituisce un elenco dei valori dei campi.",
        "Documentation.LongDescription": "Restituisce un elenco dei valori dei campi nel record <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Trovare i valori dei campi nel record.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Crea un record da una tabella nel formato {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Restituisce un record da una tabella di record <code>table</code> contenenti i nomi di campi e i nomi di valori <code>{[Name = name, Value = value]}</code>. Se i nomi di campi non sono univoci, viene generata un'eccezione.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Creare un record dalla tabella nel formato Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Restituisce l'elenco dei valori contenenti i valori dei campi del record di input.",
        "Documentation.LongDescription": "Restituisce l'elenco dei valori contenenti i valori dei campi dell'input <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Estrarre i valori dei campi da un record.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Restituisce un albero della sintassi astratta (AST) che rappresenta l'accesso a una colonna all'interno di un'espressione di riga.",
        "Documentation.LongDescription": "Restituisce un albero della sintassi astratta (AST) che rappresenta l'accesso alla colonna <code>columnName</code> della riga all'interno di un'espressione di riga.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crea un albero sintattico astratto che rappresenta l'accesso della colonna \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Restituisce l'albero della sintassi astratta (AST) per il corpo di una funzione.",
        "Documentation.LongDescription": "<p>Restituisce l'albero della sintassi astratta per il corpo di <code>function</code>, normalizzato in una <i>row expression</i>:\r\n<ul>\r\n  <li>La funzione deve essere un'espressione lambda con 1 argomento.</li>\r\n  <li>Tutti i riferimenti al parametro della funzione vengono sostituiti con <code>RowExpression.Row</code>.</li>\r\n  <li>Tutti i riferimenti alle colonne vengono sostituiti con <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>L'AST sarà semplificato in modo da contenere solo nodi dei tipi:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Un errore viene generato se non è possibile restituire un'espressione di riga AST per il corpo di <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Restituisce l'albero sintattico astratto per il corpo della funzione <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Crea un valore Single dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore Single <code>numero</code> dal dato <code>value</code>. Se il dato<code>value</code> è <code>null</code>, <code>Single.From</code> restituisce <code>null</code>.  Se il dato <code>value</code> si trova nell’intervallo di Single <code>numero</code>, <code>value</code> viene restituito, in caso contrario, viene restituito un errore. Se <code>value</code> è di qualsiasi altro tipo, verrà prima convertito in un <code>numero</code> usando <code>Number.FromText</code>. È anche possibile specificare <code>culture</code> facoltativo (ad esempio \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Ottenere il valore <code>number</code> Single di <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Restituisce una tabella di dati da un endpoint di indice Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Effettua una chiamata all'API REST Smartsheet 2.0 all'endpoint specificato e trasforma l'elemento dati restituito in una tabella.",
        "Documentation.Examples": [
          {
            "Description": "Esegue il pull di una tabella di informazioni sugli utenti dall'API Smartsheet",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Tabella con le informazioni sugli utenti come restituita dall'API Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza di uno qualsiasi dei delimitatori specificati.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza di uno qualsiasi dei delimitatori specificati.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input per virgola o punto e virgola, ignorando le virgolette e i delimitatori tra virgolette, iniziando dall'inizio dell'input.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Dividere l'input per virgola o punto e virgola, ignorando le virgolette e i delimitatori tra virgolette, iniziando dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in base al delimitatore specificato.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in base al delimitatore specificato.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input per virgola, ignorando le virgole tra virgolette.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza di ogni delimitatore specificato in sequenza.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza di ogni delimitatore specificato in sequenza.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input per virgola, quindi punto e virgola, a partire dall'inizio dell'input.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Dividere l'input per virgola, quindi punto e virgola, trattando le virgolette come qualsiasi altro carattere e iniziando dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in base alla lunghezza specificata.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in base alla lunghezza specificata.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input nei primi due caratteri seguiti dai tre successivi, a partire dall'inizio dell'input.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Dividere l'input nei primi tre caratteri seguiti dai due successivi, a partire dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza della posizione specificata.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo in corrispondenza della posizione specificata.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input in corrispondenza delle posizioni specificate, a partire dall'inizio dell'input.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Dividere l'input in corrispondenza delle posizioni specificate, a partire dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo in base alle lunghezze e agli offset specificati.",
        "Documentation.LongDescription": "Restituisce una funzione che divide il testo in un elenco di testo in base agli offset e alle lunghezze specificati. La lunghezza Null indica che tutti gli input rimanenti devono essere inclusi.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere l'input in base alle coppie di posizione e lunghezza specificate, a partire dall'inizio dell'input. Si noti che gli intervalli in questo esempio si sovrappongono.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Dividere l'input in base alle coppie di posizione e lunghezza specificate, a partire dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Dividere l'input in un codice postale a lunghezza fissa seguito da un nome di città a lunghezza variabile.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Restituisce una funzione che suddivide il testo in un elenco di testo dopo la lunghezza specificata ripetutamente.",
        "Documentation.LongDescription": "Restituisce una funzione che suddivide il testo in un elenco di testo dopo la lunghezza specificata ripetutamente.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Dividere ripetutamente l'input in blocchi di tre caratteri, a partire dall'inizio dell'input.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Dividere ripetutamente l'input in blocchi di tre caratteri, a partire dalla fine dell'input.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Restituisce il numero approssimativo di righe nella tabella.",
        "Documentation.LongDescription": "Restituisce il numero approssimativo di righe nel <code>table</code>o un errore se l'origine dati non supporta l'approssimazione.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Stimare il numero di combinazioni distinte di città e stato in una tabella di grandi dimensioni, che può essere usata come stima di cardinalità per le colonne. Le stime della cardinalità sono sufficientemente importanti da supportare questa particolare approssimazione da parte di diverse origini dati, ad esempio SQL Server, spesso usando un algoritmo denominato HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Restituisce il numero di colonne nella tabella.",
        "Documentation.LongDescription": "Restituisce il numero di colonne nella tabella <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di colonne nella tabella.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Restituisce i nomi di colonna come elenco.",
        "Documentation.LongDescription": "Restituisce i nomi di colonna nella tabella <code>table</code> come elenco di testo.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare i nomi di colonna della tabella.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Restituisce la prima riga o un valore predefinito specificato.",
        "Documentation.LongDescription": "Restituisce la prima riga di <code>table</code> o il valore predefinito facoltativo <code>default</code>, se la tabella è vuota.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare la prima riga della tabella.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Trovare la prima riga della tabella <code>({})</code> o restituire [a = 0, b = 0] se vuota.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Restituisce la prima colonna della prima riga della tabella o un valore predefinito specificato.",
        "Documentation.LongDescription": "Restituisce la prima colonna della prima riga della tabella <code>table</code> o un valore predefinito specificato.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Indica se la tabella contiene solo le righe distinte (nessun duplicato).",
        "Documentation.LongDescription": "Indica se <code>table</code> contiene solo le righe distinte (nessun duplicato). Restituisce <code>true</code> se le righe sono distinte, in caso contrario <code>false</code>.\r\n    Il parametro facoltativo <code>comparisonCriteria</code> specifica le colonne della tabella da testare per la duplicazione. Se <code>comparisonCriteria</code> non viene specificato, verranno testate tutte le colonne.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella è distinta.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinare se la tabella è distinta nella colonna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Indicare se la tabella contiene righe.",
        "Documentation.LongDescription": "Indica se <code>table</code> contiene righe. Restituisce <code>true</code> se non sono presenti righe, ad esempio se la tabella è vuota, in caso contrario <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinare se la tabella è vuota.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinare se la tabella <code>({})</code> è vuota.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Restituisce le chiavi della tabella specificata.",
        "Documentation.LongDescription": "Restituisce le chiavi della tabella specificata.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Recupera l'elenco delle chiavi per una tabella.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Restituisce l'ultima riga o un valore predefinito specificato.",
        "Documentation.LongDescription": "Restituisce l'ultima riga di <code>table</code> o il valore predefinito facoltativo <code>default</code>, se la tabella è vuota.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'ultima riga della tabella.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Trovare l'ultima riga della tabella <code>({})</code> o restituire [a = 0, b = 0] se vuota.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Restituisce il numero di righe nella tabella.",
        "Documentation.LongDescription": "Restituisce il numero di righe in <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di righe nella tabella.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Restituisce l'unica riga della tabella.",
        "Documentation.LongDescription": "Restituisce l'unica riga di <code>table</code> a una sola riga. Se <code>table</code> contiene più di una riga, verrà generata un'eccezione.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Restituire l'unica riga della tabella.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Crea un elenco di elenchi annidati di valori di colonna da una tabella.",
        "Documentation.LongDescription": "Crea un elenco di elenchi annidati dalla tabella <code>table</code>.  Ogni voce di elenco è un elenco interno contenente i valori di colonna.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco dei valori di colonna dalla tabella.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Converte una tabella in un elenco applicando la funzione di combinazione specificata a ogni riga di valori nella tabella.",
        "Documentation.LongDescription": "Converte una tabella in un elenco applicando la funzione di combinazione specificata a ogni riga di valori nella tabella.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Combinare il testo di ogni riga con una virgola.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Converte una tabella in un elenco di record.",
        "Documentation.LongDescription": "Converte la tabella <code>table</code> in un elenco di record.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Converte la tabella in un elenco di record.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Crea un elenco di elenchi annidati di valori di riga da una tabella.",
        "Documentation.LongDescription": "Crea un elenco di elenchi annidati dalla tabella <code>table</code>.  Ogni voce di elenco è un elenco interno contenente i valori di riga.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco dei valori di riga dalla tabella.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Crea un record di errore modificato che non attiva un fallback quando viene generato da un gestore definito in una vista (tramite Table.View).",
        "Documentation.LongDescription": "Crea un record di errore modificato da <code>errorRecord</code> che non attiva un fallback quando viene generato da un gestore definito in una vista (tramite Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Crea una funzione che può essere intercettata da un gestore definito in una vista (tramite Table.View).",
        "Documentation.LongDescription": "<p>Crea una funzione di visualizzazione basata su<code>function</code>che può essere gestita in una vista creata da <code>Table.View</code>.</p>\r\n<p>È possibile usare il gestore <code>OnInvoke</code> di <code>Table.View</code> per definire un gestore per la funzione di visualizzazione.</p>\r\n<p>Come per i gestori di operazioni predefinite, se non viene specificato un gestore <code>OnInvoke</code> o se questo non gestisce la funzione di visualizzazione, oppure se il gestore genera un errore,<code>function</code>viene applicato sopra la vista.</p>\r\n<p>Per una descrizione più dettagliata di <code>Table.View</code> e delle funzioni di visualizzazione personalizzate, vedere la documentazione pubblicata.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Restituisce il valore di testo con tutti i caratteri di controllo rimossi.",
        "Documentation.LongDescription": "Restituisce un valore di testo con tutti i caratteri di controllo di <code>text</code> rimossi.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere gli avanzamenti riga e altri caratteri di controllo da un valore di testo.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Concatena un elenco di valori di testo in un unico valore di testo.",
        "Documentation.LongDescription": "Restituisce il risultato della combinazione dell'elenco di valori di testo, <code>texts</code>, in un singolo valore di testo. Tutti i valori <code>null</code> presenti in <code>texts</code> vengono ignorati.\r\n    È possibile specificare un <code>separator</code> facoltativo utilizzato nel testo combinato finale.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Combinare i valori di testo \"Seattle\" e \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Combinare i valori di testo \"Seattle\" e \"WA\" separati da una virgola e uno spazio.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Combinare i valori \"Seattle\", <code>null</code> e \"WA\", separati da una virgola e uno spazio. Si noti che <code>null</code> viene ignorato.",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Crea un valore di testo dal valore specificato.",
        "Documentation.LongDescription": "Restituisce la rappresentazione di testo di <code>value</code>. <code>value</code> può essere un valore <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> o <code>binary</code>.\r\n    Se il valore specificato è Null, <code>Text.From</code> restituisce Null. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Creare un valore di testo dal numero 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Decodifica i dati da un formato binario in testo.",
        "Documentation.LongDescription": "Decodifica i dati <code>binary</code> da un valore binario in un valore di testo mediante il tipo <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Deduce il tipo di numero granulare (Int64.Type, Double.Type e così via) di un numero codificato in testo.",
        "Documentation.LongDescription": "Deduce il tipo di numero granulare (Int64.Type, Double.Type e così via) di <code>text</code>. Viene generato un errore se <code>text</code> non è un numero. È anche possibile specificare un valore <code>culture</code> facoltativo, (ad esempio \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Restituisce il numero di caratteri.",
        "Documentation.LongDescription": "Restituisce il numero di caratteri nel testo <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di caratteri presenti nel testo \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Converte tutti i caratteri in minuscolo.",
        "Documentation.LongDescription": "Restituisce il risultato della conversione in minuscolo di tutti i caratteri in <code>text</code>. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la versione in minuscolo di \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Converte in maiuscolo la prima lettera di ogni parola.",
        "Documentation.LongDescription": "Restituisce il risultato della conversione in maiuscolo solo della prima lettera di ogni parola nel valore di testo <code>text</code>. Tutte le altre lettere vengono restituite in minuscolo. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Utilizzare <code>Text.Proper</code> in una frase semplice.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Inverte il testo <code>text</code> specificato.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Inverte il testo \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codifica il testo in un formato binario.",
        "Documentation.LongDescription": "Codifica il valore di testo specificato <code>text</code> in un valore binario mediante <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Restituisce un elenco di valori di carattere dal valore di testo specificato.",
        "Documentation.LongDescription": "Restituisce un elenco di valori di carattere dal valore di testo specificato <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Creare un elenco di valori di carattere dal testo \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Rimuove tutti gli spazi iniziali e finali.",
        "Documentation.LongDescription": "Restituisce il risultato della rimozione di tutti gli spazi iniziali e finali dal valore di testo <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere gli spazi iniziali e finali da \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Rimuove tutti gli spazi finali.",
        "Documentation.LongDescription": "Restituisce il risultato della rimozione di tutti gli spazi finali dal valore di testo <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere gli spazi finali da \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Rimuove tutti gli spazi iniziali.",
        "Documentation.LongDescription": "Restituisce il risultato della rimozione di tutti gli spazi iniziali dal valore di testo <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rimuovere gli spazi iniziali da \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Converte tutti i caratteri in maiuscolo.",
        "Documentation.LongDescription": "Restituisce il risultato della conversione in maiuscolo di tutti i caratteri in <code>text</code>. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la versione in maiuscolo di \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Restituisce la fine dell’ora.",
        "Documentation.LongDescription": "Restituisce la fine dell'ora rappresentata da <code>dateTime</code>, inclusi i secondi frazionari. Le informazioni del fuso orario sono mantenute.\r\n      <ul>\r\n        <li><code>dateTime</code>: valore <code>time</code>, <code>datetime</code> o <code>datetimezone</code> da cui viene calcolata la fine dell'ora.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ottenere la fine dell'ora per 5/14/2011 05:00:00 PM.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Ottenere la fine dell'ora per 5/17/2011 05:00:00 PM -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Crea un'ora dal valore specificato.",
        "Documentation.LongDescription": "Restituisce un valore <code>time</code> dall'elemento <code>value</code> specificato. È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".\r\nSe l'elemento specificato <code>value</code> è <code>null</code>, <code>Time.From</code> restituisce <code>null</code>. Se l'elemento specificato <code>value</code> è <code>time</code>, viene restituito <code>value</code>. I valori dei tipi seguenti possono essere convertiti in un valore <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: valore <code>time</code> dalla rappresentazione testuale. Per informazioni, vedere <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: componente ora di <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: componente ora dell'equivalente datetime locale di <code>value</code>.</li>\r\n        <li><code>number</code>: elemento <code>time</code> equivalente al numero di giorni frazionari espressi da <code>value</code>. Se <code>value</code> è negativo o maggiore o uguale a 1, viene restituito un errore.</li>\r\n      </ul>\r\nSe <code>value</code> è di altro tipo, viene restituito un errore.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>0.7575</code> in un valore <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Converte <code>#datetime(1899, 12, 30, 06, 45, 12)</code> in un valore <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Crea un'ora da formati di ora locali, universali e personalizzati.",
        "Documentation.LongDescription": "Crea un valore <code>time</code> da una rappresentazione testuale <code>text</code>. È possibile specificare un parametro facoltativo <code>record</code> <code>options</code> per specificare proprietà aggiuntive. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: valore <code>text</code> che indica il formato da usare. Per maggiori informazioni, vedere: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>Null</code> verrà eseguita l'analisi dell'ora nel miglior modo possibile.</li>\r\n   <li><code>Impostazioni cultura</code>: quando <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"tt\"</code> è <code>\"AM\" o \"PM</code>, mentre in <code>\"ar-EG\"</code> <code>\"tt\"</code> è <code>\"ص\", o \"م\"</code>. Quando <code>Formato</code> è <code>Null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Impostazioni cultura</code> è <code>Null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare i flussi di lavoro legacy, <code>options</code> può essere anche un valore di testo. Questo comportamento è identico a quello di <code>options</code><code>= [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converte <code>\"10:12:31am\"</code> in un valore di ora.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Converte <code>1012</code> in un valore Time.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Converte <code>10</code> in un valore Time.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Restituisce il componente ora.",
        "Documentation.LongDescription": "Restituisce il componente ora del valore <code>time</code>, <code>datetime</code> o <code>datetimezone</code> specificato <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'ora in #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Restituisce il componente minuto.",
        "Documentation.LongDescription": "Restituisce il componente minuto del valore <code>time</code>, <code>datetime</code> o <code>datetimezone</code> specificato <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Trovare il minuto in #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Restituisce il componente secondo.",
        "Documentation.LongDescription": "Restituisce il componente secondo del valore <code>time</code>, <code>datetime</code> o <code>datetimezone</code> specificato <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Trova il secondo valore da un valore datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Restituisce l'inizio dell’ora.",
        "Documentation.LongDescription": "Restituisce l’inizio dell’ora rappresentato da <code>dateTime</code>.\r\n    <code>dateTime</code> deve essere un valore <code>time</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Trovare l'inizio dall'ora per il 10 ottobre 2011, 8.10.32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Restituisce un record contenente le parti del valore di ora.",
        "Documentation.LongDescription": "Restituisce un record contenente le parti del valore di ora specificato <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: valore <code>time</code> da cui deve essere calcolato il record delle parti.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Converte il valore <code>#time(11, 56, 2)</code> in un record contenente i valori di ora.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Restituisce una rappresentazione testuale del valore di ora.",
        "Documentation.LongDescription": "Restituisce una rappresentazione testuale di <code>time</code>. Per specificare proprietà aggiuntive, è possibile fornire un parametro facoltativo <code>record</code> <code>options</code>. <code>culture</code> viene usato solo per i flussi di lavoro legacy. Il <code>record</code> può contenere i campi seguenti:\r\n<ul>\r\n   <li><code>Formato</code>: un valore <code>text</code> che indica il formato da usare. Per maggiori dettagli, vedere: https://go.microsoft.com/fwlink/?linkid=2180104 e https://go.microsoft.com/fwlink/?linkid=2180105. Se si omette questo campo o si specifica <code>Null</code>, verrà eseguita la formattazione della data usando l'impostazione predefinita, definita da <code>Impostazioni cultura</code>.</li>\r\n   <li><code>Impostazioni cultura</code>: se <code>Formato</code> non è Null, <code>Impostazioni cultura</code> controlla alcuni identificatori di formato. Ad esempio, in <code>\"en-US\"</code> <code>\"tt\"</code> è <code>\"AM\" o \"PM\"</code>, mentre in <code>\"ar-EG\"</code> <code>\"tt\"</code> è <code>\"ص\", o \"م\"</code>. Quando <code>Formato</code> è <code>Null</code>, <code>Impostazioni cultura</code> controlla il formato predefinito da usare. Quando <code>Culture</code> è <code>Null</code> od omesso, viene usato <code>Culture.Current</code>.</li>\r\n</ul>\r\nPer supportare flussi di lavoro legacy <code>options</code> e <code>culture</code> possono essere anche valori di testo. Questo comportamento è identico a quello se <code>options</code><code>= [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertire <code>#date(01, 30, 25)</code> in un valore <code>text</code>. <i> L'output dei risultati può variare a seconda delle impostazioni cultura correnti.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Eseguire la conversione usando un formato personalizzato e le impostazioni cultura tedesche.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Eseguire la conversione usando il formato dell'ora solare.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Restituisce una versione chiusa del tipo di record specificato (o dello stesso tipo, se è già chiuso).",
        "Documentation.LongDescription": "Restituisce una versione chiusa del tipo di <code>record</code> <code>type</code> specificato (o dello stesso tipo, se è già chiuso).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Creare una versione chiusa di <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Restituisce i facet di un tipo.",
        "Documentation.LongDescription": "Restituisce un record contenente i facet di <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Restituisce un record con valori di campo impostati sul nome dei parametri di un tipo di funzione e i relativi valori impostati sui tipi corrispondenti.",
        "Documentation.LongDescription": "Restituisce un record con valori di campo impostati sul nome dei parametri di <code>type</code> e i relativi valori impostati sui tipi corrispondenti.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trovare i tipi dei parametri alla funzione <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Restituisce un numero che indica il numero minimo di parametri necessari per richiamare il tipo di funzione.",
        "Documentation.LongDescription": "Restituisce un numero che indica il numero minimo di parametri necessari per richiamare l'elemento <code>type</code> di input della funzione.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trovare il numero di parametri necessari alla funzione <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Restituisce un tipo restituito da un tipo di funzione.",
        "Documentation.LongDescription": "Restituisce un tipo restituito da un <code>type</code> di funzione.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trovare il tipo restituito di <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Restituisce true se il tipo è un tipo nullable; in caso contrario, false.",
        "Documentation.LongDescription": "Restituisce <code>true</code> se un tipo è <code>nullable</code>; in caso contrario, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinare se <code>number</code> è nullable.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Determinare se <code>number</code> è nullable.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Restituisce se un tipo di record è aperto.",
        "Documentation.LongDescription": "Restituisce un valore <code>logical</code> che indica se un record <code>type</code> è aperto.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinare se il record <code>type [ A = number, ...]</code> è aperto.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Restituisce un tipo di elemento da un tipo elenco.",
        "Documentation.LongDescription": "Restituisce un tipo di elemento da un <code>type</code> elenco.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trovare il tipo di elemento dall'elenco <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Restituisce il tipo non nullable da un tipo.",
        "Documentation.LongDescription": "Restituisce il tipo non <code>nullable</code> da <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Restituire il tipo non nullable di <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Restituisce una versione aperta del tipo di record specificato (o dello stesso tipo, se è già aperto).",
        "Documentation.LongDescription": "Restituisce una versione aperta del tipo di <code>record</code> <code>type</code> specificato (o dello stesso tipo, se è già aperto).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Creare una versione aperta di <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Restituisce un record che descrive i campi di un tipo di record in cui ogni campo del tipo di record restituito ha un nome e un valore corrispondente.",
        "Documentation.LongDescription": "Restituisce un record che descrive i campi di un record <code>type</code>. Ogni campo del tipo di record restituito ha un nome e un valore corrispondente, nel formato di un record <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Trovare il nome e il valore del record <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Restituisce l'elenco di chiavi probabilmente vuoto per il tipo di tabella specificato.",
        "Documentation.LongDescription": "Restituisci l'elenco di chiavi probabilmente vuoto per il tipo di tabella specificato.<br>\r\n    <br>\r\n    Ogni chiave è definita usando un record nel formato seguente:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: un elenco di nomi di colonne che definiscono la chiave\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code> se la chiave è la chiave primaria della tabella; altrimenti, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Restituisci le informazioni chiave per un tipo di tabella.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Restituisce il tipo di riga del tipo di tabella.",
        "Documentation.LongDescription": "Restituisce il tipo di riga del tipo di tabella specificato. Il risultato sarà sempre un tipo di record.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Restituisce le informazioni sul tipo di riga per una tabella semplice.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Restituisce l'unione di un elenco di tipi.",
        "Documentation.LongDescription": "Restituisce l'unione dei tipi in <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Assemblare un record in una stringa di query URI.",
        "Documentation.LongDescription": "Assemblare il record <code>query</code> in una stringa di query URI, usando i caratteri di escape appropriati.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codificare una stringa di query contenente caratteri speciali.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Codifica i caratteri speciali in base allo standard RFC 3986.",
        "Documentation.LongDescription": "Codifica i caratteri speciali nell'input <code>data</code> in base alle regole dello standard RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codificare i caratteri speciali in \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Restituisce le parti dell'URI assoluto di input come record.",
        "Documentation.LongDescription": "Restituisce le parti di <code>absoluteUri</code> di input come record, contenenti valori quali schema, host, porta, percorso, query, frammento, nome utente e password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Trovare le parti dell'URI assoluto \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Decodifica una stringa codificata in percentuale.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL del Servizio analisi di Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Restituisce il contenuto scaricato dall'URL del Servizio analisi di Azure DevOps come valore binario. Questa funzione usa credenziali diverse a seconda delle organizzazioni."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Immettere l'URL del Servizio analisi di Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Restituisce il contenuto scaricato dall'URL del Servizio analisi di Azure DevOps come valore binario. Questa funzione usa credenziali globali per tutte le organizzazioni accessibili."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Esprime piani di query alternativi.",
        "Documentation.LongDescription": "Esprime piani di query alternativi all'interno di un'espressione del piano di query ottenuta tramite Value.Expression(Value.Optimize(...)). Non destinata ad altri usi.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Restituisce un albero della sintassi astratta (AST) che rappresenta l'espressione del valore.",
        "Documentation.LongDescription": "Restituisce un albero della sintassi astratta (AST) che rappresenta l'espressione del valore",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Crea un valore fortemente tipizzato da una rappresentazione testuale.",
        "Documentation.LongDescription": "Decodifica un valore dalla rappresentazione testuale <code>text</code>e lo interpreta come valore con un tipo appropriato.\r\n    <code>Value.FromText</code> accetta un valore di testo e restituisce un numero, un valore logico, un valore Null, un valore datetime, un valore di durata o un valore di testo. Il valore di testo vuoto viene interpretato come valore Null.\r\n    È anche possibile specificare un valore <code>culture</code> facoltativo, ad esempio \"it-IT\".",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Restituisce un record contenente i metadati di input.",
        "Documentation.LongDescription": "Restituisce un record contenente i metadati di input.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Segnala a Value.Expression di restituire l'espressione ottimizzata per un valore.",
        "Documentation.LongDescription": "Quando usata all'interno di Value.Expression, se <code>value</code> rappresenta una query che può essere ottimizzata, questa funzione indica che deve essere restituita l'espressione ottimizzata. In caso contrario, verrà passato il valore <code>value</code> senza alcun effetto.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Rimuove l'input dei metadati.",
        "Documentation.LongDescription": "Rimuove l'input dei metadati.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Restituisce il tipo del valore specificato.",
        "Documentation.LongDescription": "Restituisce il tipo del valore specificato.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Questa funzione è solo per uso interno.",
        "Documentation.LongDescription": "Questa funzione è solo per uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Restituisce il codice HTML per l'URL specificato, come visualizzato da un Web browser.",
        "Documentation.LongDescription": "Restituisce il codice HTML per il <code>url</code> specificato, visualizzato da un Web browser. È possibile specificare un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n <ul>\r\n <li><code>ApiKeyName</code>: se il sito di destinazione presenta una nozione di una chiave API, questo parametro può essere usato per specificare il nome (non il valore) del parametro chiave che deve essere usato nell'URL. Il valore chiave effettivo viene fornito nelle credenziali.</li>\r\n <li><code>WaitFor</code>: specifica una condizione da attendere prima di scaricare il codice HTML, oltre ad attendere il caricamento della pagina ( operazione sempre eseguita). Può essere un record contenente i campi Timeout e/o Selettore. Se viene specificato solo un timeout, la funzione attenderà la quantità di tempo specificata prima di scaricare il codice HTML. Se vengono specificati sia un selettore che un timeout e il timeout è trascorso prima che il selettore si manifesti nella pagina, verrà generato un errore. Se si specifica un selettore senza timeout, viene applicato un timeout predefinito di 30 secondi.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Accesso ai dati",
        "Documentation.Examples": [
          {
            "Description": "Restituisce il codice HTML per https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Restituisce il codice HTML per https://microsoft.com dopo aver atteso l'aggiunta di un selettore CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Restituisce il codice HTML per https://microsoft.com dopo aver atteso 10 secondi.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Restituisce il codice HTML per https://microsoft.com dopo aver atteso fino a 10 secondi l'aggiunta di un selettore CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Restituisce il contenuto scaricato dall'URL come binario.",
        "Documentation.LongDescription": "Restituisce il contenuto scaricato da <code>url</code> come binario. È possibile specificare un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>Query</code> : Consente di aggiungere i parametri di query all&#39;URL a livello di codice senza aggiungere sequenze di caratteri di escape.</li>\r\n<li><code>ApiKeyName</code> : Se il sito di destinazione prevede la nozione di una chiave API, &#232; possibile usare questo parametro per specificare il nome (non il valore) del parametro della chiave da usare nell&#39;URL. Il valore effettivo della chiave viene fornito nelle credenziali.</li>\r\n<li><code>Headers</code> : Se si specifica questo valore come record, verranno fornite ulteriori intestazioni a una richiesta HTTP.</li>\r\n<li><code>Timeout</code> : Se si specifica questo valore come durata, il timeout per una richiesta HTTP verr&#224; modificato. Il valore predefinito &#232; 100 secondi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Se si specifica questo valore come elenco, queste chiavi di intestazione HTTP sarano escluse dal calcolo per la memorizzazione nella cache dei dati.</li>\r\n<li><code>IsRetry</code> : Se si specifica questo valore logico come true, tutte le risposte esistenti nella cache verranno ignorate durante il recupero dei dati.</li>\r\n<li><code>ManualStatusHandling</code> : Se si specifica questo valore come elenco, verr&#224; impedita qualsiasi attivit&#224; gestione predefinita per le richieste HTTP con risposte contenenti uno di questi codici di stato.</li>\r\n<li><code>RelativePath</code> : Se si specifica questo valore come testo, questo verr&#224; aggiunto all&#39;URL di base prima di effettuare la richiesta.</li>\r\n<li><code>Content</code> : Se si specifica questo valore, la richiesta Web viene modificata da GET a POST, usando il valore dell&#39;opzione come contenuto della richiesta POST.</li>\r\n</ul>\r\n\r\n    La richiesta HTTP viene effettuata come GET (quando non è specificato alcun contenuto) o POST (quando è presente contenuto). Le richieste POST possono essere effettuate solo in forma anonima.\r\n    <br>\r\n    Le intestazioni della risposta HTTP sono disponibili come metadati nel risultato binario. All'esterno di un contesto del connettore dati personalizzato, è disponibile solo un subset di intestazioni di risposta (per motivi di sicurezza).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupera il contenuto di <code>\"https://bing.com/search?q=Power+Query\"</code> usando le opzioni RelativePath e query. Queste opzioni possono essere utilizzate per eseguire query dinamiche su un URL di base statico.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Eseguire un POST su un URL, passando un payload JSON binario e analizzando la risposta come JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Connettersi a un URL sicuro che accetta una chiave di autenticazione nella relativa stringa di query. Invece di usare la chiave privata hardcoded in M (che costituisce un rischio per la sicurezza), \r\n    è possibile fornire la chiave in modo sicuro specificandone il nome (non il valore) in M, scegliendo l'autenticazione API Web e immettendo il valore della chiave nelle credenziali dell'API Web.\r\n    Se usato in questo modo, l'esempio seguente genererà una richiesta di <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Restituisce le intestazioni HTTP scaricate dall'URL come valore di record.",
        "Documentation.LongDescription": "Restituisce le intestazioni scaricate da <code>url</code> come record. È possibile specificare un parametro di record facoltativo, <code>options</code>, per specificare proprietà aggiuntive. Il record può contenere i campi seguenti:\r\n    <ul>\r\n<li><code>Query</code> : Consente di aggiungere i parametri di query all&#39;URL a livello di codice senza aggiungere sequenze di caratteri di escape.</li>\r\n<li><code>ApiKeyName</code> : Se il sito di destinazione prevede la nozione di una chiave API, &#232; possibile usare questo parametro per specificare il nome (non il valore) del parametro della chiave da usare nell&#39;URL. Il valore effettivo della chiave viene fornito nelle credenziali.</li>\r\n<li><code>Headers</code> : Se si specifica questo valore come record, verranno fornite ulteriori intestazioni a una richiesta HTTP.</li>\r\n<li><code>Timeout</code> : Se si specifica questo valore come durata, il timeout per una richiesta HTTP verr&#224; modificato. Il valore predefinito &#232; 100 secondi.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Se si specifica questo valore come elenco, queste chiavi di intestazione HTTP sarano escluse dal calcolo per la memorizzazione nella cache dei dati.</li>\r\n<li><code>IsRetry</code> : Se si specifica questo valore logico come true, tutte le risposte esistenti nella cache verranno ignorate durante il recupero dei dati.</li>\r\n<li><code>ManualStatusHandling</code> : Se si specifica questo valore come elenco, verr&#224; impedita qualsiasi attivit&#224; gestione predefinita per le richieste HTTP con risposte contenenti uno di questi codici di stato.</li>\r\n<li><code>RelativePath</code> : Se si specifica questo valore come testo, questo verr&#224; aggiunto all&#39;URL di base prima di effettuare la richiesta.</li>\r\n</ul>\r\n\r\n    La richiesta HTTP viene effettuata con il metodo HEAD. All'esterno di un contesto del connettore dati personalizzato, è disponibile solo un subset di intestazioni di risposta (per motivi di sicurezza).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupera le intestazioni HTTP per <code>\"https://bing.com/search?q=Power+Query\"</code> utilizzando le opzioni RelativePath e Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Contesto di autorizzazione in base al quale viene valutata la condizione di una voce di controllo di accesso.",
        "Documentation.LongDescription": "Contesto di autorizzazione in base al quale viene valutata la condizione di una voce di controllo di accesso.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabella di voci di controllo di accesso.",
        "Documentation.LongDescription": "Tabella ordinata di voci di controllo di accesso che rappresentano le regole di autorizzazione. Ogni riga viene valutata rispetto al contesto di autorizzazione corrente (nell'ordine) e la prima riga per la quale l'espressione <code>Condition</code> restituisce true determina la regola che viene applicata. La colonna <code>Action</code> rappresenta il tipo di azione a cui si applica la regola. La colonna <code>AccessControlKind</code> determina se l'accesso deve essere consentito o negato per l'azione.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Specifica il tipo di controllo di accesso.",
        "Documentation.LongDescription": "Specifica il tipo di controllo di accesso.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori binari.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori binari.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Specifica il tipo di codifica binaria.",
        "Documentation.LongDescription": "Specifica il tipo di codifica binaria.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Specifica il numero previsto di presenze dell'elemento nel gruppo.",
        "Documentation.LongDescription": "Specifica il numero previsto di presenze dell'elemento nel gruppo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Descrive il tipo di buffering da eseguire.",
        "Documentation.LongDescription": "Descrive il tipo di buffering da eseguire.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i byte.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i byte.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Specifica l'ordine dei byte.",
        "Documentation.LongDescription": "Specifica l'ordine dei byte.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i caratteri.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i caratteri.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Specifica il tipo di compressione.",
        "Documentation.LongDescription": "Specifica il tipo di compressione.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Specifica la significatività delle virgolette nei documenti CSV.",
        "Documentation.LongDescription": "Specifica la significatività delle virgolette nei documenti CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Tipo che rappresenta il valore di valuta.",
        "Documentation.LongDescription": "Tipo che rappresenta il valore di valuta.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori date.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori date.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tipo che rappresenta qualsiasi valore di data e ora senza un fuso orario associato.",
        "Documentation.LongDescription": "Tipo che rappresenta qualsiasi valore di data e ora senza un fuso orario associato.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tipo che rappresenta qualsiasi valore di data e ora in relazione a un fuso orario.",
        "Documentation.LongDescription": "Tipo che rappresenta qualsiasi valore di data e ora in relazione a un fuso orario.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Specifica un giorno della settimana.",
        "Documentation.LongDescription": "Specifica un giorno della settimana.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Tipo che rappresenta il numero decimale a virgola fissa.",
        "Documentation.LongDescription": "Tipo che rappresenta il numero decimale a virgola fissa.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Tipo che rappresenta il numero a virgola mobile a precisione doppia.",
        "Documentation.LongDescription": "Tipo che rappresenta il numero a virgola mobile a precisione doppia.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori della durata.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori della durata.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Specifica l'azione prevista per i valori aggiuntivi in una riga che contiene più colonne del previsto.",
        "Documentation.LongDescription": "Specifica l'azione prevista per i valori aggiuntivi in una riga che contiene più colonne del previsto.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tipo che rappresenta tutti le funzioni.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti le funzioni.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Specifica il tipo di raggruppamento.",
        "Documentation.LongDescription": "È possibile produrre più gruppi locali con lo stesso valore chiave, ma viene creato un singolo gruppo globale per un valore chiave specificato.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tipo che rappresenta un valore GUID.",
        "Documentation.LongDescription": "Tipo che rappresenta un valore GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Un'identità rappresenta un utente, un gruppo, un dispositivo o un altro elemento identificabile.",
        "Documentation.LongDescription": "Un'identità rappresenta un utente, un gruppo, un dispositivo o un altro elemento identificabile.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Definisce un ambito in cui vengono create e confrontate le identità.",
        "Documentation.LongDescription": "Definisce un ambito in cui vengono create e confrontate le identità.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Tipo che rappresenta un valore Signed Integer a 16 bit.",
        "Documentation.LongDescription": "Tipo che rappresenta un valore Signed Integer a 16 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Tipo che rappresenta un valore Signed Integer a 32 bit.",
        "Documentation.LongDescription": "Tipo che rappresenta un valore Signed Integer a 32 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Tipo che rappresenta un valore Signed Integer a 64 bit.",
        "Documentation.LongDescription": "Tipo che rappresenta un valore Signed Integer a 64 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Tipo che rappresenta un valore Signed Integer a 8 bit.",
        "Documentation.LongDescription": "Tipo che rappresenta un valore Signed Integer a 8 bit.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Specifica l'algoritmo di join da usare in un'operazione di join.",
        "Documentation.LongDescription": "Specifica l'algoritmo di join da usare in un'operazione di join.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Specifica il tipo di operazione di join.",
        "Documentation.LongDescription": "Specifica il tipo di operazione di join.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Specifica la tabella sinistra o destra di un join.",
        "Documentation.LongDescription": "Specifica la tabella sinistra o destra di un join.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Descrive il tipo di clausola LIMIT supportata dal dialetto SQL usato da questa origine dati.",
        "Documentation.LongDescription": "Descrive il tipo di clausola LIMIT supportata dal dialetto SQL usato da questa origine dati.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tipo che rappresenta tutti gli elenchi.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti gli elenchi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori logici.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori logici.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Specifica l'azione prevista per i valori mancanti in una riga che contiene meno colonne del previsto.",
        "Documentation.LongDescription": "Specifica l'azione prevista per i valori mancanti in una riga che contiene meno colonne del previsto.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tipo che rappresenta Null.",
        "Documentation.LongDescription": "Tipo che rappresenta Null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i numeri.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i numeri.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Specifica i tipi di valori che un servizio OData può omettere.",
        "Documentation.LongDescription": "Specifica i tipi di valori che un servizio OData può omettere.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Specifica l'occorrenza di un elemento in una sequenza.",
        "Documentation.LongDescription": "Specifica l'occorrenza di un elemento in una sequenza.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Specifica la direzione dell'ordinamento.",
        "Documentation.LongDescription": "Specifica la direzione dell'ordinamento.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Tipo che rappresenta una password di testo.",
        "Documentation.LongDescription": "Tipo che rappresenta una password di testo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tipo che rappresenta il valore percentuale.",
        "Documentation.LongDescription": "Tipo che rappresenta il valore percentuale.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Specifica il tipo della modalità percentile.",
        "Documentation.LongDescription": "Specifica il tipo della modalità percentile.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Specifica la precisione del confronto.",
        "Documentation.LongDescription": "Specifica la precisione del confronto.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Specifica lo stile della virgoletta.",
        "Documentation.LongDescription": "Specifica lo stile della virgoletta.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Specifica il tipo di classificazione.",
        "Documentation.LongDescription": "Specifica il tipo di classificazione.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i record.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i record.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Indica se l'indicizzazione deve essere eseguita dall'inizio o dalla fine dell'input.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Specifica la direzione di arrotondamento quando è presente un'associazione tra i numeri possibili in base a cui eseguire l'arrotondamento.",
        "Documentation.LongDescription": "Specifica la direzione di arrotondamento quando è presente un'associazione tra i numeri possibili in base a cui eseguire l'arrotondamento.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opzioni valide per l'opzione della modalità di esecuzione di SAP Business Warehouse.",
        "Documentation.LongDescription": "Opzioni valide per l'opzione della modalità di esecuzione di SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opzioni valide per l'opzione di distribuzione di SAP HANA.",
        "Documentation.LongDescription": "Opzioni valide per l'opzione di distribuzione di SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Operatore di intervallo per i parametri di input dell'intervallo SAP HANA.",
        "Documentation.LongDescription": "Operatore di intervallo per i parametri di input dell'intervallo SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tipo che rappresenta il numero a virgola mobile a precisione singola.",
        "Documentation.LongDescription": "Tipo che rappresenta il numero a virgola mobile a precisione singola.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protocollo da usare per la connessione a un'istanza di Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tipo che rappresenta tutte le tabelle.",
        "Documentation.LongDescription": "Tipo che rappresenta tutte le tabelle.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori di testo.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori di testo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Specifica il tipo di codifica del testo.",
        "Documentation.LongDescription": "Specifica il tipo di codifica del testo.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i valori di ora.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i valori di ora.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Specifica il livello di traccia.",
        "Documentation.LongDescription": "Specifica il livello di traccia.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tipo che rappresenta tutti i tipi.",
        "Documentation.LongDescription": "Tipo che rappresenta tutti i tipi.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Tipo che rappresenta un URI di testo.",
        "Documentation.LongDescription": "Tipo che rappresenta un URI di testo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Specifica un metodo HTTP.",
        "Documentation.LongDescription": "Specifica un metodo HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
