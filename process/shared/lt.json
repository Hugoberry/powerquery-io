{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Pateikiama „Access“ duomenų bazės struktūrinė pateiktis.",
        "Documentation.LongDescription": "Pateikiamas struktūrinis „Access“ duomenų bazės <code>database</code> atvaizdavimas. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodytas kaip [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Pateikiamos analizės paslaugų duomenų bazės, esančios konkrečiame pagrindiniame kompiuteryje.",
        "Documentation.LongDescription": "Pateikiamos duomenų bazės, esančios analizės tarnybų egzemplioriuje <code>server</code>. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, jei norima nurodyti papildomas ypatybes. Įrašas gali būti sudarytas iš šių laukų:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Loginė reikšmė, nurodanti, ar kelių dimensijų arba lentelės modelyje nurodyti tipai bus naudojami pridėtų matų stulpelių tipams. Kai nustatyta „false“, tipas Skaičius bus naudojamas visuose matų stulpeliuose. Šios parinkties numatytoji reikšmė yra „false“.</li>\r\n<li><code>Culture</code> : Kultūros pavadinimas, nurodantis duomenų kultūrą. Jis atitinka jungimosi eilutės ypatybę Lokalės identifikatorius.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>SubQueries</code> : Skaičius (0, 1 arba 2), nustatantis ypatybės SubQueries reikšmę jungimosi eilutėje. Jis kontroliuoja papildomų pasirinkimų arba papildomų kubų apskaičiuotųjų narių veikimo būdą. (Numatytoji reikšmė – 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "„AtScale“ kubai",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Kubo duomenų importavimas / „DirectQuery“ iš „AtScale“.",
        "Documentation.LongDescription": "\r\nPateikiami kubo duomenys iš „AtScale“ serveryje <code>server</code>. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code> norint valdyti šias parinktis:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: loginė reikšmė, nurodanti, ar kelių dimensijų arba lentelės tipo modulyje nurodyti tipai bus naudojami įtrauktų matų stulpelių tipams. Kai nustatyta reikšmė „False“, visuose matų stulpeliuose bus naudojamas tipas „Skaičius“. Šios parinkties numatytoji reikšmė yra „False“.</li>\r\n        <li><code>CommandTimeout</code>: trukmė (sekundėmis), nustatanti, kiek laiko leidžiama vykdyti užklausą serveryje prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės. </li>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti, kiek laiko laukti prieš nutraukiant mėginimą užmegzti ryšį su serveriu. Numatytoji reikšmė priklauso nuo tvarkyklės. </li>\r\n\r\n</ul>\r\nĮrašo parametras nurodomas kaip [option1 = value1, option2 = value2...].",
        "Documentation.Examples": {
          "Description": "Išvardijami kubo duomenys „AtScale“ kube.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importuoja duomenis iš „Azure“ duomenų naršyklės („Kusto“)",
        "Documentation.DisplayName": "„Azure“ duomenų naršyklė („Kusto“)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "„Azure“ duomenų naršyklė („Kusto“)",
        "Documentation.LongDescription": "Importuoja duomenis iš „Azure“ duomenų naršyklės („Kusto“) egzemplioriaus",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama audrų reiškinių informacijos lentelė",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Audrų reiškinių lentelė iš žinyno sankaupos duomenų bazės Pavyzdžiai"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Įveskite „Azure DevOps“ analizės tarnybos URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Pateikiamas iš „Azure DevOps“ analizės tarnybos URL kaip dvejetainė reikšmė atsisiųstas turinys. Ši funkcija skirtingoms organizacijoms naudoja skirtingus kredencialus."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "„Azure DevOps Services“ informacijos santrauka",
        "Documentation.DisplayName": "„Azure DevOps Services“ informacijos santrauka",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų „OData“ informacijos santraukų lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Įveskite „Azure Enterprise“ REST API galinio punkto, susieto su jūsų registracija, URL",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Pateikiamas ataskaitų ir mėnesių, pasiekiamų „Azure Enterprise“ API, sąrašas",
        "Documentation.Name": "Importuoti duomenis iš „Azure Enterprise“",
        "Documentation.Examples": [
          {
            "Description": "Funkcijos „AzureEnterprise.Tables“ naudojimas ir perėjimas prie konkrečios reikšmės siekiant gauti rezultatų.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Lentelė"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "„Azure HDInsight Spark“",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Nurodykite lenteles „Azure Spark“ egzemplioriuje.",
        "Documentation.LongDescription": "Nurodykite lenteles „Azure Spark“ egzemplioriuje.",
        "Documentation.Examples": [
          {
            "Description": "Nurodykite lenteles „Azure Spark“ egzemplioriuje.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Pateikiama naršymo lentelė, kurioje yra konteineriai, rasti nurodytame „Azure“ saugyklos abonemente.",
        "Documentation.LongDescription": "Pateikiama naršymo lentelė, kurioje yra po eilutę kiekvienam konteineriui, rastam „Azure“ saugyklos paskyros URL (<code>account</code>). Kiekvienoje eilutėje yra konteineryje esančių didelių dvejetainių objektų saitas. Gali būti nurodyta <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>BlockSize</code> : Baitų skaičius, kurį reikia perskaityti prieš laukiant duomenų vartotojo. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitų skaičius, kurį reikia bandyti perskaityti vienoje HTTP užklausoje į serverį. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Parinktis „ConcurrentRequests“ palaiko spartesnį duomenų atsisiuntimą nurodydama, kiek užklausų reikia atlikti lygiagrečiai atminties naudojimo sąskaita. Reikalinga atmintis – (ConcurrentRequest * RequestSize). Numatytoji reikšmė yra 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Pateikiama naršymo lentelė su dokumentais, rastais nurodytame konteineryje ir jo poaplankiuose „Azure Data Lake Storage“.",
        "Documentation.LongDescription": "Pateikiama naršymo lentelė su dokumentais, rastais nurodytame konteineryje ir jo poaplankiuose paskyros URL (<code>endpoint</code>) „Azure Data Lake Storage“ failų sistemoje. Gali būti nurodyta <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>BlockSize</code> : Baitų skaičius, kurį reikia perskaityti prieš laukiant duomenų vartotojo. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitų skaičius, kurį reikia bandyti perskaityti vienoje HTTP užklausoje į serverį. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Parinktis „ConcurrentRequests“ palaiko spartesnį duomenų atsisiuntimą nurodydama, kiek užklausų reikia atlikti lygiagrečiai atminties naudojimo sąskaita. Reikalinga atmintis – (ConcurrentRequest * RequestSize). Numatytoji reikšmė yra 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė (true / false), kontroliuojanti, ar failai pateikiami kaip katalogo medžio rodinys, ar kaip plokščiasis sąrašas. Numatytoji reikšmė yra „false“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Pateikiama naršymo lentelė su lentelėmis, surastomis nurodytame abonemente iš „Azure“ saugyklos.",
        "Documentation.LongDescription": "Pateikiama naršymo lentelė, kurioje yra paskyros URL, <code>account</code>, surasta eilutė kiekvienai lentelei, iš „Azure“ saugyklos. Kiekvienoje eilutėje yra saitas į „Azure“ lentelę. Norint nurodyti papildomas ypatybes galima pateikti pasirenkamą įrašo parametrą, <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>Timeout</code> : Trukmė, kuria kontroliuojama, kiek laukti prieš nutraukiant užklausą su serveriu. Numatytoji reikšmė priklauso nuo šaltinio.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "„Azure“ laiko sekos įžvalgos"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "„Azure HDInsight“ tarnyboje „AKS Trino“"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Ši funkcija nepasiekiama, nes jai reikia .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "„Common Data Service“ (senstelėjusi)",
        "Documentation.Caption": "„Common Data Service“ (senstelėjusi)",
        "Documentation.LongDescription": "Prisijunkite prie „Common Data Service“ egzemplioriaus („Dynamics 365“ ir „PowerApps“)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "CSV dokumento turinys pateikiamas kaip lentelė.",
        "Documentation.LongDescription": "CSV dokumento turinys pateikiamas kaip lentelė.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> gali būti „null“, stulpelių skaičius, stulpelių pavadinimų sąrašas, lentelės tipas arba parinkčių įrašas.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> gali būti vienas simbolis, simbolių sąrašas arba reikšmė <code>\"\"</code>, kuri nurodo eilutes, kurios turi būti perskirtos iš eilės einančiais tarpo simboliais. Numatytoji reikšmė: <code>„,“</code>.\r\n      </li>\r\n      <li>\r\n        Žr. <code>ExtraValues.Type</code> dėl palaikomų <code>extraValues</code> verčių.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> nurodo teksto kodavimo tipą.\r\n      </li>\r\n    </ul>\r\n\r\n    Jei <code>columns</code> įrašas nurodytas (o <code>delimiter</code>, <code>extraValues</code> ir <code>encoding</code> yra „null“), gali būti pateikti toliau nurodyti įrašo laukai:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: stulpelių skyriklis. Numatytoji reikšmė: <code>„,“</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: gali būti „null“, stulpelių skaičiaus, stulpelių pavadinimų sąrašo arba lentelės tipo. Jei stulpelių skaičius yra mažesnis nei nurodyta įvestyje, papildomų stulpelių bus nepaisoma. Jei stulpelių yra daugiau negu nustatyta įvestyje, papildomi stulpeliai bus „null“. Jei stulpelių skaičius nenurodytas, jis bus nustatytas pagal duomenis, rastus įvestyje.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: failo teksto kodavimas. Numatytoji reikšmė: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: nurodo, kaip tvarkomos kabutės.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (numatytoji reikšmė): svarbios tik tos lauke esančios kabutės, kurios yra iš karto po skyriklio.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: lauke esančios kabutės yra svarbios visada, nepriklausomai nuo to, kur jos rodomos.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: nurodo, kaip tvarkomi eilučių lūžiai su kabutėmis.    \r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (default): eilučių lūžiai su kabutėmis laikomi duomenų dalimi, o ne dabartinės eilutės pabaiga.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: visi eilučių lūžiai laikomi dabartinės eilutės pabaiga, net jei jie yra reikšmėje su kabutėmis.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Apdoroti CSV tekstą su stulpelių antraštėmis",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra galimų dimensijų rinkinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra <code>cube</code> galimų dimensijų rinkinys. Kiekviena dimensija yra lentelė, kurioje yra dimensijos atributų rinkinys, ir dimensijų lentelėje yra kiekvienam dimensijos atributui skirtas stulpelis. Dimensijas galima išplėsti kube naudojant Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Pateikiamas įdėtasis lentelių medis, nurodantis objektų (pvz., dimensijų ir matų) aplankų hierarchijos rodymo tvarką.",
        "Documentation.LongDescription": "Pateikiamas įdėtasis lentelių medis, nurodantis objektų (pvz., dimensijų ir matų), kuriuos galima naudoti <code>cube</code>, aplankų hierarchijos rodymo tvarką.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra kube išplečiamų matų galimų ypatybių rinkinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kube išplečiamų matų galimų ypatybių rinkinys.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra galimų matų rinkinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra <code>cube</code> galimų matų rinkinys.\r\n    Kiekvienas matas pateikiamas kaip funkcija. Matus galima taikyti kubui naudojant Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra parametrų rinkinys, galimas taikyti kubui.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra parametrų rinkinys, galimas taikyti <code>cube</code>. Kiekvienas parametras yra funkcija, kurią galima iškviesti norint gauti <code>cube</code> su pritaikytais parametru ir argumentais.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra kube išplečiamų dimensijų galimų ypatybių rinkinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kube išplečiamų dimensijų galimų ypatybių rinkinys.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Įveskite savo „Azure Data Lake Storage Gen1“ paskyros URL.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvieno aplanko ir failo, rastų „Azure Data Lake Storage Gen1“ naudojant <code>URL</code>, eilutė. Kiekvienoje eilutėje yra aplanko ir failo ypatybės bei saitas į jų turinį."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Įveskite savo „Azure Data Lake Storage“ paskyros URL.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvieno failo, rasto „Azure Data Lake Storage Gen1“ naudojant <code>URL</code>, eilutė. Kiekvienoje eilutėje yra failo ypatybės ir saitas į jo turinį."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "„Azure Cosmos“ DB (SQL API)",
        "Documentation.Description": "Įveskite „Azure Cosmos DB“ paskyros URL.",
        "Documentation.LongDescription": "Pateikiama „Azure Cosmos DB“ duomenų bazių, esančių <code>URL</code>, lentelė. Jei nurodyta <code>duomenų bazė</code>, bus pateikta rinkinių lentelė. Be to, jei laukas <code>Užklausa</code> nurodytas įraše <code>Parinktys</code>, bus pateikti užklausos, vykdomos nurodytoje duomenų bazėje ir (arba) rinkinyje, rezultatai."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics 365“ verslo centro (vietinio) „OData“ tarnybos galinio punkto URL.",
        "Documentation.DisplayName": "„Microsoft Dynamics 365“ verslo centras (vietinis)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "„Microsoft Dynamics 365“ verslo centras (vietinis)",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics 365“ verslo centro (vietinio) duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics NAV“ „OData“ tarnybos galinį punktą.",
        "Documentation.DisplayName": "„Dynamics NAV“",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "„Dynamics NAV“",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics NAV“ duomenimis. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "„Essbase“ egzemplioriuje pateikiami pagal „Essbase“ serverį sugrupuoti kubai.",
        "Documentation.LongDescription": "Pateikiama pagal „Essbase“ serverį sugrupuotų kubų lentelė iš „Essbase“ egzemplioriaus APS serveryje <code>url</code>. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code> ir valdyti šias parinktis:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Pateikiamas „Excel“ darbaknygės turinys.",
        "Documentation.LongDescription": "Pateikiamas „Excel“ darbaknygės turinys.\r\n    <ul>\r\n     <li> <code>useHeaders</code> gali būti „null“, loginė (teisinga / klaidinga) reikšmė, nurodanti, ar pirmoji kiekvienos pateiktos lentelės eilutė turi būti laikoma antrašte, ar parinkčių įrašu. Numatytoji reikšmė: klaidinga.</li>\r\n     <li> <code>delayTypes</code> gali būti „null“ arba loginė (teisinga / klaidinga) reikšmė, nurodanti, ar kiekvienos pateiktos lentelės stulpeliai turi būti be tipo. Numatytoji reikšmė: klaidinga.</li>\r\n    </ul>\r\n\r\n    Jei nurodytas <code>useHeaders</code> įrašas (ir <code>delayTypes</code> yra „null“), gali būti pateikti šie įrašo laukai:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: gali būti „null“ arba loginė (teisinga / klaidinga) reikšmė, nurodanti, ar pirmoji kiekvienos pateiktos lentelės eilutė turi būti laikoma antrašte. Numatytoji reikšmė: klaidinga.</li>\r\n     <li> <code>DelayTypes</code>: gali būti „null“ arba loginė (teisinga / klaidinga) reikšmė, nurodanti, ar kiekvienos pateiktos lentelės stulpeliai turi būti be tipo. Numatytoji reikšmė: klaidinga.</li>\r\n     <li> <code>InferSheetDimensions</code>: gali būti „null“ arba loginė (teisinga / klaidinga) reikšmė, nurodanti, ar darbalapio, kuriame yra duomenų, sritis turi būti nustatoma skaitant patį darbalapį, o ne skaitant dimensijų metaduomenis iš failo. Tai gali būti naudinga tais atvejais, kai dimensijų metaduomenys yra klaidingi. Įsidėmėkite, kad ši parinktis palaikoma tik „Open XML“ „Excel“ failuose, o ne senstelėjusiuose „Excel“ failuose. Numatytoji reikšmė: klaidinga.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Pateikite Sheet1 turinį iš „Excel“ darbaknygės.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Pateikiama lentelė su failų ir aplankų, rastų nurodytame aplanke, ypatybėmis ir turiniu.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvienam aplankui ir failui, rastam aplanke <code>path</code>, skirta eilutė. Kiekvienoje eilutėje yra aplanko arba failo ypatybės ir turinio saitas. Parametras <code>options</code> šiuo metu skirtas tik vidiniam naudojimui.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Pateikiama lentelė su failų, rastų nurodytame aplanke ir poaplankiuose, ypatybėmis ir turiniu.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvienam failui, rastam aplanke <code>path</code> ir visuose jo poaplankiuose, skirta eilutė. Kiekvienoje eilutėje yra failo ypatybės ir turinio saitas. Parametras <code>options</code> šiuo metu skirtas tik vidiniam naudojimui.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "„Google BigQuery“ („Azure AD“)",
        "Documentation.Caption": "„Google BigQuery“ („Azure AD“)",
        "Documentation.Description": "Importuoti duomenis iš „Google BigQuery“ duomenų bazės naudojant „Azure Active Directory“",
        "Documentation.LongDescription": "\r\n      Pateikiama lentelė su „Google BigQuery“ pasiekiamais projektais <code>Billing Project ID</code> naudojant „Azure AD“. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code> toliau nurodytoms parinktims valdyti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė – ODBC ryšio skirtojo laiko reikšmė.</li>\r\n        <li><code>CommandTimeout</code>: trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant.</li>\r\n        <li> <code>UseStorageApi</code>: nurodoma, ar dideliems rezultatų rinkiniams naudoti „BigQuery“ saugyklos API. Numatytoji saugyklos API naudojimo reikšmė yra teisinga. Jei nenorite naudoti saugyklos API, reikšmę nustatykite kaip klaidingą</li>\r\n        <li> <code>AudienceUri</code>: tai auditorijos URI, kurį ODBC tvarkyklė gali naudoti savo atpažinimo ženklų mainų užklausoms. Šis laukas turi būti visiškai apibrėžtas URI (t. y. //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), kur pool_id yra visuotinai unikalus pavadinimas, skirtas darbo jėgos telkiniui identifikuoti.</li>\r\n      </ul>\r\n    Įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Išvardijami „Google BigQuery“ pasiekiami projektai naudojant „Azure AD“",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "„Google“ skaičiuoklės",
        "Documentation.Caption": "„Google“ skaičiuoklės",
        "Documentation.Description": "Importuoti duomenis iš „GoogleSheets“",
        "Documentation.LongDescription": "Importuoti duomenis iš „GoogleSheets“"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Pateikiama naršymo lentelė, kurioje yra konteineriai, rasti nurodytame „Azure“ saugyklos abonemente.",
        "Documentation.LongDescription": "Pateikiama naršymo lentelė, kurioje yra po eilutę kiekvienam konteineriui, rastam „Azure“ saugyklos abonemento URL <code>account</code>. Kiekvienoje eilutėje yra konteinerio didelio dvejetainio objekto saitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Pateikiama naršymo lentelė, kurioje yra konteineriai, rasti nurodytame „Azure“ saugyklos abonemente.",
        "Documentation.LongDescription": "Pateikiama naršymo lentelė, kurioje yra po eilutę kiekvienam konteineriui, rastam „Azure“ saugyklos abonemento URL <code>account</code>. Kiekvienoje eilutėje yra konteinerio didelio dvejetainio objekto saitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Pateikiama lentelė su failų ir aplankų, rastų nurodytame aplanke iš „Hadoop“ failų sistemos, ypatybėmis bei turiniu.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvienam aplankui ir failui, rastam naudojant aplanko URL, <code>url</code>, iš „Hadoop“ failų sistemos, skirta eilutė. Kiekvienoje eilutėje yra aplanko arba failo ypatybės ir turinio saitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Pateikiama lentelė su failų, rastų nurodytame aplanke ir poaplankiuose iš „Hadoop“ failų sistemos, ypatybėmis ir turiniu.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra kiekvienam failui, rastam naudojant aplanko URL, <code>url</code>, ir poaplankiams iš „Hadoop“ failų sistemos skirta eilutė. Kiekvienoje eilutėje yra failo ypatybės ir jo turinio saitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importuoti duomenis iš „Impala“ klasterio",
        "Documentation.LongDescription": "Importuokite duomenis iš „Impala“ klasterio <code>server</code>. Jei prievadas nenurodytas, bus naudojamas numatytasis prievadas 21050.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamas lentelių „Impala“ klasteryje sąrašas.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importuoja duomenis iš „Azure“ duomenų naršyklės („Kusto“)",
        "Documentation.DisplayName": "„Azure“ duomenų naršyklė („Kusto“)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "„Azure“ duomenų naršyklė („Kusto“)",
        "Documentation.LongDescription": "Importuoja duomenis iš „Azure“ duomenų naršyklės („Kusto“) egzemplioriaus",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama audrų reiškinių informacijos lentelė",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Audrų reiškinių lentelė iš žinyno sankaupos duomenų bazės Pavyzdžiai"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "„LinkedIn“ pardavimo naršyklė",
        "Documentation.LongDescription": "„LinkedIn“ pardavimo naršyklė",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Pateikiama lentelė su duomenimis iš „MailChimp“ galinio punkto.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Kreipiamasi į „MailChimp“ API ir gautas duomenų rinkinys pateikiamas kaip lentelė. Automatiškai pereinama per visus rezultatus. API galiniuose punktuose galima naudoti pasirinktinį parametrą entityName, kai nesutampa JSON atsako šakninis galinis punktas ir pagrindinis entityName.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su duomenimis iš „MailChimp“ API sąrašų galinio punkto.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Lentelė su sąrašo duomenimis."
          },
          {
            "Description": "Pateikiama lentelė su duomenimis iš „MailChimp“ API kampanijos aplankų galinio punkto.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Lentelė su kampanijos aplankų duomenimis."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Pateikiami neapdoroti atsako rezultatai iš „MailChimp“ API galinio punkto.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Kreipiamasi į „MailChimp“ API ir pateikiamas neapdorotas atsakas.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiami neapdoroti duomenys iš nurodytos kampanijos kelio reports/click-details „MailChimp“ API galinio punkto.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Neapdoroti spustelėjimų duomenys iš nurodytos kampanijos."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Suteikia išplėstinės užklausos funkcijas.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Suteikia išplėstinės užklausos funkcijas.",
        "Documentation.Examples": [
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami laikotarpio nuo 2017-05-01 iki 2017-06-15 suvestinių duomenys",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks suvestinių duomenis nuo 2017-05-01 iki 2017-06-15"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami 2017 m. balandžio mėn. suvestinių duomenys.",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [ startBillingDataWindow = -2, endBillingDataWindow = -1 ],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2017-04-01 iki 2017-04-30"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami suvestinių duomenys nuo 2017 m. balandžio mėn. iki šiandien.",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [ startBillingDataWindow = -2, endBillingDataWindow = 0, dataType = suvestinės ],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2017-04-01 iki 2017-06-15"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami suvestinių duomenys nuo praėjusių metų gruodžio mėn. iki šių metų vasario mėn. ",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [startBillingDataWindow = -6, endBillingDataWindow = -3, dataType = suvestinės ],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents (enrollmentNumber, optionalParameters)\r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2017-12-01 iki 2016-02-28"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami pastarųjų 18 mėnesių parduotuvės mokesčiai",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [startBillingDataWindow = -18, endBillingDataWindow = 0, dataType = MarketplaceCharges],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents (enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2015-12-01 iki 2017-06-15"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami išsami 2017 m. birželio ir gegužės mėn. mokesčių informacija",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [startBillingDataWindow = -1, endBillingDataWindow = 0, dataType = DetailCharges],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents (enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2017-05-01 iki 2017-06-15"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-07-03, gaunama išsami 2016 m. liepos mėn. mokesčių informacija",
            "Code": "\r\n      leisti    \r\n          enrollmentNumber = 100,\r\n          optionalParameters = [startBillingDataWindow = -12, endBillingDataWindow = -11, dataType = DetailCharges],\r\n          rezultatas = MicrosoftAzureConsumptionInsights.Contents (enrollmentNumber, optionalParameters)   \r\n           \r\n          rezultate\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2016-07-01 iki 2016-07-31"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-07-13, gaunamos paskutinių 10 mėnesių ir 13 šio mėnesio dienų balanso suvestinės",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Funkcija pateiks duomenis nuo 2016-09-01 iki 2017-07-13"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "„Microsoft Azure Consumption Insights“",
        "Documentation.Description": "„Microsoft Azure Consumption Insights“",
        "Documentation.DisplayName": "„Microsoft Azure Consumption Insights“",
        "Documentation.LongDescription": "„Microsoft Azure Consumption Insights“",
        "Documentation.Name": "„Microsoft Azure Consumption Insights“"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Iš ODBC duomenų šaltinio pateikiama SQL lentelių ir rodinių lentelė. ",
        "Documentation.LongDescription": "Iš ODBC duomenų šaltinio, kurį nurodo jungimosi eilutė <code>connectionString</code>, pateikiama SQL lentelių ir rodinių lentelė. <code>connectionString</code> gali būti tekstas arba ypatybių reikšmių porų įrašas. Ypatybių reikšmės gali būti tekstas arba skaičiai. Norint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė – 15 sek.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "SQL lentelių ir rodinių pateikimas naudojant pateiktas jungimosi eilutes.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Pateikia SQL lentelių ir rodinių lentelę iš OLE DB duomenų šaltinio.",
        "Documentation.LongDescription": "Pateikia SQL lentelių ir rodinių lentelę iš OLE DB duomenų šaltinio, kurį nurodo jungimosi eilutė <code>connectionString</code>. <code>connectionString</code> gali būti tekstas arba ypatybės reikšmių porų įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code> norint nurodyti papildomas ypatybes. Įraše gali būti tokie laukai:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n</ul>\r\n\r\n    Įrašo parametras nurodomas kaip, pvz., [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Pateikiama SQL lentelių ir peržiūrų iš „Oracle Database“ lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių iš serveryje <code>server</code> esančios „Oracle Database“ lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Pateikia bet kokias PDF faile rastas lenteles.",
        "Documentation.LongDescription": "Pateikiamos bet kokios <code>pdf</code> esančios lentelės. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, jei norima nurodyti papildomas ypatybes. Įrašas gali būti sudarytas iš šių laukų:\r\n    <ul>\r\n<li><code>Implementation</code> : Algoritmo, naudotino identifikuojant lenteles, versija. Senąsias versijas galima naudoti tik siekiant užtikrinti atgalinį suderinamumą, kad senosios užklausos nebūtų nutrauktos algoritmų naujinimais. Naujausia versija visada turi užtikrinti geriausius rezultatus. Tinkamos reikšmės yra 1.3, 1.2, 1.1 arba null.</li>\r\n<li><code>StartPage</code> : Nurodo pirmąjį tikrintinų puslapių eilės puslapį. Numatytoji reikšmė: 1.</li>\r\n<li><code>EndPage</code> : Nurodo paskutinį tikrintinų puslapių eilės puslapį. Numatytoji reikšmė: paskutinis dokumento puslapis.</li>\r\n<li><code>MultiPageTables</code> : Valdo, ar nuosekliai išdėstytuose puslapiuose esančios panašios lenteles bus automatiškai sujungiamos į vieną lentelę. Numatytoji reikšmė: „True“.</li>\r\n<li><code>EnforceBorderLines</code> : Valdo, ar kraštinių linijos bus visada priverstinai taikomos kaip langelių ribos (kai reikšmė yra „True“), ar nustatant langelių ribas tiesiog bus naudojamos kaip vienas iš daugelio nurodymų (kai reikšmė yra „False“). Numatytoji reikšmė: „False“.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Prieiga prie duomenų",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamos sample.pdf esančios lentelės.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Įveskite „Planview Projectplace“ paskyros URL.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "„Projectplace“ informacijos santrauka",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Pateikiama susijusių „Planview Projectplace“ duomenų lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρŷţĥθň śçгιρţ",
        "Documentation.Description": "Эхęĉűţё§ Þутнǿη şсѓìþť äⁿδ гётΰřñś δǻţà ƒяåmèş",
        "Documentation.Examples": {
          "Description": "Эхęĉűţё§ Þутнǿη şсѓìþť äⁿδ гётΰřñś δǻţà ƒяåmèş",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Γ ѕċŗįφт",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Pateikiama lentelė, kurios kiekvienoje eilutėje nurodomas lauko pavadinimas ir įvesties įrašo reikšmė.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra stulpeliai <code>Name</code> ir <code>Value</code> su kiekvieno <code>record</code> lauko eilute.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Pateikite lentelę iš įrašo.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Pateikiami paketai SAP HANA duomenų bazėje.",
        "Documentation.LongDescription": "Pateikiama kelių dimensijų paketų iš SAP HANA duomenų bazės <code>server</code> lentelė. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code> šioms parinktims valdyti:\r\n    <ul>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution, nustatantis ypatybės Paskirstymas reikšmę jungimosi eilutėje. Sakinio kelvada – tai tinkamo paskirstytosios sistemos serverio mazgo įvertinimo būdas prieš sakinio vykdymą. Numatytoji reikšmė yra SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Nurodomas naudotinos „SAP Hana“ jungties diegimas.</li>\r\n<li><code>EnableColumnBinding</code> : Iškviečiant duomenis kintamieji susiejami su SAP Hana rezultatų rinkinio stulpeliais. Gali pagerinti veikimą, kai atminties naudojimas šiek tiek didesnis. Numatytoji reikšmė yra „false“.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė – 15 sek.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra turinio iš „SharePoint“ svetainės.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra visų nurodytoje „SharePoint“ svetainėje <code>url</code> rastų aplankų ir dokumentų eilutės. Kiekvienoje eilutėje pateikiamos aplanko arba failo ypatybės ir jų turinio saitas. Galima nurodyti <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaičius (14 arba 15) arba tekstas Auto, nurodantis „SharePoint“ API versiją, kuri bus naudojama šioje svetainėje. Jei nenurodyta, naudojama 14 API versija. Jei nurodyta Auto, bus automatiškai nustatyta serverio versija (jei įmanoma) arba naudojama numatytoji 14 versija. Norint naudotis „SharePoint“ svetainėmis ne anglų kalba reikia mažiausiai 15 versijos.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra dokumentai iš „SharePoint“ svetainės.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra visų nurodytoje „SharePoint“ svetainėje <code>url</code> ir poaplankiuose rastų dokumentų eilutės. Kiekvienoje eilutėje pateikiamos aplanko arba failo ypatybės ir jų turinio saitas. Galima nurodyti <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaičius (14 arba 15) arba tekstas Auto, nurodantis „SharePoint“ API versiją, kuri bus naudojama šioje svetainėje. Jei nenurodyta, naudojama 14 API versija. Jei nurodyta Auto, bus automatiškai nustatyta serverio versija (jei įmanoma) arba naudojama numatytoji 14 versija. Norint naudotis „SharePoint“ svetainėmis ne anglų kalba reikia mažiausiai 15 versijos.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra „SharePoint“ sąrašo turinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra visų nurodytame „SharePoint“ sąraše <code>url</code> rastų sąrašo elementų eilutės. Kiekvienoje eilutėje pateikiamos sąrašo ypatybės. Galima nurodyti <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Skaičius (14 arba 15) arba tekstas Auto, nurodantis „SharePoint“ API versiją, kuri bus naudojama šioje svetainėje. Jei nenurodyta, naudojama 14 API versija. Jei nurodyta Auto, bus automatiškai nustatyta serverio versija (jei įmanoma) arba naudojama numatytoji 14 versija. Norint naudotis „SharePoint“ svetainėmis ne anglų kalba reikia mažiausiai 15 versijos.</li>\r\n<li><code>Implementation</code> : Pasirinktinai. Nurodo, kurią „SharePoint“ jungties versiją naudoti. Priimtinos reikšmės yra „2.0“ arba „null“. Jei reikšmė yra „2.0“, naudojamas „SharePoint“ jungties „2.0“ diegimas. Jei reikšmė „null“, naudojamas pradinis „SharePoint“ jungties diegimas.</li>\r\n<li><code>ViewMode</code> : Pasirinktinai. Ši parinktis galima tik diegiant „2.0“. Priimtinos reikšmės yra „Viskas“ ir „Numatytoji“. Jei nenurodyta jokia reikšmė, reikšmė nustatoma į „Viskas“. Kai nurodyta „Viskas“, rodinyje yra visi vartotojo sukurti ir sistemos nustatyti stulpeliai. Kai nurodyta „Numatytoji“ reikšmė, rodinys atitiks tai, ką vartotojas mato žiūrėdamas į sąrašą internete, atsižvelgiant į tai, korį rodinį šis vartotojas savo parametruose nustatė kaip „Numatytasis“. Jei vartotojas redaguoja numatytąjį rodinį, kad galėtų įtraukti arba pašalinti vartotojo sukurtus ar sistemos apibrėžtus stulpelius, arba kurdamas naują rodinį ir nustatydamas jį kaip numatytąjį, šie pakeitimai bus išplatinti per jungtį.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Neleidžia jungčiai naudoti atskiro galinio punkto pastabų stulpeliams.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Pateikiama lentelė iš turinio nurodytame URL, suformatuotame pagal SODA 2.0 API.",
        "Documentation.LongDescription": "Pateikiama lentelė iš turinio nurodytame URL <code>url</code>, suformatuotame pagal SODA 2.0 API. URL turi nurodyti galiojantį su SODA suderinamą šaltinį, kuris baigiasi plėtiniu .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Šią funkciją galima naudoti norint iškviesti bet kurį iš „SparkPost“ API 1 versijos siūlomų galinių punktų Sąrašai. Iškviesdami „SparkPost“ API naudodami šią funkciją nepamirškite, kad „SparkPost“ API taikomas griežtas API spartos limitas. Jei „SparkPost“ serveris pateikia pranešimą apie 429 būsenos kodą, reikia paspausti spartos limitą, palaukti kelias sekundes ir tik tada kviesti vėl.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su vienu stulpeliu, užpildytu vieno iš „SparkPost“ API 1 versijos galinių punktų Sąrašai duomenimis (išsamią informaciją žr. „SparkPost“ dokumentacijoje).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "„SparkPost“",
        "Documentation.Caption": "„SparkPost“",
        "Documentation.Name": "„SparkPost“",
        "Documentation.LongDescription": "Gaunamos įtaisytosios lentelės, rodomos naudojant „SparkPost“ jungtį, su agreguotais vartotojo nurodyto dienų skaičiaus duomenimis. Atnaujindami šias lenteles arba iškviesdami „SparkPost“ API naudodami šią jungtį nepamirškite, kad „SparkPost“ API taikomas griežtas API spartos limitas. Jei „SparkPost“ serveris pateikia pranešimą apie 429 būsenos kodą, reikia paspausti spartos limitą, palaukti kelias sekundes ir tik tada kviesti vėl. Pasirinkdami parametro Dienų skaičius reikšmę atkreipkite dėmesį į tai, kad API saugo tik 6 mėnesių duomenis."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Pateikiama „SQL Server“ duomenų bazių lentelė.",
        "Documentation.LongDescription": "Pateikiama „SQL Server“ <code>server</code> duomenų bazių lentelė. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Skaičius, kuris nustato maxdop užklausos sąlygos reikšmę sugeneruotoje SQL užklausoje.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>MultiSubnetFailover</code> : Loginė reikšmė („true“ / „false“), nustatanti ypatybės MultiSubnetFailover reikšmę jungimosi eilutėje (numatytoji reikšmė – „false“).</li>\r\n<li><code>UnsafeTypeConversions</code> : Loginė (teisinga / klaidinga) reikšmė, kuri, jei yra teisinga, bando perduoti tipo konversijas, kurios galėjo nepavykti ir dėl kurių galėjo nepavykti įvykdyti visą užklausą. Nerekomenduojama bendram naudojimui.</li>\r\n<li><code>ContextInfo</code> : Dvejetainė reikšmė, naudojama CONTEXT_INFO nustatyti prieš vykdant kiekvieną komandą.</li>\r\n<li><code>OmitSRID</code> : Loginė (teisinga / klaidinga) reikšmė, kuri, jei yra teisinga, praleidžia SRID, kai kuriamas gerai žinomas tekstas iš geometrijos ir geografijos tipų.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Loginė (TRUE / FALSE) reikšmė, kuri, jei TRUE, leidžia užklausą perduoti tarp duomenų bazių, esančių tame pačiame serveryje. Numatytoji reikšmė yra FALSE.</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodytas kaip [option1 = value1, option2 = value2...].\r\n    <br>\r\n    SQL užklausos vykdymas serveryje nepalaikomas. Norint vykdyti SQL užklausą reikia naudoti <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Kreipiamasi į „Stripe“ API ir pateikiama galimybė apriboti atliktų API iškvietimų skaičių.",
        "Documentation.LongDescription": "Kreipiamasi į „Stripe“ API naudojant https://api.stripe.com/v1/<code>method</code>, pasirenkamas įrašas <code>query</code> pateikiamas kaip papildomi parametrai, o pasirenkama <code>pageLimit</code> reikšmė pateikiama kaip API užklausų skaičiaus limitas. Pirmiausia pateikiami naujausi duomenys. Jei <code>pageLimit</code> reikšmė nenurodyta, pateikiami visi duomenys. Naudojama „Stripe“ versija 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiami visi mokesčių duomenys.",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Lentelė su visais mokesčių duomenimis, susijusiais su dabartine „Stripe“ paskyra"
          },
          {
            "Description": "Pateikiamas vienas mokesčių duomenų puslapis.",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Lentelė su naujausiais mokesčių duomenimis, susijusiais su dabartine „Stripe“ paskyra"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Lentelė kaupiama atmintyje ir vertinimo metu neleidžiama atlikti išorinių keitimų.",
        "Documentation.LongDescription": "Lentelė kaupiama atmintyje ir vertinimo metu neleidžiama atlikti išorinių keitimų.\r\n    Kaupimas yra paviršinis. Visos skaliarinių langelių reikšmės įvertinamos priverstinai, bet neskaliarinės reikšmės (įrašai, sąrašai, lentelės ir t. t.) paliekamos tokios, kokios yra.\r\n    <br>\r\n    <br>\r\n    Atminkite, kad naudojant šią funkciją užklausos nebūtinai gali veikti greičiau. Kai kuriais atvejais užklausos gali veikti lėčiau dėl įtrauktos parinkties \r\n    skaityti ir saugoti atmintyje visus duomenis bei dėl to, kad kaupimas neleidžia proceso pabaigos perdavimo. Jei duomenys neturi būti\r\n    kaupiami, bet tiesiog norite išvengti proceso pabaigos perdavimo, vietoj to naudokite <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Įkelkite visas SQL lentelės eilutes į atmintį, kad jokios proceso pabaigos operacijos daugiau negalėtų pateikti užklausos SQL serveriui.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Pateikiama lentelė, kuri yra lentelių sąrašo suliejimo rezultatas.",
        "Documentation.LongDescription": "Pateikiama lentelė <code>tables</code>, gauta suliejus lentelių sąrašą. Eilučių tipo struktūra gautoje lentelėje bus nustatyta pagal <code>columns</code> arba įvesčių tipų junginį, jei <code>columns</code> nėra nurodytas.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Suliekite tris lenteles į vieną.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Suliekite tris skirtingų struktūrų lenteles.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Pagal nurodytą tipą suliekite dvi lentelės ir projektą.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Stulpelių antraštės sumažinamos iki pirmosios reikšmių eilutės.",
        "Documentation.LongDescription": "Stulpelių antraštės (t. y. stulpelių pavadinimai) sumažinami iki pirmosios reikšmių eilutės. Numatytieji stulpelių pavadinimai yra „Column1“, „Column2“ ir t. t.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Sumažinkite pirmąją reikšmių eilutę lentelėje.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Iš lentelės pašalinamos pasikartojančios eilutės.",
        "Documentation.LongDescription": "Iš lentelės pašalina pasikartojančias eilutes.\r\n   Pasirenkamas parametras, <code>equationCriteria</code>, nurodo, kurie lentelės stulpeliai yra tikrinami dėl dubliavimosi. Jei <code>equationCriteria</code> nėra nurodytas, tikrinami visi stulpeliai.<br>\r\n    <br>\r\n    Kadangi „Power Query“ kartais iškelia tam tikras operacijas į vidinius duomenų šaltinius, (dar vadinama „perdavimu“) ir kartais optimizuoja užklausas\r\n, praleisdamas operacijas, kurios nėra griežtai būtinos. Paprastai nėra garantuojama, kuris konkretus dublikatas bus išsaugotas.\r\n   Pavyzdžiui, negalima daryti prielaidos, kad pirmoji eilutė su unikaliu stulpelių reikšmių rinkiniu išliks, o žemiau lentelėje esančios eilutės bus pašalintos.\r\n    Jei norite, kad dublikatų šalinimas veiktų numatytai, pirmiausia reikia buferizuoti lentelę naudojant <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite pasikartojančias eilutes iš lentelės.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Pašalinkite pasikartojančias eilutes iš stulpelio [b] lentelėje <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Sukuriama lentelė iš stulpelių ir nurodytų reikšmių sąrašo.",
        "Documentation.LongDescription": "Sukuriama tipo <code>columns</code> lentelė iš sąrašo <code>lists</code>, kurioje yra įdėtieji sąrašai su stulpelių pavadinimais ir reikšmėmis.\r\n    Jei vienuose stulpeliuose yra daugiau reikšmių nei kituose, trūkstamos reikšmės bus užpildytos numatytąja reikšme null (jei stulpeliai gali būti neapibrėžti).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė iš klientų vardų sąrašo. Kiekviena klientų sąrašo elemento reikšmė tampa eilutės reikšme, o kiekvienas sąrašas tampa stulpeliu.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Kurkite lentelę iš nurodyto stulpelių sąrašo ir stulpelių pavadinimų sąrašo.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Sukurkite lentelę su skirtingu stulpelių skaičiumi eilutėje. Trūkstamos eilutės reikšmė yra NULL.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Sąrašas konvertuojamas į lentelę kiekvienam sąrašo elementui pritaikant nurodytą skaidymo funkciją.",
        "Documentation.LongDescription": "Sąrašas <code>list</code> konvertuojamas į lentelę kiekvienam sąrašo elementui pritaikant pasirenkamą skaidymo funkciją <code>splitter</code>. Pagal numatytuosius nustatymus laikoma, kad sąrašas yra tekstinių reikšmių, atskirtų kableliais, sąrašas. Pasirenkamas <code>columns</code> gali būti stulpelių skaičius, stulpelių sąrašas arba TableType. Taip pat galima nurodyti pasirenkamą <code>default</code> ir <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite lentelę iš sąrašo naudodami numatytąjį skaidiklį.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Sukurkite lentelę iš sąrašo naudodami pasirinktinį skaidiklį.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Sukurkite lentelę iš sąrašo naudodami skaidiklį Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Įrašų sąrašas konvertuojamas į lentelę.",
        "Documentation.LongDescription": "<code>records</code> – įrašų sąrašas – konvertuojamas į lentelę.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite lentelę iš įrašų, naudodami įrašo lauko pavadinimus kaip stulpelio pavadinimus.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Sukurkite lentelę iš įrašų su įvestais stulpeliais ir pasirinkite stulpelių skaičių.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Iš eilučių reikšmių ir pasirenkamų stulpelių sąrašo sukuriama lentelė",
        "Documentation.LongDescription": "Iš sąrašo <code>rows</code>, kuriame kiekvienas sąrašo elementas yra vidinis sąrašas su vienos eilutės stulpelių reikšmėmis, sukuriama lentelė. Gali būti nurodytas <code>columns</code> pasirenkamas stulpelių pavadinimų sąrašas, lentelės tipas arba stulpelių skaičius.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su stulpeliu [CustomerID] su reikšmėmis {1, 2}, su stulpeliu [Name] su reikšmėmis {\"Bob\", \"Jim\"} ir su stulpeliu [Phone] su reikšmėmis {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Pateikiama lentelė su stulpeliu [CustomerID] su reikšmėmis {1, 2}, su stulpeliu [Name] su reikšmėmis {\"Bob\", \"Jim\"} ir su stulpeliu [Phone] su reikšmėmis {\"123-4567\", \"987-6543\"}, kur [CustomerID] yra skaičius, o [Name] ir [Phone] tekstas.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Sukuriama lentelė su stulpeliu iš pateiktos (-ų) reikšmės (-ių).",
        "Documentation.LongDescription": "Sukuriama lentelė su stulpeliu, kuriame yra pateikta reikšmė arba reikšmių sąrašas, <code>value</code>. Galima nurodyti pasirinktinį įrašo parametrą, <code>options</code>, norint valdyti nurodytas parinktis:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : stulpelio pavadinimas, naudojamas sudarant lentelę iš sąrašo arba skaliarinės reikšmės.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite lentelę iš reikšmės 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Sukurkite lentelę iš sąrašo.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Sukurkite lentelę naudodami reikšmę 1 ir pasirinktinį stulpelio pavadinimą.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Pateikiama informacija, kaip skaidoma lentelė.",
        "Documentation.LongDescription": "Pateikiama informacija, kaip skaidoma lentelė.  Pateikiama lentelė, kurioje kiekvienas stulpelis yra pradinės lentelės skaidinio stulpelis, o kiekviena eilutė atitinka skaidinį pradinėje lentelėje.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Pateikiamas lentelės stulpelių profilis.",
        "Documentation.LongDescription": "<p>Pateikiamas <code>table</code> esančių stulpelių profilis.</p>\r\n<p>Pateikiama šį kiekvieno stulpelio informacija (kai taikoma):\r\n<ul>\r\n  <li>mažiausia reikšmė</li>;\r\n  <li>didžiausia reikšmė</li>;\r\n  <li>vidurkis</li>;\r\n  <li>standartinis nuokrypis</li>;\r\n  <li>skaičius</li>;\r\n  <li>neapibrėžtų reikšmių skaičius</li>;\r\n  <li>skirtingų reikšmių skaičius</li>.\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Pirmosios reikšmių eilutės lygis pakeliamas iki naujų stulpelių antraščių (t. y. stulpelių pavadinimų).",
        "Documentation.LongDescription": "Pirmosios reikšmių eilutės lygis pakeliamas iki naujų stulpelių antraščių (t. y. stulpelių pavadinimų). Pagal numatytuosius parametrus tik tekstinės arba skaičių reikšmės yra pakeliamos iki antraščių. Tinkamos parinktys:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: jei nustatyta kaip <code>true</code>, visos pirmos eilutės skaliarinės reikšmės bus pakeltos iki antraščių naudojant <code>Culture</code>, jei nurodyta (arba dabartinę dokumento lokalę).\r\n    reikšmių, kurių negalima konvertuoti į tekstą atveju bus naudojamas numatytasis stulpelio pavadinimas.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: kultūros pavadinimas, nurodantis duomenų kultūrą.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pakelkite į aukštesnį lygį pirmąją reikšmių eilutę lentelėje.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Visų pirmosios lentelės eilutės skaliarų lygis pakeliamas iki antraščių.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Pateikiama lentelė su praleistomis pirmosiomis eilutėmis pagal eilę.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje nėra pirmojo nurodyto lentelės <code>countOrCondition</code> eilučių skaičiaus <code>table</code>.\r\n    Pašalintų eilučių skaičius priklauso nuo pasirenkamo parametro <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jei praleidžiama <code>countOrCondition</code>, pašalinama tik pirmoji eilutė. </li>\r\n    <li> Jei <code>countOrCondition</code> yra skaičius, bus pašalintas toks skaičius eilučių (pradedant nuo viršaus). </li>\r\n    <li> Jei <code>countOrCondition</code> yra sąlyga, bus pašalintos ją atitinkančios eilutės iki eilutės, kuri sąlygos neatitiks.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite pirmąją lentelės eilutę.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pašalinkite pirmąsias dvi lentelės eilutes.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pašalinkite pirmąsias lentelės eilutes, atitinkančias sąlygą [CustomerID] <= 2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Pateikiama lentelė, kurios paskutinės N eilutės pašalintos.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje nėra paskutinių <code>countOrCondition</code> lentelės <code>table</code> eilučių.\r\n        Pašalintų eilučių skaičius priklauso nuo pasirenkamo parametro <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jei praleidžiama <code>countOrCondition</code>, pašalinama tik paskutinė eilutė. </li>\r\n    <li> Jei <code>countOrCondition</code> yra skaičius, bus pašalintas toks skaičius eilučių (pradedant nuo apačios). </li>\r\n    <li> Jei <code>countOrCondition</code> yra sąlyga, bus pašalintos ją atitinkančios eilutės iki eilutės, kuri sąlygos neatitiks.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite paskutinę lentelės eilutę.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Pašalinkite paskutines lentelės eilutes, atitinkančias sąlygą [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Pateikiama lentelė su eilutėmis, pašalintomis iš įvesties lentelės, kurių bent viename langelyje yra klaida. Jei nurodytas stulpelių sąrašas, klaidos tikrinamos tik nurodytų stulpelių langeliuose.",
        "Documentation.LongDescription": "Pateikiama lentelė su eilutėmis, pašalintomis iš įvesties lentelės, kurių bent viename langelyje yra klaida. Jei nurodytas stulpelių sąrašas, klaidos tikrinamos tik nurodytų stulpelių langeliuose.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite klaidos reikšmę iš pirmos eilutės.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Pateikiama lentelė su eilutėmis atvirkštine tvarka.",
        "Documentation.LongDescription": "Pateikiama lentelė su eilutėmis iš išvesties <code>table</code> atvirkštine tvarka.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikite eilutes atvirkštine tvarka lentelėje.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra nurodytos lentelės stulpelių aprašas (t. y. schema).",
        "Documentation.LongDescription": "<p>Pateikiama lentelė, kurioje aprašyti <code>table</code> stulpeliai.</p>\r\n<p>Kiekvienoje lentelėje esančioje eilutėje aprašomos <code>table</code> stulpelio ypatybės:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Stulpelio pavadinimas</b></td>\r\n    <td><b>Aprašas</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Stulpelio pavadinimas.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code> esančio stulpelio 0 paremta padėtis.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Stulpelio tipo pavadinimas.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Stulpelio tipo rūšis.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Ar stulpelyje gali būti <code>null</code> reikšmių.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Laukų <code>NumericPrecision</code> ir <code>NumericScale</code> skaičiavimo sistema (pvz., dvejetainė, dešimtainė).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Skaitinio stulpelio tikslumas naudojant parametru <code>NumericPrecisionBase</code> nurodytą skaičiavimo sistemą. Tai didžiausias skaitmenų skaičius, kurį galima pateikti šio tipo reikšmėje (įskaitant trupmeninius skaitmenis).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Skaitinio stulpelio skalė naudojant parametru <code>NumericPrecisionBase</code> nurodytą skaičiavimo sistemą. Tai skaitmenų skaičius šio tipo reikšmės trupmeninėje dalyje. Reikšme <code>0</code> žymima fiksuota skalė be trupmeninių skaitmenų. Reikšme <code>null</code> nurodoma, kad skalė nežinoma (nes ji slankiojanti arba neapibrėžta).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Didžiausias trupmeninių skaitmenų skaičius, palaikomas datos arba laiko reikšmės sekundžių dalyje.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Didžiausias <code>text</code> stulpelyje leidžiamas simbolių skaičius arba didžiausias <code>binary</code> stulpelyje leidžiamas baitų skaičius.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Nurodoma, ar šiame stulpelyje gali būti įvairaus ilgio reikšmės (iki <code>MaxLength</code> reikšmės), ar jos yra fiksuoto dydžio.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Stulpelio tipo pavadinimas vietinėje šaltinio tipų sistemoje (pvz., <code>nvarchar</code> naudojant „SQL Server“).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Numatytasis šio stulpelio reikšmės reiškinys vietine šaltinio reiškinių kalba (pvz., <code>42</code> arba <code>newid()</code> naudojant „SQL Server“).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Stulpelio aprašas.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Pateikiama lentelė tik su eilutėmis iš įvesties lentelės, kurių bent viename langelyje yra klaida. Jei nurodytas stulpelių sąrašas, klaidos tikrinamos tik nurodytų stulpelių langeliuose.",
        "Documentation.LongDescription": "Pateikiama lentelė tik su eilutėmis iš įvesties lentelės, kurių bent viename langelyje yra klaida. Jei nurodytas stulpelių sąrašas, klaidos tikrinamos tik nurodytų stulpelių langeliuose.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pasirinkite klientų vardus, kurių eilutėse yra klaidų.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Pateikiama lentelė su praleistomis pirmosiomis eilutėmis pagal eilę.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje nėra pirmojo nurodyto lentelės <code>table</code> eilučių skaičiaus <code>countOrCondition</code>.\r\n    Praleidžiamų eilučių skaičius priklauso nuo pasirenkamo parametro <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jei praleidžiama <code>countOrCondition</code>, praleidžiama tik pirmoji eilutė. </li>\r\n    <li> Jei <code>countOrCondition</code> yra skaičius, bus praleistas toks skaičius eilučių (pradedant nuo viršaus). </li>\r\n    <li> Jei <code>countOrCondition</code> yra sąlyga, bus praleistos ją atitinkančios eilutės iki eilutės, kuri sąlygos neatitiks.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Praleiskite pirmąją lentelės eilutę.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Praleiskite pirmąsias dvi lentelės eilutes.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Praleiskite pirmąsias lentelės eilutes, atitinkančias sąlygą [Pricea] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Neleidžia vykdyti jokių proceso pabaigos operacijų pagal pirminį duomenų šaltinį.",
        "Documentation.LongDescription": "Neleidžia vykdyti jokių proceso pabaigos operacijų pagal pirminį duomenų šaltinį <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Gauna duomenis iš SQL lentelės taip, kad nebūtų vykdomos jokios proceso pabaigos operacijos kaip užklausa SQL serveryje.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Stulpeliai pakeičiami į eilutes, o eilutės – į stulpelius.",
        "Documentation.LongDescription": "Stulpeliai pakeičiami į eilutes, o eilutės – į stulpelius.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pavadinimų reikšmių porų lentelės eilutės pakeičiamos į stulpelius.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Gaunami ryšiai tarp lentelių rinkinio.",
        "Documentation.LongDescription": "Gaunami ryšiai tarp lentelių rinkinio. Laikoma, kad rinkinio <code>tables</code> struktūra yra panaši į naršymo lentelės struktūrą. <code>dataColumn</code> apibrėžtame stulpelyje yra faktinės duomenų lentelės.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Pateikiama SQL lentelių ir peržiūrų iš „Teradata“ duomenų bazės lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių iš serveryje <code>server</code> esančios „Teradata“ duomenų bazės lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "„Azure“ laiko sekos įžvalgos"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Įvesdami skaičių nurodykite, kelių mėnesių „Twilio“ duomenis gauti.",
        "Documentation.DisplayName": "„Twilio“",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "„Twilio“",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Twilio“ duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Pateikiama lentelė su nurodyto lentelės tipo stulpelių aprašu (t. y. schema).",
        "Documentation.LongDescription": "<p>Pateikiama lentelė, apibūdinanti <code>tableType</code> stulpelius.</p>\r\n<p>Pateiktos lentelės aprašą žr. <code>Table.Schema</code> dokumentacijoje.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "„Azure DevOps Services“ informacijos santrauka",
        "Documentation.DisplayName": "„Azure DevOps Services“ informacijos santrauka",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų „OData“ informacijos santraukų lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Prisijungimas prie „Viva“ įžvalgų duomenų",
        "Documentation.LongDescription": "Importuokite savaitės metriką ir atributų duomenis iš „Workplace Analytics“.",
        "Documentation.Examples": [
          {
            "Description": "Pateikia lentelę su matomais atributais ir kiekvieno matuojamo darbuotojo skaidinyje savaitės metriką.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Pateikiamas HTML dokumento, išskaidyto į sudedamųjų dalių struktūrą, turinys ir viso dokumento bei jo teksto po žymių pašalinimo išraiška.",
        "Documentation.LongDescription": "Pateikiamas HTML dokumento, išskaidyto į sudedamųjų dalių struktūrą, turinys ir viso dokumento bei jo teksto po žymių pašalinimo išraiška.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Pateikiama pagrindinių „Webtrends“ metrikų lentelė.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Iškviečia „Webtrends“ pagrindinių metrikų galinį punktą ir pateikia visus duomenis kaip lentelę.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama pagrindinių nuomotojo 98765 metrikų per pastarąsias 30 dienų lentelė",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Pagrindinių metrikų lentelė"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Įveskite profilio ID, susietą su „Webtrends“ paskyra.",
        "Documentation.DisplayName": "„Webtrends“",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "„Webtrends“",
        "Documentation.LongDescription": "Pateikiama lentelė su susijusiais „Webtrends“ duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Prisijungimas prie „Viva“ įžvalgų duomenų",
        "Documentation.LongDescription": "Importuokite savaitės metriką ir atributų duomenis iš „Workplace Analytics“.",
        "Documentation.Examples": [
          {
            "Description": "Pateikia lentelę su matomais atributais ir kiekvieno matuojamo darbuotojo skaidinyje savaitės metriką.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Pateikiamas XML dokumento turinys kaip hierarchinė lentelė.",
        "Documentation.LongDescription": "Pateikiamas XML dokumento turinys kaip hierarchinė lentelė.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Pateikiamas XML dokumento turinys kaip įdėtasis plokščiųjų lentelių rinkinys.",
        "Documentation.LongDescription": "Pateikiamas XML dokumento turinys kaip įdėtasis plokščiųjų lentelių rinkinys.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gaukite vietinio XML failo turinį.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Įveskite „Zendesk“ paskyros URL.",
        "Documentation.DisplayName": "„Zendesk“",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "„Zendesk“",
        "Documentation.LongDescription": "Pateikiama lentelė su susijusiais „Zendesk“ duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Pateikiamas ADO.NET duomenų šaltinio schemų rinkinys.",
        "Documentation.LongDescription": "Pateikiamas ADO.NET duomenų šaltinio schemų rinkinys su teikimo įrankio pavadinimu <code>providerName</code> ir jungimosi eilute <code>connectionString</code>. <code>connectionString</code> gali būti ypatybės reikšmių porų tekstas arba įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai. Norint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "„Amazon Redshift“",
        "Documentation.Caption": "„Amazon Redshift“ (beta versija)",
        "Documentation.Description": "Importuoti duomenis iš „Amazon Redshift“ duomenų bazės.",
        "Documentation.LongDescription": "Pateikia lentelę, kurioje nurodytos lentelės „Amazon Redshift“ sankaupos <code>server</code> duomenų bazėje <code>database</code>.  Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n<ul>\r\n<li><code>Provider Name</code>: tekstinė reikšmė, naudojama kaip ryšio teikėjo pavadinimas. Ji naudojama naudojant „Microsoft“ autentifikavimą.</li>\r\n<li><code>Batch Size</code>: eilučių, kurios gautos vienu serverio iškvietimu, skaičius.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Pateikiama kelių dimensijų kubų arba lentelinių modelių lentelė iš analizės tarnybos duomenų bazės.",
        "Documentation.LongDescription": "Serveryje <code>server</code> pateikiama kelių dimensijų kubų arba lentelinių modelių lentelė iš analizės tarnybos duomenų bazės <code>database</code>. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>Query</code> : Pirminė MDX užklausa, naudojama duomenims nuskaityti.</li>\r\n<li><code>TypedMeasureColumns</code> : Loginė reikšmė, nurodanti, ar kelių dimensijų arba lentelės modelyje nurodyti tipai bus naudojami pridėtų matų stulpelių tipams. Kai nustatyta „false“, tipas Skaičius bus naudojamas visuose matų stulpeliuose. Šios parinkties numatytoji reikšmė yra „false“.</li>\r\n<li><code>Culture</code> : Kultūros pavadinimas, nurodantis duomenų kultūrą. Jis atitinka jungimosi eilutės ypatybę Lokalės identifikatorius.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>SubQueries</code> : Skaičius (0, 1 arba 2), nustatantis ypatybės SubQueries reikšmę jungimosi eilutėje. Jis kontroliuoja papildomų pasirinkimų arba papildomų kubų apskaičiuotųjų narių veikimo būdą. (Numatytoji reikšmė – 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "„Spark“",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Pateikiama lentelė, kurioje išvardijamos nurodyto „Spark“ blokinio lentelės.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje išvardijamos „Spark“ blokinio <code>host</code> lentelės, naudojančios <code>protocol</code>.  Tinkami protokolai:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė, kurioje išvardijamos nurodyto „Spark“ blokinio lentelės.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Įveskite organizacijos ir projekto pavadinimus.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "„Azure DevOps“ serveris (tik lentos)",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų analizės rodinių lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "„HDInsight Interactive Query“",
        "Documentation.Caption": null,
        "Documentation.Description": "Importuoti duomenis iš „HDInsight Interactive Query“",
        "Documentation.LongDescription": "\r\nPateikiamas „HDInsight Interactive Query“ lentelių sąrašas, nurodytas „HDInsight Interactive Query“ <code>serverio</code> <code>duomenų bazėje</code>. Be serverio gali būti nurodytas prievado numeris, atskirtas dvitaškiu. Galima nurodyti pasirenkamą parametrą <code>options</code>, kuriuo valdomos tolesnės parinktys.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti, kiek laukti prieš nutraukiant mėginimą užmegzti ryšį su serveriu. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n        <li><code>CommandTimeout</code>: trukmė, kontroliuojanti, kiek laiko leidžiama vykdyti užklausą serveryje, prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n</ul>\r\nParametras <code>options</code> nurodomas kaip [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Pateikiama lentelė su stulpeliais, susietais su objekto „Common Data Model“ atributais, įskaitant duomenų tipus.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Pateikiama lentelė su stulpeliais, susietais su objekto „Common Data Model“ atributais, įskaitant duomenų tipus. Stulpeliai iš objekto apibrėžties bus pridėti, jei nebus susieti, ir visi nesusieti stulpeliai bus pašalinti.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Pritaikius parametrą pateikia kubą.",
        "Documentation.LongDescription": "Pritaikius <code>parameter</code> su <code>arguments</code> <code>cube</code> pateikia kubą.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Pakeičiamas kubo filtro konteksto dimensijų detalumo lygis sutraukiant atributus, susietus su nurodytais stulpeliais.",
        "Documentation.LongDescription": "Pakeičiamas <code>cube</code> filtro konteksto dimensijų detalumo lygis sutraukiant atributus, susietus su nurodytais stulpeliais <code>columnNames</code>. Stulpeliai taip pat pašalinami iš kubo lentelės rodinio.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Pakeičia Cube.Dimensions pateiktą dimensijų rinkinį.",
        "Documentation.LongDescription": "Pakeičiamas <code>Cube.Dimensions</code>\" pateiktas dimensijų rinkinys.\r\n    Pavyzdžiui, šią funkciją galima naudoti ID stulpeliui įtraukti į dimensijos atributą, kad duomenų šaltinis galėtų grupuoti pagal ID, o ne rodomą reikšmę.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Taikomas kubo funkcijų sąrašas.",
        "Documentation.LongDescription": "Kubo funkcijų sąrašas <code>transforms</code> taikomas <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Pateikiama SQL lentelių ir rodinių, pasiekiamų Db2 duomenų bazėje, lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių, pasiekiamų serveryje <code>server</code> esančios Db2 duomenų bazės egzemplioriuje, kurio pavadinimas <code>database</code>, lentelė . Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>Implementation</code> : Nurodo, kurį vidinės duomenų bazės teikėją naudoti. Tinkamos reikšmės yra: IBM ir „Microsoft“.</li>\r\n<li><code>BinaryCodePage</code> : CCSID (koduotų simbolių rinkinio identifikatorius) numeris, kurį naudojant Db2 FOR BIT dvejetainiai duomenys dekoduojami į simbolių eilutes. Taikoma, kai reikšmė Diegimas yra „Microsoft“. Nustatykite 0, kad išjungtumėte konvertavimą (numatytoji reikšmė). Nustatykite 1, kad būtų konvertuojama pagal duomenų bazės koduotę. Nustatykite kitą CCSID numerį, kad konvertuotumėte į programos koduotę.</li>\r\n<li><code>PackageCollection</code> : Nurodoma paketų kolekcijos eilutės reikšmė (numatytoji reikšmė yra NULLID), kad būtų įjungta galimybė naudoti bendrinamus paketus, kurių reikia norint apdoroti SQL sakinius. Taikoma, jei reikšmė Implementation yra „Microsoft“.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Nurodo, ar ryšys užmegztas per „Db2 Connect“ šliuzą. Taikoma diegiant = „Microsoft“.</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Gaunamas duomenų rinkinys iš Data.World"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "„Azure Databricks“"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "„Azure Databricks“"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "„Databricks“"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Pateikiama lentelė, kurioje yra „Azure“ saugyklos nurodytame konteineryje rastų didelių dvejetainių objektų ypatybės ir turinys.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje yra po eilutę kiekvienam didelio dvejetainio objekto failui, rastam „Azure“ saugyklos konteinerio URL <code>account</code>. Kiekvienoje eilutėje yra failo ypatybės ir jo turinio saitas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Pateikia lentelę, kurioje yra nurodytų CSS išrinkiklių paleidimo pagal pateiktą HTML rezultatai.",
        "Documentation.LongDescription": "Pateikiama nurodytų CSS išrinkiklių vykdymo pagal pateiktą <code>html</code> rezultatų lentelė. Norint nurodyti papildomas ypatybes galima nurodyti pasirenkamą įrašo parametrą <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Pasiekiami duomenys",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė iš pavyzdinės HTML teksto reikšmės.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Džo</div><span>vadovas</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector = \".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Išskleidžia visas href nuorodas iš html teksto reikšmės pavyzdžio.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Pateikia SQL lentelių lenteles ir rodinius, prieinamus „Informix“ duomenų bazėje.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių, pasiekiamų serveryje <code>server</code> esančiame „Informix“ duomenų bazės egzemplioriuje, kurio pavadinimas <code>database</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Pateikiama lentelė su galimų klientų informacija.",
        "Documentation.LongDescription": "Kreipiamasi į „Marketo“ REST API galinį punktą naudojant <code>url</code>/rest/v1/leads.json. Pateikiami visi galimi klientai, esantys sąraše <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama trijų galimų klientų informacija.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Lentelė su pateiktų galimų klientų informacija"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Įveskite „Marketo“ REST API galinio punkto, susieto su jūsų paskyra, URL.",
        "Documentation.DisplayName": "„Marketo“",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "„Marketo“",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Marketo“ duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Pateikiama SQL lentelių, peržiūrų ir saugomų skaliarinių funkcijų, pasiekiamų „MySQL“ duomenų bazėje, lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir saugomų skaliarinių funkcijų, pasiekiamų serveryje <code>server</code> esančiame „MySQL“ duomenų bazės egzemplioriuje, kurio pavadinimas <code>database</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>Encoding</code> : TextEncoding reikšmė, kuri nurodo simbolių rinkinį, naudojamą užkoduoti visoms į serverį siunčiamoms užklausoms (numatytoji reikšmė yra null).</li>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti tinyint stulpelius serveryje kaip logines reikšmes. Numatytoji reikšmė yra „true“.</li>\r\n<li><code>OldGuids</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar char(36) stulpeliai (jei nustatyta reikšmė „false“) arba binary(16) stulpeliai (jei nustatyta reikšmė „true“) bus laikomi GUID. Numatytoji reikšmė yra „false“.</li>\r\n<li><code>ReturnSingleDatabase</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti visas duomenų bazių lenteles (jei nustatyta reikšmė „false“), ar pateikti nurodytos duomenų bazės lenteles ir rodinius (jei nustatyta reikšmė „true“). Numatytoji reikšmė yra „false“.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "„IBM Netezza“",
        "Documentation.Caption": "„IBM Netezza“",
        "Documentation.Description": "Importuoti duomenis iš „IBM Netezza“ duomenų bazės.",
        "Documentation.LongDescription": "\r\nPateikiama „Netezza“ lentelių, rodinių ir saugomų funkcijų iš „Netezza“ serverio duomenų bazės <code>database</code>, esančios serveryje <code>server</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą, <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: loginė reikšmė (true / false), nustatanti, ar sugeneruoti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė yra true)</li>\r\n        <li><code>HierarchicalNavigation</code>: loginė reikšmė (true / false), nurodanti, ar lenteles rodyti sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė yra false)</li>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti, kiek laiko laukti prieš nutraukiant bandymą užmegzti ryšį su serveriu. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n        <li><code>CommandTimeout</code>: trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>NormalizeDatabaseName</code>: loginė reikšmė (true / false), nustatanti, ar normalizuoti duomenų bazės pavadinimą į didžiąsias raides, ar interpretuoti jį tiesiogiai (numatytoji reikšmė yra true).</li>\r\n</ul>\r\nĮrašo parametras nurodomas kaip [option1 = value1, option2 = value2...].",
        "Documentation.Examples": [
          {
            "Description": "Išvardyti „IBM Netezza“ projekto lenteles.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Pateikiamas rezultatas paleidus prigimtinę užklausą ODBC duomenų šaltinyje.",
        "Documentation.LongDescription": "Pateikiamas <code>query</code> paleidimo rezultatas, kai naudojama jungimosi eilutė <code>connectionString</code> ir ODBC. <code>connectionString</code> gali būti tekstas arba ypatybės reikšmių porų įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai. Norint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė – 15 sek.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Paprastos užklausos paleidimo rezultato pateikimas pagal pateiktą jungimosi eilutę.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Pateikiamas rezultatas paleidus prigimtinę užklausą OLE DB duomenų šaltinyje.",
        "Documentation.LongDescription": "Pateikiamas <code>query</code> paleidimo rezultatas, kai naudojama jungimosi eilutė <code>connectionString</code> ir OLE DB. <code>connectionString</code> gali būti tekstas arba ypatybės reikšmių porų įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai. Norint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Pateikiama SQL lentelių ir peržiūrų, pasiekiamų „PostgreSQL“ duomenų bazėje, lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių, pasiekiamų serveryje <code>server</code> esančiame „PostgreSQL“ duomenų bazės egzemplioriuje, kurio pavadinimas <code>database</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "„Snowflake“",
        "Documentation.Description": "Importuoti duomenis iš „Snowflake“ duomenų apdorojimo sandėlio.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje išvardijamos „Snowflake“ duomenų apdorojimo <code>sandėlio</code>, esančio <code>serveryje</code>, lentelės. Galima nurodyti pasirinktinį įrašo parametrą <code>parinktys</code>, norint valdyti toliau nurodytas parinktis.\r\n<ul>\r\n<li><code>„Role“</code>: tekstinė reikšmė, naudojama kaip ryšio vaidmens pavadinimas.</li>\r\n<li><code>„CreateNavigationProperties“</code>: loginė reikšmė ( „true“ / „false“), nustatanti, ar reikia generuoti pateikiamų reikšmių naršymo ypatybes (numatytoji reikšmė yra „true“)</li>\r\n<li><code>„ConnectionTimeout“</code>: kiek sekundžių laukti tinklo atsako iš „Snowflake“.</li>\r\n<li><code>„CommandTimeout“</code>: kiek sekundžių laukti, kol bus įvykdyta užklausa.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Pateikti lentelių „Snowflake“ sandėlyje sąrašą.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Pateikiama lentelė, kurioje išvardijamos nurodyto „Spark“ blokinio lentelės.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje išvardijamos „Spark“ blokinio <code>host</code> lentelės, naudojančios <code>protocol</code>.  Tinkami protokolai:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Nurodykite lenteles „Azure Spark“ egzemplioriuje.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Pateikiama SQL lentelių, peržiūrų ir saugomų funkcijų iš SQL serverio duomenų bazės lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių, rodinių ir saugomų funkcijų iš „SQL Server“ duomenų bazės <code>database</code>, esančios serveryje <code>server</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu arba kableliu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Skaičius, kuris nustato maxdop užklausos sąlygos reikšmę sugeneruotoje SQL užklausoje.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>MultiSubnetFailover</code> : Loginė reikšmė („true“ / „false“), nustatanti ypatybės MultiSubnetFailover reikšmę jungimosi eilutėje (numatytoji reikšmė – „false“).</li>\r\n<li><code>UnsafeTypeConversions</code> : Loginė (teisinga / klaidinga) reikšmė, kuri, jei yra teisinga, bando perduoti tipo konversijas, kurios galėjo nepavykti ir dėl kurių galėjo nepavykti įvykdyti visą užklausą. Nerekomenduojama bendram naudojimui.</li>\r\n<li><code>ContextInfo</code> : Dvejetainė reikšmė, naudojama CONTEXT_INFO nustatyti prieš vykdant kiekvieną komandą.</li>\r\n<li><code>OmitSRID</code> : Loginė (teisinga / klaidinga) reikšmė, kuri, jei yra teisinga, praleidžia SRID, kai kuriamas gerai žinomas tekstas iš geometrijos ir geografijos tipų.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Loginė (TRUE / FALSE) reikšmė, kuri, jei TRUE, leidžia užklausą perduoti tarp duomenų bazių, esančių tame pačiame serveryje. Numatytoji reikšmė yra FALSE.</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, ryšio parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Pateikiama SQL lentelių ir peržiūrų, pasiekiamų „Sybase“ duomenų bazėje, lentelė.",
        "Documentation.LongDescription": "Pateikiama SQL lentelių ir rodinių, pasiekiamų serveryje <code>server</code> esančiame „Sybase“ duomenų bazės egzemplioriuje, kurio pavadinimas <code>database</code>, lentelė. Pasirinktinai kartu su serveriu galima nurodyti prievadą, atskiriant juos dvitaškiu. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Funkcija, naudojama naršymo ypatybių pavadinimams kurti.</li>\r\n<li><code>Query</code> : Pirminė SQL užklausa, naudojama duomenims nuskaityti. Jei užklausa pateikia kelis rezultatų rinkinius, bus rodomas tik pirmasis.</li>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>ConnectionTimeout</code> : Trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n</ul>\r\n\r\n    Pavyzdžiui, įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...] arba [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Pridedamas stulpelis su tiksliomis padėties reikšmėmis.",
        "Documentation.LongDescription": "Pridedamas stulpelis pavadinimu <code>newColumnName</code> prie <code>table</code> su tiksliomis padėties reikšmėmis.\r\n    Pasirenkama reikšmė, <code>initialValue</code>, pradinė indekso reikšmė. Pasirenkama reikšmė, <code>increment</code>, nurodo, kiek papildyti kiekvieną indekso reikšmę.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Įtraukite indekso stulpelį pavadinimu „Index“ į lentelę.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Į lentelę įtraukite stulpelį „Index“, pradėdami nuo reikšmės 10 ir papildydami po 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Pagal lentelės sąrašų stulpelį sukurkite kiekvienos reikšmės sąraše eilutės kopiją.",
        "Documentation.LongDescription": "Pagal <code>table</code>, kur <code>column</code> – reikšmių sąrašas, sąrašas išskaidomas į kiekvienos reikšmės eilutę. Kitų stulpelių reikšmės dubliuojamos kiekvienoje sukurtoje naujoje eilutėje.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Skaidykite sąrašo stulpelį [Name] lentelėje.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Stulpelyje žemyn išplatinama ankstesnio langelio reikšmė į neapibrėžtų reikšmių langelius.",
        "Documentation.LongDescription": "Pateikiama lentelė iš nurodyto <code>table</code>, kur ankstesnio langelio reikšmė išplatinama į neapibrėžtus langelius po nurodytu <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su neapibrėžtomis stulpelio [Place] reikšmėmis, užpildytą aukščiau esančia reikšme iš lentelės.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Stulpelyje aukštyn išplatinama langelio reikšmė į neapibrėžtų reikšmių langelius.",
        "Documentation.LongDescription": "Pateikiama lentelė iš nurodyto <code>table</code>, kur kito langelio reikšmė išplatinama aukštyn į neapibrėžtus langelius nurodytame <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su neapibrėžtomis stulpelio [Column2] reikšmėmis, užpildytą žemiau esančia reikšme iš lentelės.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Pateikiamos visos eilutės, kuriose gali būti nurodytas tekstas lentelėje.",
        "Documentation.LongDescription": "Pateikiamos visos eilutės lentelėje <code>table</code>, kurioje yra teksto <code>text</code>. Jei tekstas nerastas, pateikiama tuščia lentelė.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite lentelės eilutes, kuriose yra Bobas.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Pateikiamos pirmosios nurodytos eilutės pagal eilę.",
        "Documentation.LongDescription": "Pateikiama pirmoji (-osios) lentelės, <code>table</code> eilutė (-ės), priklausomai nuo reikšmės <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jei <code>countOrCondition</code> yra skaičius, bus pateiktas toks skaičius eilučių (pradedant nuo viršaus). </li>\r\n    <li> Jei <code>countOrCondition</code> yra sąlyga, bus pateiktos ją atitinkančios eilutės iki eilutės, kuri sąlygos neatitiks.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite pirmąsias dvi lentelės eilutes.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Raskite pirmąsias eilutes, kur [a] > 0, lentelėje.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Pateikiama lentelė, kuri yra sudaryto suskaidytų lentelių rinkinio rezultatas.",
        "Documentation.LongDescription": "Pateikiama lentelė, gauta sujungus kelias išskaidytas lenteles, <code>partitions</code>. <code>partitionColumn</code> yra įtrauktino stulpelio pavadinimas. Stulpelio tipo numatytoji reikšmė yra <code>any</code>, bet gali būti nurodyta <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite elemento tipą sąraše <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Pateikiamas paskutinis nurodytas eilučių skaičius.",
        "Documentation.LongDescription": "Pateikiama (-os) paskutinė (-ės) eilutė (-ės) iš lentelės, <code>table</code>, priklausomai nuo reikšmės <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Jei <code>countOrCondition</code> yra skaičius, bus pateiktas toks skaičius eilučių, pradedant nuo padėties (pabaiga – <code>countOrCondition</code>). </li>\r\n    <li> Jei <code>countOrCondition</code> yra sąlyga, bus pateiktos ją atitinkančios eilutės didėjančios padėties tvarka iki eilutės, kuri sąlygos neatitiks.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite paskutines dvi lentelės eilutes.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Raskite paskutines eilutes, kur [a] > 0, lentelėje.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Pateikiama lentelė, kurioje visi stulpeliai turi nurodyto teksto prefiksą.",
        "Documentation.LongDescription": "Pateikiama lentelė, kurioje visi stulpelių pavadinimai iš pateikto <code>table</code> turi nurodyto teksto prefiksą <code>prefix</code>, taip pat tašką formoje <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nurodykite stulpelių su „My Table“ prefiksus lentelėje.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Pateikiamos eilutės, prasidedančios ties nurodytu poslinkiu.",
        "Documentation.LongDescription": "Pateikiamos eilutės iš <code>table</code>, prasidedančios ties nurodytu <code>offset</code>. Pasirenkamas parametras <code>count</code> nurodo, kiek eilučių pateikti. Pagal numatytuosius parametrus pateikiamos visos eilutės po poslinkio.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamos visos eilutės, prasidedančios poslinkiu 1, lentelėje.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pateikiama viena eilutė, prasidedanti poslinkiu 1, lentelėje.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Pašalinami nurodyti stulpeliai.",
        "Documentation.LongDescription": "Pašalinami nurodyti <code>columns</code> iš pateikto <code>table</code>.\r\n    Jei nurodyto stulpelio nėra, pateikiama klaida, nebent pasirinktinis parametras <code>missingField</code> nurodo alternatyvų veikimą (pvz., <code>MissingField.UseNull</code> arba <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite stulpelį [Phone] iš lentelės.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Bandykite pašalinti neegzistuojantį stulpelį iš lentelės.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Iš lentelės pašalinami visi nurodytų eilučių atvejai.",
        "Documentation.LongDescription": "Iš <code>table</code> pašalinami visi nurodytų <code>rows</code> atvejai.\r\n    Galima nurodyti pasirenkamą parametrą <code>equationCriteria</code>, norint valdyti lentelės eilučių palyginimą.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite visas eilutes, kai [a = 1], iš lentelės <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Pašalinamas nurodytas eilučių skaičius.",
        "Documentation.LongDescription": "Pašalinamas eilučių <code>count</code> nuo <code>table</code> pradžios, pradedant nurodytu <code>offset</code>. Jei <code>count</code> parametras nepateiktas, naudojamas numatytasis skaičius 1. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite pirmąją eilutę iš lentelės.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pašalinkite eilutę, esančią 1 padėtyje, iš lentelės.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pašalinkite dvi eilutes, pradedant nuo 1 padėties, iš lentelės.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Taikomas (-i) formos {old, new} pervardijimas (-ai).",
        "Documentation.LongDescription": "Atliekami nurodyti lentelės <code>table</code> stulpelių pervardijimai. Pakeitimo operaciją <code>renames</code> sudaro dviejų reikšmių – senojo stulpelio pavadinimo ir naujojo stulpelio pavadinimo – sąrašas.\r\n    Jei stulpelio nėra, pateikiama išimtis, nebent pasirenkamas parametras <code>missingField</code> nurodo alternatyvą (pvz., <code>MissingField.UseNull</code> arba <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite stulpelio pavadinimą „CustomerNum“ į „CustomerID“ lentelėje.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Pakeiskite stulpelio pavadinimą „CustomerNum“ į „CustomerID“ ir „PhoneNum“ į „Phone“ lentelėje.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Pakeiskite stulpelio pavadinimą „NewCol“ į „NewColumn“ lentelėje ir nepaisykite, jei stulpelio nėra.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Pateikiama lentelė su stulpeliais nurodyta tvarka.",
        "Documentation.LongDescription": "Pateikiama lentelė iš išvesties <code>table</code> su stulpeliais <code>columnOrder</code> nurodyta tvarka. Stulpeliai, kurie nenurodyti sąraše, nebus pertvarkomi.\r\n     Jei stulpelio nėra, pateikiama išimtis, jei pasirenkamas parametras <code>missingField</code> nenurodo alternatyvos (pvz., <code>MissingField.UseNull</code> arba <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite [Phone] ir [Name] stulpelių tvarką lentelėje.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Pakeiskite [Phone] ir [Address] stulpelių tvarką arba naudokite „MissingField.Ignore“ lentelėje. Tai nepakeičia lentelės, nes stulpelio [Address] nėra.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Kartojamos lentelių eilutės nurodytą kartų skaičių.",
        "Documentation.LongDescription": "Pateikiama lentelė su eilutėmis iš išvesties <code>table</code>, kartojama nurodytą kartų <code>count</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Kartokite eilutes lentelėje du kartus.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Pakeičia nurodytų stulpelių klaidų reikšmes nurodyta reikšme.",
        "Documentation.LongDescription": "Pakeičia <code>table</code> nurodytų stulpelių klaidų reikšmes naujomis sąrašo <code>errorReplacement</code> reikšmėmis. Sąrašo formatas yra {{column1, value1}, …}. Gali būti tik viena stulpelio pakaitinė reikšmė. Kelis kartus nurodžius stulpelį įvyks klaida.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite klaidos reikšmę tekstu „world“ lentelėje.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Pakeiskite klaidos reikšmę lentelės A stulpelyje tekstu „hello“, o B stulpelyje – „world“.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Pakeičia nurodytos lentelės raktus.",
        "Documentation.LongDescription": "Pakeičia nurodytos lentelės raktus.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pakeisti esamus lentelės raktus.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Pakeičiamos visos nurodytos eilutės pateikta (-omis) eilute (-ėmis).",
        "Documentation.LongDescription": "Visos nurodytos <code>table</code> eilutės pakeičiamos pateiktomis eilutėmis. Pakeistinos eilutės ir pakeitimai nurodyti <code>replacements</code>, naudojant formatavimą {old, new}.\r\n    Galima nurodyti pasirenkamą parametrą <code>equationCriteria</code>, norint valdyti lentelės eilučių palyginimą.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite eilutes [a = 1, b = 2] ir [a = 2, b = 3] į [a = -1, b = -2], [a = -2, b = -3] lentelėje.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Pateikiama lentelė tik su nurodytais stulpeliais.",
        "Documentation.LongDescription": "Pateikiama <code>table</code> tik su nurodytais <code>columns</code>.\r\n    <ul>\r\n       <li><code>table</code>: pateikta lentelė.</li>\r\n       <li><code>columns</code>: pateiktinos lentelės <code>table</code> stulpelių sąrašas. Pateiktos lentelės stulpeliai išdėstyti tvarka, nurodyta <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(pasirenkama)</i> ką daryti, jei stulpelio nėra.  Pavyzdys: <code>MissingField.UseNull</code> arba <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Įtraukite tik stulpelį [Pavadinimas].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Įtraukite tik stulpelius [KlientoID] ir [Pavadinimas].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Jeigu įtrauktas stulpelis neegzistuoja, numatytasis rezultatas yra klaida.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Jeigu įtrauktas stulpelis neegzistuoja, parinktis <code>MissingField.UseNull</code> sukuria „null“ reikšmių stulpelį.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Pasirenkamos eilutės, atitinkančios sąlygos funkciją.",
        "Documentation.LongDescription": "Pateikiama lentelė eilučių iš <code>table</code>, atitinkančių pasirinkimą <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pasirinkite lentelės eilutes, kuriose stulpelio [KlientoID] reikšmės yra didesnės už 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Pasirinkite lentelės eilutes, kurių pavadinimuose nėra B.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Rūšiuojama lentelė, naudojant vieną ar daugiau stulpelių pavadinimų ir palyginimo kriterijus.",
        "Documentation.LongDescription": "Rūšiuojama <code>table</code>, naudojant vieno ar daugiau stulpelių pavadinimų sąrašą ir pasirenkamą <code>comparisonCriteria</code> formoje { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Rikiuokite lentelę stulpelyje „OrderID“.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Rikiuokite lentelę stulpelyje „OrderID“ mažėjimo tvarka.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Rikiuokite lentelę stulpelyje „CustomerID“, tada stulpelyje „OrderID“, stulpelį „CustomerID“ rikiuodami mažėjimo tvarka.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Stulpelių pavadinimai transformuojami naudojant nurodytą funkciją.",
        "Documentation.LongDescription": "Stulpelių pavadinimai transformuojami naudojant nurodytą funkciją <code>nameGenerator</code>. Tinkamos parinktys:\r\n    <div>\r\n      <code>MaxLength</code>: didžiausias naujų stulpelių pavadinimų ilgis. Jei naudojant nurodytą funkciją gaunamas ilgesnis stulpelio pavadinimas, šio ilgo pavadinimo pradžia / pabaiga bus pakoreguota.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> naudojama palyginimui valdyti, kai generuojami naujų stulpelių pavadinimai. Gali būti naudojamos lyginimo funkcijos, norint pateikti didžiųjų ir mažųjų raidžių neskiriančius arba į kultūrą ir lokalę atsižvelgiančius palyginimus.\r\n    </div>\r\n    <div>\r\n      Formulių kalba pateikiamos šios įtaisytosios lyginimo funkcijos:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: naudojama norint vykdyti tikslų eilės tvarka palyginimą</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama norint vykdyti tikslų eilės tvarka didžiųjų ir mažųjų raidžių neskiriantį palyginimą</li>\r\n      <li> <code>Comparer.FromCulture</code>: naudojama norint vykdyti į kultūrą atsižvelgiantį palyginimą</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Stulpelių pavadinimuose šalinti simbolį <code>#(tab)</code>",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Pakeiskite stulpelių pavadinimus, kad būtų neskiriant didžiųjų ir mažųjų raidžių sugeneruoti 6 simbolių ilgio pavadinimai.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Taikoma (-os) { column, type } formos tipo transformacija (-os) naudojant konkrečią kultūrą.",
        "Documentation.LongDescription": "Pateikiama lentelė iš įvesties <code>table</code> pritaikant transformavimo operaciją stulpeliams, nurodytiems parametre <code>typeTransformations</code> (kur formatas yra { column name, type name}), naudojant nurodytą kultūrą pasirinktiniame parametre <code>culture</code> (pavyzdžiui, „en-US“).\r\n    Jei stulpelio nėra, pateikiama išimtis.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformuokite [a] stulpelio reikšmių skaičių į tekstines reikšmes iš lentelės <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transformuojamos vieno ar kelių stulpelių reikšmės.",
        "Documentation.LongDescription": "Transformuoja <code>table</code> pritaikant kiekvieną stulpelio operaciją, nurodytą <code>transformOperations</code> (kur formatas yra { column name, transformation } arba { column name, transformation, new column type }).\r\n    Jei nurodyta <code>defaultTransformation</code>, ji bus taikoma visiems stulpeliams, nenurodytiems <code>transformOperations</code>.\r\n    Jei <code>transformOperations</code> nurodyto stulpelio nėra, pateikiama išimtis, nebent pasirenkamas parametras <code>missingField</code> nurodo alternatyvą (pvz., <code>MissingField.UseNull</code> arba <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite tekstines reikšmes, esančias stulpelyje [A], į skaitines reikšmes, o stulpelyje [B] esančias skaitines reikšmes – į tekstines.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Konvertuokite trūkstamo stulpelio [X] reikšmių skaičių į tekstines reikšmes, ignoruodami stulpelius, kurie neegzistuoja.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Konvertuokite trūkstamo stulpelio [X] reikšmių skaičių į tekstines reikšmes, pagal numatytuosius parametrus pažymėdami kaip neapibrėžtas stulpeliuose, kurie neegzistuoja.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Padidinkite stulpelio [B] skaitines reikšmes ir konvertuokite jas į tekstines reikšmes bei konvertuokite visus kitus stulpelius į skaičius.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Sukuriama arba pailginama lentelė su vartotojo nustatytomis užklausų ir veiksmų operacijų apdorojimo programomis.",
        "Documentation.LongDescription": "<p>Pateikia <code>table</code> rodinį, kur funkcijos, nurodytos <code>handlers</code>, yra naudojamos vietoj numatytųjų operacijos veiksmų, kai operacija taikoma rodiniui.</p>\r\n<p>Jei pateikiama <code>table</code>, visos apdorojimo programos funkcijos yra pasirinktinės. Jei <code>table</code> nepateikiama, būtina naudoti apdorojimo programos funkcijas <code>GetType</code> ir <code>GetRows</code>. Jei apdorojimo programos funkcija operacijai nenurodyta, <code>table</code> bus taikoma numatytoji operacijos elgsena (išskyrus <code>GetExpression</code> atvejus).</p>\r\n<p>Apdorojimo programos funkcijos turi pateikti reikšmę, kuri semantiškai lygi rezultatui, gautam <code>table</code> pritaikius operaciją (arba gautam rodiniui, jei naudojama <code>GetExpression</code>)..</p>\r\n<p>Jei apdorojimo funkcija pateikia klaidą, rodiniui taikoma numatytoji operacijos elgsena.</p>\r\n<p><code>Table.View</code> galima naudoti norint įdiegti perėjimą į duomenų šaltinį – M užklausų vertimą į šaltiniui būdingas užklausas (pvz., kad būtų sukurti T-SQL sakiniai iš M užklausų).</p>\r\n<p>Išsamesnį <code>Table.View</code> aprašą rasite paskelbtuose „Power Query“ tinkinamos jungties dokumentuose.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite pagrindinį rodinį, kuriam nereikia prieigos prie eilučių, kad būtų galima nustatyti tipą arba eilučių skaičių.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Įveskite organizacijos ir projekto pavadinimus.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "„Azure DevOps“ (tik lentos)",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų analizės rodinių lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importuoti duomenis iš „Vertica“",
        "Documentation.LongDescription": "Pateikiama duomenų bazės, pavadintos pagal <code>database</code> parametrą, serveryje, pavadintame pagal <code>server</code> parametrą, esančių schemų lentelė.\r\nNorint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti, kiek laiko laukti prieš nutraukiant bandymą užmegzti ryšį su serveriu. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n    <li><code>CommandTimeout </code>: trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamos lentelės platformoje „Vertica“"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Pateikiama lentelė su ataskaitų turiniu iš „Webtrends“.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Iškviečia nustatytą „Webtrends“ ataskaitų galinį punktą ir pateikia visus duomenis kaip lentelę.",
        "Documentation.Examples": [
          {
            "Description": "Iškviečia „Webtrends“ lankytojų ataskaitos galinį punktą, kad būtų pateikti pastarųjų 30 dienų duomenys",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Lankytojų duomenų lentelė"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Pateikiamas „Active Directory“ domenų sąrašas iš to paties miško kaip nurodytas domenas arba dabartinio įrenginio domenas, jeigu nenurodytas joks.",
        "Documentation.LongDescription": "Pateikiamas „Active Directory“ domenų sąrašas iš to paties miško kaip nurodytas domenas arba dabartinio įrenginio domenas, jeigu nenurodytas joks.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Pateikiamas pirminės užklausos paleidimo naudojant ADO.NET duomenų šaltinį rezultatas.",
        "Documentation.LongDescription": "Pateikiamas <code>query</code> paleidimo rezultatas, kai jungimosi eilutė yra <code>connectionString</code> ir naudojamas ADO.NET teikimo įrankis <code>providerName</code>. <code>connectionString</code> gali būti ypatybės reikšmių porų tekstas arba įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai. Norint nurodyti papildomas ypatybes, gali būti nurodytas pasirenkamas įrašo parametras <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. Numatytoji reikšmė yra dešimt minučių.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar pateikti su „SQL Server“ suderinamos jungimosi eilutės parinktis „Windows“ autentifikavimui. Numatytoji reikšmė – „true“.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Pateikia ataskaitą, tinkamą naudoti „Adobe Analytics“.",
        "Documentation.LongDescription": "Pateikiama kelių dimensijų paketų iš „Adobe Analytics“ lentelė. Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Loginė reikšmė („true“ / „false“), nustatanti, ar rodyti lenteles, sugrupuotas pagal jų schemų pavadinimus (numatytoji reikšmė – „false“).</li>\r\n<li><code>MaxRetryCount</code> : Užklausos rezultatų prašymų kartojimų skaičius. Numatytoji reikšmė yra 120.</li>\r\n<li><code>RetryInterval</code> : Laikas tarp kartojimų. Numatytoji reikšmė yra 1 sekundė.</li>\r\n<li><code>Implementation</code> : Nurodo „Adobe Analytics“ API versiją. Tinkamos reikšmės yra: „2.0“. Numatytoji reikšmė naudoja API 1.4 versiją</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "„Hive“ LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Importuoti duomenis iš „Hive“ LLAP",
        "Documentation.LongDescription": "\r\nPateikiamas „Hive“ LLAP lentelių sąrašas, nurodytas „Hive“ LLAP <code>serverio</code> <code>duomenų bazėje</code> (naudojant pasirinktą <code>protokolą</code>). Be serverio gali būti nurodytas prievado numeris, atskirtas dvitaškiu. „Thrift“ perdavimo protokolas yra sunumeruotojo tipo ir jo reikšmės yra Standartinis, HTTP. Galima nurodyti pasirenkamą parametrą <code>options</code>, kuriuo valdomos tolesnės parinktys.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti, kiek laukti prieš nutraukiant mėginimą užmegzti ryšį su serveriu. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n        <li><code>CommandTimeout</code>: trukmė, kontroliuojanti, kiek laiko leidžiama vykdyti užklausą serveryje, prieš ją atšaukiant. Numatytoji reikšmė priklauso nuo tvarkyklės.</li>\r\n</ul>\r\nParametras <code>options</code> nurodomas kaip [option1 = value1, option2 = value2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami laikotarpio nuo 2017-05-01 iki 2017-06-15 suvestinių duomenys",
            "Code": "leisti\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      \r\n          rezultate",
            "Result": "Funkcija pateiks suvestinių duomenis nuo 2017-05-01 iki 2017-06-15"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami 2017 m. balandžio mėn. suvestinių duomenys.",
            "Code": "leisti\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      \r\n          rezultate",
            "Result": "Funkcija pateiks duomenis nuo 2017-04-01 iki 2017-04-30"
          },
          {
            "Description": "Tariant, kad šiandien yra 2017-06-15, gaunami suvestinių duomenys nuo 2017 m. balandžio mėn. iki šiandien.",
            "Code": "leisti\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      \r\n          rezultate",
            "Result": "Funkcija pateiks duomenis nuo 2017-04-01 iki 2017-06-15"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "„Azure“ išlaidų valdymas",
        "Documentation.Description": "„Azure“ išlaidų valdymas",
        "Documentation.DisplayName": "„Azure“ išlaidų valdymas",
        "Documentation.LongDescription": "„Azure“ išlaidų valdymas",
        "Documentation.Name": "„Azure“ išlaidų valdymas"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Įveskite organizacijos ir projekto pavadinimus.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų „OData“ informacijos santraukų lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Prisijunkite prie „Dataverse“ egzemplioriaus („Dynamics 365“ ir „PowerApps“)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Nurodyta dimensijų lentelė suliejama su kubo filtro kontekstu ir pakeičiamas filtro konteksto dimensijų detalumo lygis išplečiant nurodytą dimensijos atributų rinkinį.",
        "Documentation.LongDescription": "Nurodyta dimensijų lentelė <code>dimensionSelector</code> suliejama su kubo <code>cube</code> filtro kontekstu ir pakeičiamas filtro konteksto dimensijų detalumo lygis išplečiant nurodytą dimensijos atributų rinkinį <code>attributeNames</code>. Dimensijos atributai įtraukiami į lentelės rodinio stulpelius pavadinimu <code>newColumnNames</code> arba <code>attributeNames</code>, jei nenurodyta.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Į kubą įtraukiamas stulpelis, kuriame yra mato, taikyto kiekvienos eilutės kontekste, rezultatai.",
        "Documentation.LongDescription": "Į <code>cube</code> įtraukiamas stulpelis pavadinimu <code>column</code>, kuriame yra mato <code>measureSelector</code>, taikyto kiekvienos eilutės kontekste, rezultatai. Mato taikymui įtakos turi dimensijų detalumo lygio ir dalių keitimas. Mato vertės bus pakoreguotos atlikus tam tikras kubo operacijas.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 for Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics 365“ verslo centro aplinką ir įmonę.",
        "Documentation.DisplayName": "„Dynamics 365“ verslo centras",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "„Dynamics 365“ verslo centras",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics 365“ verslo centro duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics 365“ verslo centro aplinką ir įmonę.",
        "Documentation.DisplayName": "„Dynamics 365“ verslo centras",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "„Dynamics 365“ verslo centras",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics 365“ verslo centro duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics 365“ verslo centro aplinką ir įmonę.",
        "Documentation.DisplayName": "„Dynamics 365“ verslo centras",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "„Dynamics 365“ verslo centras",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics 365“ verslo centro duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Įveskite savo „Dynamics 365“ verslo centro aplinką ir įmonę.",
        "Documentation.DisplayName": "„Dynamics 365“ verslo centras",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "„Dynamics 365“ verslo centras",
        "Documentation.LongDescription": "Pateikiama lentelė su atitinkamais „Dynamics 365“ verslo centro duomenimis."
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Pateikiamas dabartinės „Excel“ darbaknygės turinys.",
        "Documentation.LongDescription": "Pateikiamas dabartinės „Excel“ darbaknygės turinys. Joje pateikiamos lentelės, pavadinti diapazonai ir dinaminiai masyvai. Skirtingai nei <code>Excel.Workbook</code>, joje nepateikiami lapai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Pateikiamas turinys iš „Microsoft Exchange“ abonemento.",
        "Documentation.LongDescription": "Pateikiama turinio iš „Microsoft Exchange“ paskyros <code>mailboxAddress</code> lentelė. Jei <code>mailboxAddress</code> nenurodyta, bus naudojami numatytosios paskyros kredencialai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Sandėlis",
        "Documentation.Caption": "Sandėlis",
        "Documentation.Description": "Importuoja duomenis iš saugyklos",
        "Documentation.LongDescription": "Importuoja duomenis iš saugyklos"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Pateikiami „Google Analytics“ abonementai.",
        "Documentation.LongDescription": "Pateikiami „Google Analytics“ abonementai, kuriuos galima pasiekti naudojant dabartinius kredencialus.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "„Google BigQuery“",
        "Documentation.Caption": "„Google BigQuery“",
        "Documentation.Description": "Importuoti duomenis iš „Google BigQuery“ duomenų bazės.",
        "Documentation.LongDescription": "\r\n      Pateikiama lentelė su „Google BigQuery“ pasiekiamais projektais. Galima nurodyti pasirinktinį įrašo parametrą <code>options</code> toliau nurodytoms parinktims valdyti:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant. Numatytoji reikšmė – ODBC ryšio skirtojo laiko reikšmė. </li>\r\n        <li><code>CommandTimeout</code>: trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant. </li>\r\n        <li><code>BillingProject</code>: sąskaitų pateikimo projekto ID. Numatytoji reikšmė – pirmasis galimas projektas.</li>\r\n        <li><code>UseStorageApi</code>: nurodoma, ar „BigQuery“ saugyklos API naudoti didelių rezultatų atveju. Numatytoji saugyklos API naudojimo reikšmė yra teisinga. Jei nenorite naudoti saugyklos API, reikšmę nustatykite kaip klaidingą</li>\r\n      </ul>\r\n    Įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Išvardijami „Google BigQuery“ pasiekiami projektai",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "„Lakehouse“",
        "Documentation.Caption": "Importuoti duomenis iš „Lakehouse“",
        "Documentation.Description": "Importuoti duomenis iš „Lakehouse“",
        "Documentation.LongDescription": "Prisijunkite prie visų „Lakehouse“, prie kurių turite prieigą, ir pasirinkite objektus, kuriuos norėtumėte naudoti."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Pateikiama lentelė su pagrindiniais „MailChimp“ duomenimis.",
        "Documentation.DisplayName": "„MailChimp“",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "„MailChimp“",
        "Documentation.LongDescription": "Pateikiama lentelė su pagrindiniais „MailChimp“ duomenimis.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su pagrindiniais „MailChimp“ duomenimis.",
            "Code": "MailChimp.Tables()",
            "Result": "Lentelė su pagrindiniais „MailChimp“ duomenimis."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Pateikiama lentelė su galimų klientų veikla.",
        "Documentation.LongDescription": "Kreipiamasi į „Marketo“ REST API galinį punktą naudojant <code>url</code>/rest/v1/activities.json. Pateikiama visa sąraše <code>activityIds</code> nurodyta veikla nuo <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su lankymosi tinklalapyje veikla nuo 2015 m. lapkričio 1 d.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Lentelė su išsamia visos lankymosi tinklalapyje veiklos informacija nuo lapkričio 1 d."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(https://contoso.com/planview, pve, select * from PV_Table)",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "„Power BI“ duomenų srautai (nebenaudojama)",
        "Documentation.Caption": "Duomenų importavimas iš „Power BI“ duomenų srauto",
        "Documentation.LongDescription": "Prisijunkite prie visų „Power BI“ duomenų srautų, prie kurių turite prieigą, ir pasirinkite objektus, kuriuos norite naudoti."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Duomenų sritis",
        "Documentation.Caption": "Duomenų sritis",
        "Documentation.Description": "Importuoja duomenis iš duomenų srities",
        "Documentation.LongDescription": "Importuoja duomenis iš duomenų srities"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Duomenų srautai",
        "Documentation.Caption": "Importuoti duomenų iš duomenų srautų.",
        "Documentation.Description": "Importuoti duomenų iš duomenų srautų.",
        "Documentation.LongDescription": "Prisijunkite prie visų duomenų srautų, prie kurių turite prieigą, ir pasirinkite objektus, kuriuos norite naudoti."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importuojami duomenys iš „QuickBooks Online“.",
        "Documentation.LongDescription": "\r\n        Pateikiama lentelė su „Google BigQuery“ esančiomis lentelėmis. Toliau nurodytoms parinktims valdyti galima nurodyti pasirinktinį įrašo parametrą <code> Parinktys</code>.\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: trukmė, kontroliuojanti bandymo užmegzti ryšį su serveriu laiką prieš jį nutraukiant.</li>\r\n            <li><code>CommandTimeout</code>: trukmė, kontroliuojanti serverio užklausos vykdymo laiką prieš ją atšaukiant.</li>\r\n          </ul>\r\n        Įrašo parametras nurodomas kaip [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Pateikiami objektai iš „Salesforce“ abonemento.",
        "Documentation.LongDescription": "Objektai pateikiami kredencialuose nurodytoje „Salesforce“ paskyroje. Paskyra bus prijungiama per nurodytą aplinką <code>loginUrl</code>. Jei aplinka nenurodyta, paskyra bus prijungta prie gamybos (https://login.salesforce.com). Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, kad būtų galima nurodyti papildomas ypatybes. Įrašą gali sudaryti šie laukai:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Loginė reikšmė („true“ / „false“), nurodanti, ar kurti pateiktų reikšmių naršymo ypatybes (numatytoji reikšmė – „true“).</li>\r\n<li><code>ApiVersion</code> : „Salesforce“ API versija, naudotina šiai užklausai. Jei nenurodyta, naudojama 29.0 API versija.</li>\r\n<li><code>Timeout</code> : Trukmė, kuria kontroliuojama, kiek laukti prieš nutraukiant užklausą su serveriu. Numatytoji reikšmė priklauso nuo šaltinio.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Pateikiamos ataskaitos iš „Salesforce“ abonemento.",
        "Documentation.LongDescription": "Ataskaitos pateikiamos kredencialuose nurodytoje „Salesforce“ paskyroje. Paskyra bus prijungiama per nurodytą aplinką <code>loginUrl</code>. Jei aplinka nenurodyta, paskyra bus prijungta prie gamybos (https://login.salesforce.com). Galima nurodyti pasirenkamą įrašo parametrą <code>options</code>, kad būtų galima nurodyti papildomas ypatybes. Įrašą gali sudaryti šie laukai:\r\n    <ul>\r\n<li><code>ApiVersion</code> : „Salesforce“ API versija, naudotina šiai užklausai. Jei nenurodyta, naudojama 29.0 API versija.</li>\r\n<li><code>Timeout</code> : Trukmė, kuria kontroliuojama, kiek laukti prieš nutraukiant užklausą su serveriu. Numatytoji reikšmė priklauso nuo šaltinio.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Pateikiami informacijos kubai ir užklausos „SAP Business Warehouse“ sistemoje, sugrupuoti pagal informacijos sritis.",
        "Documentation.LongDescription": "Pateikiama InfoCubes ir užklausų, sugrupuotų pagal InfoArea, lentelė iš „SAP Business Warehouse“ egzemplioriaus serveryje <code>server</code>, kurio sistemos numeris <code>systemNumberOrSystemId</code>, o kliento ID <code>clientId</code>. Galima nurodyti pasirenkamą įrašo parametrą <code>optionsOrLogonGroup</code>, kad būtų galima valdyti šias parinktis:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Pateikiama lapų, ataskaitų, aplankų ir darbo sričių iš „Smartsheet“ API lentelė",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Pateikiama lapų, ataskaitų, aplankų ir darbo sričių iš „Smartsheet“ API įdėtoji lentelė.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiami lapai, aplankai, ataskaitos ir darbo sritys, esantys viršutiniame „Smartsheet“ hierarchijos lygyje",
            "Code": "Smartsheet.Tables()",
            "Result": "Aplankų, ataskaitų ir darbo sričių, esančių viršutiniame „Smartsheet“ hierarchijos lygyje, lentelė"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Pateikiama „SparkPost“ API 1 vers. esančių metrikų lentelė",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Šią funkciją galima naudoti norint gauti duomenis iš tam tikro „SparkPost“ API 1 versijos galinio punkto Metrika. Atnaujindami šias lenteles arba iškviesdami „SparkPost“ API naudodami šią jungtį nepamirškite, kad „SparkPost“ API taikomas griežtas API spartos limitas. Jei „SparkPost“ serveris pateikia pranešimą apie 429 būsenos kodą, reikia paspausti spartos limitą, palaukti kelias sekundes ir tik tada iškviesti vėl. Pasirinkdami parametro Dienų skaičius reikšmę atkreipkite dėmesį į tai, kad API saugo tik 6 mėnesių duomenis.",
        "Documentation.Examples": [
          {
            "Description": "Gaunama visų per paskutines tris dienas agreguotų campaign_ids count_sent ir count_rejected pateikimo galimybių metrika.",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "lentelė"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Kreipiamasi į „Stripe“ API.",
        "Documentation.LongDescription": "Kreipiamasi į „Stripe“ API naudojant https://api.stripe.com/v1/<code>method</code>, įrašas <code>additionalParameters</code> pateikiamas kaip papildomi parametrai ir pateikiamas visų numatomų stulpelių pavadinimų sąrašas <code>ColumnNames</code>. Naudojama „Stripe“ versija 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama lentelė su įvykiais, sukurtais po 2015 m. lapkričio 1 d.",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Lentelė su nurodytais įvykiais, susijusiais su dabartine „Stripe“ paskyra"
          },
          {
            "Description": "Pateikiama lentelė su visais SKU.",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Lentelė su visais SKU, susijusiais su dabartine „Stripe“ paskyra"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Pateikiama lentelė su galimomis „Stripe“ lentelėmis ir funkcijomis.",
        "Documentation.LongDescription": "Pateikiama lentelė su galimomis „Stripe“ lentelėmis ir funkcijomis."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "„Azure Synapse“ analizės darbo sritis",
        "Documentation.Caption": "„Azure Synapse“ analizės darbo sritis",
        "Documentation.LongDescription": "„Azure Synapse“ analizės darbo srities PQ jungtis",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Pridedamas stulpelis su nurodytu pavadinimu. Reikšmė skaičiuojama naudojant nurodytą pasirinkimo funkciją, kur kiekvienoje eilutėje nurodyta įvestis.",
        "Documentation.LongDescription": "Pridedamas stulpelis pavadinimu <code>newColumnName</code> prie lentelės <code>table</code>. Stulpelio reikšmės apskaičiuojamos naudojant nurodytą pasirinkimo funkciją <code>columnGenerator</code>, kur kiekvienoje eilutėje nurodyta įvestis.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Įtraukite skaičių stulpelį pavadinimu „TotalPrice“ į lentelę, kuriame kiekviena reikšmė yra stulpelių [Price] ir [Shipping] suma.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Įtraukiamas naujas stulpelis su pavyzdinėmis reikšmėmis, gautomis naudojant apytikslio nurodyto stulpelio lentelėje grupavimo reikšmes.",
        "Documentation.LongDescription": "Įtraukiamas naujas stulpelis <code>newColumnName</code> į <code>table</code> su <code>columnName</code> pavyzdinėmis reikšmėmis. Pavyzdinės reikšmės gaunamos pagal apytikslį reikšmių <code>columnName</code> (kiekvienos eilutės) derinimą.\r\n    <p>Gali būti įtrauktas pasirinktinis rinkinys <code>options</code>, nurodantis, kaip lyginti raktų stulpelius. Parinktys apima:\r\n    <ul>\r\n<li><code>Culture</code> : Leidžiama grupuoti įrašus pagal konkrečios kultūros taisykles. Tai gali būti bet kuris tinkamas kultūros pavadinimas. Pavyzdžiui, kultūros parinktimi „ja-JP“ sugrupuojami įrašai pagal japonų kultūrą. Numatytoji reikšmė yra „“, kuria grupuojama pagal pastoviąją anglų kultūrą.</li>\r\n<li><code>IgnoreCase</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama grupuoti raktus neskiriant didžiųjų ir mažųjų raidžių. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuogės“ grupuojama su reikšme „vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>IgnoreSpace</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama sujungti teksto dalis, kad būtų galima rasti grupes. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuo gės“ grupuojama su reikšme „Vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>SimilarityColumnName</code> : Stulpelio, kuriame rodomas panašumas tarp įvesties reikšmės ir nominaliosios tos įvesties reikšmės, pavadinimas. Numatytoji reikšmė yra neapibrėžta. Tokiu atveju naujas stulpelis, skirtas panašumams, nebus įtrauktas.</li>\r\n<li><code>Threshold</code> : Skaičius nuo 0,00 iki 1,00, nurodantis panašumo įvertį, pagal kurį bus grupuojamos dvi reikšmės.\r\n    Pavyzdžiui, reikšmės „Vynuogės“ ir „Vynuoės“ (be „g“) grupuojamos tik tada, jei ši parinktis nustatyta į mažiau nei 0,90.\r\n  1,00 ribinė reikšmė leidžia tik tikslius atitikmenis.\r\n    (Atminkite, kad apytikslis „tikslus atitikmuo“ gali nepaisyti skirtumų, pvz., didžiųjų raidžių, žodžių tvarkos ir skyrybos ženklų.)\r\n Numatytoji reikšmė yra 0,80.</li>\r\n<li><code>TransformationTable</code> : Lentelė, kurioje leidžiama grupuoti įrašus pagal pasirinktinių reikšmių susiejimus. Joje turi būti stulpeliai „Nuo“ ir „Iki“. Pavyzdžiui, reikšmė „Vynuogės“ grupuojama su reikšme „Razinos“, jei pakeitimo lentelė pateikiama su stulpeliu „Nuo“, kuriame nurodyta reikšmė „Vynuogės“, ir stulpeliu „Iki“, kuriame nurodyta reikšmė „Razinos“. Įsidėmėkite, kad keitimas bus pritaikytas visais teksto pasikartojimų pakeitimo lentelėje atvejais. Anksčiau pateiktoje pakeitimo lentelėje reikšmė „Vynuogės yra saldžios“ taip pat bus grupuojama su reikšme „Razinos yra saldžios“.</li>\r\n</ul>\r\n\r\n</p>\r\n   ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Raskite pavyzdines darbuotojų vietos reikšmes.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Sujungiami pateikti lentelių stulpeliai, sujungimo rezultatas pateikiamas naujame stulpelyje.",
        "Documentation.LongDescription": "Sujungiamos <code>table1</code> eilutės su <code>table2</code> eilutėmis, atsižvelgiant į raktinių stulpelių, pasirinktų <code>key1</code> (<code>table1</code>) ir <code>key2</code> (<code>table2</code>), reikšmių lygiateisiškumą. Rezultatai įvedami į stulpelį, kurio pavadinimas <code>newColumnName</code>.\r\nŠi funkcija veikia panašiai kaip Table.Join su JoinKind arba LeftOuter, išskyrus tai, kad sujungimo rezultatai pateikiami įdėti, o ne plokščiuoju principu.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite sujungtą stulpelį prie ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) pavadinimu „price/stock“ iš lentelės ({[saleID = 1, price = 20], [saleID = 2, price = 10]}), sujungtos [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Įtraukiamas raktas į lentelę.",
        "Documentation.LongDescription": "Įtraukti raktą į <code>table</code>, kur <code>columns</code> yra stulpelių pavadinimų sąrašas, apibrėžiantis raktą, o <code>isPrimary</code> nurodo, ar raktas yra pirminis.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Į lentelę įtraukti vieno stulpelio pirminį raktą.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Pridedamas stulpelis su vieno ar daugiau kitų stulpelių reitingu.",
        "Documentation.LongDescription": "Pridedamas stulpelis pavadinimu <code>newColumnName</code> prie <code>table</code> su vieno ar kelių <code>comparisonCriteria</code> aprašytų stulpelių reitingu.\r\nParinktį RankKind <code>options</code> gali naudoti pažengę vartotojai, norėdami pasirinkti konkretesnį reitingavimo metodą.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Įtraukite stulpelį pavadinimu „RevenueRank“ į lentelę, kurioje stulpelis „Pajamos“ reitinguojamas nuo aukščiausios iki žemiausio.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agreguoja lentelių stulpelį į kelis stulpelius esančioje lentelėje.",
        "Documentation.LongDescription": "Agreguoja lenteles, esančias <code>table</code> [<code>column</code>], į kelis stulpelius, kuriuose yra agreguotos lentelių reikšmės. <code>aggregations</code> naudojama norint nurodyti stulpelius, kuriuose yra agreguotinos lentelės, agregavimo funkcijas, kurios taikomos lentelėms norint generuoti jų reikšmes, ir kurtini agreguotų stulpelių pavadinimai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agreguokite lentelių stulpelius, esančius <code>[t]</code> lentelėje <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code>, į <code>[t.a]</code> sumą, min. ir maks. <code>[t.b]</code> ir <code>[t.a]</code> reikšmių skaičių.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Išlaikomas pradinis poslinkis, tada kaitaliojamas šių eilučių įtraukimas ir praleidimas.",
        "Documentation.LongDescription": "Išlaikomas pradinis poslinkis, tada kaitaliojamas šių eilučių įtraukimas ir praleidimas.\r\n    <ul>\r\n       <li><code>table</code>: įvesties lentelė.</li>\r\n       <li><code>offset</code>: eilučių, kurias reikia palikti prieš pradedant įteracijas, skaičius.</li>\r\n       <li><code>skip</code>: eilučių, kurias reikia pašalinti kiekvienoje iteracijoje, skaičius.</li>\r\n       <li><code>take</code>: eilučių, kurias reikia palikiti kiekvienoje iteracijoje, skaičius.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite lentelę iš lentelės, kuri, pradedant nuo pirmosios eilutės, praleis 1 reikšmę, tada paliks 1 reikšmę.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Nurodyti stulpeliai sujungiami į naują stulpelį naudojant nurodytą sujungimo funkciją.",
        "Documentation.LongDescription": "Nurodyti stulpeliai sujungiami į naują stulpelį naudojant nurodytą sujungimo funkciją.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite vardą ir pavardę į naują stulpelį, atskirtą kableliais.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Nurodyti stulpeliai sujungiami į naują įrašo reikšmių stulpelį, kur kiekvieno įrašo lauko pavadinimai ir reikšmės atitinka sujungtų stulpelių pavadinimus ir reikšmes.",
        "Documentation.LongDescription": "Nurodyti <code>table</code> stulpeliai sujungiami į naują įrašo reikšmių stulpelį pavadinimu <code>newColumnName</code>, kur kiekviename įraše yra laukų pavadinimai ir reikšmės, atitinkančios stulpelių pavadinimus ir sujungtų stulpelių reikšmes. Jei nurodytas <code>options</code> įrašas, gali būti pateiktos šios parinktys:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: kai pateiktas kaip tekstas, nurodo, kad pateiktas stulpelio pavadinimas turi būti laikomas įrašo rodomu pavadinimu. Tai neturi turi būti vienas iš įrašo stulpelių.</li>\r\n     <li> <code>TypeName</code>: kai pateiktas kaip tekstas, nurodo gauto įrašo, kurį galima naudoti įkeliant duomenis įkėlimo aplinkos veikimo būdui skatinti, loginio tipo pavadinimas.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Dubliuojamas stulpelis nurodytu pavadinimu. Reikšmės ir tipas nukopijuojami iš šaltinio stulpelio.",
        "Documentation.LongDescription": "Dubliuokite stulpelį pavadinimu <code>columnName</code> lentelėje <code>table</code>. Stulpelio <code>newColumnName</code> reikšmės ir tipas nukopijuojami iš stulpelio <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Dubliuokite stulpelį „a“ stulpelyje pavadinimu „copied column“ lentelėje <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Įrašų stulpelis išplečiamas į stulpelius su kiekviena reikšme.",
        "Documentation.LongDescription": "Pagal įrašų <code>column</code> įvestyje <code>table</code>, sukuriama lentelė su stulpeliu kiekvienam įrašo laukui. Jei reikia, galima nurodyti <code>newColumnNames</code>, norint užtikrinti, kad naujojoje lentelėje stulpelių pavadinimai būtų unikalūs.\r\n    <ul>\r\n        <li><code>table</code>: pradinė lentelė su išplėstinu įrašų stulpeliu. </li>\r\n        <li><code>column</code>: išplėstinas stulpelis.</li>\r\n        <li><code>fieldNames</code>: į lentelės stulpelius išplėstinų laukų sąrašas.</li>\r\n        <li><code>newColumnNames</code>: naujiems stulpeliams suteiktinų stulpelių pavadinimų sąrašas. Naujų stulpelių pavadinimai negali kartotis jokiuose naujos lentelės stulpeliuose.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Išplėskite stulpelį [a] lentelėje <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> į 3 stulpelius – „aa“, „bb“ ir „cc“.",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Įrašų stulpelis arba lentelių stulpelis išplečiamas į kelis stulpelius esančioje lentelėje.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] lentelės išplečiamos į kelias eilutes ir stulpelius. <code>columnNames</code> naudojamas norint pasirinkti iš vidinės lentelės norimus išplėsti stulpelius. Nurodykite <code>newColumnNames</code>, jei norite išvengti esamų ir naujų stulpelių nesuderinamumo.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Išplėskite <code>[a]</code> lentelės stulpelius lentelėje <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> į 3 stulpelius <code>[t.a]</code>, <code>[t.b]</code> ir <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Grupuoja eilutes lentelėje pagal apytikslį raktų atitikimą.",
        "Documentation.LongDescription": "Grupuojamos <code>table</code> eilutės pagal apytikslį reikšmių, pateikiamų nurodytame stulpelyje, <code>key</code>, kiekvienoje eilutėje, derinimą.\r\n    Kiekvienai grupei įrašas yra sudarytas su raktų stulpeliais (ir jų reikšmėmis) kartu su visais agreguotais stulpeliais, nurodytais <code>aggregatedColumns</code>.\r\n    Šia funkcija negarantuojama, kad bus pateikta ištaisyta eilučių tvarka.\r\n    <p>Gali būti įtrauktas pasirinktinis <code>options</code> rinkinys, nurodantis, kaip lyginti raktų stulpelius. Parinktys apima:\r\n    <ul>\r\n<li><code>Culture</code> : Leidžiama grupuoti įrašus pagal konkrečios kultūros taisykles. Tai gali būti bet kuris tinkamas kultūros pavadinimas. Pavyzdžiui, kultūros parinktimi „ja-JP“ sugrupuojami įrašai pagal japonų kultūrą. Numatytoji reikšmė yra „“, kuria grupuojama pagal pastoviąją anglų kultūrą.</li>\r\n<li><code>IgnoreCase</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama grupuoti raktus neskiriant didžiųjų ir mažųjų raidžių. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuogės“ grupuojama su reikšme „vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>IgnoreSpace</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama sujungti teksto dalis, kad būtų galima rasti grupes. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuo gės“ grupuojama su reikšme „Vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>SimilarityColumnName</code> : Stulpelio, kuriame rodomas panašumas tarp įvesties reikšmės ir nominaliosios tos įvesties reikšmės, pavadinimas. Numatytoji reikšmė yra neapibrėžta. Tokiu atveju naujas stulpelis, skirtas panašumams, nebus įtrauktas.</li>\r\n<li><code>Threshold</code> : Skaičius nuo 0,00 iki 1,00, nurodantis panašumo įvertį, pagal kurį bus grupuojamos dvi reikšmės.\r\n    Pavyzdžiui, reikšmės „Vynuogės“ ir „Vynuoės“ (be „g“) grupuojamos tik tada, jei ši parinktis nustatyta į mažiau nei 0,90.\r\n  1,00 ribinė reikšmė leidžia tik tikslius atitikmenis.\r\n    (Atminkite, kad apytikslis „tikslus atitikmuo“ gali nepaisyti skirtumų, pvz., didžiųjų raidžių, žodžių tvarkos ir skyrybos ženklų.)\r\n Numatytoji reikšmė yra 0,80.</li>\r\n<li><code>TransformationTable</code> : Lentelė, kurioje leidžiama grupuoti įrašus pagal pasirinktinių reikšmių susiejimus. Joje turi būti stulpeliai „Nuo“ ir „Iki“. Pavyzdžiui, reikšmė „Vynuogės“ grupuojama su reikšme „Razinos“, jei pakeitimo lentelė pateikiama su stulpeliu „Nuo“, kuriame nurodyta reikšmė „Vynuogės“, ir stulpeliu „Iki“, kuriame nurodyta reikšmė „Razinos“. Įsidėmėkite, kad keitimas bus pritaikytas visais teksto pasikartojimų pakeitimo lentelėje atvejais. Anksčiau pateiktoje pakeitimo lentelėje reikšmė „Vynuogės yra saldžios“ taip pat bus grupuojama su reikšme „Razinos yra saldžios“.</li>\r\n</ul>\r\n\r\n</p>\r\n   ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupuokite lentelę pridėdami agreguotą stulpelį [Count], kuriame yra darbuotojų skaičius kiekvienoje vietoje (kiekvienas Table.RowCount(_))).",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Sujungiamos dviejų apytiksliai atitinkančių lentelių eilutės, atsižvelgiant į nurodytus raktus.",
        "Documentation.LongDescription": "<p>Sujungiamos <code>table1</code> eilutės su <code>table2</code> eilutėmis, atsižvelgiant į raktų stulpelių, pasirinktų pagal <code>key1</code> (<code>table1</code>) ir <code>key2</code> (<code>table2</code>), reikšmių apytikslį palyginimą.</p>\r\n<p>Apytikslis atitikimas – tai palyginimas atsižvelgiant į teksto panašumą, o ne lygybę.</p>\r\n<p>Pagal numatytuosius parametrus atliekamas vidinis sujungimas, nors galima įtraukti pasirenkamą <code>joinKind</code> norint nurodyti sujungimo tipą. Galimos parinktys:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Galima įtraukti pasirenkamą <code>joinOptions</code> rinkinį siekiant nurodyti, kaip palyginti raktų stulpelius. Galimos parinktys:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Skaičius nuo 1 iki 8, nurodantis, kiek lygiagrečių gijų reikia naudoti apytikslėms atitiktims sudaryti. Numatytoji reikšmė yra 1.</li>\r\n<li><code>Culture</code> : Leidžiama derinti įrašus pagal konkrečios kultūros taisykles. Tai gali būti bet kuris tinkamas kultūros pavadinimas. Pavyzdžiui, kultūros parinktimi „ja-JP“ derinami įrašai pagal japonų kultūrą. Numatytoji reikšmė yra „“, kuria derinama pagal pastoviąją anglų kultūrą.</li>\r\n<li><code>IgnoreCase</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama derinti raktus neskiriant didžiųjų ir mažųjų raidžių. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuogės“ derinama su reikšme „vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>IgnoreSpace</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama sujungti teksto dalis, kad būtų galima rasti atitikmenis. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuo gės“ derinama su reikšme „Vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>NumberOfMatches</code> : Sveikasis skaičius, nurodantis didžiausią sutampančių eilučių, kurios gali būti pateiktos kiekvienai įvesties eilutei, skaičių. Pavyzdžiui, 1 reikšme bus pateikta ne daugiau kaip viena kiekvienos įvesties eilutės sutampanti eilutė. Jei ši parinktis nėra pateikta, pateikiamos visos sutampančios eilutės.</li>\r\n<li><code>SimilarityColumnName</code> : Stulpelio, kuriame rodomas panašumas tarp įvesties reikšmės ir nominaliosios tos įvesties reikšmės, pavadinimas. Numatytoji reikšmė yra neapibrėžta. Tokiu atveju naujas stulpelis, skirtas panašumams, nebus įtrauktas.</li>\r\n<li><code>Threshold</code> : Skaičius nuo 0,00 iki 1,00, nurodantis panašumo įvertį, pagal kurį bus derinamos dvi reikšmės. \r\n    Pavyzdžiui, reikšmės „Vynuogės“ ir „Vynuoės“ (be „g“) laikomos atitinkančiomis, kai ši parinktis nustatyta į mažiau nei 0,90.\r\n    1,00 ribinė reikšmė leidžia tik tikslius atitikmenis.\r\n    (Atminkite, kad apytikslis „tikslus atitikmuo“ gali nepaisyti skirtumų, pvz., didžiųjų raidžių, žodžių tvarkos ir skyrybos ženklų.)\r\n Numatytoji reikšmė yra 0,80.</li>\r\n<li><code>TransformationTable</code> : Lentelė, kurioje leidžiama derinti įrašus pagal pasirinktinių reikšmių susiejimus. Joje turi būti stulpeliai „Nuo“ ir „Iki“. Pavyzdžiui, reikšmė „Vynuogės“ derinama su reikšme „Razinos“, jei pakeitimo lentelė pateikiama su stulpeliu „Nuo“, kuriame nurodyta reikšmė „Vynuogės“, ir stulpeliu „Iki“, kuriame nurodyta reikšmė „Razinos“. Įsidėmėkite, kad keitimas bus pritaikytas visais teksto pasikartojimų pakeitimo lentelėje atvejais. Anksčiau pateiktoje pakeitimo lentelėje reikšmė „Vynuogės yra saldžios“ taip pat bus derinama su reikšme „Razinos yra saldžios“.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kairysis vidinis apytikslis dviejų lentelių sujungimas atsižvelgiant į [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Atliekamas apytikslis nurodytų lentelių stulpelių sujungimas, o sujungimo rezultatas pateikiamas naujame stulpelyje.",
        "Documentation.LongDescription": "<p>Sujungiamos <code>table1</code> eilutės su <code>table2</code> eilutėmis, atsižvelgiant į raktų stulpelių, pasirinktų <code>key1</code> (<code>table1</code>) ir <code>key2</code> (<code>table2</code>), reikšmių apytikslį atitikimą. Rezultatai pateikiami naujame stulpelyje pavadinimu <code>newColumnName</code>.</p>\r\n<p>Apytikslis atitikimas – tai palyginimas pagal teksto panašumą, o ne atitikimą.</p>\r\n<p>Pasirenkama parinktis <code>joinKind</code> nurodo sujungimo, kurį reikia atlikti, rūšį. Pagal numatytuosius parametrus, jei nenurodyta <code>joinKind</code>, atliekamas kairysis išorinis sujungimas. Galimos parinktys:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Galima įtraukti pasirenkamą <code>joinOptions</code> rinkinį siekiant nurodyti, kaip palyginti raktų stulpelius. Galimos parinktys:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Skaičius nuo 1 iki 8, nurodantis, kiek lygiagrečių gijų reikia naudoti apytikslėms atitiktims sudaryti. Numatytoji reikšmė yra 1.</li>\r\n<li><code>Culture</code> : Leidžiama derinti įrašus pagal konkrečios kultūros taisykles. Tai gali būti bet kuris tinkamas kultūros pavadinimas. Pavyzdžiui, kultūros parinktimi „ja-JP“ derinami įrašai pagal japonų kultūrą. Numatytoji reikšmė yra „“, kuria derinama pagal pastoviąją anglų kultūrą.</li>\r\n<li><code>IgnoreCase</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama derinti raktus neskiriant didžiųjų ir mažųjų raidžių. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuogės“ derinama su reikšme „vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>IgnoreSpace</code> : Loginė (teisinga / klaidinga) reikšmė, kuria leidžiama sujungti teksto dalis, kad būtų galima rasti atitikmenis. Pavyzdžiui, kai nustatyta kaip teisinga, reikšmė „Vynuo gės“ derinama su reikšme „Vynuogės“. Numatytoji reikšmė yra nustatyta kaip teisinga.</li>\r\n<li><code>NumberOfMatches</code> : Sveikasis skaičius, nurodantis didžiausią sutampančių eilučių, kurios gali būti pateiktos kiekvienai įvesties eilutei, skaičių. Pavyzdžiui, 1 reikšme bus pateikta ne daugiau kaip viena kiekvienos įvesties eilutės sutampanti eilutė. Jei ši parinktis nėra pateikta, pateikiamos visos sutampančios eilutės.</li>\r\n<li><code>SimilarityColumnName</code> : Stulpelio, kuriame rodomas panašumas tarp įvesties reikšmės ir nominaliosios tos įvesties reikšmės, pavadinimas. Numatytoji reikšmė yra neapibrėžta. Tokiu atveju naujas stulpelis, skirtas panašumams, nebus įtrauktas.</li>\r\n<li><code>Threshold</code> : Skaičius nuo 0,00 iki 1,00, nurodantis panašumo įvertį, pagal kurį bus derinamos dvi reikšmės. \r\n    Pavyzdžiui, reikšmės „Vynuogės“ ir „Vynuoės“ (be „g“) laikomos atitinkančiomis, kai ši parinktis nustatyta į mažiau nei 0,90.\r\n    1,00 ribinė reikšmė leidžia tik tikslius atitikmenis.\r\n    (Atminkite, kad apytikslis „tikslus atitikmuo“ gali nepaisyti skirtumų, pvz., didžiųjų raidžių, žodžių tvarkos ir skyrybos ženklų.)\r\n Numatytoji reikšmė yra 0,80.</li>\r\n<li><code>TransformationTable</code> : Lentelė, kurioje leidžiama derinti įrašus pagal pasirinktinių reikšmių susiejimus. Joje turi būti stulpeliai „Nuo“ ir „Iki“. Pavyzdžiui, reikšmė „Vynuogės“ derinama su reikšme „Razinos“, jei pakeitimo lentelė pateikiama su stulpeliu „Nuo“, kuriame nurodyta reikšmė „Vynuogės“, ir stulpeliu „Iki“, kuriame nurodyta reikšmė „Razinos“. Įsidėmėkite, kad keitimas bus pritaikytas visais teksto pasikartojimų pakeitimo lentelėje atvejais. Anksčiau pateiktoje pakeitimo lentelėje reikšmė „Vynuogės yra saldžios“ taip pat bus derinama su reikšme „Razinos yra saldžios“.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Kairysis vidinis apytikslis dviejų lentelių sujungimas atsižvelgiant į [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Grupuojamos lentelės eilutės, turinčios tokį patį raktą.",
        "Documentation.LongDescription": "Grupuoja <code>table</code> eilutes pagal <code>key</code> apibrėžtus pagrindinius stulpelius. <code>key</code> gali būti vieno stulpelio pavadinimas arba stulpelių pavadinimų sąrašas.\r\n    Kiekvienai grupei įrašas sudaromas iš pagrindinių stulpelių (ir jų reikšmių) bei agreguotų stulpelių, kuriuos nurodo <code>aggregatedColumns</code>.\r\n    Pasirinktinai galima nurodyti <code>groupKind</code> ir <code>comparer</code>.<br>\r\n    <br>\r\n   Jeigu duomenys jau surūšiuoti pagal pagrindinius stulpelius, tada gali būti pateikta <code>groupKind</code> iš GroupKind.Local. Tokiu būdu galima pagerinti grupavimo našumą tam tikrais atvejais,\r\n    nes laikoma, kad visos eilutės su nurodytu pagrindinių reikšmių rinkiniu yra gretimos.<br>\r\n    <br>\r\n    Atkreipkite dėmesį, kad jeigu perduodant <code>comparer</code> apdorojami skirtingi raktai kaip lygiaverčiai, eilutė gali būti perkelta į grupę, kurios raktai skiriasi nuo jos.<br>\r\n    <br>\r\n    Ši funkcija negarantuoja pateikiamų eilučių tvarkos.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Grupuokite lentelę pridėdami agreguotą stulpelį [total], kuriame yra kainų suma (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Nurodytoje padėtyje į lentelę įterpiamas eilučių sąrašas.",
        "Documentation.LongDescription": "Pateikiama lentelė su eilučių sąrašu, <code>rows</code>, įterptu į <code>table</code> nurodytoje padėtyje <code>offset</code>. Kiekvienas įterptinos eilutės stulpelis turi atitikti lentelės stulpelių tipus.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Įterpkite eilutę į lentelę padėtyje 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Įterpkite dvi eilutes į lentelę padėtyje 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Sujungiamos dviejų atitinkančių lentelių eilutės, atsižvelgiant į nurodytus raktus.",
        "Documentation.LongDescription": "<p>Sujungiamos <code>table1</code> eilutės su <code>table2</code> eilutėmis, atsižvelgiant į raktų stulpelių, pasirinktų <code>key1</code> (<code>table1</code>) ir <code>key2</code> (<code>table2</code>), reikšmių lygiateisiškumą.</p>\r\n<p>Pagal numatytuosius parametrus atliekamas vidinis sujungimas, nors galima įtraukti pasirenkamą <code>joinKind</code> norint nurodyti sujungimo tipą. Galimos parinktys:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Galima įtraukti pasirenkamą <code>keyEqualityComparers</code> rinkinį siekiant nurodyti, kaip palyginti raktų stulpelius. Šiuo metu šis parametras skirtas naudoti tik įmonės viduje.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite dvi lenteles naudodami vieną rakto stulpelį.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Sujunkite dvi lenteles, kurių stulpelių pavadinimai nesuderinami, naudodami kelis rakto stulpelius.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Pateikiama (-os) didžiausia (-ios) eilutė (-ės) naudojant nurodytus kriterijus.",
        "Documentation.LongDescription": "Pateikiama (-os) didžiausia (-ios) <code>table</code> eilutė (-ės) pagal nurodytus <code>comparisonCriteria</code>.\r\n    Kai eilutės surikiuojamos, turi būti nurodytas parametras <code>countOrCondition</code>, kad būtų galima toliau filtruoti rezultatą. Atminkite, kad rikiavimo algoritmas negali garantuoti fiksuoto rikiavimo rezultato. Parametras <code>countOrCondition</code> gali būti kelių formų:\r\n    <ul>\r\n        <li> Jei nurodytas skaičius, didėjimo tvarka pateikiamas sąrašas, kurį sudaro iki <code>countOrCondition</code> elem. </li>\r\n        <li> Jei nurodyta sąlyga, pateikiamas sąrašas elementų, kurie iš pradžių atitiko sąlygą. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite didžiausią reikšmę turinčią stulpelio [a] eilutę, atitinkančią sąlygą [a] > 0, lentelėje. Atminkite, kad eilutės rikiuojamos prieš pritaikant filtrą.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Raskite didžiausią reikšmę turinčią stulpelio [a] eilutę, atitinkančią sąlygą [b] > 0, lentelėje. Eilutės rikiuojamos prieš pritaikant filtrą.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Pateikiama (-os) mažiausia (-ios) eilutė (-ės) naudojant nurodytus kriterijus.",
        "Documentation.LongDescription": "Pateikiama (-os) mažiausia (-ios) <code>table</code> eilutė (-ės) pagal nurodytus <code>comparisonCriteria</code>. Kai eilutės surikiuojamos, turi būti nurodytas parametras <code>countOrCondition</code>, kad būtų galima toliau filtruoti rezultatą. Atminkite, kad rikiavimo algoritmas negali garantuoti fiksuoto rikiavimo rezultato. Parametras <code>countOrCondition</code> gali būti kelių formų:\r\n    <ul>\r\n        <li> Jei nurodytas skaičius, didėjimo tvarka pateikiamas sąrašas, kurį sudaro iki <code>countOrCondition</code> elem. </li>\r\n        <li> Jei nurodyta sąlyga, pateikiamas sąrašas elementų, kurie iš pradžių atitiko sąlygą. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite mažiausią reikšmę turinčią stulpelio [a] eilutę, atitinkančią sąlygą [a] < 3, lentelėje. Eilutės rikiuojamos prieš pritaikant filtrą.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Raskite mažiausią reikšmę turinčią stulpelio [a] eilutę, atitinkančią sąlygą [b] < 0, lentelėje. Eilutės rikiuojamos prieš pritaikant filtrą.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Sujungiami pateikti lentelių stulpeliai, sujungimo rezultatas pateikiamas naujame stulpelyje.",
        "Documentation.LongDescription": "<p>Sujungiamos <code>table1</code> eilutės su <code>table2</code> eilutėmis, atsižvelgiant į raktų stulpelių, pasirinktų <code>key1</code> (<code>table1</code>) ir <code>key2</code> (<code>table2</code>), reikšmių lygiateisiškumą. Rezultatai įvedami į stulpelį, kurio pavadinimas <code>newColumnName</code>.</p>\r\n<p>Pasirenkama parinktis <code>joinKind</code> nurodo sujungimo, kurį reikia atlikti, rūšį. Pagal numatytuosius parametrus, jei nenurodyta <code>joinKind</code>, atliekamas kairysis išorinis sujungimas.</p>\r\n<p>Galima nurodyti pasirenkamą <code>keyEqualityComparers</code> rinkinį siekiant nurodyti, kaip palyginti raktų stulpelius. Šiuo metu ši funkcija skirta naudoti tik įmonės viduje.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite dvi lenteles naudodami vieną rakto stulpelį.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Pagal stulpelių porą, atitinkančią atributo reikšmių poras, atributų stulpelio duomenys keičiami stulpelių antraštėse.",
        "Documentation.LongDescription": "Pagal stulpelių porą, atitinkančią atributo reikšmių poras, atributų stulpelio duomenys keičiami stulpelių antraštėse.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Paimkite reikšmes „a“, „b“ ir „c“ iš lentelės <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> atributų stulpelio ir atlikite greitąjį rikiavimą jų stulpelyje.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Paimkite reikšmes „a“, „b“ ir „c“ iš lentelės <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> atributų stulpelio ir atlikite greitąjį rikiavimą jų stulpelyje.  Rakto „x“ atributas „c“ turi kelias su juo susietas reikšmes, todėl naudokite funkciją List.Max, kad išspręstumėte nesuderinamumą.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Pakeičiamas nurodytas eilučių diapazonas pateikta (-omis) eilute (-ėmis).",
        "Documentation.LongDescription": "Pakeičiamas nurodytas skaičius eilučių (<code>count</code>) įvestyje <code>table</code> į nurodytą <code>rows</code>, pradedant po <code>offset</code>. Parametras <code>rows</code> yra įrašų sąrašas.\r\n    <ul>\r\n       <li><code>table</code>: lentelė, kurioje atliekamas pakeitimas.</li>\r\n       <li><code>offset</code>: eilučių, kurias reikia praleisti prieš atliekant pakeitimą, skaičius.</li>\r\n       <li><code>count</code>: eilučių, kurias reikia pakeisti, skaičius.</li>\r\n       <li><code>rows</code>: <code>offset</code> nurodytoje vietoje į <code>table</code> įterptinų eilutės įrašų sąrašas.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pradėdami nuo 1 padėties, pakeiskite 3 eilutes.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Nurodytuose stulpeliuose viena reikšmė pakeičiama kita.",
        "Documentation.LongDescription": "Nurodytuose <code>table</code> stulpeliuose <code>oldValue</code> pakeičiama į <code>newValue</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "B stulpelyje tekstą „goodbye“ pakeiskite į „world“, atitinkantį tik visą reikšmę.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "B stulpelyje tekstą „ur“ pakeiskite į „or“, atitinkantį bet kurią reikšmės dalį.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizuoti JAV darbuotojų vardus ir pavardes.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizuoti visus JAV darbuotojų stulpelius.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Nurodyti stulpeliai išskaidomi į papildomų stulpelių rinkinį naudojant nurodytą skaidymo.",
        "Documentation.LongDescription": "Nurodyti stulpeliai išskaidomi į papildomų stulpelių rinkinį naudojant nurodytą skaidymo.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite stulpelį [Pavadinimas] i padėtyje į du stulpelius",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Lentelės stulpelių rinkinys verčiamas į atributų reikšmių poras.",
        "Documentation.LongDescription": "Lentelės stulpelių rinkinys verčiamas į atributų reikšmių poras kartu su likusiomis reikšmėmis kiekvienoje eilutėje.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Paimkite stulpelius „a“, „b“ ir „c“ iš lentelės <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> ir surikiuokite juos į atributų reikšmių poras.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Visi neapibrėžto rinkinio stulpeliai verčiami į atributo reikšmės poras.",
        "Documentation.LongDescription": "Visi neapibrėžto rinkinio stulpeliai verčiami į atributo reikšmės poras, kiekvienoje eilutėje sujungiant su likusiomis reikšmėmis.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Visi neapibrėžto rinkinio stulpeliai verčiami į atributo reikšmės poras, kiekvienoje eilutėje sujungiant su likusiomis reikšmėmis.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "„Microsoft Teams“ asmeninė analizė",
        "Documentation.LongDescription": "<p>„Teams“ analizės jungtis leidžia gauti įžvalgų apie „Teams“ naudojimą. Prieinami tiek jūsų asmeninės veiklos „Teams“, tiek „Teams“, kurių narys esate, veiklos duomenys.</p>\r\n<p>Prieinami ankstesnių 90 dienų duomenys. </p>\r\n<p> Išsamesnės informacijos apie turimus duomenis ieškokite šioje žinyno dokumentacijoje: </p>\r\n<ul>\r\n<li><b>„Teams“ naudojimas:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>„Teams“ vartotojo veikla:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Įveskite organizacijos ir projekto pavadinimus.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Pateikiama „Azure DevOps“ siūlomų „OData“ informacijos santraukų lentelė."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris perskaito dvejetainę reikšmę.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris perskaito dvejetainę reikšmę.  Jei nurodyta <code>length</code>, dvejetainė reikšmė turės daug baitų.  Jei <code>length</code> nenurodyta, dvejetainė reikšmė turės likusius baitus.  <code>length</code> galima nurodyti arba kaip skaičių, arba kaip ilgio dvejetainį formatą, kuris nurodomas prieš dvejetainius duomenis.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Pateikiama loginė reikšmė, pagrįsta dviejų pateiktų reikšmių lygybės patikra.",
        "Documentation.LongDescription": "Pateikiama <code>loginė</code> reikšmė, pagrįsta dviejų pateiktų reikšmių (<code>x</code> ir <code>y</code>) lygybės patikra, naudojant nurodytą <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code> yra <code>lyginimo funkcija,</code> kuri yra naudojama lyginimui kontroliuoti.\r\n        Lyginimo funkcija – tai funkcija, kuri priima du argumentus ir pateikia -1, 0 arba 1, atsižvelgiant į tai, ar pirmoji vertė yra mažesnė, lygi ar didesnė nei antroji.\r\n        Lyginimo funkcijos gali būti naudojamos siekiant teikti lyginimus, kuriuose neskiriamos didžiosios ir mažosios raidės arba kuriuose atsižvelgiama į kultūrą ir lokalę.\r\n      </div>\r\n      <div>\r\n        Toliau įtaisytąsias lyginimo funkcijas galima naudoti formulių kalboje:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: naudojama tiksliam eiliškumo lyginimui atlikti</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama tiksliam eiliškumo lyginimui, kai neskiriamos didžiosios ir mažosios raidės, atlikti</li>\r\n        <li> <code>Comparer.FromCulture</code>: naudojama palyginimui, kuriame suvokiama kultūra, atlikti</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Palyginkite „1“ ir „A“ naudodami lokalę „en-US“, kad nustatytumėte, ar reikšmės lygios.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Pateikiama vietinės laiko juostos dabartinė data ir laikas. Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus.",
        "Documentation.LongDescription": "Pateikiamas <code>datetime</code> reikšmių rinkinys, skirtas dabartinei sistemos datai ir laikui. Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus, skirtingai nei DateTime.LocalNow, kuri gali pateikti skirtingas reikšmes vykdant išraišką.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Pateikiama vietinės laiko juostos dabartinė data ir laikas.",
        "Documentation.LongDescription": "Pateikiamas <code>datetime</code> reikšmių rinkinys, skirtas dabartinei sistemos datai ir laikui.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Pateikiama vietinės laiko juostos dabartinė data ir laikas. Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus.",
        "Documentation.LongDescription": "Pateikiamas <code>datetime</code> reikšmių rinkinys, skirtas dabartinei sistemos datai ir laikui. Pateiktoje reikšmėje yra laiko juostos informacija, nurodanti vietinę laiko juostą. Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus, skirtingai nei DateTimeZone.LocalNow, kuri gali pateikti skirtingas reikšmes vykdant išraišką.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Dabartinė data ir laikas pateikiami naudojant UTC (GMT laiko juosta). Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus.",
        "Documentation.LongDescription": "Dabartinė data ir laikas pateikiami naudojant UTC (GMT laiko juosta). Ši reikšmė yra fiksuota ir nepasikeis per vėlesnius iškvietimus.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Pateikiama vietinės laiko juostos dabartinė data ir laikas.",
        "Documentation.LongDescription": "Pateikiamas <code>datetimezone</code> reikšmių rinkinys, skirtas dabartinei sistemos datai ir laikui.\r\n    Pateiktoje reikšmėje yra laiko juostos informacija, nurodanti vietinę laiko juostą.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Dabartinė data ir laikas pateikiami naudojant UTC (GMT laiko juosta).",
        "Documentation.LongDescription": "Dabartinė data ir laikas pateikiami naudojant UTC (GMT laiko juosta).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Gauti dabartinę datą ir laiką UTC pavidalu.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Pateikia šiuo metu vykdomo vertinimo abstraktųjį identifikatorių.",
        "Documentation.LongDescription": "Pateikia šiuo metu vykdomo vertinimo abstraktųjį identifikatorių.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Pateikiamas abstraktus identifikatorius, skirtas gaunamas užklausas susieti su siunčiamomis.",
        "Documentation.LongDescription": "Pateikiamas abstraktus identifikatorius, skirtas gaunamas užklausas susieti su siunčiamomis.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Rašo sekimo įrašą, jei sekimo funkcija įjungta, ir pateikia reikšmę.",
        "Documentation.LongDescription": "Rašo sekimą <code>message</code>, jei sekimo funkcija įjungta, ir pateikia <code>value</code>. Pasirinktinis parametras <code>delayed</code>, nurodo, ar atidėti <code>value</code> vertinimą, kol pranešimas sekamas. <code>traceLevel</code> gali turėti vieną iš tokių reikšmių:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Sekti pranešimą prieš iškviečiant funkciją Text.From ir pateikti rezultatą.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Dabartinio pagrindinio kompiuterio numatytasis tapatybės teikimo įrankis.",
        "Documentation.LongDescription": "Dabartinio pagrindinio kompiuterio numatytasis tapatybės teikimo įrankis.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Iš sąrašo elementų sudaroma sumos reikšmė.",
        "Documentation.LongDescription": "Iš sąrašo elementų <code>list</code> sudaroma sumos reikšmė naudojant <code>accumulator</code>.\r\n    Galima nustatyti pasirinktinį pirminį parametrą, <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Iš sąrašo elementų {1, 2, 3, 4, 5} sudaroma suvestinė reikšmė naudojant ((būsena, dabartinė) => būsena + dabartinė ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Davus pradinę reikšmę, skaičių ir papildančiąją trukmės reikšmę generuojamas datetimezone reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas <code>datetimezone</code> reikšmių, kurių dydis <code>count</code>, pradedant nuo <code>start</code>. Nurodytas padidėjimas, <code>step</code>, yra <code>duration</code> reikšmė, pridedama prie kiekvienos reikšmės.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 10 reikšmių sąrašą pradėdami nuo 5 minučių iki sausio 1 d. (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)), kuriame pridedama po 1 minutę (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Davus pradinę reikšmę, skaičių ir papildančiąją trukmės reikšmę generuojamas datetime reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas <code>datetime</code> reikšmių, kurių dydis <code>count</code>, pradedant nuo <code>start</code>. Nurodytas padidėjimas, <code>step</code>, yra <code>duration</code> reikšmė, pridedama prie kiekvienos reikšmės.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 10 reikšmių sąrašą pradėdami nuo 5 minučių iki sausio 1 d. (#datetime(2011, 12, 31, 23, 55, 0)), kuriame pridedama po 1 minutę (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Davus pradinę reikšmę, skaičių ir papildančiąją trukmės reikšmę generuojamas datos reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas <code>date</code> reikšmių, kurių dydis <code>count</code>, pradedant nuo <code>start</code>. Nurodytas padidėjimas, <code>step</code>, yra <code>duration</code> reikšmė, pridedama prie kiekvienos reikšmės.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 5 reikšmių sąrašą pradėdami nuo Naujųjų metų išvakarių (#date(2011, 12, 31)) ir pridėdami po 1 dieną(#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Generuojamas trukmės reikšmių sąrašas su pradine reikšme, skaičiumi ir papildančiąja trukmės reikšme.",
        "Documentation.LongDescription": "Pateikiamas <code>count</code> <code>duration</code> reikšmių sąrašas, prasidedantis nuo <code>start</code> ir didinamas naudojant pateiktą <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 5 reikšmių sąrašą pradėdami nuo 1 valandos ir didindami po valandą.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Sugeneruoja reikšmių sąrašą.",
        "Documentation.LongDescription": "Naudojant pateiktas funkcijas generuojamas reikšmių sąrašas. Funkcija <code>initial</code> sugeneruoja pradinę potencialią reikšmę, kuri yra tikrinama pagal <code>condition</code>.\r\n    Jei potenciali reikšmė patvirtinama, ji pateikiama kaip gauto sąrašo dalis, o kita potenciali reikšmė sugeneruojama naujai patvirtintą reikšmę perduodant į <code>next</code>.\r\n    Kai potenciali reikšmė neatitinka <code>condition</code>, sąrašo generavimo procesas sustoja.\r\n    Taip pat gali būti pateiktas pasirenkamas parametras, <code>selector</code>, kad būtų transformuoti elementai gautame sąraše.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą pradėdami nuo dešimtos vietos ir pakartotinai mažinkite po vieną užtikrindami, jog kiekvienas elementas būtų didesnis už nulį.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Sugeneruokite įrašų, kuriuose yra x ir y, sąrašą (x yra reikšmė, o y yra sąrašas). x turėtų būti mažiau nei 10 ir žymėti sąraše y esančių elementų skaičių. Sugeneravus sąrašą, pateikite tik x reikšmes.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Į sąrašą įterpiamos reikšmės nurodytame indekse.",
        "Documentation.LongDescription": "Pateikiamas naujas sąrašas, sukurtas įterpiant <code>values</code> reikšmes į <code>list</code>, <code>index</code>. Pirmoji sąrašo vieta yra 0 indekse.\r\n      <ul>\r\n        <li><code>list</code>: paskirties sąrašas, į kurį turi būti įterptos reikšmės.</li>\r\n        <li><code>index</code>: paskirties sąrašo indeksas(<code>list</code>), kur turi būti įterptos reikšmės. Pirmoji sąrašo vieta yra 0 indekse.</li>\r\n        <li><code>values</code>: reikšmių, kurios turi būti įterptos į <code>list</code>, sąrašas.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Įterpkite sąrašą ({3, 4}) į paskirties sąrašą ({1, 2, 5}) 2 indekse.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Įterpkite sąrašą su įdėtuoju sąrašu ({1, {1.1, 1.2}}) į paskirties sąrašą ({2, 3, 4}) 0 indekse.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Pakeičiamas reikšmių eilės skaičius pradedant nuo padėties su pakeitimo reikšmėmis.",
        "Documentation.LongDescription": "<code>count</code> reikšmės, esančios <code>list</code>, pakeičiamos sąrašu <code>replaceWith</code>, pradedant nuo nurodytos padėties, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sąraše {1, 2, 7, 8, 9, 5} pakeiskite {7, 8, 9} į {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Ieškomas nurodytos reikšmės sąrašas ir jis pakeičiamas.",
        "Documentation.LongDescription": "Ieškomas sąrašas reikšmių, <code>list</code>, reikšmei <code>oldValue</code> ir kiekvienas atvejis pakeičiamas pakeitimo reikšme <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite visas sąrašo {\"a\", \"B\", \"a\", \"a\"} reikšmes „a“ į „A“.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Davus pradinę reikšmę, skaičių ir papildančiąją trukmės reikšmę generuojamas laiko reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas <code>time</code> reikšmių, kurių dydis <code>count</code>, pradedant nuo <code>start</code>. Nurodytas padidėjimas, <code>step</code>, yra <code>duration</code> reikšmė, pridedama prie kiekvienos reikšmės.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 4 reikšmių sąrašą, pradėdami nuo vidurdienio (#time(12, 0, 0)) ir papildydami po vieną valandą (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Pateikiamas sąrašas, kurio elementai yra transformuojami iš įvesties sąrašo naudojant nurodytas funkcijas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kurio elementai pateikiami iš įvesties sąrašo.<br>\r\n    <br>\r\n    Funkcija <code>collectionTransform</code> transformuoja kiekvieną elementą į tarpinį sąrašą, o funkcija <code>resultTransform</code> gauna pradinį elementą, taip pat elementą iš tarpinio sąrašo, kad būtų sudarytas galutinis rezultatas.<br>\r\n    <br>\r\n    Funkcija <code>collectionTransform</code> turi parašą <code>(x kaip bet kuris) kaip sąrašas => ...</code>, kur <code>x</code> yra elementas, esantis <code>list</code>.\r\n    Funkcija <code>resultTransform</code> pateikia rezultato formą ir turi parašą <code>(x kaip bet kuris, y kaip bet kuris) kaip bet kuris => ...</code>, kur <code>x</code> yra elementas, esantis <code>list</code>, o <code>y</code> – elementas iš sąrašo, sugeneruoto perduodant <code>x</code> į <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sulyginkite žmonių ir jų augintinių sąrašą.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Pateikiamas atsitiktinis skaičius.",
        "Documentation.LongDescription": "Pateikiamas atsitiktinis skaičius nuo 0 iki 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Gaukite atsitiktinį skaičių.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Prie įrašo pridedamas laukas.",
        "Documentation.LongDescription": "Prie įrašo <code>record</code> pridedamas laukas su lauko pavadinimu <code>fieldName</code> ir reikšme <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Į įrašą įtraukite lauką „Address“.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Pakeičiamas tekstas pateiktoje įvestyje.",
        "Documentation.LongDescription": "Pakeičiamas <code>old</code> tekstas pradiniame <code>text</code> į <code>new</code> tekstą. Šią pakeitimo funkciją galima naudoti <code>List.ReplaceValue</code> ir <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite tekstą „hE“ tekstu „He“ eilutėje „hEllo world“.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Pakeičiamos reikšmės pateiktoje įvestyje.",
        "Documentation.LongDescription": "Pakeičiama <code>old</code> reikšmė pradiniame <code>value</code> į <code>new</code> reikšmę. Šią pakeitimo funkciją galima naudoti <code>List.ReplaceValue</code> ir <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Pakeičiama reikšmė 11 reikšme 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Pateikiamas JSON rezultatas iš „Smartsheet“ API",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Iškviečia „Smartsheet 2.0“ REST API nurodytame galiniame punkte ir pateikia rezultatus kaip JSON įrašą.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiami duomenys iš lapų „Smartsheet“ API galinio punkto su papildomais nurodytais argumentais",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Lentelė su lapų informacija, kurią pateikė „Smartsheet“ API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Pateikiama funkcija, kuri neatlieka skaidymo, o jos argumentas pateikiamas kaip atskiras elementų sąrašas.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri neatlieka skaidymo, o jos argumentas pateikiamas kaip atskiras elementų sąrašas.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties tarpu.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties tarpu.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį tarpo simboliais, kabutes traktuodami kaip bet kurį kitą simbolį.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Lentelė išskaidoma į lentelių sąrašą atsižvelgiant į grupių skaičių ir nurodytą stulpelį.",
        "Documentation.LongDescription": "<code>table</code> išskaidoma į lentelių <code>groups</code> skaičiaus sąrašą, atsižvelgiant į <code>column</code> reikšmę ir <code>hash</code> funkciją.\r\n    <code>hash</code> funkcija pritaikoma <code>column</code> eilutės reikšmei, kad būtų gauta eilutės maišos reikšmė. Maišos reikšmės modulis <code>groups</code> nustato, kuriose iš pateiktų lentelių bus įdėta eilutė.\r\n    <ul>\r\n       <li><code>table</code>: skaidytina lentelė.</li>\r\n       <li><code>column</code>: stulpelis, kuriam taikyti maišos funkciją, norint nustatyti, kurioje iš pateiktų lentelių yra eilutė.</li>\r\n       <li><code>groups</code>: skaičius lentelių, į kurias bus išskaidyta įvesties lentelė.</li>\r\n       <li><code>hash</code>: funkcija, taikoma norint gauti maišos reikšmę.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite lentelę <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> į 2 lenteles stulpelyje [a], naudodami stulpelių reikšmę kaip maišos funkciją.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Pateikiama <code>text</code> dalis tarp nurodytų <code>startDelimiter</code> ir <code>endDelimiter</code>.\r\n    Pasirenkamas skaitinis <code>startIndex</code> parodo, į kurį <code>startDelimiter</code> atvejį reikia atsižvelgti.\r\n    Pasirenkamas sąrašas <code>startIndex</code> parodo, į kurį <code>startDelimiter</code> atvejį reikia atsižvelgti ir ar indeksavimą reikia atlikti nuo įvesties pradžios ar galo.\r\n    <code>endIndex</code> yra panašus, išskyrus tai, kad indeksavimas atliekamas pagal <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Gauti 111 (222) 333 (444) dalį tarp (pirmojo) atidarymo skliaustelio ir (pirmojo) po jo esančio uždarymo skliaustelio.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Gauti 111 (222) 333 (444) dalį tarp antrojo atidarymo skliaustelio ir pirmojo po jo esančio uždarymo skliaustelio.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Gauti 111 (222) 333 (444) dalį tarp antrojo atidarymo skliaustelio nuo galo ir antrojo po jo esančio uždarymo skliaustelio.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Įterpiama viena tekstinė reikšmė į kitą nurodytoje padėtyje.",
        "Documentation.LongDescription": "Pateikiamas tekstinių reikšmių <code>newText</code> įterpimo į tekstinę reikšmę <code>text</code> padėtyje <code>offset</code> rezultatas. Padėtys prasideda nuo skaičiaus 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "„ABD“ įterpkite „C“ tarp „B“ ir „D“.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Pateikiamas naujas atsitiktinis universalus unikalusis identifikatorius (GUID).",
        "Documentation.LongDescription": "Pateikiamas naujas atsitiktinis universalus unikalusis identifikatorius (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Pakeičiami visi nurodytos teksto dalinės eilutės atvejai.",
        "Documentation.LongDescription": "Pateikiamas visų tekstinės reikšmės <code>old</code> atvejų tekstinėje reikšmėje <code>text</code> pakeitimo į tekstinę reikšmę <code>new</code> rezultatas. Ši funkcija skiria didžiąsias ir mažąsias raides.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite kiekvieną „the“ atvejį sakinyje į „a“.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Pašalinamas simbolių diapazonas ir nurodytoje padėtyje įterpiama nauja reikšmė.",
        "Documentation.LongDescription": "Pateikiamas simbolių skaičiaus (<code>count</code>), pašalinimo iš tekstinės reikšmės <code>text</code>, pradedant nuo <code>offset</code> padėties, tada tekstinės reikšmės <code>newText</code> įterpimo toje pačioje <code>text</code> padėtyje, rezultatas.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite vieną tekstinės reikšmės „ABGF“ simbolį 2 padėtyje nauja tekstine reikšme „CDE“.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Pridedamas raktas prie nurodyto lentelės tipo.",
        "Documentation.LongDescription": "Pridedamas raktas prie nurodyto lentelės tipo.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Pateikia tapatybių, kurias priims sąlyga, sąrašą.",
        "Documentation.LongDescription": "<p>Naudojant nurodytą <code>identityProvider</code>, <code>condition</code> konvertuojamas į tapatybių, kurių reikšmę <code>„true“</code> <code>condition</code> turi pateikti visuose autorizavimo kontekstuose, kai <code>identityProvider</code> naudojamas kaip tapatybės teikimo įrankis, sąrašą. Jei <code>condition</code> neįmanoma konvertuoti į tapatybių sąrašą, parodoma klaida, pvz., jei priimdamas sprendimą <code>condition</code> atsižvelgia į kitus atributus, o ne vartotojų arba grupių tapatybės.</p>\r\n    <p>Atkreipkite dėmesį, kad tapatybių sąraše tapatybės rodomos taip pat, kaip ir <code>condition</code> netaikant joms jokio normalizavimo (pvz., grupės išplėtimo).</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Suglaudinama dvejetainė reikšmė naudojant glaudinimo tipą.",
        "Documentation.LongDescription": "Naudojant pateiktą glaudinimo tipą suglaudinama dvejetainė reikšmė.  Šios iškvietos rezultatas yra suglaudinta įvesties kopija. Glaudinimo tipams priskiriami:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Glaudinkite dvejetainę reikšmę.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Išskleidžiama dvejetainė vertė naudojant nurodytą glaudinimo tipą.",
        "Documentation.LongDescription": "Naudojant pateiktą glaudinimo tipą išskleidžiama dvejetainė reikšmė.  Šios iškvietos rezultatas yra išskleista įvesties kopija. Glaudinimo tipams priskiriami:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Išskleidžiama dvejetainė vertė.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Pateikiamas dvejetainės reikšmės poaibis pradedant nuo poslinkio.",
        "Documentation.LongDescription": "Pateikiamas dvejetainės reikšmės poaibis pradedant nuo poslinkio <code>binary</code>. Pasirenkamas parametras, <code>offset</code>, nustato maksimalų poaibio ilgį.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamas dvejetainės reikšmės poaibis pradedant 6 poslinkio.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Pateikiamas 2 ilgio poaibis iš dvejetainės reikšmės 6 poslinkio.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Nurodyta dvejetainis elementas išskaidomas į dvejetainių sąrašą naudojant nurodytą puslapio formatą.",
        "Documentation.LongDescription": "<code>binary</code> išskaido į dvejetainių sąrašą, kuriame pirmasis išvesties sąrašo elementas yra dvejetainis su pirmaisiais (-ųjų) \r\n    šaltinio dvejetainio elemento <code>pageSize</code> baitais (-ų), antrasis išvesties sąrašo elementas yra dvejetainis elementas su kitais (-ų) šaltinio dvinario elemento <code>pageSize</code> baitais (-ų) ir t. t.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Sukuriamas arba pratęsiamas dvejetainis su vartotojo apibrėžtomis užklausų ir veiksmų operacijų apdorojimo programomis.",
        "Documentation.LongDescription": "<p>Pateikiamas <code>binary</code> rodinys, kur funkcijos, nurodytos <code>handlers</code>, yra naudojamos vietoj numatytųjų operacijos veiksmų, kai operacija taikoma rodiniui.</p>\r\n<p>Jei <code>binary</code> pateikiama, visos apdorojimo programos funkcijos yra pasirinktinės. Jei <code>binary</code> nepateikiama, būtina naudoti apdorojimo programos funkciją <code>GetStream</code>. Jei apdorojimo programos funkcija operacijai nenurodyta, <code>binary</code> bus taikoma numatytoji operacijos elgsena (išskyrus <code>GetExpression</code> atvejus).</p>\r\n<p>Apdorojimo programos funkcijos turi pateikti reikšmę, kuri semantiškai lygi rezultatui, gautam <code>binary</code> pritaikius operaciją (arba gautam rodiniui, jei naudojama <code>GetExpression</code>).</p>\r\n<p>Jei apdorojimo funkcija pateikia klaidą, rodiniui taikoma numatytoji operacijos elgsena.</p>\r\n<p><code>Binary.View</code> galima naudoti norint įdiegti perėjimą į duomenų šaltinį – M užklausų vertimą į šaltiniui būdingas operacijas (pvz., kad būtų atsisiųsta failo dalis).</p>\r\n<p>Išsamesnį <code>Binary.View</code> aprašą rasite paskelbtuose „Power Query“ tinkinamos jungties dokumentuose.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite bazinį rodinį, kuriam nereikia prieigos prie duomenų, kad būtų galima nustatyti ilgį.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, baitų eilę nurodo funkcija.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, baitų eilę nurodo <code>binaryFormat</code>.  Numatytoji baitų eilė: <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris pasirenka tolesnį dvejetainį formatą, pagrįstą jau perskaityta reikšme.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris pasirenka tolesnį dvejetainį formatą, pagrįstą jau perskaityta reikšme.  Dvejetainio formato reikšmė, kurią pateikia ši funkcija, veikia etapais:<ul>\r\n<li>Dvejetainis formatas, kurį nurodo <code>binaryFormat</code> parametras, naudojamas reikšmei perskaityti.</li>\r\n<li>Reikšmė perduodama išrinkimo funkcijai, kurią nurodo <code>chooseFunction</code> parametras.</li>\r\n<li>Išrinkimo funkcija patikrina reikšmę ir pateikia antrąjį dvejetainį formatą.</li>\r\n<li>Antrasis dvejetainis formatas naudojamas antrajai reikšmei perskaityti.</li>\r\n<li>Jei nurodyta jungimo funkcija, tada pirmoji ir antroji reikšmės perduodamos jungimo funkcijai bei pateikiama gauta reikšmė.</li>\r\n<li>Jeigu jungimo funkcija nenurodyta, pateikiama antroji reikšmė.</li>\r\n<li>Pateikiama antroji reikšmė.</li>\r\n</ul>Pasirinktinis <code>type</code> parametras rodo dvejetainio formato tipą, kurį pateiks išrinkimo funkcija.  Galima nurodyti <code>type any</code>, <code>type list</code> arba <code>type binary</code>.  Jei <code>type</code> parametras nenurodytas, tada naudojama <code>type any</code>.   Jei naudojama <code>type list</code> arba <code>type binary</code>, tada sistema gali pateikti srautinę <code>binary</code> arba <code>list</code> reikšmę, o ne buferizuotą, kuri gali sumažinti formatui perskaityti reikalingos atminties kiekį.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Perskaityti baitų sąrašą, kur elementų skaičius nustatomas pagal pirmąjį baitą.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Perskaityti baitų sąrašą, kur elementų skaičius nustatomas pagal pirmąjį baitą, ir išsaugoti pirmą perskaitytą baitą.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Perskaityti baitų sąrašą, kur elementų skaičius nustatomas pagal pirmąjį baitą naudojant srautinį sąrašą.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris perskaito elementų grupę.",
        "Documentation.LongDescription": "Parametrai:\r\n<ul>\r\n<li><code>binaryFormat</code> parametras nurodo rakto reikšmės dvejetainį formatą.</li>\r\n<li><code>group</code> parametras pateikia informaciją apie žinomų elementų grupę.</li>\r\n<li>Pasirinktinį <code>extra</code> parametrą galima naudoti norint nustatyti funkciją, kuri pateiks reikšmės, esančios po kiekvieno netikėto rakto, dvejetainio formato reikšmę. Jei <code>extra</code> parametras nenurodytas, tada bus pateikta klaida, jei yra nenumatytų rakto reikšmių.</li>\r\n</ul>\r\n<code>group</code> parametras nurodo elementų aprašų sąrašą. Kiekvieno elemento aprašas yra sąrašas su 3–5 reikšmėmis:\r\n<ul>\r\n<li>Rakto reikšmė. Rakto reikšmė, atitinkanti elementą. Elementų rinkinyje ji turi būti unikali.</li>\r\n<li>Elemento formatas. Dvejetainis formatas, atitinkantis elemento reikšmę. Tai leidžia kiekvienam elementui turėti skirtingą formatą. </li>\r\n<li>Elemento pasikartojimas. <code>BinaryOccurrence.Type</code> reikšmė, nurodanti, kiek kartų elementas turėtų pasikartoti grupėje. Jei nėra reikiamų elementų, bus pateikta klaida. Reikiami arba pasirinktiniai pasikartojantys elementai tvarkomi kaip netikėtos rakto reikšmės.</li>\r\n<li>Numatytoji elemento reikšmė (pasirinktinai). Jei numatytoji elemento reikšmė pateikiama elemento aprašo sąraše ir jos reikšmė nėra null, tada ji bus naudojama vietoj numatytosios. Pasikartojančių arba pasirinktinių elementų numatytoji reikšmė yra null, o pasikartojančių reikšmių numatytoji reikšmė yra tuščias sąrašas { }.</li>\r\n<li>Elemento reikšmės transformavimas (pasirinktinai). Jei elemento aprašo sąraše yra elemento reikšmės transformavimo funkcija ir jos reikšmė nėra null, tada ji bus iškviesta, kad transformuotų elemento reikšmę prieš ją pateikiant. Transformavimo funkcija iškviečiama tik tada, jei elementas pasirodo įvestyje (ji niekada nebus iškviesta esant numatytajai reikšmei). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Toliau laikoma, kad rakto reikšmė yra vieno baito, grupėje tikimasi 4 elementų, iš kurių visuose po rakto yra duomenų baitas.  Elementai įvestyje rodomi taip:\r\n<ul>\r\n<li>1 raktas būtinas, jis rodomas su reikšme 11.</li>\r\n<li>2 raktas pasikartoja, pasirodo du kartus su reikšme 22 ir pateikiama reikšmė { 22, 22 }.</li>\r\n<li>3 raktas pasirinktinis, jis nepasirodo, pateikiama neapibrėžta reikšmė.</li>\r\n<li>4 raktas pasikartoja, bet nepasirodo, pateikiama reikšmė { }.</li>\r\n<li>5 raktas nėra grupės dalis, bet pasirodo vieną kartą su reikšme 55.  Papildoma funkcija iškviečiama su rakto reikšme 5 ir pateikia formatą, atitinkantį tą reikšmę (BinaryFormat.Byte).  Reikšmė 55 perskaitoma ir atmetama.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Pateiktame pavyzdyje parodoma elemento reikšmės transformacija ir numatytoji elemento reikšmė.   Pasikartojantis elementas su 1 raktu susumuoja perskaitytų reikšmių sąrašą naudodamas List.Sum.  Pasirinktinis elementas su 2 raktu turi numatytąją reikšmę 123, o ne neapibrėžtą.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris apriboja perskaitomų duomenų kiekį.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris apriboja perskaitomų duomenų kiekį.  <code>BinaryFormat.List</code> ir <code>BinaryFormat.Binary</code> galima naudoti norint perskaityti iki duomenų pabaigos.  <code>BinaryFormat.Length</code> galima naudoti norint apriboti perskaitomų baitų skaičių.  <code>binaryFormat</code> parametras nurodo dvejetainį ribotiną formatą.  <code>length</code> parametras nurodo perskaitomų baitų skaičių.  <code>length</code> parametras gali būti skaitinė reikšmė arba dvejetainio formato reikšmė, kuri nurodo ilgio reikšmės, pasirodančios prieš skaitomą reikšmę, formatą.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Kai skaitomas baitų sąrašas, apriboti perskaitomų baitų skaičių iki 2.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Kai skaitomas baitų sąrašas, apriboti skaitomų baitų skaičių iki baito reikšmės, esančios prieš sąrašą.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris transformuos reikšmes, skaitomas kito dvejetainio formato.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris transformuos reikšmes, skaitomas kito dvejetainio formato.  <code>binaryFormat</code> parametras nurodo dvejetainį formatą, kuris bus naudojamas reikšmei perskaityti.  <code>function</code> iškviečiama su perskaityta reikšme ir pateikiama transformuota reikšmė.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Perskaityti baitą ir vieną įtraukti.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Pateikiama lyginimo funkcija, kuri lygina reikšmes naudodama eilės numerio taisykles.",
        "Documentation.LongDescription": "Pateikiama lyginimo funkcija, kuri naudoja eiliškumo taisykles pateiktoms reikšmėms <code>x</code> ir <code>y</code> palyginti.<br>\r\n        <br>\r\n        Lyginimo funkcija priima du argumentus ir pateikia -1, 0 arba 1, atsižvelgiant į tai, ar pirmoji reikšmė yra mažesnė, lygi ar didesnė nei antroji.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Naudodami eilės numerio taisykles, palyginkite, ar „encyclopędia“ lygi „encyclopaedia“. Prisiminkite, kad jos lygios naudojant <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Pateikiama lyginimo funkcija, neskirianti didžiųjų ir mažųjų raidžių, kuri lygina reikšmes naudodama eilės numerių taisykles.",
        "Documentation.LongDescription": "Pateikiama lyginimo funkcija, neskirianti didžiųjų ir mažųjų raidžių, kuri naudoja eiliškumo taisykles pateiktoms reikšmėms <code>x</code> ir <code>y</code> palyginti.<br>\r\n        <br>\r\n        Lyginimo funkcija priima du argumentus ir pateikia -1, 0 arba 1, atsižvelgdama į tai, ar pirmoji reikšmė yra mažesnė, lygi ar didesnė už sekundę.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Naudodami eilės numerių taisykles, kuriose neskiriamos didžiosios ir mažosios raidės, palyginkite „Abc“ su „abc“. Atkreipkite dėmesį, kad „Abc“ reikšmė yra mažesnė už „abc“ naudojant <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Pateikiama dimensijos atributo ypatybė.",
        "Documentation.LongDescription": "Pateikiama dimensijos atributo <code>attribute</code> ypatybė <code>propertyName</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Pateikiama mato ypatybė (langelio ypatybė).",
        "Documentation.LongDescription": "Pateikiama mato <code>measure</code> ypatybė <code>propertyName</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Duomenų SQL užklausos šaltinis",
        "Documentation.LongDescription": "Apibrėžkite „Databricks“ duomenų šaltinį, skirtą SQL užklausoms vykdyti"
      },
      "ReturnType": "Duomenų SQL užklausa",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Duomenų SQL užklausos šaltinis",
        "Documentation.LongDescription": "Apibrėžkite „Databricks“ duomenų šaltinį, skirtą SQL užklausoms vykdyti"
      },
      "ReturnType": "Duomenų SQL užklausa",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Prie datos pridedamos nurodytos dienos.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> rezultatas pridėjus <code>numberOfDays</code> d. prie <code>datetime</code> reikšmės <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, prie kurios pridedamos dienos.</li>\r\n      <li><code>numberOfDays</code>: pridėtinų dienų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 5 dienas prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą 2011 05 14.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Prie datos pridedami nurodyti mėnesiai.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> rezultatas pridėjus <code>numberOfMonths</code> mėn. prie <code>datetime</code> reikšmės <code>dateTime</code>.\r\n      <ul>\r\n       <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, prie kurios pridedami mėnesiai.</li>\r\n        <li><code>numberOfMonths</code>: pridėtinų mėnesių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 5 mėn. prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą 2011 05 14.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Pridėkite 18 mėn. prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą ir laiką: 2011 05 14, 08:15:22 ryte.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Prie datos pridedami nurodyti ketvirčiai.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> rezultatas pridėjus <code>numberOfQuarters</code> ketv. prie <code>datetime</code> reikšmės <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, prie kurios pridedami ketvirčiai.</li>\r\n      <li><code>numberOfQuarters</code>: pridėtinų ketvirčių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 1 ketvirtį prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą 2011 05 14.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Prie datos pridedamos nurodytos savaitės.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> rezultatas pridėjus <code>numberOfWeeks</code> sav. prie <code>datetime</code> reikšmės <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, prie kurios pridedamos savaitės.</li>\r\n      <li><code>numberOfWeeks</code>: pridėtinų savaičių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 5 savaites prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą 2011 05 14.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Prie datos pridedami nurodyti metai.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> rezultatas pridėjus <code>numberOfYears</code> prie <code>datetime</code> reikšmės <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, prie kurios pridedami metai.</li>\r\n        <li><code>numberOfYears</code>: pridėtinų metų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 4 metus prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą 2011 05 14.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Pridėkite 10 metų prie <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės, atitinkančios datą ir laiką: 2011 05 14, 08:15:22 ryte.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų kelių dienų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių dienų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>days</code>: dienų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar diena po dabartinio sistemos laiko patenka į tolesnes dvi dienas.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų kelių mėnesių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių mėnesių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>months</code>: mėnesių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar mėnuo po dabartinio sistemos laiko patenka į tolesnius du mėnesius.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų kelių ketvirčių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių ketvirčių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>quarters</code>: ketvirčių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar ketvirtis po dabartinio sistemos laiko patenka į du tolesnius ketvirčius.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų kelių savaičių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių savaičių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>weeks</code>: savaičių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar savaitė po dabartinio sistemos laiko patenka į tolesnes dvi savaites.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų kelerių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelerių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>years</code>: metų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar metai po dabartinio sistemos laiko patenka į dvejus tolesnius metus.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių kelių dienų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių dienų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>days</code>: dienų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar diena prieš dabartinį sistemos laiką patenka į dvi ankstesnes dienas.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių kelių mėnesių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių mėnesių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>months</code>: mėnesių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar mėnuo prieš dabartinį sistemos laiką patenka į du ankstesnius mėnesius.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių kelių ketvirčių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių ketvirčių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>quarters</code>: ketvirčių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar ketvirtis prieš dabartinį sistemos laiką patenka į ankstesnius du ketvirčius.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių kelių savaičių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių savaičių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>weeks</code>: savaičių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar savaitė prieš dabartinį sistemos laiką patenka į dvi ankstesnes savaites.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių kelerių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelerių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>years</code>: metų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar metai prieš dabartinį sistemos laiką patenka į ankstesnius dvejus metus.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Įtraukiama „timezone“ informacija „datetime“ vertei.",
        "Documentation.LongDescription": "Prie <code>dateTime</code> reikšmės pridedama „timezone“ informacija. „timezone“ informacija apima <code>timezoneHours</code> ir pasirinktinai <code>timezoneMinutes</code>, nurodantį norimą poslinkį nuo UTC laiko.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite laiko juostą į UTC+7:30 (prie UTC laiko pridėjus 7 valandas ir 30 minučių).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitų kelių valandų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių valandų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>hours</code>: valandų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar valanda po dabartinio sistemos laiko patenka į kitas dvi valandas.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitų kelių minučių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių minučių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>minutes</code>: minučių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar minutė po dabartinio sistemos laiko patenka į kitas dvi minutes.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitų kelių sekundžių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų kelių sekundžių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>seconds</code>: sekundžių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar sekundė po dabartinio sistemos laiko patenka į kitas dvi sekundes.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnių kelių valandų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių valandų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>hours</code>: valandų skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar valanda prieš dabartinį sistemos laiką patenka į dvi ankstesnes valandas.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnių kelių minučių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių minučių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>minutes</code>: minučių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar minutė prieš dabartinį sistemos laiką patenka į dvi ankstesnes minutes.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnių kelių sekundžių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių kelių sekundžių intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      <li><code>seconds</code>: sekundžių skaičius.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar sekundė prieš dabartinį sistemos laiką patenka į dvi ankstesnes sekundes.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Pakeičiama reikšmės laiko juosta.",
        "Documentation.LongDescription": "Laiko juostos informacija datos ir laiko juostos reikšmėje <code>dateTimeZone</code> pakeičiama į naują laiko juostos informaciją, pateiktą <code>timezoneHours</code> ir pasirinktinai <code>timezoneMinutes</code>.\r\n    Jei <code>dateTimeZone</code> nėra laiko juostos komponento, pateikiama išimtis.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) laiko juostos informaciją į 8 valandas.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Pakeiskite #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) laiko juostos informaciją į -30 min.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Reikšmė, esanti įdėtuosiuose mišriuose duomenyse, pasiekiama pagal pavadinimą.",
        "Documentation.LongDescription": "Reikšmė, esanti įdėtuosiuose mišriuose duomenyse, pasiekiama pagal pavadinimą.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Sukuriama funkcija su konkretaus parametro parašu greta funkcijos, naudojančios vieno sąrašo argumentą",
        "Documentation.LongDescription": "Ima vienanarę funkciją <code>function</code> ir sukuria naują <code>functionType</code> tipo funkciją, kuri iš jos argumentų sudaro sąrašą ir perduoda jį į <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Konvertuoja List.Sum į dviejų argumentų funkciją, kurios argumentai sudedami",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Konvertuoja funkciją perkeliant sąrašą į dviejų argumentų funkciją",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Iškviečiama nurodyta funkcija",
        "Documentation.LongDescription": "Iškviečiama pateikta funkcija, naudojant nurodytą argumentų sąrašą, ir pateikiamas rezultatas.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Iškviečiama Record.FieldNames su vienu argumentu [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Praėjus nurodytai trukmei iškviečiama duota funkcija.",
        "Documentation.LongDescription": "Praėjus trukmei <code>delay</code> pateikiamas <code>function</code> iškvietimo rezultatas.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Panaudojant vektoriaus funkciją sukuriama skaliarinė funkcija, vykdanti kelių iškvietimų siuntimą paketais.",
        "Documentation.LongDescription": "<p>Pateikiama <code>scalarFunctionType</code> tipo skaliarinė funkcija, kuri iškviečia <code>vectorFunction</code> su viena argumentų eilute ir pateikia vieną jos išvestį. Be to, kiekvienai įvesčių lentelės (pvz., Table.AddColumn) eilutei pakartotinai pritaikius skaliarinę funkciją, vietoj jos visoms įvestims bus vieną kartą pritaikyta <code>vectorFunction</code>.</p>\r\n<p><code>vectorFunction</code> bus perduota į lentelę, kurios stulpeliai pagal pavadinimą ir padėtį atitiks <code>scalarFunctionType</code> parametrus. Kiekvienoje šios lentelės eilutėje pateikiami vieno skaliarinės funkcijos iškvietimo argumentai, naudojant <code>scalarFunctionType</code> parametrus atitinkančius stulpelius. </p>\r\n<p><code>vectorFunction</code> turi pateikti tokio paties ilgio sąrašą kaip įvesties lentelė, kurio kiekvienoje pozicijoje esančio elemento rezultatas turi būti toks pats, kaip ir vertinant tos pačios pozicijos įvesties eilutės skaliarinę funkciją. </p>\r\n<p>Numatoma, kad įvesties lentelė bus perduota srautu, todėl tikimasi, kad <code>vectorFunction</code> perduos savo išvestį srautu, kai bus gauta įvestis, vienu metu apdorojant tik vieną įvesties segmentą. Tiksliau tariant, <code>vectorFunction</code> negali išvardyti įvesties lentelės daugiau nei vieną kartą.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Sukuriamas įrašas, vaizduojantis geografinį tašką iš dalių.",
        "Documentation.LongDescription": "Sukuriamas įrašas, vaizduojantis geografinį tašką iš jo sudedamųjų dalių, pvz., ilgumos, platumos ir, jei yra, pakilimo (Z) bei mato (M). Pasirinktinis koordinačių sistemos identifikatorius (SRID) gali būti pateiktas, jei skiriasi nuo numatytosios reikšmės (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Sukuriamas įrašas, vaizduojantis geometrinį tašką iš dalių.",
        "Documentation.LongDescription": "Sukuriamas įrašas, vaizduojantis geometrinį tašką iš jo sudedamųjų dalių, pvz., X koordinatės, Y koordinatės ir, jei yra, Z koordinatės bei mato (M). Pasirinktinis koordinačių sistemos identifikatorius (SRID) gali būti pateiktas, jei skiriasi nuo numatytosios reikšmės (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Sukuria tapatybę.",
        "Documentation.LongDescription": "Sukuria tapatybę.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Nurodo, ar tapatybė yra tapatybių rinkinio narys.",
        "Documentation.LongDescription": "Nurodo, ar tapatybė yra tapatybių rinkinio narys.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Pateikiamas sąrašas, sudarytas iš visų nelyginių sunumeruotų sąrašo poslinkio elementų.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, sudarytas iš visų nelyginių sunumeruotų sąrašo poslinkio elementų. Kaitaliojama tarp sąrašo <code>list</code> reikšmių paėmimo ir praleidimo atsižvelgiant į parametrus.\r\n    <ul>\r\n    <li><code>count</code>: nurodomas kiekvieną kartą praleidžiamų reikšmių skaičius.</li>\r\n    <li><code>repeatInterval</code>: pasirinktinis kartojimo intervalas, rodantis, kiek reikšmių įtraukiama tarp praleistų reikšmių.</li>\r\n    <li><code>offset</code>: pasirinktinis poslinkio parametras, skirtas pradėti praleisti reikšmes ties pradiniu poslinkiu.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą iš {1..10}, kuriame praleidžiamas pirmasis skaičius.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Sukurkite sąrašą iš {1..10}, kuriame praleidžiamas kas antras skaičius.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Sukurkite sąrašą iš {1..10}, kuris prasideda nuo 1 ir praleidžia kas antrą skaičių.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Sukurkite sąrašą iš {1..10}, kuris prasideda nuo 1, praleidžia vieną reikšmę, išlaiko dvi reikšmes ir t. t.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Nurodoma, ar sąraše yra reikšmė.",
        "Documentation.LongDescription": "Nurodoma, ar sąraše <code>list</code> yra reikšmė <code>value</code>.\r\n    Jei reikšmė sąraše surandama, pateikiama true, kitu atveju – false. Norint valdyti lygybės bandymą, gali būti nurodyta pasirenkama lygties kriterijų reikšmė <code>equationCriteria</code>. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Nurodoma, ar sąraše yra visos kito sąrašo reikšmės.",
        "Documentation.LongDescription": "Nurodoma, ar sąraše <code>list</code> yra visos kito sąrašo reikšmės, <code>values</code>.\r\n    Jei reikšmė sąraše surandama, pateikiama Teisinga, kitu atveju – Klaidinga. Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 3 ir 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 5 ir 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Nurodoma, ar sąraše yra kokių nors kito sąrašo reikšmių.",
        "Documentation.LongDescription": "Nurodoma, ar sąraše <code>list</code> yra kokių nors kito sąrašo reikšmių, <code>values</code>.\r\n        Jei reikšmė sąraše surandama, pateikiama Teisinga, kitu atveju – Klaidinga. Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 3 arba 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar sąraše {1, 2, 3, 4, 5} yra 6 arba 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Pateikiama dviejų skaičių sąrašų kovariacija.",
        "Documentation.LongDescription": "Pateikiama dviejų sąrašų kovariacija, <code>numberList1</code> ir <code>numberList2</code>. <code>numberList1</code> ir <code>numberList2</code> turi būti toks pat <code>number</code> reikšmių skaičius.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Apskaičiuokite dviejų sąrašų kovariaciją.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Pateikiamas dviejų nurodytų sąrašų skirtumas.",
        "Documentation.LongDescription": "Pateikiami sąrašo elementai <code>list1</code>, kurių nėra sąraše <code>list2</code>. Palaikomos pasikartojančios reikšmės.\r\n    Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Rasti sąrašo elementus {1, 2, 3, 4, 5}, kurie nerodomi {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Rasti sąrašo elementus {1, 2}, kurie nerodomi {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Pateikiamas reikšmių sąrašas (įskaitant įrašo laukus), kuriame yra nurodytas tekstas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas reikšmių iš sąrašo <code>list</code>, kuriame yra reikšmė <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Rasti teksto reikšmes sąraše {\"a\", \"b\", \"ab\"}, kurios atitinka \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Pateikiamas pirmasis sąrašo elementų rinkinys nurodant, kiek elementų pateikti arba kvalifikacinė sąlyga.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Jei nurodytas skaičius, pateikiama ne daugiau elementų, nei rodo šis skaičius. </li>\r\n  <li>Jei nurodyta sąlyga, pateikiami visi elementai, kurie iš pradžių atitinka sąlygą. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sąraše rasti pradines reikšmes {3, 4, 5, -1, 7, 8, 2}, kurios yra didesnės už 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Pateikiama Teisinga, jei visos sąrašo reikšmės patenkina sąlygos funkciją.",
        "Documentation.LongDescription": "Pateikiama <code>true</code>, jei sąlygos funkciją, <code>condition</code>, patenkina visos sąrašo reikšmės <code>list</code>, kitu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar visos sąrašo reikšmės {11, 12, 13} yra didesnės nei 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar visos sąrašo reikšmės {1, 2, 3} yra didesnės nei 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Pateikiama Teisinga, jei bet kuri reikšmė patenkina sąlygos funkciją.",
        "Documentation.LongDescription": "Pateikiama <code>true</code>, jei sąlygos funkciją, <code>condition</code>, patenkina visos sąrašo reikšmės <code>list</code>, kitu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar visos sąrašo reikšmės {9, 10, 11} didesnės nei 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar visos sąrašo reikšmės {1, 2, 3} didesnės nei 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Pateikiama (-os) didžiausia (-ios) sąrašo reikšmė (-ės). Turi būti nurodytas pateiktinų reikšmių skaičius arba filtravimo sąlyga.",
        "Documentation.LongDescription": "Pateikiamos didžiausios sąrašo reikšmės (<code>list</code>).\r\n    Kai eilutės surikiuojamos, gali būti nurodyti pasirinktiniai parametrai, skirti rezultatui toliau filtruoti. Pasirinktinis parametras <code>countOrCondition</code> nurodo pateiktinų reikšmių skaičių arba filtravimo sąlygą. Pasirenkamas parametras <code>comparisonCriteria</code> nurodo, kaip palyginti sąrašo reikšmes.\r\n <ul>\r\n        <li> <code>list</code>: reikšmių sąrašas.</li>\r\n        <li> <code>countOrCondition</code>:  jei nurodytas skaičius, didėjimo tvarka pateikiamas sąrašas, kurį sudaro iki <code>countOrCondition</code> elementų. Jei nurodyta sąlyga, pateikiamas sąrašas elementų, kurie iš pradžių atitiko sąlygą. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Pasirenkama]</i> Pasirenkama <code>comparisonCriteria</code> reikšmė gali būti nurodyta norint nustatyti, kaip palyginti sąrašo elementus. Jei šis parametras neapibrėžtas, naudojama numatytoji lyginimo funkcija.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Pateikiama (-os) mažiausia (-ios) sąrašo reikšmė (-ės). Gali būti nurodomas pateiktinų reikšmių skaičius arba filtravimo sąlyga.",
        "Documentation.LongDescription": "Pateikiamos mažiausios sąrašo reikšmės (<code>list</code>).\r\n    Parametras <code>countOrCondition</code> nurodo pateiktinų reikšmių skaičių arba filtravimo sąlygą. Pasirenkamas parametras <code>comparisonCriteria</code> nurodo, kaip palyginti sąrašo reikšmes.\r\n <ul>\r\n        <li> <code>list</code>: reikšmių sąrašas.</li>\r\n        <li> <code>countOrCondition</code>:  jei nurodytas skaičius, didėjimo tvarka pateikiamas sąrašas, kurį sudaro iki <code>countOrCondition</code> elementų. Jei nurodyta sąlyga, pateikiamas sąrašas elementų, kurie iš pradžių atitiko sąlygą. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. Jei šis parametras neapibrėžtas, pateikiama viena mažiausia sąrašo reikšmė.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Pasirenkama]</i> Pasirenkama <code>comparisonCriteria</code> reikšmė gali būti nurodyta norint nustatyti, kaip palyginti sąrašo elementus. Jei šis parametras neapibrėžtas, naudojama numatytoji lyginimo funkcija.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite 5 mažiausias reikšmes sąraše <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Pateikiamas sąrašas skaičių su pradine reikšme, skaičiumi ir pasirenkama papildymo reikšme.",
        "Documentation.LongDescription": "Pateikiamas sąrašas skaičių su pradine reikšme, skaičiumi ir pasirenkama papildymo reikšme. Numatytoji papildymo reikšmė yra 1.\r\n<ul>\r\n   <li><code>start</code>: pradinė reikšmė sąraše.</li>\r\n   <li><code>count</code>: kurtinų reikšmių skaičius.</li>\r\n   <li><code>increment</code>: <i>[Optional]</i> Reikšmė, pagal kurią papildoma. Jei praleistos reikšmės papildomos 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sugeneruokite 10 skaičių iš eilės sąrašą, pradėdami nuo 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Sugeneruokite 10 skaičių sąrašą, pradėdami nuo 1 ir kiekvienam paskesniam skaičiui naudodami papildymą 2.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Pateikia vieną arba daugiau imties procentilių, atitinkančių nurodytas tikimybes.",
        "Documentation.LongDescription": "Pateikia vieną arba daugiau <code>list</code> sąrašo imties procentilių. Jei reikšmė <code>percentiles</code> yra skaičius nuo 0,0 iki 1,0, ji bus laikoma procentiliu, o rezultatas bus\r\n    viena reikšmė, atitinkanti šią tikimybę. Jei reikšmė <code>percentiles</code> yra skaičių, kurių reikšmės yra nuo 0,0 iki 1,0, sąrašas, rezultatas bus procentilių,\r\n    atitinkančių įvesties tikimybę, sąrašas. Parinktį PercentileMode <code>options</code> gali naudoti patyrę vartotojai, norėdami pasirinkti konkretesnę įtraukimo metodą, bet jos nerekomenduojama naudoti daugeliu naudojimo atvejų.\r\n    Iš anksto nustatyti simboliai <code>PercentileMode.ExcelInc</code> ir <code>PercentileMode.ExcelExc</code> atitinka įtraukimo metodus, kuriuos naudoja „Excel“ funkcijos\r\n    <code>PERCENTILE.INC</code> ir <code>PERCENTILE.EXC</code>. Numatytasis veikimo būdas atitinka <code>PercentileMode.ExcelInc</code>. Simboliai\r\n    <code>PercentileMode.SqlCont</code> ir <code>PercentileMode.SqlDisc</code> atitinkamai sutampa su „SQL Server“ <code>PERCENTILE_CONT</code> ir\r\n    <code>PERCENTILE_DISC</code> veikimo būdu.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite pirmąjį sąrašo <code>{5, 3, 1, 7, 9}</code> kvartilį.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Raskite sąrašo <code> {5, 3, 1, 7, 9} </code> kvartilius naudodami įtraukimo metodą, atitinkantį „Excel“ <code>PERCENTILE.EXC</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Pateikia sąrašo reikšmės poslinkį (-ius).",
        "Documentation.LongDescription": "Pateikiamas poslinkis, kuriuo reikšmė <code>value</code> rodoma sąraše <code>list</code>. Jei reikšmė nerodoma, pateikiama -1.\r\n    Galima nurodyti pasirenkamą atvejo parametrą <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: maksimalus skaičius atvejų, kurie bus pateikiami.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sąraše {1, 2, 3} raskite padėtį, kurioje rodoma reikšmė 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Pateikia pirmąjį sąrašo reikšmės poslinkį.",
        "Documentation.LongDescription": "Pateikia sąrašo <code>values</code> reikšmės pirmojo atvejo poslinkį sąraše <code>list</code>. Jei atvejų nerandama, pateikiama -1.\r\n    Galima nurodyti pasirenkamą atvejo parametrą <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: maksimalus galimų pateikti atvejų skaičius.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Sąraše {1, 2, 3} raskite pirmąją padėtį, kurioje rodoma reikšmė 2 arba 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Pateikiamas sąrašo poaibis pradedant nuo poslinkio.",
        "Documentation.LongDescription": "Pateikiamas sąrašo poaibis pradedant nuo poslinkio <code>list</code>. Pasirenkamas parametras, <code>offset</code>, nustato maksimalų elementų skaičių poaibyje.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite poaibį pradedant nuo sąrašo skaičių nuo 1 iki 10 poslinkio 6.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Raskite poaibį, kurio ilgis yra 2, nuo poslinkio 6, nuo sąrašo skaičių nuo 1 iki 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Iš list1 pašalinami sąraše esantys elementai.",
        "Documentation.LongDescription": "Pašalinami visi nurodytų reikšmių, esančių <code>list2</code>, atvejai iš <code>list1</code>. Jei <code>list2</code> reikšmių nėra <code>list1</code>, pateikiamas pradinis sąrašas.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite sąrašo {2, 4, 6} elementus iš sąrašo {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Pašalinami visi įvesties reikšmių atvejai.",
        "Documentation.LongDescription": "Pašalinami visi nurodytų <code>list2</code> reikšmių atvejai iš sąrašo <code>list1</code>. Jei <code>list2</code> reikšmių nėra <code>list1</code>, pateikiamas pradinis sąrašas.\r\n    Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kurkite sąrašą iš {1, 2, 3, 4, 5, 5} be {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Pašalinamas reikšmių skaičius, pradedant nuo nurodytos padėties.",
        "Documentation.LongDescription": "Pašalinamos <code>count</code> reikšmės, esančios <code>list</code>, pradedant nuo nurodytos padėties, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite 3 reikšmes, esančias sąraše {1, 2, 3, 4, -6, -2, -1, 5}, pradėdami nuo indekso 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Pateikiamas sąrašas, kuriame nurodytas pradinio sąrašo pasikartojimų skaičius.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kuriame nurodytas pradinio sąrašo <code>list</code> pasikartojimų <code>count</code> skaičius.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą, kuriame {1, 2} pasikartoja 3 kartus.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Taikomas kiekvienas { old, new } pakeitimas.",
        "Documentation.LongDescription": "Atliekami nurodyti sąrašo <code>list</code> pakeitimai. Pakeitimo operaciją <code>replacements</code> sudaro dviejų reikšmių – senosios ir naujosios – sąrašas.\r\n    Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą iš {1, 2, 3, 4, 5} pakeisdami reikšmę 5 reikšme -5, o reikšmę 1 – reikšme -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Pateikiamas sąlygą atitinkančių reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas reikšmių iš sąrašo <code>list</code>, atitinkančių pasirinkimo sąlygą <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sąraše {1, -3, 4, 9, -2} raskite reikšmes, kurios yra didesnės už 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Nurodytas sąrašas išskaidomas į sąrašų sąrašą naudojant nurodytą puslapio dydį.",
        "Documentation.LongDescription": "<code>list</code> išskaidomas į sąrašų sąrašą, kuriame pirmasis išvesties sąrašo elementas yra sąrašas su pirmaisiais <code>pageSize</code> element. iš \r\n    šaltinio sąrašo, antrasis išvesties sąrašo elementas yra sąrašas su kitais <code>pageSize</code> element. iš šaltinio sąrašo ir t. t.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Pateikiamas naujas sąrašas reikšmių, apskaičiuotų iš šio sąrašo.",
        "Documentation.LongDescription": "Pateikiamas naujas sąrašas reikšmių, taikant transformavimo funkciją <code>transform</code> sąrašui <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pridėkite 1 prie kiekvienos reikšmės sąraše {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Pateikiamas dviejų skaičių dalybos arktangentas.",
        "Documentation.LongDescription": "Pateikiamas dviejų skaičių, <code>y</code> ir <code>x</code>, dalybos arktangentas. Dalyba bus sudaryta kaip <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Pateikiamas bitų „And“ operacijos tarp dviejų įvesčių vykdymo rezultatas.",
        "Documentation.LongDescription": "Pateikiamas bitų „And“ operacijos tarp <code>number1</code> ir <code>number2</code> vykdymo rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Pateikiamas bitų „Or“ operacijos tarp dviejų įvesčių vykdymo rezultatas.",
        "Documentation.LongDescription": "Pateikiamas bitų „Or“ operacijos tarp <code>number1</code> ir <code>number2</code> vykdymo rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Nustatyti bitai perstumiami į kairę.",
        "Documentation.LongDescription": "Pateikiamas bitų perstūmimo į kairę vykdymo <code>number1</code> pagal nurodytą bitų <code>number2</code> skaičių rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Nustatyti bitai perstumiami į dešinę.",
        "Documentation.LongDescription": "Pateikiamas bitų perstūmimo į dešinę vykdymo <code>number1</code> pagal nurodytą bitų <code>number2</code> skaičių rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Pateikiamas bitų „XOR“ („Exclusive-OR“) operacijos tarp dviejų įvesčių vykdymo rezultatas.",
        "Documentation.LongDescription": "Pateikiamas bitų „XOR“ („Exclusive-OR“) operacijos tarp <code>number1</code> ir <code>number2</code> vykdymo rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Pateikiamas unikalių derinių skaičius.",
        "Documentation.LongDescription": "Pateikiamas unikalių derinių iš elementų sąrašo skaičius, <code>setSize</code> su nurodytu derinio dydžiu, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: sąrašo elementų skaičius.</li>\r\n    <li><code>combinationSize</code>: elementų skaičius kiekviename derinyje.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičių derinių iš 5 elementų, kai kiekvienas derinys yra 3-jų grupė.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Padalijami du skaičiai ir pateikiama sveikoji rezultato dalis.",
        "Documentation.LongDescription": "Pateikiama sveikoji dalis rezultato, gauto padalijus skaičių, <code>number1</code>, iš kito skaičiaus, <code>number2</code>.\r\n    Jei <code>number1</code> arba <code>number2</code> neapibrėžta, <code>Number.IntegerDivide</code> pateikia neapibrėžtą reikšmę.\r\n      <ul>\r\n        <li><code>number1</code>: dalinys.</li>\r\n        <li><code>number2</code>: daliklis.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Padalykite 6 iš 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Padalykite 8,3 iš 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Sveikasis skaičius dalija du skaičius ir pateikia liekaną.",
        "Documentation.LongDescription": "Pateikiama liekana, gauta sveikajam skaičiui padalijus <code>number</code> iš <code>divisor</code>.\r\n    Jei <code>number</code> arba <code>divisor</code> neapibrėžta, <code>Number.Mod</code> pateikia neapibrėžtą reikšmę.\r\n      <ul>\r\n        <li><code>number</code>: dalinys.</li>\r\n        <li><code>divisor</code>: daliklis.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite liekaną, kai dalijate 5 iš 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Pateikiamas perstatų skaičius.",
        "Documentation.LongDescription": "Pateikiamas skaičius perstatų, kurias galima sugeneruoti iš elementų skaičiaus, <code>setSize</code>, su nurodytu perstatos dydžiu, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičių perstatų iš 5 elementų grupėse iš 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Pakelia skaičių nurodytu laipsniu.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> pakėlimo <code>power</code> laipsniu rezultatas.\r\n    Jei <code>number</code> arba <code>power</code> neapibrėžta, <code>Number.Power</code> pateikia neapibrėžtą reikšmę.\r\n      <ul>\r\n        <li><code>number</code>: pagrindas.</li>\r\n        <li><code>power</code>: laipsnio rodiklis.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičiaus 5, pakelto 3 laipsniu, (5 kubu) reikšmę.",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Pateikiamas atsitiktinis skaičius iš dviejų skaičių.",
        "Documentation.LongDescription": "Pateikiamas atsitiktinis skaičius iš <code>bottom</code> ir <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Gaukite atsitiktinį skaičių nuo 1 iki 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Pateikiama nurodyto lauko reikšmė įraše.",
        "Documentation.LongDescription": "Pateikiama nurodyto <code>field</code>, esančio <code>record</code>, reikšmė. Jei laukas nerastas, pateikiama išimtis.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite lauko „CustomerID“ reikšmę įraše.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Pateikiama nurodyto lauko įraše reikšmė arba numatytoji reikšmė, jei laukas nerastas.",
        "Documentation.LongDescription": "Pateikiama nurodyto lauko <code>field</code> įraše <code>record</code> reikšmė. Jei laukas nerastas, pateikiama pasirenkama <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite lauko „Phone“ reikšmę įraše arba pateikiama NULL, jei jos nėra.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Raskite lauko „Phone“ reikšmę įraše arba pateikiama numatytoji reikšmė, jei jos nėra.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Pateikiamas įrašas su lauko reikšmių sąrašu ir laukų rinkiniu.",
        "Documentation.LongDescription": "Pateikiamas įrašas su lauko reikšmių <code>list</code> ir laukų rinkiniu.  <code>fields</code> galima nurodyti naudojant tekstinių reikšmių sąrašą arba įrašo tipą.  Jei laukai neunikalūs, pateikiama klaida.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite įrašą iš lauko reikšmių sąrašo ir lauko pavadinimų sąrašą.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Sukurkite įrašą iš lauko reikšmių sąrašo ir įrašo tipą.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Nurodoma, ar įraše yra nurodyti laukai.",
        "Documentation.LongDescription": "Nurodoma, ar įraše <code>record</code> yra laukai, nurodyti <code>fields</code>, pateikiant loginę reikšmę (teisinga arba klaidinga).\r\n    Naudojant sąrašą, galima nurodyti kelias laukų reikšmes.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar įraše yra laukas Kliento ID.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Patikrinkite, ar įraše yra laukai „CustomerID“ ir „Address“.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Pašalina nurodytą (-us) lauką (-us) iš įvesties įrašo.",
        "Documentation.LongDescription": "Pateikiamas įrašas, pašalinantis visus sąraše <code>fields</code> nurodytus laukus iš įvesties <code>record</code>. Jei nurodyto lauko nėra, pateikiama išimtis.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite lauką „Price“ iš įrašo.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Pašalinkite laukus „Price“ ir „Item“ iš įrašo.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Taikomas pervardijimas (-ai) iš sąrašo formoje { old, new }.",
        "Documentation.LongDescription": "Pateikiamas įrašas po laukų pervardijimo įvestyje <code>record</code> naujais laukų pavadinimais, nurodytais sąraše <code>renames</code>. Keliems pervardijimams galima naudoti įdėtąjį sąrašą ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pervardykite lauką „UnitPrice“ į „Price“ įraše.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Pervardykite laukus „UnitPrice“ į „Price“ ir „OrderNum“ į „OrderID“ įraše.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Pertvarkomas (-i) nurodytas (-i) laukas (-ai) pagal naująją tvarką.",
        "Documentation.LongDescription": "Pateikiamas įrašas po laukų pertvarkymo <code>record</code> naudojant laukų išdėstymo tvarką, nurodytą sąraše <code>fieldOrder</code>. Pateikiamos laukų reikšmės, o laukai, nenurodyti <code>fieldOrder</code>, paliekami jų pradinėje padėtyje.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pertvarkykite kai kuriuos laukus įraše.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Pateikiamas įrašas, kuriame yra tik nurodyti laukai.",
        "Documentation.LongDescription": "Pateikiamas įrašas, kuriame yra tik laukai, nurodyti sąraše <code>fields</code> iš įvesties <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pasirinkite laukus „Item“ ir „Price“ įraše.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Pateikiamas įrašas pritaikius nurodytas transformacijas.",
        "Documentation.LongDescription": "Pateikiamas įrašas pritaikius sąraše <code>transformOperations</code> nurodytas transformacijas <code>record</code>.\r\n    Nurodytu laiku gali būti transformuojamas vienas ar daugiau laukų.\r\n      <div>Jei transformuojamas vienas laukas, laukiama, kad <code>transformOperations</code> bus sąrašas su dviem elementais. Pirmasis elementas, esantis <code>transformOperations</code>, nurodo lauko pavadinimą, o antrasis elementas, esantis <code>transformOperations</code>, nurodo funkciją, kuri bus naudojama transformuojant. Pavyzdžiui, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Jei transformuojami keli laukai, laukiama, kad <code>transformOperations</code> bus sąrašų sąrašas, kuriame kiekvienas vidinis sąrašas yra lauko pavadinimo ir transformacijos operacijos pora. Pavyzdžiui, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite lauką Kaina į skaičių.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Konvertuokite laukus UžsakymoID ir Kaina į skaičius.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal perėjimą iš vieno simbolių tipo į kitą. {0} Ir {1} parametrai gali būti simbolių sąrašas arba funkcija, kuri ima simbolį ir pateikia reikšmę „true“ / „false“.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal perėjimą iš vieno simbolių tipo į kitą. <code>before</code> Ir <code>after</code> parametrai gali būti simbolių sąrašas arba funkcija, kuri ima simbolį ir pateikia reikšmę „true“ / „false“.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį, kai po didžiosios arba mažosios raidės yra skaitmuo.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Pateikta SQL užklausa konvertuojama į M kodą. Ši funkcija skirta tik vidiniam naudojimui.",
        "Documentation.LongDescription": "Pateiktą <code>sql</code> užklausą konvertuojama į M kodą naudojant turimus identifikatorius, kuriuos apibrėžia <code>environment</code>. Ši funkcija skirta tik vidiniam naudojimui.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Pateikiamas nurodytas duomenų iš lentelės stulpelis kaip sąrašas.",
        "Documentation.LongDescription": "Pateikiamas stulpelis <code>column</code> nurodytų duomenų iš lentelės <code>table</code> kaip sąrašas.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamos reikšmės iš lentelės stulpelio [Name].",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Pateikiamas stulpelių, atitinkančių nurodytus tipus, pavadinimų sąrašas.",
        "Documentation.LongDescription": "Pateikiamas lentelės <code>table</code> stulpelių, atitinkančių <code>listOfTypes</code> nurodytus tipus, pavadinimų sąrašas.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikia lentelės stulpelių, kurių tipas Number.Type, pavadinimus.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Nurodoma, ar nurodytas įrašas lentelėje rodomas kaip eilutė.",
        "Documentation.LongDescription": "Nurodoma, ar nurodytas įrašas <code>row</code> lentelėje <code>table</code> rodomas kaip eilutė.\r\n    Galima nurodyti pasirenkamą parametrą <code>equationCriteria</code>, norint valdyti lentelės eilučių palyginimą.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelėje yra eilutė.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar lentelėje yra eilutė.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nustatykite, ar lentelėje yra eilutė, lygindami tik stulpelį [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Nurodoma, ar visi nurodyti įrašai lentelėje rodomi kaip eilutė.",
        "Documentation.LongDescription": "Nurodoma, ar visi nurodyti įrašai įrašų sąraše <code>rows</code> rodomi kaip eilutės <code>table</code>.\r\n    Galima nurodyti pasirenkamą parametrą <code>equationCriteria</code>, norint valdyti lentelės eilučių palyginimą.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelėje yra visos eilutės, lygindami tik stulpelį [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar lentelėje yra visos eilutės.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Nurodoma, ar kurie nors nurodyti įrašai lentelėje rodomi kaip eilutė.",
        "Documentation.LongDescription": "Nurodoma, ar kurie nors nurodyti įrašai įrašų sąraše <code>rows</code> rodomi kaip eilutės <code>table</code>.\r\n    Galima nurodyti pasirenkamą parametrą <code>equationCriteria</code>, norint valdyti lentelės eilučių palyginimą.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelėje <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> yra eilutės <code>[a = 1, b = 2]</code> arba <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar lentelėje <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> yra eilutės <code>[a = 1, b = 3]</code> arba <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nustatykite, ar lentelėje <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> yra eilutės <code>[a = 1, b = 3]</code> arba <code>[a = 3, b = 5]</code>, lygindami tik stulpelį [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Nurodo, ar lentelėje yra nurodytas (-i) stulpelis (-iai).",
        "Documentation.LongDescription": "Nurodo, ar <code>table</code> yra nurodytas (-i) stulpelis (-iai), <code>columns</code>. Pateikiama <code>true</code>, jei lentelėje yra stulpelis (-iai); priešingu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelėje yra stulpelis [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Raskite, ar lentelėje yra stulpelis [Name] ir [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Nurodoma, ar visos eilutės lentelėje atitinka nurodytą sąlygą.",
        "Documentation.LongDescription": "Nurodoma, ar visos <code>table</code> eilutės atitinka nurodytą <code>condition</code>. Pateikiama <code>true</code>, jei visos eilutės atitinka; priešingu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar visos stulpelio [a] eilučių reikšmės lentelėje yra lyginės.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar visos eilučių reikšmės lentelėje <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> yra [a = 1, b = 2].",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Nurodoma, ar kurios nors eilutės lentelėje atitinka nurodytą sąlygą.",
        "Documentation.LongDescription": "Nurodoma, ar kurios nors <code>table</code> eilutės atitinka nurodytą <code>condition</code>. Pateikiama <code>true</code>, jei kurios nors eilutės atitinka; priešingu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar kurios nors stulpelio [a] eilučių reikšmės lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> yra lyginės.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nustatykite, ar kurios nors eilučių reikšmės lentelėje <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> yra [a = 1, b = 2].",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Pateikiama didžiausia eilutė arba numatytoji reikšmė naudojant nurodytus kriterijus.",
        "Documentation.LongDescription": "Pateikiama didžiausia <code>table</code> eilutė pagal nurodytus <code>comparisonCriteria</code>. Jei lentelė tuščia, pateikiama pasirenkama <code>default</code> reikšmė. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite didžiausią reikšmę turinčią stulpelio [a] eilutę lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Raskite didžiausią reikšmę turinčią stulpelio [a] eilutę lentelėje <code>({})</code>. Jei tuščia, pateikiama -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Pateikiama mažiausia eilutė arba numatytoji reikšmė naudojant nurodytus kriterijus.",
        "Documentation.LongDescription": "Pateikiama mažiausia <code>table</code> eilutė pagal nurodytus <code>comparisonCriteria</code>. Jei lentelė tuščia, pateikiama pasirenkama <code>default</code> reikšmė.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite mažiausią reikšmę turinčią stulpelio [a] eilutę lentelėje.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Raskite mažiausią reikšmę turinčią stulpelio [a] eilutę lentelėje. Jei tuščia, pateikiama -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Pateikiama eilutės padėtis arba padėtys lentelėje.",
        "Documentation.LongDescription": "Pateikiama pirmojo <code>row</code> atvejo eilutės padėtis nurodytoje <code>table</code>. Jei atvejų nerandama, pateikiama -1.\r\n    <ul>\r\n       <li><code>table</code>: įvesties lentelė.</li>\r\n       <li><code>row</code>: lentelės eilutė, kurios padėtį reikia rasti.</li>\r\n       <li><code>occurrence</code>: <i>[pasirenkama]</i> nurodoma, kuriuos eilutės atvejus pateikti.</li>\r\n       <li><code>equationCriteria</code>: <i>[pasirenkama]</i> valdomas lentelės eilučių palyginimas.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Raskite pirmojo [a = 2, b = 4] atvejo padėtį lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Raskite antrojo [a = 2, b = 4] atvejo padėtį lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Raskite visų [a = 2, b = 4] atvejų padėtį lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Pateikiama bet kurios iš nurodytų eilučių padėtis arba padėtys lentelėje.",
        "Documentation.LongDescription": "Pateikiama (-os) pirmojo <code>rows</code> sąrašo atvejo eilutės (-ių) padėtis (-ys) iš <code>table</code>. Jei atvejų nerandama, pateikiama -1.\r\n    <ul>\r\n    <li><code>table</code>: įvesties lentelė.</li>\r\n       <li><code>rows</code>: sąrašas lentelės eilučių, kurių padėtis norima rasti.</li>\r\n       <li><code>occurrence</code>: <i>[pasirenkama]</i> nurodoma, kuriuos eilutės atvejus pateikti.</li>\r\n       <li><code>equationCriteria</code>: <i>[pasirenkama]</i> valdomas lentelės eilučių palyginimas.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Raskite pirmojo [a = 2, b = 4] arba [a = 6, b = 8] atvejo padėtį lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Raskite visų [a = 2, b = 4] arba [a = 6, b = 8] atvejų padėtį lentelėje <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Nurodyta lentelė išskaidoma į lentelių sąrašą naudojant nurodytą puslapio dydį.",
        "Documentation.LongDescription": "<code>table</code> išskaidomas į lentelių sąrašą, kuriame pirmasis sąrašo elementas yra lentelė su pirmosiomis <code>pageSize</code> eil. iš\r\n    šaltinio lentelės, antrasis sąrašo elementas yra lentelė su kitomis <code>pageSize</code> eil. iš šaltinio sąrašo ir t. t.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Penkių įrašų lentelė suskaidoma į lenteles, kuriose yra po du įrašus.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Pateikiamas sąrašas, kuriame yra pirmosios nurodytos eilutės pagal eilę ir likusios eilutės.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kuriame yra dvi lentelės: lentelė, kurioje yra <code>table</code> pirmosios N eilutės (kaip nurodo <code>count</code>), ir lentelė su likusiomis <code>table</code> eilutėmis.\r\n\r\nJei gauto sąrašo lentelės yra išvardytos tik vieną kartą ir paeiliui, funkcija išvardys <code>table</code> tik vieną kartą.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamos pirmosios dvi lentelės eilutės ir likusios lentelės eilutės.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transformuojamos lentelės eilutės naudojant nurodytą transformavimo funkciją.",
        "Documentation.LongDescription": "Sukuriamas <code>sąrašas</code> taikant <code>transform</code> operaciją kiekvienai eilutei <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformuokite lentelės eilutes į skaičių sąrašą.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformuokite skaitinės lentelės eilutes į tekstinius įrašus.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Pateikiama <code>text</code> dalis po nurodyto <code>delimiter</code>.\r\n    Pasirenkamas skaitinis <code>index</code> parodo, į kurį <code>delimiter</code> atvejį reikia atsižvelgti.\r\n    Pasirenkamas sąrašas <code>index</code> parodo, į kurį <code>delimiter</code> atvejį reikia atsižvelgti ir ar indeksavimą reikia atlikti nuo įvesties pradžios ar galo.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Gauti 111-222-333 dalį po (pirmojo) brūkšnelio.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Gauti 111-222-333 dalį po antrojo brūkšnelio.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Gauti 111-222-333 dalį po antrojo brūkšnelio nuo galo.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Pateikiamas simbolis nurodytoje padėtyje.",
        "Documentation.LongDescription": "Pateikiamas simbolis tekstinėje reikšmėje <code>text</code>, padėtyje <code>index</code>. Pirmasis teksto simbolis yra 0 padėtyje.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Raskite simbolį 4 padėtyje eilutėje „Hello, World“.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Pateikiama <code>text</code> dalis prieš nurodytą <code>delimiter</code>.\r\n    Pasirenkamas skaitinis <code>index</code> parodo, į kurį <code>delimiter</code> atvejį reikia atsižvelgti.\r\n    Pasirenkamas sąrašas <code>index</code> parodo, į kurį <code>delimiter</code> atvejį reikia atsižvelgti ir ar indeksavimą reikia atlikti nuo įvesties pradžios ar galo.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Gauti 111-222-333 dalį prieš (pirmąjį) brūkšnelį.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Gauti 111-222-333 dalį prieš antrąjį brūkšnelį.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Gauti 111-222-333 dalį prieš antrąjį brūkšnelį nuo galo.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Nurodoma, ar tekste yra dalinė eilutė.",
        "Documentation.LongDescription": "Aptinka, ar <code>text</code> yra reikšmė <code>substring</code>. Jei reikšmė randama, pateikiama reikšmė True. Ši funkcija nepalaiko pakaitos simbolių arba paprastųjų išraiškų.\r\n      <br>\r\n      <br>\r\n      Pasirenkamas argumentas <code>comparer</code> gali būti naudojamas norint pateikti palyginimus, kuriuose neskiriamos didžiosios ir mažosios raidės, arba atsižvelgiama į kultūrą ir lokalę.\r\n      Formulių kalba pateiktos toliau nurodytos įtaisytosios lyginimo funkcijos:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: : naudojama atliekant palyginimą eilės tvarka, kai skiriamos didžiosios ir mažosios raidės</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama atliekant palyginimą eilės tvarka, neskiriant didžiųjų ir mažųjų raidžių</li>\r\n        <li> <code>Comparer.FromCulture</code>: naudojama atliekantį kultūrą reaguojantį palyginimą</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar tekste „Hello World“ yra tekstas „Hello“.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar tekste „Hello World“ yra tekstas „hello“.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Naudodami lyginimo priemonę, neskiriančią didžiųjų ir mažųjų raidžių, sužinokite, ar tekste „Hello World“ yra žodis „hello“.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Pateikiami paskutiniai teksto simboliai.",
        "Documentation.LongDescription": "Pateikiama <code>text</code> reikšmė, kuri yra paskut. <code>count</code> <code>text</code> reikšmės <code>text</code> simbol.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 5 paskutinius teksto „Hello, World“ simbolius.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Nurodoma, ar tekstas baigiasi nurodyta reikšme.",
        "Documentation.LongDescription": "Nurodoma, ar nurodytas tekstas <code>text</code> baigiasi nurodyta reikšme <code>substring</code>. Didžiosios ir mažosios raidės skiriamos.\r\n\r\n      <div>\r\n        <code>comparer</code> yra <code>lyginimo funkcija</code>, naudojama palyginimui kontroliuoti. Naudojant lyginimo funkcijas galima pateikti palyginimus, kuriuose neatsižvelgiama į didžiųjų ir mažųjų raidžių skyrimą arba atsižvelgiama į kultūrą ir lokalę.\r\n      </div>\r\n      <div>\r\n        Formulių kalboje galima naudoti toliau nurodytas įtaisytąsias lyginimo funkcijas:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: naudojama siekiant atlikti tikslų eiliškumo palyginimą</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama siekiant atlikti tikslų eiliškumo palyginimą neatsižvelgiant į didžiųjų ir mažųjų raidžių skyrimą</li>\r\n        <li> <code>Comparer.FromCulture</code>: naudojama siekiant atlikti palyginimą atsižvelgiant į kultūrą</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar „Hello, World“ baigiasi tekstu „world“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Patikrinkite, ar „Hello, World“ baigiasi tekstu „World“.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Pateikiamas suformatuotas tekstas pagal formatavimo eilutę ir argumentus.",
        "Documentation.LongDescription": "Pateikiamas suformatuotas tekstas, sukuriamas taikant <code>arguments</code> iš sąrašo arba įrašo į formato eilutę <code>formatString</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Suformatuokite skaičių sąrašą.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Suformatuokite skirtingus duomenų tipus pagal įrašą, atsižvelgdami į Jungtinių Amerikos Valstijų anglišką kultūrą.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Pateikiama nurodyto ilgio neviršijanti dalinė eilutė.",
        "Documentation.LongDescription": "Pateikiami simboliai (<code>count</code>) arba reikšmė iki <code>text</code> pabaigos, kai poslinkis <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Raskite dalinę eilutę iš teksto „Hello World“, prasidedančią nuo 6 indekso ir apimančią 5 simbolius.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Raskite dalinę eilutę iš teksto „Hello World“ nuo 6 indekso iki pabaigos.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Pateikiamas nurodyto ilgio tekstas užpildant nurodyto teksto pabaigą.",
        "Documentation.LongDescription": "Pateikiama <code>text</code> reikšmė, užpildyta iki ilgio <code>count</code>, įterpiant tarpus tekstinės reikšmės <code>text</code> pabaigoje.\r\n    Norint nurodyti užpildymui naudojamą simbolį, galima naudoti pasirenkamą parametrą <code>character</code>. Numatytasis užpildymo simbolis yra tarpas.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Užpildykite tekstinės reikšmės pabaigą, kad ji būtų 10 simbolių ilgio.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Užpildykite tekstinės reikšmės pabaigą simboliu „|“, kad ji būtų 10 simbolių ilgio.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Pateikiamas nurodyto ilgio tekstas užpildant nurodyto teksto pradžią.",
        "Documentation.LongDescription": "Pateikiama <code>text</code> reikšmė, užpildyta iki ilgio <code>count</code>, įterpiant tarpus tekstinės reikšmės <code>text</code> pradžioje.\r\n    Norint nurodyti užpildymui naudojamą simbolį, galima naudoti pasirenkamą parametrą <code>character</code>. Numatytasis užpildymo simbolis yra tarpas.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Užpildykite tekstinės reikšmės pradžią, kad ji būtų 10 simbolių ilgio.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Užpildykite tekstinės reikšmės pradžią simboliu „|“, kad ji būtų 10 simbolių ilgio.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Pateikiama pirmoji reikšmės padėtis (jei nerasta, pateikiama -1).",
        "Documentation.LongDescription": "Pateikiama nurodyto tekstinės reikšmės <code>substring</code> atvejo vieta, rasta <code>text</code>.\r\n    Galima naudoti pasirenkamą parametrą <code>occurrence</code> siekiant nurodyti, kurią atvejo vietą pateikti (pagal numatytuosius parametrus pateikiamas pirmas atvejis).\r\n    Jei <code>substring</code> nebuvo rasta, pateikiama -1.\r\n\r\n      <div>\r\n        <code>comparer</code> yra <code>lyginimo funkcija</code>, naudojama palyginimui kontroliuoti. Naudojant lyginimo funkcijas galima pateikti palyginimus, kuriuose neatsižvelgiama į didžiųjų ir mažųjų raidžių skyrimą arba atsižvelgiama į kultūrą ir lokalę.\r\n      </div>\r\n      <div>\r\n        Formulių kalboje galima naudoti toliau nurodytas įtaisytąsias lyginimo funkcijas:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: naudojama siekiant atlikti tikslų eiliškumo palyginimą</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama siekiant atlikti tikslų eiliškumo palyginimą neatsižvelgiant į didžiųjų ir mažųjų raidžių skyrimą</li>\r\n        <li> <code>Comparer.FromCulture</code>: naudojama siekiant atlikti palyginimą atsižvelgiant į kultūrą</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Gaukite pirmojo „World“ atvejo tekste „Hello, World! Hello, World!“ padėtį.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Gaukite paskutinio žodžio „World“ atvejo tekste „Hello, World! Hello, World!“ vietą.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Pateikiama pirmoji bet kurio nurodyto simbolio padėtis tekstinėje reikšmėje (jei nerasta, pateikiama -1).",
        "Documentation.LongDescription": "Pateikia bet kurio sąrašo <code>characters</code> simbolio pirmąją padėtį, rastą <code>text</code>.\n    Norint nurodyti, kurią atvejo padėtį pateikti, galima naudoti pasirenkamą parametrą <code>occurrence</code>.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Raskite „S“ arba „P“ pirmąją padėtį tekste „Sveikas, pasauli!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Raskite visų „S“ arba „P“ padėtis tekste „Sveikas, pasauli!“.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Pateikiama poslinkyje rasta dalinė eilutė.",
        "Documentation.LongDescription": "Pateikiama rasta dalinė eilutė iš teksto <code>text</code>, kai poslinkis <code>offset</code>.\r\n    Norint nurodyti, kiek simbolių pateikti, galima įtraukti pasirenkamą parametrą <code>count</code>. Jei nepakanka simbolių, pateikiama klaida.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Raskite dalinę eilutę iš teksto „Hello World“, pradedant nuo indekso 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Raskite dalinę eilutę iš teksto „Hello World Hello“, pradedant nuo indekso 6, besitęsiančią 5 simbolius.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Pašalinami visi nurodyto simbolio ar simbolių sąrašo iš įvesties tekstinės reikšmės atvejai.",
        "Documentation.LongDescription": "Pateikiama tekstinės reikšmės <code>text</code> kopija su pašalintais visais simboliais nuo <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite simbolius „,“ ir „;“ iš tekstinės reikšmės.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Pašalinamas simbolių skaičius, pradedant nuo nurodyto poslinkio",
        "Documentation.LongDescription": "Pateikiama tekstinės reikšmės <code>text</code> kopija su pašalintais visais simboliais nuo padėties <code>offset</code>.\r\n    Norint nurodyti šalintinų simbolių skaičių, galima naudoti pasirenkamą parametrą <code>count</code>. Numatytoji <code>count</code> reikšmė yra 1. Padėčių reikšmės prasideda nuo 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite 1 simbolį iš tekstinės reikšmės „ABEFC“ 2 padėtyje.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Pašalinkite du simbolius iš tekstinės reikšmės „ABEFC“, pradėdami nuo 2 padėties.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Pateikiama tekstinė reikšmė, sudaryta iš įvesties teksto, kartojamo nurodytą kartų skaičių.",
        "Documentation.LongDescription": "Pateikiama tekstinė reikšmė, sudaryta iš įvesties teksto <code>text</code>, kartojamo <code>count</code> kart.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Kartokite tekstą „a“ penkis kartus.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Kartokite tekstą „helloworld“ tris kartus.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Pažymimi visi nurodyto simbolio ar simbolių sąrašo iš įvesties tekstinės reikšmės atvejai.",
        "Documentation.LongDescription": "Pateikiama tekstinės reikšmės <code>text</code> kopija su pašalintais visais simboliais, kurių nėra <code>selectChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Pažymėkite visus tekstinės reikšmės simbolius nuo a iki z.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Tekstas išskaidomas į tekstinių reikšmių sąrašą, atsižvelgiant į nurodytą skyriklį.",
        "Documentation.LongDescription": "Pateikiamas sąrašas tekstinių reikšmių, gautų išskaidžius tekstinę reikšmę <code>text</code>, atsižvelgiant į nurodytą skyriklį <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą iš „|“ atskirtos tekstinės reikšmės „Name|Address|PhoneNumber“.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Pateikiamas sąrašas tekstinių reikšmių, išskaidytų ties bet kuriais skyriklio simboliais.",
        "Documentation.LongDescription": "Pateikiamas sąrašas tekstinių reikšmių, gautų išskaidžius tekstinę reikšmę <code>text</code>, atsižvelgiant į bet kokį simbolį nurodytame skyriklyje, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą iš tekstinės reikšmės „Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com“.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Pateikiama teksto pradžia.",
        "Documentation.LongDescription": "Pateikiami <code>text</code> pirmieji <code>count</code> simb. kaip tekstinė reikšmė.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 5 pirmuosius teksto „Hello, World“ simbolius.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Nurodoma, ar tekstas prasideda nurodyta reikšme.",
        "Documentation.LongDescription": "Jei teksto reikšmė <code>text</code> pradedama teksto reikšme <code>substring</code>, pateikiama reikšmė True.\r\n      <ul>\r\n       <li><code>text</code>: <i></i><code>tekso</code> reikšmė, kurios reikia ieškoti</li>\r\n        <li><code>substring</code>: <i></i><code>teksto</code> reikšmė, kuri yra dalinė eilutė, kurios reikia ieškoti <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[pasirenkama]</i> <code>lyginimo funkcijos</code> reikšmė, naudojama valdant palyginimą. Pvz., <code>Comparer.OrdinalIgnoreCase</code> galima naudoti atliekant ieškas, kai neskiriamos didžiosios ir mažosios raidės</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> yra <code>lyginimo funkcijos</code> reikšmė, naudojama valdant palyginimą. Lyginimo funkcijas galima naudoti norint pateikti palyginimus, kuriuose neskiriamos didžiosios ir mažosios raidės arba atsižvelgiama į kultūrą ir lokalę.\r\n      </div>\r\n      <div>\r\n        Formulių kalboje pateiktos toliau nurodytos įtaisytosios lyginimo funkcijos:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: naudojama atliekant tikslų palyginimą eilės tvarka</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: naudojama atliekant tikslų palyginimą eilės tvarka, kai neskiriamos didžiosios ir mažosios raidės</li>\r\n        <li> <code>Comparer.FromCulture</code>: naudojama atliekant palyginimą, kai atsižvelgiama į kultūrą</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar tekstas „Hello, World“ prasideda tekstu „hello“.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Patikrinkite, ar tekstas „Hello, World“ prasideda tekstu „Hello“.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Pateikiamas tipas, atitinkantis funkcijas su konkrečiu parametru ir pateikiamo tipo apribojimais.",
        "Documentation.LongDescription": "Sukuriamas <code>function type</code> iš <code>signature</code>, <code>ReturnType</code> ir <code>Parameters</code> įrašų ir <code>min</code>. Funkcijai iškviesti reikia minimalaus skaičiaus argumentų.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Sukuriamas funkcijos tipas, kuris paima skaičiaus parametrą pavadinimu X ir pateikia skaičių.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Pateikiamas tipas, atitinkantis įrašus su konkrečiu laukų apribojimų tipu.",
        "Documentation.LongDescription": "Pateikiamas tipas, atitinkantis įrašus su konkrečiu laukų apribojimų tipu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Dinamiškai generuoti lentelės tipą.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Nustato, ar pirmojo tipo reikšmė visada suderinama su antruoju tipu.",
        "Documentation.LongDescription": "Nustato, ar <code>type1</code> reikšmė visada suderinama su <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar tipo numerio reikšmė visada gali būti traktuojama kaip bet kuris tipas.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar bet kokio tipo reikšmė visada gali būti traktuojama kaip tipo numeris.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Pakeičiami tipo aspektai.",
        "Documentation.LongDescription": "<code>type</code> aspektai pakeičiami įraše <code>facets</code> esančiais aspektais.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Pateikiamas naujas lentelės tipas su visais raktais, pakeistais nurodytu raktų sąrašu.",
        "Documentation.LongDescription": "Pateikiamas naujas lentelės tipas su visais raktais, pakeistais nurodytu raktų sąrašu.<br>\r\n    <br>\r\n    Kiekvienas raktas apibrėžiamas naudojant šios formos įrašą:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: stulpelių pavadinimų, kurie apibrėžia raktą\r, sąrašas\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code>, jei raktas yra lentelės pirminis raktas; kitu atveju <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Nurodytas raktų sąrašas tikrinamas siekiant užtikrinti, kad būtų apibrėžtas ne daugiau nei vienas pirminis raktas ir kad lentelės tipe būtų visi raktų stulpelių pavadinimai.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pakeičia lentelės tipo raktų informaciją.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Išvalo anksčiau lentelės tipe apibrėžtą pagrindinę informaciją.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Pateikiamas lentelės stulpelio tipas.",
        "Documentation.LongDescription": "Pateikiamas lentelės tipo <code>tableType</code> <code>column</code> stulpelio tipas.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Pateikiamas absoliutusis URI, kuris yra įvesties pagrindinio URI ir santykinio URI derinys.",
        "Documentation.LongDescription": "Pateikiamas absoliutusis URI, kuris yra įvesties <code>baseUri</code> ir <code>relativeUri</code> derinys.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Pateikiama dviejų reikšmių suma.",
        "Documentation.LongDescription": "Pateikiama <code>value1</code> ir <code>value2</code> suma. Galima nurodyti pasirenkamą parametrą <code>precision</code>; pagal numatytuosius parametrus naudojamas <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Grąžina reikšmę, jei ji yra suderinama su nurodytu tipu.",
        "Documentation.LongDescription": "Grąžina vertę, jei ji suderinama su nurodytu tipu. Tai atitinka operatorių „as“ M, išskyrus tai, kad jis gali priimti identifikatoriaus tipo nuorodas, pvz., Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Keisti skaičių į skaičių.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Bandoma pakeisti tekstinę reikšmę į skaičių.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Pateikiama -1, 0 arba 1, atsižvelgiant į tai, ar pirmoji reikšmė yra mažesnė, lygi ar didesnė nei antroji.",
        "Documentation.LongDescription": "Pateikiama -1, 0 arba 1, atsižvelgiant į tai, ar pirmoji reikšmė yra mažesnė, lygi ar didesnė nei antroji.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Pateikiamas pirmosios reikšmės padalijimo iš antrosios rezultatas.",
        "Documentation.LongDescription": "Pateikiamas <code>value1</code> padalijimo iš <code>value2</code> rezultatas. Galima nurodyti pasirenkamą parametrą <code>precision</code>; pagal numatytuosius parametrus naudojamas <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Nurodoma, ar dvi reikšmės yra lygios.",
        "Documentation.LongDescription": "Pateikiama „true“, jei reikšmė <code>value1</code> yra lygi reikšmei <code>value2</code>; priešingu atveju pateikiama „false“.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Nustato, ar reikšmė suderinama su nurodytu tipu.",
        "Documentation.LongDescription": "Nustato, ar reikšmė suderinama su nurodytu tipu. Tai atitinka operatorių „is“ M, išskyrus tai, kad jis gali priimti identifikatoriaus tipo nuorodas, pvz., Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Palyginkite du būdus, leidžiančius nustatyti, ar skaičius yra suderinamas su tipo numeriu.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Pateikiamas dviejų reikšmių rezultatas.",
        "Documentation.LongDescription": "Pateikiamas <code>value1</code> dauginimo iš <code>value2</code> rezultatas. Galima nurodyti pasirenkamą parametrą <code>precision</code>; pagal numatytuosius parametrus naudojamas <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Įvertina užklausą pagal tikslinį objektą.",
        "Documentation.LongDescription": "<p>Įvertinamas <code>query</code> pagal <code>target</code> naudojant <code>parameters</code> nurodytus parametrus ir <code>options</code> nurodytas parinktis.</p>\r\n<p>Užklausos išvestį apibrėžia <code>target</code>.</p>\r\n<p><code>target</code> pateikia <code>query</code> aprašytos operacijos kontekstą.</p>\r\n<p><code>query</code> aprašo užklausą, kurią reikia vykdyti pagal <code>target</code>. <code>query</code> išreiškiamas taip, kaip būdinga <code>target</code> (pvz., T-SQL sakiniu).</p>\r\n<p>Pasirinktinėje reikšmėje <code>parameters</code> atitinkamai gali būti arba sąrašas, arba įrašas, kad būtų pateiktos parametrų reikšmės, kurių tikisi <code>query</code>.</p>\r\n<p>Pasirinktiniame įraše <code>options</code> gali būti parinkčių, lemiančių <code>query</code> vykdymo pagal <code>target</code> pobūdį. Šios parinktys yra būdingos <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Nurodoma, ar dvi reikšmės yra lygios.",
        "Documentation.LongDescription": "Pateikiama neapibrėžta reikšmė, jei argumentas „<code>value1</code>“ arba „<code>value2</code>“ yra neapibrėžtas; priešingu atveju atitinka Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Pakeičiama įvesties metaduomenų informacija.",
        "Documentation.LongDescription": "Pakeičiama įvesties metaduomenų informacija.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Pakeičia reikšmės tipą.",
        "Documentation.LongDescription": "Pakeičia <code>value</code> tipą pateiktu <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite numatytąjį įrašo tipą konkretesniu tipu.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Pateikiamas dviejų reikšmių skirtumas.",
        "Documentation.LongDescription": "Pateikiamas <code>value1</code> ir <code>value2</code> skirtumas. Galima nurodyti pasirenkamą parametrą <code>precision</code>; pagal numatytuosius parametrus naudojamas <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Sukuriamas veiksmas, kuris jį įvykdžius, pateikia HTTP užklausos vykdymo rezultatus kaip dvejetainę reikšmę.",
        "Documentation.LongDescription": "Sukuriamas veiksmas, kurį įvykdžius pateikiami užklausos <code>method</code>, skirtos <code>url</code>, naudojant HTTP kaip dvejetainę reikšmę, vykdymo rezultatai.\r\n    Norint nurodyti papildomų ypatybių, galima pateikti pasirenkamą įrašo parametrą <code>options</code>. Į įrašą gali būti įtraukti šie laukai:\r\n    <ul>\r\n<li><code>Query</code> : Programiniu būdu įtraukite užklausos parametrus į URL nesirūpindami dėl kaitos.</li>\r\n<li><code>ApiKeyName</code> : Jei paskirties svetainėje žinomas API raktas, naudojant šį parametrą galima nurodyti URL naudojamo rakto parametro pavadinimą (bet ne reikšmę). Faktinė rakto reikšmė nurodyta kredencialuose.</li>\r\n<li><code>Headers</code> : Nurodžius šią reikšmę kaip įrašą, į HTTP užklausą bus įtraukta papildomų antraščių.</li>\r\n<li><code>Timeout</code> : Nurodant šią reikšmę kaip trukmę bus pakeistas HTTP užklausos skirtasis laikas. Numatytoji reikšmė yra 100 sekundžių.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Nurodant šią reikšmę kaip sąrašą, šie HTTP antraščių raktai nebus įtraukti į duomenų gavimo skaičiavimą.</li>\r\n<li><code>IsRetry</code> : Nurodant šią loginę reikšmę kaip teisingą, bus nepaisoma visų talpykloje esamų atsakymų, kai gaunami duomenys.</li>\r\n<li><code>ManualStatusHandling</code> : Nurodžius šią reikšmę kaip sąrašą, bus neleidžiama vykdyti jokio įtaisytojo HTTP užklausų, kurių atsakas nurodo kurį nors iš šių būsenos kodų, apdorojimo.</li>\r\n<li><code>RelativePath</code> : Nurodžius šią reikšmę kaip tekstą, prieš pateikiant užklausą ji pridedama prie pagrindinio URL.</li>\r\n<li><code>Content</code> : Nurodžius šią reikšmę, jos turinys taps HTTP užklausos tekstu.</li>\r\n</ul>\r\n\r\n        <br>\r\n      Atkreipkite dėmesį, kad ši funkcija daugelyje kontekstų yra išjungta. Vietoj jos naudokite Web.Contents arba Web.Headers.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Atlikite GET užklausą dėl „Bing“.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Įveskite „Azure Enterprise“ REST API galinio punkto, susieto su jūsų registracija, URL",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Rodomi pateikto „Azure Enterprise“ API URL iškvietimo dvejetainiai rezultatai.",
        "Documentation.Examples": [
          {
            "Description": "Funkcijos „AzureEnterprise.Contents“ naudojimas norint grįžti prie konkrečios ataskaitos rezultatų.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Lentelė"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Pateikiamas nurodyto didelio dvejetainio objekto turinys iš „Azure“ saugyklos.",
        "Documentation.LongDescription": "Pateikiamas didelio dvejetainio objekto turinys URL adresu <code>url</code> iš „Azure“ saugyklos. Gali būti nurodyta <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>BlockSize</code> : Baitų skaičius, kurį reikia perskaityti prieš laukiant duomenų vartotojo. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitų skaičius, kurį reikia bandyti perskaityti vienoje HTTP užklausoje į serverį. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Parinktis „ConcurrentRequests“ palaiko spartesnį duomenų atsisiuntimą nurodydama, kiek užklausų reikia atlikti lygiagrečiai atminties naudojimo sąskaita. Reikalinga atmintis – (ConcurrentRequest * RequestSize). Numatytoji reikšmė yra 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Pateikiamas iš „Azure Data Lake Storage“ failų sistemos gauto nurodyto failo turinys.",
        "Documentation.LongDescription": "Pateikiamas failo turinys URL adresu <code>url</code> iš „Azure Data Lake Storage“ failų sistemos. Gali būti nurodyta <code>options</code>, kad būtų galima valdyti šias parinktis:\r\n    <ul>\r\n<li><code>BlockSize</code> : Baitų skaičius, kurį reikia perskaityti prieš laukiant duomenų vartotojo. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>RequestSize</code> : Baitų skaičius, kurį reikia bandyti perskaityti vienoje HTTP užklausoje į serverį. Numatytoji reikšmė yra 4 MB.</li>\r\n<li><code>ConcurrentRequests</code> : Parinktis „ConcurrentRequests“ palaiko spartesnį duomenų atsisiuntimą nurodydama, kiek užklausų reikia atlikti lygiagrečiai atminties naudojimo sąskaita. Reikalinga atmintis – (ConcurrentRequest * RequestSize). Numatytoji reikšmė yra 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Pateikia apytikslį dvejetainės reikšmės ilgį.",
        "Documentation.LongDescription": "Jei duomenų šaltinis nepalaiko apytikslio ilgio, pateikiamas apytikslis <code>binary</code> ilgis arba klaida.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Gauti apytikslį dvejetainės reikšmės ilgį.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Dvejetainė reikšmė kaupiama atmintyje.",
        "Documentation.LongDescription": "Dvejetainė reikšmė kaupiama atmintyje. Šio iškvietimo rezultatas yra pastovi dvejetainė reikšmė, kuri turės nustatytą ilgį ir baitų eilę.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite pastovią dvejetainės reikšmės versiją.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Dvejetainių reikšmių sąrašas sujungiamas į vieną dvejetainę reikšmę.",
        "Documentation.LongDescription": "Dvejetainių reikšmių sąrašas sujungiamas į vieną dvejetainę reikšmę.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama dvejetainė reikšmė",
        "Documentation.LongDescription": "Pateikiama <code>binary</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Binary.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>binary</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>binary</code> reikšmę.\r\n      <ul>\r\n        <li><code>text</code>: <code>binary</code> reikšmė iš tekstinės pateikties. Išsamiau žr. <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"1011\"</code> <code>binary</code> reikšmę.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Skaičių sąrašas konvertuojamas į dvejetainę reikšmę.",
        "Documentation.LongDescription": "Skaičių sąrašas konvertuojamas į dvejetainę reikšmę.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Duomenys dekoduojami iš teksto formos į dvejetainę formą.",
        "Documentation.LongDescription": "Pateikiamas teksto reikšmės <code>text</code> konvertavimo į dvejetainę reikšmę rezultatas (<code>number</code> sąrašas). <code>encoding</code> gali būti nurodyta norint pateikti kodavimą, naudotą teksto reikšmėje.\r\n      Šias <code>BinaryEncoding</code> reikšmes galima naudoti <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodavimas „base 64“</li>\r\n        <li><code>BinaryEncoding.Hex</code>: šešioliktainis kodavimas</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Dekoduoti \"1011\" į dvejetainę reikšmę.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Dekoduoti \"1011\" į dvejetainę reikšmę naudojant šešioliktainį kodavimą.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Nuskaitomas dvejetainis srautas ir bandoma nustatyti informaciją apie jo turinio tipą bei formatą.",
        "Documentation.LongDescription": "Pateikiamas įrašas su lauku Content.Type, kuriame nurodytas numanomas MIME tipas.\r\n    Jei numanomas turinio tipas yra text/* ir aptinkama kodavimo kodų lentelė, taip pat pateikiamas laukas Content.Encoding, kuriame nurodytas srauto kodavimas.\r\n    Jei numanomas turinio tipas yra text/csv, o formatas yra su skyrikliais, taip pat pateikiamas laukas Csv.PotentialDelimiter, kuriame yra lentelė galimų skyriklių analizei.\r\n    Jei numanomas turinio tipas yra text/csv, o formatas yra fiksuoto pločio, taip pat pateikiamas laukas Csv.PotentialPositions su analizuotinu galimų fiksuoto pločio stulpelių padėčių sąrašu.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Pateikiamas simbolių skaičius.",
        "Documentation.LongDescription": "Pateikiamas simbolių skaičius.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Dvejetainė reikšmė konvertuojama į skaičių sąrašą.",
        "Documentation.LongDescription": "Dvejetainė reikšmė konvertuojama į skaičių sąrašą.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Dvejetainiai duomenys koduojami į teksto formą.",
        "Documentation.LongDescription": "Pateikiamas dvejetainių skaičių sąrašo <code>binary</code> konvertavimo į teksto reikšmę rezultatas. Pasirinktinai <code>encoding</code> gali būti nurodyta norint pateikti kodavimą, naudotiną pateiktoje teksto reikšmėje\r\n      Šias <code>BinaryEncoding</code> reikšmes galima naudoti <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: kodavimas „base 64“</li>\r\n        <li><code>BinaryEncoding.Hex</code>: šešioliktainis kodavimas</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Sukuriamas modifikuotas klaidos įrašas, kuris nesuaktyvins atsarginio įrašo, kai jį pateikia rodinyje apibrėžta apdorojimo programa (per Binary.View).",
        "Documentation.LongDescription": "Sukuriamas modifikuotas klaidos įrašas iš <code>errorRecord</code>, kuris nesuaktyvins atsarginio įrašo, kai jį pateikia rodinyje apibrėžta apdorojimo programa (per Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Sukuriama funkcija, kurią gali perimti rodinyje apibrėžta apdorojimo programa (per Binary.View).",
        "Documentation.LongDescription": "<p>Pagal <code>function</code> sukuriama rodinio funkcija, kurią galima apdoroti <code>Binary.View</code> sukurtame rodinyje.</p>\r\n<p><code>Binary.View</code> <code>OnInvoke</code> apdorojimo programą galima naudoti kaip rodinio funkcijos apdorojimo programą.</p>\r\n<p>Kaip ir naudojant integruotų operacijų apdorojimo programas, jei<code>OnInvoke</code> apdorojimo programa nėra nurodyta, jei ji neapdoroja rodinio funkcijos arba jei kyla apdorojimo programos klaida, rodiniui taikoma <code>function</code>.</p>\r\n<p>Išsamesnį <code>Binary.View</code> ir pasirinktinių rodinio funkcijų aprašą rasite paskelbtuose „Power Query“ tinkinamos jungties dokumentuose.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių su ženklu, užkoduotą naudojant 7 bitų kintamo ilgio kodavimą.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių su ženklu, užkoduotą naudojant 7 bitų kintamo ilgio kodavimą.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių be ženklo, užkoduotą naudojant 7 bitų kintamo ilgio kodavimą.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių be ženklo, užkoduotą naudojant 7 bitų kintamo ilgio kodavimą.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 8 bitų sveikąjį skaičių be ženklo.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 8 bitų sveikąjį skaičių be ženklo.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito .NET 16 baitų dešimtainę reikšmę.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito .NET 16 baitų dešimtainę reikšmę.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 8 baitų IEEE dvigubo tikslumo reikšmę su slankiuoju kableliu.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 8 baitų IEEE dvigubo tikslumo reikšmę su slankiuoju kableliu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris perskaito elementų seką ir pateikia sąrašą.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris perskaito elementų seką ir pateikia <code>sąrašą</code>. <code>binaryFormat</code> parametras nurodo kiekvieno elemento dvejetainį formatą.  Yra trys būdai nustatyti skaitomų elementų skaičių: <ul><li>jei <code>countOrCondition</code> nenurodyta, tada dvejetainis formatas bus skaitomas tol, kol nebebus elementų.</li><li>Jei <code>countOrCondition</code> yra skaičius, tada dvejetainis formatas perskaitys daug elementų.</li><li>Jei <code>countOrCondition</code> yra funkcija, tada ta funkcija bus iškviesta dėl kiekvieno skaitomo elemento.  Funkcija pateikia Teisinga norint tęsti ir – Klaidinga norint sustabdyti elementų skaitymą.  Galutinis elementas įtraukiamas į sąrašą.</li><li>Jei <code>countOrCondition</code> yra dvejetainis formatas, tada prieš sąrašą tikimasi tam tikro elementų skaičiaus, o nurodytas formatas naudojamas skaičiui perskaityti.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Skaityti baitus iki duomenų pabaigos.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Perskaityti du baitus.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Skaityti baitus, kol baito reikšmė bus didesnė nei du arba lygi.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito nulinius baitus ir pateikia neapibrėžtą reikšmę.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito nulinius baitus ir pateikia neapibrėžtą reikšmę.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris perskaito įrašą.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris perskaito įrašą.  <code>record</code> parametras nurodo įrašo formatą.  Kiekviename įrašo lauke gali būti skirtingas dvejetainis formatas.  Jei lauke yra reikšmė, kuri nėra dvejetainio formato reikšmė, tada neperskaitomi jokie to lauko duomenys, o lauko reikšmė atkartojama rezultate.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Perskaityti įrašą su vienu 16 bitų sveikuoju skaičiumi ir vienu 32 bitų sveikuoju skaičiumi.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 16 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 16 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 32 bitų ženklinį skaičių su ženklu.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 32 bitų ženklinį skaičių su ženklu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 4 baitų IEEE viengubo tikslumo reikšmę su slankiuoju kableliu.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 4 baitų IEEE viengubo tikslumo reikšmę su slankiuoju kableliu.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Pateikiamas dvejetainis formatas, kuris perskaito teksto reikšmę.",
        "Documentation.LongDescription": "Pateikiamas dvejetainis formatas, kuris perskaito teksto reikšmę. <code>length</code> nurodo dekoduotinų baitų skaičių arba dvejetainį formatą, kuris yra prieš tekstą. Pasirinktinė <code>encoding</code> reikšmė nurodo teksto kodavimą. Jei <code>encoding</code> nenurodyta, tada kodavimas nustatomas iš „Unicode“ baitų eiliškumo žymų. Jei nėra baitų eiliškumo žymų, tada naudojama <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Dekoduoti du baitus kaip ASCII tekstą.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Dekoduoti ASCII tekstą, kur teksto ilgis baitais rodomas prieš tekstą kaip baitas.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 16 bitų sveikąjį skaičių be ženklo.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 16 bitų sveikąjį skaičių be ženklo.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 32 bitų sveikąjį skaičių be ženklo.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 32 bitų sveikąjį skaičių be ženklo.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių be ženklo.",
        "Documentation.LongDescription": "Dvejetainis formatas, kuris perskaito 64 bitų sveikąjį skaičių be ženklo.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas 8 bitų sveikasis skaičius.",
        "Documentation.LongDescription": "Pateikiama 8 bitų sveikoji <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Byte.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> 8 bitų sveikųjų skaičių diapazone be trupmeninės dalies, pateikiama <code>value</code>. Jei yra trupmeninė dalis, skaičius suapvalinamas nurodytu apvalinimo režimu. Numatytasis apvalinimo režimas yra <code>RoundingMode.ToEven</code>. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Galimus apvalinimo režimus žr. <code>Number.Round</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 8 bitų sveikąją <code>number</code> reikšmę iš <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite 8 bitų sveikąją <code>number</code> reikšmę iš <code>\"4.5\"</code> naudodami <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Konvertuoja skaičių į teksto simbolį.",
        "Documentation.LongDescription": "Pateikiamas skaičių atitinkantis simbolis.<br>\r\n    <br>\r\n    Pateiktas <code>number</code> turi būti 21 bito „Unicode“ kodo elementas.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite skaičių į jį atitinkančią simbolio reikšmę.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Konvertuokite simbolį į skaičių ir atgal.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Konvertuokite šešioliktainį šypsniuko „išsišiepęs veidas“ kodo elementą į jo lygiavertę UTF-16 pakaitinių elementų porą.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Konvertuoja simbolį į skaičiaus reikšmę.",
        "Documentation.LongDescription": "Pateikiamas <code>character</code> atitinkantis skaičius.<br>\r\n    <br>\r\n    Gautasis rezultatas bus 21 bito „Unicode“ kodo elementas, kurį nurodo pateiktas simbolis arba pakaitinė pora.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite simbolį į jį atitinkančią skaičiaus reikšmę.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Konvertuokite šypsniuko „išsišiepęs veidas“ lygiavertę UTF-16 pakaitinių elementų porą į jo šešioliktainį kodo elementą.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Pateikiama funkcija, kuri sujungia teksto sąrašą naudodama nurodytus skyriklius.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri sujungia teksto reikšmių sąrašą į vieną teksto reikšmę naudodama nurodytus skyriklius.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą kaip skyriklį naudodami kabliataškį.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Sujunkite dviejų stulpelių tekstą kaip skyriklį naudodami kablelį ir CSV stiliaus kabutes.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Pateikiama funkcija, kuri sujungia teksto sąrašą naudodama skyriklių seką.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri sujungia teksto reikšmių sąrašą į vieną teksto reikšmę naudodama skyriklių seką.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą naudodami skyriklių seką.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Pateikiama funkcija, kuri sujungia teksto sąrašą naudodama nurodytus ilgius.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri sujungia teksto reikšmių sąrašą į vieną teksto reikšmę naudodama nurodytus ilgius.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą išskleisdami nurodytus kiekvienos įvesties reikšmės simbolių skaičius.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą išskleisdami nurodytus simbolių skaičius, prieš tai iš anksto rezultatą užpildę šablono tekstu.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Pateikiama funkcija, kuri sujungia teksto sąrašą naudodama nurodytas išvesties padėtis.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri sujungia teksto reikšmių sąrašą į vieną teksto reikšmę naudodama nurodytas išvesties padėtis.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą įdėdami jas į išvestį nurodytose padėtyse.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Pateikiama funkcija, kuri sujungia teksto sąrašą naudodama nurodytas padėtis ir ilgius.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri sujungia teksto reikšmių sąrašą į vieną teksto reikšmę naudodama nurodytas išvesties padėtis ir ilgius. Neapibrėžtas ilgis rodo, kad reikia įtraukti visą teksto reikšmę.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstinių reikšmių sąrašą naudodami nurodytas išvesties padėtis ir ilgius.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Pateikiama lyginimo funkcija pagal nurodytą kultūrą ir skiriant didžiąsias ir mažąsias raides.",
        "Documentation.LongDescription": "Pateikiama lyginimo funkcija, kuri naudoja <code>culture</code> ir <code>ignoreCase</code> nurodytas didžiąsias ir mažąsias raides, kad galėtų atlikti lyginimus.<br>\r\n      <br>\r\n      Lyginimo funkcija priima du argumentus ir pateikia -1, 0 arba 1, atsižvelgiant į tai, ar pirmoji reikšmė yra mažesnė, lygi arba didesnė nei antroji.<br>\r\n      <br>\r\n      Numatytoji <code>ignoreCase</code> reikšmė yra klaidinga. <code>culture</code> turi būti viena iš lokalių, kurias palaiko „.NET framework“ (pvz., „en-US“).\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Palyginkite „a“ ir „A“ naudodami lokalę „en-US“, kad nustatytumėte, ar reikšmės lygios.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Palyginkite „a“ ir „A“ naudodami lokalę „en-US“ nepaisydami didžiųjų ir mažųjų raidžių, kad nustatytumėte, ar reikšmės lygios.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Pateikiamas unikalus nario identifikatorius iš nario ypatybės vertės.",
        "Documentation.LongDescription": "Pateikiamas unikalus nario identifikatorius iš nario ypatybės vertės. <code>attribute</code>. Naudojant bet kurias kitas vertes pateikiamas nulis.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Pateikiamas ypatybės raktas.",
        "Documentation.LongDescription": "Pateikiamas ypatybės <code>property</code> raktas.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Pateikia valiutos reikšmę nuo duotos reikšmės.",
        "Documentation.LongDescription": "Pateikiama <code>currency</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Currency.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code>, valiutos diapazone, pateikiama <code>value</code>, kurios trupmeninė dalis suapvalinama iki 4 skaitmenų po kablelio. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Tinkamas valiutos diapazonas yra nuo <code>-922,337,203,685,477.5808</code> iki <code>922,337,203,685,477.5807</code>. Galimus apvalinimo režimus žr. <code>Number.Round</code>. Numatytasis yra <code>RoundingMode.ToEven</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"1,23455\"</code> reikšmę <code>currency</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Gaukite <code>currency</code> reikšmę pagal <code>\"1.23455\"</code> naudodami <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Pateikiamas dienos komponentas.",
        "Documentation.LongDescription": "Pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės dienos komponentas.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, kurią naudojant išskleidžiamas dienos komponentas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gauti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės dienos komponentą, nurodantį datą ir laiką: 2011 05 14 05:00:00 po pietų.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Pateikiamas skaičius (nuo 0 iki 6), nurodantis pateiktos reikšmės savaitės dieną.",
        "Documentation.LongDescription": "Pateikiamas skaičius (nuo 0 iki 6), nurodantis pateiktos <code>dateTime</code> savaitės dieną.\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n        <li><code>firstDayOfWeek</code>: <code>dienos</code> reikšmė, nurodanti dieną, kuri turi būti laikoma pirmąja savaitės diena. Leidžiamos reikšmės: Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday arba Day.Saturday. Jei nenurodyta, naudojama numatytoji reikšmė, priklausanti nuo kultūros.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Savaitės diena nurodoma kaip 2011 m. vasario 21 d. (pirmadienis), kai pirmąja savaitės diena laikomas sekmadienis.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Savaitės diena nurodoma kaip 2011 m. vasario 21 d. (pirmadienis), kai pirmąja savaitės diena laikomas pirmadienis.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Pateikiamas savaitės dienos pavadinimas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>date</code> reikšmės savaitės dienos pavadinimas. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gaukite savaitės dienos pavadinimą.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Pateikiamas skaičius nuo 1 iki 366, reiškiantis metų dieną.",
        "Documentation.LongDescription": "Pateikiamas skaičius, rodantis metų dieną pateiktoje <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmėje, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 m. kovo 1 d. metų diena.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Pateikiamas skaičius nuo 28 iki 31, rodantis mėnesio dienų skaičių.",
        "Documentation.LongDescription": "Mėnesio dienų skaičius pateikiamas <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmėje <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, kurios mėnesio dienų skaičius pateikiamas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gruodžio dienų skaičius, pateikiamas <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Pateikia dienos pabaigą.",
        "Documentation.LongDescription": "Pateikiama dienos, kurioje nurodyta <code>dateTime</code>, pabaiga. Išsaugoma laiko juostos informacija.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama dienos pabaiga.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gauti 2011 05 14 05:00:00 po pietų dienos pabaigą.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Gauti 2011 05 17 05:00:00 po pietų -7:00 dienos pabaigą.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Pateikia mėnesio pabaigą.",
        "Documentation.LongDescription": "Pateikiama mėnesio, kuriame yra <code>dateTime</code>, pabaiga.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama mėnesio pabaiga</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gauti 2011 05 14 mėnesio pabaigą.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Gauti 2011 05 17 05:00:00 po pietų -7:00 mėnesio pabaigą.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Pateikia ketvirčio pabaigą.",
        "Documentation.LongDescription": "Pateikiama ketvirčio, kuriame yra <code>dateTime</code>, pabaiga. Išsaugoma laiko juostos informacija.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama ketvirčio pabaiga.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:00 ketvirčio pabaigą.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Pateikia savaitės pabaigą.",
        "Documentation.LongDescription": "Pateikiama savaitės, kurioje yra <code>dateTime</code>, pabaiga.\r\nŠi funkcija naudoja pasirinktinę <code>Day</code>, <code>firstDayOfWeek</code>, kad būtų nustatyta kaip pirmoji šio santykinio skaičiavimo savaitės diena. Numatytoji reikšmė yra <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama paskutinė savaitės diena</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Pasirenkama]</i> <code>Day.Type</code> reikšmė, rodanti pirmą savaitės dieną. Galimos reikšmės <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> ir <code>Day.Saturday.</code>. Numatytoji reikšmė yra <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gauti 2011 05 14 svaitės pabaigą.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Gauti 2011 05 17 05:00:00 po pietų -7:00 savaitės pabaigą, kai pirmoji savaitės diena yra sekmadienis.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Pateikia metų pabaigą.",
        "Documentation.LongDescription": "Pateikiama metų, kuriuose yra <code>dateTime</code> (įskaitant sekundės dalis), pabaiga. Išsaugoma laiko juostos informacija.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama metų pabaiga.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gauti 2011 05 14 05:00:00 po pietų metų pabaigą.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Gauti 2011 05 17 05:00:00 po pietų -7:00 valandos pabaigą.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Naudojant nurodytą reikšmę sukuriama data.",
        "Documentation.LongDescription": "Pateikiama <code>date</code> reikšmė iš nurodytos <code>value</code> reikšmės. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).\r\nJei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Date.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>date</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>date</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>date</code> reikšmė iš tekstinės pateikties. Išsamiau žr. <code>Date.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> datos komponentas.</li>\r\n        <li><code>datetimezone</code>: vietinio <code>value</code> datos ir laiko atitikmens datos komponentas.</li>\r\n        <li><code>number</code>: datos ir laiko atitikmens datos komponentas, kurį OLE automatizavimo data išreiškia <code>value</code>.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>43910</code> į <code>date</code> reikšmę.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Konvertuokite <code>#datetime(1899, 12, 30, 06, 45, 12)</code> į <code>date</code> reikšmę.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Iš vietinio, universaliojo ir pasirinktinio Date formatų sukuriama Date reikšmė.",
        "Documentation.LongDescription": "Sukuriama <code>datetime</code> reikšmė iš tekstinės pateikties <code>text</code>. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>record</code> gali būti šie laukai:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code> reikšmę, data bus analizuojama naudojant geriausią bandymą.</li> \r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>.</li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> taip pat gali būti tekstinė reikšmė. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>„2010-12-31“</code> į <code>date</code> reikšmę.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Raskite datą Grigaliaus kalendoriuje, atitinkančią 1400 pradžią Hidžros kalendoriuje.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Rodoma, ar ši data sutampa su dabartine diena – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> sutampa su dabartine diena – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas rodo dabartinę dieną.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Rodoma, ar ši data patenka į dabartinį mėnesį – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinį mėnesį – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas rodo dabartinį mėnesį.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Rodoma, ar ši data patenka į dabartinį ketvirtį – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinį ketvirtį – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas rodo dabartinį ketvirtį.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Rodoma, ar ši data patenka į dabartinę savaitę – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinę savaitę – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas rodo dabartinę savaitę.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Rodoma, ar ši data patenka į dabartinius metus – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinius metus – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas rodo dabartinius metus.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitos dienos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitos dienos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar diena po dabartinio sistemos laikos yra tolesnė diena.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Nurodo, ar ši data patenka į kito mėnesio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kito mėnesio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar mėnuo po dabartinio sistemos laiko yra tolesnis mėnuo.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Nurodo, ar ši data patenka į kito ketvirčio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kito ketvirčio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar ketvirtis po dabartinio sistemos laiko yra tolesnis ketvirtis.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitos savaitės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitos savaitės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar savaitė po dabartinio sistemos laiko yra tolesnė savaitė.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Nurodo, ar ši data patenka į kitų metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitų metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar metai po dabartinio sistemos laiko yra tolesni metai.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnės dienos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnės dienos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią dieną patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar diena prieš dabartinį sistemos laiką yra ankstesnė diena.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnio mėnesio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnio mėnesio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį mėnesį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar mėnuo prieš dabartinį sistemos laiką yra ankstesnis mėnuo.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnio ketvirčio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnio ketvirčio intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šį ketvirtį patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar ketvirtis prieš dabartinį sistemos laiką yra ankstesnis ketvirtis.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnės savaitės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnės savaitės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią savaitę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar savaitė prieš dabartinį sistemos laiką yra ankstesnė savaitė.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Nurodo, ar ši data patenka į ankstesnių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnių metų intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šiuos metus patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos</code>, <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar metai prieš dabartinį sistemos laiką yra ankstesni metai.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Rodoma, ar ši data patenka į dabartinius metus, sutampa su dabartine diena, ar yra ankstesnė – naudojama sistemoje nustatyta dabartinė data ir laikas.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinius metus, sutampa su dabartine diena, ar yra ankstesnė – naudojama sistemoje nustatyta dabartinė data ir laikas.\r\n      <ul>\r\n      <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar dabartinis sistemos laikas patenka į metus iki dabartinės datos.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Rodoma, ar ši data patenka į keliamuosius metus.",
        "Documentation.LongDescription": "Rodoma, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į keliamuosius metus.\r\n <ul>\r\n        <li><code>dateTime</code>: turi būti įvertinta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar 2012 metai, nurodyti <code>#date(2012, 01, 01)</code>, yra keliamieji metai.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Pateikiamas mėnesio komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>datetime</code> reikšmės mėnesio komponentas, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti mėnesį #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Pateikiamas mėnesio pavadinimo komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>date</code> reikšmės mėnesio komponento pavadinimas. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gaukite mėnesio pavadinimą.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Pateikiamas skaičius, rodantis, į kurį metų ketvirtį patenka data.",
        "Documentation.LongDescription": "Pateikiamas skaičius nuo 1 iki 4, rodantis, į kurį metų ketvirtį patenka data <code>dateTime</code>. <code>dateTime</code> gali būti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti, į kurį metų ketvirtį patenka data #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Pateikiama dienos pradžia.",
        "Documentation.LongDescription": "Pateikiama dienos, kurioje yra <code>dateTime</code>, pradžia.\r\n    <code>dateTime</code> turi būti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:00 dienos pradžią.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Pateikiama mėnesio pradžia.",
        "Documentation.LongDescription": "Pateikiama mėnesio, kuriame yra <code>dateTime</code>, pradžia.\r\n    <code>dateTime</code> turi būti <code>date</code> arba <code>datetime</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:10:32 mėnesio pradžią.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Pateikiama ketvirčio pradžia.",
        "Documentation.LongDescription": "Pateikiama ketvirčio, kuriame yra <code>dateTime</code>, pradžia.\r\n     <code>dateTime</code> turi būti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:00 ketvirčio pradžią.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Pateikiama savaitės pradžia.",
        "Documentation.LongDescription": "Pateikiama savaitės, kurioje yra <code>dateTime</code>, pradžia.\r\n     <code>dateTime</code> turi būti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Raskite 2011 m. spalio 11 d., antradienio, savaitės pradžią.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Raskite 2011 m. spalio 11 d., antradienio, savaitės pradžią, naudodami pirmadienį kaip savaitės pradžią.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Pateikiama metų pradžia.",
        "Documentation.LongDescription": "Pateikiama metų, kuriuose yra <code>dateTime</code>, pradžia.\r\n     <code>dateTime</code> turi būti <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:10:32 metų pradžią.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Pateikiamas įrašas su datos reikšmės dalimis.",
        "Documentation.LongDescription": "Pateikiamas įrašas su pateiktos datos reikšmės dalimis, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: <code>date</code> reikšmė, kurią naudojant apskaičiuojamas jos dalių įrašas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#date(2011, 12, 31)</code> reikšmę į įrašą, kuriame yra datos reikšmės dalys.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Pateikiama datos reikšmės tekstinė pateiktis.",
        "Documentation.LongDescription": "Pateikiama <code>date</code> tekstinė pateiktis. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>culture</code> naudojamas tik senstelėjusioms darbo eigoms. <code>record</code> gali būti šie laukai: \r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code>, data bus suformatuota naudojant numatytąsias reikšmes, apibrėžtas lauke <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>. </li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> ir <code>culture</code> taip pat gali būti tekstinės reikšmės. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#date(2010, 12, 31)</code> į <code>tekstinę</code> reikšmę. <i>Rezultatų išvestis gali skirtis atsižvelgiant į dabartinę kultūrą.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Raskite datą Hidžros kalendoriuje, atitinkančią 2000 sausio 1-ąją Grigaliaus kalendoriuje.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Pateikiamas skaičius nuo 1 iki 6, rodantis, į kurią mėnesio savaitę patenka data.",
        "Documentation.LongDescription": "Pateikiamas skaičius nuo 1 iki 6, rodantis, į kurią mėnesio savaitę patenka data <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> reikšmė, kuriai nustatoma mėnesio savaitė.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, į kurią savaitę patenka 2011 m. kovo 15 d..",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Pateikiamas skaičius nuo 1 iki 54, rodantis, į kurią metų savaitę patenka ši data.",
        "Documentation.LongDescription": "Pateikia skaičių nuo 1 iki 54, nurodantį, į kurią metų savaitę patenka data <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> reikšmė, kurios metų savaitė nustatoma.</li>\r\n        <li><code>firstDayOfWeek</code>: Pasirenkama <code>Day.Type</code> reikšmė, nurodanti dieną, kuri laikoma naujos savaitės pradžia (pvz., <code>Day.Sunday</code>). Jei nenurodyta, naudojama numatytoji reikšmė pagal kultūrą.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, kurioje metų savaitėje yra 2011 m. kovo 27 d.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Nustatykite, į kurią metų savaitę patenka 2011 m. kovo 27 d., naudodami pirmadienį kaip savaitės pradžią.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Pateikiamas metų komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>datetime</code> reikšmės metų komponentas, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti metus #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Pateikiamas nurodytos datos, datetime arba datetimezone reikšmės datos komponentas.",
        "Documentation.LongDescription": "Pateikiamas <code>dateTime</code> datos komponentas, nurodyta <code>date</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Rasti #datetime(2010, 12, 31, 11, 56, 02) datos reikšmę.",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama data ir laikas.",
        "Documentation.LongDescription": "Pateikiama <code>datetime</code> reikšmė iš nurodytos <code>value</code> reikšmės. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).\r\nJei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>DateTime.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>datetime</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>datetime</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>datetime</code> reikšmė iš tekstinės pateikties. Išsamiau žr. <code>DateTime.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetime</code> su <code>value</code> kaip datos komponentu ir <code>12:00:00 AM</code> kaip laiko komponentu.</li>\r\n        <li><code>datetimezone</code>: vietinis <code>datetime</code> <code>value</code> atitikmuo.</li>\r\n        <li><code>time</code>: <code>datetime</code> su <code>0</code> OLE automatizavimo datos atitikmeniu kaip datos komponentu ir <code>value</code> kaip laiko komponentu.</li>\r\n        <li><code>number</code>: <code>datetime</code> atitikmuo, kurį OLE automatizavimo data išreiškia <code>value</code>. </li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#time(06, 45, 12)</code> į <code>datetime</code> reikšmę.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Konvertuokite <code>#date(1975, 4, 4)</code> į <code>datetime</code> reikšmę.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Iš 64 bitų ilgio skaičiaus sukuriama data ir laikas.",
        "Documentation.LongDescription": "<code>datetime</code> reikšmė sukuriama iš <code>fileTime</code> reikšmės ir konvertuojama į vietinę laiko juostą. Failo laikas yra „Windows“ failo laiko reikšmė, nurodanti 100 nanosekundžių intervalų, praėjusių nuo 1601 m. sausio 1 d. 00:00 val. po Kristaus, skaičių. (C.E.) Universalusis laikas (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>129876402529842245</code> į datos ir laiko reikšmę.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Datos ir laiko juosta sukuriama iš vietinio ir universaliojo datos bei laiko formatų.",
        "Documentation.LongDescription": "Sukuriama <code>datetime</code> reikšmė iš tekstinės pateikties <code>text</code>. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>record</code> gali būti šie laukai:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code> reikšmę, data bus analizuojama naudojant geriausią bandymą.</li> \r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>.</li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> taip pat gali būti tekstinė reikšmė. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>„2010-12-31T01:30:00“</code> į datetime reikšmę.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Konvertuokite <code>„2010-12-31T01:30:00.121212“</code> į datetime reikšmę.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Konvertuokite <code>„2010-12-31T01:30:00“</code> į datetime reikšmę.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Konvertuokite <code>\"20101231T013000\"</code> į datetime reikšmę.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Nurodo, ar ši data ir laikas patenka į dabartinę valandą, kaip nustatyta pagal dabartinę sistemos datą ir laiką.",
        "Documentation.LongDescription": "Nurodo, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinę valandą pagal dabartinę sistemos datą ir laiką.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> arba <code>datetimezone</code> reikšmė turi būti įvertinta.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar dabartinis sistemos laikas patenka į dabartinę valandą.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Nurodo, ar ši data ir laikas patenka į dabartinę minutę, kaip nustatyta pagal dabartinę sistemos datą ir laiką.",
        "Documentation.LongDescription": "Nurodo, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinę minutę pagal dabartinę sistemos datą ir laiką.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> arba <code>datetimezone</code> reikšmė turi būti įvertinta.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar dabartinis sistemos laikas patenka į dabartinę minutę.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Nurodo, ar ši data ir laikas patenka į dabartinę sekundę, kaip nustatyta pagal dabartinę sistemos datą ir laiką.",
        "Documentation.LongDescription": "Nurodo, ar pateikta datos ir laiko reikšmė <code>dateTime</code> patenka į dabartinę sekundę pagal dabartinę sistemos datą ir laiką.\r\n      <ul>\r\n      <li><code>dateTime</code>: <code>datetime</code> arba <code>datetimezone</code> reikšmė turi būti įvertinta.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nurodo, ar dabartinis sistemos laikas patenka į dabartinę sekundę.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitos valandos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitos valandos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar valanda po dabartinio sistemos laiko patenka į kitą valandą.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitos minutės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitos minutės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nurodo, ar minutė po dabartinio sistemos laiko yra tolesnis minutę.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į kitos sekundės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į kitos sekundės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar sekundė po dabartinio sistemos laiko patenka į kitą sekundę.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnės valandos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnės valandos intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią valandą patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar valanda prieš dabartinį sistemos laiką patenka į ankstesnę valandą.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnės minutės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnės minutės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią minutę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: Vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar minutė prieš dabartinį sistemos laiką patenka į ankstesnę minutę.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Nurodo, ar šie data ir laikas patenka į ankstesnės sekundės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.",
        "Documentation.LongDescription": "Nurodo, ar nurodyta datos ir laiko reikšmė <code>dateTime</code> patenka į ankstesnės sekundės intervalą, kaip nustatyta pagal dabartinius sistemos datą ir laiką. Atkreipkite dėmesį, kad, jei šiai funkcijai bus perduota į šią sekundę patenkanti reikšmė, funkcija pateiks false.\r\n      <ul>\r\n      <li><code>dateTime</code>: vertintina <code>datos ir laiko</code> arba <code>datos ir laiko juostos</code> reikšmė.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Nustato, ar sekundė prieš dabartinį sistemos laiką patenka į ankstesnę sekundę.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Pateikiama nurodytos datos ir laiko reikšmės laiko dalis.",
        "Documentation.LongDescription": "Pateikiama nurodytos datos ir laiko reikšmės laiko dalis, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Rasti #datetime(2010, 12, 31, 11, 56, 02) laiko reikšmę.",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Pateikiamas įrašas su datos ir laiko reikšmės dalimis.",
        "Documentation.LongDescription": "Pateikiamas įrašas su nurodytos datos ir laiko reikšmės dalimis, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: <code>datetime</code> reikšmė, kurią naudojant apskaičiuojamas jos dalių įrašas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#datetime(2011, 12, 31, 11, 56, 2)</code> reikšmę į įrašą, kuriame yra datos ir laiko reikšmės.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Pateikiama datos ir laiko reikšmės tekstinė pateiktis.",
        "Documentation.LongDescription": "Pateikiama <code>dateTime</code> tekstinė pateiktis. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>culture</code> naudojamas tik senstelėjusioms darbo eigoms. <code>record</code> gali būti šie laukai: \r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code>, data bus suformatuota naudojant numatytąsias reikšmes, apibrėžtas lauke <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>. </li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> ir <code>culture</code> taip pat gali būti tekstinės reikšmės. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#datetime(2010, 12, 31, 01, 30, 25)</code> į <code>tekstinę</code> reikšmę. <i>Rezultatų išvestis gali skirtis atsižvelgiant į dabartinę kultūrą.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Konvertuokite naudodami ISO 8601 šabloną.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama datos ir laiko juosta.",
        "Documentation.LongDescription": "Pateikiama <code>datetimezone</code> reikšmė iš nurodytos <code>value</code> reikšmės. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).\r\nJei nurodyta <code>value</code> yra <code>null</code>, <code>DateTimeZone.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>datetimezone</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>datetimezone</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>datetimezone</code> reikšmė iš tekstinės pateikties. Išsamiau žr. <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code>: <code>datetimezone</code> su <code>value</code> kaip datos komponentu, <code>12:00:00 AM</code> kaip laiko komponentu ir poslinkiu, atitinkančiu vietinę laiko juostą.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code> su <code>value</code> kaip datos ir laiko komponentas bei poslinkis, atitinkantis vietinę laiko juostą.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> su <code>0</code> OLE automatizavimo datos kaip datos komponento atitikmeniu, <code>value</code> kaip laiko komponentu ir poslinkiu, atitinkančiu vietinę laiko juostą.</li>\r\n        <li><code>number</code>: <code>datetimezone</code> su datos ir laiko atitikmeniu, kurį OLE automatizavimo data išreiškė <code>value</code>, ir poslinkiu, atitinkančiu vietinę laiko juostą.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>\"2020-10-30T01:30:00-08:00\"</code> į <code>datetimezone</code> reikšmę.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Iš 64 bitų ilgio skaičiaus sukuriama datos ir laiko juosta.",
        "Documentation.LongDescription": "Iš reikšmės <code>fileTime</code> sukuriama <code>datetimezone</code> reikšmė ir konvertuojama į vietinę laiko juostą. Failo laikas yra „Windows“ failo laiko reikšmė, nurodanti 100 nanosekundžių intervalų, praėjusių nuo 1601 m. sausio 1 d. 00:00 val. po Kristaus, skaičių. (C.E.) Universalusis laikas (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>129876402529842245</code> į datos ir laiko juostos reikšmę.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Iš vietinio, universaliojo ir pasirinktinio datetimezone formatų sukuriama datetimezone reikšmė.",
        "Documentation.LongDescription": "Sukuriama <code>datetimezone</code> reikšmė iš tekstinės pateikties <code>text</code>. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>record</code> gali būti šie laukai:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code> reikšmę, data bus analizuojama naudojant geriausią bandymą. </li> \r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>.</li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> taip pat gali būti tekstinė reikšmė. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>„2010-12-31T01:30:00-08:00“</code> į <code>datetimezone</code> reikšmę.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Konvertuokite naudodami ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Iš pateiktos datos ir laiko juostos reikšmės pašalinama laiko juostos informacija.",
        "Documentation.LongDescription": "#datetime reikšmė pateikiama iš <code>dateTimeZone</code> su pašalinta laiko juostos informacija.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite laiko juostos informaciją iš reikšmės #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Laiko juostos komponentas konvertuojamas į vietinę laiko juostą.",
        "Documentation.LongDescription": "Datos ir laiko juostos reikšmės <code>dateTimeZone</code> laiko juostos informacija pakeičiama į vietinės laiko juostos informaciją.\r\n    Jei <code>dateTimeZone</code> nėra laiko juostos komponento, įtraukiama vietinės laiko juostos informacija.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) laiko juostos informaciją į vietinę laiko juostą (PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Pateikiamas įrašas su datos ir laiko juostos reikšmės dalimis.",
        "Documentation.LongDescription": "Pateikiamas įrašas su nurodytos datos ir laiko juostos reikšmės dalimis, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: <code>datetimezone</code> reikšmė, kurią naudojant apskaičiuojamas jos dalių įrašas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> reikšmę į įrašą, kuriame yra datos, laiko ir juostos reikšmės.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Pateikiama datos ir laiko juostos reikšmės tekstinė pateiktis.",
        "Documentation.LongDescription": "Pateikiama <code>dateTimeZone</code> tekstinė pateiktis. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>culture</code> naudojamas tik senstelėjusioms darbo eigoms. <code>record</code> gali būti šie laukai: \r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code>, data bus suformatuota naudojant numatytąsias reikšmes, apibrėžtas lauke <code>Culture</code>. </li>\r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"MMM\"</code> yra <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, o kai naudojama <code>\"ru-RU\"</code>, <code>\"MMM\"</code> yra <code>\"янв\", \"фев\", \"мар\", ...</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>. </li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> ir <code>culture</code> taip pat gali būti tekstinės reikšmės. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> į <code>tekstinę</code> reikšmę. <i>Rezultatų išvestis gali skirtis atsižvelgiant į dabartinę kultūrą.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Konvertuokite naudodami ISO 8601 šabloną.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Laiko juostos komponentas konvertuojamas į UTC laiko juostą.",
        "Documentation.LongDescription": "Datos ir laiko reikšmės <code>dateTimeZone</code> laiko juostos informacija pakeičiama į UTC arba universaliojo laiko juostos informaciją.\r\n   Jei <code>dateTimeZone</code> nėra laiko juostos komponento, įtraukiama UTC laiko juostos informacija.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Pakeiskite #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) laiko juostos informaciją į UTC laiko juostą.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Pakeičiama reikšmės laiko juosta.",
        "Documentation.LongDescription": "Pakeičiama reikšmės laiko juosta.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Pakeičiama reikšmės laiko juosta.",
        "Documentation.LongDescription": "Pakeičiama reikšmės laiko juosta.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama dešimtainė trupmena.",
        "Documentation.LongDescription": "Pateikiama dešimtainė <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Decimal.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> dešimtainių skaičių diapazone, pateikiama <code>value</code>; kitu atveju pateikiama klaida. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite dešimtainę <code>number</code> reikšmę iš <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Pateikiamas „Delta“ telkinio lentelės turinys.",
        "Documentation.LongDescription": "Pateikiamas „Delta“ telkinio lentelės turinys.",
        "Documentation.Category": "Pasiekiami duomenys",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas dvigubo tikslumo skaičius.",
        "Documentation.LongDescription": "Pateikiama dvigubo tikslumo <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Double.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> dvigubo tikslumo skaičių diapazone, pateikiama <code>value</code>; kitu atveju pateikiama klaida. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite dvigubo tikslumo <code>number</code> reikšmę iš <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Pateikia trukmės dienų dalį.",
        "Documentation.LongDescription": "Pateikia <code>duration</code>dienų dalį.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Išskleiskite dienų skaičių tarp dviejų datų.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama trukmė.",
        "Documentation.LongDescription": "Pateikiama <code>duration</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Duration.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>duration</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>duration</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>duration</code> reikšmė iš tekstinių praėjusio laiko formų (d.h:m:s). Išsamiau žr. <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: <code>value</code> sveikuoju arba trupmeniniu skaičiumi išreikštų dienų <code>duration</code> atitikmuo.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>2.525</code> į <code>duration</code> reikšmę.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Pateikiama trukmės reikšmė iš tekstinių praėjusio laiko formų (d.h:m:s).",
        "Documentation.LongDescription": "Pateikiama trukmės reikšmė iš nurodyto teksto (<code>text</code>). Ši funkcija gali analizuoti šiuos formatus:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Visuose intervaluose reikšmės nurodytos imtinai)<br>\r\n        ddd: dienų skaičius.<br>\r\n        hh: valandų skaičius, tarp 0 ir 23.<br>\r\n        mm: minučių skaičius, tarp 0 ir 59.<br>\r\n        ss: sekundžių skaičius, tarp 0 ir 59.<br>\r\n        ff: sekundžių dalis, tarp 0 ir 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>\"2.05:55:20\"</code> į <code>duration</code> reikšmę.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Pateikia trukmės valandų dalį.",
        "Documentation.LongDescription": "Pateikiama <code>duration</code>valandų dalis.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Išskleiskite valandas iš trukmės reikšmės.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Pateikia trukmės minučių dalį.",
        "Documentation.LongDescription": "Pateikiama <code>duration</code>minučių dalis.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Išskleiskite minutes iš trukmės reikšmės.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Pateikia trukmės sekundžių dalį.",
        "Documentation.LongDescription": "Pateikiama <code>duration</code>sekundžių dalis.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Išskleiskite sekundes iš trukmės reikšmės.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Pateikiamas įrašas su trukmės dalimis.",
        "Documentation.LongDescription": "Pateikiamas įrašas su trukmės reikšmės dalimis, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: <code>duration</code>, kurią naudojant sukuriamas įrašas.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#duration(2, 5, 55, 20)</code> į dalių įrašą, įtraukdami dienas, valandas, minutes ir sekundes, jei taikoma.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Pateikiamas formos „d.h:m:s“ tekstas.",
        "Documentation.LongDescription": "Pateikiama nurodytos trukmės tekstinė day.hour:mins:sec formos pateiktis <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: <code>trukmė</code>, kurios tekstinė pateiktis apskaičiuojama.</li>\r\n  <li><code>format</code>: <i>[pasirenkama]</i> nerekomenduojama, jei reikšmė yra ne Null, bus parodyta klaida</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#duration(2, 5, 55, 20)</code> į teksto reikšmę.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Pateikiamas bendras šios trukmės dienų skaičius.",
        "Documentation.LongDescription": "Pateikia bendrą dienų, segmentuotų pagal <code>duration</code>, skaičių.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Raskite bendrą dienų skaičių, segmentuotą pagal trukmės reikšmę.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Pateikiamas bendras šios trukmės valandų skaičius.",
        "Documentation.LongDescription": "Pateikia bendrą valandų, segmentuotų pagal <code>duration</code>, skaičių.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Raskite bendrą valandų, kurias apima trukmės reikšmė, skaičių.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Pateikiamas bendras šios trukmės minučių skaičius.",
        "Documentation.LongDescription": "Pateikia bendrą minučių, kurias segmentavo <code>duration</code>, skaičių.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Raskite bendrą minučių, kurias apima trukmės reikšmė, skaičių.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Pateikiamas bendras šios trukmės sekundžių skaičius.",
        "Documentation.LongDescription": "Pateikia bendrą sekundžių, kurias segmentavo <code>duration</code>, skaičių.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Raskite bendrą sekundžių, kurias apima trukmės reikšmė, skaičių.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Pateikiamas klaidos įrašas iš pateiktų teksto reikšmių, skirtas priežasčiai, pranešimui ir informacijai.",
        "Documentation.LongDescription": "Pateikiamas klaidos įrašas iš pateiktų teksto reikšmių, skirtas priežasčiai, pranešimui ir informacijai.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Pateikia konstantos reikšmės M šaltinio kodo atvaizdavimą.",
        "Documentation.LongDescription": "Pateikia konstantos reikšmės M šaltinio kodo atvaizdavimą.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Gaukite skaičiaus reikšmės M šaltinio kodo atvaizdavimą.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Gaukite datos reikšmės M šaltinio kodo atvaizdavimą.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Gaukite tekstinės reikšmės M šaltinio kodo atvaizdavimą.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Pateikia M reiškinio įvertinimo rezultatą.",
        "Documentation.LongDescription": "Pateikia M reiškinio <code>document</code> įvertinimo rezultatą su turimais identifikatoriais, kuriuos galima nurodyti pagal <code>environment</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Įvertinkite paprastą sumą.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Įvertinkite sudėtingesnę sumą.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Įvertinkite tekstinės reikšmės sujungimą su identifikatoriumi.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Pateikia identifikatoriaus M šaltinio kodo atvaizdavimą.",
        "Documentation.LongDescription": "Pateikia identifikatoriaus <code>name</code> M šaltinio kodo atvaizdavimą.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Gaukite identifikatoriaus M šaltinio kodo atvaizdavimą.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Gaukite identifikatoriaus, kuriame yra tarpas, M šaltinio kodo atvaizdavimą.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Nurodyto failo turinys pateikiamas kaip dvejetainiai duomenys.",
        "Documentation.LongDescription": "Grąžina failo, <code>path</code>, turinį kaip dvejetainį. <code>options</code> parametras šiuo metu skirtas tik vidiniam naudojimui.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Pateikiama, neatsižvelgiant į tai, ar konkreti funkcija laikoma duomenų šaltiniu.",
        "Documentation.LongDescription": "Pateikiama, neatsižvelgiant į tai, ar <code>function</code> laikomas duomenų šaltiniu.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Tekstas, išreiškiantis geografinę reikšmę „Well-Known Text“ (WKT) formatu, paverčiamas struktūrizuotu įrašu.",
        "Documentation.LongDescription": "Tekstas, išreiškiantis geografinę reikšmę „Well-Known Text“ (WKT) formatu, paverčiamas struktūrizuotu įrašu. WKT yra standartinis formatas, apibrėžtas „Open Geospatial Consortium“ (OGC), ir yra tipiškas nuoseklaus išdėstymo formatas, naudojamas duomenų bazėse, įskaitant „SQL Server“.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Struktūrizuoto geografinio taško reikšmė vaizduojama „Well-Known Text“ (WKT) formatu.",
        "Documentation.LongDescription": "Struktūrizuoto geografinio taško reikšmė vaizduojama „Well-Known Text“ (WKT) formatu, kaip apibrėžta „Open Geospatial Consortium“ (OGC), ir nuoseklaus išdėstymo formatu, kuris naudojamas daugelyje duomenų bazių, įskaitant „SQL Server“.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Tekstas, išreiškiantis geometrinę reikšmę „Well-Known Text“ (WKT) formatu, paverčiamas struktūrizuotu įrašu.",
        "Documentation.LongDescription": "Tekstas, išreiškiantis geometrinę reikšmę „Well-Known Text“ (WKT) formatu, paverčiamas struktūrizuotu įrašu. WKT yra standartinis formatas, apibrėžtas „Open Geospatial Consortium“ (OGC), ir yra tipiškas nuoseklaus išdėstymo formatas, naudojamas duomenų bazėse, įskaitant „SQL Server“.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Struktūrizuoto geometrinio taško reikšmė vaizduojama „Well-Known Text“ (WKT) formatu.",
        "Documentation.LongDescription": "Struktūrizuoto geometrinio taško reikšmė vaizduojama „Well-Known Text“ (WKT) formatu, kaip apibrėžta „Open Geospatial Consortium“ (OGC), ir nuoseklaus išdėstymo formatu, kuris naudojamas daugelyje duomenų bazių, įskaitant „SQL Server“.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Pateikiama nurodytos reikšmės Guid reikšmė.",
        "Documentation.LongDescription": "Pateikiama <code>Guid.Type</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Guid.From</code> pateikia <code>null</code>. Bus tikrinama, ar nurodyta <code>value</code> reikšmė yra priimtino formato. Priimtini formatai nurodyti pavyzdžiuose.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Guid reikšmė gali būti pateikta kaip 32 susiję šešioliktainiai skaitmenys.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid reikšmė gali būti pateikta kaip 32 šešioliktainiai skaitmenys, brūkšneliais suskirstyti į 8-4-4-4-12 blokus.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid reikšmė gali būti pateikta kaip 32 šešioliktainiai skaitmenys, atskirti brūkšneliais ir riestiniais skliaustais.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "Guid reikšmė gali būti pateikta kaip 32 šešioliktainiai skaitmenys, atskirti brūkšneliais ir lenktiniais skliaustais.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas 16 bitų sveikasis skaičius.",
        "Documentation.LongDescription": "Pateikiama 16 bitų sveikoji <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Int16.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> 16 bitų sveikųjų skaičių diapazone be trupmeninės dalies, pateikiama <code>value</code>. Jei yra trupmeninė dalis, skaičius suapvalinamas nurodytu apvalinimo režimu. Numatytasis apvalinimo režimas yra <code>RoundingMode.ToEven</code>. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Norėdami sužinoti apie naudojamus apvalinimo režimus žr. <code>Number.Round</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 16 bitų sveikąją <code>number</code> reikšmę iš <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite 16 bitų sveikąją <code>number</code> reikšmę iš <code>\"4.5\"</code> naudodami <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas 32 bitų sveikasis skaičius.",
        "Documentation.LongDescription": "Pateikiama 32 bitų sveikoji <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Int32.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> 32 bitų sveikųjų skaičių diapazone be trupmeninės dalies, pateikiama <code>value</code>. Jei yra trupmeninė dalis, skaičius suapvalinamas nurodytu apvalinimo režimu. Numatytasis apvalinimo režimas yra <code>RoundingMode.ToEven</code>. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Norėdami sužinoti apie naudojamus apvalinimo režimus žr. <code>Number.Round</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 32 bitų sveikąją <code>number</code> reikšmę iš <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite 32 bitų sveikąją <code>number</code> reikšmę iš <code>\"4.5\"</code> naudodami <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Iš pateiktos vertės sukuriama 64 bitų sveikoji vertė.",
        "Documentation.LongDescription": "Pateikiama 64 bitų sveikoji <code>number</code> reikšmė iš nurodytos reikšmės <code>value</code>. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Int64.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> 64 bitų sveikųjų skaičių diapazone be trupmeninės dalies, pateikiama <code>value</code>. Jei yra trupmeninė dalis, skaičius suapvalinamas nurodytu apvalinimo režimu. Numatytasis apvalinimo režimas yra <code>RoundingMode.ToEven</code>. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Norėdami sužinoti apie naudojamus apvalinimo režimus žr. <code>Number.Round</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"4\"</code> 64 bitų sveikąją <code>number</code> vertę.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite 64 bitų sveikąją <code>number</code> reikšmę iš <code>\"4.5\"</code> naudodami <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas 8 bitų sveikasis skaičius su ženklu.",
        "Documentation.LongDescription": "Pateikiama 8 bitų sveikoji <code>number</code> reikšmė su ženklu iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Int8.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> 8 bitų sveikųjų skaičių su ženklu diapazone be trupmeninės dalies, pateikiama <code>value</code>. Jei yra trupmeninė dalis, skaičius suapvalinamas nurodytu apvalinimo režimu. Numatytasis apvalinimo režimas yra <code>RoundingMode.ToEven</code>. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Norėdami sužinoti apie naudojamus apvalinimo režimus žr. <code>Number.Round</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 8 bitų sveikąją <code>number</code> reikšmę su ženklu iš <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite 8 bitų sveikąją <code>number</code> reikšmę su ženklu iš <code>\"4.5\"</code> naudodami <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Pateikia funkcijos turinio abstrakčiosios sintaksės medį (AST).",
        "Documentation.LongDescription": "<p>Pateikia <code>function</code> turinio, normalizuoto į <i>elemento reiškinį</i>, abstrakčiosios sintaksės medį (AST):\r\n<ul>\r\n  <li>Funkcija turi būti 1 argumento lambda.</li>\r\n  <li>Visos funkcijos parametro nuorodos pakeičiamos naudojant <code>ItemExpression.Item</code>.</li>\r\n  <li>AST bus supaprastintas, kad jame būtų tik rūšių mazgai:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Pateikiama klaida, jei nepavyksta pateikti elemento reiškinio AST, skirto <code>function</code> turiniui.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamas funkcijos <code>each _ <> null</code> turinio AST",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Pateikiamas JSON dokumento turinys.",
        "Documentation.LongDescription": "Pateikiamas JSON dokumento turinys.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Sukuriamas konkrečios reikšmės atitikmuo JSON formatu.",
        "Documentation.LongDescription": "<p>Sukuriamas nurodytos reikšmės <code>value</code> atitikmuo JSON formatu naudojant teksto koduotę, kurią nurodo <code>encoding</code>. Jei praleista <code>encoding</code>, naudojama UTF8. Reikšmės pateikiamos taip, kaip nurodyta toliau.</p>\r\n <ul>\r\n        <li>Reikšmė „null“, tekstinės ir loginės reikšmės pateikiamos kaip atitinkami JSON tipai.</li>\r\n        <li>Skaičiai pateikiami kaip skaičiai JSON formatu, išskyrus tai, kad <code>#infinity</code>, <code>-#infinity</code> ir <code>#nan</code> konvertuojami į reikšmę „null“.</li>\r\n        <li>Sąrašai pateikiami kaip JSON masyvai.</li>\r\n        <li>Įrašai pateikiami kaip JSON objektai.</li>\r\n        <li>Lentelės pateikiamos kaip objektyvų masyvas.</li>\r\n        <li>Datos, laiko, datos ir laiko, datos bei laiko juostos ir trukmės reikšmės pateikiamos kaip ISO-8601 tekstas.</li>\r\n        <li>Dvejetainės reikšmės pateikiamos kaip tekstas, užkoduotas naudojant „base-64“.</li>\r\n        <li>Tipai ir funkcijos sukelia klaidą.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite sudėtinę reikšmę į JSON formato duomenis.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Dvejetainė reikšmė konvertuojama į teksto reikšmių sąrašą, išskaidytą ties eilučių lūžiais. Jei nurodytas kabučių stilius, tada eilučių lūžiai gali būti rodomi kabutėse. Jei includeLineSeparators reikšmė yra Teisinga, tada eilučių lūžio simboliai įtraukiami į tekstą.",
        "Documentation.LongDescription": "Dvejetainė reikšmė konvertuojama į teksto reikšmių sąrašą, išskaidytą ties eilučių lūžiais. Jei nurodytas kabučių stilius, tada eilučių lūžiai gali būti rodomi kabutėse. Jei includeLineSeparators reikšmė yra Teisinga, tada eilučių lūžio simboliai įtraukiami į tekstą.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Tekstinė reikšmė konvertuojama į tekstinių reikšmių sąrašą, išskaidytą pagal eilučių lūžius. Jei includeLineSeparators reikšmė yra Teisinga, tada eilučių lūžio simboliai įtraukiami į tekstą.",
        "Documentation.LongDescription": "Tekstinė reikšmė konvertuojama į tekstinių reikšmių sąrašą, išskaidytą pagal eilučių lūžius. Jei includeLineSeparators reikšmė yra Teisinga, tada eilučių lūžio simboliai įtraukiami į tekstą.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (numatytasis) kabučių naudojimo apibrėžti nereikia.</li>\r\n            <li><code>QuoteStyle.Csv:</code> kabutės naudojamos pagal CSV. Dvigubųjų kabučių simbolis naudojamas tokioms sritims atskirti, o dvigubųjų kabučių simbolių pora naudojama siekiant nurodyti vieną dvigubųjų kabučių simbolį toje srityje. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Teksto sąrašas konvertuojamas į dvejetainę reikšmę naudojant nurodytą kodavimą ir lineSeparator. Nurodytas lineSeparator pridedamas prie kiekvienos eilutės.  Jei nenurodyta, tada naudojami eilučių perkėlimo ir įvedimo į eilutę simboliai.",
        "Documentation.LongDescription": "Teksto sąrašas konvertuojamas į dvejetainę reikšmę naudojant nurodytą kodavimą ir lineSeparator. Nurodytas lineSeparator pridedamas prie kiekvienos eilutės.  Jei nenurodyta, tada naudojami eilučių perkėlimo ir įvedimo į eilutę simboliai.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Teksto sąrašas konvertuojamas į vieną tekstą.  Prie kiekvienos eilutės pridedamas nurodytas lineSeparator.  Jei nenurodyta, tada naudojami eilučių perkėlimo ir įvedimo į eilutę simboliai.",
        "Documentation.LongDescription": "Teksto sąrašas konvertuojamas į vieną tekstą.  Prie kiekvienos eilutės pridedamas nurodytas lineSeparator.  Jei nenurodyta, tada naudojami eilučių perkėlimo ir įvedimo į eilutę simboliai.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Jei visos išraiškos teisingos, pateikiama reikšmė Teisinga.",
        "Documentation.LongDescription": "Jei visos sąrašo išraiškos <code>list</code> teisingos, pateikiama reikšmė Teisinga.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar visos sąrašo išraiškos {true, true, 2 > 0} yra teisingos.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Nustatyti, ar visos sąrašo išraiškos {true, true, 2 < 0} yra teisingos.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Jei bet kuri išraiška teisinga, pateikiama reikšmė Teisinga.",
        "Documentation.LongDescription": "Jei bet kuri sąrašo išraiška <code>list</code> teisinga, pateikiama reikšmė Teisinga.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Nustatyti, ar kuri nors iš sąrašo išraiškų {true, false, 2 > 0} yra teisinga.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Nustatyti, ar kuri nors iš sąrašo išraiškų {2 = 0, false, 2 < 0} yra teisinga.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Pateikiamas reikšmių vidurkis. Veikia su skaičiaus, datos, datos ir laiko, datos, laiko ir juostos bei trukmės reikšmėmis.",
        "Documentation.LongDescription": "Pateikiama vidutinė sąrašo elementų reikšmė, <code>list</code>. Rezultatas pateikiamas tame pačiame duomenų tipe kaip sąrašo reikšmės. Veikia tik su skaičiaus, datos, laiko, datos ir laiko, datos, laiko ir juostos bei trukmės reikšmėmis.\r\n    Jei sąrašas yra tuščias, pateikiama neapibrėžta reikšmė.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Rasti skaičių sąrašo vidurkį, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Rasti datų reikšmių vidurkį: 2011 m. sausio 1 d., 2011 m. sausio 2 d. ir 2011 m. sausio 3 d.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Kaupia sąrašą.",
        "Documentation.LongDescription": "Kaupia sąrašą <code>list</code> atmintyje. Šio iškvietimo rezultatas yra pastovus sąrašas.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite pastovią sąrašo kopiją {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Pateikiamas vienas sąrašas, gautas sujungus keletą sąrašų.",
        "Documentation.LongDescription": "Paimamas sąrašų sąrašas, <code>lists</code>, ir suliejamas į vieną naują sąrašą.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite du paprastus sąrašus {1, 2} ir {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Sujunkite du sąrašus, {1, 2} ir {3, {4, 5}}, iš kurių viename yra įdėtasis sąrašas.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Pateikiamas sąrašo elementų skaičius.",
        "Documentation.LongDescription": "Pateikiamas sąrašo elementų skaičius <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Rasti sąrašo reikšmių skaičių {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Pateikiamas reikšmių sąrašas su pašalintais pasikartojimais.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kuriame yra visos sąrašo reikšmės <code>list</code> su pašalintais pasikartojimais. Jei sąrašas tuščias, rezultatas yra tuščias sąrašas.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite iš sąrašo pasikartojimus {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Pateikiama pirmoji sąrašo reikšmė arba nurodoma numatytoji, jei tuščia.",
        "Documentation.LongDescription": "Pateikiamas pirmasis sąrašo elementas <code>list</code> arba pasirenkama numatytoji reikšmė, <code>defaultValue</code>, jei sąrašas tuščias.\r\n    Jei sąrašas tuščias ir numatytoji reikšmė nenurodyta, funkcija pateikia <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Rasti pirmą sąrašo reikšmę {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Raskite pirmąją sąrašo reikšmę {}. Jei sąrašas yra tuščias, pateikiama -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Pateikiama įvestyje rastų sąrašo reikšmių sankirta.",
        "Documentation.LongDescription": "Pateikiama įvesties sąraše <code>lists</code> rastų sąrašo reikšmių sankirta. Galima nurodyti pasirinktinį parametrą, <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Rasti sąrašų sankirtą {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Nurodoma, ar sąraše yra pasikartojimų.",
        "Documentation.LongDescription": "Pateikiama loginė reikšmė, ar sąraše yra pasikartojimų <code>list</code>; <code>true</code>, jei sąrašas skiriasi, <code>false</code>, jei yra sutampančių reikšmių. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar sąrašas {1, 2, 3} skiriasi (t. y. nėra pasikartojimų).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar sąrašas {1, 2, 3, 3} skiriasi (t. y. nėra pasikartojimų).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Jei sąrašas tuščias, pateikiama Teisinga.",
        "Documentation.LongDescription": "Pateikiama <code>true</code>, jei sąraše, <code>list</code>, nėra reikšmių (ilgis – 0). Jei sąraše yra reikšmių (ilgis > 0), pateikiama <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, ar sąrašas {} tuščias.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Sužinokite, ar sąrašas {1, 2} tuščias.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Pateikiama paskutinė sąrašo reikšmė arba nurodyta numatytoji, jei tuščia.",
        "Documentation.LongDescription": "Pateikiamas paskutinis sąrašo elementas <code>list</code> arba pasirinktinė numatytoji reikšmė, <code>defaultValue</code>, jei sąrašas tuščias.\r\n    Jei sąrašas tuščias ir numatytoji reikšmė nenurodyta, funkcija pateikia <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite paskutinę sąrašo reikšmę {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Raskite paskutinę sąrašo reikšmę {} arba -1, jeigu jis tuščias.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Pateikiama paskutinė sąrašo reikšmė.  Galima pasirinktinai nurodyti, kiek reikšmių pateikti arba kvalifikacinę sąlygą.",
        "Documentation.LongDescription": "Pateikiamas paskutinis sąrašo <code>list</code> elementas. Jei sąrašas tuščias, pateikiama išimtis.\r\n Ši funkcija naudoja pasirinktinį parametrą <code>countOrCondition</code>, kad būtų galima surinkti kelis elementus arba filtruoti elementus. <code>countOrCondition</code> galima nurodyti trimis būdais:\r\n <ul>\r\n  <li>Jei nurodytas skaičius, pateikiama ne daugiau elementų, nei rodo šis skaičius. </li>\r\n  <li>Jei nurodyta sąlyga, pateikiami visi elementai, kurie iš pradžių atitinka sąlygą, pradedant nuo sąrašo pabaigos. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n  <li>Jei šis parametras neapibrėžtas, pateikiamas paskutinis sąrašo elementas.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite paskutinę sąrašo reikšmę {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Raskite paskutines sąrašo reikšmes {3, 4, 5, -1, 7, 8, 2}, kurios yra didesnės už 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Pateikiama didžiausia reikšmė arba numatytoji tuščio sąrašo reikšmė.",
        "Documentation.LongDescription": "Pateikiamas maksimalus sąrašo <code>list</code> elementas arba pasirenkama numatytoji reikšmė <code>default</code>, jei sąrašas tuščias.\r\n Pasirenkama comparisonCriteria reikšmė, <code>comparisonCriteria</code>, gali būti nurodyta norint nustatyti, kaip palyginti sąrašo elementus. Jei šis parametras neapibrėžtas, naudojama numatytoji lyginimo funkcija.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite maks. reikšmę sąraše {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Raskite maks. reikšmę sąraše {} arba pateikiama -1, jei jis tuščias. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Pateikiama sąrašo medianos reikšmė.",
        "Documentation.LongDescription": "Pateikiamas sąrašo <code>list</code> medianos elementas. Ši funkcija pateikia <code>null</code>, jei sąraše nėra ne <code>null</code> reikšmių.\r\n    Jei elementų skaičius yra lyginis, funkcija iš dviejų medianos elementų pasirenka mažesnįjį, išskyrus atvejus, kai sąrašą\r\n    sudaro vien datos, trukmės, skaičiai arba kartai, tokiu atveju ji pateikia dviejų elementų vidurkį.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite medianą sąraše <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Pateikiama tuščio sąrašo minimali reikšmė arba numatytoji reikšmė.",
        "Documentation.LongDescription": "Pateikiamas minimalus sąrašo <code>list</code> elementas arba pasirenkama numatytoji reikšmė <code>default</code>, jei sąrašas tuščias.\r\n    Pasirenkama comparisonCriteria reikšmė, <code>comparisonCriteria</code>, gali būti nurodyta norint nustatyti, kaip palyginti sąrašo elementus. Jei šis parametras neapibrėžtas, naudojama numatytoji lyginimo funkcija.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Raskite min. reikšmę sąraše {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Raskite min. reikšmę sąraše {} arba pateikiama -1, jei jis tuščias. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Pateikiama dažniausia sąrašo reikšmė.",
        "Documentation.LongDescription": "Pateikiamas elementas, kuris sąraše pasirodo dažniausiai, <code>list</code>. Jei sąrašas tuščias, pateikiama išimtis. Jei yra keli elementai, kurių maksimalus dažnumas yra toks pats, rodomas paskutinysis.\r\n    Pasirenkama <code>comparisonCriteria</code> reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygiateisiškumo bandymą. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Raskite elementą, kuris sąraše rodomas dažniausiai, <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Raskite elementą, kuris sąraše pasirodo dažniausiai, <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Pateikiamas dažniausių sąrašo reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas elementas, kuris sąraše pasirodo dažniausiai, <code>list</code>. Jei sąrašas tuščias, pateikiama išimtis. Jei yra keli elementai, kurių maksimalus dažnumas yra toks pats, rodomas paskutinysis.\r\n    Pasirenkama <code>comparisonCriteria</code> reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygiateisiškumo bandymą. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Raskite elementus, kurie sąraše rodomi dažniausiai, <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Pateikiamas ne neapibrėžtų sąrašo elementų skaičius.",
        "Documentation.LongDescription": "Pateikiamas ne neapibrėžtų sąrašo <code>list</code> elementų skaičius.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Pateikiamas įvesties poslinkių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas įvesties sąrašo <code>list</code> poslinkių sąrašas.\r\n    Naudojant List.Transform norint pakeisti sąrašą, galima naudoti padėčių sąrašą, kad padėčiai būtų suteikta transformavimo prieiga.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite reikšmių poslinkius sąraše {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Pateikiamas sąrašo skaičių produktas.",
        "Documentation.LongDescription": "Pateikiamas sąrašo ne neapibrėžtų skaičių produktas, <code>numbersList</code>. Jei sąraše nėra ne neapibrėžtų reikšmių, pateikiamas rezultatas yra lygus nuliui.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičių produktą sąraše <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Pateikiamas atsitiktinių skaičių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas sąrašas atsitiktinių skaičių nuo 0 iki 1 su generuotinų reikšmių skaičiumi ir pasirenkama pradine reikšme.\r\n<ul>\r\n   <li><code>count</code>: generuotinų atsitiktinių reikšmių skaičius.</li>\r\n   <li><code>seed</code>:  <i>[Pasirenkama]</i> skaitinė reikšmė, naudojama atsitiktinių skaičių generatoriaus pradinėms reikšmėms įtraukti. Jei praleista, kaskart iškviečiant funkciją sugeneruojamas unikalus atsitiktinių skaičių sąrašas. Jei nurodote pradinę reikšmę su skaičiumi, kiekvieną kartą iškviečiant funkciją sugeneruojamas tas pats atsitiktinių skaičių sąrašas.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite 3 atsitiktinių skaičių sąrašą.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Sukurkite 3 atsitiktinių skaičių sąrašą nurodydami pradinę reikšmę.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Pateikiamas sąrašas, kurio pradžioje praleistas nurodytas elementų skaičius.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kuriame pašalintas pirmasis sąrašo <code>list</code> elementas. Jei <code>list</code> yra tuščias sąrašas, pateikiamas tuščias sąrašas.\r\nŠi funkcija naudoja pasirenkamą parametrą <code>countOrCondition</code>, kad palaikytų kelių reikšmių pašalinimą, kaip nurodyta toliau.\r\n <ul>\r\n <li>Jei nurodytas skaičius, pašalinama iki tiek elementų, koks yra šis skaičius. </li>\r\n <li>Jei nurodyta sąlyga, pateiktas sąrašas prasideda pirmuoju <code>list</code> elementu, atitinkančiu kriterijus. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n <li>Jei šis parametras neapibrėžtas, nustatomas numatytasis veikimo būdas. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kurkite sąrašą iš {1, 2, 3, 4, 5} be pirmųjų 3 skaičių.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Kurkite sąrašą iš {5, 4, 2, 6, 1}, prasidedantį skaičiumi, mažesniu nei 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Pateikiamas sąrašas, kurio pabaigoje pašalintas nurodytas elementų skaičius.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kurio pabaigoje nėra <code>countOrCondition</code> paskutinių sąrašo <code>list</code> elementų. Jei <code>list</code> yra mažiau nei <code>countOrCondition</code> element., pateikiamas tuščias sąrašas.\r\n <ul>\r\n <li>Jei nurodytas skaičius, pašalinama iki tiek elementų, koks yra šis skaičius. </li>\r\n <li>Jei nurodyta sąlyga, pateiktas sąrašas baigiasi pirmuoju nuo apačios <code>list</code> elementu, atitinkančiu kriterijus. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n <li>Jei šis parametras neapibrėžtas, pašalinamas tik vienas elementas. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kurkite sąrašą iš {1, 2, 3, 4, 5} be paskutinių 3 skaičių.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Kurkite sąrašą iš {5, 4, 2, 6, 4}, kuris baigiasi skaičiumi, mažesniu nei 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Pašalinamos visos neapibrėžtos reikšmės iš nurodyto sąrašo.",
        "Documentation.LongDescription": "Pašalinami visi neapibrėžtų reikšmių atvejai, esantys <code>list</code>. Jei sąraše neapibrėžtų reikšmių nėra, pateikiamas pradinis sąrašas.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite visas neapibrėžtas reikšmes iš sąrašo {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Sąrašo reikšmių išdėstymo tvarka pakeičiama į atvirkštinę.",
        "Documentation.LongDescription": "Pateikiamas sąrašo <code>list</code> reikšmių sąrašas atvirkštine tvarka.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Kurkite sąrašą iš {1..10} atvirkštine tvarka.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Pateikiamas sąrašo, kurio ilgis lygus vienam, vienas sąrašo elementas, kitu atveju pateikiama išimtis.",
        "Documentation.LongDescription": "Jei sąraše <code>list</code> yra tik vienas elementas, pateikiamas tas elementas.\r\n    Jei yra daugiau nei vienas elementas arba jei sąrašas tuščias, funkcija pateikia išimtį.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite atskirą reikšmę sąraše {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Raskite atskirą reikšmę sąraše {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Pateikiamas sąrašo, kurio ilgis lygus vienam, vienas sąrašo elementas ir numatytoji reikšmė, jei sąrašas tuščias.",
        "Documentation.LongDescription": "Jei sąraše <code>list</code> yra tik vienas elementas, pateikiamas tas elementas.\r\n    Jei sąrašas tuščias, funkcija pateikia nulinį rezultatą, nebent yra nurodyta pasirenkama <code>default</code>. Jei sąraše yra daugiau nei vienas elementas, funkcija pateikia klaidą.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite atskirą reikšmę sąraše {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Raskite atskirą reikšmę sąraše {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Raskite atskirą reikšmę sąraše {}. Jei tuščias, pateikiama -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Pateikiamas sąrašas, kurio pradžioje praleistas nurodytas elementų skaičius.",
        "Documentation.LongDescription": "Pateikiamas sąrašas, kuriame praleidžiamas pirmasis sąrašo <code>list</code> elementas. Jei <code>list</code> yra tuščias sąrašas, pateikiamas tuščias sąrašas.\r\nŠi funkcija naudoja pasirenkamą parametrą <code>countOrCondition</code>, kad palaikytų kelių reikšmių praleidimą, kaip nurodyta toliau.\r\n <ul>\r\n <li>Jei nurodytas skaičius, praleidžiama iki tiek elementų, koks yra šis skaičius. </li>\r\n <li>Jei nurodyta sąlyga, pateiktas sąrašas prasideda pirmuoju <code>list</code> elementu, atitinkančiu kriterijus. Jei elementas neatitinka sąlygos, į tolesnius elementus neatsižvelgiama. </li>\r\n <li>Jei šis parametras neapibrėžtas, nustatomas numatytasis veikimo būdas. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Kurkite sąrašą iš {1, 2, 3, 4, 5} be pirmųjų 3 skaičių.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Kurkite sąrašą iš {5, 4, 2, 6, 1}, prasidedantį skaičiumi, mažesniu nei 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Rikiuoja duomenų sąrašą pagal nurodytus kriterijus.",
        "Documentation.LongDescription": "Rikiuoja duomenų sąrašą, <code>list</code>, pagal nurodytus pasirenkamus kriterijus.\r\n    Galima nurodyti pasirenkamą parametrą, <code>comparisonCriteria</code>, kaip palyginimo kriterijų. Jis gali apimti toliau nurodytas reikšmes:\r\n    <ul>\r\n    <li> Norint valdyti tvarką, palyginimo kriterijus gali būti tvarkos išvardijimo reikšmė. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Norint apskaičiuoti raktą, kuris bus naudojamas rikiuojant, galima naudoti 1 argumento funkciją. </li>\r\n    <li> Norint pasirinkti raktą ir valdyti tvarką, palyginimo kriterijus gali būti sąrašas, kuriame yra raktas ir tvarka (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Norint visiškai valdyti palyginimą, galima naudoti 2 argumentų funkciją. Ši funkcija pateiks du elementus iš sąrašo (bet kokius du elementus bet kokia tvarka). Funkcija turi pateikti vieną iš šių reikšmių:\r\n        <ul>\r\n            <li> <code>-1</code>: pirmas elementas yra mažesnis už antrą elementą.</li>\r\n            <li> <code>0</code>: elementai yra vienodi.</li>\r\n            <li> <code>1</code>: pirmas elementas yra didesnis už antrą elementą.</li>\r\n        </ul>\r\n        Value.Compare yra būdas, kuris gali būti naudojamas šiai logikai perduoti. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Rikiuokite sąrašą {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Rūšiuokite sąrašą {2, 3, 1} mažėjimo tvarka.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Rūšiuokite sąrašą {2, 3, 1} mažėjimo tvarka naudodami metodą Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Pateikiamas imtimi pagrįstas standartinio nuokrypio įvertinimas.",
        "Documentation.LongDescription": "Pateikiamas pavyzdžiu pagrįstas sąraše <code>numbersList</code> esančių reikšmių standartinio nuokrypio įvertinimas.\r\n    Jei <code>numbersList</code> yra skaičių sąrašas, pateikiamas skaičius.\r\n    Išimtis pateikiama tuščiame sąraše arba elementų, kurių tipas ne <code>number</code>, sąraše.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Raskite standartinį skaičių nuo 1 iki 5 nuokrypį.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Pateikiama sąrašo elementų suma.",
        "Documentation.LongDescription": "Pateikiama ne neapibrėžtų sąrašo reikšmių suma, <code>list</code>.  Jei sąraše nėra ne neapibrėžtų reikšmių, pateikiamas rezultatas yra lygus nuliui.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičių sumą sąraše <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Pateikiamas įvestyje rastų sąrašo reikšmių junginys.",
        "Documentation.LongDescription": "Imamas sąrašų <code>lists</code> sąrašas, sujungiami atskirų sąrašų elementai ir pateikiami išvesties sąraše. Rezultatas – pateiktame sąraše yra visi elementai iš visų įvesties sąrašų.\r\n    Ši operacija palaiko tradicinę dublikatų semantiką, todėl reikšmių dublikatai yra pritaikomi kaip sujungimo dalis.\r\n    Pasirenkama lygties kriterijų reikšmė, <code>equationCriteria</code>, gali būti nurodyta norint valdyti lygybės bandymą. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašo {1..5}, {2..6}, {3..7} junginį.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Sujungiant elementus toje pačioje kelių sąrašų padėtyje, pateikiamas sąrašų sąrašas.",
        "Documentation.LongDescription": "Paimamas sąrašų sąrašas – <code>lists</code> – ir, sujungiant elementus toje pačioje padėtyje, pateikiamas sąrašų sąrašas.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Suglaudinami du paprasti sąrašai {1, 2} ir {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Suglaudinami du paprasti skirtingų ilgių sąrašai {1, 2} ir {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama loginė reikšmė.",
        "Documentation.LongDescription": "Pateikiama <code>logical</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Logical.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> yra <code>logical</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>logical</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>logical</code> reikšmė iš tekstinės reikšmės, <code>true</code> arba <code>false</code>. Išsamiau žr. <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code>, jei <code>value</code> lygi <code>0</code>, kitu atveju – <code>true</code>.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>2</code> į <code>logical</code> reikšmę.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Iš tekstinių reikšmių „true“ ir „false“ sukuriama loginė reikšmė.",
        "Documentation.LongDescription": "Iš tekstinės reikšmės <code>text</code> – „true“ arba „false“ – sukuriama loginė reikšmė. Jei <code>text</code> yra kitokia eilutė, pateikiama išimtis. Tekstinėje reikšmėje <code>text</code> skiriamos didžiosios ir mažosios raidės.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite loginę reikšmę iš teksto eilutės „true“.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Sukurkite loginę reikšmę iš teksto eilutės „a“.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Pateikia tekstą kaip „true“ arba „false“ nurodžius loginę reikšmę.",
        "Documentation.LongDescription": "Sukuriama tekstinė reikšmė iš loginės reikšmės <code>logicalValue</code>, <code>true</code> arba <code>false</code>. Jei <code>logicalValue</code> nėra loginė reikšmė, pateikiama išimtis.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite tekstinę reikšmę iš loginės reikšmės <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Pateikiama absoliučioji skaičiaus reikšmė.",
        "Documentation.LongDescription": "Pateikiama absoliučioji <code>number</code> reikšmė. Jei <code>number</code> yra neapibrėžta, <code>Number.Abs</code> pateikia neapibrėžtą reikšmę.\r\n    <ul>\r\n        <li><code>number</code>: <code>number</code>, kurio absoliučioji reikšmė turi būti skaičiuojama.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Absoliučioji -3 reikšmė.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Pateikiamas skaičiaus arkkosinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> arkkosinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Pateikiamas skaičiaus arksinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> arksinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Pateikiamas skaičiaus arktangentas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> arktangentas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Pateikiamas baitas, kuriame kiekvienas bitas yra priešingas įvesčiai.",
        "Documentation.LongDescription": "Pateikiamas bitų „Not“ operacijos vykdymo <code>number</code> rezultatas.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Pateikiamas skaičiaus kosinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> kosinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Raskite kampo 0 kosinusą.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Pateikiamas skaičiaus hiperbolinis kosinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> hiperbolinis kosinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Pakelia e nurodytu laipsniu.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> laipsniu pakelto e rezultatas (eksponentinė funkcija).\r\n      <ul>\r\n        <li><code>number</code>: <code>number</code>, kurio eksponentinė funkcija turi būti skaičiuojama. Jei <code>number</code> yra neapibrėžta, <code>Number.Exp</code> pateikia neapibrėžtą reikšmę. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Pakelkite e 3 laipsniu.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Pateikiamas skaičiaus faktorialas.",
        "Documentation.LongDescription": "Pateikiamas skaičiaus <code>number</code> faktorialas.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičiaus 10 faktorialą.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas skaičius.",
        "Documentation.LongDescription": "Pateikiama <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).\r\nJei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Number.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>number</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>number</code> reikšmė iš tekstinės pateikties. Apdorojami įprasto teksto formatai („15“, „3,423.10“, „5.0E-10“). Išsamios informacijos ieškokite <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 kaip <code>true</code>, 0 kaip <code>false</code>.</li>\r\n        <li><code>datetime</code>: dvigubo tikslumo slankiojo kablelio skaičius, kuriame yra OLE automatizavimo datos atitikmuo.</li>\r\n        <li><code>datetimezone</code>: dvigubo tikslumo slankiojo kablelio skaičius, kuriame yra <code>value</code> vietos datos ir laiko OLE automatizavimo datos atitikmuo.</li>\r\n        <li><code>date</code>: dvigubo tikslumo slankiojo kablelio skaičius, kuriame yra OLE automatizavimo datos atitikmuo.</li>\r\n        <li><code>time</code>: išreiškiama dienų trupmenomis.</li>\r\n        <li><code>duration</code>: išreiškiama visomis dienomis ir dienų trupmenomis.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"4\"</code> <code>number</code> reikšmę.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite <code>#datetime(2020, 3, 20, 6, 0, 0)</code> <code>number</code> reikšmę.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Gaukite <code>12.3%</code> <code>number</code> reikšmę.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Sukuriami skaičiai iš įprasto teksto formatų („15“, „3,423.10“, „5.0E-10“).",
        "Documentation.LongDescription": "Pateikiama <code>number</code> reikšmė iš nurodytos tekstinės <code>text</code> reikšmės.\r\n <ul>\r\n  <li><code>text</code>: tekstinė skaičiaus reikšmės pateiktis. Pateiktis turi būti įprasto skaičių formato, pvz., „15“, „3,423.10“ arba „5.0E-10“.</li>\r\n  <li><code>culture</code>: pasirinktinė kultūra, kuria valdoma, kaip aiškinamas <code>text</code> (pvz., „en-US“).</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"4\"</code> skaičiaus reikšmę.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Gaukite <code>\"5.0e-10\"</code> skaičiaus reikšmę.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Nurodo, ar reikšmė yra daloma.",
        "Documentation.LongDescription": "Nurodo, ar reikšmė <code>number</code> yra daloma; jei daloma, pateikiama <code>true</code>, kitu atveju – <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar 625 yra lyginis skaičius.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Patikrinkite, ar 82 yra lyginis skaičius.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Nurodo, ar reikšmė yra NaN (Ne skaičius).",
        "Documentation.LongDescription": "Nurodo, ar reikšmė yra NaN (Ne skaičius). Pateikiama <code>true</code>, jei <code>number</code> yra ekvivalentiška <code>Number.IsNaN</code>; kitu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar 0, padalytas iš 0, yra NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Patikrinkite, ar 1, padalytas iš 0, yra NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Nurodoma, ar reikšmė yra nelyginė.",
        "Documentation.LongDescription": "Nurodoma, ar reikšmė yra nelyginė. Pateikiama <code>true</code>, jei <code>number</code> yra nelyginis skaičius; kitu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Patikrinkite, ar 625 yra nelyginis skaičius.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Patikrinkite, ar 82 yra nelyginis skaičius.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Pateikiamas natūrinis skaičiaus logaritmas.",
        "Documentation.LongDescription": "Pateikiamas natūrinis skaičiaus <code>number</code> logaritmas. Jeigu <code>number</code> yra neapibrėžta, <code>Number.Ln</code> pateikia neapibrėžtą reikšmę.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Gaukite natūrinį skaičiaus 15 logaritmą.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Pateikiamas skaičiaus logaritmas nurodytam pagrindui (numatytasis e).",
        "Documentation.LongDescription": "Pateikiamas skaičiaus <code>number</code> logaritmas nurodytu pagrindu <code>base</code>. Jei <code>base</code> yra nenurodyta, numatytoji reikšmė yra Number.E.\r\n    Jei <code>number</code> yra neapibrėžta, <code>Number.Log</code> pateikia neapibrėžtą reikšmę.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Gaukite skaičiaus 2 dešimtainį logaritmą.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Gaukite skaičiaus 2 logaritmą, kurio pagrindas e.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Pateikiamas skaičiaus dešimtainis logaritmas.",
        "Documentation.LongDescription": "Pateikiamas skaičiaus <code>number</code> dešimtainis logaritmas. Jei <code>number</code> yra neapibrėžta, <code>Number.Log10</code> pateikia neapibrėžtą reikšmę.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Gaukite skaičiaus 2 dešimtainį logaritmą.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Pateikiamas suapvalintas skaičius. Galima nurodyti skaitmenų skaičių ir apvalinimo režimą.",
        "Documentation.LongDescription": "Pateikia <code>number</code> apvalinimo iki artimiausio skaičiaus rezultatą. Jei <code>number</code> yra „null“, <code>Number.Round</code> pateikia „null“.<br>\r\n      <br>\r\n      Pagal numatytuosius parametrus <code>number</code> apvalinamas iki artimiausio sveikojo skaičiaus, o ryšiai yra išskaidomi suapvalinant iki artimiausio lyginio skaičiaus (naudojant <code>RoundingMode.ToEven</code>, taip pat žinomą kaip „bankininko apvalinimas“).<br>\r\n      <br>\r\n      Tačiau šias numatytąsias reikšmes galima perrašyti naudojant toliau nurodytus pasirinktinius parametrus.\r\n      <ul>\r\n        <li><code>digits</code>: suapvalina <code>number</code> iki nurodyto dešimtainių skaitmenų skaičiaus.</li>\r\n        <li><code>roundingMode</code>: perrašo numatytąjį ryšių skaidymo veikimą, kai <code>number</code> yra viduryje tarp dviejų galimų suapvalintų reikšmių\r\n      (galimas reikšmes žr. <code>RoundingMode.Type</code>).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Apvalinkite 1,234 iki artimiausio sveikojo skaičiaus.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Apvalinkite 1,56 iki artimiausio sveikojo skaičiaus.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Apvalinkite 1,2345 iki dviejų dešimtainio skyriklio vietų.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Apvalinkite 1,2345 iki trijų dešimtainio skyriklio vietų (apvalinimas į didesniąją pusę).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Apvalinkite 1,2345 iki trijų dešimtainio skyriklio vietų (apvalinimas į mažesniąją pusę).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Pateikiamas teigiamų skaičių apvalinimo į didesniąją pusę ir neigiamų skaičių apvalinimo į mažesniąją pusę rezultatas. Gali būti nurodytas skaitmenų skaičius.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> apvalinimo rezultatas, atsižvelgiant į skaičiaus ženklą. Ši funkcija suapvalins teigiamus skaičius į didesniąją pusę ir neigiamus skaičius į mažesniąją pusę.\r\n    Jei nurodyta <code>digits</code>, <code>number</code> suapvalinama iki <code>digits</code> dešimtainių skaitmenų skaičiaus.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Apvalinkite skaičių -1,2 tolyn nuo nulio.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Apvalinkite skaičių 1,2 tolyn nuo nulio.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Suapvalinkite -1,234 dviejų dešimtųjų dalių tikslumu nuo nulio.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Pateikiamas didžiausias ankstesnis skaičius. Galima nurodyti skaitmenų skaičių.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> apvalinimo į mažesniąją pusę iki ankstesnio didžiausio sveikojo skaičiaus rezultatas. Jei <code>number</code> yra null, ši funkcija pateikia null.\r\n\r\n    Jei nurodyta <code>digits</code>, <code>number</code> suapvalinama iki nurodyto dešimtainių skaitmenų skaičiaus.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Apvalinkite 1,234 į mažesniąją pusę iki sveikojo skaičiaus.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Apvalinkite 1,999 į mažesniąją pusę iki sveikojo skaičiaus.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Suapvalinkite 1,999 į mažėjimo pusę iki dviejų dešimtųjų dalių.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Pateikiamas teigiamų skaičių apvalinimo į mažesniąją pusę ir neigiamų skaičių apvalinimo į didesniąją pusę rezultatas. Galima nurodyti skaitmenų skaičių.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> apvalinimo rezultatas, atsižvelgiant į skaičiaus ženklą. Ši funkcija suapvalins teigiamus skaičius į mažesniąją pusę ir neigiamus skaičius į didesniąją pusę.\r\n    Jei nurodyta <code>digits</code>, <code>number</code> suapvalinama iki <code>digits</code> dešimtainių skaitmenų skaičiaus.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Apvalinkite skaičių -1,2 link nulio.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Apvalinkite skaičių 1,2 link nulio.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Suapvalinkite -1,234 iki dviejų dešimtainių dalių nulio link.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Pateikiamas paskesnis didžiausias skaičius. Galima nurodyti skaitmenų skaičių.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> apvalinimo iki kito didžiausio sveikojo skaičiaus rezultatas. Jei <code>number</code> yra null, ši funkcija pateikia null.\r\n    Jei nurodyta <code>digits</code>, <code>number</code> suapvalinama iki nurodyto dešimtainių skaitmenų skaičiaus.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Apvalinkite 1,234 į didesniąją pusę iki sveikojo skaičiaus.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Apvalinkite 1,999 į didesniąją pusę iki sveikojo skaičiaus.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Suapvalinkite 1,234 iki dviejų dešimtainių dalių.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Pateikiamas 1, jei skaičius yra teigiamas, -1, jei skaičius yra neigiamas, ir 0, jei skaičius yra nulis.",
        "Documentation.LongDescription": "Pateikiamas 1, jei <code>number</code> yra teigiamas skaičius, -1, jei skaičius yra neigiamas, ir 0, jei skaičius yra nulis.\r\n    Jei <code>number</code> yra null, <code>Number.Sign</code> pateikia null.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite skaičiaus 182 ženklą.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Nustatykite skaičiaus -182 ženklą.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Nustatykite skaičiaus 0 ženklą.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Pateikiamas skaičiaus sinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> sinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Raskite kampo 0 sinusą.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Pateikiamas skaičiaus hiperbolinis sinusas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> hiperbolinis sinusas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Pateikiama skaičiaus kvadratinė šaknis.",
        "Documentation.LongDescription": "Pateikiama <code>number</code> kvadratinė šaknis.\r\n    Jei <code>number</code> yra neapibrėžta, <code>Number.Sqrt</code> pateikia neapibrėžtą reikšmę. Jei tai neigiama reikšmė, pateikiama <code>Number.NaN</code> (Ne skaičius).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite skaičiaus 625 kvadratinę šaknį.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Raskite skaičiaus 85 kvadratinę šaknį.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Pateikiamas skaičiaus tangentas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> tangentas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Raskite kampo 1 tangentą.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Pateikiamas skaičiaus hiperbolinis tangentas.",
        "Documentation.LongDescription": "Pateikiamas <code>number</code> hiperbolinis tangentas.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Pateiktą skaičių konvertuoja į tekstą.",
        "Documentation.LongDescription": "Konvertuoja skaitinę reikšmę <code>number</code> į tekstinę reikšmę pagal formatą, nurodytą <code>format</code>.<br>\r\n    <br>\r\n    Formatas yra tekstinė reikšmė, nurodanti, kaip skaičius turi būti konvertuojamas. Jei reikia daugiau informacijos apie palaikomas formato reikšmes, eikite į https://go.microsoft.com/fwlink/?linkid=2241210 ir https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pvz., „en-US“), kad galėtumėte valdyti nuo kultūros priklausomą <code>format</code> veikimo būdą.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Konvertuoti skaičių į tekstą nenurodant formato.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Konvertuoti skaičių į eksponentinį formatą.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Konvertuoti skaičių į procentinės dalies formatą naudojant tik su vieną skaičių po kablelio.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Pateikiama „OData“ informacijos santraukų, kurias siūlo „OData“ tarnyba, lentelė.",
        "Documentation.LongDescription": "Pateikiama „OData“ tarnybos siūlomų „OData“ informacijos santraukų lentelė iš URI <code>serviceUri</code>, antraščių <code>headers</code>. Galima nurodyti Bulio logikos reikšmę, nurodančią, ar naudoti vienalaikius ryšius, ar pasirinktinio įrašo parametrą, <code>options</code>, kad būtų galima valdyti toliau pateiktas parinktis.\r\n    <ul>\r\n    <li><code>Query</code>: programiškai įtraukite užklausos parametrus į URL nesirūpindami dėl kaitos. </li>\r\n    <li> <code>Headers</code>: nurodžius šią reikšmę kaip įrašą, į HTTP užklausą bus įtraukta papildomų antraščių.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: nurodžius šią reikšmę kaip sąrašą, apskaičiuojant talpykloje kaupiamus duomenis nebus naudojami šie HTTP antraščių raktai.</li>\r\n    <li> <code>ApiKeyName</code>: jei paskirties svetainėje žinomas API raktas, naudojant šį parametrą galima nurodyti URL adrese naudotino rakto parametro pavadinimą (bet ne reikšmę). Faktinė rakto reikšmė nurodyta kredencialuose.</li>\r\n    <li> <code>Timeout</code>: nurodžius šią reikšmę kaip trukmę, bus pakeistas HTTP užklausos skirtasis laikas. Numatytoji reikšmė yra 600 sekundžių.</li>\r\n    <li> <code>EnableBatch</code>: loginė reikšmė („true“ / „false“), kuri nustato, ar leisti generuoti „OData“ $batch užklausą, jei viršyta reikšmė MaxUriLength reikšmė (numatytoji reikšmė yra „false“).</li>\r\n    <li> <code>MaxUriLength</code>: skaičius, kuris nurodo maksimalų leidžiamą „OData“ tarnybai siunčiamo URI ilgį. Jei ilgis viršytas ir reikšmė EnableBatch yra „true“, užklausa bus pateikta „OData“ $batch galiniam punktui, kitu atveju jos pateikti nepavyks (numatytoji reikšmė yra 2048).</li>\r\n    <li> <code>Concurrent</code>: loginė reikšmė („true“ / „false“). Jei nustatyta reikšmė „true“, užklausos tarnybai teikiamos tuo pačiu metu. Jei nustatyta reikšmė „false“, užklausos teikiamos viena po kitos. Jei reikšmė nenurodyta, ją lems tarnybos komentaras AsynchronousRequestsSupported. Jei tarnyba nenurodo, ar AsynchronousRequestsSupported yra palaikomas, užklausos bus teikiamos viena po kitos.</li>\r\n    <li> <code>ODataVersion</code>: skaičius (3 arba 4), nurodantis „OData“ protokolo versiją, kurią turi naudoti ši „OData“ tarnyba. Jei nenurodyta, bus prašoma visų palaikomų versijų. Tarnybos versiją lems tarnybos pateikta antraštė „OData-Version“.</li>\r\n    <li> <code>FunctionOverloads</code>: loginė reikšmė („true“ / „false“). Jei nustatyta reikšmė „true“, funkcijos importavimo perkrovos naršyklėje bus išvardytos kaip atskiri įrašai. Jei nustatyta reikšmė „false“, funkcijos importavimo perkrovos naršyklėje bus išvardytos kaip viena bendra funkcija. Numatytoji 3 versijos reikšmė: „false“. Numatytoji 4 versijos reikšmė: „true“.</li>\r\n    <li> <code>MoreColumns</code>: loginė reikšmė („true“ / „false“). Jei nustatyta reikšmė „true“, į kiekvieno objekto informacijos santrauką įtraukiamas stulpelis Daugiau stulpelių su atviraisiais ir polimorfiniais tipais. Jame bus nurodyti pagrindiniame tipe nepaskelbti laukai. Jei nustatyta reikšmė „false“, šio lauko nebus. Numatytoji reikšmė yra „false“.</li>\r\n    <li> <code>IncludeAnnotations</code>: kableliais atskirtų vardų sričiai tinkamų terminų pavadinimų ar šablonų, įtrauktinų su * (kaip pakaitos simbolis), sąrašas. Pagal numatytuosius parametrus neįtraukiami jokie komentarai.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: kableliais atskirtų vardų sričiai tinkamų terminų pavadinimų ar šablonų, įtrauktinų metaduomenų dokumentų užklausose (kaip pakaitos simbolis), sąrašas. Pagal numatytuosius parametrus įtraukiami tie patys komentarai kaip IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code>: leidžia „OData“ tarnybai rašant atsakymus nerašyti tam tikrų reikšmių. Jei tarnyba patvirtina, šios reikšmės bus nustatytos iš praleistų laukų. Galimos parinktys:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code>: „OData“ tarnybai leidžiama praleisti Null reikšmes.</li>\r\n     </ul>\r\n    </li>\r\n    <li><code>Implementation</code>: nurodo, kurią „OData“ jungtį naudoti. Tinkamos reikšmės yra 2.0 arba Null.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Prisijunkite prie „TripPin“ „OData“ tarnybos.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Pateikiamas bandymo nustatyti ODBC tvarkyklės SQL galimybes rezultatas.",
        "Documentation.LongDescription": "Pateikiamas bandymo nustatyti SQL galimybes su jungimosi eilute <code>connectionString</code> naudojant ODBC rezultatas. <code>connectionString</code> gali būti tekstas arba ypatybės reikšmių porų įrašas. Ypatybės reikšmės gali būti tekstas arba skaičiai.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Jungimosi eilutės numanomų SQL galimybių pateikimas.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "„Parquet“ dokumento turinys pateikiamas kaip lentelė.",
        "Documentation.LongDescription": "Pateikiamas „Parquet“ dokumento turinys kaip lentelė. Galimos parinktys:\n    <ul>\n    <li> <code>TypeMapping</code>: teksto reikšmė, valdanti numatytąjį tipo susiejimą skaitant ir rašant failus. Numatytoji reikšmė yra nulinė ir bandoma išlaikyti kuo didesnį pradinio tipo tikslumą. „SQL“ reikšmė pateiks rezultatus, labiausiai suderinamus su „SQL Server“.</li>\n    </ul>",
        "Documentation.Category": "Pasiekiami duomenys",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Pasiekiami duomenys",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Pateikiama nurodytos reikšmės procentinė reikšmė.",
        "Documentation.LongDescription": "Pateikiama <code>percentage</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Percentage.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>text</code> su po jos pateikiamu procento simboliu, bus pateiktas konvertuotas dešimtainis skaičius. Kitu atveju reikšmė bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.From</code>. Taip pat gali būti pateiktas pasirenkamas <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>12.3%</code><code>percentage</code> reikšmę.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Pateikiamas duomenų kadrų įrašas iš RData failo.",
        "Documentation.LongDescription": "Pateikiamas duomenų kadrų įrašas iš RData failo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Sujungiami nurodyto sąrašo įrašai.",
        "Documentation.LongDescription": "Sujungiami nurodyto <code>records</code> įrašai. Jei <code>records</code> yra ne įrašo reikšmių, pateikiama klaida.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sujungtą įrašą iš įrašų.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Pateikiamas laukų skaičius įraše.",
        "Documentation.LongDescription": "Pateikiamas laukų skaičius įraše <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Raskite laukų skaičių įraše.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Pateikiami laukų pavadinimai.",
        "Documentation.LongDescription": "Pateikiami laukų įraše <code>record</code> pavadinimai kaip tekstas.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite laukų pavadinimus įraše.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Pateikiamas lauko reikšmių sąrašas.",
        "Documentation.LongDescription": "Pateikiamas lauko reikšmių įraše <code>record</code> sąrašas.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Raskite laukų reikšmes įraše.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Sukuriamas įrašas iš lentelės, kurios forma {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Pateikiamas įrašas iš įrašų lentelės <code>table</code> su laukų ir reikšmių pavadinimais <code>{[Name = name, Value = value]}</code>. Jei laukų pavadinimai neunikalūs, pateikiama išimtis.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite įrašą iš lentelės, kurios forma Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Pateikiamas reikšmių sąrašas su įvesties įrašų laukų reikšmėmis.",
        "Documentation.LongDescription": "Pateikiamas reikšmių sąrašas su laukų reikšmėmis iš įvesties <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Išskleiskite laukų reikšmes iš įrašo.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Pateikia abstrakčiosios sintaksės medį (AST), nurodantį prieigą prie stulpelio eilutės reiškinyje.",
        "Documentation.LongDescription": "Pateikia abstrakčiosios sintaksės medį (AST), nurodantį prieigą prie eilutės stulpelio <code>columnName</code> eilutės reiškinyje.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Sukuriamas AST, nurodantis prieigą prie stulpelio CustomerName.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Pateikia funkcijos turinio abstrakčiosios sintaksės medį (AST).",
        "Documentation.LongDescription": "<p>Pateikia <code>function</code> turinio, normalizuoto į <i>eilutės reiškinį</i>, abstrakčiosios sintaksės medį (AST):\r\n<ul>\r\n  <li>Funkcija turi būti 1 argumento lambda.</li>\r\n  <li>Visos funkcijos parametro nuorodos pakeičiamos naudojant <code>RowExpression.Row</code>.</li>\r\n  <li>Visos stulpelių nuorodos pakeičiamos naudojant <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>AST bus supaprastintas, kad jame būtų tik rūšių mazgai:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Pateikiama klaida, jei nepavyksta pateikti eilutės reiškinio AST, skirto <code>function</code> turiniui.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamas funkcijos <code>each [CustomerID] = \"ALFKI\"</code> turinio AST",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas paprastojo tikslumo skaičius.",
        "Documentation.LongDescription": "Pateikiama viengubo tikslumo <code>number</code> reikšmė iš nurodytos <code>value</code> reikšmės. Jei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Single.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>number</code> viengubo tikslumo skaičių diapazone, pateikiama <code>value</code>; kitu atveju pateikiama klaida. Jei <code>value</code> reikšmė yra bet kokio kito tipo, ji pirmiausia bus konvertuota į <code>number</code> reikšmę naudojant <code>Number.FromText</code>. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Gaukite paprastojo tikslumo <code>number</code> reikšmę iš <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Pateikiama duomenų iš „Smartsheet“ rodyklės galinio punkto lentelė.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Iškviečia „Smartsheet 2.0“ REST API nurodytame galiniame punkte ir transformuoja duomenų elementą, grąžintą į lentelę.",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama vartotojų informacijos iš „Smartsheet“ API lentelė",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Lentelė su vartotojų informacija, kurią pateikė „Smartsheet“ API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties bet kuriais nurodytais skyrikliais.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties bet kuriais nurodytais skyrikliais.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį kableliu arba kabliataškiu, nepaisydami kabučių ir kabutėmis apskliaustų skyriklių, pradėdami nuo įvesties pradžios.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Išskaidykite įvestį kableliu arba kabliataškiu, nepaisydami kabučių ir kabutėmis apskliaustų skyriklių, pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal nurodytą skyriklį.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal nurodytą skyriklį.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį kableliu, nepaisydami kablelių kabutėse.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties kiekvienu nurodytu skyrikliu sekoje.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties kiekvienu nurodytu skyrikliu sekoje.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį kableliu, tada kabliataškiu, pradėdami nuo įvesties pradžios.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Išskaidykite įvestį kableliu, tada kabliataškiu, kabutes traktuodami kaip bet kurį kitą simbolį ir pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal kiekvieną nurodytą ilgį.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal kiekvieną nurodytą ilgį.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį į pirmus du simbolius, po kurių seka kiti trys, pradėdami nuo įvesties pradžios.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Išskaidykite įvestį į pirmus tris simbolius, po kurių seka kiti du, pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties kiekviena nurodyta padėtimi.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą ties kiekviena nurodyta padėtimi.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį nurodytose padėtyse pradėdami nuo įvesties pradžios.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Išskaidykite įvestį nurodytose padėtyse pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal nurodytus poslinkius ir ilgius.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pagal nurodytus poslinkius ir ilgius. Null ilgis rodo, kad reikia įtraukti visą likusią įvestį.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Išskaidykite įvestį pagal nurodytą padėtį ir ilgio poras pradėdami nuo įvesties pradžios. Atkreipkite dėmesį, kad diapazonai šiame pavyzdyje persidengia.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Išskaidykite įvestį pagal nurodytą padėtį ir ilgio poras pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Išskaidykite įvestį į fiksuoto ilgio pašto indeksą, po kurio pateikiamas kintamojo ilgio miesto pavadinimas.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pakartotinai po nurodyto ilgio.",
        "Documentation.LongDescription": "Pateikiama funkcija, kuri išskaido tekstą į teksto sąrašą pakartotinai po nurodyto ilgio.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Pakartotinai išskaidykite įvestį į trijų simbolių segmentus pradėdami nuo įvesties pradžios.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Pakartotinai išskaidykite įvestį į trijų simbolių segmentus pradėdami nuo įvesties pabaigos.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Pateikiamas apytikslis eilučių skaičius lentelėje.",
        "Documentation.LongDescription": "Pateikiamas apytikslis eilučių skaičius <code>table</code> arba klaida, jei duomenų šaltinis nepalaiko apytikslio įvertinimo.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Apskaičiuokite skirtingų miesto ir šalies derinių didelėje lentelėje skaičių, kuris gali būti naudojamas kaip stulpelių kardinalumo įvertinimas. Kardinalumo įvertinimai yra pakankamai svarbūs, kad įvairūs duomenų šaltiniai (pvz., „SQL Server“) palaikytų šį konkretų apytikslį įvertinimą, dažnai naudojant algoritmą, vadinamą „HyperLogLog“.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Pateikiamas lentelės stulpelių skaičius.",
        "Documentation.LongDescription": "Pateikiamas lentelės <code>table</code> stulpelių skaičius.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Raskite stulpelių skaičių lentelėje.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Pateikiami stulpelių pavadinimai kaip sąrašas.",
        "Documentation.LongDescription": "Pateikiami lentelės <code>table</code> stulpelių pavadinimai kaip teksto sąrašas.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite lentelės stulpelių pavadinimus.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Pateikiama pirmoji nurodytos numatytosios reikšmės eilutė.",
        "Documentation.LongDescription": "Pateikiama pirmoji <code>table</code> eilutė arba pasirenkama numatytoji reikšmė <code>default</code>, jei lentelė yra tuščia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite pirmąją lentelės eilutę.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Raskite pirmąją lentelės <code>({})</code> eilutę arba pateikiama [a = 0, b = 0], jei lentelė tuščia.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Pateikiamas lentelės pirmosios eilutės pirmasis stulpelis arba nurodyta numatytoji reikšmė.",
        "Documentation.LongDescription": "Pateikiamas lentelės <code>table</code> pirmosios eilutės pirmasis stulpelis arba nurodyta numatytoji reikšmė.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Nurodoma, ar lentelėje yra tik skirtingos eilutės (be pasikartojimų).",
        "Documentation.LongDescription": "Nurodoma, ar <code>table</code> yra tik skirtingos eilutės (be pasikartojimų). Pateikiama <code>true</code>, jei eilutės yra skirtingos; priešingu atveju pateikiama <code>false</code>.\r\n    Pasirenkamas parametras <code>comparisonCriteria</code> nurodo, kurie lentelės stulpeliai tikrinami, ar nėra pasikartojantys. Jei <code>comparisonCriteria</code> nenurodytas, tikrinami visi stulpeliai.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelė yra skirtinga.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Nustatykite, ar lentelė yra skirtinga stulpelyje.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Nurodoma, ar lentelėje yra eilučių.",
        "Documentation.LongDescription": "Nurodoma, ar <code>table</code> yra eilučių. Pateikiama <code>true</code>, jei eilučių nėra (t. y. lentelė yra tuščia); priešingu atveju pateikiama <code>false</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar lentelė yra tuščia.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Nustatykite, ar lentelė <code>({})</code> yra tuščia.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Pateikiami nurodytos lentelės raktai.",
        "Documentation.LongDescription": "Pateikiami nurodytos lentelės raktai.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Gaukite lentelės raktų sąrašą.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Pateikiama paskutinioji nurodytos numatytosios reikšmės eilutė.",
        "Documentation.LongDescription": "Pateikiama paskutinė <code>table</code> eilutė arba pasirenkama numatytoji reikšmė <code>default</code>, jei lentelė yra tuščia.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Raskite paskutinę lentelės eilutę.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Raskite paskutinę lentelės <code>({})</code> eilutę arba pateikiama [a = 0, b = 0], jei lentelė tuščia.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Pateikiamas eilučių skaičius lentelėje.",
        "Documentation.LongDescription": "Pateikiamas eilučių skaičius <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Raskite eilučių skaičių lentelėje.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Pateikiama viena eilutė lentelėje.",
        "Documentation.LongDescription": "Pateikiama viena eilutė vienos eilutės <code>table</code>. Jei <code>table</code> yra daugiau nei viena eilutė, pateikiama išimtis.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Pateikite vieną eilutę lentelėje.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Sukuriamas stulpelio reikšmių iš lentelės įdėtųjų sąrašų sąrašas.",
        "Documentation.LongDescription": "Sukuriamas įdėtųjų sąrašų sąrašas iš lentelės, <code>table</code>.  Kiekvienas sąrašo elementas yra vidinis sąrašas, kuriame yra stulpelių reikšmės.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite stulpelio reikšmių sąrašą iš lentelės.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Lentelė konvertuojama į sąrašą kiekvienai lentelės reikšmių eilutei pritaikant nurodytą sujungimo funkciją.",
        "Documentation.LongDescription": "Lentelė konvertuojama į sąrašą kiekvienai lentelės reikšmių eilutei pritaikant nurodytą sujungimo funkciją.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite kiekvienos eilutės tekstą, naudodami kablelį.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Lentelė konvertuojama į įrašų sąrašą.",
        "Documentation.LongDescription": "Lentelė <code>table</code> konvertuojama į įrašų sąrašą.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite lentelę į įrašų sąrašą.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Sukuriamas eilutės reikšmių iš lentelės įdėtųjų sąrašų sąrašas.",
        "Documentation.LongDescription": "Sukuriamas įdėtųjų sąrašų sąrašas iš lentelės <code>table</code>.  Kiekvienas sąrašo elementas yra vidinis sąrašas, kuriame yra eilučių reikšmės.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą eilučių reikšmių iš lentelės.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Sukuriamas modifikuotas klaidos įrašas, kuris nesuaktyvins atsarginio įrašo, kai jį pateikia rodinyje apibrėžta apdorojimo programa (per Table.View).",
        "Documentation.LongDescription": "Sukuriamas modifikuotas klaidos įrašas iš <code>errorRecord</code>, kuris nesuaktyvins atsarginio įrašo, kai jį pateikia rodinyje apibrėžta apdorojimo programa (per Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Sukuriama funkcija, kurią gali perimti rodinyje nurodyta apdorojimo programa (per Table.View).",
        "Documentation.LongDescription": "<p>Pagal <code>function</code> sukuriama rodinio funkcija, kurią galima apdoroti <code>Table.View</code> sukurtame rodinyje.</p>\r\n<p><code>Table.View</code> <code>OnInvoke</code> apdorojimo programą galima naudoti kaip rodinio funkcijos apdorojimo programą.</p>\r\n<p>Kaip ir naudojant integruotų operacijų apdorojimo programas, jei<code>OnInvoke</code> apdorojimo programa nėra nurodyta, jei ji neapdoroja rodinio funkcijos arba jei kyla apdorojimo programos klaida, rodiniui taikoma <code>function</code>.</p>\r\n<p>Išsamesnį <code>Table.View</code> ir pasirinktinių rodinio funkcijų aprašą žiūrėkite publikuotuose „Power Query“ tinkinamos jungties dokumentuose.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Pateikiama tekstinė reikšmė su pašalintais visais valdymo simboliais.",
        "Documentation.LongDescription": "Pateikiama tekstinė reikšmė su pašalintais visais <code>text</code> valdymo simboliais.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite įvedimo į eilutę ir kitus valdymo simbolius iš tekstinės reikšmės.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Tekstinių reikšmių sąrašas sujungiamas į vieną tekstinę reikšmę.",
        "Documentation.LongDescription": "Pateikiamas tekstinių reikšmių sąrašo, <code>texts</code>, sujungimo į vieną tekstinę reikšmę rezultatas. Visų <code>null</code> reikšmių, esančių <code>texts</code> , nepaisoma.\r\n    Galima nurodyti pasirinktinį <code>separator</code>, naudojamą galutiniame bendrame tekste.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Sujunkite tekstines reikšmes „Seattle“ ir „WA“.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Sujunkite tekstines reikšmes „Seattle“ ir „WA“ atskirdami kableliu ir tarpu.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Sujunkite reikšmes „Seattle“, <code>null</code> ir „WA“, atskirdami kableliais ir tarpu. (Atkreipkite dėmesį, kad <code>null</code> nepaisoma.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriama tekstinė reikšmė.",
        "Documentation.LongDescription": "Pateikiama tekstinė <code>value</code> pateiktis. <code>value</code> gali būti <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> arba <code>binary</code> reikšmė.\r\n    Jei pateikta reikšmė yra null, <code>Text.From</code> pateikia null. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite tekstinę reikšmę iš skaičiaus 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Duomenys dekoduojami iš dvejetainės formos į tekstą.",
        "Documentation.LongDescription": "Duomenys <code>binary</code> dekoduojami iš dvejetainės reikšmės į tekstinę reikšmę naudojant <code>encoding</code> tipą.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Nustatomas tekste užkoduoto skaičiaus detalizuoto skaičiaus tipas (Int64.Type, Double.Type ir t. t.).",
        "Documentation.LongDescription": "Nustatomas <code>text</code> granuliuoto skaičiaus tipas (Int64.Type, Double.Type ir t. t.). Pateikiama klaida, jei <code>text</code> nėra skaičius. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Pateikiamas simbolių skaičius.",
        "Documentation.LongDescription": "Pateikiamas simbolių tekste <code>text</code> skaičius.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Sužinokite, kiek simbolių yra tekste „Hello World“.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Visi simboliai konvertuojami į mažąsias raides.",
        "Documentation.LongDescription": "Pateikiamas visų <code>text</code> simbolių konvertavimo į mažąsias raides rezultatas. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Gaukite „AbCd“ mažųjų raidžių versiją.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Kiekvieno žodžio pirmoji raidė pakeičiama į didžiąją.",
        "Documentation.LongDescription": "Pateikiamas tik pirmosios raidės kiekvieno žodžio tekstinėje reikšmėje <code>text</code> keitimo į didžiąją rezultatas. Visos kitos raidės pateikiamos kaip mažosios. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Naudokite <code>Text.Proper</code> paprastajame sakinyje.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Nurodytas <code>text</code> pakeičiamas atvirkštine tvarka.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Tekstas 123 atvirkštine tvarka.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Tekstas koduojamas į dvejetainę formą.",
        "Documentation.LongDescription": "Nurodyta tekstinė reikšmė <code>text</code> koduojama į dvejetainę reikšmę naudojant nurodytą <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Pateikiamas sąrašas simbolių reikšmių iš nurodytos tekstinės reikšmės.",
        "Documentation.LongDescription": "Pateikiamas sąrašas simbolių reikšmių iš nurodytos tekstinės reikšmės <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite sąrašą simbolių reikšmių iš teksto „Hello World“.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Pašalinami visi tarpai priekyje ir gale.",
        "Documentation.LongDescription": "Pateikiamas visų tarpų priekyje ir gale pašalinimo iš tekstinės reikšmės <code>text</code> rezultatas.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite tarpą priekyje ir gale iš „     a b c d    “.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Pašalinami visi tarpai gale.",
        "Documentation.LongDescription": "Pateikiamas visų tarpų gale pašalinimo iš tekstinės reikšmės <code>text</code> rezultatas.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite tarpą gale iš „     a b c d    “.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Pašalinami visi tarpai priekyje.",
        "Documentation.LongDescription": "Pateikiamas visų tarpų priekyje pašalinimo iš tekstinės reikšmės <code>text</code> rezultatas.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Pašalinkite tarpą priekyje iš „     a b c d    “.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Visi simboliai konvertuojami į didžiąsias raides.",
        "Documentation.LongDescription": "Pateikiamas visų <code>text</code> simbolių konvertavimo į didžiąsias raides rezultatas. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Gaukite „aBcD“ didžiųjų raidžių versiją.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Pateikia valandos pabaigą.",
        "Documentation.LongDescription": "Pateikiama valandos, pateikiamos <code>dateTime</code> (įskaitant sekundės dalis), pabaiga. Išsaugoma laiko juostos informacija.\r\n      <ul>\r\n        <li><code>dateTime</code>: <code>time</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė, pagal kurią apskaičiuojama valandos pabaiga.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Gaukite 2011 05 14 05:00:00 po pietų valandos pabaigą.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Gaukite 2011 05 17 17:00:00 valandos pabaigą -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Iš nurodytos reikšmės sukuriamas laikas.",
        "Documentation.LongDescription": "Pateikiama <code>time</code> reikšmė iš nurodytos <code>value</code> reikšmės. Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).\r\nJei nurodyta <code>value</code> reikšmė yra <code>null</code>, <code>Time.From</code> pateikia <code>null</code>. Jei nurodyta <code>value</code> reikšmė yra <code>time</code>, pateikiama <code>value</code>. Toliau nurodytų tipų reikšmės gali būti konvertuojamos į <code>time</code> reikšmę:\r\n      <ul>\r\n        <li><code>text</code>: <code>time</code> reikšmė iš tekstinės pateikties. Išsamiau žr. <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: <code>value</code> laiko komponentas.</li>\r\n        <li><code>datetimezone</code>: vietinio datos ir laiko atitikmens <code>value</code> laiko komponentas.</li>\r\n        <li><code>number</code>: <code>time</code> reikšmė, atitinkanti dienų trupmenų, išreikštų <code>value</code>, skaičių. Jei <code>value</code> yra neigiamas, didesnis arba lygus 1 skaičius, pateikiama klaida.</li>\r\n      </ul>\r\nJei <code>value</code> yra bet kokio kito tipo, pateikiama klaida.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>0.7575</code> į <code>time</code> reikšmę.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Konvertuokite <code>#datetime(1899, 12, 30, 06, 45, 12)</code> į <code>time</code> reikšmę.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Iš vietinio, universaliojo ir pasirinktinio Time formatų sukuriame Time reikšmė.",
        "Documentation.LongDescription": "Sukuriama <code>time</code> reikšmė iš tekstinės pateikties <code>text</code>. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>record</code> gali būti šie laukai:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code> reikšmę, laikas bus analizuojamas naudojant geriausią bandymą.</li>\r\n   <li><code>Culture</code>: kai <code>Format</code> reikšmė nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"tt\"</code> yra <code>\"AM\" or \"PM\"</code>, o kai naudojama <code>\"ar-EG\"</code>, <code>\"tt\"</code> yra <code>\"ص\" or \"م\"</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>.</li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> taip pat gali būti tekstinė reikšmė. Tai veikia taip pat kaip tuo atveju, kai <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>\"10:12:31am\"</code> į laiko reikšmę.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Konvertuokite <code>\"1012\"</code> į laiko reikšmę.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Konvertuokite <code>\"10\"</code> į laiko reikšmę.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Pateikiamas valandų komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>time</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės valandų komponentas, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Raskite valandas #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Pateikiamas minučių komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>time</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės minučių komponentas, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Raskite minutes #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Pateikiamas antrasis komponentas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos <code>time</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmės antrasis komponentas (<code>dateTime</code>).",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Raskite antrąją reikšmę iš reikšmės Data / laikas.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Pateikiama valandos pradžia.",
        "Documentation.LongDescription": "Pateikiama dienos, kurioje yra <code>dateTime</code>, pradžia.\r\n    <code>dateTime</code> turi būti <code>time</code>, <code>datetime</code> arba <code>datetimezone</code> reikšmė.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Rasti 2011 m. spalio 10 d. 8:10:32 valandos pradžią.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Pateikiamas įrašas su laiko reikšmės dalimis.",
        "Documentation.LongDescription": "Pateikiamas įrašas su pateiktos laiko reikšmės dalimis: <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: <code>time</code> reikšmė, kurią naudojant apskaičiuojamas dalių įrašas.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#time(11, 56, 2)</code> reikšmę į įrašą, kuriame yra laiko reikšmės.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Pateikiama laiko reikšmės tekstinė pateiktis.",
        "Documentation.LongDescription": "Pateikiama <code>time</code> tekstinė pateiktis. Papildomoms ypatybėms nurodyti gali būti pateikiamas pasirenkamas <code>record</code> parametras <code>options</code>. <code>culture</code> naudojamas tik senstelėjusioms darbo eigoms. <code>record</code> gali būti šie laukai:\r\n<ul>\r\n   <li><code>Format</code>: <code>text</code> reikšmė, nurodanti reikiamą naudoti formatą. Išsamiau žr. https://go.microsoft.com/fwlink/?linkid=2180104 ir https://go.microsoft.com/fwlink/?linkid=2180105. Praleidus šį lauką arba pateikus <code>null</code> reikšmę, data bus suformatuota naudojant numatytąsias reikšmes, apibrėžtas lauke <code>Culture</code>.</li>\r\n   <li><code>Culture</code>: Kai <code>Format</code> nėra „null“, <code>Culture</code> valdo kai kuriuos formato specifikatorius. Pavyzdžiui, kai naudojama <code>\"en-US\"</code>, <code>\"tt\"</code> yra <code>\"AM\" or \"PM\"</code>, o kai naudojama <code>\"ar-EG\"</code>, <code>\"tt\"</code> yra <code>\"ص\" arba \"م\"</code>. Kai <code>Format</code> yra <code>null</code>, <code>Culture</code> valdo numatytąjį formatą, kuris turi būti naudojamas. Kai <code>Culture</code> yra <code>null</code> arba praleista, naudojama <code>Culture.Current</code>.</li>\r\n</ul>\r\nKad būtų palaikomos senstelėjusios darbo eigos, <code>options</code> ir <code>culture</code> taip pat gali būti tekstinės reikšmės. Tai veikia taip pat kaip tuo atveju, kai  <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Konvertuokite <code>#time(01, 30, 25)</code> į <code>tekstinę</code> reikšmę. <i>Rezultatų išvestis gali skirtis atsižvelgiant į dabartinę kultūrą.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Konvertuokite naudodami pasirinktinį formatą ir vokiečių kultūrą.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Konvertuokite naudodami standartinį laiko formatą.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Pateikiama uždaryta nurodyto įrašo tipo versija (arba to paties tipo, jei jau uždaryta).",
        "Documentation.LongDescription": "Pateikiama uždaryta nurodyto <code>record</code> <code>type</code> versija (arba to paties tipo, jei jau uždaryta).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite <code>type [ A = number,…]</code> tipo uždarytą versiją.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Pateikiami tipo aspektai.",
        "Documentation.LongDescription": "Pateikiamas įrašas, kuriame yra <code>type</code> aspektai.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Pateikiamas įrašas, kurio laukų reikšmės yra funkcijos tipo parametrų pavadinimai ir nustatytos atitinkamos tipų reikšmės.",
        "Documentation.LongDescription": "Pateikiamas įrašas, kurio laukų reikšmės yra <code>type</code> parametrų pavadinimai ir nustatytos atitinkamos tipų reikšmės.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Raskite funkcijos <code>(x as number, y as text)</code> parametrų tipus.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Pateikiamas skaičius, nurodantis minimalų skaičių parametrų, reikalingą funkcijos tipui iškviesti.",
        "Documentation.LongDescription": "Pateikiamas skaičius, nurodantis minimalų skaičių parametrų, reikalingą funkcijos įvesčiai <code>type</code> iškviesti.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Raskite funkcijos <code>(x as number, optional y as text)</code> reikalingų parametrų skaičių.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Pateikiamas funkcijos tipo pateiktas tipas.",
        "Documentation.LongDescription": "Pateikiamas funkcijos <code>type</code> pateiktas tipas.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Raskite <code>() as any)</code> pateikimo tipą.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Pateikiama reikšmė „true“, jei tipas neapibrėžtas. Kitais atvejais pateikiama „false“.",
        "Documentation.LongDescription": "Pateikiama <code>true</code>, jei tipas yra <code>nullable</code>; kitais atvejais – <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar <code>number</code> neapibrėžtas.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Nustatykite, ar <code>type nullable number</code> neapibrėžtas.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Nurodo, ar įrašo tipas atidarytas.",
        "Documentation.LongDescription": "Pateikiama <code>logical</code> reikšmė, nurodanti, ar įrašas <code>type</code> atidarytas.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Nustatykite, ar įrašas <code>type [ A = number, ...]</code> atidarytas.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Pateikiamas elemento tipas iš sąrašo tipo.",
        "Documentation.LongDescription": "Pateikiamas elemento tipas iš sąrašo <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Raskite elemento tipą sąraše <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Pateikiamas ne neapibrėžtas tipas iš tipo.",
        "Documentation.LongDescription": "Pateikiamas <code>nullable</code> tipas iš <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pateikiamas ne neapibrėžtas <code>type nullable number</code> tipas.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Pateikiama atidaryta nurodyto įrašo tipo versija (arba to paties tipo, jei jau atidaryta).",
        "Documentation.LongDescription": "Pateikiama atidaryta nurodyto <code>record</code> <code>type</code> versija (arba to paties tipo, jei jau atidaryta).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Sukurkite <code>type [ A = number,…]</code> tipo atidarytą versiją.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Pateikiamas įrašas, aprašantis įrašo tipo laukus, o pateikiamo įrašų tipo kiekvienas laukas turi atitinkamą pavadinimą ir reikšmę.",
        "Documentation.LongDescription": "Pateikiamas įrašo <code>type</code> laukus aprašantis įrašas. Kiekvienas pateikto įrašų tipo laukas turi atitinkamą pavadinimą ir reikšmę, kurie pateikti kaip įrašas <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Raskite įrašo <code>[ A = number, optional B = any]</code> pavadinimą ir reikšmę.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Pateikiamas galimai tuščias nurodyto lentelės tipo raktų sąrašas.",
        "Documentation.LongDescription": "Pateikiamas galimai tuščias nurodyto lentelės tipo raktų sąrašas.<br>\r\n    <br>\r\n    Kiekvienas raktas apibrėžiamas naudojant šios formos įrašą:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: stulpelių pavadinimų, kurie apibrėžia raktą\r, sąrašas\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code>, jei raktas yra lentelės pirminis raktas; kitu atveju <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pateikia lentelės tipo raktų informacija.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Pateikiamas lentelės tipo eilutės tipas.",
        "Documentation.LongDescription": "Pateikiamas nurodyto lentelės tipo eilutės tipas. Rezultatas visada bus įrašo tipas.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Pateikite paprastos lentelės eilutės tipo informaciją.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Pateikiamas jungtinis tipų sąrašas.",
        "Documentation.LongDescription": "Pateikiamas tipų junginys naudojant <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Įtraukite įrašą į URI užklausos eilutę.",
        "Documentation.LongDescription": "Įtraukite įrašą <code>query</code> į URI užklausos eilutę, jei reikia, naudodami kaitos simbolius.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Užkoduokite užklausos eilutę, kurioje yra specialiųjų simbolių.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Užkoduokite specialiuosius simbolius pagal RFC 3986.",
        "Documentation.LongDescription": "Užkoduokite specialiuosius simbolius, esančius įvestyje <code>data</code>, pagal RFC 3986 taisykles.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Užkoduokite specialiuosius simbolius, esančius „+money$“.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Pateikiamos įvesties absoliučiojo URI dalys kaip įrašas.",
        "Documentation.LongDescription": "Pateikiamos įvesties <code>absoluteUri</code> dalys kaip įrašas, kuriame yra reikšmės, pvz., Scheme, Host, Port, Path, Query, Fragment, UserName ir Password.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Raskite absoliutaus URI „www.adventure-works.com“ dalis.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Iškoduoti eilutę, užkoduotą procento simboliais.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Įveskite „Azure DevOps“ analizės tarnybos URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Pateikiamas iš „Azure DevOps“ analizės tarnybos URL kaip dvejetainė reikšmė atsisiųstas turinys. Ši funkcija skirtingoms organizacijoms naudoja skirtingus kredencialus."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Įveskite „Azure DevOps“ analizės tarnybos URL.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Pateikiamas iš „Azure DevOps“ analizės tarnybos URL kaip dvejetainė reikšmė atsisiųstas turinys. Ši funkcija visai pasiekiamai organizacijai naudoja visuotinius kredencialus."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Išreiškiami alternatyvūs užklausų planai.",
        "Documentation.LongDescription": "Išreiškiami alternatyvūs užklausų planai užklausos plano reiškinyje, gautame per Value.Expression(Value.Optimize(...)). Neskirta naudoti kitais tikslais.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Pateikia abstrakčiosios sintaksės medį (AST), nurodantį reikšmės reiškinį.",
        "Documentation.LongDescription": "Pateikia abstrakčiosios sintaksės medį (AST), nurodantį reikšmės reiškinį.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Sukuriama griežtai įvesta reikšmė iš tekstinės išraiškos.",
        "Documentation.LongDescription": "Dekoduojama reikšmė iš tekstinės pateikties <code>text</code> ir interpretuojama kaip atitinkamo tipo reikšmė.\r\n    <code>Value.FromText</code> naudoja tekstinę reikšmę ir pateikia skaičių, loginę reikšmę, neapibrėžtą reikšmę, datos ir laiko reikšmę, trukmės reikšmę arba tekstinę reikšmę. Tuščia tekstinė reikšmė interpretuojama kaip neapibrėžta reikšmė.\r\n    Taip pat gali būti pateiktas pasirinktinis <code>culture</code> (pavyzdžiui, „en-US“).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Pateikiamas įrašas, kuriame yra įvesties metaduomenys.",
        "Documentation.LongDescription": "Pateikiamas įrašas, kuriame yra įvesties metaduomenys.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Duoda ženklą Value.Expression, kad pateiktų optimizuotą reikšmės reiškinį.",
        "Documentation.LongDescription": "Kai naudojama reiškinyje Value.Expression, jei <code>value</code> reiškia užklausą, kurią galima optimizuoti, ši funkcija nurodo, kad turi būti pateiktas optimizuotas reiškinys. Priešingu atveju <code>value</code> bus perduota be jokio poveikio.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Perduodama metaduomenų įvestis.",
        "Documentation.LongDescription": "Perduodama metaduomenų įvestis.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Pateikiamas nurodytos reikšmės tipas.",
        "Documentation.LongDescription": "Pateikiamas nurodytos reikšmės tipas.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.LongDescription": "Ši funkcija skirta tik įmonės vidaus reikmėms.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Pateikia nurodyto URL HTML, kaip rodoma žiniatinklio naršyklėje.",
        "Documentation.LongDescription": "Pateikiama žiniatinklio naršyklėje peržiūrimo nurodyto <code>url</code> HTML. Norint nurodyti papildomas ypatybes galima nurodyti pasirenkamą įrašo parametrą <code>options</code>. Įraše gali būti šie laukai:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: jei paskirties svetainėje žinomas API raktas, naudojant šį parametrą galima nurodyti URL naudojamo rakto parametro pavadinimą (bet ne reikšmę). Faktinė rakto reikšmė nurodyta kredencialuose.</li>\r\n        <li><code>WaitFor</code>: nurodo sąlygą, kurios papildomai reikia sulaukti prieš įkeliant HTML, be laukimo, kol bus įkeltas puslapis (ką reikia daryti visada). Tai gali būti įrašas su laukais „Timeout“ ir (arba) „Selector“. Jei nurodyta tik lauko „Timeout“ reikšmė, funkcija prieš atsisiųsdama HTML lauks nurodytą laiko intervalą. Jei nurodytos abiejų laukų („Selector“ ir „Timeout“) reikšmės ir skirtasis laikas baigiasi anksčiau nei puslapyje atsiranda išrinkiklis, bus parodyta klaida. Jei lauko „Selector“ reikšmė yra nurodyta, o lauko „Timeout“ – ne, bus taikomas numatytasis 30 sekundžių skirtasis laikas.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Prieiga prie duomenų",
        "Documentation.Examples": [
          {
            "Description": "Pateikiama https://microsoft.com HTML.",
            "Code": "Web.BrowserContents (\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Sulaukus, kol atsiranda CSS išrinkiklis, pateikiama https://microsoft.com HTML.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div:visible\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Palaukus dešimt sekundžių pateikiama https://microsoft.com HTML.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Palaukus iki dešimt sekundžių, kol atsiranda CSS išrinkiklis, pateikiama https://microsoft.com HTML.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div:visible\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Pateikiamas turinys, atsisiųstas iš URL kaip dvejatainis.",
        "Documentation.LongDescription": "Pateikiamas iš <code>url</code> atsisiųstas turinys kaip dvejetainis. Norint nurodyti papildomas ypatybes, gali būti pateikiamas pasirenkamas įrašo parametras, <code>options</code>. Į įrašą gali būti įtraukti šie laukai:\r\n    <ul>\r\n<li><code>Query</code> : Programiniu būdu įtraukite užklausos parametrus į URL nesirūpindami dėl kaitos.</li>\r\n<li><code>ApiKeyName</code> : Jei paskirties svetainėje žinomas API raktas, naudojant šį parametrą galima nurodyti URL naudojamo rakto parametro pavadinimą (bet ne reikšmę). Faktinė rakto reikšmė nurodyta kredencialuose.</li>\r\n<li><code>Headers</code> : Nurodžius šią reikšmę kaip įrašą, į HTTP užklausą bus įtraukta papildomų antraščių.</li>\r\n<li><code>Timeout</code> : Nurodant šią reikšmę kaip trukmę bus pakeistas HTTP užklausos skirtasis laikas. Numatytoji reikšmė yra 100 sekundžių.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Nurodant šią reikšmę kaip sąrašą, šie HTTP antraščių raktai nebus įtraukti į duomenų gavimo skaičiavimą.</li>\r\n<li><code>IsRetry</code> : Nurodant šią loginę reikšmę kaip teisingą, bus nepaisoma visų talpykloje esamų atsakymų, kai gaunami duomenys.</li>\r\n<li><code>ManualStatusHandling</code> : Nurodžius šią reikšmę kaip sąrašą, bus neleidžiama vykdyti jokio įtaisytojo HTTP užklausų, kurių atsakas nurodo kurį nors iš šių būsenos kodų, apdorojimo.</li>\r\n<li><code>RelativePath</code> : Nurodžius šią reikšmę kaip tekstą, prieš pateikiant užklausą ji pridedama prie pagrindinio URL.</li>\r\n<li><code>Content</code> : Nurodžius šią reikšmę, žiniatinklio užklausa GET pakeičiama į POST kaip POST turinį naudojant parinkties reikšmę.</li>\r\n</ul>\r\n\r\n    HTTP užklausa pateikiama kaip GET (kai nenurodytas turinys) arba POST (kai yra turinys). POST užklausas galima pateikti tik anonimiškai.\r\n    <br>\r\n    HTTP atsakymo antraštės pasiekiamos kaip dvejetainio rezultato metaduomenys. Už pasirinktinės duomenų jungties konteksto ribų galimas tik atsakymo antraščių poaibis (saugumo sumetimais).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Gaukite <code>\"https://bing.com/search?q=Power+Query\"</code> turinį naudodami RelativePath ir užklausos parinktis. Šios parinktys gali būti naudojamos pateikti dinamiškas užklausas statinio pagrindo URL.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Atlikite funkciją SKELBTI pagal URL, perduodami dvejetainio JSON paketo turinį ir analizuodami atsaką kaip JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Prisijunkite prie saugaus URL, kuris kaip užklausos eilutės dalį priima autentifikavimo raktą. Užuot užprogramavus slaptąjį raktą M (tai gali kelti grėsmę saugai), \r\n raktą galima saugiai pateikti nurodant jo pavadinimą (ne jo reikšmę) M, pasirinkdami žiniatinklio API autentifikavimą ir įvesdami rakto reikšmę kaip žiniatinklio API credential.\r\n Naudojant tokiu būdu, toliau pateiktame pavyzdyje bus sugeneruota užklausa <code>\"https://contoso.com/api/customers/get?api_key=**\"\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Pateikiamos HTTP antraštės, atsisiųstos iš URL kaip įrašo reikšmė.",
        "Documentation.LongDescription": "Pateikiamos iš <code>url</code> atsisiųstos antraštės kaip įrašas. Norint nurodyti papildomas ypatybes, gali būti pateiktas pasirenkamas įrašo parametras, <code>options</code>. Įraše gali būti šie laukai:\r\n    <ul>\r\n<li><code>Query</code> : Programiniu būdu įtraukite užklausos parametrus į URL nesirūpindami dėl kaitos.</li>\r\n<li><code>ApiKeyName</code> : Jei paskirties svetainėje žinomas API raktas, naudojant šį parametrą galima nurodyti URL naudojamo rakto parametro pavadinimą (bet ne reikšmę). Faktinė rakto reikšmė nurodyta kredencialuose.</li>\r\n<li><code>Headers</code> : Nurodžius šią reikšmę kaip įrašą, į HTTP užklausą bus įtraukta papildomų antraščių.</li>\r\n<li><code>Timeout</code> : Nurodant šią reikšmę kaip trukmę bus pakeistas HTTP užklausos skirtasis laikas. Numatytoji reikšmė yra 100 sekundžių.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Nurodant šią reikšmę kaip sąrašą, šie HTTP antraščių raktai nebus įtraukti į duomenų gavimo skaičiavimą.</li>\r\n<li><code>IsRetry</code> : Nurodant šią loginę reikšmę kaip teisingą, bus nepaisoma visų talpykloje esamų atsakymų, kai gaunami duomenys.</li>\r\n<li><code>ManualStatusHandling</code> : Nurodžius šią reikšmę kaip sąrašą, bus neleidžiama vykdyti jokio įtaisytojo HTTP užklausų, kurių atsakas nurodo kurį nors iš šių būsenos kodų, apdorojimo.</li>\r\n<li><code>RelativePath</code> : Nurodžius šią reikšmę kaip tekstą, prieš pateikiant užklausą ji pridedama prie pagrindinio URL.</li>\r\n</ul>\r\n\r\n    HTTP užklausa pateikta naudojant HEAD metodą. Už pasirinktinės duomenų jungties konteksto ribų galimas tik atsakymų antraščių poaibis (saugumo sumetimais).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Naudodami „RelativePath“ ir „Query“ parinktis gaukite <code>\"https://bing.com/search?q=Power+Query\"</code> HTTP antraštes.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Autorizavimo kontekstas, pagal kurį vertinama prieigos teisių įrašo (ACE) sąlyga.",
        "Documentation.LongDescription": "Autorizavimo kontekstas, pagal kurį vertinama prieigos teisių įrašo (ACE) sąlyga.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Prieigos teisių įrašų (ACE) lentelė.",
        "Documentation.LongDescription": "Sutvarkyta prieigos teisių įrašų (ACE) lentelė, nurodanti autorizavimo taisykles. Kiekviena eilutė vertinama atsižvelgiant į dabartinį autorizavimo kontekstą (tvarką) ir taikoma taisyklė nustatoma pagal pirmąją eilutę, kurios reikšmę „true“ pateikia reiškinys <code>Condition</code>. Stulpelyje <code>Action</code> nurodomas veiksmo tipas, kuriam taikoma taisyklė. Stulpelis <code>AccessControlKind</code> nustato, ar veiksmo prieiga bus leidžiama, ar draudžiama.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Nurodo prieigos valdymo tipą.",
        "Documentation.LongDescription": "Nurodo prieigos valdymo tipą.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Tipas, atitinkantis visas reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Tipas, atitinkantis visas dvejetaines reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas dvejetaines reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Nurodomas dvejetainio kodavimo tipas.",
        "Documentation.LongDescription": "Nurodomas dvejetainio kodavimo tipas.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Nurodoma, kiek kartų elementas turi pasirodyti grupėje.",
        "Documentation.LongDescription": "Nurodoma, kiek kartų elementas turi pasirodyti grupėje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Aprašo atliktino sukaupimo tipą.",
        "Documentation.LongDescription": "Aprašo atliktino sukaupimo tipą.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Tipas, atitinkantis visus baitus.",
        "Documentation.LongDescription": "Tipas, atitinkantis visus baitus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Nurodoma baitų tvarka.",
        "Documentation.LongDescription": "Nurodoma baitų tvarka.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Tipas, nurodantis visus simbolius.",
        "Documentation.LongDescription": "Tipas, nurodantis visus simbolius.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Nurodomas glaudinimo tipas.",
        "Documentation.LongDescription": "Nurodomas glaudinimo tipas.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Nurodomas pasiūlymų reikšmingumas CSV dokumentuose.",
        "Documentation.LongDescription": "Nurodomas pasiūlymų reikšmingumas CSV dokumentuose.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Tipas, kuris reiškia valiutos reikšmę.",
        "Documentation.LongDescription": "Tipas, kuris reiškia valiutos reikšmę.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Tipas, atitinkantis visas datos reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas datos reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Tipas, atitinkantis visas datos ir laiko reikšmes be susijusios laiko juostos.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas datos ir laiko reikšmes be susijusios laiko juostos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Tipas, atitinkantis visas datos ir laiko reikšmes, susijusias su laiko juosta.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas datos ir laiko reikšmes, susijusias su laiko juosta.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Nurodoma savaitės diena.",
        "Documentation.LongDescription": "Nurodoma savaitės diena.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Tipas, kuris reiškia fiksuoto kablelio dešimtainę trupmeną.",
        "Documentation.LongDescription": "Tipas, kuris reiškia fiksuoto kablelio dešimtainę trupmeną.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Tipas, kuris reiškia dvigubo tikslumo slankiojo kablelio skaičių.",
        "Documentation.LongDescription": "Tipas, kuris reiškia dvigubo tikslumo slankiojo kablelio skaičių.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Tipas, atitinkantis visas trukmės reikšmes",
        "Documentation.LongDescription": "Tipas, atitinkantis visas trukmės reikšmes",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Nurodomas numatytas veiksmas, taikomas papildomoms reikšmėms, esančioms eilutėje, kurioje yra daugiau stulpelių, nei tikėtasi.",
        "Documentation.LongDescription": "Nurodomas numatytas veiksmas, taikomas papildomoms reikšmėms, esančioms eilutėje, kurioje yra daugiau stulpelių, nei tikėtasi.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Tipas, nurodantis visas funkcijas.",
        "Documentation.LongDescription": "Tipas, nurodantis visas funkcijas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Nurodomas grupavimo tipas.",
        "Documentation.LongDescription": "Kelios vietinės grupės gali būti sukurtos naudojant tą pačią pagrindinę reikšmę, bet sukuriama tik viena nurodytos pagrindinės reikšmės visuotinė grupė.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tipas, atitinkantis Guid reikšmę.",
        "Documentation.LongDescription": "Tipas, atitinkantis Guid reikšmę.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Tapatybė nurodo vartotoją, grupę, įrenginį arba kitą identifikuojamą elementą.",
        "Documentation.LongDescription": "Tapatybė nurodo vartotoją, grupę, įrenginį arba kitą identifikuojamą elementą.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Apibrėžia aprėptį, kurioje tapatybes kuriamos ir lyginamos.",
        "Documentation.LongDescription": "Apibrėžia aprėptį, kurioje tapatybes kuriamos ir lyginamos.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Tipas, kuris reiškia 16 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Tipas, kuris reiškia 16 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Tipas, kuris reiškia 32 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Tipas, kuris reiškia 32 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Tipas, kuris reiškia 64 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Tipas, kuris reiškia 64 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Tipas, kuris reiškia 8 bitų sveikąjį skaičių su ženklu.",
        "Documentation.LongDescription": "Tipas, kuris reiškia 8 bitų sveikąjį skaičių su ženklu.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Nurodomas sujungimo algoritmas, kuris bus naudojamas atliekant sujungimo operaciją.",
        "Documentation.LongDescription": "Nurodomas sujungimo algoritmas, kuris bus naudojamas atliekant sujungimo operaciją.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Nurodomas sujungimo operacijos tipas.",
        "Documentation.LongDescription": "Nurodomas sujungimo operacijos tipas.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Nurodo kairiąją arba dešiniąją sujungimo lentelę.",
        "Documentation.LongDescription": "Nurodo kairiąją arba dešiniąją sujungimo lentelę.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Apibūdinama limito sąlyga, kurią palaiko šio duomenų šaltinio naudojamas SQL dialektas.",
        "Documentation.LongDescription": "Apibūdinama limito sąlyga, kurią palaiko šio duomenų šaltinio naudojamas SQL dialektas.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Tipas, atitinkantis visus sąrašus.",
        "Documentation.LongDescription": "Tipas, atitinkantis visus sąrašus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Tipas, atitinkantis visas logines reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas logines reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Nurodomas numatytas veiksmas, kuris taikomas, kai eilutėje, kurioje yra mažiau stulpelių, nei tikėtasi, trūksta reikšmių.",
        "Documentation.LongDescription": "Nurodomas numatytas veiksmas, kuris taikomas, kai eilutėje, kurioje yra mažiau stulpelių, nei tikėtasi, trūksta reikšmių.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Tipas, atitinkantis neapibrėžtas reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis neapibrėžtas reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Tipas, nurodantis visus skaičius.",
        "Documentation.LongDescription": "Tipas, nurodantis visus skaičius.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Nurodo reikšmių rūšis, kurias „OData“ tarnyba gali praleisti.",
        "Documentation.LongDescription": "Nurodo reikšmių rūšis, kurias „OData“ tarnyba gali praleisti.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Nurodomas elemento pasikartojimas sekoje.",
        "Documentation.LongDescription": "Nurodomas elemento pasikartojimas sekoje.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Nurodoma rikiavimo kryptis.",
        "Documentation.LongDescription": "Nurodoma rikiavimo kryptis.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Tipas, nurodantis teksto slaptažodį.",
        "Documentation.LongDescription": "Tipas, nurodantis teksto slaptažodį.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tipas, atitinkantis procentinę reikšmę.",
        "Documentation.LongDescription": "Tipas, atitinkantis procentinę reikšmę.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Nurodomas procentilio režimo tipas.",
        "Documentation.LongDescription": "Nurodomas procentilio režimo tipas.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Nurodomas palyginimo tikslumas.",
        "Documentation.LongDescription": "Nurodomas palyginimo tikslumas.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Nurodomas kabučių naudojimo stilius.",
        "Documentation.LongDescription": "Nurodomas kabučių naudojimo stilius.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Nurodo reitingavimo tipą.",
        "Documentation.LongDescription": "Nurodo reitingavimo tipą.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Tipas, nurodantis visus įrašus.",
        "Documentation.LongDescription": "Tipas, nurodantis visus įrašus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Parodoma, ar indeksavimą reikia atlikti nuo įvesties pradžios ar galo.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Nurodoma apvalinimo kryptis, kai yra ryšys tarp skaičių, iki kurių galima apvalinti.",
        "Documentation.LongDescription": "Nurodoma apvalinimo kryptis, kai yra ryšys tarp skaičių, iki kurių galima apvalinti.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Tinkamos „SAP Business Warehouse“ vykdymo režimo parinkties parinktys.",
        "Documentation.LongDescription": "Tinkamos „SAP Business Warehouse“ vykdymo režimo parinkties parinktys.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Tinkamos SAP HANA paskirstymo parinktys.",
        "Documentation.LongDescription": "Tinkamos SAP HANA paskirstymo parinktys.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Diapazono operatorius, skirtas SAP HANA diapazono įvesties parametrams.",
        "Documentation.LongDescription": "Diapazono operatorius, skirtas SAP HANA diapazono įvesties parametrams.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Tipas, kuris reiškia paprastojo tikslumo slankiojo kablelio skaičių.",
        "Documentation.LongDescription": "Tipas, kuris reiškia paprastojo tikslumo slankiojo kablelio skaičių.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Protokolas, kuris bus naudojamas jungiantis prie „Spark“ egzemplioriaus.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Tipas, atitinkantis visas lenteles.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas lenteles.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Tipas, atitinkantis visas tekstines reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas tekstines reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Nurodomas teksto kodavimo tipas.",
        "Documentation.LongDescription": "Nurodomas teksto kodavimo tipas.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Tipas, atitinkantis visas laiko reikšmes.",
        "Documentation.LongDescription": "Tipas, atitinkantis visas laiko reikšmes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Nurodomas sekimo lygis.",
        "Documentation.LongDescription": "Nurodomas sekimo lygis.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Tipas, atitinkantis visus tipus.",
        "Documentation.LongDescription": "Tipas, atitinkantis visus tipus.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Tipas, atitinkantis teksto URI.",
        "Documentation.LongDescription": "Tipas, atitinkantis teksto URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Nurodomas HTTP metodas.",
        "Documentation.LongDescription": "Nurodomas HTTP metodas.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
