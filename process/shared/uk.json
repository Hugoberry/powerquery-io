{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Повертає структурне представлення бази даних Access.",
        "Documentation.LongDescription": "Повертає структурне представлення бази даних Access <code>database</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Повертає бази даних служб аналізу Analysis Services на певному хості.",
        "Documentation.LongDescription": "Повертає бази даних з екземпляра Analysis Services <code>server</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Параметр із логічним значенням, що визначає, чи використовувати в доданих стовпцях мір типи, указані в багатовимірній або табличній моделі. Якщо вказати значення false, для всіх стовпців мір використовуватиметься тип number. Стандартне значення цього параметра&#160;– false.</li>\r\n<li><code>Culture</code> : Ім’я культури, що визначає культуру для даних. Відповідає властивості Locale Identifier в рядку підключення.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення залежить від драйвера.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>SubQueries</code> : Числовий параметр (0, 1 або 2), що визначає значення властивості SubQueries у рядку підключення. Цей параметр керує поведінкою обчислюваних членів у вибраних фрагментах або підкубах. (Стандартне значення: 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Куби AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Дає змогу імпортувати або отримати методом DirectQuery дані кубів з AtScale.",
        "Documentation.LongDescription": "\r\nПовертає дані кубів з AtScale на сервері <code>server</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: логічне значення, що визначає, чи використовувати в доданих стовпцях мір типи, указані в багатовимірній або табличній моделі. Якщо вказати значення false, для всіх стовпців мір використовуватиметься тип \"number\". Стандартне значення цього параметра – false.</li>\r\n        <li><code>CommandTimeout</code>: параметр тривалості (у секундах), що визначає, як довго дозволено працювати запиту на боці сервера до скасування. Стандартне значення залежить від драйвера. </li>\r\n        <li><code>ConnectionTimeout</code>: параметр тривалості (у секундах), що визначає, як довго очікувати на підключення до сервера, перш ніж перервати спробу. Стандартне значення залежить від драйвера. </li>\r\n\r\n</ul>\r\nПараметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…].",
        "Documentation.Examples": {
          "Description": "Створює список даних кубів у кубі AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Імпортує дані з Azure Data Explorer (Kusto)",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Імпортує дані з вашого екземпляра Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з відомостями про бурі",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Таблиця з відомостями про бурі з бази даних \"Samples\" у кластері \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу служби аналітики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Повертає вміст, завантажений за URL-адресою служби аналітики Azure DevOps, як двійкове значення. Ця функція використовує різні облікові дані для різних організацій."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Канал служб Azure DevOps",
        "Documentation.DisplayName": "Канал служб Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Повертає таблицю каналів OData, доступних в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Введіть URL-адресу кінцевої точки інтерфейсу REST API програми Azure Enterprise, пов’язану з вашою реєстрацією.",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Повертає список звітів і місяців, доступний в інтерфейсі API Azure Enterprise.",
        "Documentation.Name": "Імпорт даних із ресурсу Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Використовуються функція AzureEnterprise.Tables і перехід до окремого значення, щоб отримати результати.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Таблиця"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Перегляньте сторінку https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli, щоб знайти зразки початкових запитів.",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю з результатами запиту \"resources\" користувача",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Створити список таблиць в екземплярі Azure Spark.",
        "Documentation.LongDescription": "Створити список таблиць в екземплярі Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Створити список таблиць в екземплярі Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Повертає навігаційну таблицю, яка містить контейнери, знайдені в указаному обліковому записі зі сховища Azure.",
        "Documentation.LongDescription": "Повертає навігаційну таблицю, яка містить рядок для кожного контейнера, знайденого за URL-адресою облікового запису, <code>account</code>, зі сховища Azure. Кожен рядок містить посилання на BLOB-об’єкти контейнера. Ви можете вказати <code>options</code> для керування такими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Кількість байтів, які потрібно зчитати, перш ніж очікувати на споживача даних. Стандартне значення – 4 МБ.</li>\r\n<li><code>RequestSize</code> : Кількість байтів, яку потрібно спробувати зчитати в одному запиті HTTP на сервері. Стандартне значення – 4 МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests підтримує швидке завантаження даних за допомогою зазначення кількості запитів, які потрібно виконати паралельно, з використанням пам’яті. Потрібна пам’ять розраховується за формулою (ConcurrentRequest * RequestSize). Стандартне значення – 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Повертає навігаційну таблицю, яка містить документи Azure Data Lake Storage, знайдені в указаному контейнері та його вкладених папках.",
        "Documentation.LongDescription": "Повертає навігаційну таблицю, яка містить документи файлової системи Azure Data Lake Storage, знайдені в указаному контейнері та відповідних вкладених папках облікового запису за URL-адресою <code>endpoint</code>. Ви можете вказати <code>options</code> для керування такими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Кількість байтів, які потрібно зчитати, перш ніж очікувати на споживача даних. Стандартне значення – 4 МБ.</li>\r\n<li><code>RequestSize</code> : Кількість байтів, яку потрібно спробувати зчитати в одному запиті HTTP на сервері. Стандартне значення – 4 МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests підтримує швидке завантаження даних за допомогою зазначення кількості запитів, які потрібно виконати паралельно, з використанням пам’яті. Потрібна пам’ять розраховується за формулою (ConcurrentRequest * RequestSize). Стандартне значення – 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Логічний тип (true/false), який керує відображенням файлів у поданні деревовидних каталогів або в неструктурованому списку. Стандартне значення – false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Повернення навігаційної таблиці, яка містить таблиці, знайдені за вказаним обліковим записом у сховищі Azure.",
        "Documentation.LongDescription": "Повертає навігаційну таблицю, яка містить окремі рядки для всіх таблиць за URL-адресою облікового запису <code>account</code>, зі сховища Azure. У кожному рядку наводиться посилання на таблицю Azure. Необов’язковий параметр <code>options</code> дає змогу вказати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>Timeout</code> : Дає змогу контролювати тривалість очікування на виконання запиту до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від джерела.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight на AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Ця функція недоступна, оскільки вона вимагає .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (застаріла)",
        "Documentation.Caption": "Common Data Service (застаріла)",
        "Documentation.LongDescription": "Підключіться до свого екземпляра Common Data Service (Dynamics 365 і PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Повертає вміст CSV-документа у вигляді таблиці.",
        "Documentation.LongDescription": "Повертає вміст CSV-документа у вигляді таблиці.\r\n    <ul>\r\n      <li>\r\n        Для параметра <code>columns</code> можна вказати Null-значення, кількість стовпців, список їхніх імен, тип таблиці або запис параметрів.\r\n      </li>\r\n      <li>\r\n        Для параметра <code>delimiter</code> можна вказати один символ, список символів або значення <code>\"\"</code>, яке вказує на те, що рядки потрібно розділити послідовними пробілами. Значення за замовчуванням: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Підтримувані значення параметра <code>extraValues</code> див. в розділі <code>ExtraValues.Type</code>.\r\n      </li>\r\n      <li>\r\n        Параметр <code>encoding</code> визначає тип кодування тексту.\r\n      </li>\r\n    </ul>\r\n\r\n    Якщо вказано запис для параметра <code>columns</code> (а параметри <code>delimiter</code>, <code>extraValues</code> і <code>encoding</code> мають Null-значення), можна надати описані нижче поля запису:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: роздільник стовпців. Значення за замовчуванням: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: можна вказати як Null-значення, кількість стовпців, список їхніх імен або тип таблиці. Якщо вказана тут кількість стовпців менша, ніж у вхідних даних, додаткові стовпці ігноруватимуться. Якщо вказана тут кількість стовпців більша, ніж у вхідних даних, додаткові стовпці матимуть Null-значення. Якщо кількість стовпців не вказана, вона визначатиметься вхідними даними.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: кодування тексту файлу. Значення за замовчуванням: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: визначає, як обробляти лапки.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (значення за замовчуванням): лапки в полі мають значення лише безпосередньо після роздільника.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: лапки в полі завжди мають значення незалежно від їхнього розташування.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: визначає, як обробляти розриви рядків у лапках.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (значення за замовчуванням): розриви рядків у лапках обробляються як частина даних, а не як кінець поточного рядка.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: усі розриви рядків обробляються як кінець поточного рядка, навіть якщо вони зустрічаються в рамках значення в лапках.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Обробка тексту CSV із заголовками стовпців",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Повертає таблицю, що містить набір доступних вимірів.",
        "Documentation.LongDescription": "Повертає таблицю, що містить набір доступних вимірів у <code>cube</code>. Кожен вимір – це таблиця, що містить набір атрибутів вимірів, кожен з яких представлено як стовпець у таблиці вимірів. Виміри можна розгорнути в кубі за допомогою Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Повертає вкладене дерево таблиць, яке представляє ієрархію папок відображення об’єктів (як-от виміри та міри).",
        "Documentation.LongDescription": "Повертає вкладене дерево таблиць, яке представляє ієрархію папок відображення об’єктів (як-от виміри та міри), що можна використовувати в <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Повертає таблицю з набором доступних властивостей для мір, розгорнутих у кубі.",
        "Documentation.LongDescription": "Повертає таблицю з набором доступних властивостей для мір, розгорнутих у кубі.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Повертає таблицю, що містить набір доступних мір.",
        "Documentation.LongDescription": "Повертає таблицю, що містить набір доступних мір у значенні <code>cube</code>.\r\n    Кожна міра представлена як функція. Міри можна застосувати до куба за допомогою Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Повертає таблицю з набором параметрів, які можна застосувати до куба.",
        "Documentation.LongDescription": "Повертає таблицю з набором параметрів, які можна застосувати до елемента \"<code>cube</code>\". Кожен параметр – це функція, яка повертає елемент \"<code>cube</code>\" із застосованим параметром і його аргументами.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Повертає таблицю з набором доступних властивостей для вимірів, розгорнутих у кубі.",
        "Documentation.LongDescription": "Повертає таблицю з набором доступних властивостей для вимірів, розгорнутих у кубі.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Введіть URL-адресу свого облікового запису Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить окремий рядок для кожної папки та кожного файлу, розташованих за <code>URL</code>-адресою в Azure Data Lake Storage Gen1. Кожен рядок містить властивості папки або файлу й посилання на відповідний вміст."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Введіть URL-адресу свого облікового запису Azure Data Lake Storage.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить окремий рядок для кожного файлу, розташованого за <code>URL</code>-адресою в Azure Data Lake Storage Gen1. Кожен рядок містить властивості файлу й посилання на його вміст."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB версії 1",
        "Documentation.Caption": "Azure Cosmos DB (API SQL)",
        "Documentation.Description": "Введіть URL-адресу облікового запису Azure Cosmos DB.",
        "Documentation.LongDescription": "Повертає таблицю баз даних Azure Cosmos DB за адресою <code>url</code>. Якщо вказано значення параметра <code>database</code>, натомість повертається таблиця колекцій. Крім того, якщо в записі <code>options</code> указано поле <code>Query</code>, повертаються результати запиту, застосованого до вказаної бази даних і/або колекції."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу кінцевої точки OData служби Dynamics 365 Business Central (локальний екземпляр).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (локальний екземпляр)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (локальний екземпляр)",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Dynamics 365 Business Central (локальний екземпляр). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу кінцевої точки OData служби Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними служби Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Повертає куби в екземплярі Essbase, згруповані за сервером Essbase.",
        "Documentation.LongDescription": "Повертає таблицю кубів, згрупованих за сервером Essbase, з екземпляра Essbase на сервері APS \"<code>url</code>\". Ви можете вказати додатковий параметр запису \"<code>options</code>\", щоб керувати такими параметрами:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Повертає вміст книги Excel.",
        "Documentation.LongDescription": "Повертає вміст книги Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> може мати Null-, логічне значення (true/false), що вказує, чи слід враховувати перший рядок кожної поверненої таблиці як заголовок, або запис параметрів. Значення за замовчуванням: false.</li>\r\n     <li> <code>delayTypes</code> може мати Null-, логічне значення (true/false), яке вказує, чи слід залишати нетипізованими стовпці кожної поверненої таблиці. Значення за замовчуванням: false.</li>\r\n    </ul>\r\n\r\n    Якщо для <code>useHeaders</code> указано запис, а <code>delayTypes</code> має Null-значення, можна використовувати такі поля запису:\r\n    <ul>\r\n     <li> <code>UseHeaders</code> – може мати Null- або логічне значення (true/false), що вказує, чи враховувати перший рядок кожної поверненої таблиці як заголовок. Значення за замовчуванням: false.</li>\r\n     <li> <code>DelayTypes</code> – може мати Null- або логічне значення (true/false), яке вказує, чи слід залишати нетипізованими стовпці кожної поверненої таблиці. Значення за замовчуванням: false.</li>\r\n     <li> <code>InferSheetDimensions</code> – може мати Null- або логічне значення (true/false), яке вказує, що потрібно зчитати, щоб викликати область аркуша, де містяться дані: саму книгу чи метадані вимірів із файлу. Цей параметр особливо корисний, якщо метадані атрибутів неправильні. Зверніть увагу, що він підтримується лише для файлів Excel Open XML, але не для застарілих. Значення за замовчуванням: false.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Повернення вмісту з книги Excel, Аркуш1.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Повертає таблицю, що містить властивості та вміст файлів і папок, знайдених у вказаній папці.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожної папки та файлу, знайдених у папці <code>path</code>. Кожен рядок містить властивості папки або файлу та посилання на їхній вміст. Параметр <code>options</code> зараз призначений лише для внутрішнього використання.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Повертає таблицю, яка містить властивості та вміст файлів, знайдених у вказаній папці та вкладених папках.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожного файлу, знайденого в папці <code>path</code> та всіх її вкладених папках. Кожен рядок містить властивості файлу та посилання на його вміст. Параметр <code>options</code> зараз призначений лише для внутрішнього використання.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Імпорт даних із бази даних Google BigQuery за допомогою Azure AD",
        "Documentation.LongDescription": "\r\n      Повертає таблицю зі списком доступних проектів у Google BigQuery за ідентифікатором проєкту виставлення рахунків <code>Billing Project ID</code> за допомогою Azure AD. Додатковий параметр запису <code>options</code> дає змогу керувати такими параметрами:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code> – тривалість, що слугує, щоб керувати часом очікування, після якого переривається спроба підключитися до сервера. Стандартне значення дорівнює часу очікування на підключення ODBC.</li>\r\n        <li><code>CommandTimeout</code> – тривалість, що дає змогу контролювати дозволений час виконання запиту на сервері, після якого запит скасовується.</li>\r\n        <li><code>UseStorageApi</code> – дає змогу вказати, чи слід використовувати API сховища BigQuery для великих наборів результатів. Стандартне значення для застосування – true. Щоб не використовувати API сховища, установіть значення false.</li>\r\n        <li><code>AudienceUri</code> – це універсальний ідентифікатор ресурсу аудиторії, який драйвер ODBC може застосовувати для запитів на обмін маркерами. У цьому полі має бути повний універсальний ідентифікатор ресурсу, як-от //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread, де pool_id – це глобально унікальне ім’я, за яким можна визначити пул робочої сили.</li>\r\n      </ul>\r\n    Параметр запису вказується в такому форматі: [параметр1 = значення1, параметр2 = значення2…].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Створити список доступних проектів у Google BigQuery через Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Таблиці",
        "Documentation.Caption": "Google Таблиці",
        "Documentation.Description": "Імпортує дані з Google Таблиць",
        "Documentation.LongDescription": "Імпортує дані з Google Таблиць"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Повертає навігаційну таблицю, яка містить контейнери, знайдені в указаному обліковому записі зі сховища Azure.",
        "Documentation.LongDescription": "Повертає навігаційну таблицю, яка містить рядок для кожного контейнера, знайденого за URL-адресою облікового запису, <code>account</code>, зі сховища Azure. Кожен рядок містить посилання на BLOB-об’єкти контейнера.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Повертає навігаційну таблицю, яка містить контейнери, знайдені в указаному обліковому записі зі сховища Azure.",
        "Documentation.LongDescription": "Повертає навігаційну таблицю, яка містить рядок для кожного контейнера, знайденого за URL-адресою облікового запису, <code>account</code>, зі сховища Azure. Кожен рядок містить посилання на BLOB-об’єкти контейнера.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Повертає таблицю, яка містить властивості та вміст файлів і папок, знайдених у вказаній папці файлової системи Hadoop.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожної папки та кожного файлу, знайдених за URL-адресою папки, <code>url</code>, файлової системи Hadoop. Кожен рядок містить властивості папки або файлу та посилання на їхній вміст.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Повертає таблицю, яка містить властивості та вміст файлів, знайдених у вказаній папці та вкладених папках файлової системи Hadoop.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожного файлу, знайденого за URL-адресою папки, <code>url</code>, і вкладених папок файлової системи Hadoop. Кожен рядок містить властивості файлу та посилання на його вміст.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Імпорт даних із кластера Impala",
        "Documentation.LongDescription": "Імпорт даних із кластера Impala <code>server</code>. Якщо не вказати порт, використовуватиметься стандартний порт 21050.",
        "Documentation.Examples": [
          {
            "Description": "Список таблиць у кластері Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Імпортує дані з Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Імпортує дані з вашого екземпляра Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з відомостями про бурі",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Таблиця з відомостями про бурі з бази даних \"Samples\" у кластері \"help\""
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю з даними з кінцевої точки MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Викликає API MailChimp і повертає отриманий набір даних у вигляді таблиці. Автоматично розбиває всі результати на сторінки. Можна використати додатковий параметр entityName для кінцевих точок API, для яких ім’я основної сутності (entityName) відрізняється від кореневої кінцевої точки у відповіді формату JSON.",
        "Documentation.Examples": [
          {
            "Description": "Отримує таблицю даних із кінцевої точки \"списки\" інтерфейсу API MailChimp.",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "Таблиця з даними списків."
          },
          {
            "Description": "Отримує таблицю даних із кінцевої точки \"папки кампаній\" інтерфейсу API MailChimp.",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "Таблиця з даними папок кампаній."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Повертає необроблені результати відповіді з кінцевої точки інтерфейсу API MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Викликає інтерфейс API MailChimp і повертає необроблену відповідь.",
        "Documentation.Examples": [
          {
            "Description": "Повертає необроблені дані з кінцевої точки \"звіти/відомості про натискання\" інтерфейсу API MailChimp для заданої кампанії.",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "Необроблені відомості про натискання із заданої кампанії."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Надати функції розширеного запиту.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Надати функції розширеного запиту.",
        "Documentation.Examples": [
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за період від 01.05.2017 до 15.06.2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані зведень за період від 01.05.2017 до 15.06.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за квітень 2017 р.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.04.2017 до 30.04.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за період від квітня 2017 р. до цього часу.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.04.2017 до 15.06.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за період від минулого грудня до лютого цього року. ",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.12.2016 до 28.02.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані про ринкові збори за останні 18 місяців.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.12.2015 до 15.06.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати докладні дані про збори за червень 2017 р. й травень 2017 р.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.05.2017 до 15.06.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 03.07.2017, отримати докладні дані про збори за липень 2016 р.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція поверне дані за період від 01.07.2016 до 31.07.2016."
          },
          {
            "Description": "Припускаючи, що сьогодні 13.07.2017, отримати зведення балансу за останні 10 місяців плюс 13 днів у цьому місяці.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "Функція повертає дані за період від 01.09.2016 до 13.07.2017."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Повертає таблицю з поданнями й таблицями SQL із джерела даних ODBC. ",
        "Documentation.LongDescription": "Повертає таблицю з таблицями SQL і поданнями з джерела даних ODBC, визначеного рядком підключення \"<code>connectionString</code>\". \"<code>connectionString</code>\" може бути текстом або записом пар значень властивостей. Значення властивостей можуть мати текстовий або числовий формат. Можна вказати додатковий параметр запису (<code>options</code>), щоб задати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення – 15 секунд.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Повернення таблиць і подань SQL за вказаним рядком підключення.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Повертає таблицю з таблицями SQL і поданнями від джерела даних OLE DB.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями SQL і поданнями з джерела даних OLE DB, визначеного рядком підключення <code>connectionString</code>. Рядок підключення <code>connectionString</code> може вказуватися як текст або запис із пар значень властивостей. Значення властивостей можуть бути текстові або числові. Можна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– true).</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…] або [Query = \"select ...\"].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Повертає таблицю з таблицями SQL та поданнями з бази даних Oracle.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL із бази даних Oracle на сервері <code>server</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2...] або [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Повертає всі таблиці, знайдені в PDF-файлі.",
        "Documentation.LongDescription": "Повертає всі таблиці, знайдені в: <code>pdf</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n    <ul>\r\n<li><code>Implementation</code> : Версія алгоритму, яку потрібно використовувати для ідентифікації таблиць. Старі версії доступні лише задля зворотної сумісності, зокрема щоб оновлення алгоритму не порушувало роботу попередніх запитів. Використання найновішої версії завжди забезпечує найкращі результати. Припустимі значення: &quot;1.3&quot;, &quot;1.2&quot;, “1.1” і Null-значення.</li>\r\n<li><code>StartPage</code> : Указує першу сторінку в діапазоні для перевірки. Стандартне значення: 1.</li>\r\n<li><code>EndPage</code> : Указує останню сторінку в діапазоні для перевірки. Стандартне значення: остання сторінка документа.</li>\r\n<li><code>MultiPageTables</code> : Визначає, чи схожі таблиці на послідовних сторінках автоматично комбінуються в єдину таблицю. Стандартне значення: true.</li>\r\n<li><code>EnforceBorderLines</code> : Визначає, чи лінії меж завжди примусово застосовуються як границі клітинок (значення true), чи просто пропонуються як один із варіантів границь (значення false). Стандартне значення: false.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблиці, які містяться у файлі sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу свого облікового запису Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Канал.Projectplace",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Ρỳŧĥǿñ ŝсŗιρţ",
        "Documentation.Description": "Ęжęςūťέś Ρýťнøň ѕċŗϊрŧ ãлð řěţΰřⁿѕ ďăţα ƒŗăмēś",
        "Documentation.Examples": {
          "Description": "Ęжęςūťέś Ρýťнøň ѕċŗϊрŧ ãлð řěţΰřⁿѕ ďăţα ƒŗăмēś",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Я ѕсřιρť",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Повертає таблицю, кожний рядок якої є іменем поля та значенням вхідного запису.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить стовпці <code>Name</code> та <code>Value</code> з рядком для кожного поля в <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю із запису.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Повертає пакети в базі даних SAP HANA.",
        "Documentation.LongDescription": "Повертає таблицю багатовимірних пакетів із бази даних SAP HANA <code>server</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>Distribution</code> : Параметр SapHanaDistribution, який установлює значення властивості &quot;Distribution&quot; у рядку підключення. Маршрутизація за інструкцією&#160;– це метод, що визначає правильний серверний вузол системи для розповсюдження, перш ніж виконувати інструкцію. Стандартне значення – SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Визначає впровадження з’єднувача SAP Hana, який потрібно використовувати.</li>\r\n<li><code>EnableColumnBinding</code> : Дає змогу зв’язувати змінні зі стовпцями з набору результатів SAP&#160;Hana під час отримання даних. Може покращувати продуктивність за рахунок використання трохи більшого обсягу пам’яті. Стандартне значення&#160;– false.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення – 15 секунд.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Повертає таблицю із вмістом сайту SharePoint.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожної папки й кожного документа, знайдених на вказаному сайті SharePoint (<code>url</code>). Кожен рядок містить властивості папки або файлу та посилання на відповідний вміст. Можна вказати параметр <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Параметр із числовим (14 або 15) чи текстовим (Auto) значенням, що вказує, яку версію інтерфейсу API SharePoint потрібно використовувати для цього сайту. Якщо значення не вказано, використовується API версії 14. Якщо вказано значення Auto, версія сервера визначається автоматично (якщо це можливо). Якщо це неможливо, використовується стандартна версія&#160;14. Для неангломовних сайтів SharePoint необхідно вказати версію 15 або новішу.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Повертає таблицю, яка містить документи із сайту SharePoint.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожного документа, знайденого на вказаному сайті SharePoint (<code>url</code>) і у вкладених папках. Кожен рядок містить властивості папки або файлу та посилання на відповідний вміст. Можна вказати параметр <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Параметр із числовим (14 або 15) чи текстовим (Auto) значенням, що вказує, яку версію інтерфейсу API SharePoint потрібно використовувати для цього сайту. Якщо значення не вказано, використовується API версії 14. Якщо вказано значення Auto, версія сервера визначається автоматично (якщо це можливо). Якщо це неможливо, використовується стандартна версія&#160;14. Для неангломовних сайтів SharePoint необхідно вказати версію 15 або новішу.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Повертає таблицю з вмістом списку SharePoint.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожного елемента списку, знайденого в указаному списку SharePoint (<code>url</code>). Кожен рядок містить властивості списку. Можна вказати параметр <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Параметр із числовим (14 або 15) чи текстовим (Auto) значенням, що вказує, яку версію інтерфейсу API SharePoint потрібно використовувати для цього сайту. Якщо значення не вказано, використовується API версії 14. Якщо вказано значення Auto, версія сервера визначається автоматично (якщо це можливо). Якщо це неможливо, використовується стандартна версія&#160;14. Для неангломовних сайтів SharePoint необхідно вказати версію 15 або новішу.</li>\r\n<li><code>Implementation</code> : Необов’язковий параметр. Слугує, щоб указувати версію з’єднувача SharePoint, яку слід використовувати. Припустимі значення: &quot;2.0&quot; і Null-значення. Якщо задано &quot;2.0&quot;, застосовується впровадження&#160;2.0 з’єднувача SharePoint. Якщо встановлено Null-значення, використовується початкове впровадження з’єднувача SharePoint.</li>\r\n<li><code>ViewMode</code> : Необов’язковий параметр, дійсний лише для впровадження&#160;2.0. Припустимі значення: &quot;Усі&quot; та &quot;За замовчуванням&quot;. Якщо значення не вказано, установлюється &quot;Всі&quot;. За цього значення до подання включаються всі створені користувачем і визначені системою стовпці. Якщо задано значення &quot;За замовчуванням&quot;, подання збігатиметься з тим, що відображається користувачу під час онлайнового перегляду списку, залежно від того, яке подання користувач установив як за замовчуванням у параметрах. Якщо користувач редагуватиме подання за замовчуванням, зокрема додаватиме створені користувачем або визначені системою стовпці, вилучатиме їх або створить подання й укаже його як за замовчуванням, ці зміни поширюватимуться через з’єднувач.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Не дає з’єднувачу використовувати окрему кінцеву точку для стовпців нотаток.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Повертає таблицю зі змісту за вказаною URL-адресою, відформатованою відповідно до API SODA 2.0.",
        "Documentation.LongDescription": "Повертає таблицю зі змісту за вказаною URL-адресою <code>url</code>, відформатованою відповідно до API SODA 2.0. URL-адреса має вказувати дійсне джерело, сумісне з SODA, що закінчується розширенням .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Цю функцію можна використовувати для викликання будь-якої кінцевої точки \"Списки\", яку пропонує інтерфейс SparkPost API версії 1. Викликаючи SparkPost API за допомогою цієї функції, пам’ятайте, що SparkPost API має суворе обмеження на частоту викликів. Якщо сервер SparkPost повертає код стану 429, це означає, що ви досягли обмеження частоти й повинні трохи зачекати, перш ніж здійснювати подальші виклики.",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з одним стовпцем, заповненим даними однієї з кінцевих точок інтерфейсу SparkPost API версії 1 (докладніші відомості див. в документації SparkPost).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Отримує надані з’єднувачем SparkPost вбудовані таблиці з узагальненими даними за вказану користувачем кількість днів. Оновлюючи ці таблиці або викликаючи SparkPost API за допомогою цього з’єднувача, пам’ятайте, що SparkPost API має суворе обмеження на частоту викликів. Якщо сервер SparkPost повертає код стану 429, це означає, що ви досягли обмеження частоти й повинні трохи зачекати, перш ніж здійснювати подальші виклики. Вибираючи значення для параметра \"Кількість днів\", майте на увазі, що цей інтерфейс API зберігає дані лише за 6 місяців."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Повертає таблицю баз даних на SQL Server.",
        "Documentation.LongDescription": "Повертає таблицю баз даних на вказаному сервері SQL Server <code>server</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Число, яке вказує значення речення MAXDOP у створеному SQL-запиті.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n<li><code>MultiSubnetFailover</code> : Параметр із логічним значенням (true або false), що визначає значення властивості MultiSubnetFailover в рядку підключення (стандартне значення&#160;– false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Логічне значення true або false, де за true виконується спроба перетворити типи даних зворотно, якщо можливі помилки їх перетворення й вони можуть спричинити помилку всього запиту. Не радимо для загального використання.</li>\r\n<li><code>ContextInfo</code> : Бінарне значення, яке слугує для налаштування CONTEXT_INFO перед виконанням кожної команди.</li>\r\n<li><code>OmitSRID</code> : Логічне значення true або false, де true дає змогу пропускати ідентифікатор SRID під час створення даних за стандартом Well-Known Text на основі геометричних або географічних даних.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логічне значення (true або false), яке (якщо true) дозволяє зворотне перетворення запитів у базах даних на одному сервері. Стандартне значення – false.</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…].\r\n    <br>\r\n    Не підтримує запуск SQL-запиту на сервері. Щоб запускати SQL-запит на сервері, потрібно використовувати натомість параметр <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Викликає Stripe API із можливістю обмежити кількість викликів API.",
        "Documentation.LongDescription": "Викликає Stripe API за адресою https://api.stripe.com/v1/<code>method</code>. При цьому передаються необов’язковий запис <code>query</code> для додаткових параметрів і необов’язковий параметр <code>pageLimit</code> для обмеження кількості запитів API. Спершу повертаються останні дані. Якщо параметр <code>pageLimit</code> не вказано, повертаються всі дані. Використовується ресурс Stripe версії 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Повертає всі дані про розрахунки.",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Таблиця з усіма даними про розрахунки для поточного облікового запису Stripe"
          },
          {
            "Description": "Повертає одну сторінку даних про розрахунки.",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Таблиця з останніми даними про розрахунки для поточного облікового запису Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Буферизує таблицю в пам'яті, ізолюючи її від зовнішніх змін під час обчислення.",
        "Documentation.LongDescription": "Буферизує таблицю в пам’яті, ізолюючи її від зовнішніх змін під час обчислення.\r\n    Буферизація неглибока. Вона примусово ініціює обчислення всіх скалярних значень клітинок, проте залишає нескалярні значення, зокрема записи, списки, таблиці тощо, як є.\r\n    <br>\r\n    <br>\r\n    Зверніть увагу, що ця функція може прискорювати виконання запитів або не впливати на його швидкість. У деяких випадках вона може вповільнювати виконання запитів через додаткові \r\n    витрати на ресурси для читання всіх даних і їх зберігання в пам’яті, а також через те, що буферизація перешкоджає залежному зворотному перетворенню. Якщо дані не потрібно\r\n    буферизувати і ви просто хочете запобігти залежному зворотному перетворенню, скористайтеся <code>Table.StopFolding</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Завантажте всі рядки таблиці SQL у пам’ять, щоб будь-які залежні операції не могли виконувати запит до SQL-сервера.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Повертає таблицю, яка є результатом об'єднання списку таблиць.",
        "Documentation.LongDescription": "Повертає таблицю, отриману в результаті об’єднання списку таблиць \"<code>tables</code>\". Отримана таблиця матиме структуру типу рядка, визначену параметром \"<code>columns</code>\", а якщо \"<code>columns</code>\" не вказано – об’єднанням вхідних типів.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Об’єднати три таблиці.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Об’єднати три таблиці з різними структурами.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Об’єднати дві таблиці та проект у заданий тип.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Знижає рівень заголовків стовпців до першого рядка значень.",
        "Documentation.LongDescription": "Знижає рівень заголовків стовпців (тобто назви стовпців) до першого рядка значень. За замовчуванням стовпці мають назви \"Стовпець1\", \"Стовпець2\" і так далі.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Знизити рівень першого рядка значень у таблиці.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Видаляє повторювані рядки з таблиці.",
        "Documentation.LongDescription": "Видаляє повторювані рядки з таблиці.\r\n    За допомогою додаткового параметра <code>equationCriteria</code> вказуються стовпці таблиці, які перевіряються на дублювання. Якщо <code>equationCriteria</code> не задано, перевіряються всі стовпці.<br>\r\n    <br>\r\n    Power Query іноді розвантажує певні операції на серверні джерела даних (що також називається згортанням), а також оптимізує запити,\r\n     пропускаючи операції, які не є строго необхідними, тому загалом немає жодних запорук щодо певних повторів, що збережуться.\r\n    Наприклад, не слід припускати, що перший рядок з унікальним набором значень у стовпцях залишатиметься, а наведені нижче рядки в таблиці вилучаться.\r\n    Якщо потрібно, щоб видалення повторів мало передбачувану поведінку, спочатку буферизуйте таблицю за допомогою функції <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Видалити повтори рядків із таблиці.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Видалити повторювані рядки зі стовпця [b] у таблиці <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Створює таблицю зі списку стовпців і вказаних значень.",
        "Documentation.LongDescription": "Створює таблицю типу <code>columns</code> зі списку <code>lists</code>, що містить вкладені списки з іменами та значеннями стовпців.\r\n    Якщо деякі стовпці мають більше значень, ніж інші, відсутні значення заповнюватимуться стандартним (Null-значенням, якщо стовпці це допускають).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю зі списку імен клієнтів. Кожне значення в списку клієнтів стає значенням рядка, а кожен список стає стовпцем.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Створити таблицю з даного списку стовпців і списку імен стовпців.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Створити таблицю з різною кількістю стовпців для кожного рядка. Якщо значення в рядку бракує, указується Null-значення.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Перетворює список у таблицю, застосовуючи зазначену функцію розділення до кожного пункту у списку.",
        "Documentation.LongDescription": "Перетворює список <code>list</code> у таблицю, застосовуючи додаткову функцію розділення <code>splitter</code> до кожного пункту у списку. За замовчуванням, список вважається списком текстових значень, який розділяється комами. Додатковим параметром <code>columns</code> може бути кількість стовпців, списком стовпців або TableType. Можна також вказати додаткові параметри <code>default</code> і <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Створіть таблицю зі списку за допомогою роздільника за замовчуванням.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Створіть таблицю зі списку за допомогою спеціального роздільника.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Створіть таблицю зі списку за допомогою роздільника Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Перетворює список записів на таблицю.",
        "Documentation.LongDescription": "Перетворює список записів <code>records</code> на таблицю.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Створити таблицю на основі записів, використовуючи імена полів записів як імена стовпців.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Створити таблицю на основі записів зі стовпцями вказаного типу й виділити числові стовпці.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Створює таблицю зі списку значень рядків і додаткових стовпців.",
        "Documentation.LongDescription": "Створює таблицю зі списку \"<code>rows</code>\", кожен елемент якого – це внутрішній список, що містить значення стовпців для одного рядка. Додатково як другий аргумент (<code>columns</code>) можна вказати список імен стовпців, тип таблиці або кількість стовпців.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю, що містить стовпець [CustomerID] зі значеннями {1, 2}, стовпець [Name] зі значеннями {\"Bob\", \"Jim\"} і стовпець [Phone] зі значеннями {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Повернути таблицю, що містить стовпець [CustomerID] зі значеннями {1, 2}, стовпець [Name] зі значеннями {\"Bob\", \"Jim\"} і стовпець [Phone] зі значеннями {\"123-4567\", \"987-6543\"}, де [CustomerID] – це числові значення, а [Name] та [Phone] – текстові.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Створює таблицю зі стовпцем із вказаних значень.",
        "Documentation.LongDescription": "Створює таблицю зі стовпцем, що містить вказане значення або список значень (<code>value</code>). Можна вказати додатковий параметр запису \"<code>options</code>\", щоб керувати такими параметрами:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>. Назва стовпця, що використовується під час створення таблиці зі списку або скалярного значення.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Створити таблицю зі значення 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Створити таблицю зі списку.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Створення таблиці зі значення 1 із користувацькою назвою стовпця.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Повертає інформацію про розділення таблиці.",
        "Documentation.LongDescription": "Повертає інформацію про розділення таблиці.  Повертається таблиця, у якій кожний стовпець є стовпцем розділу у вихідній таблиці, а кожний рядок відповідає розділу у вихідній таблиці.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Повертає конфігурацію стовпців таблиці.",
        "Documentation.LongDescription": "<p>Повертає конфігурацію стовпців у таблиці \"<code>table</code>\".</p>\r\n<p>Про кожен стовпець надаються такі відомості (за наявності):\r\n<ul>\r\n  <li>мінімальне значення</li>;\r\n  <li>максимальне значення</li>;\r\n  <li>середнє значення</li>;\r\n  <li>стандартне відхилення</li>;\r\n  <li>кількість значень</li>;\r\n  <li>кількість Null-значень</li>;\r\n  <li>кількість унікальних значень</li>.\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Підвищує перший рядок значень до рівня нових заголовків стовпців (тобто імен стовпців).",
        "Documentation.LongDescription": "Підвищує перший рядок значень до рівня нових заголовків стовпців (тобто імен стовпців). За замовчуванням до рівня заголовків можна підвищити лише текстові або числові значення. Нижче наведено припустимі параметри.\r\n    <div>\r\n      <code>PromoteAllScalars</code>: коли встановлено значення <code>true</code>, усі скалярні значення першого рядка підвищуються до рівня заголовків із використанням параметра <code>Culture</code> (якщо його вказано) або локалізації поточного документа.\r\n    Якщо певні значення не можна перетворити на текст, використовується стандартне ім’я стовпця.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: ім’я культури, що визначає культуру для даних.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Підвищити рівень першого рядка значень у таблиці.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Підвищення всіх скалярних значень першого рядка таблиці до рівня заголовків.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Повертає таблицю з першими пропущеними рядками.",
        "Documentation.LongDescription": "Повертає таблицю, що не містить зазначену кількість перших рядків (<code>countOrCondition</code>), у таблиці <code>table</code>.\r\n    Кількість вилучених рядків залежить від додаткового параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Якщо <code>countOrCondition</code> не зазначено, вилучається лише перший рядок. </li>\r\n    <li> Якщо <code>countOrCondition</code> – число, вилучається відповідна кількість рядків (починаючи згори). </li>\r\n    <li> Якщо <code>countOrCondition</code> – умова, вилучаються рядки, що відповідають цій умові, до рядка, який їй не відповідає.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Видалити перший рядок таблиці.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Видалити перші два рядки таблиці.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Видалити з таблиці перші рядки, для яких виконується умова [CustomerID] <=2.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Повертає таблицю з видаленими останніми N рядками.",
        "Documentation.LongDescription": "Повертає таблицю, що містить зазначену кількість останніх рядків (<code>countOrCondition</code>), у таблиці <code>table</code>.\r\n        Кількість вилучених рядків залежить від додаткового параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Якщо <code>countOrCondition</code> не зазначено, вилучається лише останній рядок. </li>\r\n    <li> Якщо <code>countOrCondition</code> – число, вилучається відповідна кількість рядків (починаючи знизу). </li>\r\n    <li> Якщо <code>countOrCondition</code> – умова, вилучаються рядки, що відповідають цій умові, до рядка, який їй не відповідає.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Видалити останній рядок таблиці.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Видалити з таблиці останні рядки, для яких виконується умова [CustomerID] > 2.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Повертає таблицю з рядками, видаленими із вхідної таблиці, які містять помилку у принаймні одній клітинці. Якщо список стовпців задано, на наявність помилок перевіряються лише клітинки у зазначених стовпцях.",
        "Documentation.LongDescription": "Повертає таблицю з рядками, видаленими із вхідної таблиці, які містять помилку у принаймні одній клітинці. Якщо список стовпців задано, на наявність помилок перевіряються лише клітинки у зазначених стовпцях.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Видалити значення помилки з першого рядка.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Повертає таблицю з рядками у зворотному порядку.",
        "Documentation.LongDescription": "Повертає таблицю з рядками із введення (<code>table</code>) у зворотному порядку.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Змінити в таблиці порядок рядків на зворотний.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Повертає таблицю з описом стовпців (тобто схемою) указаної таблиці.",
        "Documentation.LongDescription": "<p>Повертає таблицю з описом стовпців таблиці \"<code>table</code>\".</p>\r\n<p>Кожен рядок таблиці описує властивості стовпця таблиці \"<code>table</code>\", як описано нижче.</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Ім’я стовпця</b></td>\r\n    <td><b>Опис</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Ім’я стовпця.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>Відрахована від нуля позиція стовпця в таблиці \"<code>table</code>\".</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Ім’я типу стовпця.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Різновид типу стовпця.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Указує, чи може стовпець містити <code>Null</code>-значення.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>Основа системи числення (наприклад, двійкова, десяткова) для полів <code>NumericPrecision</code> і <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>Точність числового стовпця в основі, визначена значенням <code>NumericPrecisionBase</code>. Це максимальна кількість цифр, яку може мати значення цього типу (включно з цифрами дробової частини).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>Масштаб числового стовпця в основі, визначений значенням <code>NumericPrecisionBase</code>. Це кількість цифр у дробовій частині значення цього типу. Значення <code>0</code> указує на фіксований масштаб без дробової частини. <code>Null</code>-значення означає, що масштаб невідомий (з рухомою комою або невизначений).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Максимальна кількість цифр у дробовій частині, що підтримується для секунд у значенні дати або часу.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>Максимальна дозволена кількість символів у стовпці <code>text</code> або максимальна дозволена кількість байтів у стовпці <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Указує, чи може змінюватися довжина стовпця (до значення <code>MaxLength</code>), чи розмір фіксований.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Ім’я типу стовпця у власній системі типів джерела (наприклад, <code>nvarchar</code> для SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Вираз за замовчуванням для значення цього стовпця власною мовою виразів джерела (наприклад, <code>42</code> або <code>newid()</code> для SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Опис стовпця.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Повертає таблицю лише з тими рядками вхідної таблиці, які містять помилку у принаймні одній клітинці. Якщо список стовпців задано, на наявність помилок перевіряються лише клітинки у зазначених стовпцях.",
        "Documentation.LongDescription": "Повертає таблицю лише з тими рядками вхідної таблиці, які містять помилку у принаймні одній клітинці. Якщо список стовпців задано, на наявність помилок перевіряються лише клітинки у зазначених стовпцях.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Виділити імена клієнтів із помилками у відповідних рядках.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Повертає таблицю з першими пропущеними рядками.",
        "Documentation.LongDescription": "Повертає таблицю, що не містить зазначену кількість перших рядків (<code>countOrCondition</code>), у таблиці <code>table</code>.\r\n    Кількість пропущених рядків залежить від додаткового параметра <code>countOrCondition</code>.\r\n    <ul>\r\n    <li> Якщо <code>countOrCondition</code> не зазначено, пропускається лише перший рядок. </li>\r\n    <li> Якщо <code>countOrCondition</code> – число, пропускається відповідна кількість рядків (починаючи згори). </li>\r\n    <li> Якщо <code>countOrCondition</code> – умова, пропускаються рядки, що відповідають цій умові, до рядка, який їй не відповідає.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Пропустити перший рядок таблиці.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Пропустити перші два рядки таблиці.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Пропустити перші рядки таблиці, для яких виконується умова [Price] > 25.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Запобігає виконанню будь-яких подальших операцій для вихідного джерела даних.",
        "Documentation.LongDescription": "Запобігає виконанню будь-яких подальших операцій для вихідного джерела даних у <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Отримує дані з таблиці SQL таким чином, щоб запобігати виконанню будь-яких подальших операцій як запиту на сервері SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Перетворює стовпці в рядки та рядки у стовпці.",
        "Documentation.LongDescription": "Перетворює стовпці в рядки та рядки у стовпці.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Перетворити рядки таблиці пар ім'я-значення у стовпці.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Отримує зв’язки між таблицями набору.",
        "Documentation.LongDescription": "Отримує зв’язки між таблицями набору. Припускається, що структура набору \"<code>tables</code>\" подібна до таблиці переходів. Визначений параметром \"<code>dataColumn</code>\" стовпець містить фактичні таблиці даних.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Повертає таблицю з таблицями SQL та поданнями з бази даних Teradata.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL із бази даних Teradata на сервері <code>server</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2...] або [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Введіть кількість минулих місяців, за які потрібно отримати дані Twilio.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Повертає таблицю, що містить опис стовпців (тобто схему) указаного типу таблиці.",
        "Documentation.LongDescription": "<p>Повертає таблицю з описом стовпців у таблиці \"<code>tableType</code>\".</p>\r\n<p>Ознайомтеся з документацією про функцію <code>Table.Schema</code>, щоб переглянути відомості про таблицю, що в результаті генерується.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Канал служб Azure DevOps",
        "Documentation.DisplayName": "Канал служб Azure DevOps",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Повертає таблицю каналів OData, доступних в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Підключення до даних Аналітики Viva",
        "Documentation.LongDescription": "Імпорт щотижневих показників і даних атрибутів із Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з видимими атрибутами та показниками на тиждень для кожного оцінюваного працівника в розділі.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Повертає вміст HTML-документа, розбитого на складові частини, а також представлення повного документа і його текст після вилучення тегів.",
        "Documentation.LongDescription": "Повертає вміст HTML-документа, розбитого на складові частини, а також представлення повного документа і його текст після вилучення тегів.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю з ключовими показниками Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Викликає кінцеву точку ресурсу Webtrends KeyMetrics і повертає всі дані у вигляді таблиці.",
        "Documentation.Examples": [
          {
            "Description": "Отримує таблицю ключових показників для клієнта 98765 за останні 30 днів.",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Таблиця ключових показників"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Введіть ідентифікатор профілю, пов’язаний із вашим обліковим записом Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Підключення до даних Аналітики Viva",
        "Documentation.LongDescription": "Імпорт щотижневих показників і даних атрибутів із Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з видимими атрибутами та показниками на тиждень для кожного оцінюваного працівника в розділі.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Повертає вміст XML-документа у вигляді ієрархічної таблиці.",
        "Documentation.LongDescription": "Повертає вміст XML-документа у вигляді ієрархічної таблиці.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Повертає вміст XML-документа у вигляді вкладеної колекції таблиць, поданих у вигляді рядка.",
        "Documentation.LongDescription": "Повертає вміст XML-документа у вигляді вкладеної колекції таблиць, поданих у вигляді рядка.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Отримайте вміст локального файлу XML.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу свого облікового запису Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Повертає колекцію схем для джерела даних ADO.NET.",
        "Documentation.LongDescription": "Повертає колекцію схем для джерела даних ADO.NET з іменем постачальника \"<code>providerName</code>\" і рядком підключення \"<code>connectionString</code>\". Рядок \"<code>connectionString</code>\" може бути текстом або записом пар значень властивостей. Значення властивості можуть бути текстом або цифрами. Можна вказати додатковий параметр запису (<code>options</code>), щоб указати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (бета-версія)",
        "Documentation.Description": "Імпорт інформації з бази даних Amazon Redshift.",
        "Documentation.LongDescription": "Повертає таблицю зі списком таблиць у кластері Amazon Redshift <code>server</code> у базі даних <code>database</code>. Можна вказати додатковий параметр запису (<code>options</code>), щоб керувати такими параметрами:\r\n<ul>\r\n<li><code>Provider Name</code> (ім’я постачальника): текстове значення, яке використовуватиметься як ім’я постачальника для підключення. Використовується під час застосування Microsoft Authentication.</li>\r\n<li><code>Batch Size</code> (розмір пакета): кількість рядків, отриманих під час одного виклику сервера.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Повертає таблицю багатовимірних кубів або табличних моделей із бази даних служб аналізу Analysis Services.",
        "Documentation.LongDescription": "Повертає таблицю багатовимірних кубів або табличних моделей із бази даних Analysis Services <code>database</code> на сервері <code>server</code>. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>Query</code> : Власний запит багатовимірного виразу, що використовується для отримання даних.</li>\r\n<li><code>TypedMeasureColumns</code> : Параметр із логічним значенням, що визначає, чи використовувати в доданих стовпцях мір типи, указані в багатовимірній або табличній моделі. Якщо вказати значення false, для всіх стовпців мір використовуватиметься тип number. Стандартне значення цього параметра&#160;– false.</li>\r\n<li><code>Culture</code> : Ім’я культури, що визначає культуру для даних. Відповідає властивості Locale Identifier в рядку підключення.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення залежить від драйвера.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>SubQueries</code> : Числовий параметр (0, 1 або 2), що визначає значення властивості SubQueries у рядку підключення. Цей параметр керує поведінкою обчислюваних членів у вибраних фрагментах або підкубах. (Стандартне значення: 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Повертає таблицю зі списком таблиць у вказаному кластері Spark.",
        "Documentation.LongDescription": "Повертає таблицю із списком таблиць у кластері Spark, для якого вказано параметри <code>host</code> і <code>protocol</code>. Припустимі протоколи:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю зі списком таблиць у вказаному кластері Spark.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Введіть назви організації та проекту.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (лише дошки)",
        "Documentation.LongDescription": "Повертає таблицю подань аналітики, доступної в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Імпорт даних з HDInsight Interactive Query.",
        "Documentation.LongDescription": "\r\nПовертає список таблиць з HDInsight Interactive Query, указаних у базі даних <code>database</code> на сервері HDInsight Interactive Query <code>server</code>. Разом із сервером можна додатково вказати номер порту, відділивши його двокрапкою. Можна вказати додатковий параметр <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: параметр тривалості, який визначає, як довго очікувати на підключення до сервера, перш ніж перервати спробу. Стандартне значення залежить від драйвера.</li>\r\n        <li><code>CommandTimeout</code>: параметр тривалості, який визначає, як довго запиту на боці сервера дозволено працювати до скасування. Стандартне значення залежить від драйвера.</li>\r\n</ul>\r\nПараметр <code>options</code> указується, наприклад, так: [парметр1 = значення1, параметр2 = значення2…]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Повертає таблицю зі стовпцями, зіставленими з атрибутами сутності в Common Data Model, включно з типами даних.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Повертає таблицю зі стовпцями, зіставленими з атрибутами сутності в Common Data Model, включно з типами даних. Зіставлені стовпці з визначення сутності буде додано, а усі незіставлені стовпці – видалено.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Повертає куб після застосування до нього параметра.",
        "Documentation.LongDescription": "Повертає куб після застосування параметрів \"<code>parameter</code>\" і \"<code>arguments</code>\" до елемента \"<code>cube</code>\".",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Змінює деталізацію вимірів контексту фільтра для куба, згортаючи атрибути, зіставлені з указаними стовпцями.",
        "Documentation.LongDescription": "Змінює деталізацію вимірів контексту фільтра для <code>cube</code>, згортаючи атрибути, зіставлені з указаними стовпцями <code>columnNames</code>. Стовпці також видалено з табличного подання куба.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Замінює набір вимірів, які повертає Cube.Dimensions.",
        "Documentation.LongDescription": "Замінює набір вимірів, які повертає <code>Cube.Dimensions</code>.\r\n    Наприклад, цю функцію можна використовувати для додавання стовпця ідентифікатора до атрибута виміру, щоб джерело даних можна було групувати за ідентифікатором, а не відображуваним значенням.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Застосовує список функцій куба.",
        "Documentation.LongDescription": "Застосовує список функцій куба, <code>transforms</code>, до <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Повертає таблицю з таблицями й поданнями SQL, доступними в базі даних Db2.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями й поданнями SQL, доступними в базі даних Db2 на сервері \"<code>server</code>\" в екземплярі бази даних з ім’ям \"<code>database</code>\". Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n<li><code>Implementation</code> : Указує, яке впровадження постачальника внутрішньої бази даних використовувати. Припустимі значення: &quot;IBM&quot; і &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Числове значення ідентифікатора CCSID (Coded Character Set Identifier) для перетворення двійкових даних Db2 FOR BIT на рядки символів. Застосовується до параметра Implementation зі значенням &quot;Microsoft&quot;. Укажіть значення &quot;0&quot; (стандартне), щоб вимкнути перетворення. Укажіть значення &quot;1&quot; для перетворення відповідно до кодування бази даних. Укажіть інше числове значення CCSID для перетворення відповідно до кодування програми.</li>\r\n<li><code>PackageCollection</code> : Указує значення рядка для колекції пакетів (стандартне значення: NULLID), щоб увімкнути використання спільних пакетів, потрібних для обробки інструкцій SQL. Застосовується для параметра Implementation зі значенням &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Визначає, чи здійснюється підключення через шлюз DB2 Connect. Застосовується, коли для параметра &quot;Упровадження&quot; встановлено значення &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…] або [Query = \"select…\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Дає змогу отримати набір даних із Data.World."
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Повертає навігаційну таблицю, яка містить властивості та вміст BLOB-об’єктів, знайдених у вказаному контейнері зі сховища Azure.",
        "Documentation.LongDescription": "Повертає таблицю, яка містить рядок для кожного файлу BLOB-об’єкта, знайденого за URL-адресою контейнера, <code>account</code>, зі сховища Azure. Кожен рядок містить властивості файлу та посилання на його вміст.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Повертає таблицю з результатами виконання заданих селекторів CSS для вказаного HTML-коду.",
        "Documentation.LongDescription": "Повертає таблицю з результатами застосування вказаних селекторів CSS до наданого елемента <code>html</code>. Можна надати додатковий параметр запису <code>options</code>, щоб указати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з прикладом текстового значення HTML.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Джо</div><span>Керівник</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Видобуває всі атрибути href зі зразка текстового значення у форматі HTML.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Тест</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Повертає таблицю з таблицями та поданнями SQL, доступними в базі даних Informix.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL, доступними в базі даних Informix на сервері <code>server</code> в екземплярі бази даних з ім’ям <code>database</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…] або [Query = \"select …\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Повертає таблицю з докладними відомостями про потенційних клієнтів.",
        "Documentation.LongDescription": "Викликає кінцеву точку Marketo REST API за адресою <code>url</code>/rest/v1/leads.json. Повертаються всі потенційні клієнти в списку <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Отримує докладні відомості про трьох потенційних клієнтів.",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Таблиця з докладними відомостями про вказаних потенційних клієнтів"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу кінцевої точки інтерфейсу REST API програми Marketo, пов’язаної з вашим обліковим записом.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Повертає таблицю з таблицями SQL, поданнями та збереженими скалярними функціями, доступними у базі даних MySQL.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL, а також збереженими скалярними функціями, доступними в базі даних MySQL на сервері <code>server</code> в екземплярі бази даних з ім’ям <code>database</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>Encoding</code> : Значення TextEncoding, яке визначає набір символів для кодування всіх запитів, що надсилаються на сервер (за замовчуванням – Null-значення).</li>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно примусово використовувати стовпці з коротким цілим на сервері як логічні значення. Стандартне значення&#160;– true.</li>\r\n<li><code>OldGuids</code> : Параметр із логічним значенням (true або false), що визначає, які стовпці розглядатимуться як ідентифікатори GUID. За значення false так розглядатимуться символьні стовпці char(36), а за значення true&#160;– двійкові стовпці binary(16). Стандартне значення&#160;– false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Параметр із логічним значенням (true або false), що визначає, чи повертати всі таблиці з усіх баз даних (якщо значення false), чи таблиці та подання з указаної бази даних (якщо значення true). Стандартне значення&#160;– false.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2...] або [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Імпорт даних із бази даних IBM Netezza.",
        "Documentation.LongDescription": "\r\nПовертає таблицю з поданнями, збереженими функціями й таблицями Netezza з бази даних Netezza Server <code>database</code> на сервер <code>server</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати вказаними нижче параметрами.\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: логічне значення (true/false), яке визначає, чи створювати для повернених значень властивості навігації (стандартне значення – true).</li>\r\n        <li><code>HierarchicalNavigation</code>: логічне значення (true/false), яке визначає, чи групувати таблиці для перегляду за назвами їх схем (стандартне значення – false).</li>\r\n        <li><code>ConnectionTimeout</code>: параметр тривалості, який визначає, як довго очікувати на підключення до сервера, перш ніж перервати спробу. Стандартне значення залежить від драйвера.</li>\r\n        <li><code>CommandTimeout</code>: параметр тривалості, який визначає, як довго запиту на боці сервера дозволено працювати до скасування. Стандартне значення залежить від драйвера.</li>\r\n<li><code>NormalizeDatabaseName</code>: Логічне значення (true/false), яке встановлює, чи слід нормалізувати ім'я бази даних у верхньому регістрі чи дослівно інтерпретувати його (стандартне значення – true).</li>\r\n</ul>\r\nПараметр запису вказується в такому форматі: [параметр1 = значення1, параметр2 = значення2…].",
        "Documentation.Examples": [
          {
            "Description": "Перелік таблиць у проекті IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Повертає результат виконання власного запиту з джерела даних ODBC.",
        "Documentation.LongDescription": "Повертає результат <code>query</code> з рядком підключення \"<code>connectionString</code>\" за допомогою ODBC. \"<code>connectionString</code>\" може бути текстом або записом пар значень властивостей. Значення властивостей можуть мати текстовий або числовий формат. Можна вказати додатковий параметр запису (<code>options</code>), щоб задати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення – 15 секунд.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Повернення результату простого запиту щодо вказаного рядка підключення.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Повертає результати виконання власного запиту з бази даних OLE.",
        "Documentation.LongDescription": "Повертає результат <code>query</code> з рядком підключення \"<code>connectionString</code>\" за допомогою OLE DB. \"<code>connectionString</code>\" може вказуватися як текст або запис із пар значень властивостей. Значення властивостей можуть бути текстові або числові. Можна вказати додатковий параметр запису (<code>options</code>), щоб визначити додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Повертає таблицю з таблицями SQL та поданнями, доступними у базі даних PostgreSQL.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL, доступними в базі даних PostgreSQL на сервері <code>server</code> в екземплярі бази даних з ім’ям <code>database</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2...] або [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Імпорт даних зі сховища Snowflake Computing.",
        "Documentation.LongDescription": "Повертає таблицю зі списком таблиць зі сховища даних Snowflake Computing <code>warehouse</code> на сервері <code>server</code>. Додатковий параметр запису <code>options</code> дає змогу керувати наведеними нижче параметрами.\r\n<ul>\r\n<li><code>Role</code> – текстове значення, яке слугує назвою ролі для підключення.</li>\r\n<li><code>CreateNavigationProperties</code> – логічне значення (true або false), за яким визначається, чи створювати для повернених значень властивості навігації (стандартне значення – true).</li>\r\n<li><code>ConnectionTimeout</code> – тривалість очікування відповіді серверів Snowflake у секундах.</li>\r\n<li><code>CommandTimeout</code> – тривалість очікування виконання запиту в секундах.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Перелічіть таблиці в сховищі даних Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Повертає таблицю зі списком таблиць у вказаному кластері Spark.",
        "Documentation.LongDescription": "Повертає таблицю із списком таблиць у кластері Spark, для якого вказано параметри <code>host</code> і <code>protocol</code>. Припустимі протоколи:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Створити список таблиць в екземплярі Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Повертає таблицю з таблицями SQL, поданнями та збереженими функціями з бази даних SQL на сервері.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями, поданнями та збереженими функціями SQL із бази даних SQL Server <code>database</code> на сервері <code>server</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою або комою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Число, яке вказує значення речення MAXDOP у створеному SQL-запиті.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n<li><code>MultiSubnetFailover</code> : Параметр із логічним значенням (true або false), що визначає значення властивості MultiSubnetFailover в рядку підключення (стандартне значення&#160;– false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Логічне значення true або false, де за true виконується спроба перетворити типи даних зворотно, якщо можливі помилки їх перетворення й вони можуть спричинити помилку всього запиту. Не радимо для загального використання.</li>\r\n<li><code>ContextInfo</code> : Бінарне значення, яке слугує для налаштування CONTEXT_INFO перед виконанням кожної команди.</li>\r\n<li><code>OmitSRID</code> : Логічне значення true або false, де true дає змогу пропускати ідентифікатор SRID під час створення даних за стандартом Well-Known Text на основі геометричних або географічних даних.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логічне значення (true або false), яке (якщо true) дозволяє зворотне перетворення запитів у базах даних на одному сервері. Стандартне значення – false.</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…] або [Query = \"select …\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Повернення таблиці з таблицями та поданнями SQL, доступними в базі даних Sybase.",
        "Documentation.LongDescription": "Повертає таблицю з таблицями та поданнями SQL, доступними в базі даних Sybase на сервері <code>server</code> в екземплярі бази даних з ім’ям <code>database</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Функція, що створює імена для властивостей навігації.</li>\r\n<li><code>Query</code> : Власний SQL-запит для отримання даних. Якщо за запитом виявлено кілька наборів результатів, повертається лише перший набір.</li>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>ConnectionTimeout</code> : Дає змогу контролювати тривалість очікування для спроби встановити підключення до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від драйвера.</li>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n</ul>\r\n\r\n    Параметр запису вказується, наприклад, так: [параметр1 = значення1, параметр2 = значення2…] або [Query = \"select ...\"].\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Додає стовпець із явними значеннями позиції.",
        "Documentation.LongDescription": "Додає стовпець з іменем <code>newColumnName</code> до <code>table</code> з явними значеннями позиції.\r\n    Додаткове значення, <code>initialValue</code>, початкове значення індексу. Додаткове значення, <code>increment</code>, вказує, на скільки збільшувати кожне значення індексу.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Додати до таблиці стовпець індексу з назвою \"Index\".",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Додати до таблиці стовпець індексу з назвою \"Index\", починаючи зі значення 10 і з приростом 5.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Маючи стовпець списків у таблиці, створити копію рядка для кожного значення у списку.",
        "Documentation.LongDescription": "Маючи <code>table</code>, де <code>column</code> — це список значень, розділяє список на рядки для кожного значення. Значення в інших стовпцях дублюються в кожний новий рядок, що створюється.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Розділити стовпець списку [Name] у таблиці.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Розповсюджує значення з попередньої клітинки до нижніх клітинок з нульовим значенням у стовпці.",
        "Documentation.LongDescription": "Повертає таблицю із зазначеного <code>table</code>, куди розповсюджується значення попередньої клітинки до нижніх клітинок із нульовим значенням у зазначеному <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю, де Null-значення в стовпці [Place] заповнено значенням із верхніх клітинок таблиці.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Розповсюджує значення клітинки до верхніх клітинок з нульовим значенням у стовпці.",
        "Documentation.LongDescription": "Повертає таблицю із зазначеного <code>table</code>, куди розповсюджується значення наступної клітинки до верхніх клітинок із нульовим значенням у зазначеному <code>columns</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Повернути таблицю, де Null-значення в стовпці [Column2] заповнено значенням із нижніх клітинок таблиці.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Повертає всі рядки, що містять даний текст у таблиці.",
        "Documentation.LongDescription": "Повертає всі рядки в таблиці <code>table</code>, що містять текст <code>text</code>. Якщо текст не знайдено, повертається пуста таблиця.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти в таблиці рядки, що містять значення \"Bob\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Повертає перші визначені рядки.",
        "Documentation.LongDescription": "Повертає позицію перших рядків таблиці <code>table</code> в залежності від значення <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Якщо <code>countOrCondition</code> є числом, буде повернено таку кількість рядків (починаючи зверху). </li>\r\n    <li> Якщо <code>countOrCondition</code> є умовою, буде повернено рядки, що відповідають цій умові, до того рядка, який не відповідатиме цій умові.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти перші два рядки таблиці.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Знайти в таблиці перші рядки, для яких виконується умова [a] > 0.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Повертає таблицю, яка є результатом об’єднання набору розбитих на розділи таблиць.",
        "Documentation.LongDescription": "Повертає таблицю, отриману в результаті об’єднання набору розбитих на розділи таблиць, <code>partitions</code>. <code>partitionColumn</code> – ім’я стовпця, який потрібно додати. Тип стовпця за замовчуванням – <code>any</code>, але його можна визначити за допомогою <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти тип елемента зі списку <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Повертає вказану кількість останніх рядків.",
        "Documentation.LongDescription": "Повертає позицію останніх рядків таблиці <code>table</code> в залежності від значення <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Якщо <code>countOrCondition</code> є числом, буде повернено таку кількість рядків, починаючи з позиції (кінцева - <code>countOrCondition</code>). </li>\r\n    <li> Якщо <code>countOrCondition</code> є умовою, у положення за зростанням буде повернено рядки, що відповідають цій умові, до того рядка, який не відповідатиме цій умові.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти останні два рядки таблиці.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Знайти в таблиці останні рядки, для яких виконується умова [a] > 0.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Повертає таблицю, на початок кожного стовпця якої додано заданий текст.",
        "Documentation.LongDescription": "Повертає таблицю, де до всіх назв стовпців, отриманих із таблиці <code>table</code>, на початку додаються вказаний текст (<code>prefix</code>) і крапка: <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Додати на початку стовпців таблиці текст \"MyTable\".",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Повертає початок рядків із вказаним зсувом.",
        "Documentation.LongDescription": "Повертає рядки з початку <code>table</code> із вказаним <code>offset</code>. Додатковий параметр, <code>count</code>, визначає кількість рядків для повернення. За замовчуванням повертаються усі рядки після зсуву.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Повернути всі рядки, що починаються в позиції зсуву 1 у таблиці.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Повернути рядок, що починається в позиції зсуву 1 у таблиці.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Видаляє вказані стовпці.",
        "Documentation.LongDescription": "Вилучає вказані <code>columns</code> з наданої <code>table</code>.\r\n    За відсутності вказаного стовпця повертається помилка, якщо додатковий параметр <code>missingField</code> не визначає альтернативної поведінки (наприклад, <code>MissingField.UseNull</code> або <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Видалити з таблиці стовпець [Phone].",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Спробуйте вилучити з таблиці стовпець, який не існує.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Видаляє всі входження вказаних рядків з таблиці.",
        "Documentation.LongDescription": "Вилучає всі екземпляри вказаного елемента (<code>rows</code>) з таблиці \"<code>table</code>\".\r\n    Можна вказати додатковий параметр <code>equationCriteria</code>, щоб керувати порівнянням рядків таблиці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Видалити рядки, у яких [a = 1], з таблиці <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Видаляє вказану кількість рядків.",
        "Documentation.LongDescription": "Видаляє <code>count</code> рядків з початку <code>table</code>, починаючи із вказаного <code>offset</code>. Для відліку за замовчуванням використовується значення 1, якщо не вказано додатковий параметр <code>count</code>. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Видалити перший рядок із таблиці.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Видалити з таблиці рядок у позиції 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Видалити з таблиці два рядки, починаючи з позиції 1.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Застосовує перейменування у вигляді {old, new}.",
        "Documentation.LongDescription": "Вносить задані перейменування у стовпці таблиці <code>table</code>. Операція заміни <code>renames</code> складається зі списку двох значень, старого імені стовпця та нового імені стовпця , які надаються у списку.\r\n    Якщо стовпець не існує, повертається виняткова ситуація, якщо додатковий параметр <code>missingField</code> не визначає іншого (наприклад, <code>MissingField.UseNull</code> або <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Замінити в таблиці назву стовпця \"CustomerNum\" на \"CustomerID\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Замінити в таблиці назви стовпців \"CustomerNum\" на \"CustomerID\" та \"PhoneNum\" на \"Phone\".",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Замінити в таблиці назву стовпця \"NewCol\" на \"NewColumn\". Не виконувати жодних дій, якщо його не існує.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Повертає таблицю зі стовпцями в указаному порядку.",
        "Documentation.LongDescription": "Повертає таблицю із вхідного елемента <code>table</code> зі стовпцями в порядку, зазначеному <code>columnOrder</code>. Порядок не вказаних у списку стовпців не змінюватиметься.\r\n     У разі відсутності стовпця повертається виняткова ситуація, якщо додатковий параметр <code>missingField</code> не визначає інше (наприклад, <code>MissingField.UseNull</code> або <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Змінити в таблиці порядок стовпців [Phone] і [Name].",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Змінити в таблиці порядок стовпців [Phone] і [Address] або використати функцію \"MissingField.Ignore\". Таблиця не змінюється, бо стовпця [Address] не існує.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Повторює рядки таблиць зазначену кількість разів.",
        "Documentation.LongDescription": "Повертає таблицю з рядками із введення (<code>table</code>), повторюваними зазначену кількість разів (<code>count</code>).",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Повторити рядки таблиці двічі.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Замінює значення помилок у вказаних стовпцях на відповідне вказане значення.",
        "Documentation.LongDescription": "Замінює значення помилок у вказаних стовпцях <code>table</code> на нові значення в списку <code>errorReplacement</code>. Формат списку – {{column1, value1}, …}. Допускається лише одне значення заміни на стовпець. Якщо вказати стовпець більше одного разу, можлива помилка.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замінити значення помилки на текст \"world\" у таблиці.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Замінити в таблиці значення помилки в стовпці A на текст \"hello\", а в стовпці B – на текст \"world\".",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Заміняє ключі вказаної таблиці.",
        "Documentation.LongDescription": "Заміняє ключі вказаної таблиці.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замініть наявні ключі таблиці.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Замінює всі вказані рядки наданими рядками.",
        "Documentation.LongDescription": "Замінює всі вказані рядки в таблиці \"<code>table</code>\" на надані. Рядки, які слід замінити, і заміни надає \"<code>replacements</code>\" у форматі {old, new}.\r\n    Можна вказати додатковий параметр <code>equationCriteria</code>, щоб керувати порівнянням рядків таблиці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Замінити в таблиці рядки [a = 1, b = 2] і [a = 2, b = 3] на [a = -1, b = -2], [a = -2, b = -3].",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Повертає таблицю лише із визначеними стовпцями.",
        "Documentation.LongDescription": "Повертає \"<code>table</code>\" із визначенням лише <code>columns</code>.\r\n    <ul>\r\n       <li>\"<code>table</code>\" – це вказана таблиця.</li>\r\n       <li><code>columns</code> – список стовпців із таблиці \"<code>table</code>\", яку потрібно повернути. У стовпців у цій таблиці має бути порядок, заданий за допомогою <code>columns</code>.</li>\r\n       <li><code>missingField</code> – <i>(необов’язковий)</i> аргумент дії на випадок, якщо стовпець не існує, наприклад <code>MissingField.UseNull</code> або <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Включити лише стовпець [Ім’я].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Включити лише стовпці [Ідентифікатор_клієнта] та [Ім’я].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Якщо включений стовпець не існує, результат за замовчуванням – помилка.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Якщо включений стовпець не існує, параметр <code>MissingField.UseNull</code> створює стовпець із Null-значеннями.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Вибирає рядки, що відповідають умовам функції.",
        "Documentation.LongDescription": "Повертає таблицю рядків із <code>table</code>, яка відповідає вибору <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Вибрати в таблиці рядки, для яких значення в стовпці [Ідентифікатор_клієнта] більші за 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Виділити в таблиці рядки, де імена не містять букву \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Сортувати таблицю з використанням одного або більше імен стовпців і критеріїв порівняння.",
        "Documentation.LongDescription": "Сортувати <code>table</code> з використанням списку одного або більше імен стовпців і додаткових <code>comparisonCriteria</code> у формі { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Сортувати таблицю за стовпцем \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Сортувати таблицю за стовпцем \"OrderID\" в порядку спадання.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Сортувати таблицю за стовпцем \"CustomerID\", а потім за стовпцем \"OrderID\", коли стовпець \"CustomerID\" відсортовано в порядку зростання.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Перетворює назви стовпців, використовуючи вказану функцію.",
        "Documentation.LongDescription": "Перетворює імена стовпців, використовуючи вказану функцію <code>nameGenerator</code>. Нижче наведено припустимі параметри.\r\n    <div>\r\n      <code>MaxLength</code> – дає змогу визначити максимальну довжину нових імен для стовпців. Якщо функція повертатиме довші імена, вони усікатимуться.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> – використовується для контролю над порівнянням під час створення інших імен для стовпців. Такі функції дають змогу порівнювати значення без урахування регістра або з огляду на культуру й локалізацію.\r\n    </div>\r\n    <div>\r\n      Мова формул передбачає наведені нижче вбудовані засоби порівняння.\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code> – слугує для точного порядкового порівняння.</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code> – виконує точне порядкове порівняння без урахування регістра.</li>\r\n      <li> <code>Comparer.FromCulture</code> – виконує порівняння з огляду на культуру.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "У назвах стовпців видаліть символ <code>#(tab)</code>",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Перетворення імен стовпців для створення нечутливих до регістра імен із довжиною 6.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Застосовує перетворення типу форми { column, type } із використанням конкретної культури.",
        "Documentation.LongDescription": "Повертає таблицю із вхідних даних <code>table</code>, застосовуючи операцію перетворення до стовпців, зазначених у параметрі <code>typeTransformations</code> (у форматі { column name, type name}), з використанням зазначеної в параметрі <code>culture</code> культури, наприклад \"uk-UA\".\r\n    Якщо стовпець не існує, повертається виняток.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Перетворити числові значення у стовпці [a] на текстові значення з таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Перетворює значення одного або кількох стовпців.",
        "Documentation.LongDescription": "Перетворює <code>table</code>, застосовуючи кожну операцію стовпця, указану в <code>transformOperations</code>, де використовується формат: { column name, transformation } або { column name, transformation, new column type }.\r\n    Якщо задано <code>defaultTransformation</code>, параметр застосовуватиметься до всіх стовпців, які не перелічено в <code>transformOperations</code>.\r\n    Якщо стовпець, указаний у <code>transformOperations</code>, не існує, повертається виняток, за умови що за допомогою додаткового параметра <code>missingField</code> не встановлено альтернативну функцію, як-от <code>MissingField.UseNull</code> або <code>MissingField.Ignore</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Перетворити текстові значення в стовпці [A] на числові, а числові значення в стовпці [B] – на текстові.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Перетворити числові значення у відсутньому стовпці [X] на текстові, ігнорувати стовпці, які не існують.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Перетворити числові значення у відсутньому стовпці [X] на текстові, а для стовпців, що не існують, установити стандартне Null-значення.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Збільшити числові значення в стовпці [B] та перетворити їх на текстові, а також перетворити всі інші стовпці на числові.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Створює або розширює таблицю з користувацькими обробниками для операцій запитів і дій.",
        "Documentation.LongDescription": "<p>Повертає подання таблиці \"<code>table</code>\", де функції, визначені параметром <code>handlers</code>, використовуються замість поведінки за замовчуванням, коли до цього подання застосовують певну операцію.</p>\r\n<p>Якщо <code>table</code> указано, усі функції обробника є необов’язковими. Якщо <code>table</code> не вказано, функції обробника <code>GetType</code> і <code>GetRows</code> необхідно вказати. Якщо для операції не вказано функцію обробника, до таблиці \"<code>table</code>\" натомість застосовується поведінка за замовчуванням для цієї операції (окрім випадків застосування функції <code>GetExpression</code>).</p>\r\n<p>Функції обробника мають повертати значення, семантично еквівалентне результату виконання операції для таблиці \"<code>table</code>\" (або отримане подання, якщо використовується <code>GetExpression</code>).</p>\r\n<p>Якщо функція обробника повертає помилку, до подання застосовується поведінка за замовчуванням для цієї операції.</p>\r\n<p>Можна використати <code>Table.View</code>, щоб запровадити складання до джерела даних – перетворити запити M на запити для конкретних джерел (наприклад, створити інструкцію T-SQL для запитів M).</p>\r\n<p>Перегляньте опубліковану документацію щодо настроюваного з’єднувача Power Query, щоб дізнатися більше про <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Створіть просте подання, яке не потребує доступу до рядків для визначення типу або кількості рядків.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Введіть назви організації та проекту.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (лише дошки)",
        "Documentation.LongDescription": "Повертає таблицю подань аналітики, доступної в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Імпорт даних із Vertica.",
        "Documentation.LongDescription": "Повертає таблицю схем, доступних на сервері (ім’я зазначається параметром <code>server</code>) у базі даних (ім’я зазначається параметром <code>database</code>).\r\nМожна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: параметр тривалості, який визначає, як довго очікувати на підключення до сервера, перш ніж перервати спробу. Стандартне значення залежить від драйвера.</li>\r\n    <li><code>CommandTimeout</code>: параметр тривалості, який визначає, як довго запиту на боці сервера дозволено працювати до скасування. Стандартне значення залежить від драйвера.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Створення списку таблиць у Vertica."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю з вмістом звіту з ресурсу Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Викликає задану кінцеву точку звітування Webtrends і повертає всі дані у вигляді таблиці.",
        "Documentation.Examples": [
          {
            "Description": "Викликає кінцеву точку звіту Webtrends про відвідувачів, щоб отримати дані за останні 30 днів.",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Таблиця з даними про відвідувачів"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Повертає список доменів Active Directory в лісі, у якому розташований вказаний домен або домен поточного комп'ютера, якщо жодний домен не вказано.",
        "Documentation.LongDescription": "Повертає список доменів Active Directory в лісі, у якому розташований вказаний домен або домен поточного комп'ютера, якщо жодний домен не вказано.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Повертає результати активного власного запиту щодо джерела даних ADO.NET.",
        "Documentation.LongDescription": "Повертає результати активного запиту \"<code>query</code>\" з рядком підключення \"<code>connectionString</code>\" за допомогою ADO.NET-постачальника \"<code>providerName</code>\". Рядок \"<code>connectionString</code>\" може бути текстом або записом про пари значень властивостей. Значення властивості можуть виражатися текстом або числом. Можна вказати додатковий параметр запису (<code>options</code>), щоб указати додаткові властивості. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Дає змогу контролювати тривалість виконання запиту на сервері, після досягнення якої він скасовується. Стандартне значення – 10 хвилин.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Параметр із логічним значенням (true або false), що визначає, чи створювати параметри сумісного із SQL Server рядка підключення для автентифікації Windows. Стандартне значення&#160;– true.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Повертає комплекти звітів в Adobe Analytics.",
        "Documentation.LongDescription": "Повертає таблицю багатовимірних пакетів з Adobe Analyics. Можна вказати додатковий параметр запису \"<code>options</code>\", щоб керувати такими параметрами:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно під час перегляду групувати таблиці за іменами схем (стандартне значення&#160;– false).</li>\r\n<li><code>MaxRetryCount</code> : Кількість повторних спроб отримати результати для запиту опитування. Стандартне значення: 120.</li>\r\n<li><code>RetryInterval</code> : Тривалість інтервалу між повторними спробами. Стандартне значення: 1&#160;секунда.</li>\r\n<li><code>Implementation</code> : Визначає версію інтерфейсу API Adobe Analytics. Припустимі значення: &quot;2.0&quot;. За замовчуванням використовується API версії 1.4</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Імпорт даних із Hive LLAP",
        "Documentation.LongDescription": "\r\nПовертає таблицю з Hive LLAP, указану в <code>базі даних</code> на <code>сервері</code> Hive LLAP за вибраним <code>протоколом</code>. Разом із сервером можна додатково вказати порт, відділивши його двокрапкою. Протокол Thrift Transport – це тип даних \"перелік\" зі значеннями \"Standard\", \"HTTP\". Ви можете вказати необов’язкові <code>значення</code>, щоб визначити такі параметри:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: тривалість очікування до відхилення спроби встановити з’єднання із сервером. Стандартне значення залежить від драйвера.</li>\r\n        <li><code>CommandTimeout</code>: тривалість виконання запиту сервера до його скасування. Стандартне значення залежить від драйвера.</li>\r\n</ul>\r\nЗначенняч <code>параметра</code> указано так: [параметр1 = значення1, параметр2 = значення2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за період від 01.05.2017 до 15.06.2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функція повертає дані зведень за період від 01.05.2017 до 15.06.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за квітень 2017 р.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функція повертає дані за період від 01.04.2017 до 30.04.2017."
          },
          {
            "Description": "Припускаючи, що сьогодні 15.06.2017, отримати дані зведень за період від квітня 2017 р. до цього часу.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функція повертає дані за період від 01.04.2017 до 15.06.2017."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Введіть назви організації та проекту.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Служби Azure DevOps",
        "Documentation.LongDescription": "Повертає таблицю каналів OData, доступних в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Підключайтеся до свого екземпляра Dataverse (у Dynamics 365 і в Power Apps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Об’єднує вказану таблицю розмірності з контекстом фільтра куба та змінює деталізацію вимірів контексту фільтра, розгортаючи вказаний набір атрибутів вимірів.",
        "Documentation.LongDescription": "Об’єднує вказану таблицю розмірності, <code>dimensionSelector</code>, з контекстом фільтра куба, <code>cube</code>, та змінює деталізацію вимірів, розгортаючи вказаний набір, <code>attributeNames</code>, атрибутів вимірів. Атрибути вимірів додано до табличного подання зі стовпцями з іменами <code>newColumnNames</code> або <code>attributeNames</code>, якщо не вказано.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Додає стовпець до кубу з результатами міри, застосованої до контексту кожного рядка.",
        "Documentation.LongDescription": "Додає стовпець з іменем <code>column</code> до <code>cube</code> з результатами міри <code>measureSelector</code>, застосованої до контексту кожного рядка. На застосування міри впливають зміни деталізації та розподілу вимірів. Значення мір корегуються після виконання певних операцій куба.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Укажіть середовище та компанію з Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Укажіть середовище та компанію з Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Укажіть середовище та компанію з Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Укажіть середовище та компанію з Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Повертає таблицю з відповідними даними Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Повертає вміст поточної книги Excel.",
        "Documentation.LongDescription": "Повертає вміст поточної книги Excel: таблиці, іменовані діапазони та динамічні масиви. На відміну від <code>excel.Workbook</code> ця функція не повертає аркуші.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Повернення змісту, знайденого за обліковим записом Microsoft Exchange.",
        "Documentation.LongDescription": "Повертає таблицю вмісту з облікового запису Microsoft Exchange <code>mailboxAddress</code>. Якщо параметр <code>mailboxAddress</code> не вказано, використовуються облікові дані стандартного облікового запису.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Сховище",
        "Documentation.Caption": "Сховище",
        "Documentation.Description": "Імпортує дані зі сховищ",
        "Documentation.LongDescription": "Імпортує дані зі сховищ"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Повертає облікові записи Google Analytics.",
        "Documentation.LongDescription": "Повертає облікові записи Google Analytics, доступ до яких можна отримати з поточними обліковими даними.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Імпорт даних із бази даних Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Повертає таблицю зі списком доступних проектів у Google BigQuery. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: параметр тривалості, який визначає, як довго очікувати підключення до сервера, перш ніж перервати спробу. Стандартне значення дорівнює часу очікування підключення ODBC.</li>\r\n        <li><code>CommandTimeout</code>: параметр тривалості, який визначає, як довго дозволено працювати запиту на боці сервера до скасування.</li>\r\n        <li><code>BillingProject</code>: ідентифікатор проекту для виставлення рахунків. За замовчуванням використовується ім’я першого доступного проекту.</li>\r\n        <li><code>UseStorageApi</code>: указує, чи слід використовувати API сховища BigQuery для великих наборів результатів. За замовчування для використання API сховища встановлено значення true. Щоб не використовувати API сховища, установіть значення false </li>\r\n      </ul>\r\n    Параметр запису вказується так: [параметр1 = значення1, параметр2 = значення2…].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Створити список доступних проектів у Google BigQuery",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Імпорт даних із lakehouse",
        "Documentation.Description": "Імпорт даних із lakehouse.",
        "Documentation.LongDescription": "Підключайтеся до всіх об’єктів lakehouse, до яких маєте доступ, і вибирайте сутності, що потрібно використовувати."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю з ключовими даними MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Повертає таблицю з ключовими даними MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з ключовими даними MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Таблиця з ключовими даними MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Повертає таблицю з діями потенційних клієнтів.",
        "Documentation.LongDescription": "Викликає кінцеву точку Marketo REST API за адресою <code>url</code>/rest/v1/activities.json. Повертаються всі дії в списку <code>activityIds</code>, які відбулися за період від дати, указаної в параметрі <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Отримує таблицю дій \"Відвідання веб-сторінки\" за період від 1 листопада 2015 р.",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Таблиця з докладними відомостями про всі дії \"Відвідання веб-сторінки\" за період від 1 листопада"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Потоки даних Power BI (застарілі)",
        "Documentation.Caption": "Імпортувати дані з потоку даних Power BI",
        "Documentation.LongDescription": "Підключіться до всіх доступних вам потоків даних Power BI і виберіть потрібні сутності."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Кіоски даних",
        "Documentation.Caption": "Кіоски даних",
        "Documentation.Description": "Імпорт даних із кіосків даних",
        "Documentation.LongDescription": "Імпорт даних із кіосків даних"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Потоки даних",
        "Documentation.Caption": "Імпорт даних із потоку даних",
        "Documentation.Description": "Імпорт даних із потоку даних",
        "Documentation.LongDescription": "Підключіться до всіх доступних вам потоків даних і виберіть сутності, які потрібно використовувати"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Імпорт даних зі служби QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Повертає таблицю зі списком доступних таблиць у QuickBooks Online. Можна вказати додатковий параметр запису <code>options</code>, щоб керувати наведеними нижче параметрами.\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: параметр тривалості, який визначає, як довго очікувати на підключення до сервера, перш ніж перервати спробу.</li>\r\n            <li><code>CommandTimeout</code>: параметр тривалості, який визначає, як довго дозволено працювати запиту на боці сервера до скасування.</li>\r\n          </ul>\r\n        Параметр запису вказується так: [параметр1 = значення1, параметр2 = значення2…].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Повертає об’єкти з облікового запису Salesforce.",
        "Documentation.LongDescription": "Повертає об’єкти з облікового запису Salesforce, визначеного в облікових даних. Обліковий запис буде підключено через указане середовище <code>loginUrl</code>. Якщо середовище не вказано, обліковий запис підключиться до робочого середовища (https://login.salesforce.com). Можна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Параметр із логічним значенням (true або false), що визначає, чи потрібно генерувати властивості навігації для значень, що повертаються (стандартне значення&#160;– false).</li>\r\n<li><code>ApiVersion</code> : Версія API Salesforce, яку потрібно використовувати для цього запиту. Якщо значення не вказано, використовується API версії 29.0.</li>\r\n<li><code>Timeout</code> : Дає змогу контролювати тривалість очікування на виконання запиту до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від джерела.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Повертає звіти з облікового запису Salesforce.",
        "Documentation.LongDescription": "Повертає звіти з облікового запису Salesforce, визначеного в облікових даних. Обліковий запис буде підключено через указане середовище <code>loginUrl</code>. Якщо середовище не вказано, обліковий запис підключиться до робочого середовища (https://login.salesforce.com). Можна вказати додатковий параметр запису <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n    <ul>\r\n<li><code>ApiVersion</code> : Версія API Salesforce, яку потрібно використовувати для цього запиту. Якщо значення не вказано, використовується API версії 29.0.</li>\r\n<li><code>Timeout</code> : Дає змогу контролювати тривалість очікування на виконання запиту до сервера, після досягнення якої спроба переривається. Стандартне значення залежить від джерела.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Повертає набори даних InfoCube і запити в системі сховища бізнес-даних SAP, згруповані за каталогами InfoArea.",
        "Documentation.LongDescription": "Повертає таблицю наборів даних InfoCube і запитів, згрупованих за каталогами InfoArea, з екземпляра сховища бізнес-даних SAP на сервері <code>server</code> із системним номером <code>systemNumberOrSystemId</code> та ідентифікатором клієнта <code>clientId</code>. Можна вказати додатковий параметр запису <code>optionsOrLogonGroup</code>, щоб керувати наведеними нижче параметрами.\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю аркушів, звітів, папок і робочих областей з інтерфейсу Smartsheet API.",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Повертає вкладену таблицю доступних аркушів, звітів, папок і робочих областей з інтерфейсу Smartsheet API.",
        "Documentation.Examples": [
          {
            "Description": "Повертає аркуші, папки, звіти та робочі області, доступні на верхньому рівні ієрархії Smartsheet.",
            "Code": "Smartsheet.Tables()",
            "Result": "Таблиця папок, звітів і робочих областей із верхнього рівня ієрархії Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю доступних показників з інтерфейсу SparkPost API версії 1.",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Ця функція дає змогу отримувати дані від окремої кінцевої точки \"Показники\" інтерфейсу SparkPost API версії 1. Оновлюючи ці таблиці або викликаючи SparkPost API за допомогою цього з’єднувача, пам’ятайте, що SparkPost API має суворе обмеження на частоту викликів. Якщо сервер SparkPost повертає код стану 429, це означає, що ви досягли обмеження частоти й повинні трохи зачекати, перш ніж здійснювати подальші виклики. Вибираючи значення для параметра \"Кількість днів\", майте на увазі, що цей API зберігає дані лише за 6 місяців.",
        "Documentation.Examples": [
          {
            "Description": "Отримує для всіх ідентифікаторів \"campaign_ids\" показники доставки \"count_sent\" і \"count_rejected\", узагальнені за останні три дні. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "таблиця"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Викликає Stripe API.",
        "Documentation.LongDescription": "Викликає Stripe API за адресою https://api.stripe.com/v1/<code>method</code>. При цьому передаються запис <code>additionalParameters</code> для додаткових параметрів і список очікуваних імен стовпців <code>ColumnNames</code>. Використовується ресурс Stripe версії 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Повертає таблицю з подіями, створеними після 1 листопада 2015 р.",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Таблиця з указаними подіями для поточного облікового запису Stripe"
          },
          {
            "Description": "Повертає таблицю з усіма обліковими номерами.",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Таблиця з усіма обліковими номерами для поточного облікового запису Stripe"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Повертає таблицю зі списком доступних таблиць і функцій Stripe.",
        "Documentation.LongDescription": "Повертає таблицю зі списком доступних таблиць і функцій Stripe."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Робоча область Azure Synapse Analytics",
        "Documentation.Caption": "Робоча область Azure Synapse Analytics",
        "Documentation.LongDescription": "З'єднувач PQ для робочої області Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Додає стовпець із вказаним іменем стовпця. Значення обчислюється з використанням вказаної функції вибору, причому кожний рядок розглядається як вхідні дані.",
        "Documentation.LongDescription": "Додає стовпець з іменем <code>newColumnName</code> у таблицю <code>table</code>. Значення для стовпця обчислюються з використанням указаної функції вибору <code>columnGenerator</code>, причому кожний рядок розглядається як вхідні дані.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Додайте до таблиці числовий стовпець \"ЗагальнаЦіна\", кожне значення якого має бути сумою стовпців [Ціна] і [Доставка].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Додає новий стовпець із типовими значеннями, отриманими за допомогою нечітких значень групування у вказаному стовпці таблиці.",
        "Documentation.LongDescription": "Додає новий стовпець <code>newColumnName</code> до <code>table</code> із репрезентативними значеннями <code>columnName</code>. Репрезентативні значення отримуються за допомогою значень розмитої відповідності в <code>columnName</code> для кожного рядка.\r\n    <p>Можна включити додатковий набір параметрів <code>options</code>, щоб указати, як порівнювати стовпці ключа. До параметрів належать: \r\n    <ul>\r\n<li><code>Culture</code> : Дає змогу згрупувати записи на основі правил культури. Це може бути будь-яке припустиме ім’я культури. Наприклад, параметр Culture зі значенням ja-JP групує записи на основі японської культури. Стандартне значення&#160;– &quot;&quot;, яке згруповано на основі еталонної англійської культури.</li>\r\n<li><code>IgnoreCase</code> : Логічне значення (true/false), яке дає змогу групувати ключі без урахування регістра. Наприклад, якщо встановлено значення true, рядок &quot;Виноград&quot; буде згруповано з рядком &quot;виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>IgnoreSpace</code> : Логічне значення (true/false), яке дає змогу об’єднувати частини тексту, щоб знайти групи. Наприклад, якщо встановлено значення true, рядок &quot;Вино град&quot; буде згруповано з рядком &quot;Виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>SimilarityColumnName</code> : Ім’я стовпця, який показує схожість між вхідним і репрезентативним значенням введених даних. Стандартне значення – NULL. Якщо використовується це значення, новий стовпець для схожих значень не буде додано.</li>\r\n<li><code>Threshold</code> : Число від 0,00 до 1,00 визначає оцінку подібності, на основі якої групуватимуться два значення.\r\n    Наприклад, &quot;Виноград&quot; і &quot;Винорад&quot; (без &quot;г&quot;) буде згруповано, лише якщо значення цього параметра менше 0,90.\r\n    З граничним значенням 1,00 дозволяються лише точні збіги.\r\n    (Зверніть увагу, що в розмитому &quot;точному збігу&quot; можуть ігноруватися такі відмінності, як регістр, порядок слів і знаки пунктуації.)\r\n    Стандартне значення&#160;– 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблиця, яка дає змогу групувати записи на основі зіставлення настроюваних значень. Вона має містити стовпці &quot;Звідки&quot; та &quot;Куди&quot;. Наприклад, рядок &quot;Виноград&quot; буде згруповано з рядком &quot;Родзинки&quot;, якщо є таблиця трансформації, де стовпець &quot;Звідки&quot; містить значення &quot;Виноград&quot;, а стовпець &quot;Куди&quot; – значення &quot;Родзинки&quot;. Зверніть увагу, що трансформацію буде застосовано до всього тексту в таблиці трансформації. У наведеній вище таблиці трансформації рядок &quot;Виноград солодкий&quot; буде також згруповано з рядком &quot;Родзинки солодкі&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Знайти типові значення розташування працівників.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Виконує об’єднання зазначених стовпців між таблицями та створює результат об’єднання в новому стовпці.",
        "Documentation.LongDescription": "Об'єднує рядки <code>table1</code> з рядками <code>table2</code> на основі рівності значень ключових стовпців, обраних <code>key1</code> (для <code>table1</code>) та <code>key2</code> (для <code>table2</code>). Результати заносяться в стовпець з іменем <code>newColumnName</code>.\r\nЦя функція поводиться аналогічно до Table.Join з JoinKind of LeftOuter, за винятком того, що об'єднані результати представлені у вкладений спосіб, а не у вигляді рядка.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Додати стовпець об'єднання до ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) з іменем \"ціна/товар\" із таблиці ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) в об'єднаний стовпець [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Додає ключ до таблиці.",
        "Documentation.LongDescription": "Додає ключ до <code>table</code>, де <code>columns</code> – список імен стовпців, які визначають ключ, а <code>isPrimary</code> указує, чи ключ є первинним.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Додайте стовпець первинного ключа до таблиці.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Додає стовпець із ранжируванням одного або кількох інших стовпців.",
        "Documentation.LongDescription": "Додає стовпець з іменем <code>newColumnName</code> до <code>table</code> з ранжируванням одного або кількох інших стовпців, описаних <code>comparisonCriteria</code>.\r\nДосвідчені користувачі можуть використовувати параметр RankKind у <code>options</code>, щоб вибрати більш конкретний метод ранжирування.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Додайте стовпець під назвою \"RevenueRank\" до таблиці, яка визначає стовпець \"Дохід\" від найвищого до найнижчого значення.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "З'єднує стовпець таблиць у кілька стовпців у вміщуваній таблиці.",
        "Documentation.LongDescription": "Збирає таблиці в <code>table</code>[<code>column</code>] у кілька стовпців, які містять агрегатні значення для таблиць. <code>aggregations</code> використовується, щоб указати стовпці, які містять таблиці, які необхідно з'єднати, агрегатні функції, які необхідно застосувати до таблиць, щоб створити їхні значення, та імена агрегатних стовпців, які необхідно створити.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "З'єднати стовпці таблиці в <code>[t]</code> у таблиці <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> у суму <code>[t.a]</code>, мінімальне та максимальне значення <code>[t.b]</code>, та кількість значень у <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Зберігає початковий зсув, потім приймає і пропускає наступні рядки.",
        "Documentation.LongDescription": "Зберігає початковий зсув, потім приймає і пропускає наступні рядки.\r\n    <ul>\r\n       <li><code>table</code>: Вхідна таблиця.</li>\r\n       <li><code>offset</code>: Кількість рядків, які необхідно зберегти до початку ітерацій.</li>\r\n       <li><code>skip</code>: Кількість рядків, які необхідно видалити в кожній ітерації.</li>\r\n       <li><code>take</code>: Кількість рядків, які необхідно зберегти в кожній ітерації.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Повернути з таблиці таблицю, де, починаючи з першого рядка, 1 значення пропускається й 1 наступне значення зберігається.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Об'єднує вказані стовпці в новий стовпець за допомогою вказаної функції об'єднання.",
        "Documentation.LongDescription": "Об'єднує вказані стовпці в новий стовпець за допомогою вказаної функції об'єднання.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Об’єднання прізвищ та імен у новому стовпці з використанням коми як роздільника.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Об'єднує вказані стовпці в новий стовпець із значенням запису, де кожен запис містить імена та значення полів, що відповідають іменам і значенням об’єднаних стовпців.",
        "Documentation.LongDescription": "Об’єднує вказані стовпці \"<code>table</code>\" у новий стовпець зі значеннями-записами та з іменем \"<code>newColumnName</code>\". Кожний запис містить імена полів і значення, що відповідають іменам стовпців і значенням об’єднаних стовпців. Якщо для \"<code>options</code>\" указано запис, можна вказати такі параметри:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code> – у текстовому вигляді означає, що ім’я стовпця має слугувати відображуваним іменем запису. Цей параметр не має відповідати стовпцю в записі;</li>\r\n     <li> <code>TypeName</code> – у текстовому вигляді означає, що це ім’я логічного типу для отриманого запису, що можна використовувати під час завантаження даних, щоб керувати поведінкою в середовищі завантаження. </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Дублює стовпець із вказаним іменем стовпця. Значення та тип копіюються з вихідного стовпця.",
        "Documentation.LongDescription": "Дублювати стовпець з іменем <code>columnName</code> у таблицю <code>table</code>. Значення та тип для стовпця <code>newColumnName</code> копіюються зі стовпця <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Дублювання стовпця \"a\" у стовпець з іменем \"скопійований стовпець\" у таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Розгортає стовпець записів у стовпці з кожним зі значень.",
        "Documentation.LongDescription": "Маючи <code>column</code> записів у вхідному <code>table</code>, створює таблицю зі стовпцем для кожного поля у записі. Можна також вказати <code>newColumnNames</code> для забезпечення унікальних імен для стовпців у новій таблиці.\r\n    <ul>\r\n        <li><code>table</code>: Оригінальна таблиця зі стовпцем записів для розгортання. </li>\r\n        <li><code>column</code>: Стовпець для розгортання.</li>\r\n        <li><code>fieldNames</code>: Список полів для розгортання у стовпці в таблиці.</li>\r\n        <li><code>newColumnNames</code>: Список імен для нових стовпців. Нові імена стовпців не можуть дублювати стовпці в новій таблиці.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Розгорнути стовпець [a] у таблиці <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> у 3 стовпці \"aa\", \"bb\" та \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Розгортає стовпець записів або стовпець таблиць у декілька стовпців у таблиці.",
        "Documentation.LongDescription": "Розгортає таблиці в <code>table</code>[<code>column</code>] у кілька рядків і стовпців. <code>columnNames</code> використовується для вибору стовпців для розгортання із внутрішньої таблиці. <code>newColumnNames</code> визначається для уникнення конфліктів між існуючими та новими стовпцями.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Розгорнути стовпці таблиці в <code>[a]</code> у таблиці <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> у 3 стовпці <code>[t.a]</code>, <code>[t.b]</code> та <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Групує рядки таблиці на основі розмитої відповідності ключів.",
        "Documentation.LongDescription": "Згруповує рядки <code>table</code> за значенням розмитої відповідності у вказаному стовпці <code>key</code> для кожного рядка.\r\n    Для кожної групи створюється запис, який містить стовпці ключа (і їхні значення), а також будь-які сукупні стовпці, визначені параметром <code>aggregatedColumns</code>.\r\n    Ця функція не гарантує повернення рядків у фіксованому порядку.\r\n    <p>Можна включити додатковий набір параметрів<code>options</code>, щоб указати, як порівнювати стовпці ключа. До параметрів належать: \r\n    <ul>\r\n<li><code>Culture</code> : Дає змогу згрупувати записи на основі правил культури. Це може бути будь-яке припустиме ім’я культури. Наприклад, параметр Culture зі значенням ja-JP групує записи на основі японської культури. Стандартне значення&#160;– &quot;&quot;, яке згруповано на основі еталонної англійської культури.</li>\r\n<li><code>IgnoreCase</code> : Логічне значення (true/false), яке дає змогу групувати ключі без урахування регістра. Наприклад, якщо встановлено значення true, рядок &quot;Виноград&quot; буде згруповано з рядком &quot;виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>IgnoreSpace</code> : Логічне значення (true/false), яке дає змогу об’єднувати частини тексту, щоб знайти групи. Наприклад, якщо встановлено значення true, рядок &quot;Вино град&quot; буде згруповано з рядком &quot;Виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>SimilarityColumnName</code> : Ім’я стовпця, який показує схожість між вхідним і репрезентативним значенням введених даних. Стандартне значення – NULL. Якщо використовується це значення, новий стовпець для схожих значень не буде додано.</li>\r\n<li><code>Threshold</code> : Число від 0,00 до 1,00 визначає оцінку подібності, на основі якої групуватимуться два значення.\r\n    Наприклад, &quot;Виноград&quot; і &quot;Винорад&quot; (без &quot;г&quot;) буде згруповано, лише якщо значення цього параметра менше 0,90.\r\n    З граничним значенням 1,00 дозволяються лише точні збіги.\r\n    (Зверніть увагу, що в розмитому &quot;точному збігу&quot; можуть ігноруватися такі відмінності, як регістр, порядок слів і знаки пунктуації.)\r\n    Стандартне значення&#160;– 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблиця, яка дає змогу групувати записи на основі зіставлення настроюваних значень. Вона має містити стовпці &quot;Звідки&quot; та &quot;Куди&quot;. Наприклад, рядок &quot;Виноград&quot; буде згруповано з рядком &quot;Родзинки&quot;, якщо є таблиця трансформації, де стовпець &quot;Звідки&quot; містить значення &quot;Виноград&quot;, а стовпець &quot;Куди&quot; – значення &quot;Родзинки&quot;. Зверніть увагу, що трансформацію буде застосовано до всього тексту в таблиці трансформації. У наведеній вище таблиці трансформації рядок &quot;Виноград солодкий&quot; буде також згруповано з рядком &quot;Родзинки солодкі&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Групування таблиці, що додає стовпець статистики [Count], який містить кількість працівників у кожному розташуванні (\"each Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Об’єднує рядки з двох таблиць із розмитою відповідністю на основі заданих ключів.",
        "Documentation.LongDescription": "<p>Об’єднує рядки таблиць \"<code>table1</code>\" і \"<code>table2</code>\" на основі розмитої відповідності значень обраних стовпців ключа (обирають: <code>key1</code> для таблиці \"<code>table1</code>\", <code>key2</code> для таблиці \"<code>table2</code>\").</p>\r\n<p>Розмита відповідність – це порівняння на основі схожості, а не тотожності тексту.</p>\r\n<p>За замовчуванням виконується внутрішнє об’єднання, але тип об’єднання можна вказати, включивши додатковий параметр <code>joinKind</code>. До параметрів належать:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Можна включити додатковий набір параметрів <code>joinOptions</code>, щоб указати, як порівнювати стовпці ключа. До параметрів належать:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Число від 1 до 8, яке визначає кількість паралельних потоків, які потрібно використовувати для розмитої відповідності. Стандартне значення – 1.</li>\r\n<li><code>Culture</code> : Дає змогу зіставити записи на основі правил культури. Це може бути будь-яке припустиме ім’я культури. Наприклад, параметр Culture зі значенням ja-JP зіставляє записи на основі японської культури. Стандартне значення&#160;– &quot;&quot;, яке згруповано на основі еталонної англійської культури.</li>\r\n<li><code>IgnoreCase</code> : Логічне значення (true/false), яке дає змогу зіставити ключі без урахування регістра. Наприклад, якщо встановлено значення true, рядок &quot;Виноград&quot; буде зіставлено з рядком &quot;виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>IgnoreSpace</code> : Логічне значення (true/false), яке дає змогу об’єднувати частини тексту, щоб знайти збіги. Наприклад, якщо встановлено значення true, рядок &quot;Вино град&quot; буде зіставлено з рядком &quot;Виноград&quot;. Стандартне значення&#160;– true.</li>\r\n<li><code>NumberOfMatches</code> : Ціле число, яке означає максимальну кількість збігів, які можна повернути для кожного вхідного рядка. Наприклад, якщо вказано значення 1, повернеться щонайбільше один збіг для кожного вхідного рядка. Якщо цей параметр не вказано, повертатимуться всі збіги.</li>\r\n<li><code>SimilarityColumnName</code> : Ім’я стовпця, який показує схожість між вхідним і репрезентативним значенням введених даних. Стандартне значення – NULL. Якщо використовується це значення, новий стовпець для схожих значень не буде додано.</li>\r\n<li><code>Threshold</code> : Число від 0,00 до 1,00 визначає оцінку подібності, на основі якої зіставлятимуться два значення.\r\n    Наприклад, &quot;Виноград&quot; і &quot;Винорад&quot; (без &quot;г&quot;) буде зіставлено, лише якщо значення цього параметра менше 0,90.\r\n    З граничним значенням 1,00 дозволяються лише точні збіги.\r\n    (Зверніть увагу, що в розмитому &quot;точному збігу&quot; можуть ігноруватися такі відмінності, як регістр, порядок слів і знаки пунктуації.)\r\n    Стандартне значення&#160;– 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблиця, яка дає змогу зіставити записи на основі зіставлення настроюваних значень. Вона має містити стовпці &quot;Звідки&quot; та &quot;Куди&quot;. Наприклад, рядок &quot;Виноград&quot; буде зіставлено з рядком &quot;Родзинки&quot;, якщо є таблиця трансформації, де стовпець &quot;Звідки&quot; містить значення &quot;Виноград&quot;, а стовпець &quot;Куди&quot; – значення &quot;Родзинки&quot;. Зверніть увагу, що трансформацію буде застосовано до всього тексту в таблиці трансформації. У наведеній вище таблиці трансформації рядок &quot;Виноград солодкий&quot; буде також зіставлено з рядком &quot;Родзинки солодкі&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ліве внутрішнє розмите об’єднання на основі [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Виконує розмите об’єднання зазначених стовпців між таблицями та створює результат об’єднання в новому стовпці.",
        "Documentation.LongDescription": "<p>Об’єднує рядки таблиць \"<code>table1</code>\" і \"<code>table2</code>\" на основі розмитої відповідності значень стовпців ключів, вибраних за ключем \"<code>key1</code>\" (для таблиці \"<code>table1</code>\") і \"<code>key2</code>\" (для \"<code>table2</code>\"). Результати повертаються в новому стовпці з іменем \"<code>newColumnName</code>\".</p>\r\n<p>Розмита відповідність – це порівняння на основі подібності, а не тотожності тексту.</p>\r\n<p>Додатковий параметр <code>joinKind</code> указує вид з’єднання, яке слід виконати. Якщо значення параметра <code>joinKind</code> не вказано, за замовчуванням виконується ліве зовнішнє з’єднання. Доступні такі варіанти:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Можна включити додатковий набір параметрів <code>joinOptions</code>, щоб указати, як порівнювати стовпці ключів. Доступні такі варіанти:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : Число від 1 до 8, яке визначає кількість паралельних потоків, які потрібно використовувати для розмитої відповідності. Стандартне значення – 1.</li>\r\n<li><code>Culture</code> : Дає змогу зіставити записи на основі правил культури. Це може бути будь-яке припустиме ім’я культури. Наприклад, параметр Culture зі значенням ja-JP зіставляє записи на основі японської культури. Стандартне значення&#160;– &quot;&quot;, яке згруповано на основі еталонної англійської культури.</li>\r\n<li><code>IgnoreCase</code> : Логічне значення (true/false), яке дає змогу зіставити ключі без урахування регістра. Наприклад, якщо встановлено значення true, рядок &quot;Виноград&quot; буде зіставлено з рядком &quot;виноград&quot;. Стандартне значення – true.</li>\r\n<li><code>IgnoreSpace</code> : Логічне значення (true/false), яке дає змогу об’єднувати частини тексту, щоб знайти збіги. Наприклад, якщо встановлено значення true, рядок &quot;Вино град&quot; буде зіставлено з рядком &quot;Виноград&quot;. Стандартне значення&#160;– true.</li>\r\n<li><code>NumberOfMatches</code> : Ціле число, яке означає максимальну кількість збігів, які можна повернути для кожного вхідного рядка. Наприклад, якщо вказано значення 1, повернеться щонайбільше один збіг для кожного вхідного рядка. Якщо цей параметр не вказано, повертатимуться всі збіги.</li>\r\n<li><code>SimilarityColumnName</code> : Ім’я стовпця, який показує схожість між вхідним і репрезентативним значенням введених даних. Стандартне значення – NULL. Якщо використовується це значення, новий стовпець для схожих значень не буде додано.</li>\r\n<li><code>Threshold</code> : Число від 0,00 до 1,00 визначає оцінку подібності, на основі якої зіставлятимуться два значення.\r\n    Наприклад, &quot;Виноград&quot; і &quot;Винорад&quot; (без &quot;г&quot;) буде зіставлено, лише якщо значення цього параметра менше 0,90.\r\n    З граничним значенням 1,00 дозволяються лише точні збіги.\r\n    (Зверніть увагу, що в розмитому &quot;точному збігу&quot; можуть ігноруватися такі відмінності, як регістр, порядок слів і знаки пунктуації.)\r\n    Стандартне значення&#160;– 0,80.</li>\r\n<li><code>TransformationTable</code> : Таблиця, яка дає змогу зіставити записи на основі зіставлення настроюваних значень. Вона має містити стовпці &quot;Звідки&quot; та &quot;Куди&quot;. Наприклад, рядок &quot;Виноград&quot; буде зіставлено з рядком &quot;Родзинки&quot;, якщо є таблиця трансформації, де стовпець &quot;Звідки&quot; містить значення &quot;Виноград&quot;, а стовпець &quot;Куди&quot; – значення &quot;Родзинки&quot;. Зверніть увагу, що трансформацію буде застосовано до всього тексту в таблиці трансформації. У наведеній вище таблиці трансформації рядок &quot;Виноград солодкий&quot; буде також зіставлено з рядком &quot;Родзинки солодкі&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Ліве внутрішнє розмите об’єднання на основі [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Згруповує рядки таблиці, що містять однаковий ключ.",
        "Documentation.LongDescription": "Групує рядки <code>table</code> за ключовими стовпцями, визначеними <code>key</code>. Значенням <code>key</code> може бути одне ім’я стовпця або список імен стовпців.\r\n    Для кожної групи складається запис із ключовими стовпцями (і їхніми значеннями), а також усіма агрегованими стовпцями, визначеними <code>aggregatedColumns</code>.\r\n    Додатково можна вказати <code>groupKind</code> і <code>comparer</code>.<br>\r\n    <br>\r\n    Якщо дані вже відсортовано за ключовими стовпцями, можна застосувати <code>groupKind</code> GroupKind.Local. У певних випадках це може збільшити продуктивність групування,\r\n    оскільки всі рядки із заданим набором ключових значень вважаються суцільними.<br>\r\n    <br>\r\n    Під час передавання <code>comparer</code>, зверніть увагу, що якщо різні ключі розглядаються як рівні, рядок може бути розміщено в групі, ключі в якій відрізняються від його власних.<br>\r\n    <br>\r\n    Ця функція не гарантує впорядкування рядків, які вона повертає.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Згрупувати таблицю з додаванням сукупного стовпця [total], що міститиме суму цін (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Вставляє список рядків у вказану позицію в таблиці.",
        "Documentation.LongDescription": "Повертає таблицю зі списком рядків, <code>rows</code>, вставлених у <code>table</code> у вказану позицію, <code>offset</code>. Кожний стовпець у рядку для вставлення повинен мати типи стовпців таблиці.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Вставити рядок у таблицю в позицію 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Вставити два рядки в таблицю в позицію 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Об'єднує рядки з двох таблиць, які відповідають заданим ключам.",
        "Documentation.LongDescription": "<p>Дає змогу об’єднати рядки таблиць \"<code>table1</code>\" і \"<code>table2</code>\" на основі рівності значень у вибраних стовпцях ключів (\"<code>key1</code>\" для \"<code>table1</code>\" та \"<code>key2</code>\" для \"<code>table2</code>\").</p>\r\n<p>За замовчуванням виконується внутрішнє об’єднання, але тип об’єднання можна вказати, включивши додатковий параметр <code>joinKind</code>. До параметрів належать:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Можна включити додатковий набір параметрів <code>keyEqualityComparers</code>, щоб указати, як порівнювати стовпці ключів. Зараз цей параметр призначений лише для внутрішнього використання.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте дві таблиці за допомогою одного ключового стовпця.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Об’єднайте дві таблиці з конфліктними іменами стовпців, використовуючи кілька ключових стовпців.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Повертає найбільші рядки за даним критерієм.",
        "Documentation.LongDescription": "Повертає найбільші рядки в таблиці (<code>table</code>) за такої умови: <code>comparisonCriteria</code>.\r\n    Після сортування рядків необхідно вказати значення параметра <code>countOrCondition</code>, щоб забезпечити подальше фільтрування результату. Зверніть увагу: алгоритм сортування не може забезпечувати постійно однаковий результат сортування. Параметр <code>countOrCondition</code> може мати кілька форм.\r\n    <ul>\r\n        <li> Якщо вказано число, функція повертає список з упорядкованими за зростанням елементами кількістю до <code>countOrCondition</code>. </li>\r\n        <li> Якщо вказано умову, функція повертає список елементів, які спочатку відповідають цій умові. Щойно виявиться невідповідність елемента умові, наступні елементи не розглядаються. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти в таблиці рядок із найбільшим значенням у стовпці [a] за умови, що [a] > 0. Рядки сортуються перед застосуванням фільтра.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Знайти в таблиці рядок із найбільшим значенням у стовпці [a] за умови, що [b] > 0. Рядки сортуються перед застосуванням фільтра.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Повертає найменші рядки за даним критерієм.",
        "Documentation.LongDescription": "Повертає найменші рядки в таблиці (<code>table</code>) за такої умови: <code>comparisonCriteria</code>. Після сортування рядків необхідно вказати значення параметра \"<code>countOrCondition</code>\", щоб забезпечити подальше фільтрування результату. Зверніть увагу, алгоритм сортування може не забезпечувати постійно однаковий результат сортування. Параметр \"<code>countOrCondition</code>\" може мати кілька форм:\r\n    <ul>\r\n        <li> Якщо вказано число, функція повертає список, що містить таку кількість елементів, яка не перевищує значення параметра \"<code>countOrCondition</code>\", упорядкованих за зростанням. </li>\r\n        <li> Якщо вказано умову, функція повертає список елементів, які спочатку задовольняють цю умову. Щойно один елемент не задовольняє умову, наступні елементи не розглядаються. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти в таблиці рядок із найменшим значенням у стовпці [a] за умови, що [a] < 3. Рядки сортуються перед застосуванням фільтра.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Знайти в таблиці рядок із найменшим значенням у стовпці [a] за умови, що [b] < 0. Рядки сортуються перед застосуванням фільтра.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Виконує об’єднання зазначених стовпців між таблицями та створює результат об’єднання в новому стовпці.",
        "Documentation.LongDescription": "<p>Дає змогу об’єднати рядки таблиць \"<code>table1</code>\" і \"<code>table2</code>\" на основі рівності значень у вибраних стовпцях ключів (\"<code>key1</code>\" – для \"<code>table1</code>\" і \"<code>key2</code>\" – для \"<code>table2</code>\"). Результати потрапляють у стовпець з іменем \"<code>newColumnName</code>\".</p>\r\n<p>За допомогою додаткового параметра <code>joinKind</code> можна вказати потрібний тип об’єднання. Якщо значення <code>joinKind</code> не задано, за замовчуванням виконується ліве зовнішнє з’єднання.</p>\r\n<p>Можна включити додатковий набір параметрів <code>keyEqualityComparers</code>, щоб указати, як порівнювати стовпці ключів. Зараз ця функція призначена лише для внутрішнього використання.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте дві таблиці за допомогою одного ключового стовпця.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "По парі стовпців, що представляють пари атрибут-значення, обертає дані у стовпці атрибутів у заголовки стовпців.",
        "Documentation.LongDescription": "По парі стовпців, що представляють пари атрибут-значення, обертає дані у стовпці атрибутів у заголовки стовпців.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Звести значення \"a\", \"b\" і \"c\" у стовпці атрибутів таблиці <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> до їхнього стовпця.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Звести значення \"a\", \"b\" і \"c\" у стовпці атрибутів таблиці <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> до їхнього стовпця.  Атрибут \"c\" для ключа \"x\" має декілька значень, пов'язаних із ним, тому скористайтеся функцією List.Max для вирішення конфлікту.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Замінює вказаний діапазон рядків наданими рядками.",
        "Documentation.LongDescription": "Замінює зазначену кількість рядків, <code>count</code>, у вхідній <code>table</code> вказаними <code>rows</code>, починаючи після <code>offset</code>. Параметр <code>rows</code> є списком записів.\r\n    <ul>\r\n       <li><code>table</code>: Таблиця, у якій виконується заміна.</li>\r\n       <li><code>offset</code>: Кількість рядків, які необхідно пропустити до початку заміни.</li>\r\n       <li><code>count</code>: Кількість рядків, які потрібно замінити.</li>\r\n       <li><code>rows</code>: Список записів рядків, які слід вставити в <code>table</code> в положення, вказане <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Замінити 3 рядки, починаючи з позиції 1.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Замінює одне значення на інше у вказаних стовпцях.",
        "Documentation.LongDescription": "Замінює <code>oldValue</code> на <code>newValue</code> у вказаних стовпцях у <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Замінити у стовпці B текст \"goodbye\", що відповідає лише значенню цілком, на \"world\".",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Замінити у стовпці B текст \"goodbye\", що відповідає будь-якій частині значення, на \"world\".",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Анонімізувати імена співробітників у США.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Анонімізувати всі стовпці співробітників у США.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Розділяє вказані стовпці на додаткові стовпці за допомогою вказаної функції поділу.",
        "Documentation.LongDescription": "Розділяє вказані стовпці на додаткові стовпці за допомогою вказаної функції поділу.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Розділити стовпець [Ім’я] на два стовпці в позиції \"i\"",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Перекладає набір стовпців у таблиці в пари атрибут-значення.",
        "Documentation.LongDescription": "Перекладає набір стовпців у таблиці в пари атрибут-значення, поєднані з рештою значень у кожному рядку.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Скасувати зведення стовпців \"a\", \"b\" та \"c\" у таблиці <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> до пар атрибут-значення.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Перекладає всі стовпці, крім заданого набору, у пари атрибут-значення.",
        "Documentation.LongDescription": "Перетворює всі стовпці, крім заданого набору, на пари атрибут-значення в поєднанні з рештою значень у кожному рядку.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Перетворює всі стовпці, крім заданого набору, на пари атрибут-значення в поєднанні з рештою значень у кожному рядку.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams Personal Analytics",
        "Documentation.LongDescription": "<p>Цей аналітичний з’єднувач для Teams дає змогу отримувати висновки щодо використання рішення. Переглядайте дані щодо своїх окремих дій і активності в групах.</p>\r\n<p>Відомості доступні за попередні 90 днів.</p>\r\n<p>Щоб дізнатися більше про типи доступних даних, див. довідкову документацію, зокрема:</p>\r\n<ul>\r\n<li><b>про використання Teams</b> – https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>про активність користувача</b> – https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Введіть назви організації та проекту.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Служби Azure DevOps",
        "Documentation.LongDescription": "Повертає таблицю каналів OData, доступних в Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Повертає двійковий формат, який читає двійкове значення.",
        "Documentation.LongDescription": "Повертає двійковий формат, який читає двійкове значення. Якщо задано <code>length</code>, двійкове значення міститиме вказану кількість байтів. Якщо <code>length</code> не вказано, двійкове значення міститиме байти, що залишилися. <code>length</code> можна вказувати у форматі звичайного числа або двійкового представлення довжини, що передує двійковим даним.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Повертає логічне значення на основі перевірки рівності двох заданих значень.",
        "Documentation.LongDescription": "Перевіряє рівність двох заданих значень, \"<code>x</code>\" і \"<code>y</code>\", за допомогою вказаної функції <code>comparer</code>, і повертає значення типу <code>logical</code>.\r\n      <div>\r\n        <code>comparer</code> – це функція типу <code>Comparer</code> для контролю над порівнянням.\r\n         Такі функції приймають два аргументи та повертають значення -1,0 або 1, залежно від того, чи перше значення менше, дорівнює або є більшим за друге.\r\n        Засоби порівняння використовуються для надання порівнянь без урахування регістра або з урахуванням культури та локалізації.\r\n      </div>\r\n      <div>\r\n        Мова формул передбачає такі вбудовані засоби порівняння:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: слугує для точного порядкового порівняння</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: виконує точне порядкове порівняння без урахування регістра.</li>\r\n        <li> <code>Comparer.FromCulture</code>: виконує порівняння з огляду на культуру.</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Порівняти \"1\" та \"A\" за допомогою локалізації \"en-US\", щоб визначити, чи значення однакові.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Повертає поточну дату та час у місцевому часовому поясі. Це значення – фіксоване, і воно не зміниться після наступних викликів.",
        "Documentation.LongDescription": "Повертає значення <code>datetime</code>, встановлене для поточної дати й часу в системі. Це значення – фіксоване, воно не зміниться після наступних викликів на відміну від DateTime.LocalNow, що може повертати різні значення в ході виконання виразу.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Повертає поточну дату та час у місцевому часовому поясі.",
        "Documentation.LongDescription": "Повертає значення <code>datetime</code>, встановлене для поточної дати й часу в системі.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Повертає поточну дату та час у місцевому часовому поясі. Це значення – фіксоване, і воно не зміниться після наступних викликів.",
        "Documentation.LongDescription": "Повертає значення <code>datetime</code>, встановлене для поточної дати й часу в системі. Повернуте значення містить інформацію про місцевий часовий пояс. Це значення – фіксоване, воно не зміниться після наступних викликів на відміну від DateTimeZone.LocalNow, що може повертати різні значення в ході виконання виразу.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Повертає поточну дату й час за часом UTC (за Гринвічем). Це значення – фіксоване, і воно не зміниться після наступних викликів.",
        "Documentation.LongDescription": "Повертає поточну дату й час за часом UTC (за Гринвічем). Це значення – фіксоване, і воно не зміниться після наступних викликів.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Повертає поточну дату та час у місцевому часовому поясі.",
        "Documentation.LongDescription": "Повертає значення <code>datetimezone</code>, установлене для поточних дати й часу в системі.\r\n    Повернуте значення містить інформацію про місцевий часовий пояс.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Повертає поточну дату й час за часом UTC (за Гринвічем).",
        "Documentation.LongDescription": "Повертає поточну дату й час за часом UTC (за Гринвічем).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Визначення поточної дати й часу за UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Повертає непрозорий ідентифікатор для обчислення, яке виконується в поточний момент.",
        "Documentation.LongDescription": "Повертає непрозорий ідентифікатор для обчислення, яке виконується в поточний момент.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Повертає непрозорий ідентифікатор для кореляції вхідних запитів із вихідними.",
        "Documentation.LongDescription": "Повертає непрозорий ідентифікатор для кореляції вхідних запитів із вихідними.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Записує запис трасування, якщо його ввімкнуто, і повертає значення.",
        "Documentation.LongDescription": "Записує трасування <code>message</code>, якщо його ввімкнуто, і повертає значення <code>value</code>. Додатковий параметр <code>delayed</code> вказує, чи слід відкласти обчислення значення <code>value</code>, доки не завершиться трасування повідомлення. <code>traceLevel</code> може мати одне з таких значень:\r\n    <code>TraceLevel.Critical</code>;\r\n    <code>TraceLevel.Error</code>;\r\n    <code>TraceLevel.Warning</code>;\r\n    <code>TraceLevel.Information</code>;\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Трасування повідомлення перед викликом функції Text.From і повернення результату.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Стандартний постачальник ідентичностей для поточного хоста.",
        "Documentation.LongDescription": "Стандартний постачальник ідентичностей для поточного хоста.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Накопичує сумарне значення з елементів у списку.",
        "Documentation.LongDescription": "Накопичує сумарне значення з елементів у списку <code>list</code> з використанням <code>accumulator</code>.\r\n    Можна встановити додатковий параметр початкового значення, <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Накопичує сумарне значення з елементів у списку {1, 2, 3, 4, 5} з використанням ((стан, поточний) => стан + поточний ).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Створює список значень datetimezone із заданими початковим значенням, кількістю значень та значенням приросту тривалості.",
        "Documentation.LongDescription": "Повертає список значень <code>datetimezone</code> за розміром <code>count</code>, починаючи з <code>start</code>. Заданий приріст, <code>step</code>, – це значення <code>duration</code>, яке додається до кожного значення.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список із 10 значень, починаючи з 5 хвилин до Нового року (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) і з приростом на 1 хвилину (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Створює список значень datetime із заданими початковим значенням, кількістю значень та значенням приросту тривалості.",
        "Documentation.LongDescription": "Повертає список значень <code>datetime</code> за розміром <code>count</code>, починаючи з <code>start</code>. Заданий приріст, <code>step</code>, – це значення <code>duration</code>, яке додається до кожного значення.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список з 10 значень, починаючи з 5 хвилин до Нового року (#datetime(2011, 12, 31, 23, 55, 0)) і з приростом на 1 хвилину (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Створює список значень date із заданими початковим значенням, кількістю значень та значенням приросту тривалості.",
        "Documentation.LongDescription": "Повертає список значень <code>date</code> за розміром <code>count</code>, починаючи з <code>start</code>. Заданий приріст, <code>step</code>, – це значення <code>duration</code>, яке додається до кожного значення.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список із 5 значень, починаючи з передодня Нового року (#date(2011, 12, 31)), з приростом на 1 день (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Створює список значень тривалості із заданими початковим значенням, кількістю значень та значенням приросту тривалості.",
        "Documentation.LongDescription": "Повертає список значень <code>count</code> <code>duration</code>, починаючи з <code>start</code> і з приростом на задану <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список із 5 значень, починаючи з 1 години, з приростом на годину.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Створює список значень.",
        "Documentation.LongDescription": "Створює список значень, використовуючи вказані функції. Функція <code>initial</code> створює початкове значення кандидата, яке потім тестується за <code>condition</code>.\r\n    Якщо значення кандидата затверджується, воно повертається як частина отримуваного списку, а потім передаванням щойно затвердженого значення <code>next</code> створюється наступне значення кандидата.\r\n    Якщо значення кандидата не відповідає <code>condition</code>, створення списку зупиняється.\r\n    Додатковий параметр <code>selector</code> дає змогу задати перетворення елементів в отриманому списку.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список чисел, що починається з десяти. Числа почергового зменшуються на один. В усіх елементів має бути значення, більше за нуль.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Створює список записів, що містить x та y, де x – значення, а y – список. x має бути менше 10 і представляє кількість елементів у списку y. Після створення списку повертає лише значення x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Вставляє значення у список із заданим індексом.",
        "Documentation.LongDescription": "Повертає новий список, створений шляхом вставлення значень зі списку <code>values</code> у список <code>list</code> з індексом <code>index</code>. Перша позиція у списку має індекс 0.\r\n      <ul>\r\n        <li><code>list</code>: Цільовий список, в який необхідно вставити значення.</li>\r\n        <li><code>index</code>: Індекс цільового списку(<code>list</code>), в який необхідно вставити значення. Перша позиція у списку має індекс 0.</li>\r\n        <li><code>values</code>: Список значень, які необхідно вставити у список <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Вставити список ({3, 4}) у цільовий список ({1, 2, 5}) з індексом 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Вставити список із вкладеним списком ({1, {1.1, 1.2}}) у цільовий список ({2, 3, 4}) з індексом 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Замінює задану кількість значень, починаючи з указаної позиції, на значення заміни.",
        "Documentation.LongDescription": "Замінює <code>count</code> значення у списку <code>list</code> на список <code>replaceWith</code>, починаючи з указаної позиції, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Замінити {7, 8, 9} у списку {1, 2, 7, 8, 9, 5} на {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Шукає у списку вказане значення та замінює його.",
        "Documentation.LongDescription": "Шукає у списку значень, <code>list</code>, значення <code>oldValue</code> і замінює кожне його входження на значення заміни <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Замінити усі значення \"a\" у списку {\"a\", \"B\", \"a\", \"a\"} на \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Створює список значень time із заданими початковим значенням, кількістю значень та значенням приросту тривалості.",
        "Documentation.LongDescription": "Повертає список значень <code>time</code> за розміром <code>count</code>, починаючи з <code>start</code>. Заданий приріст, <code>step</code>, – це значення <code>duration</code>, яке додається до кожного значення.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список з 4 значень, починаючи з полудня (#time(12, 0, 0)) і з приростом на 1 годину (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Повертає список, елементи якого перетворені із вхідного списку за допомогою вказаних функцій.",
        "Documentation.LongDescription": "Повертає список, елементи якого проектуються з вхідного списку.<br>\r\n    <br>\r\n    Функція <code>collectionTransform</code> перетворює кожен елемент на проміжний список, а функція <code>resultTransform</code> отримує вихідний елемент, а також елемент із проміжного списку для створення кінцевого результату.<br>\r\n    <br>\r\n    Функція <code>collectionTransform</code> має підпис <code>(x as any) as list => …</code>,  де <code>x</code> є елементом у <code>list</code>.\r\n    Функція <code>resultTransform</code> проектує форму результату та має підпис <code>(x as any, y as any) as any => …</code>, де <code>x</code> є елементом у <code>list</code>, а <code>y</code> – елементом зі списку, створеного шляхом передавання <code>x</code> до <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Представте список людей і їхніх улюбленців у вигляді рядка.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Повертає випадкове число.",
        "Documentation.LongDescription": "Повертає випадкове число від 0 до 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Отримати випадкове число.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Додає поле до запису.",
        "Documentation.LongDescription": "Додає поле до запису <code>record</code>, враховуючи ім'я поля <code>fieldName</code> і значення <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Додати до запису поле \"Адреса\".",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Замінює текст у введених даних.",
        "Documentation.LongDescription": "Замінює текст <code>old</code> у вихідному <code>text</code> на текст <code>new</code>. Ця функція заміни може використовуватися в <code>List.ReplaceValue</code> і <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Замінити текст \"hE\" на \"He\" у рядку \"hEllo world\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Замінює значення у введених даних.",
        "Documentation.LongDescription": "Замінює значення <code>old</code> у вихідному <code>value</code> на значення <code>new</code>. Ця функція заміни може використовуватися в <code>List.ReplaceValue</code> і <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Замінити значення 11 на значення 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Повертає результат формату JSON з інтерфейсу API SmartSheet.",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Викликає REST API Smartsheet 2.0 у зазначеній кінцевій точці й повертає результати як запис у форматі JSON.",
        "Documentation.Examples": [
          {
            "Description": "Отримує дані з аркушів кінцевої точки SmartSheet API із зазначенням додаткових аргументів.",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Таблиця з інформацією про аркуші, яку повернув інтерфейс SmartSheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Повертає функцію, яка не розділяє значення (аргумент відображається одним списком).",
        "Documentation.LongDescription": "Повертає функцію, яка не розділяє значення (аргумент відображається одним списком).",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту по пробілах.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту по пробілах.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних пробілами. Лапки розглядаються як будь-який інший символ.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Розділяє таблицю на список таблиць залежно від вказаної кількості груп і стовпців.",
        "Documentation.LongDescription": "Розділяє <code>table</code> на список <code>groups</code> таблиць залежно від значення <code>column</code> і функції <code>hash</code>.\r\n    Функція <code>hash</code> застосовується до значення рядка <code>column</code> для отримання значення геша цього рядка. Модуль значення геша <code>groups</code> визначає, у якій з повернених таблиць буде розташовано рядок.\r\n    <ul>\r\n       <li><code>table</code>: Таблиця для розділення.</li>\r\n       <li><code>column</code>: Стовпець для гешування для визначення таблиці, у яку буде повернено рядок.</li>\r\n       <li><code>groups</code>: Кількість таблиць, на які буде розділено вхідну таблицю.</li>\r\n       <li><code>hash</code>: Функція для отримання значення геша.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Розділити таблицю <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> на 2 таблиці по стовпцю [a], використовуючи значення стовпців як геш-функцію.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Повертає частину рядка <code>text</code> між указаними роздільниками <code>startDelimiter</code>, <code>endDelimiter</code>.\r\n    Додатковий числовий параметр <code>startIndex</code> визначає, який екземпляр роздільника <code>startDelimiter</code> мається на увазі.\r\n    Додатковий список <code>startIndex</code> визначає, який екземпляр роздільника <code>startDelimiter</code> мається на увазі, а також указує напрямок індексування (з початку чи з кінця введеного рядка).\r\n    Список <code>endIndex</code> діє аналогічно, проте індексування відбувається відносно вказаного параметра <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Дає змогу отримати частину рядка \"111 (222) 333 (444)\" між (першою) відкритою дужкою та (першою) після неї закритою дужкою.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111 (222) 333 (444)\" між другою відкритою дужкою та першою після неї закритою дужкою.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111 (222) 333 (444)\" між другою з кінця відкритою дужкою та другою після неї закритою дужкою.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Вставляє одне текстове значення в інше у вказану позицію.",
        "Documentation.LongDescription": "Повертає результат вставлення текстового значення <code>newText</code> у текстове значення <code>text</code> у позицію <code>offset</code>. Положення починаються з числа 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Вставити \"C\" між \"B\" і \"D\" у \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Повертає новий, випадковий глобальний унікальний ідентифікатор (GUID).",
        "Documentation.LongDescription": "Повертає новий, випадковий глобальний унікальний ідентифікатор (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Замінює всі повторення вказаного підрядка в тексті.",
        "Documentation.LongDescription": "Повертає результат заміни всіх повторів текстового значення <code>old</code> у текстовому значенні <code>text</code> на текстове значення <code>new</code>. Ця функція чутлива до регістру.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Замінити кожне повторення \"the\" у реченні на \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Вилучає діапазон символів і вставляє нове значення в певне положення.",
        "Documentation.LongDescription": "Повертає результат вилучення кількості символів, <code>count</code>, з текстового значення <code>text</code>, що починається з положення <code>offset</code>, і вставлення текстового значення <code>newText</code> у те ж положення в <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Замінити один символ у положенні 2 текстового значення \"ABGF\" на нове текстове значення \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Додає ключ до заданого типу таблиці.",
        "Documentation.LongDescription": "Додає ключ до заданого типу таблиці.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Повертає список ідентичностей, що відповідатимуть умові.",
        "Documentation.LongDescription": "<p>Коли вказано <code>identityProvider</code>, <code>condition</code> перетворюється на список ідентичностей, для яких <code>condition</code> повертатиме значення <code>true</code> в усіх контекстах авторизації, де <code>identityProvider</code> виконує роль постачальника ідентичностей. Якщо <code>condition</code> неможливо перетворити на список ідентичностей, повертається помилка (наприклад, якщо <code>condition</code> виносить рішення на основі атрибутів, відмінних від ідентичностей користувача або групи).</p>\r\n    <p>Зверніть увагу, що список ідентичностей представляє ідентичності в тому вигляді, який їм надає <code>condition</code>, і ніяка нормалізація (як-от розширення групи) для них не виконується.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Стискає двійкове значення за допомогою заданого типу стискання.",
        "Documentation.LongDescription": "Стискає двійкове значення за допомогою заданого типу стискання. Результатом цього виклику є стиснута копія введених даних. Нижче вказано типи стискання.\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Стиснути двійкове значення.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Розпаковує двійкове значення за допомогою заданого типу стискання.",
        "Documentation.LongDescription": "Розпаковує двійкове значення за допомогою заданого типу стискання.  Результатом цього виклику є розпакована копія вводу. Типи стискання:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Розпакувати двійкове значення.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Повертає підмножину бінарного значення, починаючи зі зсуву.",
        "Documentation.LongDescription": "Повертає підмножину бінарного значення, починаючи з <code>binary</code> зсуву. Додатковий параметр <code>offset</code> дає змогу встановити максимальну довжину підмножини.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Повертає підмножину бінарного значення, починаючи з 6 зсуву.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Повертає підмножину з довжиною 2, починаючи з 6 зсуву бінарного значення.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Розділяє вказане двійкове значення на список двійкових даних за вказаним розміром сторінки.",
        "Documentation.LongDescription": "Розділяє <code>binary</code> на список двійкових даних, перший елемент якого містить першу <code>pageSize</code>-байтову частину\r\n    вихідного двійкового значення, наступний – наступну <code>pageSize</code>-байтову частину вихідного двійкового значення тощо.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Створює або розширює двійковий файл із користувацькими обробниками для операцій запитів і дій.",
        "Documentation.LongDescription": "<p>Повертає подання таблиці \"<code>binary</code>\", де функції, визначені параметром <code>handlers</code>, використовуються замість поведінки за замовчуванням, коли до цього подання застосовують певну операцію.</p>\r\n<p>Якщо <code>binary</code> указано, усі функції обробника є необов’язковими. Якщо <code>binary</code> не вказано, функцію обробника <code>GetStream</code> необхідно вказати. Якщо для операції не вказано функцію обробника, до таблиці \"<code>binary</code>\" натомість застосовується поведінка за замовчуванням для цієї операції (окрім випадків застосування функції <code>GetExpression</code>).</p>\r\n<p>Функції обробника мають повертати значення, семантично еквівалентне результату виконання операції для таблиці \"<code>binary</code>\" (або отримане подання, якщо використовується <code>GetExpression</code>).</p>\r\n<p>Якщо функція обробника повертає помилку, до подання застосовується поведінка за замовчуванням для цієї операції.</p>\r\n<p>Можна використати <code>Binary.View</code>, щоб запровадити зворотне перетворення до джерела даних – перетворити запити M на операції для конкретних джерел (наприклад, завантажити розділ файлу).</p>\r\n<p>Перегляньте опубліковану документацію щодо настроюваного з’єднувача Power Query, щоб дізнатися більше про <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Створіть просте подання, яке не потребує доступу до даних для визначення довжини.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Повертає двійковий формат із порядком байтів, указаними за допомогою функції.",
        "Documentation.LongDescription": "Повертає двійковий формат із порядком байтів, указаними за допомогою <code>binaryFormat</code>.  Порядок байтів за замовчуванням: <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Повертає двійковий формат, який вибирає наступний двійковий формат на основі значення, яке вже було прочитано.",
        "Documentation.LongDescription": "Повертає двійковий формат, який вибирає наступний двійковий формат на основі значення, яке вже було прочитано.  Значення двійкового формату, яке повертається цією функцією, працює за такими етапами.<ul>\r\n<li>Читається значення за допомогою двійкового формату, указаного параметром <code>binaryFormat</code>.</li>\r\n<li>Значення передається функції вибору, указаній параметром <code>chooseFunction</code>.</li>\r\n<li>Функція вибору перевіряє значення та повертає другий двійковий формат.</li>\r\n<li>Другий двійковий формат використовується для читання другого значення.</li>\r\n<li>Якщо вказано функцію групування, їй передаються перше та друге значення, після чого вона повертає значення результату.</li>\r\n<li>Якщо функцію групування не вказано, повертається друге значення.</li>\r\n<li>Повертається друге значення.</li>\r\n</ul>Необов'язковий параметр <code>type</code> вказує тип двійкового формату, який поверне функція вибору.  Можна вказати <code>type any</code>, <code>type list</code> або <code>type binary</code>.  Якщо параметр <code>type</code> не вказано, використовується <code>type any</code>.   Якщо використовується <code>type list</code> або <code>type binary</code>, система може мати змогу повернути потокове передавання <code>binary</code> або значення <code>list</code> замість буферизованого, що може зменшити потребу в обсязі пам'яті, необхідної для читання формату.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Прочитати список байтів, де кількість елементів визначається першим байтом.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Прочитати список байтів, де кількість елементів визначається першим байтом, і зберегти перший прочитаний байт.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Прочитати список байтів, де кількість елементів визначається першим байтом, за допомогою списку потокового передавання.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Повертає двійковий формат, який читає групу елементів.",
        "Documentation.LongDescription": "Використовуються вказані нижче параметри.\r\n<ul>\r\n<li>Параметр <code>binaryFormat</code> указує двійковий формат значення ключа.</li>\r\n<li>Параметр <code>group</code> надає інформацію про групу відомих елементів.</li>\r\n<li>За допомогою додаткового параметра <code>extra</code> можна вказати функцію, яка повертатиме значення двійкового формату для неочікуваного значення після ключа. Якщо параметр <code>extra</code> не вказано, неочікувані значення ключів викликатимуть помилку.</li>\r\n</ul>\r\nПараметр <code>group</code> указує список визначень елементів. Кожне визначення елемента – це список із 3–5 значень, які описано нижче.\r\n<ul>\r\n<li>Значення ключа. Значення ключа, яке відповідає елементу. Воно має бути унікальне в межах набору елементів.</li>\r\n<li>Формат елемента. Двійковий формат, який відповідає значенню елемента. Завдяки цьому параметру кожен елемент може мати власний формат. </li>\r\n<li>Екземпляри елемента. Значення <code>BinaryOccurrence.Type</code> указує, скільки екземплярів елемента очікується в групі. Якщо бракує обов’язкових елементів, викликається помилка. Повтори обов’язкових або необов’язкових елементів обробляються як неочікувані значення ключів.</li>\r\n<li>Стандартне значення елемента (додатково). Якщо в списку визначень елементів є стандартне значення елемента, яке відрізняється від Null, воно використовуватиметься замість стандартного значення. Стандартне значення для повторюваних або необов’язкових елементів становить Null, а для повторюваних значень – пустий список { }.</li>\r\n<li>Перетворення значення елемента (додатково). Якщо в списку визначень елементів є функція перетворення значення елемента, яка відрізняється від Null-значення, вона перетворюватиме значення елемента перед його поверненням. Функція перетворення викликається тільки тоді, коли елемент зустрічається у вводі (ніколи не викликається зі стандартним значенням). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "У наведеному нижче прикладі припускається, що значення ключа є однобайтним із 4 очікуваними елементуми у групі, у всіх із яких після ключа є байт даних.  Елементи з'являються у вхідних параметрах у наведений нижче спосіб.\r\n<ul>\r\n<li>Ключ 1 – обов'язковий, і він не з'являється зі значенням 11.</li>\r\n<li>Ключ 2 повторюється й з'являться двічі зі значенням 22 та призводить до значення { 22, 22 }.</li>\r\n<li>Ключ 3 – необов'язковий, не з'являться та призводить до Null-значення.</li>\r\n<li>Ключ 4 повторюється, але не з'являться, і призводить до значення { }.</li>\r\n<li>Ключ 5 не є частиною групи, але з'являється один раз зі значенням 55.  Викликається додаткова функція зі значенням ключа 5, яка повертає формат, що відповідає такому значенню (BinaryFormat.Byte).  Значення 55 читається та скасовується.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "У наведеному далі прикладі показано перетворення значення елементу та значення елементу за замовчуванням.   Повторюваний елемент із ключем 1 сумує список значень, прочитаних за допомогою List.Sum.  Необов'язковий елемент із ключем 2 має значення за замовчуванням 123 замість Null.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Повертає двійковий формат, що обмежує кількість даних, які можна прочитати.",
        "Documentation.LongDescription": "Повертає двійковий формат, що обмежує кількість даних, які можна прочитати. <code>BinaryFormat.List</code> і <code>BinaryFormat.Binary</code> можна використовувати для читання даних до кінця. <code>BinaryFormat.Length</code> можна використовувати для обмеження кількості байтів, які буде прочитано. Параметр <code>binaryFormat</code> указує двійковий формат для обмеження. Параметр <code>length</code> указує кількість байтів для читання. Параметр <code>length</code> може мати числове значення або значення у двійковому форматі, яке вказує формат значення довжини, що передує зчитаному значенню.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Обмеження кількості байтів для читання до 2 під час читання списку байтів.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Обмежте кількість зчитаних байтів під час читання списку байтів до байтового значення, що передує списку.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Повертає двійковий формат, який перетворить значення, прочитані іншим двійковим форматом.",
        "Documentation.LongDescription": "Повертає двійковий формат, який перетворить значення, прочитані іншим двійковим форматом.  Параметр <code>binaryFormat</code> указує двійковий формат, який використовуватиметься для читання значення.  Під час виклику функції <code>function</code> передається прочитане значення, і нею повертається перетворене значення.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Читання байту та додавання до нього ще одного байту.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Повертає функцію засобу порівняння, яка порівнює значення за правилами для порядкових значень.",
        "Documentation.LongDescription": "Повертає функцію засобу порівняння, яка використовує порядкові правила для порівняння наданих значень \"<code>x</code>\" і \"<code>y</code>\".<br>\r\n      <br>\r\n      Функція засобу порівняння приймає два аргументи та повертає -1, 0 або 1 залежно від того, чи перше значення менше, дорівнює або більше за друге.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "За допомогою правил для порядкових значень порівняйте, чи значення \"encyclopædia\" та \"encyclopaedia\" еквівалентні. Зверніть увагу, що вони еквівалентні, якщо використовується функція <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Повертає функцію засобу порівняння без урахування регістра, яка порівнює значення за порядковими правилами.",
        "Documentation.LongDescription": "Повертає функцію засобу порівняння без урахування регістра, яка використовує порядкові правила для порівняння наданих значень \"<code>x</code>\" і \"<code>y</code>\".<br>\r\n        <br>\r\n        Функція засобу порівняння приймає два аргументи та повертає -1, 0 або 1 залежно від того, чи перше значення менше, дорівнює або більше за друге\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "За порядковими правилами без урахування регістра порівняти значення \"Abc\" та \"abc\". Зверніть увагу, що за використання функції <code>Comparer.Ordinal</code> значення \"Abc\" менше за \"abc\". ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Повертає властивість атрибута виміру.",
        "Documentation.LongDescription": "Повертає властивість \"<code>propertyName</code>\" атрибута виміру \"<code>attribute</code>\".",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Повертає властивість міри (властивість клітинки).",
        "Documentation.LongDescription": "Повертає властивість <code>propertyName</code> міри <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Джерело запиту SQL Databricks",
        "Documentation.LongDescription": "Визначення джерела даних Databricks для виконання SQL запитів"
      },
      "ReturnType": "Запит SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Джерело запиту SQL Databricks",
        "Documentation.LongDescription": "Визначення джерела даних Databricks для виконання SQL запитів"
      },
      "ReturnType": "Запит SQL Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Додає вказані дні до дати.",
        "Documentation.LongDescription": "Повертає результат <code>date</code>, <code>datetime</code> або <code>datetimezone</code> додавання <code>numberOfDays</code> дн. до значення <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, до якого додаються дні.</li>\r\n      <li><code>numberOfDays</code>: кількість днів для додавання.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Додавання 5 днів до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату 14.05.11.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Додає вказані місяці до дати.",
        "Documentation.LongDescription": "Повертає результат <code>date</code>, <code>datetime</code> або <code>datetimezone</code> додавання <code>numberOfMonths</code> міс. до значення <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, до якого додаються місяці.</li>\r\n        <li><code>numberOfMonths</code>: кількість місяців для додавання.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Додавання 5 місяців до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату 14.05.11.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Додавання 18 місяців до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату й час 14.05.11 08:15:22.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Додає вказані квартали до дати.",
        "Documentation.LongDescription": "Повертає результат <code>date</code>, <code>datetime</code> або <code>datetimezone</code> додавання <code>numberOfQuarters</code> кварт. до значення <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, до якого додаються квартали.</li>\r\n      <li><code>numberOfQuarters</code>: кількість кварталів для додавання.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Додавання 1 кварталу до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату 14.05.11.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Додає вказані тижні до дати.",
        "Documentation.LongDescription": "Повертає результат <code>date</code>, <code>datetime</code> або <code>datetimezone</code> додавання <code>numberOfWeeks</code> тиж. до значення <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, до якого додаються тижні.</li>\r\n      <li><code>numberOfWeeks</code>: кількість тижнів для додавання.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Додавання 2 тижнів до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату 14.05.11.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Додає вказані роки до дати.",
        "Documentation.LongDescription": "Повертає результат <code>date</code>, <code>datetime</code> або <code>datetimezone</code> додавання <code>numberOfYears</code> до значення <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n       <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, до якого додаються роки.</li>\r\n        <li><code>numberOfYears</code>: кількість років для додавання.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Додавання 4 років до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату 14.05.11.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Додавання 10 років до значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату й час 14.05.11 08:15:22.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у днях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у днях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>days</code>: кількість днів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи день після поточного часу в системі відноситься до наступних двох днів.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у місяцях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у місяцях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>months</code>: кількість місяців.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи місяць після поточного часу в системі відноситься до наступних двох місяців.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у кварталах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у кварталах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>quarters</code>: кількість кварталів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи квартал після поточного часу в системі відноситься до наступних двох кварталів.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у тижнях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у тижнях наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>weeks</code>: кількість тижнів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи тиждень після поточного часу в системі відноситься до наступних двох тижнів.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у роках наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у роках наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>years</code>: кількість років.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи рік після поточного часу в системі відноситься до наступних двох років.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у днях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у днях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>days</code>: кількість днів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи день перед поточним часом у системі відноситься до попередніх двох днів.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у місяцях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у місяцях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>months</code>: кількість місяців.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи місяць перед поточним часом у системі відноситься до попередніх двох місяців.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у кварталах попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у кварталах попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>quarters</code>: кількість кварталів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи квартал перед поточним часом у системі відноситься до попередніх двох кварталів.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у тижнях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у тижнях попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>weeks</code>: кількість тижнів.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи тиждень перед поточним часом у системі відноситься до попередніх двох тижнів.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Указує, чи ця дата припадає на зазначений у роках попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у роках попередній період відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>years</code>: кількість років.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи рік перед поточним часом у системі відноситься до попередніх двох років.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Додає відомості про часовий пояс до значення дати й часу.",
        "Documentation.LongDescription": "Додає відомості про часовий пояс до значення <code>dateTime</code>. Відомості про часовий пояс включають <code>timezoneHours</code> і, за потреби, <code>timezoneMinutes</code> із зазначенням бажаного зсуву відносно UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Установіть часовий пояс на UTC+7:30 (на 7 годин 30 хвилин пізніше за UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у годинах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у годинах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>hours</code>: кількість годин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи година після поточного системного часу припадає на наступні дві години.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у хвилинах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у хвилинах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>minutes</code>: кількість хвилин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи хвилина після поточного системного часу припадає на наступні дві хвилини.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у секундах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у секундах наступний інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>seconds</code>: кількість секунд.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи секунда після поточного системного часу припадає на наступні дві секунди.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у годинах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у годинах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>hours</code>: кількість годин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи година перед поточним системним часом припадає на попередні дві години.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у хвилинах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у хвилинах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>minutes</code>: кількість хвилин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи хвилина перед поточним системним часом припадає на попередні дві хвилини.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на зазначений у секундах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на зазначений у секундах попередній інтервал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      <li><code>seconds</code>: кількість секунд.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи секунда до поточного системного часу припадає на попередні дві секунди.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Змінює часовий пояс значення.",
        "Documentation.LongDescription": "Змінює інформацію про часовий пояс у значенні дати й часу з часовим поясом <code>dateTimeZone</code> на нову інформацію про часовий пояс, надану <code>timezoneHours</code> та, необов'язково, <code>timezoneMinutes</code>.\r\n    Якщо <code>dateTimeZone</code> не має компонента часового поясу, повертається виняткова ситуація.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Змінення інформації про часовий пояс для #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) на 8 годин.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Змінення інформації про часовий пояс для #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) на 30 хвилин менше.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Здійснює доступ до значень за іменем у вбудованому комбінованому веб-застосунку.",
        "Documentation.LongDescription": "Здійснює доступ до значень за іменем у вбудованому комбінованому веб-застосунку.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Створює функцію з певним підписом параметра на основі функції, яка приймає один аргумент-список.",
        "Documentation.LongDescription": "На основі унарної функції \"<code>function</code>\" створює нову функцію типу \"<code>functionType</code>\", що конструює список аргументів і передає його до функції \"<code>function</code>\".",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Перетворює List.Sum на функцію з двома аргументами, що додаються.",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Перетворює функцію, яка приймає список, на функцію з двома аргументами.",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Викликає задану функцію",
        "Documentation.LongDescription": "Викликає задану функцію за допомогою вказаного списку аргументів і повертає результат.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Викликає Record.FieldNames з одним аргументом [A=1,B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Виклик указаної функції після визначеної тривалості.",
        "Documentation.LongDescription": "Повернення результату виклику <code>function</code> після визначеної тривалості (<code>delay</code>).",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Створює скалярну функцію на основі векторної та групує кілька операцій викликів.",
        "Documentation.LongDescription": "<p>Повертає скалярну функцію типу <code>scalarFunctionType</code>, яка викликає функцію <code>vectorFunction</code> для одного рядка аргументів, і її єдиний результат. Якщо ж скалярна функція повторно застосовується в кожному рядку таблиці вхідних даних (як у випадку Table.AddColumn), функція <code>vectorFunction</code> застосовується натомість одноразово до всіх вхідних даних.</p>\r\n<p>Функція <code>vectorFunction</code> передається в таблицю, стовпці якої за ім’ям і розташуванням відповідають параметрам функції <code>scalarFunctionType</code>. Кожен рядок цієї таблиці містить аргументи для одного виклику скалярної функції, а стовпці відповідають параметрам функції <code>scalarFunctionType</code>.</p>\r\n<p>Функція <code>vectorFunction</code> має повернути список такої ж довжини, що й таблиця вхідних даних, чий елемент у кожному розташуванні має збігатися з результатами обчислення скалярної функції в рядку вхідних даних в аналогічному розташуванні.</p>\r\n<p>Очікується, що таблиця вхідних даних передаватиметься потоком, тому функція <code>vectorFunction</code> має передавати результати в темпі отримання вхідних даних, працюючи при цьому з одним блоком вхідних даних за раз. Зокрема, функція <code>vectorFunction</code> має нумерувати таблицю вхідних даних не більше одного разу.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Створює запис, який відтворює географічну точку з частин.",
        "Documentation.LongDescription": "Створює запис, який відтворює географічну точку з її складових частин, як-от довгота, широта, а також висота (Z) і масштаб (M). Можна вказати додатковий ідентифікатор просторової системи (SRID), якщо він відрізняється від стандартного значення (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Створює запис, який відтворює геометричну точку з частин.",
        "Documentation.LongDescription": "Створює запис, який представляє геометричну точку зі складових частин, як-от Х-координата, Y-координата, а також Z-координата та масштаб (M). Можна вказати додатковий ідентифікатор просторової системи (SRID), якщо значення відрізняється від стандартного значення (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Створює ідентичність.",
        "Documentation.LongDescription": "Створює ідентичність.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Визначає, чи належить ідентичність до колекції ідентичностей.",
        "Documentation.LongDescription": "Визначає, чи належить ідентичність до колекції ідентичностей.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Повертає список, що складається з усіх непарних елементів зсуву у списку.",
        "Documentation.LongDescription": "Повертає список, що складається з усіх непарних елементів зсуву у списку. Приймає або пропускає значення зі списку <code>list</code> залежно від параметрів.\r\n    <ul>\r\n    <li><code>count</code>: Вказує кількість значень, які щоразу пропускаються.</li>\r\n    <li><code>repeatInterval</code>: Додатковий інтервал повтору, щоб указати, скільки значень додано між пропущеними значеннями.</li>\r\n    <li><code>offset</code>: Додатковий параметр зсуву, щоб почати пропускати значення на початковому зсуві.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Створити список {1..10}, який пропускає перше число.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Створює список на основі множини {1..10}, який пропускає всі інші числа.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Створити список {1..10}, який починається з 1 і пропускає всі інші числа.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Створює список на основі множини {1..10}, який починається з 1, пропускає одне значення, зберігає два значення й т. д.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Вказує, чи список містить значення.",
        "Documentation.LongDescription": "Визначає, чи список <code>list</code> містить значення <code>value</code>.\r\n    Якщо значення знайдено в списку, повертає значення \"Істина\", в іншому разі – значення \"Хибність\". Можна вказати додаткове значення умов рівняння (<code>equationCriteria</code>), щоб керувати перевіркою на рівність. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Вказує, чи список містить усі значення в іншому списку.",
        "Documentation.LongDescription": "Вказує, чи список <code>list</code> містить усі значення в іншому списку, <code>values</code>.\r\n    Повертає значення true, якщо значення знайдено у списку, у протилежному випадку повертає значення false. Можна вказати додаткове значення критеріїв рівняння, <code>equationCriteria</code>, для керування перевіркою на рівність. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 3 і 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 5 і 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Вказує, чи список містить будь-яке значення з іншого списку.",
        "Documentation.LongDescription": "Вказує, чи список <code>list</code> містить будь-яке значення з іншого списку, <code>values</code>.\r\n        Повертає значення true, якщо значення знайдено у списку, у протилежному випадку повертає значення false. Можна вказати додаткове значення критеріїв рівняння, <code>equationCriteria</code>, для керування перевіркою на рівність. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 3 або 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи список {1, 2, 3, 4, 5} містить 6 або 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Повертає коваріацію між двома списками чисел.",
        "Documentation.LongDescription": "Повертає коваріацію між двома списками, <code>numberList1</code> і <code>numberList2</code>. <code>numberList1</code> і <code>numberList2</code> повинні містити однакову кількість значень <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Обчислити коваріацію між двома списками.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Повертає різницю двох заданих списків.",
        "Documentation.LongDescription": "Повертає елементи списку <code>list1</code>, яких немає в списку <code>list2</code>. Повтори значень підтримуються.\r\n    Можна вказати додаткове значення умов рівняння (<code>equationCriteria</code>), щоб керувати перевіркою на рівність. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти елементи у списку {1, 2, 3, 4, 5}, які не з'являються в {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Знайти елементи у списку {1, 2}, які не з'являються в {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Повертає список значень (у тому числі поля запису), який містить указаний текст.",
        "Documentation.LongDescription": "Повертає список значень зі списку <code>list</code>, який містив значення <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти текстові значення у списку {\"a\", \"b\", \"ab\"}, які відповідають \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Повертає перший набір елементів у списку, вказавши кількість елементів, які необхідно повернути, або описову умову.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Якщо вказано кількість, повертається елементів не більше, ніж указано. </li>\r\n  <li>Якщо вказано умову, повертаються всі елементи, які спочатку задовольняють цій умові. Як тільки один елемент не задовольняє умову, наступні елементи не розглядаються. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти початкові значення у списку {3, 4, 5, -1, 7, 8, 2}, які більші 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Повертає значення true, якщо функцію умови задовольняють усі значення у списку.",
        "Documentation.LongDescription": "Повертає значення <code>true</code>, якщо функцію умови, <code>condition</code>, задовольняють усі значення у списку <code>list</code>, у протилежному випадку повертає значення <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи всі значення у списку {11, 12, 13} більші 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи всі значення у списку {1, 2, 3} більші 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Повертає значення true, якщо функцію умови задовольняє будь-яке значення.",
        "Documentation.LongDescription": "Повертає значення <code>true</code>, якщо функцію умови, <code>condition</code>, задовольняє будь-яке значення у списку <code>list</code>, у протилежному випадку повертає значення <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи будь-яке значення у списку {9, 10, 11} більше 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи будь-яке значення у списку {1, 2, 3} більше 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Повертає максимальні значення в списку. Необхідно вказати кількість значень, які необхідно повернути, або умову фільтрування.",
        "Documentation.LongDescription": "Повертає максимальні значення в списку за параметром <code>list</code>.\r\n    Після сортування рядків можна вказувати додаткові параметри для подальшого фільтрування результату. Додатковий параметр <code>countOrCondition</code> дає змогу задати кількість значень, що слід повернути, або умову фільтрування. За допомогою додаткового параметра <code>comparisonCriteria</code> визначається, як порівнювати значення в списку.\r\n <ul>\r\n        <li><code>list</code> – список значень.</li>\r\n        <li><code>countOrCondition</code> – якщо задано число, повертає список з упорядкованими за зростанням елементами, кількість яких визначається за параметром <code>countOrCondition</code>; якщо вказано умову, повертає список елементів, які початково відповідають цій умові. Якщо елемент не відповідає умові, наступні елементи не розглядаються.</li>\r\n<li><code>comparisonCriteria</code> <i>[необов’язковий]</i> – можна задати додаткове значення <code>comparisonCriteria</code>, щоб визначити, як порівнювати елементи в списку. Якщо цей параметр має Null-значення, використовується стандартний засіб порівняння.\r\n</ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Повертає мінімальні значення в списку. Можна вказати кількість значень, які необхідно повернути, або умову фільтрування.",
        "Documentation.LongDescription": "Повертає мінімальні значення списку за параметром <code>list</code>.\r\n    За допомогою параметра <code>countOrCondition</code> визначається кількість значень, що слід повернути, або умова фільтрування. Додатковий параметр <code>comparisonCriteria</code> дає змогу вказати, як порівнювати значення в списку.\r\n <ul>\r\n        <li><code>list</code> – список значень.</li>\r\n        <li><code>countOrCondition</code> – якщо задано число, повертає список з упорядкованими за зростанням елементами, кількість яких визначається за параметром <code>countOrCondition</code>; якщо вказано умову, повертає список елементів, які початково відповідають цій умові. Якщо елемент не відповідає умові, наступні елементи не розглядаються. Якщо цей параметр має Null-значення, повертається одне найменше значення в списку.</li>\r\n<li><code>comparisonCriteria</code> <i>[необов’язковий]</i> – можна задати додаткове значення <code>comparisonCriteria</code>, щоб визначити, як порівнювати елементи в списку. Якщо цей параметр має Null-значення, використовується стандартний засіб порівняння.\r\n</ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти 5 найменших значень у списку <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Повертає список чисел із заданими початковим значенням, кількістю значень та додатковим значенням приросту.",
        "Documentation.LongDescription": "Повертає список чисел із заданими початковим значенням, кількістю значень та додатковим значенням приросту. Значення приросту за замовчуванням – 1.\r\n<ul>\r\n   <li><code>start</code>: Початкове значення у списку.</li>\r\n   <li><code>count</code>: Кількість значень, які необхідно створити.</li>\r\n   <li><code>increment</code>: <i>[Додатково]</i> Значення приросту. Якщо опущено, значення збільшуються на 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список із 10 послідовних чисел, починаючи з 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Створити список із 10 послідовних чисел, починаючи з 1, із приростом 2 для кожного наступного числа.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Повертає один або кілька зразків процентилів, що відповідають заданим імовірностям.",
        "Documentation.LongDescription": "Повертає один або кілька зразків процентилів для списку <code>list</code>. Якщо значення <code>percentiles</code> – це число від 0,0 до 1,0, воно обчислюватиметься як процентиль і в результаті ви отримаєте \r\n    одне значення, яке відповідає ймовірності. Якщо значення <code>percentiles</code> – це список чисел від 0,0 до 1,0, у результаті ви отримаєте список процентилів,\r\n    що відповідають імовірності для вхідних даних. Досвідчені користувачі можуть указувати параметр PercentileMode у виразі <code>options</code>, щоб вибрати точніший метод інтерполяції, але не його не слід використовувати всім.\r\n    Попередньо визначені символи для функцій <code>PercentileMode.ExcelInc</code> і <code>PercentileMode.ExcelExc</code> відповідають методам інтерполяції, які використовують функції Excel.\r\n    <code>PERCENTILE.INC</code> і <code>PERCENTILE.EXC</code> за замовчуванням діють як <code>PercentileMode.ExcelInc</code>. Символи для функцій \r\n    <code>PercentileMode.SqlCont</code> і <code>PercentileMode.SqlDisc</code> відповідають <code>PERCENTILE_CONT</code> і\r\n    <code>PERCENTILE_DISC</code> в SQL Server.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Пошук першого квартиля для списку <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Пошук квартилів для списку <code> {5, 3, 1, 7, 9} </code> методом інтерполяції, що відповідає <code>PERCENTILE.EXC</code> в Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Повертає зсуви значень у списку.",
        "Documentation.LongDescription": "Повертає зсув для значення <code>value</code>, у якому воно зустрічається в списку <code>list</code>. Повертає -1, якщо значення не зустрічається.\r\n    Можна вказати додатковий параметр екземпляра <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: максимальна кількість екземплярів, про які слід повідомити.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Знайти позицію у списку {1, 2, 3}, в якій зустрічається значення 3.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Повертає перший зсув значення у списку.",
        "Documentation.LongDescription": "Повертає зсув для значення <code>values</code>, у якому воно вперше зустрічається в списку <code>list</code>. Повертає -1, якщо значення не знайдено.\r\n    Можна вказати додатковий параметр екземпляра <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: максимальна кількість екземплярів, які можна повернути.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Знайти першу позицію у списку {1, 2, 3}, в якій зустрічається значення 2 або 3.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Повертає підмножину списку, починаючи зі зсуву.",
        "Documentation.LongDescription": "Повертає підмножину списку, починаючи зі зсуву <code>list</code>. Додатковий параметр, <code>offset</code>, задає максимальну кількість елементів у підмножині.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти підмножину, починаючи зі зсуву 6, списку чисел від 1 до 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Знайти підмножину довжиною 2, починаючи зі зсуву 6, списку чисел від 1 до 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Видаляє елементи зі списку1, які присутні у списку.",
        "Documentation.LongDescription": "Видаляє всі входження заданих значень у списку <code>list2</code> зі списку <code>list1</code>. Якщо значення списку <code>list2</code> не існують у списку <code>list1</code>, повертається вихідний список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Видалити елементи списку {2, 4, 6} зі списку {1, 2, 3, 4, 2, 5, 5}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Видаляє всі входження вхідних значень.",
        "Documentation.LongDescription": "Видаляє всі входження заданих значень у списку <code>list2</code> зі списку <code>list1</code>. Якщо значення списку <code>list2</code> не існують у списку <code>list1</code>, повертається вихідний список.\r\n    Можна вказати додаткове значення критеріїв рівняння, <code>equationCriteria</code>, для керування перевіркою на рівність. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список зі списку {1, 2, 3, 4, 5, 5} без {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Видаляє задану кількість значень, починаючи з указаної позиції.",
        "Documentation.LongDescription": "Видаляє <code>count</code> значення у списку <code>list</code>, починаючи з указаної позиції, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Видалити 3 значення у списку {1, 2, 3, 4, -6, -2, -1, 5}, починаючи з індексу 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Повертає список, який містить задану кількість повторень вихідного списку.",
        "Documentation.LongDescription": "Повертає список, який містить <code>count</code> повторень вихідного списку, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список, який містить 3 повторення {1, 2}.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Застосовує кожну заміну { old, new }.",
        "Documentation.LongDescription": "Вносить задані заміни у список <code>list</code>. Операція заміни <code>replacements</code> складається зі списку двох значень, старого значення та нового значення, які надаються у списку.\r\n    Можна вказати додаткове значення критеріїв рівняння, <code>equationCriteria</code>, для керування перевіркою на рівність.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список із {1, 2, 3, 4, 5} із заміною значення 5 на -5 і значення 1 на -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Повертає список значень, які задовольняють умову.",
        "Documentation.LongDescription": "Повертає список значень зі списку <code>list</code>, які відповідають умові вибору <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти значення у списку {1, -3, 4, 9, -2}, які більші 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Розділяє вказаний список на список списків за вказаним розміром сторінки.",
        "Documentation.LongDescription": "Розділяє список \"<code>list</code>\" на список списків, перший із яких містить першу <code>pageSize</code>-елементну частину\r\n    вихідного списку, наступний – наступну <code>pageSize</code>-елементну частину вихідного списку тощо.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Повертає новий список значень, обчислених із цього списку.",
        "Documentation.LongDescription": "Повертає новий список значень, застосовуючи функцію перетворення <code>transform</code> до списку, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Додати 1 до кожного значення у списку {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Повертає арктангенс частки двох чисел.",
        "Documentation.LongDescription": "Повертає арктангенс частки двох чисел, <code>y</code> і <code>x</code>. Частка буде побудована як <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Повертає результат виконання побітової операції \"ТА\" між двома вхідними даними.",
        "Documentation.LongDescription": "Повертає результат виконання побітової операції \"ТА\" між <code>number1</code> і <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Повертає результат виконання побітового \"АБО\" між двома вхідними даними.",
        "Documentation.LongDescription": "Повертає результат виконання побітового \"АБО\" між <code>number1</code> і <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Зсовує набір бітів ліворуч.",
        "Documentation.LongDescription": "Повертає результат виконання побітового зсуву <code>number1</code> ліворуч на вказану кількість бітів <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Зсовує набір бітів праворуч.",
        "Documentation.LongDescription": "Повертає результат виконання побітового зсуву <code>number1</code> праворуч на вказану кількість бітів <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Повертає результат виконання побітового \"XOR\" (виключне АБО) між двома вхідними даними.",
        "Documentation.LongDescription": "Повертає результат виконання побітового \"XOR\" (виключне АБО) між <code>number1</code> і <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Повертає кількість унікальних комбінацій.",
        "Documentation.LongDescription": "Повертає кількість унікальних комбінацій зі списку елементів, <code>setSize</code> із заданим розміром комбінації, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: Кількість елементів у списку.</li>\r\n    <li><code>combinationSize</code>: Кількість елементів у кожній комбінації.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість комбінацій із 5 елементів, якщо кожна комбінація становить групу з 3 елементів.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Ділить два числа та повертає цілу частку результату.",
        "Documentation.LongDescription": "Повертає цілу частку результату ділення числа <code>number1</code> на інше число <code>number2</code>.\r\n    Якщо <code>number1</code> або <code>number2</code> має Null-значення, функція <code>Number.IntegerDivide</code> повертає Null-значення.\r\n      <ul>\r\n        <li><code>number1</code>: ділене.</li>\r\n        <li><code>number2</code>: дільник.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Поділити 6 на 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Поділити 8,3 на 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Функція цілочисельного ділення ділить два числа та повертає залишок.",
        "Documentation.LongDescription": "Повертає залишок від цілочисельного ділення <code>number</code> на <code>divisor</code>.\r\n    Якщо <code>number</code> або <code>divisor</code> має Null-значення, функція <code>Number.Mod</code> повертає Null-значення.\r\n      <ul>\r\n        <li><code>number</code>: ділене.</li>\r\n        <li><code>divisor</code>: дільник.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти залишок від ділення 5 на 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Повертає кількість перестановок.",
        "Documentation.LongDescription": "Повертає кількість перестановок, які можна отримати зі списку елементів, <code>setSize</code>, зі вказаним розміром перестановки, <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість перестановок із 5 елементів у групах по 3 елементи.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Підносить число до заданого степеню.",
        "Documentation.LongDescription": "Повертає результат піднесення <code>number</code> до степеня <code>power</code>.\r\n    Якщо <code>number</code> або <code>power</code> має Null-значення, функція <code>Number.Power</code> повертає Null-значення.\r\n      <ul>\r\n        <li><code>number</code>: основа.</li>\r\n        <li><code>power</code>: експонента.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти значення 5 піднесено в степені до 3 (5 в кубі).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Повертає випадкове число між двома числами.",
        "Documentation.LongDescription": "Повертає випадкове число між <code>bottom</code> та <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Отримати випадкове число між 1 і 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Повертає значення вказаного поля в записі.",
        "Documentation.LongDescription": "Повертає значення вказаного поля <code>field</code> у записі <code>record</code>. Якщо поле не знайдено, повертається виняткова ситуація.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти в записі значення поля \"CustomerID\".",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Повертає значення вказаного поля в записі або значення за замовчуванням, якщо поле не знайдено.",
        "Documentation.LongDescription": "Повертає значення вказаного поля <code>field</code> у записі <code>record</code>. Якщо поле не знайдено, повертається додаткове значення <code>defaultValue</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти в записі значення поля \"Phone\" або повернути Null-значення, якщо його не існує.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Знайти в записі значення поля \"Phone\" або повернути значення за замовчуванням, якщо його не існує.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Повертає запис, враховуючи список значень полів і набір полів.",
        "Documentation.LongDescription": "Повертає запис, враховуючи список значень полів <code>list</code> і набір полів.  <code>fields</code> може бути вказано або списком текстових значень, або типом запису.  Якщо поля не унікальні, повертається помилка.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Побудувати запис зі списку значень полів і списку імен полів.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Побудувати запис зі списку значень полів і типу запису.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Визначає, чи запис містить указані поля.",
        "Documentation.LongDescription": "Визначає, чи запис <code>record</code> містить поля, вказані в <code>fields</code>, повертаючи логічне значення (true або false).\r\n    Можна вказати кілька значень полів за допомогою списку.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи запис містить поле \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Перевірити, чи запис містить поля \"CustomerID\" та \"Адреса\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Видаляє вказані поля із вхідного запису.",
        "Documentation.LongDescription": "Повертає запис, який видаляє усі поля, вказані у списку <code>fields</code>, із вхідного запису <code>record</code>. Якщо вказане поле не існує, повертається виняткова ситуація.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Видалити поле \"Price\" із запису.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Видалити поля \"Price\" та \"Item\" із запису.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Застосовує перейменування зі списку у вигляді { old, new }.",
        "Documentation.LongDescription": "Повертає запис після перейменування полів у вхідному <code>record</code> на нові імена полів, вказані у списку <code>renames</code>. Для кількох перейменувань можна використовувати вкладений список ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Перейменувати поле \"UnitPrice\" на \"Price\" із запису.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Перейменувати поля \"UnitPrice\" на \"Price\" та \"OrderNum\" на \"OrderID\" із запису.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Змінює порядок указаних полів на новий.",
        "Documentation.LongDescription": "Повертає запис після зміни порядку полів у <code>record</code> на новий порядок полів, вказаний у списку <code>fieldOrder</code>. Значення полів зберігаються, і поля, не зазначені у списку <code>fieldOrder</code>, залишаються на своїй вихідній позиції.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Змінити порядок певних полів у записі.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Повертає запис, який містить тільки вказані поля.",
        "Documentation.LongDescription": "Повертає запис, який включає тільки поля, вказані у списку <code>fields</code>, із вхідного запису <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Вибрати поля \"Item\" і \"Price\" у записі.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Повертає запис після застосування вказаних перетворень.",
        "Documentation.LongDescription": "Повертає запис після застосування перетворень, указаних у списку <code>transformOperations</code>, до <code>record</code>.\r\n    Перетворювати можна одне поле або кілька полів водночас.\r\n      <div>У разі перетворення одного поля очікується, що <code>transformOperations</code> буде списком із двома елементами. Перший елемент <code>transformOperations</code> – це ім’я поля, а другий елемент <code>transformOperations</code> визначає функцію, яку потрібно використати для перетворення. Приклад: <code>{\"Quantity\", Number.FromText}</code>.</div>\r\n      <div>У разі перетворення кількох полів очікується, що <code>transformOperations</code> буде списком списків, де кожен внутрішній список складається з двох елементів: імені поля та операції перетворення. Приклад: <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code>.</div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Перетворити поле \"Ціна\" на число.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Перетворити поля \"Ідентифікатор_замовлення\" та \"Ціна\" на числа.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту відповідно до переходу від одного до іншого різновиду символів. Параметри {0}, {1} можна вказати як список символів або функцію, яка приймає символ і повертає значення true чи false.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту відповідно до переходу від одного до іншого різновиду символів. Параметри <code>before</code>, <code>after</code> можна вказати як список символів або функцію, яка приймає символ і повертає значення true чи false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних щоразу, коли після букви верхнього або нижнього регістра йде цифра.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Перетворює вказаний запит SQL на код M. Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Перетворює вказаний запит <code>sql</code> на код M із доступними ідентифікаторами, визначеними за допомогою <code>environment</code>. Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Повертає вказаний стовпець даних із таблиці у вигляді списку.",
        "Documentation.LongDescription": "Повертає стовпець даних, вказаний <code>column</code>, з таблиці <code>table</code> у вигляді списку.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Повертає значення зі стовпця [Name] у таблиці.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Повертає список імен стовпців, які відповідають зазначеним типам.",
        "Documentation.LongDescription": "Повертає список з іменами стовпців із таблиці <code>table</code>, які відповідають типам, зазначеним у параметрі <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Повернути назви стовпців типу Number.Type із таблиці.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Визначає, чи відображається вказаний запис у таблиці у вигляді рядка.",
        "Documentation.LongDescription": "Визначає, чи відображається вказаний запис, <code>row</code>, у <code>table</code> у вигляді рядка.\r\n    Можна вказати додатковий параметр <code>equationCriteria</code> для керування порівнянням рядків таблиці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи містить таблиця рядок.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи містить таблиця рядок.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Визначити, чи містить таблиця рядок, порівнюючи лише стовпець [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Визначає, чи всі вказані записи відображаються в таблиці у вигляді рядків.",
        "Documentation.LongDescription": "Визначає, чи всі вказані записи у списку записів <code>rows</code> відображаються в <code>table</code> у вигляді рядків.\r\n    Можна вказати додатковий параметр <code>equationCriteria</code> для керування порівнянням рядків таблиці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Визначте, чи містить таблиця всі рядки, порівнюючи лише стовпець [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи всі рядки містить таблиця.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Визначає, чи відображається будь-який із вказаних записів таблиці у вигляді рядка.",
        "Documentation.LongDescription": "Визначає, чи відображається будь-який із вказаних записів у списку записів <code>rows</code> у <code>table</code> у вигляді рядка.\r\n    Можна вказати додатковий параметр <code>equationCriteria</code> для керування порівнянням рядків таблиці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи містяться в таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> рядки <code>[a = 1, b = 2]</code> або <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи містяться в таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> рядки <code>[a = 1, b = 3]</code> або <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Визначити, чи містяться в таблиці <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> рядки <code>[a = 1, b = 3]</code> або <code>[a = 3, b = 5]</code>, порівнюючи лише стовпець [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Указує, чи містить таблиця задані стовпці.",
        "Documentation.LongDescription": "Указує, чи містить <code>table</code> задані стовпці <code>columns</code>. Повертає значення <code>true</code>, якщо таблиця містить такі стовпці, в іншому разі – <code>false</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи містить таблиця стовпець [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи містить таблиця стовпці [Name] і [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Визначає, чи всі рядки таблиці відповідають вказаній умові.",
        "Documentation.LongDescription": "Визначає, чи всі рядки <code>table</code> відповідають <code>condition</code>. Повертає <code>true</code>, якщо всі рядки відповідають умові, або <code>false</code> в іншому випадку.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи всі значення рядків у стовпці [a] рівні в таблиці.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи всі значення рядків дорівнюють [a = 1, b = 2] у таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Визначає, чи відповідають вказаній умові будь-які рядки таблиці.",
        "Documentation.LongDescription": "Визначає, чи є рядки в <code>table</code>, що відповідають заданій умові <code>condition</code>. Повертає <code>true</code>, якщо будь-який рядок відповідає умові, або <code>false</code> в іншому випадку.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи існують рівні значення рядків у стовпці [a] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Визначити, чи існують значення рядків, що дорівнюють [a = 1, b = 2], у таблиці <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Повертає найбільший рядок або значення за замовчуванням за даним критерієм.",
        "Documentation.LongDescription": "Повертає найбільший рядок у <code>table</code> за умови <code>comparisonCriteria</code>. Якщо таблиця пуста, повертається додаткове значення <code>default</code>. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти рядок із найбільшим значенням у стовпці [a] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Знайти рядок із найбільшим значенням у стовпці [a] у таблиці <code>({})</code>. Повернути -1, якщо значень немає.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Повертає найменший рядок або значення за замовчуванням за даним критерієм.",
        "Documentation.LongDescription": "Повертає найменший рядок у <code>table</code> за умови <code>comparisonCriteria</code>. Якщо таблиця пуста, повертається додаткове значення <code>default</code>.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти в таблиці рядок із найменшим значенням у стовпці [a].",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Знайти в таблиці рядок із найменшим значенням у стовпці [a]. Повернути -1, якщо значень немає.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Повертає позицію або позиції рядка в таблиці.",
        "Documentation.LongDescription": "Повертає позицію, у якій рядок <code>row</code> зустрічається вперше в зазначеній таблиці <code>table</code>. Повертає -1, якщо екземпляр не знайдено.\r\n    <ul>\r\n       <li><code>table</code>: вхідна таблиця.</li>\r\n       <li><code>row</code>: рядок таблиці, позицію якого слід знайти.</li>\r\n       <li><code>occurrence</code>: <i>[необов’язково]</i> визначає, які екземпляри рядка слід повернути.</li>\r\n       <li><code>equationCriteria</code>: <i>[необов’язково]</i> керує порівнянням рядків таблиці.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Знайти позицію першого входження [a = 2, b = 4] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Знайти позицію другого входження [a = 2, b = 4] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Знайти позиції всіх входжень [a = 2, b = 4] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Повертає позицію або позиції будь-якого із вказаних рядків у таблиці.",
        "Documentation.LongDescription": "Повертає позиції з таблиці <code>table</code>, де вперше зустрічаються рядки списку <code>rows</code>. Повертає -1, якщо екземплярів не знайдено.\r\n    <ul>\r\n    <li><code>table</code>: вхідна таблиця.</li>\r\n       <li><code>rows</code>:  список рядків таблиці, позиції яких слід знайти.</li>\r\n       <li><code>occurrence</code>: <i>[необов’язково]</i> визначає, які екземпляри рядка слід повернути.</li>\r\n       <li><code>equationCriteria</code>: <i>[необов’язково]</i> керує порівнянням рядків таблиці.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Знайти позицію першого входження [a = 2, b = 4] або [a = 6, b = 8] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Знайти позиції всіх входжень [a = 2, b = 4] або [a = 6, b = 8] у таблиці <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Розділяє вказану таблицю на список таблиць за вказаним розміром сторінки.",
        "Documentation.LongDescription": "Розділяє таблицю \"<code>table</code>\" на список таблиць, перша з яких містить першу <code>pageSize</code>-рядкову частину\r\n    вихідної таблиці, наступна – наступну <code>pageSize</code>-рядкову частину вихідної таблиці тощо.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Розділити таблицю з п’ятьма записами на таблиці, що містять по два записи.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Повертає список з указаною кількістю перших рядків, а також із рештою рядків.",
        "Documentation.LongDescription": "Повертає список, що містить дві таблиці: з першими N рядками <code>table</code> (відповідно до <code>count</code>) і з рештою рядків <code>table</code>.\r\n\r\nЯкщо таблиці в отриманому списку пронумеровано один раз і по порядку, функція пронумерує <code>table</code> лише один раз.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Повертає перші два рядки таблиці й решту її рядків.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Перетворює рядки таблиці, використовуючи вказану функцію перетворення.",
        "Documentation.LongDescription": "Створює <code>список</code>, застосовуючи операцію <code>transform</code> до кожного рядка в <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Перетворення рядків таблиці на список чисел.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Перетворення рядків числової таблиці на текстові записи.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Повертає частину рядка <code>text</code> після вказаного роздільника <code>delimiter</code>.\r\n    Додатковий числовий параметр <code>index</code> визначає, який екземпляр роздільника <code>delimiter</code> мається на увазі.\r\n    Додатковий список <code>index</code> визначає, який екземпляр роздільника <code>delimiter</code> мається на увазі, а також указує напрямок індексування (з початку чи з кінця введеного рядка).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" після (першого) дефіса.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" після другого дефіса.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" після другого з кінця дефіса.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Повертає символ, що знаходиться у вказаній позиції.",
        "Documentation.LongDescription": "Повертає символ у текстовому значенні, <code>text</code>, що знаходиться в позиції <code>index</code>. Перший символ текстового значення знаходиться в позиції 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Знайти символ у позиції 4 в рядку \"Hello, World\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Повертає частину рядка <code>text</code> перед указаним роздільником <code>delimiter</code>.\r\n    Додатковий числовий параметр <code>index</code> визначає, який екземпляр роздільника <code>delimiter</code> мається на увазі.\r\n    Додатковий список <code>index</code> визначає, який екземпляр роздільника <code>delimiter</code> мається на увазі, а також указує напрямок індексування (з початку чи з кінця введеного рядка).",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" перед (першим) дефісом.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" перед другим дефісом.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Дає змогу отримати частину рядка \"111-222-333\" перед другим із кінця дефісом.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Повертає, чи міститься підрядок у тексті.",
        "Documentation.LongDescription": "Виявляє, чи містить \"<code>text</code>\" значення \"<code>substring</code>\". Якщо його знайдено, повертає результат true. Ця функція не підтримує символи узагальнення та регулярні вирази.\r\n      <br>\r\n      <br>\r\n      Щоб указати порівняння без урахування регістра або з огляду на культуру й локалізацію, можна задати додатковий аргумент <code>comparer</code>.\r\n      Мова формул передбачає такі вбудовані засоби порівняння.\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> – слугує для порядкового порівняння з урахуванням регістра.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> – виконує порядкове порівняння без урахування регістра.</li>\r\n        <li> <code>Comparer.FromCulture</code> – виконує порівняння з огляду на культуру.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи міститься текст \"Hello\" у тексті \"Hello World\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи міститься текст \"hello\" у тексті \"Hello World\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Пошук слова \"hello\" в тексті \"Hello World\" за допомогою засобу порівняння, що не враховує регістр.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Повертає останні символи тексту.",
        "Documentation.LongDescription": "Повертає значення <code>text</code>, яке є останніми <code>count</code> символами значення <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Отримати 5 останніх символів тексту \"Hello, World\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Визначає, чи закінчується текст в указаному значенні.",
        "Documentation.LongDescription": "Визначає, чи закінчується вказаний текст \"<code>text</code>\" указаним значенням \"<code>substring</code>\". Регістр враховується.\r\n\r\n      <div>\r\n        <code>comparer</code> – це функція типу <code>Comparer</code> для контролю над порівнянням. За допомогою таких функцій можна порівнювати дані без урахування регістра або з огляду на культуру й локалізацію.\r\n      </div>\r\n      <div>\r\n        Мова формул передбачає наведені нижче вбудовані засоби порівняння.\r\n      </div>\r\n<ul>\r\n        <li><code>Comparer.Ordinal</code> – слугує для точного порядкового порівняння.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> – виконує точне порядкове порівняння без урахування регістра.</li>\r\n        <li> <code>Comparer.FromCulture</code> – виконує точне порівняння з огляду на культуру.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи закінчується текст \"Hello, World\" значенням \"world\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Перевірити, чи закінчується текст \"Hello, World\" значенням \"World\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Повертає форматований текст від рядка формату та аргументів.",
        "Documentation.LongDescription": "Повертає форматований текст, створений за допомогою застосування параметра <code>arguments</code> зі списку або запису до рядка формату <code>formatString</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Форматування списку чисел.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Форматування різних типів даних із запису відповідно до англійської мови та регіональних параметрів Сполучені Штати.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Повертає підрядок з указаним обмеженням довжини.",
        "Documentation.LongDescription": "Повертає зі зсувом <code>start</code> зазначену кількість (<code>count</code>) або решту символів до кінця тексту \"<code>text</code>\".",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Знаходить підрядок тексту \"Hello World\" довжиною 5 символів, починаючи з індексу 6.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Знаходить підрядок тексту \"Hello World\", починаючи з індексу 6 і до кінця.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Повертає текст зазначеної довжини шляхом заповнення кінцевої частини даного тексту.",
        "Documentation.LongDescription": "Повертає значення <code>text</code>, заповнене до довжини <code>count</code> вставленням пробілів у кінці текстового значення <code>text</code>.\r\n    Для заповнення можна зазначити додатковий символ <code>character</code>. За замовчуванням для цього використовується пробіл.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Заповнити кінець текстового значення до довжини в 10 символів.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Заповнити кінець текстового значення символами \"|\" до довжини в 10 символів.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Повертає текст зазначеної довжини шляхом заповнення початкової частини даного тексту.",
        "Documentation.LongDescription": "Повертає значення <code>text</code>, заповнене до довжини <code>count</code> вставленням пробілів на початку текстового значення <code>text</code>.\r\n    Для заповнення можна зазначити додатковий символ <code>character</code>. За замовчуванням для цього використовується пробіл.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Заповнити початок текстового значення до довжини в 10 символів.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Заповнити початок текстового значення символами \"|\" до довжини в 10 символів.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Повертає першу позицію значення (-1 — якщо не знайдено).",
        "Documentation.LongDescription": "Повертає позицію, яку має вказаний екземпляр текстового значення \"<code>substring</code>\", знайденого в рядку \"<code>text</code>\".\r\n    За допомогою додаткового параметра <code>occurrence</code> можна задати, яку позицію екземпляра слід повернути (значення за замовчуванням – перша).\r\n    Якщо значення \"<code>substring</code>\" не знайдено, повертається -1.\r\n\r\n      <div>\r\n         <code>comparer</code> – це функція типу <code>Comparer</code> для контролю над порівнянням. Такі функції дають змогу порівнювати дані без урахування регістра або з огляду на культуру й локалізацію.\r\n      </div>\r\n      <div>\r\n        Мова формул передбачає наведені нижче вбудовані засоби порівняння.\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> – слугує для точного порядкового порівняння.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> – виконує точне порядкове порівняння без урахування регістра.</li>\r\n        <li> <code>Comparer.FromCulture</code> – виконує порівняння з огляду на культуру.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Отримати позицію першого входження \"World\" у тексті \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Отримати позицію останнього екземпляра елемента \"World\" у тексті \"Hello, World! Hello, World!\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Повертає першу позицію будь-якого з перелічених символів у текстовому значенні (-1 — якщо не знайдено).",
        "Documentation.LongDescription": "Повертає першу позицію будь-якого символу зі списку <code>characters</code>, який зустрічається в <code>text</code>.\n    Можна вказати додатковий параметр <code>occurrence</code> для зазначення позиції входження, яку слід повернути.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Знайдіть першу позицію \"W\" або \"H\" у тексті \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Знайдіть усі позиції \"W\" або \"H\" у тексті \"Hello, World!\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Повертає підрядок, знайдений зі зсувом.",
        "Documentation.LongDescription": "Повертає підрядок тексту \"<code>text</code>\", знайдений зі зсувом <code>offset</code>.\r\n    Можна включити додатковий параметр <code>count</code>, щоб указати, скільки символів слід повернути. Якщо символів замало, повертається помилка.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Знайти підрядок тексту \"Hello World\", що починається за індексом 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Знайти підрядок тексту \"Hello World\", що починається за індексом 6 і охоплює 5 символів.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Видаляє всі входження заданого символу або списку символів із вхідного текстового значення.",
        "Documentation.LongDescription": "Повертає копію текстового значення <code>text</code> із видаленими всіма символами, починаючи з <code>removeChars</code>.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Видалити символи \",\" та \";\" з текстового значення.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Видаляє задану кількість символів, починаючи з указаного зсуву.",
        "Documentation.LongDescription": "Повертає копію текстового значення <code>text</code>, звідки вилучено всі символи, починаючи з позиції <code>offset</code>.\r\n    Можна вказати додатковий параметр <code>count</code> із зазначенням кількості символів, які слід вилучити. Стандартне значення параметра <code>count</code> становить 1. Значення позицій починаються з 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Видалити 1 символ з текстового значення \"ABEFC\", що знаходиться в позиції 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Видалити два символи з текстового значення \"ABEFC\", починаючи з позиції 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Повертає текстове значення, складене із заданої кількості повторювань вхідного тексту.",
        "Documentation.LongDescription": "Повертає текстове значення, складене з <code>count</code> повторювань вхідного тексту <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Повторити текст \"a\" п'ять разів.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Повторити текст \"helloworld\" тричі.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Дає змогу виділити всі екземпляри заданого символу або списку символів у вхідному текстовому значенні.",
        "Documentation.LongDescription": "Повертає копію текстового значення \"<code>text</code>\", звідки вилучено всі символи, яких немає в наборі \"<code>selectChars</code>\".  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Виділяє в текстовому значенні всі символи в діапазоні від \"a\" до \"z\".",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Розділяє текст на список текстових значень на основі вказаного роздільника.",
        "Documentation.LongDescription": "Повертає список текстових значень після розділення текстового значення <code>text</code> на основі вказаного роздільника, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Створити список з розділеного символом \"|\" текстового значення \"Ім'я|Адреса|Номер телефону\".",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Повертає список текстових значень, розділених за будь-яким символом у роздільнику.",
        "Documentation.LongDescription": "Повертає список текстових значень після розділення текстового значення <code>text</code> на основі будь-якого символу в указаному роздільнику, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Створити список з текстового значення \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\".",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Повертає початок тексту.",
        "Documentation.LongDescription": "Повертає <code>count</code> перших символів з <code>text</code> як текстове значення.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Отримати 5 перших символів фрази \"Hello, World\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Указує, чи починається текст з указаного значення.",
        "Documentation.LongDescription": "Повертає значення true, якщо текстове значення \"<code>text</code>\" починається з текстового значення \"<code>substring</code>\".\r\n      <ul>\r\n        <li>\"<code>text</code>\" – <i></i> значення типу <code>text</code>, яке потрібно знайти.</li>\r\n        <li>\"<code>substring</code>\" – <i></i> значення типу <code>text</code>, підрядок, який потрібно знайти в рядку <code>substring</code>.</li>\r\n        <li><code>comparer</code> – <i>[необов’язкова]</i> функція типу <code>Comparer</code>, що слугує для контролю над порівнянням. Наприклад, <code>Comparer.OrdinalIgnoreCase</code> можна використовувати для пошуку без урахування регістра.</li>\r\n      </ul>\r\n      <div>\r\n         <code>comparer</code> – це функція <code>Comparer</code>, що дає змогу контролювати порівняння. За допомогою таких функцій можна виконувати порівняння без урахування регістра або з огляду на культуру й локалізацію.\r\n      </div>\r\n      <div>\r\n        Мова формул передбачає наведені нижче вбудовані засоби порівняння.\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code> – слугує для точного порядкового порівняння.</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code> – виконує точне порядкове порівняння без урахування регістра.</li>\r\n        <li> <code>Comparer.FromCulture</code> – дає змогу порівнювати дані з огляду на культуру.</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи текст \"Hello, World\" починається з тексту \"hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Перевірити, чи текст \"Hello, World\" починається з тексту \"Hello\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Повертає тип, що представляє функції з певним параметром, а також обмеження типу.",
        "Documentation.LongDescription": "Створює функцію типу <code>function type</code> з таких елементів: <code>signature</code>, запису <code>ReturnType</code> і <code>Parameters</code>, а також <code>min</code>, мінімальної кількості аргументів для виклику функції.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Створює тип функції, яка приймає числовий параметр X і повертає число.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Повертає тип, що представляє записи з обмеженнями певного типу на полях.",
        "Documentation.LongDescription": "Повертає тип, що представляє записи з обмеженнями певного типу на полях.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Динамічне створення типу таблиці.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Визначає, чи значення першого типу завжди сумісне з другим типом.",
        "Documentation.LongDescription": "Визначає, чи значення <code>type1</code> завжди сумісне з <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Визначає, чи завжди можна розглядати значення типу \"число\" також як значення типу \"будь-який\".",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Визначає, чи завжди можна розглядати значення типу \"будь-який\" також як значення типу \"число\".",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Замінює аспекти типу.",
        "Documentation.LongDescription": "Замінює аспекти типу \"<code>type</code>\" на аспекти, що містяться в записі \"<code>facets</code>\".",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Повертає новий тип таблиці зі всіма ключами, заміненими вказаними списками ключів.",
        "Documentation.LongDescription": "Повертає новий тип таблиці зі всіма ключами, заміненими вказаними списками ключів.<br>\r\n    <br>\r\n    Кожен ключ визначається за допомогою запису в такій формі: \r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: список імен стовпців, які визначають ключі\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code>, якщо ключ є первинним ключем таблиці; в іншому разі <code>false</code>\r\n      </li>\r\n    </ul>\r\n    Указаний список ключів перевіряється, щоб гарантувати, що визначено не більш як один первинний ключ і всі імена стовпців ключів існують у типі таблиці.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Заміна відомостей про ключ для типу таблиці.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Очищення відомостей про ключ, попередньо визначених у типі таблиці.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Повертає тип стовпця в таблиці.",
        "Documentation.LongDescription": "Повертає тип стовпця <code>column</code> в таблиці типу <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Повертає абсолютний URI, який є комбінацією URI вхідної бази та відносного URI.",
        "Documentation.LongDescription": "Повертає абсолютний URI, який є комбінацією вхідного <code>baseUri</code> та <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Повертає суму двох значень.",
        "Documentation.LongDescription": "Повертає суму <code>value1</code> і <code>value2</code>. Можна вказати додатковий параметр <code>precision</code>. За замовчуванням використовується <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Повертає значення, якщо воно сумісне з указаним типом.",
        "Documentation.LongDescription": "Повертає значення, якщо воно сумісне з указаним типом. Ця функція еквівалентна до оператора \"as\" у M, за винятком того, що може приймати посилання на тип ідентифікатора, такі як Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Перетворює число на число.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Спроба перетворити текстове значення на число.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Повертає -1, 0 або 1, якщо перше значення менше, дорівнює або більше за друге.",
        "Documentation.LongDescription": "Повертає -1, 0 або 1, якщо перше значення менше, дорівнює або більше за друге.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Повертає результат ділення першого значення на друге.",
        "Documentation.LongDescription": "Повертає результат ділення <code>value1</code> на <code>value2</code>. Можна вказати додатковий параметр <code>precision</code>. За замовчуванням використовується <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Повертає результат, чи два значення рівні.",
        "Documentation.LongDescription": "Повертає значення true, якщо значення <code>value1</code> дорівнює значенню <code>value2</code>, у протилежному випадку повертає значення false.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Визначає, чи сумісне значення з указаним типом.",
        "Documentation.LongDescription": "Визначає, чи сумісне значення з указаним типом. Ця функція еквівалентна до оператора \"is\" у M, за винятком того, що може приймати посилання на тип ідентифікатора, такі як Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Порівнює два способи визначити, чи сумісне число з типом \"число\".",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Повертає добуток двох значень.",
        "Documentation.LongDescription": "Повертає добуток множення <code>value1</code> на <code>value2</code>. Можна вказати додатковий параметр <code>precision</code>. За замовчуванням використовується <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Обчислює запит відносно цільового об’єкта.",
        "Documentation.LongDescription": "<p>Обчислює запит <code>query</code> стосовно цільового об’єкта <code>target</code>, використовуючи значення параметрів <code>parameters</code> і <code>options</code>.</p>\r\n<p>Результат запиту залежить від цільового об’єкта <code>target</code>.</p>\r\n<p>Цільовий об’єкт <code>target</code> надає контекст операції, описаній запитом <code>query</code>.</p>\r\n<p>Елемент <code>query</code> описує запит, який потрібно виконати стосовно цільового об’єкта <code>target</code>. Формат запиту <code>query</code> залежить від особливостей цільового об’єкта <code>target</code> (наприклад, інструкція T-SQL).</p>\r\n<p>Необов’язкове значення <code>parameters</code> може містити список або запис, потрібний, щоб надати значення параметрів, які очікує запит <code>query</code>.</p>\r\n<p>Необов’язковий запис <code>options</code> може містити параметри, що впливають на обчислення запиту <code>query</code> стосовно цільового об’єкта <code>target</code>. Ці параметри залежать від цільового об’єкта <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Повертає результат, чи два значення рівні.",
        "Documentation.LongDescription": "Повертає нуль, якщо один з аргументів \"<code>value1</code>\" або \"<code>value2</code>\" є нулем, у протилежному випадку є еквівалентним Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Замінює відомості метаданих вводу.",
        "Documentation.LongDescription": "Замінює відомості метаданих вводу.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Замінює тип значення.",
        "Documentation.LongDescription": "Замінює тип <code>value</code> наданим <code>type</code>.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Замінити стандартний тип запису на більш конкретний.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Повертає різницю двох значень.",
        "Documentation.LongDescription": "Повертає різницю <code>value1</code> і <code>value2</code>. Можна вказати додатковий параметр <code>precision</code>. За замовчуванням використовується <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Створює дію, яка повертає результати запуску HTTP-запиту як двійкове значення, якщо її виконати.",
        "Documentation.LongDescription": "Створює дію, за виконання якої повертатимуться результати HTTP-запиту <code>method</code> відносно <code>url</code> як бінарне значення.\r\n    Щоб указати додаткові властивості, можна задавати додатковий параметр запису <code>options</code>. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>Query</code> : Параметри запиту можна програмно додавати до URL-адреси без необхідності додавати escape-код.</li>\r\n<li><code>ApiKeyName</code> : Якщо на цільовому сайті має вказуватися ключ API, за допомогою цього параметра можна вказати ім‘я, проте не значення, параметра ключа, який слід використовувати в URL-адресі. Фактичне значення ключа вказується в облікових даних.</li>\r\n<li><code>Headers</code> : Якщо вказати запис як значення, в HTTP-запиті буде вказано додаткові заголовки.</li>\r\n<li><code>Timeout</code> : Якщо вказати тривалість як значення, час очікування HTTP-запиту зміниться. Стандартне значення – 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Якщо вказати список як значення, відповідні ключі заголовків HTTP буде виключено з обчислення для кешування даних.</li>\r\n<li><code>IsRetry</code> : Якщо вказати логічне значення true, під час отримання даних ігноруватиметься будь-яка наявна відповідь у кеші.</li>\r\n<li><code>ManualStatusHandling</code> : Якщо вказати список як значення, це запобігатиме використанню передбачених механізмів обробки щодо HTTP-запитів, відповідь на які має один з указаних кодів станів.</li>\r\n<li><code>RelativePath</code> : Якщо вказати це значення як текст, його буде додано до основної URL-адреси до виконання запиту.</li>\r\n<li><code>Content</code> : Це значення дає змогу вказати вміст як основний текст HTTP-запиту.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Зверніть увагу, що цю функцію вимкнуто в більшості контекстів. Розгляньте використання Web.Contents або Web.Headers замість неї.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Виконання запиту GET у Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу кінцевої точки інтерфейсу REST API програми Azure Enterprise, пов’язану з вашою реєстрацією.",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Повертає двійкові результати виклику URL-адреси, наданої для інтерфейсу API Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Використовується функція AzureEnterprise.Contents, щоб повернути результати конкретного звіту.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Таблиця"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Повертає вміст указаного BLOB-об’єкта зі сховища Azure.",
        "Documentation.LongDescription": "Повертає вміст BLOB-об'єкта в URL-адресі, <code>url</code>, зі сховища Azure. Ви можете вказати <code>options</code> для керування такими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Кількість байтів, які потрібно зчитати, перш ніж очікувати на споживача даних. Стандартне значення – 4 МБ.</li>\r\n<li><code>RequestSize</code> : Кількість байтів, яку потрібно спробувати зчитати в одному запиті HTTP на сервері. Стандартне значення – 4 МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests підтримує швидке завантаження даних за допомогою зазначення кількості запитів, які потрібно виконати паралельно, з використанням пам’яті. Потрібна пам’ять розраховується за формулою (ConcurrentRequest * RequestSize). Стандартне значення – 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Повертає з файлової системи Azure Data Lake Storage вміст указаного файлу.",
        "Documentation.LongDescription": "Повертає вміст файлу за URL-адресою, <code>url</code>, з файлової системи Azure Data Lake Storage. Ви можете вказати <code>options</code> для керування такими параметрами:\r\n    <ul>\r\n<li><code>BlockSize</code> : Кількість байтів, які потрібно зчитати, перш ніж очікувати на споживача даних. Стандартне значення – 4 МБ.</li>\r\n<li><code>RequestSize</code> : Кількість байтів, яку потрібно спробувати зчитати в одному запиті HTTP на сервері. Стандартне значення – 4 МБ.</li>\r\n<li><code>ConcurrentRequests</code> : Параметр ConcurrentRequests підтримує швидке завантаження даних за допомогою зазначення кількості запитів, які потрібно виконати паралельно, з використанням пам’яті. Потрібна пам’ять розраховується за формулою (ConcurrentRequest * RequestSize). Стандартне значення – 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Повертає приблизну довжину двійкового значення.",
        "Documentation.LongDescription": "Повертає приблизну довжину <code>binary</code> або помилку, якщо джерело даних не підтримує приблизну довжину.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Отримайте приблизну довжину двійкового значення.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Буферизує двійкове значення в пам'яті.",
        "Documentation.LongDescription": "Буферизує двійкове значення в пам'яті. Результатом цього виклику буде стабільне двійкове значення, тобто воно матиме визначену довжину та порядок байтів.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Створює стабільну версію двійкового значення.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Об'єднує список двійкових даних в одне двійкове значення.",
        "Documentation.LongDescription": "Об'єднує список двійкових даних в одне двійкове значення.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Створює двійкове значення із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>binary</code> із заданого <code>value</code>. Якщо задане значення <code>value</code> – <code>null</code>, <code>Binary.From</code> повертає значення <code>null</code>.  Якщо задане значення <code>value</code> – <code>binary</code>, повертається значення <code>value</code>. На значення <code>binary</code> можуть перетворюватися значення вказаних нижче типів.\r\n      <ul>\r\n        <li><code>text</code>: значення <code>binary</code> з текстової форми. Докладніші відомості див. в <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nЯкщо <code>value</code> належить до будь-якого іншого типу, повертається помилка.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Отримати <code>binary</code> значення <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Перетворює список чисел на двійкове значення.",
        "Documentation.LongDescription": "Перетворює список чисел на двійкове значення.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Розшифровує дані з текстового формату на двійковий.",
        "Documentation.LongDescription": "Повертає результат перетворення текстового значення <code>text</code> на двійкове (список <code>number</code>). За допомогою <code>encoding</code> можна вказати кодування, яке використовується в текстовому значенні.\r\n      Для <code>encoding</code> можна використовувати вказані нижче значення <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: кодування Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: шістнадцяткове кодування</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Розшифрувати \"1011\" у двійковий формат.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Розшифрувати \"1011\" у двійковий формат із шістнадцятковим кодуванням.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Читає двійковий потік, щоб визначити тип вмісту й відомості про формат потоку.",
        "Documentation.LongDescription": "Повертає запис із полем Content.Type, що містить виснуваний тип MIME.\r\n    Якщо виснувано тип вмісту text/* і виявлено сторінку з кодами, додатково повертає поле Content.Encoding із даними про кодування потоку.\r\n    Якщо виснувано тип вмісту text/csv та формат із роздільниками, додатково повертає поле Csv.PotentialDelimiter з таблицею для аналізу можливих роздільників.\r\n    Якщо визначено тип вмісту text/csv та формат із полями фіксованої ширини, додатково повертає поле Csv.PotentialPositions зі списком для аналізу можливих позицій стовпців фіксованої ширини.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Повертає кількість символів.",
        "Documentation.LongDescription": "Повертає кількість символів.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Перетворює двійкове значення на список чисел.",
        "Documentation.LongDescription": "Перетворює двійкове значення на список чисел.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Кодує двійкові дані в текстову форму.",
        "Documentation.LongDescription": "Повертає результат перетворення двійкового списку чисел <code>binary</code> на текстове значення. За допомогою <code>encoding</code> можна також вказати кодування, яке використовуватиметься в отриманому текстовому значенні\r\n      Для <code>encoding</code> можна використовувати вказані нижче значення <code>BinaryEncoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: кодування Base 64</li>\r\n        <li><code>BinaryEncoding.Hex</code>: шістнадцяткове кодування</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Створює модифікований запис про помилку, який не ініціює перехід у разі повернення обробником, зазначеним у поданні (через Binary.View).",
        "Documentation.LongDescription": "Створює модифікований запис про помилку від <code>errorRecord</code>, який не ініціює перехід у разі повернення обробником, зазначеним у поданні (через Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Створює функцію, яку може перехопити обробник, визначений у поданні (через Binary.View).",
        "Documentation.LongDescription": "<p>Створює функцію подання на основі <code>function</code>, що можна обробляти в поданні, створеному <code>Binary.View</code>.</p>\r\n<p>Обробник <code>OnInvoke</code> для <code>Binary.View</code> можна використовувати для визначення обробника для функції подання.</p>\r\n<p>Як і у випадку обробників для вбудованих операцій, якщо обробник <code>OnInvoke</code> не вказано, він не обробляє функцію подання або виникла помилка обробника, <code>function</code> застосовується поверх подання.</p>\r\n<p>Перегляньте опубліковану документацію щодо настроюваного з’єднувача Power Query, щоб дізнатися більше про <code>Binary.View</code> та спеціальні функції подання.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Двійковий формат, який читає 64-розрядне ціле число зі знаком, закодоване за допомогою 7-розрядного кодування змінної довжини.",
        "Documentation.LongDescription": "Двійковий формат, який читає 64-розрядне ціле число зі знаком, закодоване за допомогою 7-розрядного кодування змінної довжини.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Двійковий формат, який читає 64-розрядне беззнакове ціле число, закодоване за допомогою 7-розрядного кодування змінної довжини.",
        "Documentation.LongDescription": "Двійковий формат, який читає 64-розрядне беззнакове ціле число, закодоване за допомогою 7-розрядного кодування змінної довжини.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Двійковий формат, який читає 8-розрядне беззнакове ціле число.",
        "Documentation.LongDescription": "Двійковий формат, який читає 8-розрядне беззнакове ціле число.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Двійковий формат, який читає 16-байтне десяткове значення .NET.",
        "Documentation.LongDescription": "Двійковий формат, який читає 16-байтне десяткове значення .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Двійковий формат, який читає значення у форматі 8-байтного числа подвійної точності з рухомою комою IEEE.",
        "Documentation.LongDescription": "Двійковий формат, який читає значення у форматі 8-байтного числа подвійної точності з рухомою комою IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Повертає двійковий формат, який читає послідовність елементів і повертає список.",
        "Documentation.LongDescription": "Повертає двійковий формат, який зчитує послідовність елементів і повертає список за параметром <code>list</code>. Параметр <code>binaryFormat</code> слугує, щоб указати двійковий формат кожного елемента. Визначити кількість елементів для читання можна трьома способами. <ul><li>Якщо <code>countOrCondition</code> не задано, двійковий формат зчитуватиме послідовність, доки не залишиться жодного елемента.</li><li>Якщо <code>countOrCondition</code> – це число, за ним визначатиметься кількість зчитуваних елементів.</li><li>Якщо <code>countOrCondition</code> – це функція, вона викликатиметься для кожного зчитуваного елемента. Функція повертає значення true, щоб продовжити читання елементів, і false, щоб зупинити його. До списку включається останній елемент.</li><li>Якщо <code>countOrCondition</code> має двійковий формат, очікується, що списку передуватиме кількість елементів, для читання якої використовуватиметься вказаний формат.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Читання байтів даних до кінця.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Читання двох байтів.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Читання байтів, доки значення байту не буде більше або дорівнювати двом.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Двійковий формат, який читає нуль байтів і повертає Null.",
        "Documentation.LongDescription": "Двійковий формат, який читає нуль байтів і повертає Null.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Повертає двійковий формат, який читає запис.",
        "Documentation.LongDescription": "Повертає двійковий формат, який читає запис.  Параметр <code>record</code> указує формат запису.  Кожне поле в записі може мати різний двійковий формат.  Якщо поле містить значення, що не є двійковим, для цього поля не читаються жодні дані та в результаті відображається значення поля.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Читання запису, який містить одне 16-розрядне та одне 32-розрядне ціле число.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Двійковий формат, який читає 16-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Двійковий формат, який читає 16-розрядне ціле число зі знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Двійковий формат, який читає 32-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Двійковий формат, який читає 32-розрядне ціле число зі знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Двійковий формат, який читає 64-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Двійковий формат, який читає 64-розрядне ціле число зі знаком.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Двійковий формат, який читає значення у форматі 4-байтного числа одиночної точності з рухомою комою IEEE.",
        "Documentation.LongDescription": "Двійковий формат, який читає значення у форматі 4-байтного числа одиночної точності з рухомою комою IEEE.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Повертає двійковий формат, який читає текстове значення.",
        "Documentation.LongDescription": "Повертає двійковий формат, який читає текстове значення. <code>length</code> указує кількість байтів для розшифровки або двійковий формат довжини, що передує тексту. Необов’язкове значення <code>encoding</code> указує кодування тексту. Якщо <code>encoding</code> не вказано, кодування визначається за позначками порядку байтів Юнікоду. Якщо позначки порядку байтів відсутні, використовується <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Розшифрування двох байтів як тексту ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Розшифрування тексту ASCII, де байт довжини тексту в байтах передує самому тексту.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Двійковий формат, який читає 16-розрядне беззнакове ціле число.",
        "Documentation.LongDescription": "Двійковий формат, який читає 16-розрядне беззнакове ціле число.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Двійковий формат, який читає 32-розрядне беззнакове ціле число.",
        "Documentation.LongDescription": "Двійковий формат, який читає 32-розрядне беззнакове ціле число.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Двійковий формат, який читає 64-розрядне беззнакове ціле число.",
        "Documentation.LongDescription": "Двійковий формат, який читає 64-розрядне беззнакове ціле число.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Створює 8-розрядне ціле число з указаного значення.",
        "Documentation.LongDescription": "Повертає 8-розрядне ціле значення <code>number</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Byte.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні 8-розрядних цілих чисел без дробової частки, повертається <code>value</code>. Якщо наявна дробова частка, число округлюється за вказаним режимом. За замовчуванням використовується режим округлення <code>RoundingMode.ToEven</code>. Якщо <code>value</code> має будь-який інший тип, його спочатку буде перетворено на <code>number</code> за допомогою функції <code>Number.FromText</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати 8-розрядне ціле значення <code>number</code> зі значення <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати 8-розрядне ціле значення <code>number</code> зі значення <code>\"4.5\"</code>, використовуючи режим округлення <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Перетворює число на текстовий символ.",
        "Documentation.LongDescription": "Повертає символ, еквівалентний числу.<br>\r\n    <br>\r\n    <code>number</code> має бути 21-бітною кодовою точкою Юнікоду.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Перетворіть число на еквівалентне значення символу.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Перетворіть символ на число, а потім назад.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Перетворіть шістнадцяткову кодову точку для емограми \"усміхнене обличчя\" на еквівалентну сурогатну пару UTF-16.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Перетворює символ на числове значення.",
        "Documentation.LongDescription": "Повертає число, еквівалентне <code>character</code>.<br>\r\n    <br>\r\n    Результат має бути 21-бітною кодовою точкою Юнікоду, представленою указаним символом або сурогатною парою.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Перетворіть символ на еквівалентне числове значення.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Перетворіть сурогатну пару UTF-16 для емограми \"усміхнене обличчя\" на еквівалентну шістнадцяткову кодову точку.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Повертає функцію, яка об’єднує список тексту за допомогою вказаного роздільника.",
        "Documentation.LongDescription": "Повертає функцію, яка об’єднує список текстових значень в одне текстове значення за допомогою вказаного роздільника.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Об’єднати список текстових значень за допомогою крапки з комою як роздільника.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Об’єднайте текст двох стовпців, використовуючи роздільник із комами й лапки в стилі CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Повертає функцію, яка об’єднує список тексту за допомогою послідовності роздільників.",
        "Documentation.LongDescription": "Повертає функцію, яка об’єднує список текстових значень в одне текстове значення за допомогою послідовності роздільників.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте список текстових значень за допомогою послідовності роздільників.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Повертає функцію, яка об’єднує список тексту за допомогою вказаних значень довжини.",
        "Documentation.LongDescription": "Повертає функцію, яка об’єднує список текстових значень в одне текстове значення за допомогою вказаних значень довжини.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте список текстових значень, видобувши вказані номери символів із кожного вхідного значення.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Об’єднайте список текстових значень, видобувши вказані номери символів, після першого попереднього заповнення результату текстом шаблону.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Повертає функцію, яка об’єднує список тексту за допомогою вказаних позицій вихідних даних.",
        "Documentation.LongDescription": "Повертає функцію, яка об’єднує список текстових значень в одне текстове значення за допомогою вказаних позицій вихідних даних.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте список текстових значень, розмістивши їх у вихідних даних в указаних позиціях.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Повертає функцію, яка об’єднує список тексту за допомогою вказаних позицій і значень довжини.",
        "Documentation.LongDescription": "Повертає функцію, яка об’єднує список текстових значень в одне текстове значення за допомогою вказаних позицій вихідних даних і значень довжини. Довжина null указує, що текстове значення потрібно включити повністю.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Об’єднайте список текстових значень за допомогою вказаних позицій вихідних даних і значень довжини.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Повертає функцію засобу порівняння на основі вказаної культури та з урахуванням регістра.",
        "Documentation.LongDescription": "Повертає функцію засобу порівняння, яка використовує <code>culture</code>, та чутливість до регістру, визначену <code>ignoreCase</code>, для виконання порівнянь.<br>\r\n      <br>\r\n Функція засобу порівняння приймає два аргументи та повертає -1, 0 або 1 залежно від того, чи перше значення менше, дорівнює або більше за друге.<br>\r\n <br>\r\n Стандартне значення <code>ignoreCase</code> має значення false. <code>culture</code> має бути однією з локалізацій, що підтримуються .NET Framework (наприклад, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Порівняти \"a\" та \"A\" за допомогою локалізації \"en-US\", щоб визначити, чи значення однакові.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Порівняти \"a\" та \"A\" за допомогою локалізації \"en-US\" без урахування регістра, щоб визначити, чи значення однакові.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Повертає унікальний ідентифікатор елемента зі значення властивості елемента.",
        "Documentation.LongDescription": "Повертає унікальний ідентифікатор елемента зі значення властивості елемента. <code>attribute</code>. Повертає Null-значення для будь-яких інших значень.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Повертає ключ властивості.",
        "Documentation.LongDescription": "Повертає ключ властивості \"<code>property</code>\".",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Повертає значення грошової одиниці із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>currency</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має <code>null</code>-значення, функція <code>Currency.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні грошової одиниці, дробова частина параметра <code>value</code> повертається округленою до 4 десяткових знаків. Якщо заданий параметр <code>value</code> має інше значення, за допомогою функції <code>Number.FromText</code>, його буде перетворено на значення типу <code>number</code>. Припустимий діапазон значень грошової одиниці: від <code>-922 337 203 685 477,5808</code> до <code>922 337 203 685 477,5807</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. За замовчуванням використовується режим <code>RoundingMode.ToEven</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати значення <code>currency</code> з <code>\"1,23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Отримання значення типу <code>currency</code> з числа <code>\"1,23455\"</code> за допомогою режиму <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Повертає компонент дня.",
        "Documentation.LongDescription": "Повертає компонент дня значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, з якого видобувається компонент дня.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримання компонента дня значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, що представляє дату й час 14.05.11 17:00:00.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Повертає число (від 0 до 6) на позначення дня тижня, на який припадає надане значення.",
        "Documentation.LongDescription": "Повертає число (від 0 до 6) на позначення дня тижня, на який припадає надане значення <code>dateTime</code>.\r\n  <ul>\r\n        <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: значення <code>Day</code>, яке представляє перший день тижня. Дозволені такі значення: Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday. Якщо не вказати цей параметр, використовується залежне від культури стандартне значення.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Повертає день тижня для понеділка 21 лютого 2011 р. за умови, що перший день тижня – неділя.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Повертає день тижня для понеділка 21 лютого 2011 р. за умови, що перший день тижня – понеділок.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Повертає назву дня тижня.",
        "Documentation.LongDescription": "Повертає ім’я дня тижня для заданого параметра <code>date</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримання назви дня тижня.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Повертає число від 1 до 366, що представляє день року.",
        "Documentation.LongDescription": "Повертає число, що представляє день року в наданому значенні <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "День у році для 1 березня 2011 р.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Повертає число від 28 до 31, що представляє кількість днів у місяці.",
        "Documentation.LongDescription": "Повертає кількість днів у місяці у значенні <code>date</code>, <code>datetime</code> або <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, для якого повертається кількість днів у місяці.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Кількість днів у місяці грудні, який представлено таким чином: <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Повертає дані про кінець дня.",
        "Documentation.LongDescription": "Повертає дані про кінець дня, указані за допомогою <code>dateTime</code>. Відомості часового поясу зберігаються.\r\n      <ul>\r\n        <li><code>dateTime</code> – значення типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється кінець дня.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримати кінець дня для 14.05.11, 17:00:00.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Отримання кінця дня для 17.05.11, 17:00:00 -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Повертає дані про кінець місяця.",
        "Documentation.LongDescription": "Повертає дані про кінець місяця, які містить <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code> – значення типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється кінець місяця.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримання кінця місяця для 14.05.11.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Отримання кінця місяця для 17.05.11, 17:00:00 -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Повертає дані про кінець кварталу.",
        "Documentation.LongDescription": "Повертає дані про кінець кварталу, які містить <code>dateTime</code>. Відомості часового поясу зберігаються.\r\n      <ul>\r\n      <li><code>dateTime</code> – значення типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється кінець кварталу.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити кінець кварталу для 10 жовтня 2011 р., 08:00.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Повертає дані про кінець тижня.",
        "Documentation.LongDescription": "Повертає дані про кінець тижня, які містить <code>dateTime</code>.\r\nДля цієї функції можна вказати додатковий параметр типу <code>Day</code>, <code>firstDayOfWeek</code>, щоб установити перший день тижня для відносного обчислення. Стандартне значення – <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється останній день тижня.</li>\r\n        <li><code>firstDayOfWeek</code> <i>[необов’язковий]</i> – значення <code>Day.Type</code>, яке відповідає першому дню тижня. Можливі значення: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code>, <code>Day.Saturday.</code>. Стандартне значення – <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримання кінця тижня для 14.05.11.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Отримання кінця тижня для 17.05.11, 17:00:00 -7:00 за умови, що першим днем тижня є неділя.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Повертає дані про кінець року.",
        "Documentation.LongDescription": "Повертає дані про кінець року, які містить <code>dateTime</code>, включно з частками секунди. Відомості часового поясу зберігаються.\r\n      <ul>\r\n        <li><code>dateTime</code> – значення типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється кінець року.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримати кінець року для 14 травня 2011 р. 17:00:00.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Отримати кінець години для 17 травня 2011 р. 17:00:00 -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Створює дату із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>date</code>на основі заданого параметра <code>value</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").\r\nЯкщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Date.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>date</code>, повертається <code>value</code>. Значення таких типів можна перетворити на значення <code>date</code>:\r\n      <ul>\r\n        <li><code>text</code>: значення <code>date</code> із текстового представлення. Див. опис функції <code>Date.FromText</code>, щоб дізнатися більше.</li>\r\n        <li><code>datetime</code>: компонент дати <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: компонент дати еквівалента місцевих дати й часу параметра <code>value</code>.</li>\r\n        <li><code>number</code>: компонент дати еквівалента дати й часу автоматизації OLE, виражений параметром <code>value</code>.</li>\r\n      </ul>\r\nЯкщо параметр <code>value</code> має інше значення, повертається помилка.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>43910</code> на значення <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Перетворити <code>#datetime(1899, 12, 30, 06, 45, 12)</code> на значення <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Створює дату з місцевого, всесвітнього та настроюваного форматів дати.",
        "Documentation.LongDescription": "Створює значення типу <code>date</code> із текстового подання <code>text</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата аналізуватиметься за найкращим варіантом.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для <code>options</code> також можна задавати текстове значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>2010-12-31</code> на значення <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Пошук у григоріанському календарі дати, яка відповідає початку 1400 року за календарем Хиджра.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного дня, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного дня, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до поточного дня.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного місяця, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного місяця, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до поточного місяця.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного кварталу, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного кварталу, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до поточного кварталу.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного тижня, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного тижня, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до поточного тижня.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного року, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного року, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до поточного року.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Указує, чи ця дата припадає на наступний день відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступний день відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи день після поточного часу системи відноситься до наступного дня.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Указує, чи ця дата припадає на наступний місяць відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступний місяць відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи місяць після поточного часу системи відноситься до наступного місяця.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Указує, чи ця дата припадає на наступний квартал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступний квартал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи квартал після поточного часу системи відноситься до наступного кварталу.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Указує, чи ця дата припадає на наступний тиждень відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступний тиждень відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи тиждень після поточного часу системи відноситься до наступного тижня.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Указує, чи ця дата припадає на наступний рік відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступний рік відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи рік після поточного часу системи відноситься до наступного року.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Указує, чи ця дата припадає на попередній день відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередній день відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний день, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи день до поточного часу системи відноситься до попереднього дня.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Указує, чи ця дата припадає на попередній місяць відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередній місяць відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний місяць, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи місяць до поточного часу системи відноситься до попереднього місяця.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Указує, чи ця дата припадає на попередній квартал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередній квартал відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний квартал, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи квартал до поточного часу системи відноситься до попереднього кварталу.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Указує, чи ця дата припадає на попередній тиждень відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередній тиждень відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний тиждень, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи тиждень до поточного часу системи відноситься до попереднього тижня.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Указує, чи ця дата припадає на попередній рік відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередній рік відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточний рік, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи рік до поточного часу системи відноситься до попереднього року.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Указує, чи ця дата зустрічається протягом поточного року і чи вона відноситься до поточного дня чи раніше, як визначено поточними датою й часом у системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточного року і чи воно відноситься до поточного дня чи раніше, як визначено поточними датою й часом у системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: Значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи відноситься до періоду з початку року.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Указує, чи ця дата припадає на високосний рік.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на високосний рік.\r\n <ul>\r\n        <li><code>dateTime</code>: значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи 2012 рік, представлений <code>#date(2012, 01, 01)</code>, є високосним.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Повертає компонент місяця.",
        "Documentation.LongDescription": "Повертає компонент місяця заданого значення <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Знайти місяць у #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Повертає компонент назви місяця.",
        "Documentation.LongDescription": "Повертає ім’я компонента місяця для заданого параметра <code>date</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримання назви місяця.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Повертає число, яке вказує, на який квартал року припадає дата.",
        "Documentation.LongDescription": "Повертає число від 1 до 4, яке вказує, на який квартал року припадає дата <code>dateTime</code>. <code>dateTime</code> може бути значенням <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Знайти, на який квартал року припадає дата #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Повертає дані про початок дня.",
        "Documentation.LongDescription": "Повертає дані про початок дня, указані за допомогою <code>dateTime</code>.\r\n    <code>dateTime</code> має бути значенням типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити початок дня для 10 жовтня 2011 р., 08:00.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Повертає дані про початок місяця.",
        "Documentation.LongDescription": "Повертає дані про початок місяця, які містить <code>dateTime</code>.\r\n    <code>dateTime</code> має бути значенням типу <code>date</code> або <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити початок місяця для 10 жовтня 2011 р., 08:10:32.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Повертає дані про початок кварталу.",
        "Documentation.LongDescription": "Повертає дані про початок кварталу, які містить <code>dateTime</code>.\r\n      <code>dateTime</code> має бути значенням типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити дані про початок кварталу для 10 жовтня 2011 р., 08:00.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Повертає початок тижня.",
        "Documentation.LongDescription": "Повертає дані про початок тижня, які містить <code>dateTime</code>.\r\n    <code>dateTime</code> має бути значенням типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Знайдіть початок тижня для вівторка, 11 жовтня 2011 р.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Знайдіть початок тижня для вівторка, 11 жовтня 2011 р., використовуючи понеділок як початок тижня.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Повертає дані про початок року.",
        "Documentation.LongDescription": "Повертає дані про початок року, які містить <code>dateTime</code>.\r\n    <code>dateTime</code> має бути значенням типу <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити початок року для 10 жовтня 2011 р., 08:10:32.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Повертає запис, що містить частини значення дати.",
        "Documentation.LongDescription": "Повертає запис, що містить частини заданого значення дати <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: значення <code>date</code>, на основі якого слід обчислити запис частин.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Перетворити значення <code>#date(2011, 12, 31)</code> на запис, що містить частини значення дати.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Повертає текстове представлення значення дати.",
        "Documentation.LongDescription": "Повертає текстове подання <code>date</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. <code>culture</code> використовується лише для застарілих робочих циклів. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата форматуватиметься за стандартним значенням, визначеним за полем <code>Culture</code>.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для параметрів <code>options</code> і <code>culture</code> також можна задавати текстові значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>#date(2010, 12, 31)</code> на значення <code>text</code>. <i>Результат може залежати від поточної культури.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Пошук у календарі Хиджра року, який відповідає 1 січня 2000 р. за григоріанським календарем.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Повертає число від 1 до 6, що означає тиждень місяця, на який припадає ця дата.",
        "Documentation.LongDescription": "Повертає число від 1 до 6, що означає тиждень місяця, на який припадає дата <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code> – значення <code>datetime</code>, для якого визначається тиждень місяця.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, на який тиждень березня припадає 15 число у 2011 р.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Повертає число від 1 до 54, яке вказує, на який тиждень року припадає ця дата.",
        "Documentation.LongDescription": "Повертає число від 1 до 54, що вказує тиждень року, на який припадає певна дата (<code>dateTime</code>).\r\n <ul>\r\n        <li><code>dateTime</code>: значення типу <code>datetime</code>, для якого визначається тиждень року.</li>\r\n        <li><code>firstDayOfWeek</code>: необов’язкове значення типу <code>Day.Type</code>, яке визначає перший день нового тижня (наприклад, <code>Day.Sunday</code>). Якщо не вказати це значення, використовується стандартний для культури варіант.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Визначити, на який тиждень року припадає 27 березня 2011 р.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Визначити, на який тиждень року припадає 27 березня 2011 р., якщо новий тиждень починається з понеділка.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Повертає компонент року.",
        "Documentation.LongDescription": "Повертає компонент року заданого значення <code>datetime</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Знайти рік у #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Повертає компонент дати заданого значення date, datetime або datetimezone.",
        "Documentation.LongDescription": "Повертає компонент дати <code>dateTime</code>, заданого значення <code>date</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Пошук значення дати #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Створює дату й час із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>datetime</code> із заданого параметра <code>value</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").\r\nЯкщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>DateTime.From</code> повертає <code>null</code>. Якщо заданий  параметр <code>value</code> має значення <code>datetime</code>, повертається <code>value</code>. Значення таких типів можна перетворити на значення <code>datetime</code>:\r\n      <ul>\r\n        <li><code>text</code>: значення <code>datetime</code> із текстового представлення. Див. опис функції <code>DateTime.FromText</code>, щоб дізнатися більше.</li>\r\n        <li><code>date</code>: значення <code>datetime</code> з <code>value</code> як компонентом дати й<code>12:00:00 AM</code> як компонентом часу.</li>\r\n        <li><code>datetimezone</code>: місцевий еквівалент значення <code>datetime</code> параметра <code>value</code>.</li>\r\n        <li><code>time</code>: значення <code>datetime</code> з еквівалентом дати автоматизації OLE <code>0</code> як компонентом дати й <code>value</code> як компонентом часу.</li>\r\n        <li><code>number</code>: еквівалент значення <code>datetime</code> дати автоматизації OLE, виражений параметром <code>value</code>. </li>\r\n      </ul>\r\nЯкщо параметр <code>value</code> має інше значення, повертається помилка.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>#time(06, 45, 12)</code> на значення <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Перетворити <code>#date(1975, 4, 4)</code> на значення <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Створює дату й час із 64-розрядного числа.",
        "Documentation.LongDescription": "Створює значення <code>datetime</code> зі значення <code>fileTime</code> та перетворює його на значення за місцевим часовим поясом. Filetime – це значення тривалості існування файлу Windows, яке представляє кількість 100-наносекундних інтервалів, які минули після півночі, 12:00, 1 січня 1601 р. нашої ери (від Різдва Христового) за всесвітнім координованим часом (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>129876402529842245</code> на значення дати й часу.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Створює дату й час із часовим поясом із місцевого та всесвітнього форматів дати й часу.",
        "Documentation.LongDescription": "Створює значення типу <code>datetime</code> із текстового подання <code>text</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата аналізуватиметься за найкращим варіантом.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для <code>options</code> також можна задавати текстове значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>\"2010-12-31T01:30:00\"</code> на значення дати й часу.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Перетворення <code>\"2010-12-31T01:30:00.121212\"</code> на значення дати й часу.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Перетворення <code>\"2010-12-31T01:30:00\"</code> на значення дати й часу.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Перетворення <code>\"20101231T013000\"</code> на значення дати й часу.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Указує, чи це значення дати й часу зустрічається протягом поточної години відповідно до поточних дати й часу в системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточної години відповідно до поточних дати й часу в системі. \r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи припадає на поточну годину.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Указує, чи це значення дати й часу зустрічається протягом поточної хвилини відповідно до поточних дати й часу в системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточної хвилини відповідно до поточних дати й часу в системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи припадає на поточну хвилину.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Указує, чи це значення дати й часу зустрічається протягом поточної секунди відповідно до поточних дати й часу в системі.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> зустрічається протягом поточної секунди відповідно до поточних дати й часу в системі.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи поточний час системи припадає на поточну секунду.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на наступну годину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступну годину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи година після поточного системного часу припадає на наступну годину.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на наступну хвилину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступну хвилину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи хвилина після поточного системного часу припадає на наступну хвилину.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на наступну секунду відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на наступну секунду відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи секунда після поточного системного часу припадає на наступну секунду.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на попередню годину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередню годину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну годину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи година до поточного системного часу припадає на попередню годину.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на попередню хвилину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередню хвилину відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну хвилину, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи хвилина до поточного системного часу припадає на попередню хвилину.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Указує, чи це значення дати й часу припадає на попередню секунду відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.",
        "Documentation.LongDescription": "Указує, чи задане значення дати й часу <code>dateTime</code> припадає на попередню секунду відповідно до поточних дати та часу в системі. Зверніть увагу: якщо передане значення припадає на поточну секунду, ця функція повертає відповідь False.\r\n      <ul>\r\n      <li><code>dateTime</code>: значення <code>datetime</code> або <code>datetimezone</code>, яке потрібно оцінити.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи секунда перед поточним системним часом припадає на попередню секунду.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Повертає частину часу заданого значення дати й часу.",
        "Documentation.LongDescription": "Повертає частину часу заданого значення дати й часу, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Пошук значення часу #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Повертає запис, що містить частини значення дати й часу.",
        "Documentation.LongDescription": "Повертає запис, що містить частини заданого значення дати й часу <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: значення <code>datetime</code>, на основі якого слід обчислити запис частин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Перетворити значення <code>#datetime(2011, 12, 31, 11, 56, 2)</code> на запис, що містить значення дати й часу.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Повертає текстове представлення значення дати та часу.",
        "Documentation.LongDescription": "Повертає текстове подання <code>dateTime</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. <code>culture</code> використовується лише для застарілих робочих циклів. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата форматуватиметься за стандартним значенням, визначеним за полем <code>Culture</code>.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для параметрів <code>options</code> і <code>culture</code> також можна задавати текстові значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>#datetime(2010, 12, 31, 01, 30, 25)</code> на значення <code>text</code>. <i>Результат може залежати від поточної культури.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Перетворення з використанням шаблону ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Створює із заданого значення дату й час із часовим поясом.",
        "Documentation.LongDescription": "Повертає значення <code>datetimezone</code> із заданого параметра <code>value</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").\r\nЯкщо параметр <code>value</code> має <code>Null</code>-значення, <code>DateTimeZone.From</code> повертає <code>Null</code>-значення. Якщо параметр <code>value</code> має значення <code>datetimezone</code>, повертається <code>value</code>. Значення таких типів можна перетворити на значення <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code> – значення <code>datetimezone</code> із текстового представлення. Щоб дізнатися більше, див. опис функції <code>DateTimeZone.FromText</code>.</li>\r\n        <li><code>date</code> – значення <code>datetimezone</code>, де <code>value</code> – компонент дати, <code>12:00:00 AM</code> – компонент часу, а зміщення відповідає місцевому часовому поясу.</li>\r\n        <li><code>datetime</code> – значення <code>datetimezone</code>, де <code>value</code> – дата й час, а зміщення відповідає місцевому часовому поясу.</li>\r\n        <li><code>time</code> – значення <code>datetimezone</code>, де еквівалент дати автоматизації OLE <code>0</code> – компонент дати, <code>value</code> – компонент часу, а зміщення відповідає місцевому часовому поясу.</li>\r\n        <li><code>number</code> – значення <code>datetimezone</code>, де еквівалент дати й часу автоматизації OLE виражено <code>value</code>, а зміщення відповідає місцевому часовому поясу.</li>\r\n      </ul>\r\nЯкщо параметр <code>value</code> має інше значення, повертається помилка.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>\"2020-10-30T01:30:00-08:00\"</code> на значення <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Створює з 64-розрядного числа дату й час із часовим поясом.",
        "Documentation.LongDescription": "Створює значення <code>datetimezone</code> зі значення \"<code>fileTime</code>\", а також перетворює його на значення за місцевим часовим поясом. Час файлу – це значення часу для файлу Windows, яке представляє кількість 100-наносекундних інтервалів, які минули після півночі (00:00) 1 січня 1601 р. н. е. (від Різдва Христового) за всесвітнім координованим часом (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>129876402529842245</code> на значення дати й часу з часовим поясом.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Створює дату й час із місцевого, всесвітнього та настроюваного форматів дати й часу з часовим поясом.",
        "Documentation.LongDescription": "Створює значення типу <code>datetimezone</code> із текстового подання <code>text</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата аналізуватиметься за найкращим варіантом.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для <code>options</code> також можна задавати текстове значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>\"2010-12-31T01:30:00-08:00\"</code> на значення <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Перетворення з використанням ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Видаляє інформацію про часовий пояс із заданого значення дати й часу з часовим поясом.",
        "Documentation.LongDescription": "Повертає значення #datetime із <code>dateTimeZone</code> з видаленою інформацією про часовий пояс.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Видалення інформації про часовий пояс із значення #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Перетворює компонент часового поясу на місцевий часовий пояс.",
        "Documentation.LongDescription": "Змінює інформацію про часовий пояс значення дати й часу з часовим поясом <code>dateTimeZone</code> на інформацію про місцевий часовий пояс.\r\n    Якщо <code>dateTimeZone</code> не має компонента часового поясу, додається інформація про місцевий часовий пояс.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Змінення інформації про часовий пояс для #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) на місцевий часовий пояс (для цього прикладу місцевим вважається Тихоокеанський час).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Повертає запис, що містить частини значення дати й часу з часовим поясом.",
        "Documentation.LongDescription": "Повертає запис, що містить частини заданого значення дати й часу з часовим поясом <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: значення <code>datetimezone</code>, на основі якого слід обчислити запис частин.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Перетворити значення <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> на запис, що містить значення дати, часу та часового поясу.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Повертає текстове представлення значення дати та часу з часовим поясом.",
        "Documentation.LongDescription": "Повертає текстове подання <code>dateTimeZone</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. <code>culture</code> використовується лише для застарілих робочих циклів. Параметр типу <code>record</code> може включати в себе такі поля:\r\n<ul>\r\n   <li><code>Format</code> – має значення типу <code>text</code> і слугує, щоб задавати формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або встановити <code>Null</code>-значення, дата форматуватиметься за стандартним значенням, визначеним за полем <code>Culture</code>.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату, зокрема в <code>\"en-US\"</code> <code>\"MMM\"</code> передбачає значення <code>\"Jan\", \"Feb\", \"Mar\", …</code>, а в <code>\"ru-RU\"</code> <code>\"MMM\"</code> – <code>\"янв\", \"фев\", \"мар\", …</code>. Якщо <code>Format</code> має <code>Null</code>-значення, за <code>Culture</code> визначається стандартний формат, який слід використовувати. Якщо <code>Culture</code> має <code>Null</code>-значення або не вказано, використовується функція <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для параметрів <code>options</code> і <code>culture</code> також можна задавати текстові значення. У такому разі відбуватиметься те саме, що й з <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> на значення <code>text</code>. <i>Результат може залежати від поточної культури.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Перетворення з використанням шаблону ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Перетворює компонент часового поясу на часовий пояс UTC.",
        "Documentation.LongDescription": "Змінює інформацію про часовий пояс значення дати й часу <code>dateTimeZone</code> на інформацію про часовий пояс UTC або всесвітній координований час.\r\n    Якщо <code>dateTimeZone</code> не має компонента часового поясу, додається інформація про часовий пояс UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Змінення інформації про часовий пояс для #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) на часовий пояс UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Змінює часовий пояс значення.",
        "Documentation.LongDescription": "Змінює часовий пояс значення.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Змінює часовий пояс значення.",
        "Documentation.LongDescription": "Змінює часовий пояс значення.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Створює десяткове число із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>number</code> десяткової точності із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Decimal.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні десяткової точності, повертається <code>value</code>. Інакше повертається помилка. Якщо параметр <code>value</code> має інший тип, його спочатку буде перетворено на значення <code>number</code> за допомогою функції <code>Number.FromText</code>. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати десяткове значення <code>number</code> зі значення <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Повертає вміст таблиці Delta Lake.",
        "Documentation.LongDescription": "Повертає вміст таблиці Delta Lake.",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Створює число подвійної точності із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>number</code> подвійної точності із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Double.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні подвійної точності, повертається <code>value</code>. Інакше повертається помилка. Якщо параметр <code>value</code> має інший тип, його спочатку буде перетворено на значення <code>number</code> за допомогою функції <code>Number.FromText</code>. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати значення <code>number</code> подвійної точності зі значення <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Повертає денну частину тривалості.",
        "Documentation.LongDescription": "Повертає денну частину <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Видобудьте кількість днів між двома датами.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Створює тривалість із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>duration</code> із заданого <code>value</code>. Якщо задане значення <code>value</code> – <code>null</code>, <code>Duration.From</code> повертає значення <code>null</code>.  Якщо задане значення <code>value</code> – <code>duration</code>, повертається значення <code>value</code>. На значення <code>duration</code> можуть перетворюватися значення вказаних нижче типів.\r\n      <ul>\r\n        <li><code>text</code>: значення <code>duration</code> із текстових форм часу, що минув (д.г:х:с). Докладніші відомості див. в <code>Duration.FromText</code>.</li>\r\n       <li><code>number</code>: значення <code>duration</code>, еквівалентне кількості повних і неповних днів, вираженій значенням <code>value</code>.</li>\r\n      </ul>\r\nЯкщо <code>value</code> належить до будь-якого іншого типу, повертається помилка.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>2.525</code> на значення <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Повертає значення тривалості з текстових форм часу, що минув (d.h:m:s).",
        "Documentation.LongDescription": "Повертає значення тривалості з указаного тексту <code>text</code>. За допомогою цієї функції можна проаналізувати вказані нижче формати.\r\n <ul>\r\n        <li>(-)гг:хх(:сс(.чч)) </li>\r\n        <li>(-)ддд(.гг:хх(:сс(.чч))) </li>\r\n </ul>\r\n        <br>\r\n        (Усі діапазони включають граничні значення)<br>\r\n        ддд: кількість днів.<br>\r\n        гг: кількість годин, від 0 до 23.<br>\r\n        хх: кількість хвилин, від 0 до 59.<br>\r\n        сс: кількість секунд, від 0 до 59.<br>\r\n        чч: частка секунди, від 0 до 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>\"2.05:55:20\"</code> на значення <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Повертає годинну частину тривалості.",
        "Documentation.LongDescription": "Повертає годинну частину <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Видобути години зі значення тривалості.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Повертає хвилинну частину тривалості.",
        "Documentation.LongDescription": "Повертає хвилинну частину <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Видобути хвилини зі значення тривалості.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Повертає секундну частину тривалості.",
        "Documentation.LongDescription": "Повертає секундну частину <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Видобути секунди зі значення тривалості.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Повертає запис, що містить частини тривалості.",
        "Documentation.LongDescription": "Повертає запис, що містить частини значення тривалості <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: значення <code>duration</code>, на основі якого створюється запис.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>#duration(2, 5, 55, 20)</code> на запис її частин, включно із днями, годинами, хвилинами та секундами, якщо доречно.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Повертає текст форми \"d.h:m:s\".",
        "Documentation.LongDescription": "Повертає текстове представлення заданого значення тривалості <code>duration</code> у формі \"день.година:хвилина:секунда\".\r\n <ul>\r\n        <li><code>duration</code>: значення <code>duration</code>, для якого повертається текстове представлення.</li>\r\n  <li><code>format</code>: <i>[Необов’язково]</i> Застарілий параметр, що повертатиме помилку, якщо не дорівнюватиме Null-значенню.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>#duration(2, 5, 55, 20)</code> на текстове значення.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Повертає загальну кількість днів, які охоплює ця тривалість.",
        "Documentation.LongDescription": "Повертає загальну кількість днів, які охоплює <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Знайти загальну кількість днів, які охоплює значення тривалості.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Повертає загальну кількість годин, які охоплює ця тривалість.",
        "Documentation.LongDescription": "Повертає загальну кількість годин, які охоплює <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Знайти загальну кількість годин, які охоплює значення тривалості.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Повертає загальну кількість хвилин, які охоплює ця тривалість.",
        "Documentation.LongDescription": "Повертає загальну кількість хвилин, які охоплює <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Знайти загальну кількість хвилин, які охоплює значення тривалості.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Повертає загальну кількість секунд, які охоплює ця тривалість.",
        "Documentation.LongDescription": "Повертає загальну кількість секунд, які охоплює <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Знайти загальну кількість секунд, які охоплює значення тривалості.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Повертає запис помилки з наданих текстових значень із зазначеними причиною, повідомленням та подробицями.",
        "Documentation.LongDescription": "Повертає запис помилки з наданих текстових значень із зазначеними причиною, повідомленням та подробицями.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Повертає представлення вихідного коду M постійного значення.",
        "Documentation.LongDescription": "Повертає представлення вихідного коду M постійного значення.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Отримайте представлення вихідного коду M числового значення.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Отримайте представлення вихідного коду M значення дати.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Отримайте представлення вихідного коду M текстового значення.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Повертає результат оцінювання виразу M.",
        "Documentation.LongDescription": "Повертає результат оцінювання виразу M <code>document</code> з наявними ідентифікаторами, на які можна посилатися (визначені <code>environment</code>).",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Обчисліть просту суму.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Обчисліть складнішу суму.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Оцініть злиття текстового значення з ідентифікатором.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Повертає представлення вихідного коду M ідентифікатора.",
        "Documentation.LongDescription": "Повертає представлення вихідного коду M ідентифікатора <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Отримайте представлення вихідного коду M ідентифікатора.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Отримайте представлення вихідного коду M ідентифікатора, який містить пробіл.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Повертає вміст указаного файлу у двійковому вигляді.",
        "Documentation.LongDescription": "Повертає вміст файлу <code>path</code> як бінарний. Параметр <code>options</code> зараз призначений лише для внутрішнього використання.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Повертає дані про те, чи вважається певна функція джерелом даних.",
        "Documentation.LongDescription": "Повертає дані про те, чи вважається <code>function</code> джерелом даних.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Перетворює текст, що представляє географічне значення у форматі Well-Known Text (WKT), у структурований запис.",
        "Documentation.LongDescription": "Перетворює текст, що представляє географічне значення у форматі Well-Known Text (WKT), у структурований запис. WKT – це стандартний формат, визначений Відкритим геопросторовим консорціумом (OGC). Це типовий формат серіалізації, який використовують бази даних, зокрема SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Перетворює значення структурованої географічної точки у формат Well-Known Text (WKT).",
        "Documentation.LongDescription": "Перетворює значення структурованої географічної точки у формат Well-Known Text (WKT), визначений Відкритим геопросторовим консорціумом (OGC), а також у формат серіалізації, який використовує багато баз даних, зокрема SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Перетворює текст, що позначає геометричне значення у відомому форматі Well-Known Text (WKT), у структурований запис.",
        "Documentation.LongDescription": "Перетворює текст, що позначає геометричне значення у відомому форматі Well-Known Text (WKT), у структурований запис. WKT – це стандартний формат, визначений Відкритим геопросторовим консорціумом (OGC). Це типовий формат серіалізації, який використовують бази даних, зокрема SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Перетворює значення структурованої геометричної точки у формат Well-Known Text (WKT).",
        "Documentation.LongDescription": "Перетворює значення структурованої геометричної точки у формат Well-Known Text (WKT), визначений Відкритим геопросторовим консорціумом (OGC), а також формат серіалізації, який використовує багато баз даних, зокрема SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Повертає значення GUID для заданого значення.",
        "Documentation.LongDescription": "Повертає значення типу <code>Guid.Type</code> для заданого значення \"<code>value</code>\". Якщо значення \"<code>value</code>\" задано як <code>null</code>, функція <code>Guid.From</code> повертає <code>null</code>. Система перевірятиме, чи значення \"<code>value</code>\" задано в прийнятному форматі. Прийнятні формати наведено в прикладах.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID можна надавати як 32 шістнадцяткові цифри без роздільників.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID можна надавати як 32 шістнадцяткові цифри, розділені дефісами на блоки 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID можна надавати як 32 шістнадцяткові цифри, розділені дефісами та взяті у фігурні дужки.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID можна надавати як 32 шістнадцяткові цифри, розділені дефісами та взяті в дужки.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Створює 16-розрядне ціле число із заданого значення.",
        "Documentation.LongDescription": "Повертає 16-розрядне ціле значення <code>number</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Int16.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні 16-розрядних цілих чисел без дробової частки, повертається <code>value</code>. Якщо наявна дробова частка, число округлюється за вказаним режимом. За замовчуванням використовується режим округлення <code>RoundingMode.ToEven</code>. Якщо <code>value</code> має будь-який інший тип, його спочатку буде перетворено на <code>number</code> за допомогою функції <code>Number.FromText</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати 16-розрядне ціле значення <code>number</code> зі значення <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати 16-розрядне ціле значення <code>number</code> зі значення <code>\"4.5\"</code>, використовуючи режим округлення <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Створює 32-розрядне ціле число із заданого значення.",
        "Documentation.LongDescription": "Повертає 32-розрядне ціле значення <code>number</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Int32.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні 32-розрядних цілих чисел без дробової частки, повертається <code>value</code>. Якщо наявна дробова частка, число округлюється за вказаним режимом. За замовчуванням використовується режим округлення <code>RoundingMode.ToEven</code>. Якщо <code>value</code> має будь-який інший тип, його спочатку буде перетворено на <code>number</code> за допомогою функції <code>Number.FromText</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати 32-розрядне ціле значення <code>number</code> зі значення <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати 32-розрядне ціле значення <code>number</code> зі значення <code>\"4.5\"</code>, використовуючи режим округлення <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Створює 64-розрядне ціле число із заданого значення.",
        "Documentation.LongDescription": "Повертає 64-розрядне ціле значення <code>number</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Int64.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні 64-розрядних цілих чисел без дробової частки, повертається <code>value</code>. Якщо наявна дробова частка, число округлюється за вказаним режимом. За замовчуванням використовується режим округлення <code>RoundingMode.ToEven</code>. Якщо <code>value</code> має будь-який інший тип, його спочатку буде перетворено на <code>number</code> за допомогою функції <code>Number.FromText</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати 64-розрядне значення цілого числа <code>number</code> зі значення <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати 64-розрядне ціле значення <code>number</code> зі значення <code>\"4.5\"</code> за допомогою методу <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Створює 8-розрядне ціле число зі знаком із заданого значення.",
        "Documentation.LongDescription": "Повертає 8-розрядне ціле значення <code>number</code> зі знаком із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Int8.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні 8-розрядних цілих чисел зі знаком без дробової частки, повертається <code>value</code>. Якщо наявна дробова частка, число округлюється за вказаним режимом. За замовчуванням використовується режим округлення <code>RoundingMode.ToEven</code>. Якщо <code>value</code> має будь-який інший тип, його спочатку буде перетворено на <code>number</code> за допомогою функції <code>Number.FromText</code>. Див. опис функції <code>Number.Round</code>, щоб дізнатися про доступні режими округлення. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати 8-розрядне ціле значення <code>number</code> зі знаком зі значення <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати 8-розрядне ціле значення <code>number</code> зі знаком зі значення <code>\"4.5\"</code>, використовуючи режим округлення <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Повертає дерево абстрактного синтаксису (AST) для тіла функції.",
        "Documentation.LongDescription": "<p>Повертає дерево абстрактного синтаксису для тіла функції <code>function</code>, нормалізованої до <i>виразу елемента</i> відповідно до наведених нижче умов:\r\n<ul>\r\n  <li>Це має бути LAMBDA-функція з 1 аргументом.</li>\r\n  <li>Усі посилання на параметр функції замінюються на <code>ItemExpression.Item</code>.</li>\r\n  <li>Дерево абстрактного синтаксису спроститься й міститиме лише вузли таких видів:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Якщо для тіла функції <code>function</code> не можна повернути дерево абстрактного синтаксису як вираз рядка, повертається помилка.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Повертає дерево абстрактного синтаксису для тіла функції <code>each <> null</code>.",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Повертає вміст документа JSON.",
        "Documentation.LongDescription": "Повертає вміст документа JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Виражає задане значення у форматі JSON.",
        "Documentation.LongDescription": "<p>Виражає задане значення <code>value</code> у форматі JSON за допомогою кодування тексту, указаного параметром <code>encoding</code>. Якщо параметр <code>encoding</code> пропущено, використовується кодування UTF8. Значення виражаються, як описано нижче.</p>\r\n <ul>\r\n        <li>Текстові, логічні й Null-значення виражаються як відповідні типи формату JSON.</li>\r\n        <li>Числа виражаються як числа у форматі JSON, за винятком значень <code>#infinity</code>, <code>-#infinity</code> та <code>#nan</code>, які перетворюються на Null-значення.</li>\r\n        <li>Списки виражаються як масиви формату JSON.</li>\r\n        <li>Записи виражаються як об’єкти формату JSON.</li>\r\n        <li>Таблиці виражаються як масив об’єктів.</li>\r\n        <li>Значення \"Дата\", \"Час\", \"Дата й час\", \"Дата, час і часовий пояс\", \"Тривалість\" виражаються як текст за стандартом ISO-8601.</li>\r\n        <li>Двійкові значення виражаються як текст у кодуванні Base 64.</li>\r\n        <li>Для типів і функцій повертається помилка.</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Перетворити комплексне значення на формат JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Перетворює двійкове значення на список текстових значень, розділених розривами рядків. Якщо вказано стиль цитування, розриви рядків можуть відображатися в лапках. Якщо параметр includeLineSeparators має значення true, символи розривів рядків включаються в текст.",
        "Documentation.LongDescription": "Перетворює двійкове значення на список текстових значень, розділених розривами рядків. Якщо вказано стиль цитування, розриви рядків можуть відображатися в лапках. Якщо параметр includeLineSeparators має значення true, символи розривів рядків включаються в текст.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Перетворює текстове значення на список текстових значень, розділених розривами рядків. Якщо параметр includeLineSeparators має значення \"Істина\", то символи розривів рядків включаються в текст.",
        "Documentation.LongDescription": "Перетворює текстове значення на список текстових значень, розділених розривами рядків. Якщо параметр includeLineSeparators має значення \"Істина\", то символи розривів рядків включаються в текст.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (за замовчуванням) використовувати лапки не потрібно.</li>\r\n            <li><code>QuoteStyle.Csv:</code> лапки використовуються відповідно до файлу CSV. Подвійні лапки використовуються для розмежування відповідних областей. Пара подвійних лапок позначає один символ подвійних лапок у межах такої області. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Перетворює список тексту на двійкове значення за допомогою вказаного кодування та lineSeparator. Вказаний lineSeparator додається до кожного рядка.  Якщо не вказано, використовуються символи повернення каретки та перенесення рядка.",
        "Documentation.LongDescription": "Перетворює список тексту на двійкове значення за допомогою вказаного кодування та lineSeparator. Вказаний lineSeparator додається до кожного рядка.  Якщо не вказано, використовуються символи повернення каретки та перенесення рядка.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Перетворює список тексту на єдиний текст.  Вказаний lineSeparator додається до кожного рядка.  Якщо не вказано, використовуються символи повернення каретки та перенесення рядка.",
        "Documentation.LongDescription": "Перетворює список тексту на єдиний текст.  Вказаний lineSeparator додається до кожного рядка.  Якщо не вказано, використовуються символи повернення каретки та перенесення рядка.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Повертає значення true, якщо всі вирази мають значення true.",
        "Documentation.LongDescription": "Повертає значення true, якщо всі вирази у списку <code>list</code> мають значення true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи всі вирази у списку {true, true, 2 > 0} мають значення true.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи всі вирази у списку {true, true, 2 < 0} мають значення true.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Повертає значення true, якщо будь-який вираз має значення true.",
        "Documentation.LongDescription": "Повертає значення true, якщо будь-який вираз у списку <code>list</code> має значення true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи будь-який із виразів у списку {true, false, 2 > 0} має значення true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи будь-який із виразів у списку {2 = 0, false, 2 < 0} має значення true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Повертає середнє значення. Працює зі значеннями числа, дати, дати й часу, дати й часу з часовим поясом і тривалості.",
        "Documentation.LongDescription": "Повертає середнє значення для елементів у списку, <code>list</code>. Результат видається в тому ж типі даних, що й значення у списку. Працює тільки зі значеннями числа, дати, часу, дати й часу, дати й часу з часовим поясом і тривалості.\r\n    Якщо список пустий, повертається Null-значення.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Знайти середнє значення списку чисел, <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Знайти середнє значення дат 1 січня 2011 р., 2 січня 2011 р. і 3 січня 2011 р.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Буферизує список.",
        "Documentation.LongDescription": "Буферизує список <code>list</code> у пам'яті. Результатом цього виклику є стабільний список.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Створити стабільну копію списку {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Повертає єдиний список шляхом об'єднання кількох списків.",
        "Documentation.LongDescription": "Бере список списків, <code>lists</code>, і об'єднує їх у єдиний новий список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Об'єднати два простих списки {1, 2} і {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Об'єднати два списки, {1, 2} і {3, {4, 5}}, один з яких містить вкладений список.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Повертає кількість елементів у списку.",
        "Documentation.LongDescription": "Повертає кількість елементів у списку <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість значень у списку {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Повертає список значень без видалених повторів.",
        "Documentation.LongDescription": "Повертає список, який містить усі значення у списку <code>list</code> без видалених повторів. Якщо список пустий, результатом буде пустий список.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Видалити повтори зі списку {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Повертає перше значення зі списку або вказане за замовчуванням, якщо список пустий.",
        "Documentation.LongDescription": "Повертає перший елемент у списку <code>list</code> або додаткове значення за замовчуванням, <code>defaultValue</code>, якщо список пустий.\r\n    Якщо список пустий і значення за замовчуванням не вказане, функція повертає <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти перше значення у списку {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Знайти перше значення у списку {}. Якщо список пустий, повернути -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Повертає перетин значень списку, знайдених у вхідних даних.",
        "Documentation.LongDescription": "Повертає перетин значень, знайдених у вхідному списку <code>lists</code>. Можна вказати додатковий параметр <code>equationCriteria</code>.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти перетин списків {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Вказує, чи список містить повтори.",
        "Documentation.LongDescription": "Повертає логічне значення, чи список <code>list</code> містить повтори; <code>true</code> – якщо список містить тільки унікальні значення, <code>false</code> – якщо список містить повтори. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи список {1, 2, 3} містить тільки унікальні значення (тобто не містить повторів).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи список {1, 2, 3, 3} містить тільки унікальні значення (тобто не містить повторів).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Повертає значення true, якщо список пустий.",
        "Documentation.LongDescription": "Повертає значення <code>true</code>, якщо список, <code>list</code>, не містить значень (довжина 0). Якщо список містить значення (довжина > 0), повертає значення <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи список {} пустий.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи список {1, 2} пустий.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Повертає останнє значення у списку або вказане за замовчуванням, якщо список пустий.",
        "Documentation.LongDescription": "Повертає останній елемент списку <code>list</code> або додаткове значення за замовчуванням, <code>defaultValue</code>, якщо список пустий.\r\n    Якщо список пустий і значення за замовчуванням не вказане, функція повертає <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти останнє значення у списку {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Знайти останнє значення у списку {} або повернути -1, якщо список пустий.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Повертає останнє значення у списку.  Можна додатково вказати кількість значень, які необхідно повернути, або описову умову.",
        "Documentation.LongDescription": "Повертає останній елемент списку <code>list</code>. Якщо список пустий, створюється виняток.\r\n Ця функція приймає додатковий параметр, <code>countOrCondition</code>, для підтримки збирання кількох елементів або фільтрування елементів. <code>countOrCondition</code> можна вказати трьома способами.\r\n <ul>\r\n  <li>Якщо вказано кількість, повертається елементів не більше, ніж указано. </li>\r\n  <li>Якщо вказано умову, повертаються всі елементи, які спочатку задовольняють цій умові, починаючи з кінця списку. Як тільки один елемент не задовольняє умові, наступні елементи не розглядаються. </li>\r\n  <li>Якщо цей параметр має Null-значення, повертається останній елемент у списку.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти останнє значення у списку {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Знайти останні значення у списку {3, 4, 5, -1, 7, 8, 2}, які більші 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Повертає максимальне значення або значення за замовчуванням для пустого списку.",
        "Documentation.LongDescription": "Повертає максимальний елемент у списку <code>list</code> або додаткове стандартне значення <code>default</code>, якщо список пустий.\r\n    Можна вказати додаткове значення comparisonCriteria <code>comparisonCriteria</code>, щоб визначити, як порівнювати елементи в списку. Якщо цей параметр має Null-значення, використовується стандартний засіб порівняння.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти максимальне значення у списку {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Знайти максимальне значення у списку {} або повернути -1, якщо список пустий. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Повертає серединне значення у списку.",
        "Documentation.LongDescription": "Повертає медіанний елемент списку <code>list</code>. Ця функція повертає <code>null</code>, якщо список не містить значень, відмінних від <code>null</code>-значення.\r\n    Для парної кількості елементів функція вибирає менший із двох серединних елементів. Якщо ж список\r\n    складається тільки зі значень \"Дата й час\", \"Тривалість\", \"Число\" або \"Час\", функція повертає середнє двох елементів.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти серединний елемент списку <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Повертає мінімальне значення або значення за замовчуванням для пустого списку.",
        "Documentation.LongDescription": "Повертає мінімальний елемент списку <code>list</code> або додаткове стандартне значення <code>default</code>, якщо список пустий.\r\n    Можна вказати додаткове значення comparisonCriteria <code>comparisonCriteria</code>, щоб визначити, як порівнювати елементи в списку. Якщо цей параметр має Null-значення, використовується стандартний засіб порівняння.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Знайти мінімальне значення у списку {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Знайти мінімальне значення у списку {} або повернути -1, якщо список пустий. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Повертає найчастіше значення у списку.",
        "Documentation.LongDescription": "Повертає елемент, який найчастіше зустрічається в списку (<code>list</code>). Якщо список пустий, повертається виняткова ситуація. Якщо з тією ж максимальною частотою зустрічається кілька елементів, вибирається останній.\r\n    Можна вказати додаткове значення <code>comparisonCriteria</code> (<code>equationCriteria</code>), щоб керувати перевіркою на рівність. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Знайти елемент, який найчастіше зустрічається у списку <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Знайти елемент, який найчастіше зустрічається у списку <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Повертає список найчастіших значень у списку.",
        "Documentation.LongDescription": "Повертає елемент, який найчастіше зустрічається в списку (<code>list</code>). Якщо список пустий, повертається виняткова ситуація. Якщо з тією ж максимальною частотою зустрічається кілька елементів, вибирається останній.\r\n    Можна вказати додаткове значення <code>comparisonCriteria</code> (<code>equationCriteria</code>), щоб керувати перевіркою на рівність. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Знайти елементи, які найчастіше зустрічаються у списку <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Повертає кількість ненульових елементів у списку.",
        "Documentation.LongDescription": "Повертає кількість ненульових елементів у списку <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Повертає список зсувів для вхідного списку.",
        "Documentation.LongDescription": "Повертає список зсувів для вхідного списку <code>list</code>.\r\n    Список позицій забезпечує доступ до позицій, коли список змінюється за допомогою функції List.Transform.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти зсуви значень у списку {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Повертає добуток чисел у списку.",
        "Documentation.LongDescription": "Повертає добуток ненульових чисел у списку, <code>numbersList</code>. Повертає null, якщо у списку немає ненульових значень.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Знайти добуток чисел у списку <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Повертає список випадкових чисел.",
        "Documentation.LongDescription": "Повертає список випадкових чисел від 0 до 1. Можна вказати кількість значень, які потрібно повернути, і початкове значення (необов’язково).\r\n<ul>\r\n   <li><code>count</code>: кількість випадкових значень, які слід створити.</li>\r\n   <li><code>seed</code>: <i>[необов’язково]</i> число, яке вказує генератору випадкових чисел початкове значення. Якщо пропущено, кожен виклик функції повертає унікальний список випадкових чисел. Якщо вказати цей параметр, кожен виклик функції створює той самий список випадкових чисел.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Створити список із 3 випадкових чисел.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Створити список із 3 випадкових чисел з указаним початковим значенням.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Повертає список, який пропускає вказану кількість елементів на початку списку.",
        "Documentation.LongDescription": "Повертає список, у якому вилучено перший елемент списку <code>list</code>. Якщо <code>list</code> – пустий список, повертається пустий список.\r\nЦя функція приймає необов’язковий параметр, <code>countOrCondition</code>, щоб підтримувати вилучення кількох значень, як указано нижче.\r\n <ul>\r\n <li>Якщо вказано певну кількість елементів, вилучається не більше вказаної кількості. </li>\r\n <li>Якщо вказано умову, вилучаються всі відповідні послідовні елементи на початку <code>list</code>.</li>\r\n <li>Якщо цей параметр має Null-значення, спостерігатиметься стандартна поведінка. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список із {1, 2, 3, 4, 5} без перших трьох чисел.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Створити список із {5, 4, 2, 6, 1}, який починається з числа, меншого 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Повертає список, який видаляє вказану кількість елементів із кінця списку.",
        "Documentation.LongDescription": "Повертає список, у якому вилучено кілька останніх елементів (<code>countOrCondition</code>) з кінця списку <code>list</code>. Якщо кількість елементів у <code>list</code> менше <code>countOrCondition</code>, повертається пустий список.\r\n <ul>\r\n <li>Якщо вказано певну кількість елементів, вилучається не більше вказаної кількості. </li>\r\n <li>Якщо вказано умову, вилучаються всі відповідні послідовні елементи в кінці <code>list</code>.</li>\r\n <li>Якщо цей параметр має Null-значення, вилучається лише один елемент. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список із {1, 2, 3, 4, 5} без останніх 3 чисел.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Створити список із {5, 4, 2, 6, 4}, який закінчується з числа, меншого 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Видаляє всі значення \"null\" із зазначеного списку.",
        "Documentation.LongDescription": "Видаляє всі входження значень \"null\" у списку <code>list</code>. Якщо у списку немає значень \"null\", повертається вихідний список.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Видалити всі значення \"null\" зі списку {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Змінює порядок значень у списку.",
        "Documentation.LongDescription": "Повертає список зі значеннями списку <code>list</code> у зворотному порядку.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Створити список із {1..10} у зворотному порядку.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Повертає один елемент списку для списку довжиною 1, у протилежному випадку повертає виняткову ситуацію.",
        "Documentation.LongDescription": "Якщо список <code>list</code> містить тільки один елемент, повертає цей елемент.\r\n    Якщо список містить більше одного елемента або пустий, функція повертає виняткову ситуацію.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти одне значення у списку {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Знайти одне значення у списку {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Повертає один елемент списку для списку довжиною 1 і значення за замовчуванням для пустого списку.",
        "Documentation.LongDescription": "Якщо список <code>list</code> містить тільки один елемент, повертає цей елемент.\r\n    Якщо список пустий, функція повертає Null-значення, якщо не вказано додаткове значення <code>default</code>. Якщо список містить більше одного елемента, функція повертає помилку.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти одне значення у списку {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Знайти одне значення у списку {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Знайти одне значення у списку {}. Якщо список пустий, повернути -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Повертає список, який пропускає вказану кількість елементів на початку списку.",
        "Documentation.LongDescription": "Повертає список, у якому пропущено перший елемент списку <code>list</code>. Якщо <code>list</code> – пустий список, повертається пустий список.\r\nЦя функція приймає необов’язковий параметр, <code>countOrCondition</code>, щоб підтримувати пропуск кількох значень, як указано нижче.\r\n <ul>\r\n <li>Якщо вказано певну кількість елементів, пропускається не більше вказаної кількості. </li>\r\n <li>Якщо вказано умову, вилучаються всі відповідні послідовні елементи на початку <code>list</code>.</li>\r\n <li>Якщо цей параметр має Null-значення, спостерігатиметься стандартна поведінка. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Створити список із {1, 2, 3, 4, 5} без перших трьох чисел.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Створити список із {5, 4, 2, 6, 1}, який починається з числа, меншого 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Сортує список даних відповідно до вказаних критеріїв.",
        "Documentation.LongDescription": "Сортує список даних <code>list</code> відповідно до вказаних додаткових умов.\r\n    Можна вказати додатковий параметр <code>comparisonCriteria</code> як умову порівняння. Він може приймати наведені нижче значення.\r\n    <ul>\r\n    <li> Для керування порядком як умову порівняння можна вказати значення порядку перелічення (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Щоб обчислити ключ для сортування, можна використати функцію з 1 аргументом. </li>\r\n    <li> Щоб вибрати ключ і контролювати порядок, умову порівняння можна вказати як список із ключем і значенням порядку (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Щоб повністю контролювати порівняння, можна використати функцію з 2 аргументами. Цій функції буде передано два елементи зі списку (будь-які два елементи в будь-якому порядку). Функція має повернути одне з наведених нижче значень:\r\n        <ul>\r\n            <li> <code>-1</code>: перший елемент менше другого елемента.</li>\r\n            <li> <code>0</code>: елементи рівні.</li>\r\n            <li> <code>1</code>: перший елемент більше другого елемента.</li>\r\n        </ul>\r\n        Для делегування цієї логіки можна використати метод Value.Compare. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Сортувати список {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Сортувати список {2, 3, 1} за спаданням.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Сортувати список {2, 3, 1} за спаданням, використовуючи метод Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Повертає оцінку стандартного відхилення на основі зразка.",
        "Documentation.LongDescription": "Повертає обчислення стандартного відхилення значень у списку <code>numbersList</code> на основі зразка.\r\n    Якщо <code>numbersList</code> – список чисел, повертається число.\r\n    Для пустого списку або списку елементів, які не належать до типу <code>number</code>, повертається виняткова ситуація.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Знайти стандартне відхилення чисел від 1 до 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Повертає суму елементів у списку.",
        "Documentation.LongDescription": "Повертає суму ненульових значень у списку, <code>list</code>.  Повертає null, якщо у списку немає ненульових значень.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Знайти суму чисел у списку <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Повертає об'єднання значень списку, знайдених у вхідних даних.",
        "Documentation.LongDescription": "Бере список списків <code>lists</code>, об’єднує елементи в окремі списки та повертає їх у вихідному списку. У результаті повертається список, який містить усі елементи будь-яких вхідних списків.\r\n    Ця операція підтримує традиційну мультимножинну семантику, тому повтори значень зіставляються в рамках об’єднання.\r\n    Можна вказати додаткове значення умов рівняння <code>equationCriteria</code>, щоб керувати перевіркою на рівність. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Створити об'єднання списків {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Повертає список списків, поєднуючи елементи в тому ж положенні в кількох списках.",
        "Documentation.LongDescription": "Приймає список списків (<code>lists</code>) і повертає список списків, поєднуючи елементи в тому ж положенні.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Запаковує два прості списки: {1, 2} і {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Запаковує два прості списки різної довжини: {1, 2} і {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Створює логічне значення із заданого.",
        "Documentation.LongDescription": "Повертає значення <code>logical</code> із заданого значення <code>value</code>. Якщо задане значення <code>value</code> – <code>null</code>, <code>Logical.From</code> повертає значення <code>null</code>.  Якщо задане значення <code>value</code> – <code>logical</code>, повертається значення <code>value</code>. На значення <code>logical</code> можуть перетворюватися значення вказаних нижче типів.\r\n      <ul>\r\n                <li><code>text</code>: значення <code>logical</code> із текстового значення, <code>\"true\"</code> або <code>\"false\"</code>. Докладніші відомості див. в <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code> – якщо <code>value</code> дорівнює <code>0</code>, <code>true</code> – в іншому випадку.</li>\r\n      </ul>\r\nЯкщо <code>value</code> належить до будь-якого іншого типу, повертається помилка.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>2</code> на значення <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Створює логічне значення з текстових значень \"true\" і \"false\".",
        "Documentation.LongDescription": "Створює логічне значення з текстового значення <code>text</code>, \"true\" або \"false\". Якщо <code>text</code> містить інший рядок, повертається виняткова ситуація. Текстове значення <code>text</code> нечутливе до регістру.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Створити логічне значення з текстового рядка \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Створити логічне значення з текстового рядка \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Повертає текст \"true\" або \"false\" по заданому логічному значенню.",
        "Documentation.LongDescription": "Створює текстове значення з логічного значення <code>logicalValue</code>, <code>true</code> або <code>false</code>. Якщо <code>logicalValue</code> не є логічним значенням, повертається виняткова ситуація.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Створити текстове значення з логічного <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Повертає абсолютне значення числа.",
        "Documentation.LongDescription": "Повертає абсолютну величину значення <code>number</code>. Якщо <code>number</code> має Null-значення, функція <code>Number.Abs</code> повертає Null-значення.\r\n    <ul>\r\n        <li><code>number</code>: значення <code>number</code>, для якого потрібно обчислити абсолютну величину.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Абсолютне значення від -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Повертає арккосинус числа.",
        "Documentation.LongDescription": "Повертає арккосинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Повертає арксинус числа.",
        "Documentation.LongDescription": "Повертає арксинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Повертає арктангенс числа.",
        "Documentation.LongDescription": "Повертає арктангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Повертає байт, в якому кожен біт протилежний до вхідних даних.",
        "Documentation.LongDescription": "Повертає результат виконання побітової операції \"НЕ\" з <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Повертає косинус числа.",
        "Documentation.LongDescription": "Повертає косинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Знайти косинус кута 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Повертає гіперболічний косинус числа.",
        "Documentation.LongDescription": "Повертає гіперболічний косинус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Підносить e до заданого степеню.",
        "Documentation.LongDescription": "Повертає результат піднесення e до <code>number</code> степеня (експоненційна функція).\r\n      <ul>\r\n        <li><code>number</code>: значення <code>number</code>, для якого обчислюється експоненційна функція. Якщо <code>number</code> має Null-значення, функція <code>Number.Exp</code> повертає Null-значення. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Піднести e до 3 степеню.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Повертає факторіал числа.",
        "Documentation.LongDescription": "Повертає факторіал числа <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти факторіал числа 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Створює число від заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>number</code> із заданого параметра <code>value</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").\r\nЯкщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Number.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code>, повертається <code>value</code>. Значення таких типів можна перетворити на значення <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: значення <code>number</code> з текстового представлення. Обробляються типові текстові формати (\"15\", \"3423,10\", \"5,0E-10\"). Див. опис функції <code>Number.FromText</code>, щоб дізнатися більше.</li>\r\n        <li><code>logical</code>: 1 – <code>true</code>, 0 – <code>false</code>.</li>\r\n        <li><code>datetime</code>: число подвійної точності з рухомою комою, що містить еквівалент дати автоматизації OLE.</li>\r\n        <li><code>datetimezone</code>: число подвійної точності з рухомою комою, яке містить еквівалент дати автоматизації OLE місцевих дати й часу параметра <code>value</code>.</li>\r\n        <li><code>date</code>: число подвійної точності з рухомою комою, що містить еквівалент дати автоматизації OLE.</li>\r\n        <li><code>time</code>: виражається в неповних днях.</li>\r\n        <li><code>duration</code>: виражається в повних і неповних днях.</li>\r\n      </ul>\r\nЯкщо параметр <code>value</code> має інше значення, повертається помилка.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати <code>number</code> значення <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати <code>number</code> значення <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Отримати значення типу <code>number</code> зі значення <code>\"12,3%\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Створює числа з поширених текстових форматів (\"15\", \"3 423,10\", \"5,0E-10\").",
        "Documentation.LongDescription": "Повертає <code>число</code> із заданого текстового значення параметра <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: текстове представлення числового значення. Представлення має бути в типовому числовому форматі: \"15\", \"3 423,10\", \"5.0E-10\".</li>\r\n  <li><code>culture</code>: необов‘язкова культура, що контролює, як інтерпретується параметр <code>text</code> (наприклад, \"uk-UA\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати числове значення від <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Отримати числове значення від <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Вказує, чи значення парне.",
        "Documentation.LongDescription": "Вказує, чи значення, <code>number</code>, парне, повертаючи значення <code>true</code>, якщо воно парне, і значення <code>false</code> – у протилежному випадку.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи 625 – парне число.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Перевірити, чи 82 – парне число.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Вказує, чи значення є не числом.",
        "Documentation.LongDescription": "Вказує, чи значення є не числом. Повертає значення <code>true</code>, якщо <code>number</code> еквівалентно <code>Number.IsNaN</code>, і значення <code>false</code> – у протилежному випадку.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи 0 поділено на 0 є не числом.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Перевірити, чи 1 поділено на 0 є не числом.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Вказує, чи значення непарне.",
        "Documentation.LongDescription": "Вказує, чи значення непарне. Повертає значення <code>true</code>, якщо <code>number</code> –непарне число, і значення <code>false</code> – у протилежному випадку.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Перевірити, чи 625 – непарне число.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Перевірити, чи 82 – непарне число.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Повертає натуральний логарифм числа.",
        "Documentation.LongDescription": "Повертає натуральний логарифм числа <code>number</code>. Якщо <code>number</code> має Null-значення, функція <code>Number.Ln</code> повертає Null-значення.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Отримати натуральний логарифм числа 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Повертає логарифм числа до вказаної основи (e за замовчуванням).",
        "Documentation.LongDescription": "Повертає логарифм числа (<code>number</code>) за вказаною основою (<code>base</code>). Якщо параметр <code>base</code> не вказано, використовується стандартне значення Number.E.\r\n    Якщо параметр <code>number</code> має Null-значення, функція <code>Number.Log</code> повертає Null-значення.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Отримати логарифм числа 2 за основою 10.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Отримати логарифм числа 2 за основою e.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Повертає логарифм числа за основою 10.",
        "Documentation.LongDescription": "Повертає логарифм числа <code>number</code> за основою 10. Якщо параметр <code>number</code> має Null-значення, функція <code>Number.Log10</code> повертає Null-значення.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Отримати логарифм числа 2 за основою 10.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Повертає округлене число. Можна вказати кількість цифр і метод округлення.",
        "Documentation.LongDescription": "Повертає результат округлення <code>number</code> до найближчого числа. Якщо <code>number</code> має Null-значення, <code>Number.Round</code> повертає нуль.<br>\r\n      <br>\r\n      За замовчуванням <code>number</code> округлюється до найближчого цілого числа, а неоднозначність усувається шляхом округлення до найближчого парного числа (за допомогою функції <code>RoundingMode.ToEven</code>, що також відомо як банківське округлення).<br>\r\n      <br>\r\n      Проте наведені далі додаткові параметри можуть перезаписувати ці параметри за замовчуванням.\r\n      <ul>\r\n        <li><code>digits</code> – округлює <code>number</code> до вказаної кількості десяткових розрядів.</li>\r\n        <li><code>roundingMode</code> – змінює поведінку усунення неоднозначностей за замовчуванням, коли <code>number</code> відповідає середній точці в проміжку між двома потенційними округленими значеннями\r\n      (можливі значення див. за <code>RoundingMode.Type</code>).</li>\r\n       </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлити 1,234 до найближчого цілого числа.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Округлити 1,56 до найближчого цілого числа.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Округлити 1,2345 до двох знаків після коми.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Округлити 1,2345 до трьох знаків після коми (Округлення в більшу сторону).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Округлити 1,2345 до трьох знаків після коми (Округлення в меншу сторону).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Повертає результат округлення додатних чисел у більшу сторону та від'ємних – у меншу. Кількість десяткових знаків можна вказувати.",
        "Documentation.LongDescription": "Повертає результат округлення значення аргументу \"<code>number</code>\" на основі знаку числа. Ця функція округлює додатні числа в більшу сторону та від'ємні – у меншу.\r\n    Якщо вказано аргумент \"<code>digits</code>\", значення аргументу \"<code>number</code>\" округлюється до числа з такою кількістю десяткових знаків, яку виражає значення аргументу \"<code>digits</code>\".\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлити число -1,2 у напрямку від нуля.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Округлити число 1,2 у напрямку від нуля.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Округлення числа –1,234 до числа з двома десятковими знаками в меншу сторону.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Повертає попереднє найбільше число. Кількість десяткових знаків можна вказувати.",
        "Documentation.LongDescription": "Повертає результат округлення значення аргументу \"<code>number</code>\" у меншу сторону до попереднього найбільшого цілого числа. Якщо аргумент \"<code>number</code>\" має Null-значення, ця функція повертає Null-значення.\r\n\r\n    Якщо вказано аргумент \"<code>digits</code>\", значення аргументу \"<code>number</code>\" округлюється до числа з вказаною кількістю десяткових знаків.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлити 1,234 в меншу сторону до цілого числа.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Округлити 1,999 в меншу сторону до цілого числа.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Округлення числа 1,999 до числа з двома десятковими знаками в меншу сторону.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Повертає результат округлення додатних чисел у меншу сторону та від'ємних – у більшу. Кількість десяткових знаків можна вказувати.",
        "Documentation.LongDescription": "Повертає результат округлення значення аргументу \"<code>number</code>\" на основі знаку числа. Ця функція округлює додатні числа в меншу сторону та від'ємні – у більшу.\r\n    Якщо вказано аргумент \"<code>digits</code>\", значення аргументу \"<code>number</code>\" округлюється до числа з такою кількістю десяткових знаків, яку виражає значення аргументу \"<code>digits</code>\".\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлити число -1,2 у напрямку до нуля.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Округлити число 1,2 у напрямку до нуля.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Округлення числа –1,234 до числа з двома десятковими знаками в більшу сторону.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Повертає наступне найбільше число. Кількість десяткових знаків можна вказувати.",
        "Documentation.LongDescription": "Повертає результат округлення значення аргументу \"<code>number</code>\" у більшу сторону до наступного найбільшого цілого числа. Якщо аргумент \"<code>number</code>\" має Null-значення, ця функція повертає Null-значення.\r\n    Якщо вказано аргумент \"<code>digits</code>\", значення аргументу \"<code>number</code>\" округлюється до числа з вказаною кількістю десяткових знаків.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Округлити 1,234 у більшу сторону до цілого числа.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Округлити 1,999 у більшу сторону до цілого числа.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Округлення числа 1,234 до числа з двома десятковими знаками в більшу сторону.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Повертає 1 – якщо число додатне, -1 – якщо число від'ємне, і 0 – якщо число нуль.",
        "Documentation.LongDescription": "Повертає 1, якщо <code>number</code> – додатне число, -1 – якщо від’ємне число, і 0 – якщо нуль.\r\n    Якщо <code>number</code> має Null-значення, <code>Number.Sign</code> повертає Null-значення.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Визначити знак 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Визначити знак -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Визначити знак 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Повертає синус числа.",
        "Documentation.LongDescription": "Повертає синус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Знайти синус кута 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Повертає гіперболічний синус числа.",
        "Documentation.LongDescription": "Повертає гіперболічний синус <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Повертає корінь квадратний числа.",
        "Documentation.LongDescription": "Повертає корінь квадратний <code>number</code>.\r\n    Якщо <code>number</code> має Null-значення, <code>Number.Sqrt</code> повертає Null-значення. Якщо це від’ємне значення, повертається <code>Number.NaN</code> (не число).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти корінь квадратний 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Знайти корінь квадратний 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Повертає тангенс числа.",
        "Documentation.LongDescription": "Повертає тангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Знайти тангенс кута 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Повертає гіперболічний тангенс числа.",
        "Documentation.LongDescription": "Повертає гіперболічний тангенс <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Перетворює задане число на текст.",
        "Documentation.LongDescription": "Перетворює числове значення <code>number</code> на текстове відповідно до формату, визначеного <code>format</code>.<br>\r\n    <br>\r\n    Формат – це текстове значення, що вказує на спосіб перетворення числа. Щоб дізнатися більше про підтримувані значення формату, перейдіть на сторінку https://go.microsoft.com/fwlink/?linkid=2241210 та https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Крім того, можна додаткового вказати <code>culture</code> (наприклад, \"uk-UA\"), щоб керувати залежною від культури поведінкою <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Перетворення числа на текст без визначення формату.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Перетворення числа на експонентний формат.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Перетворення числа у відсотковий формат лише з одним десятковим розрядом.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Повертає таблицю каналів OData, пропонованих службою OData.",
        "Documentation.LongDescription": "Повертає таблицю каналів OData, які пропонує служба OData, з ресурсу за параметрами URI <code>serviceUri</code> і заголовків <code>headers</code>. За допомогою логічного значення можна вказати, чи використовувати одночасні підключення. До того ж можна задати додатковий параметр <code>options</code> типу запису, щоб керувати такими:\r\n    <ul>\r\n    <li><code>Query</code> – дає змогу програмно додавати параметри запиту до URL-адреси без необхідності додавати символи виходу.</li>\r\n    <li><code>Headers</code> – слугує, щоб задавати додаткові заголовки для HTTP-запиту за допомогою значення типу запису.</li>\r\n    <li><code>ExcludedFromCacheKey</code> – дає змогу вказувати значення у вигляді списку, щоб виключати ключі заголовків HTTP з обсягу обчислення кешованих даних.</li>\r\n    <li><code>ApiKeyName</code> – якщо цільовий сайт має певне позначення ключа API, за допомогою цього параметра можна задати ім’я (не значення) параметра ключа, що слід застосувати в URL-адресі. Фактичне значення ключа вказується в облікових даних.</li>\r\n    <li><code>Timeout</code> – дає змогу задати значення як тривалість і змінити час очікування для HTTP-запиту. Стандартне значення – 600 секунд.</li>\r\n    <li><code>EnableBatch</code> – має логічне значення (true або false), що дає змогу визначити, чи дозволяти створення запиту на пакет OData $batch, якщо перевищено значення параметра MaxUriLength (стандартне значення – false).</li>\r\n    <li><code>MaxUriLength</code> – параметр числа, що відповідає максимальній дозволеній довжині ідентифікатора URI, що надсилається до служби OData. Якщо це значення перевищується, а параметр EnableBatch має значення true, надсилається запит до кінцевої точки пакета OData $batch. В іншому разі повертається помилка. Стандартне значення цього параметра – 2048.</li>\r\n    <li><code>Concurrent</code> – має логічне значення (true або false). Якщо задано значення true, запити надсилатимуться до служби одночасно. Якщо встановлено значення false, запити надсилатимуться послідовно. Якщо значення не вказано, воно визначається за допомогою анотації служби AsynchronousRequestsSupported. Якщо в службі не визначається, чи підтримується анотація AsynchronousRequestsSupported, запити надсилаються послідовно.</li>\r\n    <li><code>ODataVersion</code> – має числове значення (3 або 4), яке відповідає версії протоколу OData, що слід використовувати із цією службою OData. Якщо значення не задано, надсилається запит на всі підтримувані версії. Версія служби визначатиметься за заголовком OData-Version, який поверне служба.</li>\r\n    <li><code>FunctionOverloads</code> – має логічне значення (true або false). Якщо вказано значення true, дані про перевантаження імпорту функцій перелічуватимуться в засобі навігації як окремі записи. Якщо задано значення false, вони зазначатимуться в засобі навігації як одна об’єднана функція. Стандартне значення для версії 3 – false, для версії 4 – true.</li>\r\n    <li><code>MoreColumns</code> – має логічне значення (true або false). Якщо вказано значення true, до кожного каналу сутності з відкритими й поліморфними типами додається стовпець \"Додаткові стовпці\". Він міститиме поля, не оголошені в базовому типі. Якщо задано значення false, цього поля немає. Стандартне значення – false.</li>\r\n    <li><code>IncludeAnnotations</code> – дає змогу вказати розділений комами список імен умов або шаблонів (припустимих для простору імен), які потрібно включити. Символ \"*\" застосовується для узагальнення. За замовчуванням анотації не включаються.</li>\r\n    <li><code>IncludeMetadataAnnotations</code> – слугує, щоб зазначати розділений комами список імен умов або шаблонів (припустимих для простору імен), які слід включити в запити на документ метаданих. Символ \"*\" застосовується для узагальнення. За замовчуванням включаються ті самі анотації, що й за IncludeAnnotations.</li>\r\n    <li><code>OmitValues</code> – дає змогу дозволити службі OData уникати записування певних значень у відповідях. За підтвердження від служби ці значення виводитимуться з пропущених полів. Можливий параметр\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> – слугує, щоб дозволити службі OData пропускати Null-значення.</li>\r\n      </ul>\r\n    </li>\r\n    <li><code>Implementation</code> – дає змогу визначати впровадження з’єднувача OData, який потрібно використовувати. Припустимі значення – \"2.0\" або Null-значення.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Підключення до служби OData TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Повертає результат спроби виснувати можливості SQL для драйвера ODBC.",
        "Documentation.LongDescription": "Повертає результат спроби виснувати можливості SQL за рядком підключення \"<code>connectionString</code>\" за допомогою ODBC. Параметр \"<code>connectionString</code>\" може бути текстом або записом пар \"властивість-значення\". Значення властивостей можуть бути текстові або числові.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Повернення логічно виведених можливостей SQL для рядка підключення.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Повертає вміст документа Parquet у вигляді таблиці.",
        "Documentation.LongDescription": "Повертає вміст документа Parquet як таблицю. Доступні параметри:\n    <ul>\n    <li> <code>TypeMapping</code> – текстове значення, що слугує, щоб контролювати зіставлення типів за замовчуванням під час читання та записування файлів. Стандартне значення – Null. Воно використовується, щоб спробувати зберегти якомога точнішу відповідність вихідному типу. Значення \"Sql\" дасть змогу отримати результати, найсумісніші з SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Повертає значення відсотка від заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>percentage</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Percentage.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>text</code> зі знаком відсотка в кінці, повертається перетворене десяткове число. Інакше значення буде перетворено на <code>number</code> за допомогою функції <code>Number.From</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати значення типу <code>percentage</code> зі значення <code>\"12,3%\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Повертає запис кадрів даних із файлу RData.",
        "Documentation.LongDescription": "Повертає запис кадрів даних із файлу RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Об'єднує записи в заданому списку.",
        "Documentation.LongDescription": "Об'єднує записи в заданому списку <code>records</code>. Якщо <code>records</code> містить значення, відмінні від записів, повертається помилка.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Створити об’єднаний запис із записів.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Повертає кількість полів у записі.",
        "Documentation.LongDescription": "Повертає кількість полів у записі <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість полів у записі.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Повертає імена полів.",
        "Documentation.LongDescription": "Повертає імена полів у записі <code>record</code> у вигляді тексту.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти назви полів у записі.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Повертає список значень полів.",
        "Documentation.LongDescription": "Повертає список значень полів у записі <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Знайти значення полів у записі.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Створює запис із таблиці виду {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Повертає запис із таблиці записів <code>table</code>, що містить імена полів та імена значень <code>{[Name = name, Value = value]}</code>. Якщо поля не унікальні, повертається виняткова ситуація.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Створити з таблиці запис такого вигляду: Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Повертає список значень, що містить значення полів із вхідного запису.",
        "Documentation.LongDescription": "Повертає список значень, що містить значення полів із вхідного <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Видобути значення полів із запису.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Повертає дерево абстрактного синтаксису (AST), яке представляє доступ до стовпця у виразі рядка.",
        "Documentation.LongDescription": "Повертає дерево абстрактного синтаксису (AST), яке представляє доступ до стовпця \"<code>columnName</code>\" рядка у виразі рядка.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Повертає дерево абстрактного синтаксису, яке виражає доступ до стовпця \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Повертає дерево абстрактного синтаксису (AST) для тіла функції.",
        "Documentation.LongDescription": "<p>Повертає дерево абстрактного синтаксису для тіла функції <code>function</code>, нормалізованої до <i>виразу рядка</i> відповідно до наведених нижче умов:\r\n<ul>\r\n  <li>Це має бути LAMBDA-функція з 1 аргументом.</li>\r\n  <li>Усі посилання на параметр функції замінюються на <code>RowExpression.Row</code>.</li>\r\n  <li>Усі посилання на стовпці замінюються на <code>RowExpression.Column(<i>ім’я_стовбця</i>)</code>.</li>\r\n<li>Дерево абстрактного синтаксису спроститься й міститиме лише вузли таких видів:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Якщо для тіла функції <code>function</code> не можна повернути дерево абстрактного синтаксису як вираз рядка, повертається помилка.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Повертає дерево абстрактного синтаксису для тіла функції <code>each [CustomerID] = \"ALFKI\"</code>.",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Створює значення типу одинарної точності із заданого значення.",
        "Documentation.LongDescription": "Повертає одиничне значення <code>number</code> із заданого параметра <code>value</code>. Якщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Single.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>number</code> та перебуває в діапазоні одиничної точності, повертається <code>value</code>. Інакше повертається помилка. Якщо параметр <code>value</code> має інший тип, його спочатку буде перетворено на значення <code>number</code> за допомогою функції <code>Number.FromText</code>. Крім того, можна вказати необов'язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Отримати значення <code>number</code> одинарної точності зі значення <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Повертає таблицю даних із кінцевої точки індексу Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Викликає REST API Smartsheet 2.0 у зазначеній кінцевій точці й перетворює повернену одиницю даних на таблицю.",
        "Documentation.Examples": [
          {
            "Description": "Отримує таблицю з інформацією про користувачів з інтерфейсу Smartsheet API.",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Таблиця з інформацією про користувачів, яку повернув інтерфейс Smartsheet API"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту в будь-якому із вказаних роздільників.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту в будь-якому із вказаних роздільників.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних комою або крапкою з комою, починаючи з початку, без урахування лапок і роздільників у лапках.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Розділення вхідних даних комою або крапкою з комою, починаючи з кінця, без урахування лапок і роздільників у лапках.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту відповідно до вказаного роздільника.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту відповідно до вказаного роздільника.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних комою, без урахування ком у лапках.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту в кожному вказаному роздільнику в певній послідовності.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту в кожному вказаному роздільнику в певній послідовності.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних комою, а потім крапкою з комою, починаючи з початку.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Розділення вхідних даних комою, а потім крапкою з комою, починаючи з кінця. Лапки розглядаються як будь-який інший символ.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту в кожному вказаному роздільнику на кожну вказану довжину.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту в кожному вказаному роздільнику на кожну вказану довжину.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних на перші два символи й наступні три, починаючи з початку.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Розділення вхідних даних на перші три символи й наступні два, починаючи з кінця.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту в кожній указаній позиції.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту в кожній указаній позиції.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних у вказаних позиціях, починаючи з початку.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Розділення вхідних даних у вказаних позиціях, починаючи з кінця.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту відповідно до вказаних зсувів і довжин.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список рядків відповідно до вказаних зсувів і довжин. Довжина null указує, що має бути долучено також і решту вхідних даних.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Розділення вхідних даних за вказаними парами позиції й довжини, починаючи з початку. Зверніть увагу, що діапазони в цьому прикладі перекриваються.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Розділення вхідних даних за вказаними парами позиції й довжини, починаючи з кінця.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Виділити з вхідних даних поштовий індекс із фіксованою довжиною, а після нього назву міста зі змінною довжиною.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Повертає функцію, яка розділяє текст на список тексту після вказаної довжини повторно.",
        "Documentation.LongDescription": "Повертає функцію, яка розділяє текст на список тексту після вказаної довжини повторно.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Повторне розділення вхідних даних на порції з трьох символів, починаючи з початку.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Повторне розділення вхідних даних на порції з трьох символів, починаючи з кінця.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Повертає приблизну кількість рядків у таблиці.",
        "Documentation.LongDescription": "Повертає приблизну кількість рядків у <code>table</code> або помилку, якщо джерело даних не підтримує апроксимацію.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Оцінка кількості унікальних комбінацій міста та області у великій таблиці, яку можна використовувати як оцінку кратності для стовпців. Оцінки кратності досить важливі, щоб різні джерела даних (як-от SQL Server) підтримували певну апроксимацію, часто за допомогою алгоритму HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Повертає кількість стовпців у таблиці.",
        "Documentation.LongDescription": "Повертає кількість стовпців у таблиці <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість стовпців у таблиці.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Повертає імена стовпців у вигляді списку.",
        "Documentation.LongDescription": "Повертає імена стовпців у таблиці <code>table</code> у вигляді списку тексту.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти назви стовпців таблиці.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Повертає перший рядок або вказане значення за замовчуванням.",
        "Documentation.LongDescription": "Повертає перший рядок у <code>table</code> або додаткове значення за замовчуванням, <code>default</code>, якщо таблиця пуста.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти перший рядок таблиці.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Знайти перший рядок таблиці <code>({})</code> або повернути [a = 0, b = 0] у разі пустої таблиці.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Повертає перший стовпець першого рядка таблиці або вказане стандартне значення.",
        "Documentation.LongDescription": "Повертає перший стовпець першого рядка таблиці <code>table</code> або вказане стандартне значення.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Указує, чи містить таблиця лише унікальні рядки (без повторів).",
        "Documentation.LongDescription": "Указує, чи таблиця <code>table</code> містить лише унікальні рядки (без повторів). Повертає значення <code>true</code>, якщо всі рядки унікальні, а в іншому випадку – значення <code>false</code>.\r\n    Додатковий параметр <code>comparisonCriteria</code> визначає, які стовпці таблиці перевіряються на повтори. Якщо <code>comparisonCriteria</code> не вказано, перевіряються всі стовпці.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи має таблиця лише унікальні значення.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Визначити, чи має таблиця лише унікальні значення в стовпці.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Указує, чи містить таблиця рядки.",
        "Documentation.LongDescription": "Указує, чи таблиця <code>table</code> містить рядки. Повертає значення <code>true</code>, якщо рядків немає (тобто таблиця пуста), а в іншому випадку – значення <code>false</code> .",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи таблиця пуста.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Визначити, чи є таблиця <code>({})</code> пустою.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Повертає ключі вказаної таблиці.",
        "Documentation.LongDescription": "Повертає ключі вказаної таблиці.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Отримайте список ключів для таблиці.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Повертає останній рядок або вказане значення за замовчуванням.",
        "Documentation.LongDescription": "Повертає останній рядок у <code>table</code> або додаткове значення за замовчуванням, <code>default</code>, якщо таблиця пуста.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти останній рядок таблиці.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Знайти останній рядок таблиці <code>({})</code> або повернути [a = 0, b = 0] у разі пустої таблиці.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Повертає кількість рядків у таблиці.",
        "Documentation.LongDescription": "Повертає кількість рядків у <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість рядків у таблиці.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Повертає єдиний рядок у таблицю.",
        "Documentation.LongDescription": "Повертає єдиний рядок у рядок <code>table</code>. Якщо <code>table</code> містить більше одного рядка, повертається виняткова ситуація.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Знайти один рядок у таблиці.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Створює список із вкладених списків значень стовпців з таблиці.",
        "Documentation.LongDescription": "Створює список із вкладених списків з таблиці, <code>table</code>.  Кожний елемент списку є внутрішнім списком, що містить значення стовпців.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Створити список значень стовпців із таблиці.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Перетворює таблицю у список, застосовуючи зазначену функцію об'єднання до кожного рядка значень у таблиці.",
        "Documentation.LongDescription": "Перетворює таблицю у список, застосовуючи зазначену функцію об'єднання до кожного рядка значень у таблиці.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Поєднати текст кожного рядка, що містить кому.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Перетворює таблицю на список записів.",
        "Documentation.LongDescription": "Перетворює таблицю, <code>table</code>, на список записів.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Перетворити таблицю на список записів.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Створює список із вкладених списків значень рядків з таблиці.",
        "Documentation.LongDescription": "Створює список із вкладених списків з таблиці, <code>table</code>.  Кожний елемент списку є внутрішнім списком, що містить значення рядків.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Створити список значень рядків із таблиці.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Створює модифікований запис про помилку, який не ініціює перехід при поверненні обробником, зазначеним у поданні (через Table.View).",
        "Documentation.LongDescription": "Створює модифікований запис про помилку від <code>errorRecord</code>, який не ініціює перехід при поверненні обробником, зазначеним у поданні (через Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Створює функцію, яку може перехопити обробник, визначений у поданні (через Table.View).",
        "Documentation.LongDescription": "<p>Створює функцію подання на основі <code>function</code>, що можна обробляти в поданні, створеному <code>Table.View</code>.</p>\r\n<p>Обробник <code>OnInvoke</code> для <code>Table.View</code> можна використовувати для визначення обробника для функції подання.</p>\r\n<p>Як і у випадку обробників для вбудованих операцій, якщо обробник <code>OnInvoke</code> не вказано, він не обробляє функцію подання або виникла помилка обробника, <code>function</code> застосовується поверх подання.</p>\r\n<p>Перегляньте опубліковану документацію щодо настроюваного з’єднувача Power Query, щоб дізнатися більше про <code>Table.View</code> та спеціальні функції подання.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Повертає текстове значення з видаленими недрукованими символами.",
        "Documentation.LongDescription": "Повертає текстове значення з усіма видаленими керівними символами параметра <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Видаляє з текстового значення символи переведення рядка та інші недруковані символи.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Об'єднує список текстових значень в одне текстове значення.",
        "Documentation.LongDescription": "Повертає результат об’єднання списку текстових значень (<code>texts</code>) у єдине текстове значення. Усі <code>Null-значення</code>, наявні в <code>texts</code>, ігноруються.\r\n    Можна вказати додатковий <code>separator</code>, що використовуватиметься в остаточному об’єднаному тексті.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Об'єднати текстові значення \"Seattle\" і \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Об’єднайте текстові значення \"Seattle\" і \"WA\", розділивши їх комою з пробілом.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Об’єднує значення \"Seattle\", <code>Null</code> і \"WA\", розділені комою з пробілом. (Зверніть увагу, що <code>Null-значення</code> ігнорується.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Створює текстове значення із заданого значення.",
        "Documentation.LongDescription": "Повертає текстове представлення параметра <code>value</code>. Параметр <code>value</code> може мати значення <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> або <code>binary</code>.\r\n    Якщо задано Null-значення, функція <code>Text.From</code> повертає Null-значення. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Створити текстове значення з числа 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Розшифровує дані з двійкового формату на текстовий.",
        "Documentation.LongDescription": "Розшифровує дані, <code>binary</code>, з двійкового значення на текстове за допомогою типу <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Визначає числовий тип із деталізацією (Int64.Type, Double.Type тощо) закодованого в тексті числа.",
        "Documentation.LongDescription": "Визначає числовий тип із деталізацією (Int64.Type, Double.Type тощо) <code>text</code>. Помилка стається, якщо параметр <code>text</code> не є числом. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Повертає кількість символів.",
        "Documentation.LongDescription": "Повертає кількість символів у тексті <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість символів у тексті \"Hello World\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Перетворює регістр усіх символів на нижній.",
        "Documentation.LongDescription": "Повертає результат перетворення всіх символів параметра <code>text</code> на символи нижнього регістру. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Отримати варіант \"AbCd\" у нижньому регістрі.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Перетворює першу букву кожного слова на велику.",
        "Documentation.LongDescription": "Повертає результат перетворення перших букв кожного слова на великі в текстовому значенні параметра <code>text</code>. Усі інші букви повертаються в нижній регістр. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Використовуйте <code>Text.Proper</code> для простих речень.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Обертає порядок тексту <code>text</code> на зворотний.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Обернути текст \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Кодує текст у двійкову форму.",
        "Documentation.LongDescription": "Кодує надане текстове значення, <code>text</code>, у двійкове значення за допомогою вказаного <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Повертає список значень символів із заданого текстового значення.",
        "Documentation.LongDescription": "Повертає список значень символів із заданого текстового значення <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Створити список значень символів з тексту \"Hello World\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Вилучає всі початкові й кінцеві пробіли.",
        "Documentation.LongDescription": "Повертає результат вилучення всіх початкових і кінцевих пробілів з текстового значення <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Вилучити початкові й кінцеві пробіли з \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Вилучає всі кінцеві пробіли.",
        "Documentation.LongDescription": "Повертає результат вилучення всіх кінцевих пробілів з текстового значення <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Вилучити кінцеві пробіли з \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Вилучає всі початкові пробіли.",
        "Documentation.LongDescription": "Повертає результат вилучення всіх початкових пробілів з текстового значення <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Вилучити початкові пробіли з \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Перетворює всі символи на верхній регістр.",
        "Documentation.LongDescription": "Повертає результат перетворення всіх символів параметра <code>text</code> на символи верхнього регістру. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Отримати варіант \"aBcD\" у верхньому регістрі.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Повертає дані про кінець години.",
        "Documentation.LongDescription": "Повертає дані про кінець години, указані за допомогою <code>dateTime</code>, включно з частками секунди. Відомості часового поясу зберігаються.\r\n      <ul>\r\n        <li><code>dateTime</code> – значення типу <code>time</code>, <code>datetime</code> або <code>datetimezone</code>, на основі якого обчислюється кінець години.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Отримати кінець години для 14 травня 2011 р. 17:00:00.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Отримати кінець години для 17 травня 2011 р. 17:00:00 -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Створює час із заданого значення.",
        "Documentation.LongDescription": "Повертає значення <code>time</code> із заданого параметра <code>value</code>. Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").\r\nЯкщо заданий параметр <code>value</code> має значення <code>null</code>, функція <code>Time.From</code> повертає <code>null</code>. Якщо заданий параметр <code>value</code> має значення <code>time</code>, повертається <code>value</code>. Значення таких типів можна перетворити на значення <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: значення <code>time</code> із текстового представлення. Див. опис функції <code>Time.FromText</code>, щоб дізнатися більше.</li>\r\n        <li><code>datetime</code>: компонент часу параметра <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: компонент часу еквівалента місцевих дати й часу параметра <code>value</code>.</li>\r\n        <li><code>number</code>: еквівалент <code>time</code> значення кількості неповних днів, вираженого значенням <code>value</code>. Якщо <code>value</code> має від’ємне значення або значення, не менше за 1, повертається помилка.</li>\r\n      </ul>\r\nЯкщо параметр <code>value</code> має інше значення, повертається помилка.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>0.7575</code> на значення <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Перетворити <code>#datetime(1899, 12, 30, 06, 45, 12)</code> на значення <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Створює час із місцевого, всесвітнього та настроюваного форматів часу.",
        "Documentation.LongDescription": "Створює значення типу <code>time</code> із текстового представлення <code>text</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. Параметр типу <code>record</code> може містити такі поля:\r\n<ul>\r\n   <li><code>Format</code> – значення типу <code>text</code>, що задає формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або вказати <code>Null</code>-значення, час аналізуватиметься за найкращим варіантом.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату. Зокрема в <code>\"en-US\"</code> <code>\"tt\"</code> передбачає значення <code>\"AM\" або \"PM\"</code>, а в <code>\"ar-EG\"</code> <code>\"tt\"</code> – <code>\"ص\" або \"م\"</code>. Якщо <code>Format</code> має <code>Null</code>-значення, <code>Culture</code> визначає стандартний формат, який слід використовувати. Якщо <code>Culture</code> опущено або має <code>Null</code>-значення, використовується <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для <code>options</code> також можна задавати текстове значення. У такому разі відбуватиметься те саме, що й із <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Перетворити <code>\"10:12:31am\"</code> на значення часу.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Перетворіть значення <code>\"1012\"</code> на значення часу.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Перетворіть значення <code>\"10\"</code> на значення часу.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Повертає компонент години.",
        "Documentation.LongDescription": "Повертає компонент години заданого значення <code>time</code>, <code>datetime</code> або <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Знайти годину в #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Повертає компонент хвилини.",
        "Documentation.LongDescription": "Повертає компонент хвилини заданого значення <code>time</code>, <code>datetime</code> або <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Знайти хвилину в #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Повертає компонент секунди.",
        "Documentation.LongDescription": "Повертає компонент секунди заданого значення <code>time</code>, <code>datetime</code> або <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Пошук значення секунди в значенні дати й часу.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Повертає дані про початок години.",
        "Documentation.LongDescription": "Повертає дані про початок години, указані за допомогою <code>dateTime</code>.\r\n    <code>dateTime</code> має бути значенням типу <code>time</code>, <code>datetime</code> або <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Виявити початок години для 10 жовтня 2011 р., 08:10:32.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Повертає запис, що містить частини значення часу.",
        "Documentation.LongDescription": "Повертає запис, що містить частини заданого значення часу <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: значення <code>time</code>, на основі якого слід обчислити запис частин.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Перетворити значення <code>#time(11, 56, 2)</code> на запис, що містить значення часу.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Повертає текстове представлення значення часу.",
        "Documentation.LongDescription": "Повертає текстове представлення <code>time</code>. Можна вказати необов’язковий параметр <code>options</code> типу <code>record</code>, щоб зазначити додаткові властивості. <code>culture</code> використовується лише для застарілих робочих циклів. Параметр типу <code>record</code> може містити такі поля:\r\n<ul>\r\n   <li><code>Format</code> – значення типу <code>text</code>, що задає формат, який слід використовувати. Додаткові відомості див. на сторінках https://go.microsoft.com/fwlink/?linkid=2180104 і https://go.microsoft.com/fwlink/?linkid=2180105. Якщо пропустити це поле або вказати <code>Null</code>-значення, дата форматуватиметься за стандартним значенням, визначеним за полем <code>Culture</code>.</li>\r\n   <li><code>Culture</code> – якщо <code>Format</code> не має Null-значення, <code>Culture</code> керує деякими специфікаторами формату. Зокрема в <code>\"en-US\"</code> <code>\"tt\"</code> передбачає значення <code>\"AM\" або \"PM\"</code>, а в <code>\"ar-EG\"</code> <code>\"tt\"</code> – <code>\"ص\" або \"م\"</code>. Якщо <code>Format</code> має <code>Null</code>-значення, <code>Culture</code> визначає стандартний формат, який слід використовувати. Якщо <code>Culture</code> опущено або має <code>Null</code>-значення, використовується <code>Culture.Current</code>.</li>\r\n</ul>\r\nЩоб забезпечити підтримку застарілих робочих циклів, для параметрів <code>options</code> і <code>culture</code> також можна задавати текстові значення. У такому разі відбуватиметься те саме, що й із <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Перетворення <code>#time(01, 30, 25)</code> на значення <code>text</code>. <i>Результат може залежати від поточної культури.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Перетворення з використанням настроюваного формату та німецької культури.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Перетворення з використанням стандартного формату часу.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Повертає закриту версію заданого типу запису (або той самий тип, якщо його вже закрито).",
        "Documentation.LongDescription": "Повертає закриту версію заданого запису <code>record</code> <code>type</code> (або той самий тип, якщо його вже закрито).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Створити закриту версію <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Повертає аспекти типу.",
        "Documentation.LongDescription": "Повертає запис, що містить аспекти типу \"<code>type</code>\".",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Повертає запис зі значеннями полів, установленими на ім’я параметрів типу функції, і їхні значення, установлені на відповідні типи.",
        "Documentation.LongDescription": "Повертає запис зі значеннями полів, установленими на ім’я параметрів <code>type</code>, і їхні значення, установлені на відповідні типи.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Знайти типи параметрів функції <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Повертає число, яке вказує мінімальну кількість параметрів, необхідних для виклику типу функції.",
        "Documentation.LongDescription": "Повертає число, яке вказує мінімальну кількість параметрів, необхідних для виклику вводу <code>type</code> функції.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Знайти кількість необхідних параметрів для функції <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Повертає тип, який повертається за допомогою типу функції.",
        "Documentation.LongDescription": "Повертає тип, який повертається за допомогою функції <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Знайти тип повернення <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Повертає значення \"істина\", якщо тип підтримує пусті значення. В іншому разі повертає значення \"хибність\".",
        "Documentation.LongDescription": "Повертає значення <code>true</code>, якщо тип – <code>nullable</code>. В іншому разі повертає значення <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи тип <code>number</code> підтримує пусті значення.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Визначити, чи тип <code>type nullable number</code> підтримує пусті значення.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Повертає результат, чи запис відкрито.",
        "Documentation.LongDescription": "Повертає значення <code>logical</code>, яке вказує, чи запис <code>type</code> відкрито.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Визначити, чи запис <code>type [ A = number, ...]</code> відкрито.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Повертає тип елемента з типу списку.",
        "Documentation.LongDescription": "Повертає тип елемента зі списку <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Знайти тип елемента зі списку <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Повертає тип, який не підтримує пусті значення, з типу.",
        "Documentation.LongDescription": "Повертає тип, який не належить до типу <code>nullable</code>, з типу <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Повернути тип, який не підтримує пусті значення, з типу <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Повертає відкриту версію заданого типу запису (або той самий тип, якщо його вже відкрито).",
        "Documentation.LongDescription": "Повертає відкриту версію заданого запису <code>record</code> <code>type</code> (або той самий тип, якщо його вже відкрито).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Створити відкриту версію <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Повертає запис, який описує поля типу запису, причому кожне поле повернутого типу запису має відповідне ім’я та значення.",
        "Documentation.LongDescription": "Повертає запис, який описує поля типу <code>type</code> запису. Кожне поле повернутого типу запису має відповідне ім’я та значення у формі запису <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Знайти ім’я та значення запису <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Повертає ймовірно пустий список ключів заданого типу таблиці.",
        "Documentation.LongDescription": "Повертає ймовірно пустий список ключів заданого типу таблиці.<br>\r\n    <br>\r\n    Кожен ключ визначається за допомогою запису в такій формі: \r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: список імен стовпців, які визначають ключі\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: <code>true</code>, якщо ключ є первинним ключем таблиці; в іншому разі <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Повернення відомостей про ключ для типу таблиці.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Повертає тип рядка типу таблиці.",
        "Documentation.LongDescription": "Повертає тип рядка вказаного типу таблиці. Результат завжди буде типом запису.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Повернення відомостей про тип рядка для простої таблиці.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Повертає об’єднання списку типів.",
        "Documentation.LongDescription": "Повертає об’єднання типів в елементі \"<code>types</code>\".",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Складання запису в рядок запита URI.",
        "Documentation.LongDescription": "Складання запису <code>query</code> в рядок запиту URI з екрануванням символів (за необхідності).",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Кодування рядка запита, що містить деякі спеціальні символи.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Кодує спеціальні символи згідно з RFC 3986.",
        "Documentation.LongDescription": "Кодує спеціальні символи у вхідних даніх <code>data</code> згідно з правилами RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Кодування спеціальних символів у \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Повертає частини вводу абсолютного URI як запис.",
        "Documentation.LongDescription": "Повертає частини вводу <code>absoluteUri</code> як запис, що містить такі значення як Схема, Хост, Порт, Шлях, Запит, Фрагмент, Ім'я користувача та Пароль.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Знайти частини абсолютного URI \"www.adventure-works.com\".",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Розшифруйте рядок із процентним кодуванням.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу служби аналітики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Повертає вміст, завантажений за URL-адресою служби аналітики Azure DevOps, як двійкове значення. Ця функція використовує різні облікові дані для різних організацій."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Введіть URL-адресу служби аналітики Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Повертає вміст, завантажений за URL-адресою служби аналітики VSTS, як двійкове значення. Ця функція використовує глобальні облікові дані для всіх доступних організацій."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Указує альтернативні плани запитів.",
        "Documentation.LongDescription": "Ця функція в складі виразу планів запитів, що отримується шляхом поєднання Value.Expression(Value.Optimize(…)), указує альтернативні плани запитів. Її не призначено для застосування з іншою метою.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Повертає дерево абстрактного синтаксису (AST), яке представляє вираз значення.",
        "Documentation.LongDescription": "Повертає дерево абстрактного синтаксису (AST), яке представляє вираз значення",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Створює чітко типізоване значення з текстового представлення.",
        "Documentation.LongDescription": "Розшифровує значення з текстового представлення <code>text</code> і розглядає його як значення відповідного типу.\r\n    <code>Value.FromText</code> набуває текстового значення й повертає число, логічне значення, Null-значення, значення дати й часу, значення тривалості або текстове значення. Пусте текстове значення розглядається як Null-значення.\r\n    Крім того, можна вказати необов’язковий параметр <code>culture</code> (наприклад, \"uk-UA\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Повертає запис, що містить метадані вводу.",
        "Documentation.LongDescription": "Повертає запис, що містить метадані вводу.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Указує, що функція Value.Expression має повернути оптимізований вираз для значення.",
        "Documentation.LongDescription": "Ця функція вказує, що має бути повернуто оптимізований вираз, якщо її вказано разом із функцією Value.Expression, а <code>value</code> – це запит, який можна оптимізувати. Інакше <code>value</code> буде передано без змін.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Смуги вводу метаданих.",
        "Documentation.LongDescription": "Смуги вводу метаданих.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Повертає тип заданого значення.",
        "Documentation.LongDescription": "Повертає тип заданого значення.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.LongDescription": "Ця функція призначена лише для внутрішнього використання.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Повертає HTML-код за вказаною URL-адресою сторінки, що переглядається в браузері.",
        "Documentation.LongDescription": "Повертає HTML для вказаної URL-адреси <code>url</code> у форматі веб-браузера. Можна вказати додатковий параметр запису, <code>options</code>, щоб визначити додаткові властивості. Запис може містити описані нижче поля.\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: якщо на цільовому сайті має вказуватися ключ API, за допомогою цього параметра можна вказати ім’я, проте не значення, параметра ключа, який слід використовувати в URL-адресі. Фактичне значення ключа вказується в облікових даних.</li>\r\n        <li><code>WaitFor</code>: визначає умову для очікування перед завантаженням HTML. Ця умова доповнює очікування на завантаження сторінки (що завжди виконується). Як значення можна вказати запис із полями \"Timeout\" (Час очікування) і/або \"Selector\" (Селектор). Якщо вказати лише час очікування, перед завантаженням HTML функція очікуватиме вказаний час. Якщо вказати селектор і час очікування, що завершується до того, як селектор з’явиться на сторінці, повернеться помилка. Якщо вказати селектор без часу очікування, застосовуватиметься стандартний час очікування 30 секунд.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Отримання доступу до даних",
        "Documentation.Examples": [
          {
            "Description": "Повертає HTML для https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Повертає HTML для https://microsoft.com після очікування появи селектора CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Повертає HTML для https://microsoft.com після очікування протягом десяти секунд.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Повертає HTML для https://microsoft.com після очікування появи селектора CSS протягом десяти секунд.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Повертає вміст, завантажений з URL-адреси, у двійковому вигляді.",
        "Documentation.LongDescription": "Повертає вміст, завантажений із використанням <code>url</code>, як бінарне значення. Щоб указати додаткові властивості, можна задавати додатковий параметр запису <code>options</code>. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>Query</code> : Параметри запиту можна програмно додавати до URL-адреси без необхідності додавати escape-код.</li>\r\n<li><code>ApiKeyName</code> : Якщо на цільовому сайті має вказуватися ключ API, за допомогою цього параметра можна вказати ім‘я, проте не значення, параметра ключа, який слід використовувати в URL-адресі. Фактичне значення ключа вказується в облікових даних.</li>\r\n<li><code>Headers</code> : Якщо вказати запис як значення, в HTTP-запиті буде вказано додаткові заголовки.</li>\r\n<li><code>Timeout</code> : Якщо вказати тривалість як значення, час очікування HTTP-запиту зміниться. Стандартне значення – 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Якщо вказати список як значення, відповідні ключі заголовків HTTP буде виключено з обчислення для кешування даних.</li>\r\n<li><code>IsRetry</code> : Якщо вказати логічне значення true, під час отримання даних ігноруватиметься будь-яка наявна відповідь у кеші.</li>\r\n<li><code>ManualStatusHandling</code> : Якщо вказати список як значення, це запобігатиме використанню передбачених механізмів обробки щодо HTTP-запитів, відповідь на які має один з указаних кодів станів.</li>\r\n<li><code>RelativePath</code> : Якщо вказати це значення як текст, його буде додано до основної URL-адреси до виконання запиту.</li>\r\n<li><code>Content</code> : Це значення змінює веб-запит GET на POST, використовуючи значення параметра як вміст для POST.</li>\r\n</ul>\r\n\r\n    HTTP-запит виконується методом GET, якщо вміст не вказано, або POST, якщо вміст зазначено. Запити POST можна виконувати лише анонімно.\r\n    <br>\r\n    Заголовки HTTP-відповіді доступні як метадані бінарного результату. Поза контекстом настроюваного з’єднувача даних доступна лише підмножина заголовків відповіді (з міркувань безпеки).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Отримайте вміст <code>\"https://bing.com/search?q=Power+Query\"</code> за допомогою параметрів RelativePath і Query. Ці параметри можна використовувати для динамічного запиту статичної основної URL-адреси.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Виконайте POST-запит відносно URL-адреси, передавши бінарні дані у форматі JSON і проаналізувавши відповідь як JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Підключайтеся за допомогою захищеної URL-адреси, де ключ автентифікації приймається як частина рядка запиту. Не потрібно жорстко програмувати секретний ключ у коді М, адже це може створювати загрозу безпеці. \r\n    Натомість його можна надавати безпечно. Для цього потрібно вказати ім’я ключа, проте не значення, у коді M, вибрати автентифікацію за допомогою веб-інтерфейсу API і ввести значення ключа як облікові дані веб-інтерфейсу API.\r\n    Таким чином можна створювати запити на адресу на зразок такої: <code>\"https://contoso.com/api/customers/get?api_key=******\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Повертає заголовки HTTP, завантажені за URL-адресою, як значення запису.",
        "Documentation.LongDescription": "Повертає заголовки, завантажені з використанням <code>url</code>, як запис. Щоб указати додаткові властивості, можна задавати додатковий параметр запису <code>options</code>. Запис може містити такі поля:\r\n    <ul>\r\n<li><code>Query</code> : Параметри запиту можна програмно додавати до URL-адреси без необхідності додавати escape-код.</li>\r\n<li><code>ApiKeyName</code> : Якщо на цільовому сайті має вказуватися ключ API, за допомогою цього параметра можна вказати ім‘я, проте не значення, параметра ключа, який слід використовувати в URL-адресі. Фактичне значення ключа вказується в облікових даних.</li>\r\n<li><code>Headers</code> : Якщо вказати запис як значення, в HTTP-запиті буде вказано додаткові заголовки.</li>\r\n<li><code>Timeout</code> : Якщо вказати тривалість як значення, час очікування HTTP-запиту зміниться. Стандартне значення – 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Якщо вказати список як значення, відповідні ключі заголовків HTTP буде виключено з обчислення для кешування даних.</li>\r\n<li><code>IsRetry</code> : Якщо вказати логічне значення true, під час отримання даних ігноруватиметься будь-яка наявна відповідь у кеші.</li>\r\n<li><code>ManualStatusHandling</code> : Якщо вказати список як значення, це запобігатиме використанню передбачених механізмів обробки щодо HTTP-запитів, відповідь на які має один з указаних кодів станів.</li>\r\n<li><code>RelativePath</code> : Якщо вказати це значення як текст, його буде додано до основної URL-адреси до виконання запиту.</li>\r\n</ul>\r\n\r\n    HTTP-запит виконується методом HEAD. Поза контекстом настроюваного з’єднувача даних доступна лише підмножина заголовків відповіді (з міркувань безпеки).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Отримання заголовків HTTP для <code>\"https://bing.com/search?q=Power+Query\"</code> з використанням параметрів RelativePath і Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Контекст авторизації, у якому оцінюється умова запису керування доступом (ACE).",
        "Documentation.LongDescription": "Контекст авторизації, у якому оцінюється умова запису керування доступом (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Таблиця записів керування доступом (ACE).",
        "Documentation.LongDescription": "Упорядкована таблиця записів керування доступом (ACE), що представляє правила авторизації. Кожен рядок оцінюється відносно поточного контексту авторизації (послідовно). Перший рядок, для якого вираз у стовпці <code>Condition</code> (Умова) повертає значення \"true\", визначає, яке правило застосовується. Стовпець <code>Action</code> (Дія) представляє різновид дії, до якої застосовується правило. Стовпець <code>AccessControlKind</code> (Різновид керування доступом) визначає, чи для дії потрібно дозволити, чи заборонити доступ.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Визначає різновид керування доступом.",
        "Documentation.LongDescription": "Визначає різновид керування доступом.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Тип, що представляє всі значення.",
        "Documentation.LongDescription": "Тип, що представляє всі значення.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Тип, що представляє всі двійкові значення.",
        "Documentation.LongDescription": "Тип, що представляє всі двійкові значення.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Указує тип двійкового кодування.",
        "Documentation.LongDescription": "Указує тип двійкового кодування.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Указує, скільки екземплярів елемента очікується в групі.",
        "Documentation.LongDescription": "Указує, скільки екземплярів елемента очікується в групі.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Описує тип буферизації, який потрібно виконати.",
        "Documentation.LongDescription": "Описує тип буферизації, який потрібно виконати.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Тип, що представляє всі байти.",
        "Documentation.LongDescription": "Тип, що представляє всі байти.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Указує порядок байтів.",
        "Documentation.LongDescription": "Указує порядок байтів.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Тип, що представляє всі символи.",
        "Documentation.LongDescription": "Тип, що представляє всі символи.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Указує тип стискання.",
        "Documentation.LongDescription": "Указує тип стискання.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Указує значення лапок у документах CSV.",
        "Documentation.LongDescription": "Указує значення лапок у документах CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Тип, який позначає грошове значення.",
        "Documentation.LongDescription": "Тип, який позначає грошове значення.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Тип, що представляє всі значення дати.",
        "Documentation.LongDescription": "Тип, що представляє всі значення дати.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Тип, що представляє всі значення дати й часу без пов'язаного часового поясу.",
        "Documentation.LongDescription": "Тип, що представляє всі значення дати й часу без пов'язаного часового поясу.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Тип, що представляє всі значення дати й часу відносно часового поясу.",
        "Documentation.LongDescription": "Тип, що представляє всі значення дати й часу відносно часового поясу.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Указує день тижня.",
        "Documentation.LongDescription": "Указує день тижня.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Тип, який позначає десяткове число з фіксованою комою.",
        "Documentation.LongDescription": "Тип, який позначає десяткове число з фіксованою комою.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Тип, який позначає число подвійної точності з рухомою комою.",
        "Documentation.LongDescription": "Тип, який позначає число подвійної точності з рухомою комою.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Тип, що представляє всі значення тривалості",
        "Documentation.LongDescription": "Тип, що представляє всі значення тривалості",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Указує очікувану дію для додаткових значень у рядку, який містить більше стовпців, ніж очікується.",
        "Documentation.LongDescription": "Указує очікувану дію для додаткових значень у рядку, який містить більше стовпців, ніж очікується.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Тип, що представляє всі функції.",
        "Documentation.LongDescription": "Тип, що представляє всі функції.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Указує різновид групування.",
        "Documentation.LongDescription": "На основі одного значення ключа можна створити лише одну глобальну групу, проте кілька локальних груп.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Тип, що представляє значення GUID.",
        "Documentation.LongDescription": "Тип, що представляє значення GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Ідентичність представляє користувача, групу, пристрій або інший об’єкт, який можна ідентифікувати.",
        "Documentation.LongDescription": "Ідентичність представляє користувача, групу, пристрій або інший об’єкт, який можна ідентифікувати.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Визначає область, у якій створюються й порівнюються ідентичності.",
        "Documentation.LongDescription": "Визначає область, у якій створюються й порівнюються ідентичності.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Тип, який позначає 16-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Тип, який позначає 16-розрядне ціле число зі знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Тип, який позначає 32-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Тип, який позначає 32-розрядне ціле число зі знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Тип, який позначає 64-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Тип, який позначає 64-розрядне ціле число зі знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Тип, який позначає 8-розрядне ціле число зі знаком.",
        "Documentation.LongDescription": "Тип, який позначає 8-розрядне ціле число зі знаком.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Указує алгоритм об’єднання для операції об’єднання.",
        "Documentation.LongDescription": "Указує алгоритм об’єднання для операції об’єднання.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Указує різновид операції об’єднання.",
        "Documentation.LongDescription": "Указує різновид операції об’єднання.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Указує ліву або праву таблицю об’єднання.",
        "Documentation.LongDescription": "Указує ліву або праву таблицю об’єднання.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Описує тип речення про обмеження, підтримуваний діалектом SQL, що використовується для цього джерела даних.",
        "Documentation.LongDescription": "Описує тип речення про обмеження, підтримуваний діалектом SQL, що використовується для цього джерела даних.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Тип, що представляє всі списки.",
        "Documentation.LongDescription": "Тип, що представляє всі списки.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Тип, що представляє всі логічні значення.",
        "Documentation.LongDescription": "Тип, що представляє всі логічні значення.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Указує очікувану дію для відсутніх значень у рядку, який містить менше стовпців, ніж очікується.",
        "Documentation.LongDescription": "Указує очікувану дію для відсутніх значень у рядку, який містить менше стовпців, ніж очікується.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "Тип, що представляє null.",
        "Documentation.LongDescription": "Тип, що представляє null.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Тип, що представляє всі числа.",
        "Documentation.LongDescription": "Тип, що представляє всі числа.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Визначає типи значень, які служба OData може пропускати.",
        "Documentation.LongDescription": "Визначає типи значень, які служба OData може пропускати.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Указує екземпляри елемента в послідовності.",
        "Documentation.LongDescription": "Указує екземпляри елемента в послідовності.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Указує напрям сортування.",
        "Documentation.LongDescription": "Указує напрям сортування.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Тип, що відповідає текстовому паролю.",
        "Documentation.LongDescription": "Тип, що відповідає текстовому паролю.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Тип, що представляє значення відсотка.",
        "Documentation.LongDescription": "Тип, що представляє значення відсотка.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Визначає тип режиму для розрахунку процентиля.",
        "Documentation.LongDescription": "Визначає тип режиму для розрахунку процентиля.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Указує точність порівняння.",
        "Documentation.LongDescription": "Указує точність порівняння.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Указує спосіб використання лапок.",
        "Documentation.LongDescription": "Указує спосіб використання лапок.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Визначає тип ранжирування.",
        "Documentation.LongDescription": "Визначає тип ранжирування.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Тип, що представляє всі записи.",
        "Documentation.LongDescription": "Тип, що представляє всі записи.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Визначає напрямок індексування з початку або з кінця введеного рядка.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Указує напрям округлення, коли потрібне додаткове правило округлення.",
        "Documentation.LongDescription": "Указує напрям округлення, коли потрібне додаткове правило округлення.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Припустимі параметри для режиму виконання в сховищі бізнес-інформації SAP.",
        "Documentation.LongDescription": "Припустимі параметри для режиму виконання в сховищі бізнес-інформації SAP.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Припустимі варіанти для параметра розповсюдження SAP Hana.",
        "Documentation.LongDescription": "Припустимі варіанти для параметра розповсюдження SAP Hana.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Оператор діапазону для параметрів вводу діапазону SAP HANA.",
        "Documentation.LongDescription": "Оператор діапазону для параметрів вводу діапазону SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Тип, який позначає число одинарної точності з рухомою комою.",
        "Documentation.LongDescription": "Тип, який позначає число одинарної точності з рухомою комою.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Протокол для підключення до екземпляра Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Тип, що представляє всі таблиці.",
        "Documentation.LongDescription": "Тип, що представляє всі таблиці.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Тип, що представляє всі текстові значення.",
        "Documentation.LongDescription": "Тип, що представляє всі текстові значення.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Указує тип кодування тексту.",
        "Documentation.LongDescription": "Указує тип кодування тексту.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Тип, що представляє всі значення часу.",
        "Documentation.LongDescription": "Тип, що представляє всі значення часу.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Визначає рівень трасування.",
        "Documentation.LongDescription": "Визначає рівень трасування.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Тип, що представляє всі типи.",
        "Documentation.LongDescription": "Тип, що представляє всі типи.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Тип, що відповідає текстовому ідентифікатору URI.",
        "Documentation.LongDescription": "Тип, що відповідає текстовому ідентифікатору URI.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Указує метод для протоколу HTTP.",
        "Documentation.LongDescription": "Указує метод для протоколу HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
