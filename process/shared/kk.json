{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Access дерекқорының құрылымдық көрінісін қайтарады.",
        "Documentation.LongDescription": "Access дерекқорының құрылымдық көрінісін қайтарады, <code>database</code>. Қосымша жазба параметрі, <code>options</code>, мына параметрлерді бақылау үшін көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсететін логикалық мән (true/false). Әдепкі мән - false.</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n</ul>\r\n\r\n    Жазба параметрі мысалы былай көрсетіледі [option1 = value1, option2 = value2...].",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Талдау қызметтерінің дерекқорларын белгілі бір хостта қайтарады.",
        "Documentation.LongDescription": "Дерекқорларды Analysis Services үлгісінде қайтарады, <code>server</code>.  Қосымша жазба параметрі, <code>options</code>, қосымша сипаттарды көрсету үшін берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Көпөлшемді немесе кестелі үлгіде көрсетілген түрлердің қосылған өлшеу бағандарының түрлеріне пайдаланылатынын білдіретін логикалық мән. &quot;Жалған&quot; мәніне қойылғанда, &quot;сан&quot; түрі барлық өлшеу бағанына пайдаланылады. Бұл параметрдің әдепкі мәні жалған.</li>\r\n<li><code>Culture</code> : Деректердің тіл мен аймақтық параметрін көрсететін параметр. Бұл &quot;Жергілікті идентификатор&quot; байланыс жолының сипатына сәйкес келеді.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>SubQueries</code> : Байланыс жолындағы &quot;SubQueries&quot; сипатының мәнін орнататын сан (0, 1 немесе 2). Бұл қосалқы таңдаулардағы немесе қосалқы текшелердегі есептелетін элементтердің жұмысын басқарады. (Әдепкі мән 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale текшелері",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Текше деректерін AtScale жүйесінен импорттау/DirectQuery.",
        "Documentation.LongDescription": "\r\n<code>server</code> серверінде AtScale жүйесінен текше деректерін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> міндетті емес жазба параметрі көрсетілуі мүмкін:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: көп өлшемді немесе кестелік модельде көрсетілген түрлердің қосылған өлшем бағандарының түрлері үшін пайдаланылатынын не пайдаланылмайтынын көрсететін логикалық мән. Егер \"false\" мәніне орнатылса, \"number\" түрі барлық өлшем бағандары үшін пайдаланылады. Бұл параметр үшін әдепкі мән \"false\" болады.</li>\r\n        <li><code>CommandTimeout</code>: сервер жақтағы сұраудың бас тартуға дейін қанша уақыт орындалатынын басқаратын ұзақтық (секунд). Әдепкі мәні драйверге тәуелді. </li>\r\n        <li><code>ConnectionTimeout</code>: серверге қосылу әрекетін тоқтатуға дейін қанша уақыт күту керектігін басқаратын ұзақтық (секунд). Әдепкі мәні драйверге тәуелді. </li>\r\n\r\n</ul>\r\nЖазба параметрі [option1 = value1, option2 = value2...] түрінде көрсетіледі.",
        "Documentation.Examples": {
          "Description": "Текше деректерін AtScale текшесінде тізімде көрсету.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer (Kusto) қызметінен деректерді импорттайды",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer (Kusto) нұсқасынан деректерді импорттайды",
        "Documentation.Examples": [
          {
            "Description": "Storm Events ақпаратының кестесін қайтарады",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"Анықтама\" кластеріндегі \"Үлгілер\" дерекқорынан алынған Storm оқиғалары бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps аналитикалық қызметінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps аналитикалық қызметінің URL мекенжайынан жүктеп алынған контентті екілік мән ретінде қайтарады. Бұл функция әртүрлі ұйымдар үшін әртүрлі тіркелгі деректерін пайдаланады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services арнасы",
        "Documentation.DisplayName": "Azure DevOps Services арнасы",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps ұсынған OData арналарының кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Тіркелумен байланысты Azure Enterprise REST API соңғы нүктесінің URL мекенжайын енгізіңіз",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Azure Enterprise API ішінен қолжетімді есептер тізімі мен айларды қайтарады",
        "Documentation.Name": "Azure Enterprise ішінен деректерді импорттау",
        "Documentation.Examples": [
          {
            "Description": "AzureEnterprise.Tables функциясын пайдалану және нәтижелер алу үшін нақты мәнге шарлау.",
            "Code": "let\r\n    Көз = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Мазмұны = Көз{[Key=\"Contents\"]}[Data]\r\nin\r\n    Мазмұны",
            "Result": "Кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Azure Spark данасындағы кестелерді тізімдеңіз.",
        "Documentation.LongDescription": "Azure Spark данасындағы кестелерді тізімдеңіз.",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark данасындағы кестелерді тізімдеңіз.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Azure қоймасындағы көрсетілген тіркелгіден табылған бөлімді қамтитын шарлау кестесін береді.",
        "Documentation.LongDescription": "Azure сақтау қоймасынан URL, <code>account</code>, тіркелгісінде табылған әр контейнерге арналған жолды қамтитын навигация кестесін қайтарады. Әр жолда контейнердің BLOB нысандарына сілтеме бар. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>BlockSize</code> : Деректер тұтынушысын күтуге дейінгі оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>RequestSize</code> : Сервер үшін бір HTTP сұрауында оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests параметрі жадты пайдалану есебінен, параллель орындалатын сұраулар санын көрсету арқылы деректерді жылдамырақ жүктеп алуды қолдайды. Қажетті жад: (ConcurrentRequest * RequestSize). Әдепкі мәні: 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Azure Data Lake Storage қоймасында көрсетілген контейнерде және оның қосалқы қалталарында табылған құжаттар бар шарлау кестесін қайтарады.",
        "Documentation.LongDescription": "Azure Data Lake Storage файл жүйесінен <code>endpoint</code> тіркелгі URL мекенжайындағы көрсетілген контейнерде және оның қосалқы қалталарында табылған құжаттар бар навигация кестесін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>BlockSize</code> : Деректер тұтынушысын күтуге дейінгі оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>RequestSize</code> : Сервер үшін бір HTTP сұрауында оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests параметрі жадты пайдалану есебінен, параллель орындалатын сұраулар санын көрсету арқылы деректерді жылдамырақ жүктеп алуды қолдайды. Қажетті жад: (ConcurrentRequest * RequestSize). Әдепкі мәні: 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Файлдардың ағаш тәрізді каталог көрінісінде немесе тегіс тізімде қайтарылатынын басқаратын логикалық (шын/жалған) мән. Әдепкі мәні: жалған.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Azure қоймасындағы көрсетілген тіркелгідегі кестелерді қамтитын шарлау кестесін қайтарады.",
        "Documentation.LongDescription": "Azure қоймасынан <code>account</code> тіркелгі URL мекенжайы бойынша табылған әр кесте үшін жол бар навигациялық кестені қайтарады. Әрбір жолда Azure кестесіне сілтеме бар. Қосымша сипаттарды көрсету үшін міндетті емес <code>options</code> жазба параметрі  берілуі мүмкін. Жазбада мына өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>Timeout</code> : Серверге сұраудан бас тартуға дейінгі күту уақытын басқаратын ұзақтық. Әдепкі мәні деректер көзіне тәуелді.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino құралындағы Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Bloomberg Data and Analytics  v1.1.3",
        "Documentation.Description": "Used for retrieving Bloomberg data"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Бұл функция қолжетімді емес, себебі ол үшін .NET 4.5 қажет.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (бұрынғы)",
        "Documentation.Caption": "Common Data Service (бұрынғы)",
        "Documentation.LongDescription": "Common Data Service нұсқасына қосылу (Dynamics 365 және PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "CSV құжатының мазмұнын кесте ретінде қайтарады.",
        "Documentation.LongDescription": "CSV құжатының мазмұндарын кесте түрінде қайтарады.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> келесі мәндерге ие бола алады: null мәні, бағандар саны, баған атауларының тізімі, кесте түрі немесе параметрлер жазбасы.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> бір таңба, таңбалар тізімі немесе бірізді бос орын таңбаларымен бөлінуі тиіс жолдар санын көрсететін <code>\"\"</code> мәні болуы мүмкін. Әдепкі: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>extraValues</code> қолдау көрсетілетін мәндерді <code>ExtraValues.Type</code> қараңыз.\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> мәтінді кодтау түрін анықтайды.\r\n      </li>\r\n    </ul>\r\n\r\n    Егер <code>columns</code> арналған жазба көрсетілсе (ал <code>delimiter</code>, <code>extraValues</code> және <code>encoding</code> мәндері null болса), келесі жазба өрістерін көрсетуге болады:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: бағандарды бөлгіш. Әдепкі: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>. Келесі мәндерге ие бола алады: null мәні, бағандар саны, баған атауларының тізімі немесе кесте түрі. Егер бағандар саны кіріс деректерінде табылған саннан кіші болса, қосымша бағандардар ескерілмейді. Егер бағандар саны кіріс деректерінде табылған саннан үлкен болса, қосымша бағандар мәні null болады. Егер мән көрсетілмесе, бағандар саны кіріс деректеріне негізделіп анықталады.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: Файл мәтінін кодтау. Әдепкі: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: Тырнақшалардың қолданылуын анықтайды.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (әдепкі): Өрістегі тырнақшалар тікелей бөлгіштен кейін ғана есепке алынады.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: Өрістегі тырнақшалар орналасқан жеріне қарамастан әрқашан есепке алынады.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: Тырнақшалы жол үзілімдерінің қолданылуын анықтайды.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (әдепкі): Тырнақшалы жол үзілімдері, ағымдағы жолдың соңы емес, деректердің бөлігі ретінде есептеледі.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: Барлық жол үзілімдері ағымдағы жолдың соңы ретінде есептеледі, тіпті тырнақшалы мән ішінде болсада.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Баған тақырыптары бар CSV мәтінін өңдеу",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Қол жетімді өлшемділіктер жиынын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "<code>cube</code> ішіндегі қол жетімді өлшемділіктер жиынын қамтитын кестені қайтарады. Әр өлшемділік — өлшемділік төлсипаттарын қамтитын кесте және әр өлшемділік төлсипаты өлшемділік кестесінде баған ретінде көрсетіледі. Өлшемделіктерді текшеде Cube.AddAndExpandDimensionColumn арқылы кеңейтуге болады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Нысандардың (мысалы, өлшемділіктер және өлшемдер) көрсетілетін қалталар иерархиясын білдіретін кестелердің кірістірілген дарағын қайтарады.",
        "Documentation.LongDescription": "<code>cube</code> ішінде пайдалануға қолжетімді нысандардың (мысалы, өлшемділіктер және өлшемдер) көрсетілетін қалталар иерархиясын білдіретін кестелердің кірістірілген дарағын қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Текшеде кеңейтілетін қолжетімді өлшем сипаттарының жиынтығы бар кестені қайтарады.",
        "Documentation.LongDescription": "Текшеде кеңейтілетін өлшемдер үшін қолжетімді сипаттар жиынтығы бар кестені қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Қолжетімді өлшеулер жиынын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "<code>cube</code> ішіндегі қолжетімді өлшеулер жиынын қамтитын кестені қайтарады.\r\n    Әр өлшеу функция ретінде көрсетіледі. Өлшеулерді текшеге Cube.AddMeasureColumn арқылы қолдануға болады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Текшеге қолдануға болатын параметрлер жиынтығы бар кестені қайтарады.",
        "Documentation.LongDescription": "<code>cube</code> үшін қолдануға болатын параметрлер жиынтығы бар кестені қайтарады. Әрбір параметр қолданылған параметрімен және оның аргументтерімен <code>cube</code> алу үшін қолдануға болатын функция болып табылады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Текшеде кеңейтілген өлшемдер үшін қолжетімді сипаттар жиынтығы бар кестені қайтарады.",
        "Documentation.LongDescription": "Текшеде кеңейтілген өлшемдер үшін қолжетімді сипаттар жиынтығы бар кестені қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage Gen1 тіркелгісінің URL мекенжайын енгізіңіз.",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1 қоймасынан <code>url</code> бойынша табылған әрбір қалта мен файл үшін жол бар кестені қайтарады. Әрбір жолда қалтаның немесе файлдың сипаттары және оның контентіне сілтеме болады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Azure Data Lake Storage тіркелгісінің URL мекенжайын енгізіңіз.",
        "Documentation.LongDescription": "Azure Data Lake Storage Gen1 қоймасынан <code>url</code> бойынша табылған әрбір файл үшін жол бар кестені қайтарады. Әрбір жолда файлдың сипаттары және оның контентіне сілтеме болады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "Azure Cosmos DB тіркелгісінің URL мекенжайын енгізіңіз.",
        "Documentation.LongDescription": "Azure Cosmos DB дерекқорларының кестесін <code>url</code> мекенжайында қайтарады. Егер <code>дерекқор</code> көрсетілсе, оның орнына жинақтар кестесі қайтарылады. Сонымен қатар, егер <code>Сұрау</code> өрісі <code>параметрлер</code>жазбасында көрсетілсе, көрсетілген дерекқорда және/немесе жинақта орындалып жатқан сұрау нәтижелері қайтарылады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central (жергілікті) OData қызметінің соңғы нүктесінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics 365 Business Central (жергілікті)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (жергілікті)",
        "Documentation.LongDescription": "Релеванттық Dynamics 365 Business Central (жергілікті) деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics NAV OData қызметінің соңғы нүктесінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Тиісті Dynamics NAV деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Essbase сервер топтастырған Essbase нұсқасындағы текшелерді қайтарады.",
        "Documentation.LongDescription": "APS серверіндегі Essbase нұсқасынан Essbase сервері топтастырған текшелер кестесін қайтарады <code>url</code>. Қосымша жазба параметрі, <code>options</code>, келесі параметрлерді басқару үшін көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Excel жұмыс кітабының контентін қайтарады.",
        "Documentation.LongDescription": "Excel жұмыс кітабының контентін қайтарады.\r\n    <ul>\r\n     <li> <code>useHeaders</code> бос болуы, логикалық (шын/жалған) мән болуы мүмкін, әр қайтарылған кестенің бірінші жолын тақырып ретінде немесе параметрлер жазбасы ретінде қарастыруды көрсетеді. Әдепкі: жалған.</li>\r\n     <li> <code>delayTypes</code> бос болуы немесе логикалық (шын/жалған) мән болуы мүмкін, әр қайтарылған кестенің бағандарының түрі көрсетілмеген күйде қалуын көрсетеді. Әдепкі: жалған.</li>\r\n    </ul>\r\n\r\n    <code>useHeaders</code> үшін жазба көрсетілсе (және <code>delayTypes</code> - бос), келесі жазба өрістері берілуі мүмкін:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: бос немесе логикалық (шын/жалған) мән болуы мүмкін, әр қайтарылған кестенің бірінші жолын тақырып ретінде қарастыруды көрсетеді. Әдепкі: жалған.</li>\r\n     <li> <code>DelayTypes</code>: бос болуы немесе логикалық (шын/жалған) мән болуы мүмкін, әр қайтарылған кестенің бағандарының түрі көрсетілмеген күйде қалуын көрсетеді. Әдепкі: жалған.</li>\r\n     <li> <code>InferSheetDimensions</code>: бос болуы немесе логикалық (шын/жалған) мән болуы мүмкін, деректерді қамтитын жұмыс парағының аумағын файлдан өлшемдер метадеректерін оқу арқылы емес, ал жұмыс парағының өзін оқу арқылы алу керектігін көрсетеді. Бұл өлшемдер метадеректері қате болған жағдайларда пайдалы болуы мүмкін. Бұл опцияға тек Open XML Excel файлдары үшін қолдау көрсетіледі, бұрынғы Excel файлдарына қолдау көрсетілмейді. Әдепкі: жалған.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Excel жұмыс кітабынан 1-парақ мазмұнын қайтарыңыз.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Көрсетілген қалтадағы файлдардың және қалталардың сипаттарын және мазмұнын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "<code>path</code> қалтасындағы әр қалта және файл үшін жолды қамтитын кестені қайтарады. Әр жол қалтаның немесе файлдың сипаттарын және оның мазмұнының сілтемесін қамтиды. <code>options</code> параметрі тек ішкі қолданысқа арналған.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Көрсетілген қалтадағы және ішкі қалталардағы файлдардың сипаттарын және мазмұнын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "<code>path</code> қалтасындағы және оның барлық ішкі қалталарындағы әр файл үшін жолды қамтитын кестені қайтарады. Әр жол файлдың сипаттарын және оның мазмұнының сілтемесін қамтиды. <code>options</code> параметрі тек ішкі қолданысқа арналған.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Деректерді Google BigQuery дерекқорынан Azure AD арқылы импорттау",
        "Documentation.LongDescription": "\r\n      <code>Шот ұсыну жобасының идентификаторы</code> үшін Azure AD арқылы Google BigQuery қызметінде қолжетімді жобалар тізімі бар кестені қайтарады. Келесі параметрлерді басқару үшін <code>опциялар</code> қосымша жазба параметрін көрсетуге болады:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: серверге қосылу әрекетінен бас тартуға дейінгі күту қажет уақытты басқаратын ұзақтық. Әдепкі мәні - ODBC байланысты күту уақыты мәні.</li>\r\n        <li><code>CommandTimeout</code>: сервер жақтағы сұрау бас тартылғанға дейін қанша уақыт орындалатынын басқаратын ұзақтық.</li>\r\n        <li><code>UseStorageApi</code>: Үлкен нәтиже жиынтықтары үшін BigQuery Storage API бағдарламасын пайдалану керектігін анықтайды. Әдепкі мәні - Storage API бағдарламасын пайдалану үшін “true”. Storage API бағдарламасын пайдаланбау үшін “false” мәніне орнатыңыз.</li>\r\n        <li><code>AudienceUri</code>: Бұл ODBC драйвері өзінің таңбалауышты ауыстыру сұраулары үшін пайдалана алатын аудиторияның URI идентификаторы болып табылады. Бұл өріс толық URI болуы тиіс (мысалы, //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/aad-provider), бұл жердегі pool_id — жұмыс ресурстарының пулын анықтауға арналған глобалдық бірегей атау.</li>\r\n      </ul>\r\n   Жазба параметрі [option1 = value1, option2 = value2...] түрінде көрсетіледі.\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Azure AD арқылы Google BigQuery қызметінде қолжетімді жобалар тізімін көрсету",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google Sheets",
        "Documentation.Caption": "Google Sheets",
        "Documentation.Description": "GoogleSheets-тан деректерді импорттау",
        "Documentation.LongDescription": "GoogleSheets-тан деректерді импорттау"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Azure қоймасындағы көрсетілген тіркелгіден табылған бөлімді қамтитын шарлау кестесін береді.",
        "Documentation.LongDescription": "Azure сақтау қоймасынан URL, <code>account</code>, тіркелгісінде табылған әр бөлікке арналған жолды қамтитын шарлау кестесін береді. Әр жолда бөліктің блоб файлдарына сілтеме бар.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Azure қоймасындағы көрсетілген тіркелгіден табылған бөлімді қамтитын шарлау кестесін береді.",
        "Documentation.LongDescription": "Azure сақтау қоймасынан URL, <code>account</code>, тіркелгісінде табылған әр бөлікке арналған жолды қамтитын шарлау кестесін береді. Әр жолда бөліктің блоб файлдарына сілтеме бар.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Hadoop файлдық жүйесіндегі көрсетілген қалтадағы файлдардың және қалталардың сипаттарын және мазмұнын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Hadoop файлдық жүйесіндегі <code>url</code> қалтаның URL мекенжайындағы әр қалта және файл үшін жолды қамтитын кестені қайтарады. Әр жол қалтаның немесе файлдың сипаттарын және оның мазмұнының сілтемесін қамтиды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Hadoop файлдық жүйесіндегі көрсетілген қалтадағы және ішкі қалталардағы файлдардың және қалталардың сипаттарын және мазмұнын қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Hadoop файлдық жүйесіндегі <code>url</code> қалтаның URL мекенжайындағы және ішкі қалталардағы әр қалта және файл үшін жолды қамтитын кестені қайтарады. Әр жол файлдың сипаттарын және оның мазмұнының сілтемесін қамтиды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Impala кластерінен деректерді импорттаңыз",
        "Documentation.LongDescription": "Impala кластерінен <code>server</code> деректерді импорттаңыз. Егер порт көрсетілмесе, әдепкі порт 21050 болады.",
        "Documentation.Examples": [
          {
            "Description": "Impala кластерінде кестелерді тізімдейді.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Azure Data Explorer (Kusto) қызметінен деректерді импорттайды",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Контенттері",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Azure Data Explorer (Kusto) нұсқасынан деректерді импорттайды",
        "Documentation.Examples": [
          {
            "Description": "Storm Events ақпаратының кестесін қайтарады",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "\"Анықтама\" кластеріндегі \"Үлгілер\" дерекқорынан алынған Storm оқиғалары бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "MailChimp соңғы нүктесінен деректері бар кестені қайтарады.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "MailChimp API қызметін шақырады және алынған деректер жиынтығын кесте түрінде қайтарады. Барлық нәтижелерді бет бойынша автоматты түрде қарап шығады. Түбірлік соңғы нүкте мен JSON жауабындағы негізгі entityName сәйкес келмесе, API соңғы нүктелері үшін қосымша entityName параметрі пайдаланылуы мүмкін.",
        "Documentation.Examples": [
          {
            "Description": "MailChimp API тізімдерінің соңғы нүктесінен деректер кестесін алады.",
            "Code": "MailChimp.Collection(\"тізімдер\")",
            "Result": "Тізімдердің деректері бар кесте."
          },
          {
            "Description": "MailChimp API науқан-қалталар соңғы нүктесінен деректер кестесін алады.",
            "Code": "MailChimp.Collection(\"науқан-қалталар\", \"қалталар\")",
            "Result": "Науқан-қалталар деректері бар кесте."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "MailChimp API соңғы нүктесінен өңделмеген жауап нәтижелерін қайтарады.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "MailChimp API қызметін шақырады және өңделмеген жауапты қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Берілген науқан үшін есептер/басу-мәліметтер MailChimp API соңғы нүктесінен өңделмеген деректерді қайтарады.",
            "Code": "MailChimp.Instance(\"есептер/{campaign_id}/басу-мәліметтер\")",
            "Result": "Берілген науқанның өңделмеген басу мәліметтер деректері."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Қосымша сұрау функцияларын беріңіз.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Қосымша сұрау функцияларын беріңіз.",
        "Documentation.Examples": [
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017-5-1 және 2017-6-15 аралығындағы жиынтықтардың деректерін алу",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2017-5-1 және 2017-6-15 аралығындағы жиынтықтардың деректерін қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017 жылдың сәуір айы үшін жиынтықтардың деректерін алу.",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2017-4-1 және 2017-4-30 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017 жылдың сәуір айынан бастап қазірге дейінгі жиынтықтардың деректерін алу.",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2017-4-1 және 2017-6-15 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, өткен желтоқсан айынан осы ақпан айына дейінгі жиынтықтардың деректерін алу ",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2016-12-1 және 2017-2-28 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, өткен 18 ай үшін Marketplace шығындарын алу",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2015-12-1 және 2017-6-15 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017 жылдың маусым айы және 2017 жылдың мамыр айы үшін толық шығындарды алу",
            "Code": "\r\n      рұқсат ету    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2017-5-1 және 2017-6-15 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-07-03 деп қабылдап, 2016 жылдың шілде айы үшін толық шығындарды алу",
            "Code": "\r\n      рұқсат ету \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2016-07-01 және 2016-07-31 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-7-13 деп қабылдап, өткен 10 ай мен осы айдың 13 күні үшін баланстық жиынтықтарды алу",
            "Code": "\r\n      рұқсат ету  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      \r\n          нәтиже\r\n    ",
            "Result": "Функция 2016-9-1 және 2017-7-13 аралығындағы деректерді қайтарады"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "ODBC деректер көзінен алынатын SQL кестелерінің кестелерін және көріністерін қайтарады. ",
        "Documentation.LongDescription": "<code>connectionString</code> байланыс жолы арқылы көрсетілген ODBC деректер көзінен алынатын SQL кестелері мен көріністер кестесін қайтарады. <code>connectionString</code> мәтін немесе сипат мәні жұптарының жазбасы болуы мүмкін. Сипат мәндері мәтін немесе сан болуы мүмкін. <code>options</code> қосымша жазба параметрі қосымша сипаттарды көрсету үшін берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні 15 секунд болады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Берілген байланыс жолынан SQL кестелері мен көріністерін қайтару.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "OLE DB деректер көзінен SQL кестелері мен көріністерінің кестесін қайтарады.",
        "Documentation.LongDescription": "<code>connectionString</code> байланыс жолы арқылы көрсетілген OLE DB деректер көзінен SQL кестелері мен көріністерінен кестені қайтарады. <code>connectionString</code> сипат мәні жұптарының мәтіні немесе жазбасы болуы мүмкін. Сипат мәндері мәтін немесе сан болады. Қосымша жазба параметрі, <code>options</code>, қосымша сипаттарды көрсету үшін берілуі мүмкін. Жазбада мына өрістер болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - true).</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n</ul>\r\n\r\n    Жазба параметрі, мысалы, [1опция = 1мән, 2опция = 2мән...] немесе [Сұрау = \"... таңдау\"] ретінде көрсетіледі.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Oracle Database дерекқорынан SQL кестелердің кестесін және көріністерді қайтарады.",
        "Documentation.LongDescription": "<code>server</code> серверіндегі Oracle Database дерекқорынан SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "PDF файлында табылған кез келген кестелерді қайтарады.",
        "Documentation.LongDescription": "<code>pdf</code> ішінде табылған кестелерді қайтарады. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>Implementation</code> : Кестелерді анықтау кезінде пайдаланылатын алгоритм нұсқасы. Алгоритм жаңартулары ескі сұрауларды бұзбауы үшін, ескі нұсқалар тек кері үйлесімділік үшін қолжетімді. Ең жаңа нұсқа әрқашан ең үздік нәтижелерді беруі тиіс. Жарамды мәндер: &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; немесе бос мән.</li>\r\n<li><code>StartPage</code> : Тексерілетін беттер аумағындағы бірінші бетті көрсетеді. Әдепкі: 1.</li>\r\n<li><code>EndPage</code> : Тексерілетін беттер ауқымындағы соңғы бетті көрсетеді. Әдепкі: құжаттың соңғы беті.</li>\r\n<li><code>MultiPageTables</code> : Қатар келетін беттердегі ұқсас кестелердің бір кестеге автоматты түрде біріктірілу мүмкіндігін басқарады. Әдепкі: шын.</li>\r\n<li><code>EnforceBorderLines</code> : Жиек сызықтарының әрқашан ұяшық шекаралары ретінде қолданылатынын (шын болғанда) немесе ұяшық шекараларын анықтау үшін көптеген нұсқаулардың біреуі ретінде пайдаланылатынын (жалған болғанда) басқарады. Әдепкі: жалған.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Деректерге қол жеткізу",
        "Documentation.Examples": [
          {
            "Description": "sample.pdf файлындағы кестелерді қайтарады.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Planview Projectplace тіркелгісінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Тиісті Planview Projectplace деректері бар кестені қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "(Ρŷŧћòη ŝçяíþţ)",
        "Documentation.Description": "(Êжėćûтёš Ρўτђби §çяΐφť âńð гэţûŗŋŝ ďдţä ƒŕǻмĕŝ)",
        "Documentation.Examples": {
          "Description": "(Êжėćûтёš Ρўτђби §çяΐφť âńð гэţûŗŋŝ ďдţä ƒŕǻмĕŝ)",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "(Я šςгіφτ)",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Әр жолы кіріс жазбаның өріс атауы және мәні болып табылатын кестені қайтарады.",
        "Documentation.LongDescription": "<code>record</code> ішідегі әр өріс үшін жол бар <code>Name</code> және <code>Value</code> бағандарын қамтитын кестені қайтарады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Жазбадан кестені қайтару.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "SAP HANA дерекқорындағы жиынтықтарды қайтарады.",
        "Documentation.LongDescription": "<code>server</code> SAP HANA дерекқорынан көп өлшемді жиынтықтар кестесін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> қосымша жазба параметрі көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>Distribution</code> : Байланыс жолындағы &quot;Тарату&quot; сипатының мәнін орнататын SapHanaDistribution. Нұсқауды бағыттау - нұсқауды орындаудан бұрын таратылған жүйенің дұрыс сервер түйінін анықтау әдісі. Әдепкі мәні - SapHanaDistribution.All.</li>\r\n<li><code>Implementation</code> : Пайдалану үшін SAP HANA қосқышының орындалуын көрсетеді.</li>\r\n<li><code>EnableColumnBinding</code> : Деректерді шығарып алу кезінде айнымалыларды SAP HANA нәтижелер жиынтығының бағандарына байланыстырады. Жадты азғантай көбірек пайдаланып, өнімділікті жақсартуы мүмкін. Әдепкі мәні: false.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні 15 секунд болады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "SharePoint сайтындағы мазмұнды қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>url</code> SharePoint сайтында табылған әр қалта және құжат үшін жолды қамтитын кестені қайтарады. Әр жол қалтаның немесе файлдың сипаттарын және оның контентіне сілтемені қамтиды. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Осы сайтқа пайдаланылатын SharePoint API нұсқасын көрсететін (14 немесе 15) саны немесе &quot;Авто&quot; мәтіні. Көрсетілмеген кезде, API нұсқасы 14 пайдаланылады. &quot;Авто&quot; көрсетілген кезде сервер нұсқасы мүмкін болған жағдайда автоматты түрде анықталады, керісінше жағдайда нұсқаның әдепкі мәні 14 болады. Ағылшын тілінде емес SharePoint сайттары үшін кемінде 15-нұсқа қажет.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "SharePoint сайтындағы құжаттарды қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>url</code> SharePoint сайтында және ішкі қалталарда табылған әр құжат үшін жолды қамтитын кестені қайтарады. Әр жол қалтаның немесе файлдың сипаттарын және оның контентіне сілтемені қамтиды. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Осы сайтқа пайдаланылатын SharePoint API нұсқасын көрсететін (14 немесе 15) саны немесе &quot;Авто&quot; мәтіні. Көрсетілмеген кезде, API нұсқасы 14 пайдаланылады. &quot;Авто&quot; көрсетілген кезде сервер нұсқасы мүмкін болған жағдайда автоматты түрде анықталады, керісінше жағдайда нұсқаның әдепкі мәні 14 болады. Ағылшын тілінде емес SharePoint сайттары үшін кемінде 15-нұсқа қажет.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "SharePoint тізіміндегі контентті қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>url</code> SharePoint тізімінде табылған әр тізім элементі үшін жолды қамтитын кестені қайтарады. Әр жол тізімнің сипаттарын қамтиды. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Осы сайтқа пайдаланылатын SharePoint API нұсқасын көрсететін (14 немесе 15) саны немесе &quot;Авто&quot; мәтіні. Көрсетілмеген кезде, API нұсқасы 14 пайдаланылады. &quot;Авто&quot; көрсетілген кезде сервер нұсқасы мүмкін болған жағдайда автоматты түрде анықталады, керісінше жағдайда нұсқаның әдепкі мәні 14 болады. Ағылшын тілінде емес SharePoint сайттары үшін кемінде 15-нұсқа қажет.</li>\r\n<li><code>Implementation</code> : Міндетті емес. SharePoint қосқышының қай нұсқасын пайдалану керек екенін көрсетеді. Қабылданатын мәндер: “2.0” немесе null. Егер мән “2.0” болса, SharePoint қосқышының 2.0 жүзеге асырылуы пайдаланылады. Егер мән null болса, SharePoint қосқышының бастапқы жүзеге асырылуы пайдаланылады.</li>\r\n<li><code>ViewMode</code> : Міндетті емес. Бұл параметр тек 2.0 жүзеге асырылуы үшін жарамды. Қабылданатын мәндер: “Барлығы” және “Әдепкі”. Егер мән көрсетілмеген болса, мән “Барлығы” деп орнатылады. “Барлығы” мәні көрсетілген болса, көрініс барлық пайдаланушы жасаған және жүйе анықтаған бағандарды қамтиды. “Әдепкі” мәні көрсетілген болса, көрініс пайдаланушы параметрлерінде “Әдепкі” деп орнатқан көріністе тізімге онлайн қарап тұрғанда пайдаланушы көретін нәрсеге сәйкес болады. Егер пайдаланушы өзі жасаған немесе жүйе анықтаған бағандарды қосу немесе жою үшін я болмаса жаңа көріністі жасау және оны әдепкі ретінде орнату арқылы әдепкі көрінісін өңдесе, бұл өзгерістер қосқыш арқылы таратылады.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Жазба бағандары үшін қосқыштың жеке соңғы нүктені пайдалануына жол бермейді.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Көрсетілген URL мекенжайындағы мазмұннан SODA 2.0 API сай пішімделген кестені қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>url</code> URL мекенжайындағы мазмұннан SODA 2.0 API сай пішімделген кестені қайтарады. URL мекенжайы .csv кеңейтімімен аяқталатын жарамды SODA үйлесімді көзге бағыттауы керек.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Бұл функцияны SparkPost API v1 ұсынған \"Тізімдер\" соңғы нүктелерінің кез келгенін шақыру үшін пайдалануға болады. Бұл функция көмегімен SparkPost API шақырғанда SparkPost API қатаң API көрсеткішінің шегіне ие болатынын ескеріңіз. SparkPost серверінен қайтарылған 429 күй кодын көрсеңіз, бұл көрсеткіш шегіне жеткеніңізді білдіреді және қосымша шақырулар үшін күте тұруыңыз қажет болады.",
        "Documentation.Examples": [
          {
            "Description": "SparkPost API v1 \"Тізімдер\" соңғы нүктелерінің біреуінің деректерімен толтырылған бір бағаны бар кестені қайтарады (мәліметтер алу үшін SparkPost құжаттамасын қараңыз).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Пайдаланушы анықтаған күндер санында біріктірілген деректермен SparkPost қосқышы берген орнатылған кестелерді шығарып алыңыз. Бұл кестелерді жаңартқанда немесе бұл қосқыш көмегімен SparkPost API шақырғанда SparkPost API қатаң API көрсеткішінің шегіне ие болатынын ескеріңіз. SparkPost серверінен қайтарылған 429 күй кодын көрсеңіз, бұл көрсеткіш шегіне жеткеніңізді білдіреді және қосымша шақырулар үшін күте тұруыңыз қажет болады. Күндер саны параметрі үшін мәнді таңдағанда API тек 6 айлық деректерді сақтайтынын ескеріңіз."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "SQL Server серверіндегі дерекқорлардың кестесін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>server</code> SQL Server серверіндегі дерекқорлар кестесін қайтарады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Жасалған SQL сұрауындағы &quot;maxdop&quot; сұрауы сөйлемінің мәнін орнататын сан.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n<li><code>MultiSubnetFailover</code> : Логикалық мән (true/false), ол байланыс жолындағы &quot;MultiSubnetFailover&quot; сипатының мәнін орнатады (әдепкі мән - false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Егер &quot;шын&quot; болса, сәтсіз болуы мүмкін және бүкіл сұраудың сәтсіз болуына әкелуі мүмкін түр түрлендірулерін қысқартуға әрекет жасайтын логикалық мән (шын/жалған). Жалпы пайдалану үшін ұсынылмайды.</li>\r\n<li><code>ContextInfo</code> : Әр пәрменді орындаудан бұрын CONTEXT_INFO орнату үшін пайдаланылатын екілік мән.</li>\r\n<li><code>OmitSRID</code> : Егер &quot;шын&quot; болса, геометриялық және географиялық түрлерден Well-Known Text пішіміндегі деректерді жасағанда SRID өткізіп жіберетін логикалық мән (шын/жалған).</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логикалық мән (true немесе false) &quot;true&quot; болса, бір сервердегі дерекқорлар бойынша сұрауды қысқарту мүмкіндігіне қолдау көрсетіледі. Әдепкі мән — &quot;false&quot;.</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] ретінде көрсетіледі.\r\n    <br>\r\n    Серверде орындалатын SQL сұрауын орнатуға қолдау көрсетілмейді. SQL сұрауын орындаудың орнына <code>Sql.Database</code> пайдаланылуы тиіс.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Контенттер",
        "Documentation.DisplayName": "Stripe.Контенттер",
        "Documentation.Caption": "Stripe.Контенттер",
        "Documentation.Description": "Соғылған API қоңырауларының санын шектейтін параметрі бар Stripe API интерфейсіне қоңырау соғады.",
        "Documentation.LongDescription": "https://api.stripe.com/v1/<code>әдіс</code> мекенжайында қосымша параметр ретінде <code>сұрау</code> қосымша жазбасы бар және API сұрауларының санына шектеу ретінде қосымша <code>Бет шектеуі</code> бар Stripe API интерфейсіне қоңырау соғады. Ең соңғы деректер алдымен қайтарылады. Егер <code>бет шектеуі</code> көрсетілмесе, барлық деректер қайтарылады. Stripe 2015-10-16 нұсқасы пайдаланылады.",
        "Documentation.Examples": [
          {
            "Description": "Барлық шығындардың деректерін қайтарады",
            "Code": "Stripe.Контенттер(\"шығындар\")",
            "Result": "Ағымдағы Stripe тіркелгісінің барлық шығындарының деректері бар кесте"
          },
          {
            "Description": "Шығындар деректерінің бір бетін қайтарады",
            "Code": "Stripe.Контенттер(\"шығындар\", [], 1)",
            "Result": "Ағымдағы Stripe тіркелгісінің ең соңғы шығындар деректері бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Кестені жадқа буферге сақтайды, сөйтіп оны бағалау кезінде сыртқы өзгертулерден оқшаулайды.",
        "Documentation.LongDescription": "Есептеу кезінде сыртқы өзгерістерден оқшаулай отырып, жадтағы кестені буферге сақтайды.\r\n    Буферге сақтау толық емес. Ол кез келген скаляр ұяшық мәндерін есептеуге алып келеді, бірақ скаляр емес мәндерді (жазбалар, тізімдер, кестелер және т.б.) өзгеріссіз қалдырады.\r\n    <br>\r\n    <br>\r\n    Бұл функцияны пайдаланғанда сұрауларыңыз жылдамырақ орындалуы да, орындалмауы да мүмкін екенін ескеріңіз. Кейбір жағдайларда ол \r\n    барлық деректерді оқуға және оны жадта сақтауға кететін шығын қосылуына байланысты, сондай-ақ буферге сақтау төменгі ағындағы қысқартуды болдырмайтындықтан сұрауларыңыздың орындалуын баяулатуы мүмкін. Егер деректерді буферге сақтау қажет болмаса,\r\n     бірақ төменгі ағындағы қысқартудың алдын алғыңыз келсе, оның орнына <code>Table.StopFolding</code> пайдаланыңыз.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Кез келген алдағы болатын операциялар SQL серверіне сұрау жасай алмайтындай SQL кестесінің барлық жолдарын жадқа жүктеу.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Кестелер тізімін біріктіру нәтижесі болып табылатын кестені қайтарады.",
        "Documentation.LongDescription": "Кестелер тізімін біріктіру нәтижесі болып табылатын кестені қайтарады <code>tables</code>. Алынған кесте <code>columns</code> арқылы анықталған немесе <code>columns</code> көрсетілмесе, енгізу түрлерінің бірігуі арқылы анықталған жол түрі құрылымына ие болады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Үш кестені біріктіру.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Құрылымдары әртүрлі үш кестені біріктіру.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Екі кесте мен жобаны берілген түрге біріктіру.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Баған тақырыптарын мәндердің бірінші жолына төмендетеді.",
        "Documentation.LongDescription": "Баған тақырыптарын (яғни, баған атауларын) мәндердің бірінші жолына төмендетеді. Әдепкі баған атаулары: \"1-баған\", \"2-баған\" және т.с.с.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі мәндердің бірінші жолын төмендету.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Кестеден қайталанатын жолдарды жояды.",
        "Documentation.LongDescription": "Кестеден көшірме жолдарды жояды.\r\n    <code>equationCriteria</code> деген міндетті емес параметр кестенің қай бағандарында көшірмелер бар-жоғы тексерілгенін көрсетеді. <code>equationCriteria</code> көрсетілмеген болса, барлық бағандар тексерілген.<br>\r\n    <br>\r\n    Power Query кейде белгілі бір әрекеттерді серверлік деректер көздеріне жүктейтіндіктен («бүктеу» ретінде белгілі), сондай-ақ кейде \r\n    қатаң түрде қажет емес әрекеттерді өткізіп жіберу арқылы сұрауларды оңтайландыратындықтан, әдетте нақты қай көшірме сақталатынына кепілдік жоқ.\r\n    Мысалы, баған мәндерінің бірегей жиынтығы бар бірінші жол сақталады деп және кестедегі кейінгі жолдар жойылады деп болжай алмайсыз.\r\n    Көшірмелерді жою болжауға болатындай әрекет етуін қаласаңыз, алдымен <code>Table.Buffer</code> арқылы кестені буферлеңіз.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі қайталанатын жолдарды жою.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "<code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> кестесіндегі [b] бағанынан қайталанатын жолдарды жою.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Бағандар тізімінен және көрсетілген мәндерден кесте жасайды.",
        "Documentation.LongDescription": "Баған атаулары және мәндер бар енгізілген тізімдерді қамтитын <code>lists</code> тізімінен <code>columns</code> түріне жататын кесте жасайды.\r\n    Кейбір бағандарда басқалардан мәндер көбірек болса, бағандар null мәнін қабылдайтын болса, жоқ мәндер \"null\" әдепкі мәнімен толтырылады.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Тізімдегі клиент аттарының тізімінен кестені қайтару. Клиенттер тізімі элементіндегі әрбір мән жол мәні болады және әрбір тізім баған болады.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Берілген бағандар тізімінен және баған атауларының тізімінен кесте жасау.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Әр жол үшін бағандар саны әр түрлі болатын кесте жасау. Жоқ жол мәні null болады.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Тізімдегі әр элементке көрсетілген бөлу функциясын қолдану арқылы тізімді кестеге түрлендіреді.",
        "Documentation.LongDescription": "Тізімдегі әр элементке <code>splitter</code> міндетті емес бөлу функциясын қолдану арқылы <code>list</code> тізімін кестеге түрлендіреді. Әдепкі бойынша, тізім үтірлермен бөлінген мәтіндік мәндердің тізімі деп есептеледі. Міндетті емес <code>columns</code> бағандар саны, бағандар тізімі немесе TableType болуы мүмкін. Сондай-ақ, міндетті емес <code>default</code> және <code>extraValues</code> көрсетуге болады.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Әдепкі бөлгіш көмегімен тізімнен кесте жасау.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Реттелетін бөлгіш көмегімен тізімнен кесте жасау.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Record.FieldValues бөлгішінің көмегімен тізімнен кесте жасау.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Жазбалар тізімін кестеге түрлендіреді.",
        "Documentation.LongDescription": "<code>records</code> жазбалар тізімін кестеге түрлендіреді.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Жазба өрісі атауларын баған атаулары ретінде пайдаланып, жазбалардан кесте жасаңыз.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Енгізілген бағандармен жазбалардан кесте жасаңыз және бағандар санын таңдаңыз.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Жол мәндерінің тізімінен және қосымша бағандардан кесте жасайды",
        "Documentation.LongDescription": "<code>rows</code> тізімінен кесте жасайды, мұнда тізімнің әр элементі бір жол үшін баған мәндерін қамтитын ішкі тізім болып табылады. <code>columns</code> үшін баған атауларының қосымша тізімін, кесте түрін немесе бағандар санын көрсетуге болады.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "[CustomerID] бағанында {1, 2} мәндері бар, [Name] бағанында {\"Bob\", \"Jim\"} мәндері бар және [Phone] бағанында {\"123-4567\", \"987-6543\"} мәндері бар кестені қайтару.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "[CustomerID] бағанында {1, 2} мәндері бар, [Name] бағанында {\"Bob\", \"Jim\"} мәндері бар және [Phone] бағанында {\"123-4567\", \"987-6543\"} мәндері бар кестені қайтару, мұндағы [CustomerID] - сан түрі және [Name] және [Phone] - мәтін түрлері.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Берілген мәннен(дерден) бағаны бар кесте жасайды.",
        "Documentation.LongDescription": "Көрсетілген мәнді немесе мәндер тізімін қамтитын бағаны бар кесте жасайды, <code>value</code>. Қосымша жазба параметрі, <code>options</code>, келесі параметрлерді басқару үшін көрсетілуі мүмкін:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : Тізімнен немесе шкала мәнінен кесте құрастыру кезінде пайдаланылатын баған.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "1 мәнінен кесте жасау.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Тізімнен кесте жасау.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Реттелетін баған атауы бар 1 мәнінен кесте жасау.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Кестені бөлу жолы туралы ақпаратты қайтарады.",
        "Documentation.LongDescription": "Кестені бөлу жолы туралы ақпаратты қайтарады.  Әр баған бастапқы кестедегі бөлік баған болып табылатын және әр жол бастапқы кестедегі бөлікке сәйкес кесте қайтарылады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Кесте бағандарының профилін қайтарады.",
        "Documentation.LongDescription": "<p><code>table</code> бағандарының профилін қайтарады.</p>\r\n<p>Әрбір баған үшін келесі ақпарат қайтарылады (қолданылатын болса):\r\n<ul>\r\n  <li>минимум</li>\r\n  <li>максимум</li>\r\n  <li>орташа</li>\r\n  <li>стандартты ауытқу</li>\r\n  <li>саны</li>\r\n  <li>NULL мәндерінің саны</li>\r\n  <li>әр түрлі элементтер саны</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Мәндердің бірінші жолын жаңа баған тақырыптарына көтереді (яғни баған атаулары).",
        "Documentation.LongDescription": "Мәндердің бірінші жолын жаңа баған тақырыптарына көтереді (яғни баған атаулары). Әдепксінше тақырыптарға тек мәтін мен сандық мәндер көтеріледі. Жарамды параметрлер:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : Егер <code>шын</code> мәніне қойылса, бірінші жолдағы барлық скалярлық мән <code>Тіл және аймақ параметрі</code> арқылы тақырыптарға көтеріледі, егер көрсетілсе (немесе ағымдағы құжат орны).\r\n    Мәтінге түрлендірілмейтін мәндер үшін әдепкі баған атауы пайдаланылады.\r\n    </div>\r\n    <div>\r\n    <code>Тіл және аймақ параметрі</code> : Деректердің тіл және аймақ параметрін көрсететін атау.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі мәндердің бірінші жолының деңгейін көтеру.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Кестенің бірінші жолындағы барлық скалярды тақырыптарға көтереді.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Бірінші санақ жолдары өткізіп жіберілген кестені қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесінің <code>countOrCondition</code> бірінші көрсетілген жолдар санын қамтымайтын кестені қайтарады.\r\n    Жойылатын жолдар саны <code>countOrCondition</code> міндетті емес параметріне байланысты.\r\n    <ul>\r\n    <li> Егер <code>countOrCondition</code> көрсетілмесе, тек бірінші жол жойылады. </li>\r\n    <li> Егер <code>countOrCondition</code> сан болса, сонша жол (жоғарғы жағынан бастап) жойылады. </li>\r\n    <li> Егер <code>countOrCondition</code> шарт болса, жол шартқа сай емес болғанша шартқа сай жолдар жойылады.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірінші жолын жою.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестенің бірінші екі жолын жою.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестенің [CustomerID] <=2 шарты орындалатын бірінші жолдарын жою.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Соңғы N жолдары жойылған кестені қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесінің соңғы <code>countOrCondition</code> жолдарын қамтымайтын кестені қайтарады.\r\n        Жойылатын жолдар саны <code>countOrCondition</code> міндетті емес параметріне байланысты.\r\n    <ul>\r\n    <li> Егер <code>countOrCondition</code> көрсетілмесе, тек соңғы жол жойылады. </li>\r\n    <li> Егер <code>countOrCondition</code> сан болса, сонша жол (төменгі жағынан бастап) жойылады. </li>\r\n    <li> Егер <code>countOrCondition</code> шарт болса, жол шартқа сай емес болғанша шартқа сай жолдар жойылады.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің соңғы жолын жою.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Кестенің [CustomerID] > 2 шарты орындалатын соңғы жолдарын жою.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Ұяшықтардың кемінде біреуінде қатені қамтитын кіріс кестеден жолдар жойылған кестені қайтарады. Егер бағандар тізімі көрсетілген болса, онда тек көрсетілген бағандардағы ұяшықтарда қателер бар-жоғы тексеріледі.",
        "Documentation.LongDescription": "Ұяшықтардың кемінде біреуінде қатені қамтитын кіріс кестеден жолдар жойылған кестені қайтарады. Егер бағандар тізімі көрсетілген болса, онда тек көрсетілген бағандардағы ұяшықтарда қателер бар-жоғы тексеріледі.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Бірінші жолдан қате мәнін жойыңыз.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Жолдары кері ретпен орналасқан кестені қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кірісінен жолдары кері ретпен орналасқан кестені қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі жолдардың ретін кері өзгерту.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Көрсетілген кестенің бағандарының сипаттамасы бар кестені (схема) қайтарады.",
        "Documentation.LongDescription": "<p><code>table</code> бағандарын сипаттайтын кестені қайтарады.</p>\r\n<p>Кестедегі әрбір жол <code>table</code> бағанының сипаттарын көрсетеді:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Баған атауы</b></td>\r\n    <td><b>Сипаттама</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>Бағанның атауы.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td><code>table</code> бағанының 0-ге негізделген орны.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>Баған түрінің атауы.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>Баған түрінің бір түрі.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Бағанда <code>null</code> мәндерінің болуы не болмауын анықтайды.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> және <code>NumericScale</code> өрістерінің сандық негізі (мысалы, негіз-2, негіз-10).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td><code>NumericPrecisionBase</code> көрсетілген негіздегі сандық бағанның дәлдігі. Бұл осы түрдегі мәнмен көрсетуге болатын цифрлардың максималды саны (бөлшек цифрларын қоса алғанда).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td><code>NumericPrecisionBase</code> көрсетілген негіз бойынша сандық бағанның масштабы. Бұл осы түрдегі мәннің бөлшек бөлігіндегі цифрлар саны. <code>0</code> мәні бөлшек бөлігінің цифрларсыз тұрақты масштабын көрсетеді. <code>null</code> мәні масштабтың белгісіз екенін көрсетеді (себебі ол өзгермелі немесе анықталмаған болғандықтан).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>Секундаға жауап беретін күн немесе уақыт мәні бөлімінде қолдау көрсетілетін бөлшек бөлімінің максималды цифрлар саны.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td><code>text</code> бағанында рұқсат етілген таңбалардың максималды саны немесе <code>binary</code> бағанында рұқсат етілген байттардың максималды саны.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Осы бағанның ұзындық бойынша өзгеру мүмкіндігін (<code>MaxLength</code> мәніне дейін) немесе тұрақты өлшемде болуын көрсетеді.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>Дереккөз түрлерінің өз жүйесіндегі баған түрінің атауы (мысалы, SQL Server үшін <code>nvarchar</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>Дереккөздің өз өрнек тіліндегі осы баған мәні үшін әдепкі өрнегі (мысалы, SQL Server үшін <code>42</code> немесе <code>newid()</code>).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>Баған сипаттамасы.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Кіріс кестенің ұяшықтардың кемінде біреуінде қате бар жолдар ғана бар кестені қайтарады. Егер бағандар тізімі көрсетілген болса, онда тек көрсетілген бағандардағы ұяшықтарда қателер бар-жоғы тексеріледі.",
        "Documentation.LongDescription": "Кіріс кестенің ұяшықтардың кемінде біреуінде қате бар жолдар ғана бар кестені қайтарады. Егер бағандар тізімі көрсетілген болса, онда тек көрсетілген бағандардағы ұяшықтарда қателер бар-жоғы тексеріледі.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Жолдарында қателер бар тұтынушылардың аттарын таңдаңыз.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Бірінші санақ жолдары өткізіп жіберілген кестені қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесінің <code>countOrCondition</code> бірінші көрсетілген жолдар санын қамтымайтын кестені қайтарады.\r\n    Өткізіп жіберілетін жолдар саны <code>countOrCondition</code> міндетті емес параметріне байланысты.\r\n    <ul>\r\n    <li> Егер <code>countOrCondition</code> көрсетілмесе, тек бірінші жол өткізіп жіберіледі. </li>\r\n    <li> Егер <code>countOrCondition</code> сан болса, сонша жол (жоғарғы жағынан бастап) өткізіп жіберіледі. </li>\r\n    <li> Егер <code>countOrCondition</code> шарт болса, жол шартқа сай емес болғанша шартқа сай жолдар өткізіп жіберіледі.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірінші жолын өткізіп жіберу.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестенің бірінші екі жолын өткізіп жіберу.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестенің [Price] > 25 шарты орындалатын бірінші жолдарын өткізіп жіберу.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Деректердің бастапқы көзіне қарсы кез келген төменгі ағындағы әрекеттердің орындалуына жол бермейді.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі деректердің бастапқы көзіне қарсы кез келген төменгі ағындағы әрекеттердің орындалуына жол бермейді.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "SQL кестесінен деректерді SQL серверінде сұрау ретінде кез келген төменгі ағындағы әрекеттердің орындалуына жол бермейтіндей етіп алады.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Бағандарды жолдарға және жолдарды бағандарға түрлендіру.",
        "Documentation.LongDescription": "Бағандарды жолдарға және жолдарды бағандарға түрлендіру.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Атау-мән жұптары кестесінің жолдарын бағандарға түрлендіру.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Кестелер жиыны арасындағы қатынастарды алады.",
        "Documentation.LongDescription": "Кестелер жиыны арасындағы қатынастарды алады. <code>tables</code> жиыны шарлау кестесіндегіге ұқсас құрылымға ие болады деп саналады. <code>dataColumn</code> анықтаған бағанда нақты деректер кестелері болады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Терадеректер дерекқорынан SQL кестелердің кестесін және көріністерді қайтарады.",
        "Documentation.LongDescription": "<code>server</code> серверіндегі Teradata дерекқорынан SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Шығару үшін бұрынғы Twilio деректерінің айлар санын енгізіңіз.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Кестелер",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Қатысты Twilio деректері бар кестені шығарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Көрсетілген кесте түрі бағандарының (яғни схема) сипаттамасы бар кестесін қайтарады.",
        "Documentation.LongDescription": "<p><code>tableType</code> бағандарын сипаттайтын кестені қайтарады.</p>\r\n<p>Нәтижесінде шығатын кестенің сипаттамасы үшін <code>Table.Schema</code> құжаттамасын қараңыз.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services арнасы",
        "Documentation.DisplayName": "Azure DevOps Services арнасы",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Azure DevOps ұсынған OData арналарының кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Viva аналитикасы деректеріне қосылу",
        "Documentation.LongDescription": "Апта сайынғы көрсеткіштерді және атрибут деректерін жұмыс орны аналитикасынан импорттау.",
        "Documentation.Examples": [
          {
            "Description": "Бөлімдегі әр өлшенетін қызметкер үшін көрінетін атрибуттары мен апта сайынғы көрсеткіштері бар кестені қайтарады.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#кесте({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "HTML құжатының құрайтын құрылымдарына бөлінген мазмұнын, сонымен бірге, тегтерді жоюдан кейінгі толық құжаттың оның мәтінінің көрінісін қайтарады.",
        "Documentation.LongDescription": "HTML құжатының құрайтын құрылымдарына бөлінген мазмұнын, сонымен бірге, тегтерді жоюдан кейінгі толық құжаттың оның мәтінінің көрінісін қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Негізгі Webtrends көрсеткіштерімен бірге кестені қайтарады.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Webtrends KeyMetrics соңғы нүктесіне қоңырау шалады және барлық деректерді кесте ретінде қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Соңғы 30 күн ішінде 98765 клиент үшін негізгі көрсеткіштердің кестесін қайтарады",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Негізгі көрсеткіштердің кестесі"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Webtrends тіркелгісімен байланысты Профильдің идентфикаторын енгізіңіз.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Қатысты Webtrends деректері бар кестені қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Viva аналитикасы деректеріне қосылу",
        "Documentation.LongDescription": "Апта сайынғы көрсеткіштерді және атрибут деректерін жұмыс орны аналитикасынан импорттау.",
        "Documentation.Examples": [
          {
            "Description": "Бөлімдегі әр өлшенетін қызметкер үшін көрінетін атрибуттары мен апта сайынғы көрсеткіштері бар кестені қайтарады.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#кесте({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "XML құжатының мазмұнын иерархиялық кесте ретінде қайтарады.",
        "Documentation.LongDescription": "XML құжатының мазмұнын иерархиялық кесте ретінде қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "XML құжатының мазмұнын тураланған кестелердің енгізілген жиыны ретінде қайтарады.",
        "Documentation.LongDescription": "XML құжатының мазмұнын тураланған кестелердің енгізілген жиыны ретінде қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Жергілікті xml файлының мазмұнын шығарып алу.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Zendesk тіркелгісінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Қатысты Zendesk деректері бар кестені қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "ADO.NET деректер көзі үшін схема жинағын қайтарады.",
        "Documentation.LongDescription": "<code>providerName</code> провайдер атауы және <code>connectionString</code> байланыс жолы болатын ADO.NET деректер көзі үшін схемалар жинағын қайтарады. <code>connectionString</code> мәтін немесе сипат мәні жұптарының жазбасы болуы мүмкін. Сипат мәндері мәтін немесе нөмір болуы мүмкін. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (бета нұсқасы)",
        "Documentation.Description": "Деректерді Amazon Redshift дерекқорынан импорттаңыз.",
        "Documentation.LongDescription": "Amazon Redshift кластер серверіндегі (<code>server</code>) <code>database</code> дерекқорындағы кестелерді көрсететін кестені қайтарады.  Келесі параметрлерді басқару үшін міндетті емес жазба параметрі (<code>options</code>) көрсетілуі мүмкін:\r\n<ul>\r\n<li><code>Provider Name</code>: Қосылым үшін провайдер атауы ретінде пайдаланылатын мәтін мәні. Бұл Microsoft аутентификациясын қолданғанда пайдаланылады.</li>\r\n<li><code>Batch Size</code>: Серверге бір қоңырау шалу арқылы алынатын жолдар саны.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Analysis Services дерекқорынан кестелік үлгілерді немесе көп өлшемді текшелер кестесін қайтарады.",
        "Documentation.LongDescription": "<code>server</code> серверіндегі <code>database</code> Analysis Services дерекқорынан көп өлшемді текшелер кестесін немесе кестелік үлгілерді қайтарады. Келесі опцияларды басқару үшін қосымша жазба параметрі, <code>options</code>, көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті MDX сұрауы.</li>\r\n<li><code>TypedMeasureColumns</code> : Көпөлшемді немесе кестелі үлгіде көрсетілген түрлердің қосылған өлшеу бағандарының түрлеріне пайдаланылатынын білдіретін логикалық мән. &quot;Жалған&quot; мәніне қойылғанда, &quot;сан&quot; түрі барлық өлшеу бағанына пайдаланылады. Бұл параметрдің әдепкі мәні жалған.</li>\r\n<li><code>Culture</code> : Деректердің тіл мен аймақтық параметрін көрсететін параметр. Бұл &quot;Жергілікті идентификатор&quot; байланыс жолының сипатына сәйкес келеді.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>SubQueries</code> : Байланыс жолындағы &quot;SubQueries&quot; сипатының мәнін орнататын сан (0, 1 немесе 2). Бұл қосалқы таңдаулардағы немесе қосалқы текшелердегі есептелетін элементтердің жұмысын басқарады. (Әдепкі мән 2).</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Көрсетілген Spark кластеріндегі кестелер көрсетілген кестені қайтарады.",
        "Documentation.LongDescription": "Spark кластері <code>хостындағы</code> кестелерді тізбектейтін <code>протоколды</code> пайдаланып кестелерді қайтарады.  Жарамды протоколдар:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Көрсетілген Spark кластеріндегі кестелер көрсетілген кестені қайтарады.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Ұйым және жоба атауларын енгізіңіз.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (тек Boards)",
        "Documentation.LongDescription": "Azure DevOps ұсынған аналитика көріністерінің кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "HDInsight Interactive Query жүйесінен деректерді импорттау",
        "Documentation.LongDescription": "\r\nHDInsight Interactive Query жүйесіндегі <code>дерекқор</code> арқылы көрсетілген HDInsight интерактивті сұрауы <code>серверіндегі</code> HDInsight Interactive Query жүйесінен кестелердің тізімін қайтарады. Порт нөмірі қос нүкте арқылы көрсетіледі. Қосымша <code>опциялар</code> параметрі келесі опцияларды басқару үшін көрсетіледі:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Серверге қосулы әрекетінен кейін бас тартпас бұрын күту уақытын басқаратын ұзақтық. Әдепкі мән драйверге байланысты.</li>\r\n        <li><code>CommandTimeout</code>: Сервер тарапындағы сұраудан бас тартылмас бұрын оның жұмыс істеуіне қанша уақыт рұқсат берілетінін басқаратын ұзақтық. Әдепкі мән драйверге байланысты.</li>\r\n</ul>\r\n <code>Опциялар</code> параметрі [option1 = value1, option2 = value2...] ретінде көрсетіледі."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Деректер түрлерін қоса алғанда, Common Data Model жүйесіндегі нысанның атрибуттарымен байланыстырылған бағандар бар кестені қайтарады.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Деректер түрлерін қоса алғанда, Common Data Model жүйесіндегі нысанның атрибуттарымен байланыстырылған бағандар бар кестені қайтарады. Егер байланыстырылмаған болса, нысан анықтамасынан алынған бағандар қосылады және байланыстырылмаған бағандар жойылады.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Параметрді қолданғаннан кейін текшені қайтарады.",
        "Documentation.LongDescription": "<code>cube</code> үшін <code>arguments</code> бар <code>parameter</code> параметрін қолданғаннан кейін текшені қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Көрсетілген бағандармен салыстырылған төлсипаттарды тасалау арқылы текше үшін сүзгі мәтінмәнінің өлшемділік түйіршіктілігін өзгертеді.",
        "Documentation.LongDescription": "<code>columnNames</code> көрсетілген бағандарымен салыстырылған төлсипаттарды тасалау арқылы <code>cube</code> үшін сүзгі мәтінмәнінің өлшемділік түйіршіктілігін өзгертеді. Сондай-ақ, бағандар текшенің кестелік көрінісінен жойылады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Cube.Dimensions қайтарған өлшемдер жиынтығын алмастырады.",
        "Documentation.LongDescription": "<code>Cube.Dimensions</code> қайтарған өлшемдер жиынтығын алмастырады.\r\n    Мысалы, идентификатор бағанын өлшем атрибутына қосу үшін осы функцияны пайдалануға болады, сонда деректер көзін көрсетілетін мәні бойынша емес, идентификаторы бойынша топтауға болады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Текше функцияларының тізімін қолданады.",
        "Documentation.LongDescription": "<code>cube</code> ішінде <code>transforms</code> текше функцияларының тізімін қолданады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Db2 дерекқорында қолжетімді SQL кестелері мен көріністердің кестесін қайтарады.",
        "Documentation.LongDescription": "<code>database</code> деп аталатын дерекқор нұсқасындағы <code>server</code> серверіндегі Db2 дерекқорында бар SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n<li><code>Implementation</code> : Пайдаланылатын ішкі дерекқор провайдері орындалуын көрсетеді. Жарамды мәндер: &quot;IBM&quot; және &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : Db2 FOR BIT екілік деректерін таңбалар жолдарына кодын ашуға арналған CCSID (кодталған таңбалар жиынтығының идентификаторы) саны. Қолданылуы: орындау = “Microsoft”. Түрлендіруді ажырату үшін 0 мәніне орнатыңыз (әдепкі). Дерекқорды кодтау негізінде түрлендіру үшін, 1 мәніне орнатыңыз. Бағдарлама кодтауына түрлендіру үшін басқа CCSID санын орнатыңыз.</li>\r\n<li><code>PackageCollection</code> : SQL нұсқауларын өңдеу үшін қажет ортақ жиынтықтарды пайдалануды қосу үшін жиынтықтар жинағы үшін жол мәнін көрсетеді (әдепкі мән - &quot;NULLID&quot;). Қолданылады: орындау = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Қосылымның Db2 жалғау шлюзі арқылы жасалып жатқанын-жатпағанын көрсетеді. Іске асыру = &quot;Microsoft&quot; үшін қолданылады.</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Деректер жиынтығын Data.World жүйесінен шығарып алады"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Azure қоймасындағы көрсетілген бөліктен табылған блоб файлдарының сипаттары мен мазмұндарын қамтитын кестені береді.",
        "Documentation.LongDescription": "Azure қоймасындағы URL мекенжайынан, <code>account</code>, табылған әр блоб файлының жолын қамтитын кестені береді. Әр жолда файлдың сипаттары мен олардың мазмұнына сілтеме бар.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Қамтамасыз етілген HTML кодына қатысты көрсетілген CSS селекторларын орындаудың нәтижелерін қамтитын кестені қайтарады.",
        "Documentation.LongDescription": "Берілген <code>html</code> бойынша көрсетілген CSS селекторларын орындау нәтижелері бар кестені қайтарады. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрін беруге болады. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Деректерге қол жеткізу",
        "Documentation.Examples": [
          {
            "Description": "Үлгі html мәтіні мәнінен кестені қайтарады.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Үлгі html мәтіндік мәнінен барлық href шығарып алады.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Тексеру</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Informix дерекқорында қолжетімді SQL кестелерінің кестелері мен көріністерін қайтарады.",
        "Documentation.LongDescription": "<code>database</code> деп аталатын дерекқор данасындағы <code>server</code> серверіндегі Informix дерекқорында бар SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Негізгілер",
        "Documentation.DisplayName": "Marketo.Негізгілер",
        "Documentation.Caption": "Marketo.Негізгілер",
        "Documentation.Description": "Негізгі мәліметтері бар кестені қайтарады.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/leads.json мекенжайында Marketo REST API соңғы нүктесіне қоңырау соғады. <code>leadIds</code> тізіміндегі барлық негізгілер қайтарылады.",
        "Documentation.Examples": [
          {
            "Description": "Үш негізгіге толық мәліметтер қайтарады",
            "Code": "Marketo.Негізгілер(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Берілген негізгілерге арналған толық мәліметтері бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Тіркелгіңізбен байланысты Marketo REST API соңғы нүктесінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Кестелер",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Тиісті Marketo деректері бар кестені қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "MySQL дерекқорында қол жетімді SQL кестелерінің кестесін, көріністерді және сақталған скалярлық функцияларды қайтарады.",
        "Documentation.LongDescription": "<code>database</code> деп аталатын дерекқор данасындағы <code>server</code> серверіндегі MySQL дерекқорында бар SQL кестелері, көріністері және сақталған скаляр функциялардың кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>Encoding</code> : Серверге жіберілген барлық сұрауларды кодтау үшін пайдаланылатын таңбалар жиынын көрсететін TextEncoding мәні (әдепкі мәні — null).</li>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Логикалық мән (true/false), ол серверде Tinyint бағандарына логикалық мәндерді мәжбүрлі түрде беру немесе бермеу керектігін анықтайды. Әдепкі мән - true.</li>\r\n<li><code>OldGuids</code> : Логикалық мән (true/false), ол GUID бағандары ретінде char(36) бағандарының (егер false болса) немесе binary(16) бағандарының (егер true болса) қарастырылатынын анықтайды. Әдепкі мән - false.</li>\r\n<li><code>ReturnSingleDatabase</code> : Логикалық мән (true/false), ол барлық дерекқорлардың барлық кестелерін қайтаруды (егер false болса) немесе көрсетілген дерекқордың кестелері мен көріністерін қайтаруды (егер true болса) орнатады. Әдепкі мән - false.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Деректерді IBM Netezza дерекқорынан импорттау.",
        "Documentation.LongDescription": "\r\n<code>Сервердегі</code> Netezza серверінің <code>дерекқорынан</code> Netezza кестелерінің, көріністерінің кестесін және сақталған функцияларды қайтарады. Сервермен бірге қосымша қос нүктемен бөліп портты көрсетуге болады. Келесі параметрлерді басқару үшін қосымша жазба параметрін, <code>параметрлерді</code> көрсетуге болады:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: қайтарылған мәндер бойынша навигация сипаттарын жасау немесе жасамау керектігін орнататын логикалық мән (шын/жалған) (әдепкі мәні - шын)</li>\r\n        <li><code>HierarchicalNavigation</code>: кестелерді олардың схема атаулары бойынша топтап көру мүмкіндігін орнататын логикалық мән (шын/жалған) (әдепкі мәні - жалған)</li>\r\n        <li><code>ConnectionTimeout</code>: сервермен байланыс орнату әрекетін тоқтатуға дейін қанша уақыт күту керектігін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n        <li><code>CommandTimeout</code>: сервер жақтағы сұрау тоқтатылғанша қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>NormalizeDatabaseName</code>: дерекқор атауын жоғарғы регистрге қалыптандыру немесе оны дәлме-дәл түсіндіру керектігін орнататын логикалық мән (шын/жалған) (әдепкі мәні - шын).</li>\r\n</ul>\r\nЖазба параметрі [option1 = value1, option2 = value2...] түрінде көрсетіледі.",
        "Documentation.Examples": [
          {
            "Description": "IBM Netezza жобасындағы кестелерді тізімде көрсету.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "ODBC деректер көзіндегі сұрауды іске қосудың нәтижесін қайтарады.",
        "Documentation.LongDescription": "ODBC көмегімен <code>connectionString</code> байланыс жолы арқылы <code>query</code> орындау нәтижесін қайтарады. <code>connectionString</code> мәтін немесе сипат мәні жұптарының жазбасы болуы мүмкін. Сипат мәндері мәтін немесе сан болуы мүмкін. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні 15 секунд болады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Көрсетілген қосылым жолына қатысты қарапайым сұраудың орындау нәтижесін қайтару.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "OLE DB деректер көзінде сұрауды іске қосудың нәтижесін қайтарады.",
        "Documentation.LongDescription": "OLE DB көмегімен <code>connectionString</code> байланыс жолы арқылы <code>query</code> орындау нәтижесін қайтарады. <code>connectionString</code> мәтін немесе сипат мәні жұптарының жазбасы болуы мүмкін. Сипат мәндері мәтін немесе сан болуы мүмкін. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "SQL кестелерінің кестесін және PostgreSQL дерекқорында қол жетімді көріністерді қайтарады.",
        "Documentation.LongDescription": "<code>database</code> деп аталатын дерекқор данасындағы <code>server</code> серверіндегі PostgreSQL дерекқорында бар SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Snowflake есептеу қоймасынан деректерді импорттау.",
        "Documentation.LongDescription": "<code>Серверде</code> орналасқан Snowflake есептеу <code>қоймасында</code> кестелердің тізімін жасайтын кестені қайтарады. Қосымша жазба параметрі, <code>параметрлер</code> келесі параметрлерді басқару үшін көрсетілуі мүмкін:\r\n<ul>\r\n<li><code>Role</code>: қосылым үшін рөл атауы ретінде пайдаланылатын мәтіндік мән.</li>\r\n<li><code>CreateNavigationProperties</code>: қайтарылған мәндер бойынша навигация сипаттарын жасау немесе жасамау керектігін орнататын логикалық (true/false) мән (әдепкі мәні: true)</li>\r\n<li><code>ConnectionTimeout</code>: Snowflake бағдарламасынан алынатын желі жауаптарын күтетін секунд саны.</li>\r\n<li><code>CommandTimeout</code>: сұраудың орындалуын күтетін секунд саны.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Snowflake қоймасында кестелердің тізімін жасау.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Көрсетілген Spark кластеріндегі кестелер көрсетілген кестені қайтарады.",
        "Documentation.LongDescription": "Spark кластері <code>хостындағы</code> кестелерді тізбектейтін <code>протоколды</code> пайдаланып кестелерді қайтарады.  Жарамды протоколдар:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Azure Spark данасындағы кестелерді тізімдеңіз.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "SQL Server дерекқорынан SQL кестелерінің кестесін, көріністерді және сақталған функцияларды қайтарады.",
        "Documentation.LongDescription": "<code>server</code> серверіндегі <code>database</code> SQL Server дерекқорынан SQL кестелері, көріністері және сақталған функциялар кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Жасалған SQL сұрауындағы &quot;maxdop&quot; сұрауы сөйлемінің мәнін орнататын сан.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n<li><code>MultiSubnetFailover</code> : Логикалық мән (true/false), ол байланыс жолындағы &quot;MultiSubnetFailover&quot; сипатының мәнін орнатады (әдепкі мән - false).</li>\r\n<li><code>UnsafeTypeConversions</code> : Егер &quot;шын&quot; болса, сәтсіз болуы мүмкін және бүкіл сұраудың сәтсіз болуына әкелуі мүмкін түр түрлендірулерін қысқартуға әрекет жасайтын логикалық мән (шын/жалған). Жалпы пайдалану үшін ұсынылмайды.</li>\r\n<li><code>ContextInfo</code> : Әр пәрменді орындаудан бұрын CONTEXT_INFO орнату үшін пайдаланылатын екілік мән.</li>\r\n<li><code>OmitSRID</code> : Егер &quot;шын&quot; болса, геометриялық және географиялық түрлерден Well-Known Text пішіміндегі деректерді жасағанда SRID өткізіп жіберетін логикалық мән (шын/жалған).</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Логикалық мән (true немесе false) &quot;true&quot; болса, бір сервердегі дерекқорлар бойынша сұрауды қысқарту мүмкіндігіне қолдау көрсетіледі. Әдепкі мән — &quot;false&quot;.</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "SQL кестелерінің кестесін және Sybase дерекқорында қол жетімді көріністерді қайтарады.",
        "Documentation.LongDescription": "<code>database</code> деп аталатын дерекқор данасындағы <code>server</code> серверіндегі Sybase дерекқорында бар SQL кестелері мен көріністерінің кестесін қайтарады. Портты қос нүктемен бөлу арқылы сервермен бірге қосымша көрсетуге болады. <code>options</code> қосымша жазба параметрін келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Логикалық мән (true/false), ол қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсетеді (әдепкі мән - true).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Навигация сипаттарының атауларын жасау үшін пайдаланылатын функция.</li>\r\n<li><code>Query</code> : Деректерді шығаруға пайдаланылатын жергілікті SQL сұрауы. Сұрау бірнеше нәтиже жиынтығын шығарса, біріншісі ғана қайтарылады.</li>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>ConnectionTimeout</code> : Сервермен байланыс орнату әрекетінен бас тартуға дейінгі күту мерзімін басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді.</li>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n</ul>\r\n\r\n    Мысалы, жазба параметрі [option1 = value1, option2 = value2...] немесе [Query = \"select ...\"] ретінде көрсетіледі.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Анық орын мәндері бағанды үстейді.",
        "Documentation.LongDescription": "<code>table</code> анық орын мәндері бар <code>newColumnName</code> атты бағанды үстейді.\r\n    <code>initialValue</code> міндетті емес мәні, бастапқы индекс мәні. <code>increment</code> міндетті емес мәні әр индекс мәнін қаншаға арттыру керектігін көрсетеді.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеге \"Index\" деп аталатын индекс бағанын қосу.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Кестеге \"Index\" деп аталатын индекс бағанын 10-мәннен бастап және 5 қадамға арттырып қосу.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Кестеде тізімдер бағаны берілген болса, оның әр мән үшін жолдың көшірмесін тізімінде жасау.",
        "Documentation.LongDescription": "<code>table</code> берілген болса, мұндағы <code>column</code> — мәндердің тізімі, жолды әр мән үшін тізімге бөледі. Басқа бағандардағы мәндер жасалған әр жаңа жолда қайталанады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі [Name] тізім бағанын бөлу.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Алдыңғы ұяшықтың мәнін бағандағы төмендегі нөл мәнді ұяшықтарға толтырады.",
        "Documentation.LongDescription": "Көрсетілген <code>table</code> ішінен кестені қайтарады, мұнда алдыңғы ұяшықтың мәні көрсетілген <code>columns</code> ішіндегі null мәнді ұяшықтарға толтырылады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеден жоғарыдағы мәнмен толтырылған [Place] бағанында null мәндері бар кестені қайтару.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Ұяшықтың мәнін бағандағы жоғарыдағы нөл мәнді ұяшықтарға толтырады.",
        "Documentation.LongDescription": "Көрсетілген <code>table</code> ішінен кестені қайтарады, мұнда келесі ұяшықтың мәні көрсетілген <code>columns</code> ішіндегі жоғарыдағы null мәнді ұяшықтарға толтырылады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеден төмендегі мәнмен толтырылған [Column2] бағанында null мәндері бар кестені қайтару.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Кестеде берілген мәтінді қамтитын барлық жолдарды қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесіндегі <code>text</code> мәтінін қамтитын жолдарды қайтарады. Егер мәтін табылмаса, бос кесте қайтарылады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі \"Bob\" болатын жолдарды анықтау.",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Көрсетілген бірінші санақ жолдарын қайтарады.",
        "Documentation.LongDescription": "<code>countOrCondition</code> мәніне байланысты <code>table</code> кестесінің бірінші жол(дар)ын қайтарады:\r\n    <ul>\r\n    <li> Егер <code>countOrCondition</code> сан болса, онда көп жол (жоғарғы жағынан бастап) қайтарылады. </li>\r\n    <li> Егер <code>countOrCondition</code> шарт болса, жол шартқа сай емес болғанша шартқа сай жолдар қайтарылады.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірінші екі жолын анықтау.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Кестедегі [a] > 0 болатын бірінші жолдарды анықтау.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Бөлінген кестелердің жиынтығын біріктіру нәтижесі болып табылатын кестені қайтарады.",
        "Documentation.LongDescription": "Бөлінген кестелердің жиынтығын біріктіру нәтижесі болып табылатын кестені береді, <code>partitions</code>. <code>partitionColumn</code> - қосу қажет баған атауы. Әдепкі баған түрі <code>кез келген</code>, бірақ <code>partitionColumnType</code> арқылы көрсетуге болады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Элемент түрін <code>{number}</code> тізімінен табыңыз.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Соңғы көрсетілген жолдар санын қайтарады.",
        "Documentation.LongDescription": "<code>countOrCondition</code> мәніне байланысты <code>table</code> кестесінен соңғы жол(дар)ды қайтарады:\r\n    <ul>\r\n    <li> Егер <code>countOrCondition</code> сан болса, (соңы - <code>countOrCondition</code>) орнынан бастап көп жол қайтарылады. </li>\r\n    <li> Егер <code>countOrCondition</code> шарт болса, жол шартқа сай емес болғанша, арту ретімен осы шартқа сай жолдар қайтарылады.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің соңғы екі жолын анықтау.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Кестеде [a] > 0 болатын соңғы жолдарды анықтау.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Бағандардың барлығының көрсетілген мәтін түрінде префиксі бар кестені қайтарады.",
        "Documentation.LongDescription": "Берілген <code>table</code> ішіндегі барлық баған атауларында <code>prefix</code> көрсетілген мәтінінен тұратын префиксі және <code><code>prefix</code>.ColumnName</code> түріндегі кезеңі болатын кестені қайтарады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде бағандарға \"MyTable\" префиксін қосу.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Көрсетілген ауытқуда басталатын жолдарды қайтарады.",
        "Documentation.LongDescription": "<code>table</code> ішінен көрсетілген <code>offset</code> басталатын жолдарды қайтарады. <code>count</code> міндетті емес параметрі қайтарылатын жолдар санын көрсетеді. Әдепкі бойынша, ауытқудан кейінгі барлық жолдар қайтарылады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде 1 ауытқуынан басталатын барлық жолдарды қайтару.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестеде 1 ауытқуынан басталатын бір жолды қайтару.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Көрсетілген бағандарды жояды.",
        "Documentation.LongDescription": "Көрсетілген <code>columns</code> берілген <code>table</code> ішінен жояды.\r\n    Егер берілген баған жоқ болса, <code>missingField</code> міндетті емес параметрі баламалы әрекетті (мысалы, <code>MissingField.UseNull</code> немесе <code>MissingField.Ignore</code>) көрсетпесе, қате туралы хабар қайтарылады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеден [Phone] бағанын жою.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Кестеден жоқ бағанды ​​алып тастап көріңіз.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Кестеден көрсетілген жолдардың барлық даналарын жояды.",
        "Documentation.LongDescription": "<code>table</code> ішінен көрсетілген <code>rows</code> барлық даналарын жояды.\r\n    Кестенің жолдарын салыстыруды басқару үшін <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> кестесінен [a = 1] шартын орындайтын барлық жолдарды жою.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Көрсетілген жолдар санын жояды.",
        "Documentation.LongDescription": "Көрсетілген <code>offset</code> бастап <code>table</code> басынан <code>count</code> жолды жояды. <code>count</code> параметрі көрсетілмеген болса, 1 әдепкі саны пайдаланылады. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеден бірінші жолды жою.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестеден 1-орындағы жолды жою.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестеден 1-орында басталатын екі жолды жою.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "{old, new} пішінін қайта атау(лар)ды қолданады.",
        "Documentation.LongDescription": "<code>table</code> кестесіндегі бағандарды көрсетілген қайта атауларды орындайды. <code>renames</code> ауыстыру әрекеті тізімде көрсетілген екі мәннен, бұрынғы баған атауынан және жаңа баған атауынан, тұрады.\r\n    Егер баған жоқ болса, <code>missingField</code> міндетті емес параметрі баламаны (мысалы, <code>MissingField.UseNull</code> немесе <code>MissingField.Ignore</code>) көрсетпесе, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде \"CustomerNum\" баған атауын \"CustomerID\" деп ауыстыру.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Кестеде \"CustomerNum\" баған атауын \"CustomerID\" деп және \"PhoneNum\" баған атауын \"Phone\" деп ауыстыру.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Кестеде \"NewCol\" баған атауын \"NewColumn\" деп ауыстыру және баған жоқ болса, елемеу.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Көрсетілген ретпен орналасқан бағандары бар кестені қайтарады.",
        "Documentation.LongDescription": "Кіріс <code>table</code> ішінен <code>columnOrder</code> арқылы көрсетілген ретпен орналасқан бағандар бар кестені қайтарады. Тізімде көрсетілмеген бағандардың ретін өзгерту мүмкін емес.\r\n     Егер баған жоқ болса, <code>missingField</code> міндетті емес параметрі баламаны (мысалы, <code>MissingField.UseNull</code> немесе <code>MissingField.Ignore</code>) көрсетпесе, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [Phone] және [Name] бағандарының ретін ауыстыру.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Кестеде [Phone] және [Address] бағандарының ретін ауыстыру немесе \"MissingField.Ignore\" пайдалану. Ол кестені өзгертпейді, себебі [Address] бағаны жоқ.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Кестелердің жолдарын көрсетілген рет қайталайды.",
        "Documentation.LongDescription": "Кіріс <code>table</code> ішінен жолдары көрсетілген <code>count</code> рет қайталанатын кестені қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі жолдарды екі рет қайталау.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Тиісті берілген мәні бар көрсетілген бағандардағы қате мәндерін ауыстырады.",
        "Documentation.LongDescription": "<code>table</code> көрсетілген бағандарындағы қате мәндерін <code>errorReplacement</code> тізіміндегі жаңа мәндермен ауыстырады. Тізімнің пішімі - {{column1, value1}, …}. Әр бағанға бір ғана ауыстырғыш мән болуы мүмкін, бағанды бірнеше рет көрсету қатеге әкеледі.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеде қате мәнін \"әлем\" мәтінімен ауыстыру.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Кестеде қате мәнін А бағанында \"сәлем\" мәтінімен және B бағанында \"әлем\" мәтінімен ауыстыру.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Көрсетілген кестенің кілттерін ауыстырады.",
        "Documentation.LongDescription": "Көрсетілген кестенің кілттерін ауыстырады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бұрыннан бар кілттерін ауыстыру.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Көрсетілген жолдардың барлығын көрсетілген жолдармен ауыстырады.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі барлық көрсетілген жолдарды көрсетілгендермен ауыстырады. Ауыстыратын жолдар және ауыстырулар <code>replacements</code> ішінде {old, new} пішімдерімен көрсетіледі.\r\n    Кестенің жолдарын салыстыруды басқару үшін <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [a = 1, b = 2] және [a = 2, b = 3] жолдарын [a = -1, b = -2], [a = -2, b = -3] жолдарымен ауыстыру.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Тек көрсетілген бағандар бар кестені қайтарады.",
        "Documentation.LongDescription": "Тек көрсетілген <code>columns</code> бар <code>table</code> қайтарады.\r\n    <ul>\r\n       <li><code>table</code>: көрсетілген кесте.</li>\r\n       <li><code>columns</code>: <code>table</code> кестесінен қайтарылатын бағандар тізімі. Қайтарылған кестедегі бағандар <code>columns</code> ішінде тізілген ретпен орналасады.</li>\r\n       <li><code>missingField</code>: <i>(міндетті емес)</i> Баған болмаса, не істеу керек.  Мысал: <code>MissingField.UseNull</code> немесе <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Тек [Name] бағанын қосыңыз.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Тек [CustomerID] және [Name] бағандарын қосыңыз.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Егер қосылған баған жоқ болса, әдепкі нәтиже қате болып табылады.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Егер қосылған баған жоқ болса, <code>MissingField.UseNull</code> опциясы null мәндерден тұратын баған жасайды.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Шарттың функциясына сәйкес жолдарды таңдайды.",
        "Documentation.LongDescription": "<code>table</code> ішінен <code>condition</code> таңдауына сәйкес жолдар кестесін қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі [CustomerID] бағанындағы мәндер 2-ден үлкен болатын жолдарды таңдаңыз.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Кестедегі атауларда \"B\" жоқ жолдарды таңдаңыз.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Кестені бір немесе бірнеше баған атауын және салыстыру шартын пайдаланып сұрыптайды.",
        "Documentation.LongDescription": "<code>table</code> бір немесе бірнеше баған атауын және { { col1, comparisonCriteria }, {col2} } түріндегі міндетті емес <code>comparisonCriteria</code> пайдаланып сұрыптайды.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Кестені \"OrderID\" бағаны бойынша сұрыптау.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Кестені \"OrderID\" бағаны бойынша кему ретімен сұрыптау.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Кестені \"CustomerID\", содан кейін \"OrderID\" бағаны бойынша сұрыптау, \"CustomerID\" өсу ретімен болады.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Берілген функцияны пайдалану арқылы бағанды түрлендіреді.",
        "Documentation.LongDescription": "Берілген <code>nameGenerator</code> функциясы арқылы баған атауларын түрлендіреді. Жарамды опциялар:\r\n    <div>\r\n      <code>MaxLength</code> жаңа баған атауларының максималды ұзындығын білдіреді. Берілген функцияда баған атауы ұзын болса, ол қысқартылады.\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> жаңа баған атауларын жасау кезінде салыстыруды басқару үшін қолданылады. Салыстыру функцияларын пернетақта есебімен немесе тіл және аймақ параметрлерін есепке алатын салыстыру үшін қолдануға болады.\r\n    </div>\r\n    <div>\r\n      Формула тілінде келесі ендірілген салыстыру функциялары бар:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n      <li> <code>Comparer.FromCulture</code>: аймақтық параметрлер бойынша салыстыру үшін пайдаланылады</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>#(tab)</code> таңбасын баған аттарынан алып тастау",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Ұзындығы 6 регистрді елемейтін атауларды жасау үшін баған атауларын түрлендіріңіз.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Белгілі бір мәдениетті пайдаланып, { column, type } түріндегі түр түрлендіру(лер)ін қолданады.",
        "Documentation.LongDescription": "<code>typeTransformations</code> (мұндағы пішім — { column name, type name}) параметрінде көрсетілген бағандарға түрлендіру әрекетін қолдану арқылы, <code>culture</code> параметрінде көрсетілген мәдениетті (мысалы, \"en-US\") пайдаланып, кіріс <code>table</code> ішінен кестені қайтарады.\r\n    Егер баған жоқ болса, ерекшелік жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[a] бағанындағы сандық мәндерді <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесінен алынған мәтіндік мәндерге түрлендіру.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Бір немесе бірнеше бағанның мәндерін түрлендіреді.",
        "Documentation.LongDescription": "<code>table</code> тізімінде көрсетілген әрбір баған әрекетін қолдану арқылы <code>transformOperations</code> түрлендіреді (мұнда пішім: { column name, transformation } немесе { column name, transformation, new column type }).\r\n    Егер <code>defaultTransformation</code> көрсетілсе, ол <code>transformOperations</code> тізімінде жоқ барлық бағандарға қолданылады.\r\n    Егер <code>transformOperations</code> тізімінде көрсетілген баған болмаса, <code>missingField</code> қосымша параметрі баламаны көрсетпесе (мысалы, <code>MissingField.UseNull</code> немесе <code>MissingField.Ignore</code>) ерекшелік шығарылады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[A] бағанындағы мәтіндік мәндерді сандық мәнге және [B] бағанындағы сандық мәндерді мәтінге түрлендіріңіз.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Жоқ бағандарды елемей, жоқ [X] бағанындағы сандық мәндерді мәтіндік мәндерге түрлендіріңіз.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Жоқ [X] бағанындағы сандық мәндерді мәтіндік мәндерге түрлендіріңіз, жоқ бағандарда \"null\" мәні болады.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "[B] бағанындағы сандық мәндерді көбейтіп, оларды мәтіндік мәндерге түрлендіріңіз, ал барлық басқа бағанды сандарға түрлендіріңіз.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Кестені жасайды немесе оны сұрау және әрекет операциялары үшін пайдаланушы анықтайтын өңдегіштермен кеңейтеді.",
        "Documentation.LongDescription": "<p>Операция көрініске қолданылатын кезде, <code>table</code> көрсетілген функциялар операцияның әдепкі орындалу ретінің орнына пайдаланылатын <code>handlers</code> көрінісін қайтарады.</p>\r\n<p>Егер <code>table</code> көрсетілген болса, барлық өңдегіш функциялары міндетті емес болып табылады. Егер <code>table</code> көрсетілмесе, <code>GetType</code> және <code>GetRows</code> өңдегіш функциялары міндетті болады. Егер операция үшін өңдегіш функциясы көрсетілмесе, <code>table</code> үшін операцияның әдепкі орындалу реті қолданылады (<code>GetExpression</code> жағдайынан басқа).</p>\r\n<p>Өңдегіш функциялары <code>table</code> үшін қолданылған операцияның нәтижесіне семантикалық эквивалентті мәнді қайтаруы тиіс (немесе <code>GetExpression</code> жағдайындағы алынатын көріністі).</p>\r\n<p>Егер өңдегіш функциясы қате шығарса, көрініске операцияның әдепкі орындалу реті қолданылады.</p>\r\n<p><code>Table.View</code> — M сұрауларын дереккөзге сәйенс сұрауларға түрлендіру (мысалы, M сұрауларынан T-SQL нұсқауларын жасау).</p>\r\n<p><code>Table.View</code> туралы толығырақ сипаттама алу үшін жарияланған Power Query реттелмелі қосқыш құжаттарын қараңыз.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Жолдардың түрін немесе санын анықтау үшін жолға қатынасу рұқсатын қажет етпейтін негізгі көріністі жасаңыз.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Ұйым және жоба атауларын енгізіңіз.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (тек Boards)",
        "Documentation.LongDescription": "Azure DevOps ұсынған аналитика көріністерінің кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Деректерді Vertica жүйесінен импорттау",
        "Documentation.LongDescription": "<code>Database</code> параметрі арқылы көрсетілген дерекқордағы <code>server</code> параметрі арқылы көрсетілген серверде қолжетімді схемалар кестесін қайтарады.\r\nҚосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: Серверге қосылу әрекетін тоқтатуға дейінгі күту уақытын басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді болады.</li>\r\n    <li><code>CommandTimeout </code>: Сервер жақтағы сұраудың бас тартқанша қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні драйверге тәуелді болады.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Vertica жүйесінде кестелер тізімін көрсету"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Webtrends ішінен контент есебі бар кестені қайтарады.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Берілген Webtrends есеп беру соңғы нүктесіне қоңырау шалады және барлық деректерді кесте ретінде қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Соңғы 30 күн ішіндегі деректер үшін Webtrends кірушілері есептерінің соңғы нүктесіне қоңырау шалады",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Кіруші деректерінің кестесі"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Көрсетілген домендегі немесе ешқайсысы көрсетілмеген болса, ағымдағы компьютер доменіндегі ормандағы Active Directory домендерінің тізімін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген домендегі немесе ешқайсысы көрсетілмеген болса, ағымдағы компьютер доменіндегі ормандағы Active Directory домендерінің тізімін қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "ADO.NET деректер көзінде жергілікті сұрауды іске қосу нәтижелерін қайтарады.",
        "Documentation.LongDescription": "<code>providerName</code> ADO.NET провайдері арқылы <code>connectionString</code> байланыс жолы көмегімен <code>query</code> орындау нәтижесін қайтарады. <code>connectionString</code> мәтін немесе сипат мәні жұптарының жазбасы болуы мүмкін. Сипат мәндері мәтін немесе сан болуы мүмкін. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Бас тартылғанға дейін серверлік сұраудың қанша уақыт орындалатынын басқаратын ұзақтық. Әдепкі мәні он минут болады.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : Windows аутентификациясына арналған SQL серверімен үйлесімді байланыс жолының параметрін шығаруды анықтайтын (шын/жалған) логикалық мән. Әдепкі мән шын.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Adobe Analytics қызметінде есептер жиынтықтарын қайтарады.",
        "Documentation.LongDescription": "Adobe Analytics қызметінен көп өлшемді жиынтықтар кестесін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> қосымша жазба параметрін көрсетуге болады:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Логикалық мән (true/false), ол кестелерді олардың схема атаулары бойынша топтап көру немесе көрмеу керектігін анықтайды (әдепкі мән - false).</li>\r\n<li><code>MaxRetryCount</code> : Сұрау нәтижесі үшін сауалнама кезіндегі орындалатын қайталаулар саны. Әдепкі мәні 120 болады.</li>\r\n<li><code>RetryInterval</code> : Қайталау әрекеттері арасындағы уақыт мерзімі. Әдепкі мәні 1 секунд болады.</li>\r\n<li><code>Implementation</code> : Adobe Analytics API нұсқасын көрсетеді. Жарамды мәндер: &quot;2.0&quot;. Әдепкі бойынша API 1.4 нұсқасын пайдаланады.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Hive LLAP ішінен деректерді импорттау",
        "Documentation.LongDescription": "\r\nТаңдалған <code>протоколды</code> пайдаланып, Hive LLAP <code>серверінде</code> <code>дерекқор</code> арқылы көрсетілген Hive LLAP ішінен кестелер тізімін қайтарады. Порт нөмірі сервермен бірге қос нүкте арқылы көрсетілуі мүмкін. Thrift транспорт протоколы \"Standard\", \"HTTP\" мәндері бар тізімделген түр болып табылады. Қосымша <code>опциялар</code> параметрі келесі опцияларды басқару үшін көрсетілуі мүмкін:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: Серверге қосуылу әрекетінен бас тартуға дейінгі күту уақытын басқаратын ұзақтық. Әдепкі мән драйверге байланысты.</li>\r\n        <li><code>CommandTimeout</code>: Сервер тарапындағы сұраудан бас тартылмас бұрын оның жұмыс істеуіне қанша уақыт рұқсат берілетінін басқаратын ұзақтық. Әдепкі мән драйверге байланысты.</li>\r\n</ul>\r\n <code>Опциялар</code> параметрі [option1 = value1, option2 = value2...] ретінде көрсетіледі."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017-5-1 және 2017-6-15 аралығындағы жиынтықтардың деректерін алу",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция 2017-5-1 және 2017-6-15 аралығындағы жиынтықтардың деректерін қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017 жылдың сәуір айы үшін жиынтықтардың деректерін алу.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция 2017-4-1 және 2017-4-30 аралығындағы деректерді қайтарады"
          },
          {
            "Description": "Бүгінгі күнді 2017-6-15 деп қабылдап, 2017 жылдың сәуір айынан бастап қазірге дейінгі жиынтықтардың деректерін алу.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "Функция 2017-4-1 және 2017-6-15 аралығындағы деректерді қайтарады"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure шығындарын басқару",
        "Documentation.Description": "Azure шығындарын басқару",
        "Documentation.DisplayName": "Azure шығындарын басқару",
        "Documentation.LongDescription": "Azure шығындарын басқару",
        "Documentation.Name": "Azure шығындарын басқару"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Ұйым және жоба атауларын енгізіңіз.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps ұсынған OData арналарының кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Dataverse нұсқасына қосылу (Dynamics 365 және PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Көрсетілген өлшемділік кестесін текшенің сүзгі мәтінмәніне біріктіреді және көрсетілген өлшемділік төлсипаттарының жиынын кеңейту арқылы сүзгі мәтінмәнінің өлшемділік түйіршіктілігін өзгертеді.",
        "Documentation.LongDescription": "<code>dimensionSelector</code> көрсетілген өлшемділік кестесін текшенің <code>cube</code> сүзгі мәтінмәнімен біріктіреді және өлшемделік төлсипаттарының <code>attributeNames</code> көрсетілген жиынын кеңейту арқылы өлшемділік түйіршіктілігін өзгертеді. Көрсетілмеген болса, өлшемділік төлсипаттары <code>newColumnNames</code> немесе <code>attributeNames</code> атты бағандар бар кестелік көрініске қосылады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Текшеге әр жолдың мәтінмәнінде қолданылған өлшеу нәтижелерін қамтитын бағанды қосады.",
        "Documentation.LongDescription": "<code>cube</code> ішіне әр жолдың мәтінмәнінде қолданылған <code>measureSelector</code> өлшеу нәтижелерін қамтитын <code>column</code> атты бағанды қосады. Өлшеуді қолдануға өлшемділік түйіршіктілігіндегі және бөлудегі өзгертулер әсер етеді. Өлшеу мәндері белгілі бір текше әрекеттері орындалғаннан кейін реттеледі.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ортасын және компаниясын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Релеванттық Dynamics 365 Business Central деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ортасын және компаниясын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Релеванттық Dynamics 365 Business Central деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ортасын және компаниясын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Релеванттық Dynamics 365 Business Central деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Dynamics 365 Business Central ортасын және компаниясын енгізіңіз.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Релеванттық Dynamics 365 Business Central деректері бар кестені қайтарады. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Ағымдағы Excel жұмыс кітабының контентін қайтарады.",
        "Documentation.LongDescription": "Ағымдағы Excel жұмыс кітабының мазмұнын қайтарады. Ол кестелерді, аталған ауқымдарды және динамикалық массивтерді қайтарады. <code>Excel.Workbook</code> кодынан айырмашылығы, ол парақтарды қайтармайды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Microsoft Exchange тіркелгісінен мазмұн кестесін қайтарады.",
        "Documentation.LongDescription": "<code>mailboxAddress</code> Microsoft Exchange тіркелгісінен мазмұнды қайтарады. Егер <code>mailboxAddress</code> көрсетілмесе, тіркелгі деректері үшін әдепкі тіркелгі пайдаланылады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Қойма",
        "Documentation.Caption": "Қойма",
        "Documentation.Description": "Деректерді деректер қоймаларынан импорттайды",
        "Documentation.LongDescription": "Деректерді деректер қоймаларынан импорттайды"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Google Analytics тіркелгілерін қайтарады.",
        "Documentation.LongDescription": "Ағымдағы тіркелгі деректерінен қолжетімді Google Analytics тіркелгілерін қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Google BigQuery дерекқорынан деректерді импорттау.",
        "Documentation.LongDescription": "\r\n      Google BigQuery қызметінде қолжетімді жобалар тізімі бар кестені қайтарады. Келесі параметрлерді басқару үшін <code>параметрлер</code> қосымша жазба параметрін көрсетуге болады:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: Серверге қосылу әрекетінен бас тартуға дейінгі күту қажет уақытты басқаратын ұзақтық. Әдепкі мәні - ODBC байланысты күту уақыты мәні.</li>\r\n        <li><code>CommandTimeout</code>: Сервер жақтағы сұрау бас тартқанға дейін қанша уақыт орындалатынын басқаратын ұзақтық.</li>\r\n        <li><code>BillingProject</code>: Шот ұсыну жобасының идентификаторы. Әдепкі мәні - бірінші қолжетімді жоба.</li>\r\n      <li><code>UseStorageApi</code>: Үлкен нәтиже жиынтықтары үшін BigQuery Storage API бағдарламасын пайдалану керектігін анықтайды. Әдепкі мәні - Storage API бағдарламасын пайдалану үшін шын. Storage API бағдарламасын пайдаланбау үшін жалған мәнге орнатыңыз.</li>\r\n      </ul>\r\n    Жазба параметрі былай көрсетіледі: [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Google BigQuery қызметінде қолжетімді жобалар тізімін көрсету",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Лейкхаус",
        "Documentation.Caption": "Лейкхаустан деректерді импорттау",
        "Documentation.Description": "Лейкхаустан деректерді импорттау",
        "Documentation.LongDescription": "Қатынасыңыз бар барлық лейкхаустарға қосылыңыз және пайдаланғыңыз келетін нысандарды таңдаңыз"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Негізгі MailChimp деректері бар кестені қайтарады.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Негізгі MailChimp деректері бар кестені қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Негізгі MailChimp деректері бар кестені қайтарады.",
            "Code": "MailChimp.Tables()",
            "Result": "Негізгі MailChimp деректері бар кесте."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Әрекеттер",
        "Documentation.DisplayName": "Marketo.Әрекеттер",
        "Documentation.Caption": "Marketo.Әрекеттер",
        "Documentation.Description": "Кестені негізгі әрекеттермен қайтарады.",
        "Documentation.LongDescription": "<code>url</code>/rest/v1/activities.json мекенжайында Marketo REST API соңғы нүктесіне қоңырау соғады. <code>startTime</code> бері болған <code>activityIds</code> тізіміндегі барық әрекеттер қайтарылады.",
        "Documentation.Examples": [
          {
            "Description": "\"Веб-бетке кіру\" әрекеттерінің кестесін 2015 жылдың 1 қарашасынан бері қабылдайды.",
            "Code": "Marketo.Әрекеттер(\"https://100-AAA-999.mktorest.com/rest\", #күні(2015,11,1), {1})",
            "Result": "Қарашаның 1-нен бергі барлық \"Веб-бетке кіру\" әрекеттерінің толық мәліметтері бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PVE_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI деректер ағындары (бұрынғы нұсқа)",
        "Documentation.Caption": "Power BI деректер ағынынан деректерді импорттау",
        "Documentation.LongDescription": "Сізге қолжетімді барлық Power BI деректер ағындарына қосылып, пайдаланғыңыз келген нысандарды таңдаңыз."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Деректер киоскілері",
        "Documentation.Caption": "Деректер киоскілері",
        "Documentation.Description": "Деректер киоскілерінен деректерді импорттау",
        "Documentation.LongDescription": "Деректер киоскілерінен деректерді импорттау"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Деректер ағындары",
        "Documentation.Caption": "Деректерді деректер ағынынан импорттау",
        "Documentation.Description": "Деректерді деректер ағынынан импорттау",
        "Documentation.LongDescription": "Қатынасыңыз бар барлық деректер ағындарына қосылу және пайдаланғыңыз келетін нысандарды таңдау"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "QuickBooks Online қызметінен деректерді импорттау.",
        "Documentation.LongDescription": "\r\n      QuickBooks Online қызметінде қолжетімді кестелер тізімі бар кестені қайтарады. Келесі параметрлерді басқару үшін <code>options</code> қосымша жазба параметрін көрсетуге болады:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: серверге қосылу әрекетінен бас тартуға дейінгі күту қажет уақытты басқаратын ұзақтық.</li>\r\n            <li><code>CommandTimeout</code>: сервер жақтағы сұрау бас тартқанға дейін қанша уақыт орындалатынын басқаратын ұзақтық.</li>\r\n          </ul>\r\n        Жазба параметрі былай көрсетіледі: [option1 = value1, option2 = value2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Salesforce тіркелгісінен нысандарды қайтарады.",
        "Documentation.LongDescription": "Salesforce тіркелгісінен тіркелгі деректерінде көрсетілген нысандарды қайтарады. Тіркелгі көрсетілген <code>loginUrl</code> ортасы арқылы байланысады. Егер орта көрсетілмесе, онда тіркелгі өндіріске қосылады (https://login.salesforce.com). Қосымша жазба параметрі, <code>options</code>, қосымша сипаттарды көрсету үшін ұсынылуы мүмкін. Жазбада келесі өрістер қамтылуы мүмкін:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Қайтарылатын мәндерде навигация сипаттарын жасау немесе жасамау керектігін көрсететін логикалық мән (true/false). Әдепкі мән - false.</li>\r\n<li><code>ApiVersion</code> : Salesforce API нұсқасы осы нұсқаға пайдалануға арналған. Көрсетілмеген жағдайда API нұсқасы 29.0 пайдаланылады.</li>\r\n<li><code>Timeout</code> : Серверге сұраудан бас тартуға дейінгі күту уақытын басқаратын ұзақтық. Әдепкі мәні деректер көзіне тәуелді.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Salesforce тіркелгісінен есептерді қайтарады.",
        "Documentation.LongDescription": "Salesforce тіркелгісінен тіркелгі деректерінде көрсетілген нысандарды қайтарады. Тіркелгі көрсетілген <code>loginUrl</code> ортасы арқылы байланысады. Егер орта көрсетілмесе, онда тіркелгі өндіріске қосылады (https://login.salesforce.com). Қосымша жазба параметрі, <code>options</code>, қосымша сипаттарды көрсету үшін ұсынылуы мүмкін. Жазбада келесі өрістер қамтылуы мүмкін:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Salesforce API нұсқасы осы нұсқаға пайдалануға арналған. Көрсетілмеген жағдайда API нұсқасы 29.0 пайдаланылады.</li>\r\n<li><code>Timeout</code> : Серверге сұраудан бас тартуға дейінгі күту уақытын басқаратын ұзақтық. Әдепкі мәні деректер көзіне тәуелді.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "InfoArea арқылы топталған SAP Business Warehouse жүйесінде InfoCubes және сұрауларды қайтарады.",
        "Documentation.LongDescription": "<code>systemNumberOrSystemId</code> жүйе нөмірі және <code>clientId</code> клиент идентификаторы бар <code>server</code> серверінде SAP Business Warehouse нұсқасынан InfoArea арқылы топталған InfoCubes кестелері мен сұрауларын қайтарады. Келесі параметрлерді басқару үшін <code>optionsOrLogonGroup</code> қосымша жазу параметрі көрсетілуі мүмкін:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Smartsheet API интерфейсінен парақтар кестесін, есептерді, қалталарды және жұмыс кеңістіктерін қайтарады",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Smartsheet API интерфейсінен қолжетімді парақтардың, есептердің, қалталардың және жұмыс кеңістіктерінің ендірілген кестесін қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet иерархиясының жоғарғы деңгейінде қолжетімді парақтарды, қалталарды, есептерді және жұмыс кеңістіктерін қайтарады",
            "Code": "Smartsheet.Tables()",
            "Result": "Smartsheet иерархиясының жоғарғы деңгейінен алынатын қалталар кетесі, есептер және жұмыс кеңістіктері"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "SparkPost API v1 интерфейсінен қолжетімді көрсеткіштердің кестесін қайтарады",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Бұл функцияны SparkPost API v1 нақты \"Көрсеткіштер\" соңғы нүктесінен деректерді шығарып алу үшін пайдалануға болады. Бұл кестелерді жаңартқанда немесе бұл қосқыш көмегімен SparkPost API шақырғанда SparkPost API қатаң API көрсеткішінің шегіне ие болатынын ескеріңіз. SparkPost серверінен қайтарылған 429 күй кодын көрсеңіз, бұл көрсеткіш шегіне жеткеніңізді білдіреді және қосымша шақырулар үшін күте тұруыңыз қажет болады. Күндер саны параметрі үшін мәнді таңдағанда API тек 6 айлық деректерді сақтайтынын ескеріңіз.",
        "Documentation.Examples": [
          {
            "Description": "Өткен үш күнде біріктірілген барлық campaign_ids үшін count_sent және count_rejected жіберілу көрсеткіштерін шығарып алады. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Әдіс",
        "Documentation.DisplayName": "Stripe.Әдіс",
        "Documentation.Caption": "Stripe.Әдіс",
        "Documentation.Description": "Stripe API интерфейсіне қоңырау соғады.",
        "Documentation.LongDescription": "https://api.stripe.com/v1/<code>method</code> мекенжайында қосымша параметрлер ретінде <code>қосымша параметрлер</code> жазбасы бар және күтілген арна атауларының <code>Баған атаулары</code> тізімі бар Stripe API интерфейсіне қоңырау соғады. Stripe бағдарламасының 2015-10-16 нұсқасы пайдаланылады.",
        "Documentation.Examples": [
          {
            "Description": "2015 жылдың 1 қарашасынан кейін жасалған оқиғалары бар кестені қайтарады",
            "Code": "Stripe.Әдіс(\"оқиғалар\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Ағымдағы Stripe тіркелгісіне арналған көрсетілген оқиғалары бар кесте"
          },
          {
            "Description": "Барлық SKU бар кестені қайтарады",
            "Code": "Stripe.Әдіс(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Ағымдағы Stripe тіркелгісіне арналған барлық SKU бар кесте"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Кестелер",
        "Documentation.DisplayName": "Stripe.Кестелер",
        "Documentation.Caption": "Stripe.Кестелер",
        "Documentation.Description": "Қолжетімді Stripe кестелері мен функцияларын тізімдейтін кестені қайтарады.",
        "Documentation.LongDescription": "Қолжетімді Stripe кестелері мен функцияларын тізімдейтін кестені қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics жұмыс кеңістігі",
        "Documentation.Caption": "Azure Synapse Analytics жұмыс кеңістігі",
        "Documentation.LongDescription": "Azure Synapse Analytics жұмыс кеңістігіне арналған PQ қосқышы",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Көрсетілген атауы бар бағанды қосады. Мән әр жол кіріс ретінде алынып, көрсетілген таңдау функциясын пайдаланып есептеледі.",
        "Documentation.LongDescription": "<code>table</code> кестесіне <code>newColumnName</code> атты бағанды қосады. Бағанның мәндері көрсетілген <code>columnGenerator</code> таңдау функциясын пайдаланып, әр жол кіріс ретінде алынып есептеледі.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеге «TotalPrice» деп аталатын сандық бағанды қосады. Әр мән [Price] және [Shipping] бағандарының қосындысы болып табылады.",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Кестедегі көрсетілген бағанның мәндерін анық емес топтау арқылы алынған ерекше мәндері бар жаңа бағанды қосады.",
        "Documentation.LongDescription": "<code>newColumnName</code> жаңа бағанын <code>columnName</code> көрсеткіш мәндерімен <code>table</code> құрамына қосады. Көрсеткіштер әр жол үшін <code>columnName</code> ішіндегі мәндерді анық емес сәйкестендіру арқылы алынады.\r\n    <p><code>options</code> қосымша жинағын кілт бағандарын салыстыру жолын көрсету үшін қосуға болады. Параметрлерге мыналар кіреді:\r\n    <ul>\r\n<li><code>Culture</code> : Жазбаларды тіл және аймаққа тән ережелер негізінде топтауға мүмкіндік береді. Ол кез келген жарамды тіл және аймақтық параметр атауы бола алады. Мысалы, &quot;ja-JP&quot; тіл және аймақтық параметрі жазбаларды жапон тілі және аймақтық параметрлері негізінде топтайды. Әдепкі мәні инвариант ағылшын тілі және аймақтық параметрлері негізінде топтайтын &quot;&quot; болып табылады.</li>\r\n<li><code>IgnoreCase</code> : Логикалық (шын/жалған) мән регистрді ескермейтін кілтті топтауға мүмкіндік береді. Мысалы, шын болғанда, &quot;Жүзім&quot; мәні &quot;жүзім&quot; деп топталады. Әдепкі мәні - шын.</li>\r\n<li><code>IgnoreSpace</code> : Логикалық (шын/жалған) мән топтарды табу үшін мәтін бөліктерін біріктіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жү зім&quot; мәні &quot;Жүзім&quot; деп топталады. Әдепкі мәні - шын.</li>\r\n<li><code>SimilarityColumnName</code> : Кіріс мәні мен сол кірісті көрсететін мән арасындағы ұқсастықты көрсететін баған атауы. Әдепкі мәні бос болады, бұл жағдайда ұқсастықтар үшін жаңа баған қосылмайды.</li>\r\n<li><code>Threshold</code> : 0,00 және 1,00 аралығындағы сан екі мән топталатын ұқсастық мәнін көрсетеді.\r\n    Мысалы, &quot;Жүзім&quot; және &quot;Жүім&quot; (&quot;з&quot; әрпі жоқ) осы параметр 0,90 мәнінен аз болса ғана бірге топталады.\r\n    1,00 шегі дәл сәйкестіктерге ғана рұқсат етеді.\r\n    (Нақты емес &quot;дәл сәйкестік&quot; регистр, сөздер тәртібі және тыныс белгілері сияқты айырмашылықтарды елемеуі мүмкін екенін ескеріңіз.)\r\n    Әдепкі мәні: 0,80.</li>\r\n<li><code>TransformationTable</code> : Жазбаларды реттелетін мәнді салыстыру негізінде топтауға мүмкіндік беретін кесте. Онда &quot;Қайдан&quot; және &quot;Қайдан&quot; бағандары болуы керек. Мысалы, түрлендіру кестесінде &quot;Жүзім&quot; мәні бар &quot;Қайдан&quot; бағаны және &quot;Мейіздер&quot; мәні бар &quot;Қайда&quot; бағаны болса, &quot;Жүзім&quot; &quot;Мейіздер&quot; мәнімен топталады. Түрлендіру түрлендіру кестесіндегі мәтіннің барлық нұсқаларына қолданылатынын ескеріңіз. Жоғарыдағы түрлендіру кестесінде &quot;Жүзім тәтті&quot; мәні сонымен қатар &quot;Мейіздер тәтті&quot; деп топталады.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Қызметкерлердің орны үшін ерекше мәндерді табыңыз.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Қамтамасыз етілген бағандарда кестелер арасында біріктіруді орындайды және жаңа бағанда біріктіру нәтижесін береді.",
        "Documentation.LongDescription": "<code>key1</code> (<code>table1</code> үшін) және <code>key2</code> (<code>table2</code> үшін) арқылы таңдалған кілт бағандардың теңдігіне негізделген <code>table2</code> жол бар <code>table1</code> жолдарын біріктіреді. Нәтижелер <code>newColumnName</code> атты бағанға енгізіледі.\r\nБұл функция LeftOuter біріктіру түрі бар Table.Join сияқты әрекет етеді, тек біріктіру нәтижелері тураланған түрде емес, енгізілген түрде көрсетіледі.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[saleID] бойынша біріктірілген ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) кестесіндегі \"баға/қор\" атты ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) біріктіру бағанын қосу.",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Кілтті кестеге қосады.",
        "Documentation.LongDescription": "Кілтті анықтайтын <code>columns</code> баған атауларының тізімі болса және <code>isPrimary</code> кілт негізгі болып табыла ма, соны көрсетсе, <code>table</code> ішіне кілтті қосады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Бір бағанды бастапқы кілтті кестеге қосыңыз.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Бір немесе бірнеше басқа бағандардың рейтингісі бар бағанды ​​қосады.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> арқылы сипатталған бір немесе бірнеше бағандардың рейтингісі бар <code>newColumnName</code> бастап <code>table</code> дейінгі атауы бар бағанды ​​қосады.\r\n<code>options</code> ішіндегі RankKind параметрін озық пайдаланушылар нақтырақ бағалау әдісін таңдау үшін пайдалана алады.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "\"Кіріс\" бағанын жоғарыдан төменге дәрежелейтін кестеге \"RevenueRank\" деп аталатын бағанды қосыңыз.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Кестелер бағанын қамтитын кестедегі бірнеше бағанға біріктіреді.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] ішіндегі кестелерді кестелер үшін біріктіру мәндерін қамтитын бірнеше бағанға біріктіреді. <code>aggregations</code> біріктіретін кестелерді, мәндерін жасау үшін кестелерге қолданылатын біріктіру функцияларын және жасалатын біріктіру бағандарының атауларын қамтитын бағандарды көрсету үшін пайдаланылады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>[t]</code> ішіндегі <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> кестесіндегі кесте бағандарын <code>[t.a]</code>, <code>[t.b]</code> ең аз және ең көп мәнінің және <code>[t.a]</code> ішіндегі мәндер санының қосындысына біріктіру.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Бастапқы ауытқуды сақтайды, содан кейін келесі жолдарды кезекпен қабылдайды және өткізіп жібереді.",
        "Documentation.LongDescription": "Бастапқы ауытқуды сақтайды, содан кейін келесі жолдарды кезекпен қабылдайды және өткізіп жібереді.\r\n    <ul>\r\n       <li><code>table</code>: кіріс кесте.</li>\r\n       <li><code>offset</code>: итерацияларды бастау алдында сақтау керек жолдар саны.</li>\r\n       <li><code>skip</code>: әр итерацияда жою керек жолдар саны.</li>\r\n       <li><code>take</code>: әр итерацияда сақтау керек жолдар саны.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Бірінші жолдан бастап, 1 мәнді өткізіп жіберетін, сонан соң 1 мәнді сақтайтын кестеден кестені қайтару.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Көрсетілген біріктіру функциясын пайдаланып көрсетілген бағандарды жаңа бағанға біріктіреді.",
        "Documentation.LongDescription": "Көрсетілген біріктіру функциясын пайдаланып көрсетілген бағандарды жаңа бағанға біріктіреді.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Үтірмен бөлінген жаңа бағандағы фамилиялар мен есімдерді біріктіріңіз.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Көрсетілген бағандарды жаңа жазба мәндері бар бағанға біріктіреді, онда әрбір жазбада біріктірілген баған атаулары мен мәндеріне сәйкес өріс атаулары мен мәндері болады.",
        "Documentation.LongDescription": "<code>table</code> көрсетілген бағандарын жаңа <code>newColumnName</code> жазба мәнді бағанына біріктіреді, мұнда әрбір жазбада біріктірілген бағандардың баған атаулары мен мәндеріне сәйкес келетін өріс атаулары мен мәндері болады. Егер <code>options</code> үшін жазба көрсетілсе, келесі параметрлер берілуі мүмкін:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: Мәтін ретінде көрсетілсе, берілген баған атауы жазбаның көрсетілетін атауы ретінде қарастырылуы керектігін көрсетеді. Бұл жазбаның өзіндегі бағандардың біреуі болуы қажет емес.</li>\r\n     <li> <code>TypeName</code>: Мәтін ретінде көрсетілсе, алынатын жазба үшін логикалық түр атауын береді, ол жүктеу ортасы бойынша жұмыс режимін анықтау үшін деректерді жүктеу кезінде пайдаланылуы мүмкін.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Көрсетілген атауы бар баған көшірмесін жасайды. Мәндер және түр бастапқы бағаннан көшіріледі.",
        "Documentation.LongDescription": "<code>table</code> кестесінде <code>columnName</code> атты бағанның көшірмесін жасау. <code>newColumnName</code> бағаны үшін мәндер және түр <code>columnName</code> бағанынан көшіріледі.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесіндегі «көшірілген баған» деген бағанда «a» бағанының көшірмесін жасаңыз.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Жазбалардың бағанын мәндердің әрқайсысы бар бағандарға кеңейтеді.",
        "Documentation.LongDescription": "Кіріс <code>table</code> ішінде жазбалардың <code>column</code> берілген болса, жазбадағы әр өріс үшін баған бар кестені жасайды. Таңдау бойынша, жаңа кестедегі бағандар үшін бірегей атауларды қамтамасыз ету үшін <code>newColumnNames</code> көрсетуге болады.\r\n    <ul>\r\n        <li><code>table</code>: кеңейтетін жазба бағаны бар бастапқы кесте. </li>\r\n        <li><code>column</code>: кеңейтетін баған.</li>\r\n        <li><code>fieldNames</code>: кестедегі бағандарға кеңейтетін өрістердің тізімі.</li>\r\n        <li><code>newColumnNames</code>: жаңа бағандарға беретін баған атауларының тізімі. Жаңа баған атаулары жаңа кестедегі ешбір бағанды қайталамауы керек.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> кестесіндегі [a] бағанын 3 бағанға кеңейту: \"aa\", \"bb\" және \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Жазбалар бағанын немесе кестелер бағанын қамтитын кестедегі бірнеше бағанға кеңейтеді.",
        "Documentation.LongDescription": "<code>table</code>[<code>column</code>] ішіндегі кестелерді бірнеше жолға және бағанға кеңейтеді. <code>columnNames</code> ішкі кестеден кеңейтетін бағандарды таңдау үшін пайдаланылады. Бар бағандар мен жаңа бағандар арасында қайшылықтарды болдырмау үшін <code>newColumnNames</code> көрсетіңіз.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "<code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> кестесіндегі <code>[a]</code> ішіндегі кесте бағандарын 3 <code>[t.a]</code>, <code>[t.b]</code> және <code>[t.c]</code> бағанына кеңейту.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Кестедегі жолдарды кілттердің анық емес сәйкестігі негізінде топтайды.",
        "Documentation.LongDescription": "<code>table</code> жолдарын әр жол үшін <code>key</code> көрсетілген бағанындағы мәндерді анық емес сәйкестендіру арқылы топтайды.\r\n    Әр топ үшін <code>aggregatedColumns</code> арқылы көрсетілген кез келген жинақталған бағандармен бірге кілт бағандарынан (және олардың мәндерінен) тұратын жазба құрылады.\r\n    Бұл функция жолдардың белгіленген ретін қайтаруға кепілдік бере алмайды.\r\n    <p> Кілт бағандарын салыстыру жолын көрсету үшін <code>options</code> қосымша жиынтығын қосуға болады. Параметрлерге мыналар кіреді:\r\n    <ul>\r\n<li><code>Culture</code> : Жазбаларды тіл және аймаққа тән ережелер негізінде топтауға мүмкіндік береді. Ол кез келген жарамды тіл және аймақтық параметр атауы бола алады. Мысалы, &quot;ja-JP&quot; тіл және аймақтық параметрі жазбаларды жапон тілі және аймақтық параметрлері негізінде топтайды. Әдепкі мәні инвариант ағылшын тілі және аймақтық параметрлері негізінде топтайтын &quot;&quot; болып табылады.</li>\r\n<li><code>IgnoreCase</code> : Логикалық (шын/жалған) мән регистрді ескермейтін кілтті топтауға мүмкіндік береді. Мысалы, шын болғанда, &quot;Жүзім&quot; мәні &quot;жүзім&quot; деп топталады. Әдепкі мәні - шын.</li>\r\n<li><code>IgnoreSpace</code> : Логикалық (шын/жалған) мән топтарды табу үшін мәтін бөліктерін біріктіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жү зім&quot; мәні &quot;Жүзім&quot; деп топталады. Әдепкі мәні - шын.</li>\r\n<li><code>SimilarityColumnName</code> : Кіріс мәні мен сол кірісті көрсететін мән арасындағы ұқсастықты көрсететін баған атауы. Әдепкі мәні бос болады, бұл жағдайда ұқсастықтар үшін жаңа баған қосылмайды.</li>\r\n<li><code>Threshold</code> : 0,00 және 1,00 аралығындағы сан екі мән топталатын ұқсастық мәнін көрсетеді.\r\n    Мысалы, &quot;Жүзім&quot; және &quot;Жүім&quot; (&quot;з&quot; әрпі жоқ) осы параметр 0,90 мәнінен аз болса ғана бірге топталады.\r\n    1,00 шегі дәл сәйкестіктерге ғана рұқсат етеді.\r\n    (Нақты емес &quot;дәл сәйкестік&quot; регистр, сөздер тәртібі және тыныс белгілері сияқты айырмашылықтарды елемеуі мүмкін екенін ескеріңіз.)\r\n    Әдепкі мәні: 0,80.</li>\r\n<li><code>TransformationTable</code> : Жазбаларды реттелетін мәнді салыстыру негізінде топтауға мүмкіндік беретін кесте. Онда &quot;Қайдан&quot; және &quot;Қайдан&quot; бағандары болуы керек. Мысалы, түрлендіру кестесінде &quot;Жүзім&quot; мәні бар &quot;Қайдан&quot; бағаны және &quot;Мейіздер&quot; мәні бар &quot;Қайда&quot; бағаны болса, &quot;Жүзім&quot; &quot;Мейіздер&quot; мәнімен топталады. Түрлендіру түрлендіру кестесіндегі мәтіннің барлық нұсқаларына қолданылатынын ескеріңіз. Жоғарыдағы түрлендіру кестесінде &quot;Жүзім тәтті&quot; мәні сонымен қатар &quot;Мейіздер тәтті&quot; деп топталады.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Әр орындағы (\"әр Table.RowCount(_))\") қызметкерлер саны бар жиынтық баған [Count] қосу арқылы кестелерді топтаңыз.",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Көрсетілген кілттерге негізделіп анық емес сәйкес екі кестенің жолдарын біріктіреді.",
        "Documentation.LongDescription": "<p><code>table1</code> жолдарын <code>key1</code> (<code>table1</code> үшін) және <code>key2</code> (<code>table2</code> үшін) арқылы таңдалған кілт бағандарының мәндерін анық емес сәйкестендіру негізінде <code>table2</code> жолдарымен қосылады.</p>\r\n<p>Анық емес сәйкестендіру - бұл мәтіннің теңдігіне емес, мәтіннің ұқсастығына негізделген салыстыру.</p>\r\n<p>Әдепкі бойынша ішкі біріктіру орындалады, алайда қосымша <code>joinKind</code> қосылу түрін көрсету үшін қосылуы мүмкін. Параметрлерге мыналар кіреді:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Кілт бағандарын салыстыру жолын көрсету үшін <code>joinOptions</code> қосымша жиынтығын қосуға болады. Параметрлерге мыналар кіреді:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 1 мен 8 бар арасындағы сан анық емес сәйкестік үшін пайдаланылатын параллель ағындар санын көрсетеді. Әдепкі мән — 1.</li>\r\n<li><code>Culture</code> : Жазбаларды тіл және аймаққа тән ережелер негізінде сәйкестендіруге мүмкіндік береді. Ол кез келген жарамды тіл және аймақтық параметр атауы бола алады. Мысалы, &quot;ja-JP&quot; тіл және аймақтық параметрі жазбаларды жапон тілі және аймақтық параметрлері негізінде сәйкестендіреді. Әдепкі мәні инвариант ағылшын тілі және аймақтық параметрлері негізінде сәйкестендіретін &quot;&quot; болып табылады.</li>\r\n<li><code>IgnoreCase</code> : Логикалық (шын/жалған) мән регистрді ескермейтін кілтті сәйкестендіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жүзім&quot; мәні &quot;жүзім&quot; деп сәйкестендіріледі. Әдепкі мәні - шын.</li>\r\n<li><code>IgnoreSpace</code> : Логикалық (шын/жалған) мән сәйкестіктерді табу үшін мәтін бөліктерін біріктіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жү зім&quot; мәні &quot;Жүзім&quot; деп сәйкестендіріледі. Әдепкі мәні - шын.</li>\r\n<li><code>NumberOfMatches</code> : Әрбір кіріс жолы үшін қайтаруға болатын сәйкес жолдардың максимал санын көрсететін бүтін сан. Мысалы, 1 мәні әрбір кіріс жолы үшін ең көбі бір сәйкес жолды қайтарады. Егер бұл параметр берілмесе, барлық сәйкес жолдар қайтарылады.</li>\r\n<li><code>SimilarityColumnName</code> : Кіріс мәні мен сол кірісті көрсететін мән арасындағы ұқсастықты көрсететін баған атауы. Әдепкі мәні бос болады, бұл жағдайда ұқсастықтар үшін жаңа баған қосылмайды.</li>\r\n<li><code>Threshold</code> : 0,00 және 1,00 аралығындағы сан екі мән сәйкестендірілетін ұқсастық мәнін көрсетеді.\r\n    Мысалы, &quot;Жүзім&quot; және &quot;Жүім&quot; (&quot;з&quot; әрпі жоқ) осы параметр 0,90 мәнінен аз болса ғана сәйкестендіріледі.\r\n    1,00 шегі дәл сәйкестіктерге ғана рұқсат етеді.\r\n    (Нақты емес &quot;дәл сәйкестік&quot; регистр, сөздер тәртібі және тыныс белгілері сияқты айырмашылықтарды елемеуі мүмкін екенін ескеріңіз.)\r\n    Әдепкі мәні: 0,80.</li>\r\n<li><code>TransformationTable</code> : Жазбаларды реттелетін мәнді салыстыру негізінде сәйкестендіруге мүмкіндік беретін кесте. Онда &quot;Қайдан&quot; және &quot;Қайдан&quot; бағандары болуы керек. Мысалы, түрлендіру кестесінде &quot;Жүзім&quot; мәні бар &quot;Қайдан&quot; бағаны және &quot;Мейіздер&quot; мәні бар &quot;Қайда&quot; бағаны болса, &quot;Жүзім&quot; &quot;Мейіздер&quot; мәнімен сәйкестендіріледі. Түрлендіру түрлендіру кестесіндегі мәтіннің барлық нұсқаларына қолданылатынын ескеріңіз. Жоғарыдағы түрлендіру кестесінде &quot;Жүзім тәтті&quot; мәні сонымен қатар &quot;Мейіздер тәтті&quot; деп сәйкестендіріледі.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] негізіндегі екі кестені сол жақ ішкі анық емес біріктіру",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Қамтамасыз етілген бағандарда кестелер арасында анық емес біріктіруді орындайды және жаңа бағанда біріктіру нәтижесін береді.",
        "Documentation.LongDescription": "<p><code>key1</code> (<code>table1</code> үшін) және <code>key2</code> (<code>table2</code> үшін) арқылы таңдалған кілт бағандары мәндері бойынша анық емес сәйкестік негізінде <code>table1</code> жолдарын <code>table2</code> жолдарымен біріктіреді. Нәтижелер <code>newColumnName</code> деп аталатын жаңа бағанда қайтарылады.</p>\r\n<p>Анық емес сәйкестік мәтіннің теңдігіне емес, ал мәтіннің ұқсастығына негізделген салыстыру болып табылады.</p>\r\n<p>Қосымша <code>joinKind</code> орындалатын біріктіру түрін көрсетеді. Әдепкіде <code>joinKind</code> көрсетілмесе, сол жақ сыртқы біріктіру орындалады. Параметрлер мынаны қамтиды:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Кілт бағандарын салыстыру әдісін көрсету үшін <code>joinOptions</code> қосымша жиынтығын қосуға болады. Параметрлер мынаны қамтиды:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 1 мен 8 бар арасындағы сан анық емес сәйкестік үшін пайдаланылатын параллель ағындар санын көрсетеді. Әдепкі мән — 1.</li>\r\n<li><code>Culture</code> : Жазбаларды тіл және аймаққа тән ережелер негізінде сәйкестендіруге мүмкіндік береді. Ол кез келген жарамды тіл және аймақтық параметр атауы бола алады. Мысалы, &quot;ja-JP&quot; тіл және аймақтық параметрі жазбаларды жапон тілі және аймақтық параметрлері негізінде сәйкестендіреді. Әдепкі мәні инвариант ағылшын тілі және аймақтық параметрлері негізінде сәйкестендіретін &quot;&quot; болып табылады.</li>\r\n<li><code>IgnoreCase</code> : Логикалық (шын/жалған) мән регистрді ескермейтін кілтті сәйкестендіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жүзім&quot; мәні &quot;жүзім&quot; деп сәйкестендіріледі. Әдепкі мәні - шын.</li>\r\n<li><code>IgnoreSpace</code> : Логикалық (шын/жалған) мән сәйкестіктерді табу үшін мәтін бөліктерін біріктіруге мүмкіндік береді. Мысалы, шын болғанда, &quot;Жү зім&quot; мәні &quot;Жүзім&quot; деп сәйкестендіріледі. Әдепкі мәні - шын.</li>\r\n<li><code>NumberOfMatches</code> : Әрбір кіріс жолы үшін қайтаруға болатын сәйкес жолдардың максимал санын көрсететін бүтін сан. Мысалы, 1 мәні әрбір кіріс жолы үшін ең көбі бір сәйкес жолды қайтарады. Егер бұл параметр берілмесе, барлық сәйкес жолдар қайтарылады.</li>\r\n<li><code>SimilarityColumnName</code> : Кіріс мәні мен сол кірісті көрсететін мән арасындағы ұқсастықты көрсететін баған атауы. Әдепкі мәні бос болады, бұл жағдайда ұқсастықтар үшін жаңа баған қосылмайды.</li>\r\n<li><code>Threshold</code> : 0,00 және 1,00 аралығындағы сан екі мән сәйкестендірілетін ұқсастық мәнін көрсетеді.\r\n    Мысалы, &quot;Жүзім&quot; және &quot;Жүім&quot; (&quot;з&quot; әрпі жоқ) осы параметр 0,90 мәнінен аз болса ғана сәйкестендіріледі.\r\n    1,00 шегі дәл сәйкестіктерге ғана рұқсат етеді.\r\n    (Нақты емес &quot;дәл сәйкестік&quot; регистр, сөздер тәртібі және тыныс белгілері сияқты айырмашылықтарды елемеуі мүмкін екенін ескеріңіз.)\r\n    Әдепкі мәні: 0,80.</li>\r\n<li><code>TransformationTable</code> : Жазбаларды реттелетін мәнді салыстыру негізінде сәйкестендіруге мүмкіндік беретін кесте. Онда &quot;Қайдан&quot; және &quot;Қайдан&quot; бағандары болуы керек. Мысалы, түрлендіру кестесінде &quot;Жүзім&quot; мәні бар &quot;Қайдан&quot; бағаны және &quot;Мейіздер&quot; мәні бар &quot;Қайда&quot; бағаны болса, &quot;Жүзім&quot; &quot;Мейіздер&quot; мәнімен сәйкестендіріледі. Түрлендіру түрлендіру кестесіндегі мәтіннің барлық нұсқаларына қолданылатынын ескеріңіз. Жоғарыдағы түрлендіру кестесінде &quot;Жүзім тәтті&quot; мәні сонымен қатар &quot;Мейіздер тәтті&quot; деп сәйкестендіріледі.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[FirstName] негізіндегі екі кестені сол жақ ішкі анық емес біріктіру",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Кестедегі кілті бірдей жолдарды топтайды.",
        "Documentation.LongDescription": "<code>table</code> жолдарын <code>key</code> анықтаған кілт бағандары бойынша топтастырады. <code>key</code> жалғыз баған атауы немесе баған атауларының тізімі болуы мүмкін.\r\n    Әр топ үшін кілт бағандарын (және олардың мәндерін), сондай-ақ <code>aggregatedColumns</code> анықтаған кез-келген біріктірілген бағандардан тұратын жазба жасалады.\r\n    Сонымен, <code>groupKind</code> және <code>comparer</code> де көрсетілуі мүмкін.<br>\r\n    <br>\r\n    Егер деректер кілт бағандары бойынша сұрыпталған болса, онда GroupKind.Local а <code>groupKind</code> ұсынылуы мүмкін. Бұл белгілі бір жағдайларда топтаудың жұмысын жақсартуы мүмкін,\r\n    өйткені негізгі мәндер жиынтығы берілген барлық қатарлар сабақтас деп есептеледі..<br>\r\n    <br>\r\n    <code>comparer</code> жіберген кезде, егер ол әр түрлі кілттерді тең деп санаса, онда оның кілттері өзгелерден өзгеше болатын топқа қатар қойылуы мүмкін екенін ескеріңіз.<br>\r\n    <br>\r\n    Бұл функция қайтарылатын жолдардың ретіне кепілдік бермейді.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Бағалар қосындысы (\"each List.Sum([price])\") бар [total] жиынтық бағанын қосу арқылы кестені топтау.",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Кестеге көрсетілген орында жолдар тізімін кірістіреді.",
        "Documentation.LongDescription": "<code>rows</code> ішіне <code>table</code> көрсетілген орнында кірістірілген <code>offset</code> жолдар тізімі бар кестені қайтарады. Кірістірілетін жолдағы әр баған кестенің баған түрлеріне сәйкес болуы керек.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Жолды кестеге 1-орында кірістіру.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Екі жолды кестеге 1-орында кірістіру.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Көрсетілген кілттерге негізделіп сәйкес екі кестенің жолдарын біріктіреді.",
        "Documentation.LongDescription": "<p> <code>key1</code> (<code>table1</code> үшін) және <code>key2</code> (<code>table2</code> үшін) тарапынан таңдалған кілт бағандары мәндерінің теңдігі негізінде <code>table2</code> жолдарын <code>table1</code> жолдарымен біріктіреді.</p>\r\n<p>Әдепкіде ішкі байланыс орындалады, бірақ біріктіру түрін көрсету үшін қосымша <code>joinKind</code> қосуға болады. Параметрлер мыналарды қамтиды:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Кілт бағандарын салыстыру әдісін көрсету үшін <code>keyEqualityComparers</code> қосымша жиынтығын қосуға болады. Бұл параметр ағымдағы уақытта тек ішкі пайдалануға арналған.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Бір кілт бағанын пайдаланып екі кестені біріктіріңіз.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Бірнеше негізгі бағанды пайдалана отырып, қарама-қайшы баған атаулары бар екі кестені біріктіру.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Көрсетілген шарттарды пайдаланып ең үлкен жол(дар)ды қайтарады.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> берілген, <code>table</code> ішінде ең үлкен жол(дар)ды қайтарады.\r\n    Жолдар сұрыпталғаннан кейін нәтижені одан әрі сүзу үшін <code>countOrCondition</code> параметрін көрсету керек. Сұрыптау алгоритмі түзетілген сұрыпталған нәтижеге кепілдік бере алмайтынын ескеріңіз. <code>countOrCondition</code> параметрі бірнеше түрді қабылдай алады:\r\n    <ul>\r\n        <li> Егер сан көрсетілсе, арту ретімен <code>countOrCondition</code> дейінгі элементтер тізімі қайтарылады. </li>\r\n        <li> Егер шарт көрсетілген болса, басында шартқа сай болған элементтер тізімі қайтарылады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li> \r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [a] > 0 шарты бар [a] бағанында ең үлкен мән бар жолды анықтау. Сүзгі қолданылмай тұрып жолдар сұрыпталады.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Кестеде [b] > 0 шарты бар [a] бағанында ең үлкен мән бар жолды анықтау. Сүзгі қолданылмай тұрып жолдар сұрыпталады.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Көрсетілген шарттарды пайдаланып ең кіші жол(дар)ды қайтарады.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> берілген, <code>table</code> ішіндегі ең кіші жол(дар)ды қайтарады. Жолдар сұрыпталғаннан кейін нәтижені одан әрі сүзу үшін <code>countOrCondition</code> параметрін көрсету керек. Сұрыптау алгоритмі түзетілген сұрыпталған нәтижеге кепілдік бере алмайтынын ескеріңіз.<code>countOrCondition</code> параметрі бірнеше түрді қабылдай алады:\r\n    <ul>\r\n        <li> Егер сан көрсетілсе, арту ретімен <code>countOrCondition</code> дейінгі элементтер тізімі қайтарылады. </li>\r\n        <li> Егер шарт көрсетілген болса, басында шартқа сай болған элементтер тізімі қайтарылады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [a] < 3 шарты бар [a] бағанында ең кіші мән бар жолды анықтау. Сүзгі қолданылмай тұрып жолдар сұрыпталады.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Кестеде [b] < 0 шарты бар [a] бағанында ең кіші мән бар жолды анықтау. Сүзгі қолданылмай тұрып жолдар сұрыпталады.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Қамтамасыз етілген бағандарда кестелер арасында біріктіруді орындайды және жаңа бағанда біріктіру нәтижесін береді.",
        "Documentation.LongDescription": "<p><code>key1</code> тарапынан таңдалған кілт бағандары мәндерінің теңдігі негізінде <code>table1</code> жолдарын <code>table2</code> жолдарымен біріктіреді (<code>table1</code> үшін) және <code>key2</code> (<code>table2</code> үшін). Нәтижелер <code>newColumnName</code> деп аталатын бағанға енгізіледі.</p>\r\n<p>Қосымша <code>joinKind</code> орындалатын біріктіру түрін көрсетеді. Әдепкіде, егер <code>joinKind</code> көрсетілмесе, сол жақ сыртқы біріктіру орындалады.</p>\r\n<p>Кілт бағандарын салыстыру әдісін көрсету үшін <code>keyEqualityComparers</code> қосымша жиынтығын қосуға болады. Бұл мүмкіндік ағымдағы уақытта тек ішкі пайдалануға арналған.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Бір кілт бағанын пайдаланып екі кестені біріктіріңіз.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Төлсипат-мән жұптарын білдіретін бағандар жұбы берілген болса, төлсипат бағанындағы деректерді баған тақырыптарына бұрады.",
        "Documentation.LongDescription": "Төлсипат-мән жұптарын білдіретін бағандар жұбы берілген болса, төлсипат бағанындағы деректерді баған тақырыптарына бұрады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> кестесінің төлсипат бағанындағы \"a\", \"b\" және \"c\" мәндерін алу және оларды өз бағанына орналастыру.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "<code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> кестесінің төлсипат бағанындағы \"a\", \"b\" және \"c\" мәндерін алу және оларды өз бағанына орналастыру.  \"x\" кілтінің \"c\" төлсипатымен бірнеше мән байланысты, сондықтан қайшылықты шешу үшін List.Max функциясын пайдаланыңыз.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Көрсетілген жолдар ауқымын көрсетілген жолдармен ауыстырады.",
        "Documentation.LongDescription": "Кіріс <code>table</code> ішіндегі <code>count</code> көрсетілген жолдар санын <code>offset</code> кейін бастап көрсетілген <code>rows</code> жолдарымен ауыстырады. <code>rows</code> параметрі — жазбалар тізімі.\r\n    <ul>\r\n       <li><code>table</code>: ауыстыру орындалатын кесте.</li>\r\n       <li><code>offset</code>: ауыстыруды орындау алдында өткізіп жіберу керек жолдар саны.</li>\r\n       <li><code>count</code>: ауыстыру керек жолдар саны.</li>\r\n       <li><code>rows</code>: <code>table</code> ішіне <code>offset</code> арқылы көрсетілген орынға кірістіру керек жол жазбаларының тізімі.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "1-орыннан бастап 3 жолды ауыстыру.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Көрсетілген бағандарды бір мәнді екіншісімен ауыстырады.",
        "Documentation.LongDescription": "<code>table</code> көрсетілген бағандарында <code>oldValue</code> дегенді <code>newValue</code> дегенге ауыстырады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Б бағанындағы тұтас мәніне ғана сәйкес келетін \"goodbye\" мәтінін \"world\" деген сөзбен ауыстырыңыз.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "В бағанындағы мәннің кез келген бөлігіне сәйкес келетін \"ur\" мәтінін \"or\" деген сөзбен ауыстырыңыз.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "АҚШ қызметкерлерінің аттарын анонимді ету.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "АҚШ қызметкерлерінің барлық бағандарын анонимді ету.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Көрсетілген бөлу функциясын пайдаланып көрсетілген бағандарды қосымша бағандар жиынына бөледі.",
        "Documentation.LongDescription": "Көрсетілген бөлу функциясын пайдаланып көрсетілген бағандарды қосымша бағандар жиынына бөледі.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "[Name] бағанын \"i\" орнында екі бағанға бөліңіз",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Кестедегі бағандар жиынын төлсипат-мән жұптарына түрлендіреді.",
        "Documentation.LongDescription": "Кестедегі бағандар жиынын әр жолдағы қалған мәндермен біріктірілген төлсипат-мән жұптарына түрлендіреді.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> кестесіндегі \"a\", \"b\" және \"c\" бағандарын алу және оларды төлсипат-мән жұптарына бөлу.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Көрсетілген жиыннан басқа барлық бағанды төлсипат-мән жұптарына аударыңыз.",
        "Documentation.LongDescription": "Әр жолдағы қалған мәндермен бірге көрсетілген жиынтықтан басқа барлық бағандарды атрибут-мән жұптарына түрлендіреді.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Әр жолдағы қалған мәндермен бірге көрсетілген жиынтықтан басқа барлық бағандарды атрибут-мән жұптарына түрлендіреді.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams жеке аналитикасы",
        "Documentation.LongDescription": "<p>Teams аналитикасы қосқышы Teams қызметін пайдалануыңыз туралы мәліметтерді алуға мүмкіндік береді. Деректер Teams қызметіндегі жеке әрекеттеріңіз үшін және сіз мүшесі болған Teams қызметіндегі әрекеттер үшін қолжетімді.</p>\r\n<p>Деректер өткен 90 күн үшін қолжетімді. </p>\r\n<p> Қолжетімді деректердің түрлері туралы мәліметтерді алу үшін мына анықтамалық құжаттаманы қараңыз: </p>\r\n<ul>\r\n<li><b>Teams пайдалану:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams пайдаланушысының әрекеттері:</b> https://docs.microsoft.com/en-us/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Ұйым және жоба атауларын енгізіңіз.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Azure DevOps ұсынған OData арналарының кестесін қайтарады."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Екілік мәнді оқитын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Екілік мәнді оқитын екілік пішімді қайтарады.  Егер <code>length</code> көрсетілген болса, екілік мән сонша байтты қамтиды.  Егер <code>length</code> көрсетілмеген болса, екілік мән қалған байттарды қамтиды.  <code>length</code> сан ретінде немесе екілік деректердің алдында келетін ұзындықтағы екілік пішім ретінде көрсетуге болады.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Берілген екі мәндердің теңдігін тексеруге байланысты логикалық мәнді береді.",
        "Documentation.LongDescription": "Берілген <code>x</code> және <code>y</code> мәндерінің теңдігін <code>comparer</code> бойынша тексеруге байланысты <code>logical</code> мәнін береді.\r\n      <div>\r\n        <code>comparer</code> — салыстыруды басқару үшін қолданылатын <code>Comparer</code>.\r\n        Салыстыру — екі аргументті қабылдайтын және бірінші мән сәйкесінше екіншісінен кіші, оған тең немесе үлкен болса -1, 0 немесе 1 мәнін қайтаратын функция.\r\n        Салыстыру функцияларын пернетақта регистрінің есебімен немесе тіл стандарты мен аймақтық параметрлерді есепке алатын салыстыру үшін қолдануға болады.\r\n      </div>\r\n      <div>\r\n        Формула тілінде келесі кірістірілген салыстыру функциялары бар:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li> <code>Comparer.FromCulture</code>: тіл мен аймақтық параметрлерді есепке алып салыстыру үшін қолданылады</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Мәндердің тең екендігін анықтау үшін \"en-US\" тілін пайдалана отырып \"1\" және \"A\" мәндерін тексеріңіз.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Жергілікті уақыт белдеуіндегі ағымдағы күнді және уақытты қайтарады. Бұл мән бекітілген және келесі шақыруларда өзгермейді.",
        "Documentation.LongDescription": "<code>datetime</code> мәндер жиынын жүйедегі ағымдағы күнге және уақытқа қайтарады. Бұл мән бекітілген және келесі шақыруларда өзгертілмейді, өрнекті орындау барысында әр түрлі мәндерді қайтаруы мүмкін DateTime.LocalNow функциясынан басқаша.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Жергілікті уақыт белдеуіндегі ағымдағы күнді және уақытты қайтарады.",
        "Documentation.LongDescription": "<code>datetime</code> мәндер жиынын жүйедегі ағымдағы күнге және уақытқа қайтарады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Жергілікті уақыт белдеуіндегі ағымдағы күнді және уақытта қайтарады. Бұл мән бекітілген және келесі шақыруларда өзгертілмейді.",
        "Documentation.LongDescription": "<code>datetime</code> мәндер жиынын жүйедегі ағымдағы күнге және уақытқа қайтарады. Қайтарылған мән жергілікті уақыт белдеуін білдіретін уақыт белдеуі туралы ақпаратты қамтиды. Бұл мән бекітілген және келесі шақыруларда өзгертілмейді, бұл өрнекті орындау барысында әр түрлі мәндерді қайтаруы мүмкін DateTimeZone.LocalNow функциясынан басқаша.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Ағымдағы күнді және уақытты UTC (GMT уақыт белдеуі) пішімінде қайтарады. Бұл мән бекітілген және келесі шақыруларда өзгертілмейді.",
        "Documentation.LongDescription": "Ағымдағы күнді және уақытты UTC (GMT уақыт белдеуі) пішімінде қайтарады. Бұл мән бекітілген және келесі шақыруларда өзгертілмейді.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Жергілікті уақыт белдеуіндегі ағымдағы күнді және уақытта қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күнге және уақытқа орнатылған <code>datetimezone</code> мәнін қайтарады. \r\n    Қайтарылған мән жергілікті уақыт белдеуін білдіретін уақыт белдеуі туралы ақпаратты қамтиды.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Ағымдағы күнді және уақытты UTC (GMT уақыт белдеуі) пішімінде қайтарады.",
        "Documentation.LongDescription": "Ағымдағы күнді және уақытты UTC (GMT уақыт белдеуі) пішімінде қайтарады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы күнді және уақытты UTC түрінде алу.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Ағымдағы қосылған бағалау үшін анық емес идентификаторды қайтарады.",
        "Documentation.LongDescription": "Ағымдағы қосылған бағалау үшін анық емес идентификаторды қайтарады.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Кіріс сұрауларды шығыс сұраулармен сәйкестендіру үшін мөлдір емес идентификаторды қайтарады.",
        "Documentation.LongDescription": "Кіріс сұрауларды шығыс сұраулармен сәйкестендіру үшін мөлдір емес идентификаторды қайтарады.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Қадағалау қосылса, қадағалау жазбасын жазады және мәнді қайтарады.",
        "Documentation.LongDescription": "Қадағалау қосылса, <code>message</code> қадағалауды жазады және <code>value</code> қайтарады. <code>delayed</code> қосымша параметрі хабар қадағаланбайынша <code>value</code> бағалауды кейінге қалдыруды не қалдырмауды көрсетеді. <code>traceLevel</code> мына мәндердің бірін алады:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>,\r\n    <code>TraceLevel.Warning</code>,\r\n    <code>TraceLevel.Information</code>,\r\n    <code>TraceLevel.Verbose</code>.\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Text.From функциясын шақырмас бұрын хабарды қадағалаңыз және нәтижені қайтарыңыз.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Ағымдағы хост үшін әдепкі куәліктерді жеткізуші.",
        "Documentation.LongDescription": "Ағымдағы хост үшін әдепкі куәліктерді жеткізуші.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Тізімдегі элементтерден жиынтық мәнді жинайды.",
        "Documentation.LongDescription": "<code>accumulator</code> пайдаланып <code>list</code> тізіміндегі элементтерден жиынтық мәнді жинайды.\r\n    <code>seed</code> міндетті емес SEED параметрін орнатуға болады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "((state, current) => state + current ) өрнегін пайдаланып {1, 2, 3, 4, 5} тізіміндегі элементтерден жиынтық мәнді жинайды.",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Бастапқы мән, саны және артатын ұзақтық мәні берілсе, datetimezone мәндерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>start</code> дегенде басталатын <code>count</code> өлшемді <code>datetimezone</code> мәндерінің тізімін қайтарады. <code>step</code> көрсетілген артуы — әр мәнге қосылатын <code>duration</code> мәні.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Жаңа жыл күнінен 5 минут бұрыннан (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) бастап 1 минутқа (#duration(0, 0, 1, 0)) арттыру арқылы 10 мәннің тізімін жасау.",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Бастапқы мән, саны және артатын ұзақтық мәні берілсе, datetime мәндерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>start</code> дегенде басталатын <code>count</code> өлшемді <code>datetime</code> мәндерінің тізімін қайтарады. <code>step</code> көрсетілген артуы — әр мәнге қосылатын <code>duration</code> мәні.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Жаңа жыл күнінен 5 минут бұрыннан (#datetime(2011, 12, 31, 23, 55, 0)) бастап 1 минутқа (#duration(0, 0, 1, 0)) арттыру арқылы 10 мәннің тізімін жасау.",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Бастапқы мән, саны және артатын ұзақтық мәні берілсе, date мәндерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>start</code> дегенде басталатын <code>count</code> өлшемді <code>date</code> мәндерінің тізімін қайтарады. <code>step</code> көрсетілген артуы — әр мәнге қосылатын <code>duration</code> мәні.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Жаңа жыл кешінен (#date(2011, 12, 31)) бастап 1 күнге (#duration(1, 0, 0, 0)) арттыру арқылы 5 мәннің тізімін жасау.",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Бастапқы мән, саны және артатын ұзақтық мәні берілсе, ұзақтық мәндерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>start</code> деп басталатын <code>count</code> және көрсетілген <code>duration</code> <code>step</code> арқылы арттырылатын <code>duration</code> мәндерінің тізімін қайтарады.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1 сағаттан басталатын және бір сағатпен арттырылатын 5 мәннің тізімін жасау.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Мәндер тізімін жасайды.",
        "Documentation.LongDescription": "Берілген функцияларды пайдаланып мәндер тізімін жасайды. <code>initial</code> функциясы үміткердің бастапқы мәнін жасайды, содан кейін ол <code>condition</code>тексеріледі.\r\n    Үміткер мәні бекітілсе, ол қорытынды тізімінің бөлігі ретінде қайтарылады және келесі үміткер мәні жаңадан бекітілген мәнді <code>next</code> тасымалдау арқылы жасалады.\r\n    Үміткер мәні <code>condition</code> сәйкес келмегенде, тізім жасау процесі тоқтайды.\r\n    Сондай-ақ қорытынды тізіміндегі элементтерді түрлендіру үшін қосымша <code>selector</code> параметрін көрсетуге болады.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Оннан бастап және қайталанатын бір санына кемітуді орындау арқылы тізім жасау. Әрбір элемент нөлден үлкен болуы керек.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "x және y қамтитын жазбалар тізімін жасайды, мұндағы x — мән және y — тізім. x 10 азырақ болып қалуы керек және y тізіміндегі элементтер санын білдіреді. Тізім жасалғаннан кейін тек x мәндерін қайтарады.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Осы индекстегі тізімге мәндерді кірістіреді.",
        "Documentation.LongDescription": "<code>values</code> ішіндегі мәндерді <code>index</code> орнындағы <code>list</code> ішіне кірістіру арқылы жасалған жаңа тізімді қайтарады. Тізімдегі бірінші орын 0 индексінде болады.\r\n      <ul>\r\n        <li><code>list</code>: мәндерді кірістіру керек мақсатты тізім.</li>\r\n        <li><code>index</code>: мәндерді кірістіру керек (<code>list</code>) мақсатты тізімінің индексі. Тізімдегі бірінші орын 0 индексінде болады.</li>\r\n        <li><code>values</code>: <code>list</code> ішіне кірістірілетін мәндердің тізімі.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "({3, 4}) тізімін ({1, 2, 5}) мақсатты тізіміне 2 индексінде кірістіру.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "({1, {1.1, 1.2}}) енгізілген тізімі бар тізімді ({2, 3, 4}) мақсатты тізіміне 0 индексінде кірістіру.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Ауыстыру мәндері бар орыннан бастап саналған мәндер санын ауыстырады.",
        "Documentation.LongDescription": "<code>index</code> көрсетілген орнынан бастап <code>list</code> ішіндегі <code>count</code> мәнді <code>replaceWith</code> тізімімен ауыстырады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 7, 8, 9, 5} тізіміндегі {7, 8, 9} мәндерін {3, 4} мәндерімен ауыстыру.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Тізімде көрсетілген мәнді іздейді және оны ауыстырады.",
        "Documentation.LongDescription": "<code>list</code> мәндер тізімінде <code>oldValue</code> мәнін іздейді және әр дананы <code>newValue</code> ауыстыру мәнімен ауыстырады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"B\", \"a\", \"a\"} тізіміндегі барлық \"a\" мәндерін \"A\" мәнімен ауыстыру.",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Бастапқы мән, саны және артатын ұзақтық мәні берілсе, time мәндерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>start</code> дегенде басталатын <code>count</code> өлшемді <code>time</code> мәндерінің тізімін қайтарады. <code>step</code> көрсетілген артуы — әр мәнге қосылатын <code>duration</code> мәні.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Талтүстен (#time(12, 0, 0)) басталып бір сағатпен (#duration(0, 1, 0, 0)) артатын 4 мәннен тұратын тізімді жасау.",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Көрсетілген функцияларды пайдаланып элементтері кіріс тізімнен түрлендірілген тізімді қайтарады.",
        "Documentation.LongDescription": "Элементтері енгізу тізімінен жобаланған тізімді қайтарады.<br>\r\n    <br>\r\n<code>collectionTransform</code> функциясы әрбір элементті аралық тізімге түрлендіреді, ал <code>resultTransform</code> функциясы соңғы нәтижені құру мақсатында бастапқы элементті, сондай-ақ аралық тізімнен элементті алады.<br>\r\n    <br>\r\n    <code>collectionTransform</code> функциясында  қолтаңбасы бар <code>(x as any) as list => ...</code>, мұндағы <code>x</code> — <code>list</code> ішіндегі элемент.\r\n    <code>resultTransform</code> функциясы нәтиженің пішінін жобалап, қолтаңбасы бар <code>(x as any, y as any) as any => ...</code>, мұндағы <code>x</code> <code>list</code> ішіндегі элемент болып табылады, ал <code>y</code> — <code>x</code> мәнін <code>collectionTransform</code> мәніне өткізу арқылы жасалған тізімдегі элемент болып табылады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Адамдар мен олардың үй жануарларының тізімін жинақтаңыз.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Кездейсоқ санды қайтарады.",
        "Documentation.LongDescription": "0 мен 1 аралығындағы кездейсоқ санды қайтарады.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Кездейсоқ санды алу.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Жазбаға өрісті қосады.",
        "Documentation.LongDescription": "Өріс атауы <code>fieldName</code> және мән <code>value</code> болғанда <code>record</code> жазбасына өрісті қосады.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Жазбаға \"Address\" өрісін қосу.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Көрсетілген енгізбедегі мәтінді ауыстырады.",
        "Documentation.LongDescription": "Бастапқы <code>text</code> ішіндегі <code>old</code> мәтінін <code>new</code> мәтінімен ауыстырады. Бұл алмастыру құралын <code>List.ReplaceValue</code> және <code>Table.ReplaceValue</code> ішінде пайдалануға болады.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "\"hEllo world\" жолында \"hE\" мәтінін \"He\" мәтінімен ауыстыру.",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Көрсетілген енгізбедегі мәндерді ауыстырады.",
        "Documentation.LongDescription": "Бастапқы <code>value</code> ішіндегі <code>old</code> мәнін <code>new</code> мәнімен ауыстырады. Бұл алмастыру құралын <code>List.ReplaceValue</code> және <code>Table.ReplaceValue</code> ішінде пайдалануға болады.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "11 мәнін 10 мәнімен ауыстыру.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Smartsheet API интерфейсінен JSON нәтижесін қайтарады",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Көрсетілген соңғы нүктеде Smartsheet 2.0 REST API интерфейсіне қоңырау шалады және нәтижелерді JSON жазбасы ретінде қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Көрсетілген қосымша аргументі бар Smartsheet API интерфейсінің соңғы нүктесінің парақтарынан деректер алады",
            "Code": "Smartsheet.Content(\"парақтар\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Smartsheet API арқылы қайтарылған парақтар туралы ақпараты бар кесте"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Аргументін бір элементтік тізім ретінде қайтарып, бөлуді орындамайтын функцияны қайтарады.",
        "Documentation.LongDescription": "Аргументін бір элементтік тізім ретінде қайтарып, бөлуді орындамайтын функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Бос орында мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Бос орында мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірісті бос орын таңбаларымен бөледі. Тырнақшаларға кез келген басқа таңба сияқты қарайды.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Көрсетілген топтар санының және бағанның негізінде кестелер тізімін кестеге бөледі.",
        "Documentation.LongDescription": "<code>column</code> мәнінің және <code>hash</code> функциясының негізінде <code>table</code> <code>groups</code> кестелер тізіміне бөледі.\r\n    <code>hash</code> функциясы жол үшін хэш мәнін алу үшін <code>column</code> мәніне қолданылады. <code>groups</code> хэш мәнін бөлу қалдығы жол қайтарылған кестелердің қайсысына орналастырылатынын анықтайды.\r\n    <ul>\r\n       <li><code>table</code>: бөлетін кесте.</li>\r\n       <li><code>column</code>: жол қайтарылған кестенің қайсысында екенін анықтауға арналған хэш бағаны.</li>\r\n       <li><code>groups</code>: кіріс кесте бөлінетін кестелер саны.</li>\r\n       <li><code>hash</code>: хэш мәнін алу үшін қолданылатын функция.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Бағандардың мәнін хэш функциясы ретінде пайдаланып <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> кестесін [a] бағанында 2 кестеге бөлу.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Көрсетілген <code>startDelimiter</code> және <code>endDelimiter</code> арасындағы <code>text</code> бөлігін қайтарады.\r\n    Қосымша саны бар <code>startIndex</code> <code>startDelimiter</code> қай қайталануы қарастырылатынын көрсетеді.\r\n    <code>startIndex</code> қосымша тізімі <code>startDelimiter</code> қай қайталануы қарастырылатынын көрсетеді, сонымен қатар индекстеудің кіріс деректерінің басынан не соңынан жасалуын көрсетеді.\r\n    <code>endIndex</code> ұқсас, бірақ индекстеу <code>startIndex</code> қатысты жасалады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(Бірінші) ашық жақша мен (бірінші) жабық жақшаның арасындағы \"111 (222) 333 (444)\" бөлігін алу.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Екінші ашық жақша мен бірінші жабық жақшаның арасындағы \"111 (222) 333 (444)\" бөлігін алу.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Соңындағы екінші ашық жақша мен екінші жабық жақшаның арасындағы \"111 (222) 333 (444)\" бөлігін алу.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Көрсетілген орында бір мәтіндік мәнді екіншісіне кірістіреді.",
        "Documentation.LongDescription": "<code>offset</code> орнында <code>newText</code> мәтіндік мәнін <code>text</code> мәтіндік мәніне кірістірудің нәтижесін қайтарады. Бастауды 0 санына орналастырады.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABD\" ішінде \"B\" және \"D\" арасында \"C\" кірістіру.",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Жаңа, кездейсоқ глобалдық бірегей идентификаторды (GUID) қайтарады.",
        "Documentation.LongDescription": "Жаңа, кездейсоқ глобалдық бірегей идентификаторды (GUID) қайтарады.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Мәтіндегі осы жолдың барлық даналарын ауыстырады.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәніндегі <code>old</code> мәтіндік мәнінің барлық даналарын <code>new</code> мәтіндік мәнімен ауыстырудың нәтижесін қайтарады. Бұл функция регистрге байланысты.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Сөйлемдегі \"the\" әр данасын \"a\" әрпіне ауыстыру.",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Таңбалар ауқымын жояды және көрсетілген орында жаңа мәнді кірістіреді.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінен <code>offset</code> орнынан бастап <code>count</code> таңбалар санын жою, содан кейін <code>newText</code> мәтіндік мәнін <code>text</code> ішінде дәл сол орында кірістірудің нәтижесін қайтарады.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABGF\" мәтіндік мәніндегі 2 орнындағы бір таңбаны \"CDE\" жаңа мәтіндік мәнімен ауыстыру.",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Көрсетілген кесте түріне кілтті қосады.",
        "Documentation.LongDescription": "Көрсетілген кесте түріне кілтті қосады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Шарт қабылдайтын куәліктер тізімін қайтарады.",
        "Documentation.LongDescription": "<p>Көрсетілген <code>identityProvider</code> пайдаланып, <code>condition</code> куәліктер тізіміне түрлендіреді, <code>condition</code> барлық авторизация контекстерінде <code>true</code> мәнін қайтарады, <code>identityProvider</code> куәліктерді жеткізуші ретінде. <code>condition</code> куәліктер тізіміне түрлендіру мүмкін болмаса, қате шығарылады, мысалы, шешім қабылдау үшін, <code>condition</code> пайдаланушы немесе топ куәліктерінен басқа атрибуттарға жүгінсе.</p>\r\n    <p> Куәліктер тізімі <code>condition</code> ішінде көрінетін куәліктерді көрсетеді және олар үшін нормалау (топты кеңейту сияқты) орындалмайды.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Берілген қысу түрін пайдаланып екілік мәнді қысады.",
        "Documentation.LongDescription": "Берілген қысу түрін пайдаланып екілік мәнді қысады.  Бұл шақырудың нәтижесі кірістің қысылған көшірмесі болып табылады. Қысу түрлері келесіні қамтиды:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Екілік мәнді қысыңыз.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Берілген қысу түрін пайдаланып, екілік мәнді қысудан шығарады.",
        "Documentation.LongDescription": "Берілген қысу түрін пайдаланып, екілік мәнді қысудан шығарады.  Бұл шақырудың нәтижесі кірістің қысудан шығарылған көшірмесі болып табылады. Қысу түрлері келесіні қамтиды:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Екілік мәнді қысудан шығарады.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Ауытқудан басталатын екілік мәннің қосалқы жиынтығын қайтарады.",
        "Documentation.LongDescription": "<code>binary</code> ауытқуынан басталатын екілік мәннің қосалқы жиынтығын қайтарады. <code>offset</code> міндетті емес параметрі қосалқы жиынтықтың максимал ұзындығын орнатады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "6 ауытқуында басталатын екілік мәннің қосалқы жиынтығын қайтарады.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Екілік мәннің 6 ауытқуынан 2 ұзындығына ие қосалқы жиынтықты қайтарады.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Көрсетілген бет өлшемін пайдаланып, көрсетілген екілік файлдарды екілік файлдар тізіміне бөледі.",
        "Documentation.LongDescription": "<code>binary</code> жазбаларын екілік файлдар тізіміне бөледі, онда шығыс тізімнің бірінші элементі – \r\n    бастапқы екілік файлдан алынған алғашқы <code>pageSize</code> байттан тұратын екілік файл. Шығыс тізімнің келесі элементі – бастапқы екілік файлдан алынған келесі <code>pageSize</code> байттан тұратын екілік файл. Солай жалғаса береді.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Сұрау және әрекет операциялары үшін пайдаланушы анықтаған өңдегіштер арқылы екілік мәнді жасайды немесе кеңейтеді.",
        "Documentation.LongDescription": "<p>Көрініске операция қолданылғанда <code>handlers</code> ішінде көрсетілген функциялар операцияның әдепкі әрекетінің орнына пайдаланылатын <code>binary</code> көрінісін қайтарады.</p>\r\n<p><code>binary</code> көрсетілген болса, барлық өңдегіш функциялар міндетті емес болып табылады. <code>binary</code> көрсетілмеген болса, <code>GetStream</code> өңдегіш функция қажет. Операция үшін өңдегіш функция көрсетілмеген болса, оның орнына <code>binary</code> дегенге операцияның әдепкі әрекеті қолданылады (<code>GetExpression</code> жағдайын қоспағанда).</p>\r\n<p>Өңдегіш функциялар <code>binary</code> қатысты операцияны қолдану нәтижесіне (немесе <code>GetExpression</code> жағдайында нәтижесіндегі көрініске) семантикалық түрде баламалы.</p>\r\n<p>Өңдегіш функция қате тудырса, көрініске операцияның әдепкі әрекеті қолданылады.</p>\r\n<p><code>Binary.View</code> дегенді деректер көзін қысқартуды (M сұрауларының көз операцияларына өтуі, мысалы, файл бөлімін жүктеп алу үшін) жүзеге асыру үшін пайдалануға болады.</p>\r\n<p><code>Binary.View</code> толығырақ сипаттамасын жарияланған Power Query теңшелетін қосқыш құжаттамасынан қараңыз.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Ұзындықты анықтау үшін деректерге қатынасуды қажет етпейтін негізгі көріністі жасайды.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Функция арқылы көрсетілген байттар реті бар екілік пішімді қайтарады.",
        "Documentation.LongDescription": "<code>binaryFormat</code> арқылы көрсетілген байттар реті бар екілік пішімді қайтарады.  Әдепкі байттар реті — <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Оқылып қойылған мәннің негізінде келесі екілік пішімді таңдайтын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Оқылып қойылған мәннің негізінде келесі екілік пішімді таңдайтын екілік пішімді қайтарады.  Бұл функция жасаған екілік пішім мәні кезеңдермен жұмыс істейді:<ul>\r\n<li><code>binaryFormat</code> параметрі арқылы көрсетілген екілік пішім мәнді оқу үшін пайдаланылады.</li>\r\n<li>Мән <code>chooseFunction</code> параметрі арқылы көрсетілген таңдау функциясына беріледі.</li>\r\n<li>Таңдау функциясы мәнді тексереді және екінші екілік пішімді қайтарады.</li>\r\n<li>Екінші екілік пішім екінші мәнді оқу үшін пайдаланылады.</li>\r\n<li>Егер біріктіру функциясы көрсетілген болса, онда бірінші және екінші мәндер біріктіру функциясына беріледі, сөйтіп нәтижесіндегі мән қайтарылады.</li>\r\n<li>Егер біріктіру функциясы көрсетілмеген болса, екінші мән қайтарылады.</li>\r\n<li>Екінші мән қайтарылады.</li>\r\n</ul>Қосымша <code>type</code> параметрі таңдау функциясы қайтаратын екілік пішімнің түрін қайтарады.  <code>type any</code>, <code>type list</code> немесе <code>type binary</code> көрсетуге болады.  Егер <code>type</code> параметрі көрсетілмеген болса, онда <code>type any</code> пайдаланылады.   Егер <code>type list</code> немесе <code>type binary</code> пайдаланылса, онда жүйе буферге сақталғанның орнына ағындық <code>binary</code> немесе <code>list</code> мәнін қайтара алады, бұл пішімді оқу үшін қажет жад мөлшерін азайта алады.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Байттар тізімін оқу, мұндағы элементтер саны бірінші байт арқылы анықталады.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Байттар тізімін оқу, мұндағы элементтер саны бірінші байт арқылы анықталады, сөйтіп бірінші байтты оқуды сақтау.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Байттар тізімін оқу, мұндағы элементтер саны бірінші байт арқылы ағын тізімін пайдаланып анықталады.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Элементтер тобын оқитын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Параметрлер келесідей:\r\n<ul>\r\n<li><code>binaryFormat</code> параметрі кілт мәнінің екілік пішімін көрсетеді.</li>\r\n<li><code>group</code> параметрі белгілі элементтер тобы туралы ақпаратты қамтамасыз етеді.</li>\r\n<li><code>extra</code> қосымша параметрін кез келген кілттен кейінгі күтпеген мән үшін екілік пішімдегі мәнді қайтаратын функцияны көрсету үшін пайдалануға болады.  Егер <code>extra</code> параметрі көрсетілмесе, онда күтпеген кілт мәндері бар болса, қате орын алады.</li>\r\n</ul>\r\n<code>group</code> параметр элемен анықтамаларының тізімін көрсетеді.  Әр элемент анықтамасы 3-5 мәнді қамтитын тізім болып табылады, келесідей:\r\n<ul>\r\n<li>Кілт мәні.  Элементке сәйкес кілттің мәні.  Бұл элементтер жиынында бірегей болуы керек.</li>\r\n<li>Элементтің пішімі.  Элементтің мәніне сәйкес екілік пішім.  Бұл әр элементте әр түрлі пішім болуына мүмкіндік береді. </li>\r\n<li>Элементтің қайталануы.   Элемент топта неше рет көрсетілетіні күтілетінін білдіретін <code>BinaryOccurrence.Type</code> мәні.   Міндетті элементтер жоқ болса, қате орын алады.  Міндетті немесе қосымша қайталанатын элементтер күтпеген кілт мәндері сияқты өңделеді.</li>\r\n<li>Әдепкі элементтің мәні (қосымша).  Егер әдепкі элемент мәні элемент анықтамалары тізімінде болса және мәні нөл болмаса, онда ол әдепкі мәннің орнына пайдаланылады.  Қайталанатын немесе қосымша элементтердің әдепкі мәні — null, әл қайталанатын мәндердің әдепкі мәні — бос тізім { }.</li>\r\n<li>Элемент мәнін түрлендіру (қосымша).   Егер элемен анықтамалары тізімінде элемент мәнін түрлендіру функциясы бар болса және мәні нөл емес болса, онда ол қайтарылмай тұрып элемент мәнін түрлендіру үшін шақырылады.  Түрлендіру функциясы элемент енгізбеде болса ғана шақырылады (ол ешқашан әдепкі мәнмен шақырылмайды). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Төменде бір байттық кілт мәні, топта 4 күтілетін элемент бар, олардың барлығында кілттен кейін деректер байты бар деп есептеледі.  Элементтер енгізбеде келесідей көрсетіледі:\r\n<ul>\r\n<li>1-кілт міндетті болып табылады және 11 мәнімен көрсетіледі.</li>\r\n<li>2-кілт қайталанады және 22 мәнімен екі рет көрсетіледі, сөйтіп { 22, 22 } мәніне әкеледі.</li>\r\n<li>3-кілт міндетті емес және көрсетілмейді, сөйтіп нөл мәніне әкеледі.</li>\r\n<li>4-кілт қайталанады, бірақ көрсетілмейді, сөйтіп { } мәніне әкеледі.</li>\r\n<li>5-кілт топтың бөлігі болып табылмайды, бірақ 55 мәнімен бір рет көрсетіледі.  Қосымша функция 5 кілт мәнімен шақырылады және сол мәнге сәйкес пішімді (BinaryFormat.Byte) қайтарады.  55 мәні оқылады және жойылады.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "Келесі мысал элемент мәнін түрлендіруді және әдепкі элемент мәнін көрсетеді.   1-кілт бар қайталанатын элемент List.Sum пайдаланып мәндер тізімінің қосындысын есептейді.  2-кілт бар қосымша элементтің әдепкі мәні нөлдің орнына 123 болады.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Оқуға болатын деректер мөлшерін шектейтін екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Оқуға болатын деректер мөлшерін шектейтін екілік пішімді қайтарады.  <code>BinaryFormat.List</code> және <code>BinaryFormat.Binary</code> екеуін де деректердің соңына дейін оқу үшін пайдалануға болады.  <code>BinaryFormat.Length</code> оқылатын байттар санын шектеу үшін пайдалануға болады.  <code>binaryFormat</code> параметрі шектейтін екілік пішімді көрсетеді.  <code>length</code> параметрі оқитын байттар санын көрсетеді.  <code>length</code> параметрі сандық мән немесе оқылып жатқан мәннің алдында келетін ұзындық мәнінің пішімін көрсететін екілік пішімдегі мән болуы мүмкін.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Байттар тізімін оқу кезінде байттар санын 2 мәнімен шектеу.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Байттар тізімін оқу кезінде оқылатын байттар санын тізім алдындағы байт мәнімен шектеу.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Оқылған мәндерді басқа екілік пішім арқылы түрлендіретін екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Оқылған мәндерді басқа екілік пішім арқылы түрлендіретін екілік пішімді қайтарады.  <code>binaryFormat</code> параметрі мәнді оқу үшін пайдаланылатын екілік пішімді көрсетеді.  <code>function</code> оқылған мәнмен шақырылады және түрлендірілген мәнді қайтарады.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Байтты қосу және оған біреуін қосу.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Мәндерді салыстыру үшін реттік ережелерді пайдаланатын салыстыру функциясын береді.",
        "Documentation.LongDescription": "Көрсетілген <code>x</code> және <code>y</code> мәндерін салыстыру үшін реттік ережелерді пайдаланатын салыстыру функциясын қайтарады.<br>\r\n      <br>\r\n      Салыстыру функциясы екі аргументті қабылдайды және егер бірінші мән сәйкесінше екіншісінен кіші, оған тең немесе үлкен болса -1, 0 немесе 1 мәнін қайтарады.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Реттік ережелерді пайдалана отырып, \"encyclopædia\" және \"encyclopaedia\" мәндері эквивалентті екендігін анықтау. Бұл <code>Comparer.FromCulture(\"en-US\")</code> пайдаланған кезде эквивалентті екендігін ескеріңіз. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Мәндерді салыстыру үшін Қарапайым ережелерді пайдаланатын регистрді елемейтін салыстыру құралы функциясын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>x</code> және <code>y</code> мәндерін салыстыру үшін реттік ережелерді пайдаланатын пернетақта регистрінің есебімен салыстыру функциясын қайтарады.<br>\r\n        <br>\r\n        Салыстыру функциясы екі аргументті қабылдайды және бірінші мән сәйкесінше екіншісінен кіші, оған тең немесе үлкен болса -1, 0 немесе 1 мәнін қайтарады.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Регистрді ескеретін Реттік ережелерді пайдалана отырып, \"Abc\" параметрін \"abc\" параметрімен салыстырыңыз. <code>Comparer.Ordinal</code> пайдалана отырып, \"Abc\" параметрі \"abc\" параметрінен кіші екенін ескеріңіз. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Өлшем атрибутының сипатын қайтарады.",
        "Documentation.LongDescription": "<code>attribute</code> өлшем атрибутының <code>propertyName</code> сипатын қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Өлшем сипатын (ұяшық сипатын) қайтарады.",
        "Documentation.LongDescription": "<code>measure</code> өлшемінің <code>propertyName</code> сипатын қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL сұрауының көзі",
        "Documentation.LongDescription": "SQL сұрауларын орындау үшін Databricks деректер көзін анықтау"
      },
      "ReturnType": "Databricks SQL сұрауы",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL сұрауының көзі",
        "Documentation.LongDescription": "SQL сұрауларын орындау үшін Databricks деректер көзін анықтау"
      },
      "ReturnType": "Databricks SQL сұрауы",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Күнге көрсетілген күндерді қосады.",
        "Documentation.LongDescription": "<code>datetime</code> <code>dateTime</code> мәніне <code>numberOfDays</code> күнді қосудан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> нәтижесін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: күндер қосылатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>numberOfDays</code>: қосатын күндер саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 күнін білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 5 күнді қосу.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Күнге көрсетілген айларды қосады.",
        "Documentation.LongDescription": "<code>datetime</code> <code>dateTime</code> мәніне <code>numberOfMonths</code> айды қосудан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> нәтижесін қайтарады.\r\n      <ul>\r\n        <li><code>dateTime</code>: айлар қосылатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n        <li><code>numberOfMonths</code>: қосатын айлар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 күнін білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 5 айды қосу.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "5/14/2011 08:15:22 AM күнін және уақытын білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 18 айды қосу.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Күнге көрсетілген тоқсандарды қосады.",
        "Documentation.LongDescription": "<code>datetime</code> <code>dateTime</code> мәніне <code>numberOfQuarters</code> тоқсанды қосудан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> нәтижесін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: тоқсандар қосылып жатқан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>numberOfQuarters</code>: қосатын тоқсандар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 күнін білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 1 тоқсанды қосу.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Күнге көрсетілген апталарды қосады.",
        "Documentation.LongDescription": "<code>datetime</code> <code>dateTime</code> мәніне <code>numberOfWeeks</code> аптаны қосудан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> нәтижесін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: апталар қосылатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>numberOfWeeks</code>: қосатын апталар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 күнін білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 2 аптаны қосу.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Күнге көрсетілген жылдарды қосады.",
        "Documentation.LongDescription": "<code>datetime</code> <code>dateTime</code> мәніне <code>numberOfYears</code> қосудан <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> нәтижесін қайтарады.\r\n      <ul>\r\n        <li><code>dateTime</code>: жылдар қосылатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n        <li><code>numberOfYears</code>: қосатын жылдар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 күнін білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 4 жылды қосу.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "5/14/2011 08:15:22 AM күнін және уақытын білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніне 10 жылды қосу.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі күндер санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің келесі күндер санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>days</code>: күндер саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі күннің келесі екі күн ішінде екенін анықтаңыз.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі айлар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің келесі айлар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>months</code>: айлар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі айдың келесі екі ай ішінде екенін анықтаңыз.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі тоқсандар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің келесі тоқсандарда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>quarters</code>: тоқсандар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі тоқсанның келесі екі тоқсан ішінде екенін анықтаңыз.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі апталар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің келесі апталар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>weeks</code>: апталар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі аптаның келесі екі апта ішінде екенін анықтаңыз.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі жылдар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің келесі жылдар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>years</code>: жылдар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі жылдың келесі екі жыл ішінде екенін анықтаңыз.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен күндер санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің алдыңғы күндер санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>days</code>: күндер саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан бұрынғы күннің алдыңғы екі күн ішінде екенін анықтаңыз.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен айлар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің алдыңғы айлар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>months</code>: айлар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан бұрынғы айдың алдыңғы екі ай ішінде екенін анықтаңыз.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен тоқсандар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің алдыңғы тоқсандар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>quarters</code>: тоқсандар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан бұрынғы тоқсанның алдыңғы екі тоқсан ішінде екенін анықтаңыз.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен апталар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің алдыңғы апталар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>weeks</code>: апталар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан бұрынғы аптаның алдыңғы екі апта ішінде екенін анықтаңыз.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен жылдар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәнінің алдыңғы жылдар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>years</code>: жылдар саны.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан бұрынғы жылдың алдыңғы екі жыл ішінде екенін анықтаңыз.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Күні/уақыты мәніне уақыт белдеуі ақпаратын қосады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәніне уақыт белдеуі ақпаратын қосады. Уақыт белдеуі ақпараты <code>timezoneHours</code> және таңдау бойынша <code>timezoneMinutes</code> (ол UTC уақытынан қалаған ауытқуды көрсетеді) қамтиды.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Уақыт белдеуін UTC+7:30 (UTC-ден 7 сағат және 30 минут кейін) деп орнатады.",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі сағаттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі сағаттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>hours</code>: сағаттар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі сағаттың келесі екі сағатта екендігін анықтау.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі минуттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі минуттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>minutes</code>: минуттар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі минуттың келесі екі минутта екендігін анықтау.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі секундтар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі секундтар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>seconds</code>: секундтар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі секундтың келесі екі секундта екендігін анықтау.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен сағаттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен сағаттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>hours</code>: сағаттар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі сағаттың өткен екі сағатта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен минуттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен минуттар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>minutes</code>: минуттар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі минуттың өткен екі минутта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен секундтар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен секундтар санында болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      <li><code>seconds</code>: секундтар саны.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі секундтың өткен екі секундта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Мәннің уақыт белдеуін өзгертеді.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> күн және уақыт белдеуі мәніндегі уақыт белдеуі туралы ақпаратты <code>timezoneHours</code> және таңдау бойынша <code>timezoneMinutes</code> қамтамасыз еткен жаңа уақыт белдеуі туралы ақпаратқа өзгертеді.\r\n    Егер <code>dateTimeZone</code> мәнінде уақыт белдеуі құрамдасы болмаса, ерекшелік туралы хабар көрсетіледі.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) үшін уақыт белдеуі туралы ақпаратты 8 сағатқа өзгерту.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) үшін уақыт белдеуі туралы ақпаратты -30 минутқа өзгерту.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Мәнге ендірілген құрама веб-бағдарламадағы атау бойынша қатынасады.",
        "Documentation.LongDescription": "Мәнге ендірілген құрама веб-бағдарламадағы атау бойынша қатынасады.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Бір тізім аргументін алатын функцияның үстіне арнайы параметр қолтаңбасы бар функцияны жасайды",
        "Documentation.LongDescription": "<code>function</code> унарлық функциясын жасайды және аргументтерден тізім жасайтын және оны <code>function</code> үшін беретін <code>functionType</code> түріндегі жаңа функция жасайды.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "List.Sum функциясын аргументтері қосылатын екі аргументті функцияға түрлендіреді",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Тізімді алатын функцияны екі аргументті функцияға түрлендіреді",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Берілген функцияны шақырады",
        "Documentation.LongDescription": "Көрсетілген функцияны көрсетілген аргументтер тізімін пайдаланып шақырады және нәтижені қайтарады.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Record.FieldNames функциясын бір [A=1,B=2] аргументімен шақырады",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Көрсетілген ұзақтық өткен соң берілген функцияны шақырады.",
        "Documentation.LongDescription": "Ұзақтық <code>delay</code> өткен соң <code>function</code> шақыру нәтижесін қайтарады.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Бірнеше шақыруды топтап, векторлық функциямен қатар скалярлық функцияны жасайды.",
        "Documentation.LongDescription": "<p>Аргументтердің бір жолы бар <code>vectorFunction</code> шақыратын <code>scalarFunctionType</code> түріндегі скалярлық функцияны қайтарады және оның бір шығысын қайтарады. Сонымен қатар, скалярлық функция кіріс деректері кестесінің әрбір жолы үшін қайталанып қолданылса, мысалы, Table.AddColumn, <code>vectorFunction</code> барлық кіріс деректері үшін бір рет қолданылады.</p>\r\n<p><code>vectorFunction</code> бағандары <code>scalarFunctionType</code> параметрлеріне аты мен орны бойынша сәйкес келетін кестеге өтеді. Бұл кестенің әрбір жолында скалярлық функция үшін бір шақыру үшін аргументтер болады, <code>scalarFunctionType</code> параметрлеріне сәйкес бағандармен.</p>\r\n<p><code>vectorFunction</code> кіріс кестесімен бірдей ұзындыққа ие тізімді қайтаруы тиіс, оның элементі әр орында бірдей орындағы кіріс жолында скалярлық функцияны бағалаумен бірдей нәтижеге ие болуы тиіс.</p>\r\n<p>Кіріс кестесінің ағынмен кіруі күтіледі, кіріс келгенде <code>vectorFunction</code> өз шығысын ағынмен шығаруы күтіледі, бір мезгілде тек бір кіріс бөлігімен жұмыс істейді. Атап айтқанда, <code>vectorFunction</code> қзінің кіріс кестесін бірнеше рет көрсетпеуі тиіс.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Бөліктерден географиялық нүктені көрсететін жазба жасайды.",
        "Documentation.LongDescription": "Бойлық, ендік және бар болса, биіктік (Z) және өлшем (M) сияқты құрамдас бөліктерінен географиялық нүктені білдіретін жазба құрылымын жасайды. Қосымша кеңістіктік сілтеме идентификаторы (SRID) әдепкі мәннен (4326) өзгеше болса, берілуі мүмкін.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Бөліктерден геометриялық нүктені білдіретін жазба құрылымын жасайды.",
        "Documentation.LongDescription": "X координатасы, Y координатасы, бар болса, Z координатасы және өлшем (M) сияқты құрамдас бөліктерінен географиялық нүктені білдіретін жазба құрылымын жасайды. Қосымша кеңістіктік сілтеме идентификаторы (SRID), әдепкі мәннен (0) өзгеше болса, берілуі мүмкін.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Куәлік жасайды.",
        "Documentation.LongDescription": "Куәлік жасайды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Куәліктің куәліктер жиынтығына кіретінін не кірмейтінін анықтайды.",
        "Documentation.LongDescription": "Куәліктің куәліктер жиынтығына кіретінін не кірмейтінін анықтайды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Тізімдегі барлық тақ нөмірлі ауытқу элементтерінен тұратын тізімді қайтарады.",
        "Documentation.LongDescription": "Тізімдегі барлық тақ нөмірлі ауытқу элементтерінен тұратын тізімді қайтарады. Параметрлерге байланысты <code>list</code> тізімінде мәндерді қабылдау және өткізіп жіберу арасында ауысып отырады.\r\n    <ul>\r\n    <li><code>count</code>: әр уақытта өткізіп жіберілетін мәндер санын көрсетеді.</li>\r\n    <li><code>repeatInterval</code>: өткізіп жіберілген мәндер арасында қанша мән қосылатынын көрсететін міндетті емес қайталау аралығы.</li>\r\n    <li><code>offset</code>: бастапқы ауытқуда мәндерді өткізіп жіберуді бастаудың міндетті емес ауытқу параметрі.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10} дегеннен бірінші санды өткізіп жіберетін тізім жасау.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "{1..10} дегеннен әр екінші санды өткізіп жіберетін тізім жасау.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "{1..10} дегеннен 1-ден басталатын және әр екінші санды өткізіп жіберетін тізім жасау.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "{1..10} дегеннен 1-ден басталатын, бір мәнді өткізіп жіберетін, екі мәнді қалдыратын және т.с.с. тізім жасау.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Тізімнің мәнді қамтитынын көрсетеді.",
        "Documentation.LongDescription": "<code>list</code> тізімі <code>value</code> мәнін қамтитынын көрсетеді.\r\n    Мән тізімде табылса, шын мәнін, керісінше болса жалған мәнін қайтарады. Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 3 санын қамтитынын анықтау.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 6 санын қамтитынын анықтау.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Тізім басқа тізімдегі барлық мәндерді қайда қамтитынын көрсетеді.",
        "Documentation.LongDescription": "<code>list</code> тізімі <code>values</code> екінші тізіміндегі барлық мәндерді қамтитынын көрсетеді.\r\n    Мән тізімде табылса, шын мәнін, керісінше болса өтірік мәнін қайтарады. Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 3 және 4 сандарын қамтитынын анықтау.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 5 және 6 сандарын қамтитынын анықтау.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Тізім басқа тізімдегі мәндердің кез келгенін қайда қамтитынын көрсетеді.",
        "Documentation.LongDescription": "<code>list</code> тізімі <code>values</code> екінші тізіміндегі мәндердің кез келгенін қамтитынын көрсетеді.\r\n        Мән тізімде табылса, шын мәнін, керісінше болса өтірік мәнін қайтарады. Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 3 немесе 9 санын қамтитынын анықтау.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 4, 5} тізімі 6 немесе 7 сандарын қамтитынын анықтау.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Екі сандар тізімінің арасындағы ковариацияны қайтарады.",
        "Documentation.LongDescription": "<code>numberList1</code> және <code>numberList2</code> екі тізім арасындағы ковариацияны қайтарады. <code>numberList1</code> және <code>numberList2</code> <code>number</code> мәндерінің бірдей санын қамтуы керек.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Екі тізім арасындағы ковариацияны есептеу.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Екі көрсетілген тізімнің айырмашылығын қайтарады.",
        "Documentation.LongDescription": "<code>list1</code> тізіміндегі <code>list2</code> тізімінде жоқ элементтерді қайтарады. Қайталанатын мәндерге қолдау көрсетіледі.\r\n    Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізіміндегі {4, 5, 3} тізімінде жоқ элементтерді анықтау.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "{1, 2} тізіміндегі {1, 2, 3} тізімінде жоқ элементтерді анықтау.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Көрсетілген мәнді қамтитын мәндер тізімін (жазба өрістерін қоса) қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәнін қамтитын <code>list</code> тізіміндегі мәндердің тізімін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{\"a\", \"b\", \"ab\"} тізімінде \"a\" сәйкес мәтіндік мәндерді анықтау. ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Қанша элементті қайтару керектігін көрсету немесе шартты нақтылау арқылы тізімдегі элементтердің бірінші жиынын қайтарады.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Егер сан көрсетілген болса, соған дейінгі элемент қайтарылады. </li>\r\n  <li>Егер шарт көрсетілген болса, басында шартқа сай болған барлық элементтер қайтарылады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} тізіміндегі 0-ден үлкенірек бастапқы мәндерді анықтау.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Тізімдегі барлық мәндер шарт функциясын орындаса, шын мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі барлық мәндер <code>condition</code> шарт функциясын орындаса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{11, 12, 13} тізіміндегі барлық мәндердің 10-нан үлкен болуын анықтау.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} тізіміндегі барлық мәндердің 10-нан үлкен болуын анықтау.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Кез келген мән шарт функциясын орындаса, шын мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі мәндердің кез келгені <code>condition</code> шарт функциясын орындаса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{9, 10, 11} тізіміндегі мәндердің кез келгенінің 10-нан үлкен болуын анықтау.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3} тізіміндегі мәндердің кез келгенінің 10-нан үлкен болуын анықтау.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Тізімдегі ең үлкен мәнді(дерді) қайтарады. Қайтарылатын мәндер саны немесе сүзу шарты көрсетілуі керек.",
        "Documentation.LongDescription": "<code>list</code> тізімдегі ең үлкен мәнді(дерді) қайтарады.\r\n    Жолдар сұрыпталғаннан кейін нәтижені одан әрі сүзу үшін міндетті емес параметрлерді көрсету керек. <code>countOrCondition</code> міндетті емес параметрі қайтарылатын мәндер санын немесе сүзу шартын көрсетеді. <code>comparisonCriteria</code> міндетті емес параметрі тізімдегі мәндерді салыстыру әдісін көрсетеді.\r\n <ul>\r\n        <li> <code>list</code>: мәндер тізімі.</li>\r\n        <li> <code>countOrCondition</code>:  егер сан көрсетілген болса, арту ретімен берілген <code>countOrCondition</code> дейінгі элементтер тізімі қайтарылады. Егер шарт көрсетілген болса, басында шартқа сай болған элементтер тізімі қайтарылады. Бір элемент шартқа сай болмаса, басқа элементтер қарастырылмайды.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Міндетті емес]</i> тізімдегі элементтерді салыстыру әдісін анықтау үшін <code>comparisonCriteria</code> міндетті емес мәнін көрсетуге болады. Егер бұл параметрдің мәні null болса, әдепкі салыстыру құралы пайдаланылады.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Тізімдегі ең кіші мәнді(дерді) қайтарады. Қайтарылатын мәндер санын немесе сүзу шартын көрсетуге болады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі ең кіші мәнді(дерді) қайтарады.\r\n    <code>countOrCondition</code> параметрі қайтарылатын мәндер санын немесе сүзу шартын көрсетеді. <code>comparisonCriteria</code> міндетті емес параметрі тізімдегі мәндерді салыстыру әдісін көрсетеді.\r\n <ul>\r\n        <li> <code>list</code>: мәндер тізімі.</li>\r\n        <li> <code>countOrCondition</code>:  егер сан көрсетілген болса, арту ретімен берілген <code>countOrCondition</code> дейінгі элементтер тізімі қайтарылады. Егер шарт көрсетілген болса, басында шартқа сай болған элементтер тізімі қайтарылады. Бір элемент шартқа сай болмаса, басқа элементтер қарастырылмайды. Егер бұл параметрдің мәні null болса, тізімдегі бір ең кіші мән қайтарылады.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Міндетті емес]</i> тізімдегі элементтерді салыстыру әдісін анықтау үшін <code>comparisonCriteria</code> міндетті емес мәнін көрсетуге болады. Егер бұл параметрдің мәні null болса, әдепкі салыстыру құралы пайдаланылады.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{3, 4, 5, -1, 7, 8, 2}</code> тізіміндегі 5 ең кіші мәнді анықтау.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Бастапқы мән, саны және міндетті емес арту мәні берілген болса, сандар тізімін қайтарады.",
        "Documentation.LongDescription": "Бастапқы мән, саны және міндетті емес арту мәні берілген болса, сандар тізімін қайтарады. Әдепкі арту мәні — 1.\r\n<ul>\r\n   <li><code>start</code>: тізімдегі бастапқы мән.</li>\r\n   <li><code>count</code>: жасалатын мәндер саны.</li>\r\n   <li><code>increment</code>: <i>[Міндетті емес]</i> артудың мәні. Егер өткізіп жіберілсе, мәндер 1 санына арттырылады.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "1-ден басталатын 10 ретті сандар тізімін жасау.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Әр келесі сан үшін 2 артуымен 1-ден басталатын 10 санның тізімін жасау.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Берілген ықтималдықтарға сәйкес келетін бір немесе бірнеше үлгі процентильді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінің бір немесе бірнеше үлгі процентилін қайтарады. Егер <code>percentiles</code> мәні 0,0 және 1,0 арасындағы сан болса, ол процентиль ретінде қарастырылады және нәтиже\r\n    сол ықтималдыққа сәйкес келетін жалғыз мән болады. Егер <code>percentiles</code> мәні 0,0 және 1,0 арасындағы сандар тізімі болса, нәтиже кіріс ықтималдығына сәйкес келетін\r\n    процентильдер тізімі болады. <code>options</code> PercentileMode параметрін тәжірибелі пайдаланушылар нақтырақ интерполяция әдісін таңдау үшін пайдалана алады, бірақ ол жалпы пайдалану үшін ұсынылмаған.\r\n    <code>PercentileMode.ExcelInc</code> және <code>PercentileMode.ExcelExc</code> алдын ала анықталған символдары <code>PERCENTILE.INC</code> және <code>PERCENTILE.EXC</code> Excel функциялары пайдаланатын\r\n    интерполяция әдістеріне сәйкес келеді. Әдепкі жұмыс режимі <code>PercentileMode.ExcelInc</code> үшін сәйкес. \r\n    <code>PercentileMode.SqlCont</code> және <code>PercentileMode.SqlDisc</code> символдары тиісінше <code>PERCENTILE_CONT</code> және\r\n    <code>PERCENTILE_DISC</code> үшін SQL Server жұмыс режиміне сәйкес келеді.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> тізімінің бірінші квартилін табыңыз.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Excel <code>PERCENTILE.EXC</code> үшін сәйкес келетін интерполяция әдісін пайдалану арқылы <code>{5, 3, 1, 7, 9}</code> тізімінің квартильдерін табыңыз.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Тізімдегі мәннің ауытқу(лар)ын қайтарады.",
        "Documentation.LongDescription": "<code>value</code> мәні <code>list</code> тізімінде кездесетін ауытқуды қайтарады. Мән жоқ болса, -1 мәнін қайтарады.\r\n    <code>occurrence</code> міндетті емес дана параметрін көрсетуге болады.\r\n<ul>\r\n   <li><code>occurrence</code>: есеп беретін даналардың ең көп саны.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізіміндегі 3 мәні кездесетін орынды анықтау.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Тізімдегі мәннің бірінші ауытқуын қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінде <code>values</code> тізіміндегі мәннің бірінші данасының ауытқуын қайтарады. Егер дана табылмаса, -1 мәнін қайтарады.\r\n    <code>occurrence</code> міндетті емес дана параметрін көрсетуге болады.\r\n<ul>\r\n   <li><code>occurrence</code>: қайтаруға болатын даналардың ең көп саны.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізіміндегі 2 немесе 3 мәні кездесетін бірінші орынды анықтау.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Ауытқудан басталатын тізімнің ішкі жиынын қайтарады.",
        "Documentation.LongDescription": "<code>list</code> ауытқуынан басталатын тізімнің ішкі жиынын қайтарады. <code>offset</code> міндетті емес параметрі жиындағы элементтердің ең көп санын орнатады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "1 мен 10 арасындағы сандар тізімінің 6 ауытқуында басталатын жиынды анықтау.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "1 мен 10 арасындағы сандар тізімінің 6 ауытқуында басталатын 2 ұзындығы бар жиынды анықтау.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Тізімде бар 1-тізім элементтерін жояды.",
        "Documentation.LongDescription": "<code>list2</code> ішіндегі көрсетілген мәндердің барлық даналарын <code>list1</code> ішінен жояды. Егер <code>list2</code> ішіндегі мәндер <code>list1</code> ішінде жоқ болса, бастапқы тізім қайтарылады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{2, 4, 6} тізіміндегі элементтерді {1, 2, 3, 4, 2, 5, 5} тізімінен жою.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Кіріс мәндердің барлық даналарын жояды.",
        "Documentation.LongDescription": "<code>list2</code> ішіндегі көрсетілген мәндердің барлық даналарын <code>list1</code> тізімінен жояды. Егер <code>list2</code> ішіндегі мәндер <code>list1</code> ішінде жоқ болса, бастапқы тізім қайтарылады.\r\n    Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5, 5} мәндерінен {1, 5} мәндері жоқ тізімді жасау.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Көрсетілген орыннан бастап саналған мәндер санын жояды.",
        "Documentation.LongDescription": "<code>index</code> көрсетілген орнынан бастап <code>list</code> ішіндегі <code>count</code> мәнді жояды.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "4 индексінен бастап {1, 2, 3, 4, -6, -2, -1, 5} тізіміндегі 3 мәнді жояды.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Бастапқы тізімнің қайталаулар саны болып табылатын тізімді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> бастапқы тізімінің <code>count</code> қайталауы болып табылатын тізімді қайтарады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} 3 рет қайталанатын тізімді жасау.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "{ old, new } әр ауыстыруын қолданады.",
        "Documentation.LongDescription": "<code>list</code> тізімінде көрсетілген ауыстыруларды орындайды. <code>replacements</code> ауыстыру әрекеті тізімде көрсетілген екі мәндік (бұрынғы мән және жаңа мән) тізімнен тұрады.\r\n    Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "5 мәнін -5 мәнімен және 1 мәнін -1 мәнімен ауыстырып, {1, 2, 3, 4, 5} мәндерінен тізім жасау.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Шартқа сәйкес мәндердің тізімін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінен <code>selection</code> таңдау шартына сәйкес мәндер тізімін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, -3, 4, 9, -2} тізімінде 0-ден үлкенірек мәндерді анықтау.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Көрсетілген бет өлшемін пайдаланып, көрсетілген тізімді тізімдер тізіміне бөледі.",
        "Documentation.LongDescription": "<code>list</code> тізімдер тізіміне бөледі, мұнда шығыс тізімінің бірінші элементі — \r\n    бастапқы тізімнің алғашқы <code>pageSize</code> элементін қамтитын тізім, шығыс тізімінің келесі элементі — бастапқы тізімнің келесі <code>pageSize</code> элементін қамтитын тізім және т.б.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Осы тізімнен есептелген жаңа мәндер тізімін қайтарады.",
        "Documentation.LongDescription": "<code>transform</code> түрлендіру функциясын <code>list</code> тізіміне қолдану арқылы жаңа мәндер тізімін қайтарады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} тізіміндегі әр мәнге 1 мәнін қосу.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Екі сан бөліндісінің арктангенсін қайтарады.",
        "Documentation.LongDescription": "<code>y</code> және <code>x</code> екі сан бөліндісінің арктангенсін қайтарады. Бөлу <code>y</code>/<code>x</code> түрінде көрсетіледі.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Екі енгізбе арасында биттік \"And\" әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>number1</code> және <code>number2</code> арасында биттік \"And\" әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Екі енгізбе арасында биттік \"Or\" әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>number1</code> және <code>number2</code> арасында биттік \"Or\" әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Биттер жиынын солға жылжытады.",
        "Documentation.LongDescription": "<code>number1</code> солға қарай көрсетілген <code>number2</code> биттер санына биттік жылжытуды орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Биттер жиынын оңға жылжытады.",
        "Documentation.LongDescription": "<code>number1</code> оң жаққа қарай көрсетілген <code>number2</code> биттер санына биттік жылжытуды орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Екі енгізбе арасында биттік \"XOR\" (Exclusive-OR) әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>number1</code> және <code>number2</code> арасында биттік \"XOR\" (Exclusive-OR) әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Бірегей тіркесімдер санын қайтарады.",
        "Documentation.LongDescription": "<code>setSize</code> элементтер тізімінен <code>combinationSize</code> көрсетілген тіркесім өлшемімен бірегей тіркесімдер санын қайтарады.\r\n<ul>\r\n    <li><code>setSize</code>: тізімдегі элементтер саны.</li>\r\n    <li><code>combinationSize</code>: әр тіркесімдегі элементтер саны.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Әр тіркесім 3 элементтен тұратын топ болғанда жалпы 5 элементтен тіркесімдер санын анықтау.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Екі санды бөледі және нәтиженің бүтін бөлігін қайтарады.",
        "Documentation.LongDescription": "<code>number1</code> санын басқа <code>number2</code> санына бөлу нәтижесінің бүтін бөлігін қайтарады.\r\n    Егер <code>number1</code> немесе <code>number2</code> null мәніне ие болса, <code>Number.IntegerDivide</code> null мәнін қайтарады.\r\n      <ul>\r\n        <li><code>number1</code>: бөлінгіш.</li>\r\n        <li><code>number2</code>: бөлгіш.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "6 санын 4 санына бөлу.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "8,3 санын 3 санына бөлу.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "Екі санды бүтін бөледі және қалдықты қайтарады.",
        "Documentation.LongDescription": "<code>number</code> санын <code>divisor</code> санына бүтін сандық бөлуден шығатын қалдықты қайтарады.\r\n    Егер <code>number</code> немесе <code>divisor</code> null мәніне ие болса, <code>Number.Mod</code> null мәнін қайтарады.\r\n      <ul>\r\n        <li><code>number</code>: бөлінгіш.</li>\r\n        <li><code>divisor</code>: бөлгіш.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "5 санын 3 санына бөлген кездегі қалдықты анықтау.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Орнын жылжытулардың санын қайтарады.",
        "Documentation.LongDescription": "<code>permutationSize</code> көрсетілген орнын жылжыту өлшемінің көмегімен <code>setSize</code> элементтер санынан жасауға болатын орнын жылжытулар санын қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Жалпы 5 элементтер 3 топтарымен орнын жылжытулардың санын анықтау.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Санды көрсетілген дәрежеге шығарады.",
        "Documentation.LongDescription": "<code>number</code> санын <code>power</code> дәрежесіне шығару нәтижесін қайтарады.\r\n    Егер <code>number</code> немесе <code>power</code> null мәніне ие болса, <code>Number.Power</code> null мәнін қайтарады.\r\n      <ul>\r\n        <li><code>number</code>: негізі.</li>\r\n        <li><code>power</code>: дәреже көрсеткіші.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "3 дәрежесіне шығарылған 5 мәнін (кубқа шығарылған 5) анықтау.",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Екі сан арасындағы кездейсоқ санды қайтарады.",
        "Documentation.LongDescription": "<code>bottom</code> және <code>top</code> арасындағы кездейсоқ санды қайтарады.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "1 және 5 арасындағы кездейсоқ санды алу.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Жазбадағы көрсетілген өрістің мәнін қайтарады.",
        "Documentation.LongDescription": "<code>record</code> ішіндегі көрсетілген <code>field</code> мәнін қайтарады. Егер өріс табылмаса, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы \"CustomerID\" өрісінің мәнін анықтау.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Жазбадағы көрсетілген өрістің мәнін немесе өріс табылмаса, әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>record</code> жазбасындағы көрсетілген <code>field</code> өрісінің мәнін қайтарады. Егер өріс табылмаса, міндетті емес <code>defaultValue</code> қайтарылады.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы \"Phone\" өрісінің мәнін анықтау немесе ол жоқ болса, null мәнін қайтару.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Жазбадағы \"Phone\" өрісінің мәнін табу немесе ол жоқ болса, әдепкі мәнді қайтару.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Өріс мәндерінің тізімі және өрістер жиыны берілсе, жазбаны қайтарады.",
        "Documentation.LongDescription": "Өріс мәндерінің <code>list</code> және өрістер жиыны берілсе, жазбаны қайтарады.  <code>fields</code> мәтіндік мәндердің тізімі немесе жазба түрі арқылы көрсетуге болады.  Өрістер бірегей болмаса, қате туралы хабар қайтарылады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Өріс мәндерінің тізімінен және өріс атауларының тізімінен жазбаны жасау.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Өріс мәндерінің тізімінен және жазба түрінен жазбаны жасау.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Жазбада көрсетілген өрістердің болуын көрсетеді.",
        "Documentation.LongDescription": "<code>record</code> жазбасында <code>fields</code> ішінде көрсетілген өрістер бар-жоғын логикалық мәнді (шын немесе өтірік) қайтару арқылы көрсетеді.\r\n    Бірнеше өріс мәнін тізімді пайдаланып көрсетуге болады.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Жазбада \"CustomerID\" өрісінің болуын тексеру.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Жазбада \"CustomerID\" және \"Address\" өрісінің болуын тексеру.",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Көрсетілген өрістерді кіріс жазбадан жояды.",
        "Documentation.LongDescription": "<code>fields</code> тізімінде көрсетілген барлық өрістерді кіріс <code>record</code> ішінен жоятын жазбаны қайтарады. Егер көрсетілген өріс жоқ болса, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Жазбадан \"Price\" өрісін жою.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Жазбадан \"Price\" және \"Item\" өрістерін жою.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "{ old, new } түріндегі тізімнен қайта атауларды қолданады.",
        "Documentation.LongDescription": "Кіріс <code>record</code> ішіндегі <code>renames</code> тізімінде көрсетілген жаңа өріс атауларын қайта атаудан кейін жазбаны қайтарады. Бірнеше қайта атау үшін енгізілген тізімді ({ {old1, new1}, {old2, new2} } пайдалануға болады.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Жазбадан \"UnitPrice\" өрісінің атауын \"Price\" деп өзгерту.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Жазбадан \"UnitPrice\" өрісін \"Price\" деп және \"OrderNum\" өрісін \"OrderID\" деп өзгерту.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Көрсетілген өрістердің ретін жаңа ретке өзгертеді.",
        "Documentation.LongDescription": "<code>record</code> ішіндегі өрістердің ретін <code>fieldOrder</code> тізімінде көрсетілген өрістер ретіндегідей өзгерткенен кейін жазбаны қайтарады. Өріс мәндері сақталады және <code>fieldOrder</code> ішінде тізілмеген өрістер бастапқы орнында қалдырылады.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы кейбір өрістердің ретін өзгерту.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Тек көрсетілген өрістерді қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Кіріс <code>record</code> ішінен тек <code>fields</code> тізімінде көрсетілген өрістерді қамтитын жазбаны қайтарады.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы \"Item\" және \"Price\" өрістерін таңдау.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Көрсетілген түрлендірулерді қолданудан кейін жазбаны қайтарады.",
        "Documentation.LongDescription": "<code>transformOperations</code> тізімінде көрсетілген түрлендірулерді <code>record</code> қатысты қолданудан кейін жазбаны қайтарады.\r\n    Қазіргі уақытта бір немесе бірнеше өрісті түрлендіруге болады.\r\n      <div>Егер бір өріс түрлендіріліп жатса, <code>transformOperations</code> екі элементтен тұратын тізім болады деп күтіледі. <code>transformOperations</code> ішіндегі бірінші элемент және <code>transformOperations</code> ішіндегі екінші элемент түрлендіру үшін пайдаланылатын функцияны көрсетеді. Мысалы, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Егер бірнеше өріс түрлендіріліп жатса, <code>transformOperations</code> тізімдердің тізімі болады деп күтіледі, мұндағы әрбір ішкі тізім өріс атау мен түрлендіру әрекетінің жұбы болады. Мысалы, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Баға\" өрісін санға түрлендіріңіз.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "\"OrderID\" және \"Баға\" өрістерін сандарға түрлендіріңіз.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Таңбаның бір түрінен екіншісіне өтуге сәйкес мәтінді мәтіндер тізіміне бөлетін функцияны қайтарады. {0} және {1} параметрлері таңбалар тізімі немесе таңбаны алатын және шын/жалған мәнін қайтаратын функция болуы мүмкін.",
        "Documentation.LongDescription": "Таңбаның бір түрінен екіншісіне өтуге сәйкес мәтінді мәтіндер тізіміне бөлетін функцияны қайтарады. <code>before</code> және <code>after</code> параметрлері таңбалар тізімі немесе таңбаны алатын және шын/жалған мәнін қайтаратын функция болуы мүмкін.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Жоғарғы немесе төменгі регистрлі әріптен кейін цифр келгенде, кірісті бөледі.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Берілген SQL сұрауын M кодына түрлендіреді. Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "<code>environment</code> анықтаған қолжетімді идентикаторларымен бірге, берілген <code>sql</code> сұрауын M кодына түрлендіреді. Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "ТКестеден көрсетілген деректер бағанын тізім ретінде қайтарады.",
        "Documentation.LongDescription": "<code>column</code> арқылы көрсетілген деректер бағанын <code>table</code> кестесінен тізім ретінде қайтарады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі [Name] бағанынан мәндерді қайтарады.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Көрсетілген түрлерге сәйкес келшетін атаулардың тізімін қайтарады.",
        "Documentation.LongDescription": "<code>listOfTypes</code> ішінде көрсетілген түрлерге сәйкес келетін <code>table</code> кестесіндегі бағандардың аты берілген тізімді қайтарады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеден Number.Type түріндегі бағандар атауларын қайтару.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Көрсетілген жазбаның кестеде жол ретінде пайда болатынын көрсетеді.",
        "Documentation.LongDescription": "<code>row</code> көрсетілген жазбасы <code>table</code> ішінде жол ретінде пайда болатынын көрсетеді.\r\n    Кестенің жолдарын салыстыруды басқару үшін <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Кестеде жолдың болуын анықтау.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Кестеде жолдың болуын анықтау.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Тек [Name] бағанын салыстыру арқылы кестеде жолдың болуын анықтау.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Көрсетілген жазбалардың барлығы кестеде жолдар ретінде пайда болатынын көрсетеді.",
        "Documentation.LongDescription": "<code>rows</code> жазбалар тізіміндегі барлық көрсетілген жазбалар <code>table</code> ішінде жолдар ретінде пайда болатынын көрсетеді.\r\n    Кестенің жолдарын салыстыруды басқару үшін <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Тек [CustomerID] бағанын салыстыру арқылы кестеде барлық жолдардың болуын анықтау.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Кестеде барлық жолдардың болуын анықтау.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Көрсетілген жазбалардың кез келгені кестеде жолдар ретінде пайда болатынын көрсетеді.",
        "Documentation.LongDescription": "<code>rows</code> жазбалар тізіміндегі көрсетілген жазбалардың кез келгені <code>table</code> ішінде жолдар ретінде пайда болатынын көрсетеді.\r\n    Кестенің жолдарын салыстыруды басқару үшін <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесі <code>[a = 1, b = 2]</code> немесе <code>[a = 3, b = 5]</code> жолын қамтитынын анықтау.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесі <code>[a = 1, b = 3]</code> немесе <code>[a = 3, b = 5]</code> жолын қамтитынын анықтау.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Тек [a] бағанын салыстырып, <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> кестесі <code>[a = 1, b = 3]</code> немесе <code>[a = 3, b = 5]</code> жолын қамтитынын анықтау.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Кестенің көрсетілген баған(дар)ды қамтитынын көрсетеді.",
        "Documentation.LongDescription": "<code>table</code> көрсетілген баған(дар)ды (<code>columns</code>) қамтитынын көрсетеді. Кесте баған(дар)ды қамтыса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [Name] бағанының болуын анықтау.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Кестеде [Name] және [PhoneNumber] бағандарының болуын анықтау.",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Кестедегі барлық жолдардың көрсетілген шартқа сай екендігін көрсетеді.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі барлық жолдардың көрсетілген <code>condition</code> сай екендігін көрсетеді. Барлық жолдар сай болса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [a] бағанындағы барлық жол мәндерінің жұп екенін анықтау.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесінде барлық жол мәндерінің [a = 1, b = 2] болатынын анықтау.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Кестедегі жолдардың кез келгенінің көрсетілген шартқа сай екендігін көрсетеді.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі жолдардың кез келгенінің көрсетілген <code>condition</code> сай екендігін көрсетеді. Жолдардың кез келгені сай болса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8]})</code> кестесінде [a] бағанындағы жол мәндерінің кез келгенінің жұп екендігін анықтау.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({[a = 1, b = 2], [a = 3, b = 4]})</code> кестесіндегі жол мәндерінің кез келгенінің [a = 1, b = 2] болатынын анықтау.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Көрсетілген шарттарды пайдаланып ең үлкен жолды немесе әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> берілген болса, <code>table</code> ішіндегі ең үлкен жолды қайтарады. Егер кесте бос болса, міндетті емес <code>default</code> мәні қайтарылады. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8]})</code> кестесінде [a] бағанында ең үлкен мән бар жолды анықтау.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "<code>({})</code> кестесінде [a] бағанында ең үлкен мән бар жолды анықтау. Бос болса, -1 мәнін қайтару.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Көрсетілген шарттарды пайдаланып ең кіші жолды немесе әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>comparisonCriteria</code> берілген болса, <code>table</code> ішіндегі ең кіші жолды қайтарады. Егер кесте бос болса, міндетті емес <code>default</code> мәні қайтарылады.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Кестеде [a] бағанында ең кіші мән бар жолды анықтау.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Кестеде [a] бағанында ең кіші мән бар жолды анықтау. Бос болса, -1 мәнін қайтару.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Кестедегі жолдың орнын немесе орындарын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>table</code> ішіндегі <code>row</code> бірінші данасының жол орнын қайтарады. Егер дана табылмаса, -1 мәнін қайтарады.\r\n    <ul>\r\n       <li><code>table</code>: кіріс кесте.</li>\r\n       <li><code>row</code>: кестедегі орнын анықтау керек жол.</li>\r\n       <li><code>occurrence</code>: <i>[Міндетті емес]</i> қайтарылатын жолдың қайталауларын көрсетеді.</li>\r\n       <li><code>equationCriteria</code>: <i>[Міндетті емес]</i> кесте жолдарын салыстыруды басқарады.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> кестесінде [a = 2, b = 4] бірінші данасының орнын анықтау.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> кестесінде [a = 2, b = 4] екінші данасының орнын анықтау.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> кестесінде [a = 2, b = 4] барлық даналарының орнын анықтау.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Кестедегі көрсетілген жолдардың кез келгенінің орнын немесе орындарын қайтарады.",
        "Documentation.LongDescription": "<code>table</code> ішінен <code>rows</code> тізімінің бірінші данасының жол(дар) орнын(дарын) қайтарады. Егер дана табылмаса, -1 мәнін қайтарады.\r\n    <ul>\r\n    <li><code>table</code>: кіріс кесте.</li>\r\n       <li><code>rows</code>:  кестедегі орындарын анықтау керек жолдардың тізімі.</li>\r\n       <li><code>occurrence</code>: <i>[Міндетті емес]</i> қайтарылатын жолдың қайталауларын көрсетеді.</li>\r\n       <li><code>equationCriteria</code>: <i>[Міндетті емес]</i> кесте жолдарын салыстыруды басқарады.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> кестесінде [a = 2, b = 4] немесе [a = 6, b = 8] бірінші данасының орнын анықтау.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "<code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> кестесінде [a = 2, b = 4] немесе [a = 6, b = 8] барлық даналарының орнын анықтау.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Көрсетілген бет өлшемін пайдаланып, көрсетілген кестені кестелер тізіміне бөледі.",
        "Documentation.LongDescription": "<code>table</code> кестелер тізіміне бөледі, мұнда тізімнің бірінші элементі — \r\n    бастапқы кестенің алғашқы <code>pageSize</code> жолын қамтитын кесте, тізімнің келесі элементі — бастапқы кестенің келесі <code>pageSize</code> жолын қамтитын кесте және т.б.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Бес жазбадан тұратын кестені әрқайсысында екі жазба болатын кестелерге бөлу.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Көрсетілген алғашқы санақ жолдарын және қалған жолдарды қамтитын тізімді қайтарады.",
        "Documentation.LongDescription": "Екі кестені қамтитын тізімді қайтарады: <code>table</code> алғашқы N жолы бар кесте (<code>count</code> көрсеткендей) және <code>table</code> қалған жолдарын қамтитын кесте.\r\n\r\nНәтижесіндегі тізімнің кестелері дәл бір рет және ретпен санамаланса, функция <code>table</code> тек бір рет санамалайды.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірінші екі жолын және кестенің қалған жолдарын қайтарады.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Көрсетілген түрлендіру функциясын пайдаланып кестенің жолдарын түрлендіру.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі әрбір жолға <code>transform</code> операциясын қолдану арқылы <code>тізім</code> жасайды.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кесте жолдарын сандар тізіміне түрлендіру.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Сандық кесте жолдарын мәтіндік жазбаларға түрлендіру.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "<code>delimiter</code> көрсетілгеннен кейін <code>text</code> бөлігін қайтарады.\r\n    Қосымша саны бар <code>index</code> <code>delimiter</code> қай қайталануы қарастырылатынын көрсетеді.\r\n    <code>index</code> қосымша тізімі <code>delimiter</code> қай қайталануы қарастырылатынын, сонымен қатар индекстеудің кіріс деректерінің басынан не соңынан жасалуын көрсетеді.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(Бірінші) сызықшадан кейін \"111-222-333\" бөлігін алу.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Екінші сызықшадан кейін \"111-222-333\" бөлігін алу.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Соңындағы екінші сызықшадан кейін \"111-222-333\" бөлігін алу.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Көрсетілген орындағы таңбаны қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәніндегі <code>index</code> орнындағы таңбаны қайтарады. Мәтіндегі бірінші таңба 0 орнында болады.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" жолында 4 орнындағы таңбаны анықтау.",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "<code>delimiter</code> көрсетілмес бұрын <code>text</code> бөлігін қайтарады.\r\n    Қосымша саны бар <code>index</code> <code>delimiter</code> қай қайталануы қарастырылатынын көрсетеді.\r\n    <code>index</code> қосымша тізімі <code>delimiter</code> қай қайталануы қарастырылатынын, сонымен қатар индекстеудің кіріс деректерінің басынан не соңынан жасалуын көрсетеді.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "(Бірінші) сызықшаның алдында \"111-222-333\" бөлігін алу.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Екінші сызықшаның алдында \"111-222-333\" бөлігін алу.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Соңындағы екінші сызықшаның алдында \"111-222-333\" бөлігін алу.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Ішкі жолды қамтитын мәтінді қайтарады.",
        "Documentation.LongDescription": "<code>text</code> ішінде <code>substring</code> мәні бар-жоғын анықтайды. Мән табылса, true мәнін қайтарады. Бұл функция қойылмалы таңбаға немесе тұрақты өрнектерге қолдау көрсетпейді.\r\n      <br>\r\n      <br>\r\n      <code>comparer</code> міндетті емес аргументін регистрді ескермейтін немесе мәдениет пен жергілікті тіл параметрлерін ескеретін салыстыру үшін пайдалануға болады.\r\n      Формула тілінде келесі ендірілген салыстыру функциялары қолжетімді:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li> <code>Comparer.FromCulture</code>: мәдениет пен жергілікті тіл параметрлерін салыстыру үшін пайдаланылады</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем Әлем\" мәтінінің \"Сәлем\" сөзін қамтитынын анықтау.",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "\"Сәлем Әлем\" мәтінінің \"сәлем\" сөзін қамтитынын анықтау.",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Регистрді ескермейтін салыстыру функциясы арқылы \"Hello World\" мәтінінде \"hello\" сөзі бар екенін біліңіз.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Мәтіннің соңғы таңбаларын қайтарады.",
        "Documentation.LongDescription": "<code>text</code> <code>text</code> мәнінің соңғы <code>count</code> таңбасы болып табылатын <code>text</code> мәнін қайтарады.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Hello, World\" мәтінінің соңғы 5 таңбасын алу.",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Мәтіннің көрсетілген мәнде аяқталатынын көрсетеді.",
        "Documentation.LongDescription": "Берілген <code>text</code> мәтінінің <code>substring</code> көрсетілген мәнімен аяқталатынын білдіреді. Көрсеткіш регистрге тәуелді.\r\n\r\n      <div>\r\n        <code>comparer</code> — салыстыруды басқару үшін қолданылатын <code>Comparer</code>. Пернетақта регистрінің есебімен немесе аймақтық және тілдік параметрлер бойынша салыстыру үшін салыстыру функцияларын пайдалануға болады.\r\n      </div>\r\n      <div>\r\n        Формула тілінде келесі ендірілген салыстыру функциялары бар:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li> <code>Comparer.FromCulture</code>: аймақтық параметрлер бойынша салыстыру үшін пайдаланылады</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем, Әлем\" мәтінінің \"әлем\" сөзімен аяқталатынын тексеру.",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "\"Сәлем, Әлем\" мәтінінің \"Әлем\" сөзімен аяқталатынын тексеру.",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Пішімделген мәтінді пішім жолынан және аргументтерден қайтарады.",
        "Documentation.LongDescription": "Тізімнен немесе жазбадан <code>formatString</code> пішім жолына <code>arguments</code> қолдану арқылы жасалған пішімделген мәтінді қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Сандар тізімін пішімдеңіз.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "АҚШ ағылшын мәдениетіне сәйкес жазбадағы түрлі деректер түрлерін пішімдеңіз.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Қосалқы жолды арнайы ұзындыққа қайтарады.",
        "Documentation.LongDescription": "<code>count</code> таңбаны немесе <code>text</code> соңына дейін қайтарады; <code>start</code> ығысуында.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "6 индексінен бастап 5 таңбаға дейінгі \"Сәлем, әлем\" мәтінінен қосалқы жолды табыңыз.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "6 индексінен бастап соңына дейінгі \"Сәлем, әлем\" мәтінінен қосалқы жолды табыңыз.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Көрсетілген мәтіннің соңын толықтыру арқылы көрсетілген ұзындығы бар мәтінді қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінің соңында бос орындарды кірістіру арқылы <code>count</code> ұзындығына дейін толықтыру арқылы <code>text</code> мәнін қайтарады.\r\n    Толықтыру үшін пайдаланылатын таңбаны көрсету арқылы <code>character</code> міндетті емес таңбасын көрсетуге болады. Әдепкі толықтыру таңбасы — бос орын.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Мәтіндік мәннің соңын ұзындығы 10 таңба болатындай толықтыру.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Мәтіндік мәннің соңын ұзындығы 10 таңба болатындай \"|\" таңбасымен толықтыру.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Көрсетілген мәтіннің басын толықтыру арқылы көрсетілген ұзындығы бар мәтінді қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінің басында бос орындарды кірістіру арқылы <code>count</code> ұзындығына дейін толықтыру арқылы <code>text</code> мәнін қайтарады.\r\n    Толықтыру үшін пайдаланылатын таңбаны көрсету арқылы <code>character</code> міндетті емес таңбасын көрсетуге болады. Әдепкі толықтыру таңбасы — бос орын.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Мәтіндік мәннің басын ұзындығы 10 таңба болатындай толықтыру.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Мәтіндік мәннің басын ұзындығы 10 таңба болатындай \"|\" таңбасымен толықтыру.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Мәннің бірінші орнын (табылмаса, -1 мәнін) қайтарады.",
        "Documentation.LongDescription": "<code>text</code> ішінде табылған <code>substring</code> мәтіндік мәнінің көрсетілген данасының орнын қайтарады.\r\n    Қай дананың орнын қайтару керектігін көрсету үшін <code>occurrence</code> міндетті емес параметрін пайдалануға болады (әдепкіде бірінші данасы).\r\n    <code>substring</code> табылмаса, -1 қайтарылады.\r\n\r\n      <div>\r\n        <code>comparer</code> — салыстыруды басқару үшін қолданылатын <code>Comparer</code>. Салыстыру функцияларын пернетақта есебімен немесе тіл және аймақ параметрлерін есепке алатын салыстыру үшін қолдануға болады.\r\n      </div>\r\n      <div>\r\n        Формула тілінде келесі ендірілген салыстыру функциялары бар:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li> <code>Comparer.FromCulture</code>: аймақтық параметрлер бойынша салыстыру үшін пайдаланылады</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем, Әлем! Сәлем, Әлем!\" мәтініндегі \"Әлем\" бірінші данасының орнын алу.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "\"Сәлем, Әлем! Сәлем, Әлем!\" мәтініндегі \"Әлем\" соңғы данасының орнын алу.",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Кез келген тізілген таңбаның мәтіндік мәніндегі бірінші орынды (табылмаса, -1 мәнін) қайтарады.",
        "Documentation.LongDescription": "<code>text</code> ішінде орналасқан <code>characters</code> тізімінде кез келген таңбаның бірінші орнын қайтарады.\n    Қай қайталану орнын қайтару керектігін көрсету үшін <code>occurrence</code> деген міндетті емес параметрді пайдалануға болады.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "«Hello, World!» мәтінінде «W» немесе «H» әрпінің бірінші орнын табады.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "«Hello, World!» мәтінінде «W» немесе «H» әрпінің барлық орындарын табады.",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Ауытқуда анықталған ішкі жолды қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәтінінен <code>offset</code> ауытқуында анықталған ішкі жолды қайтарады.\r\n    Қайтарылатын таңбалар санын көрсету үшін <code>count</code> міндетті емес параметрін қосуға болады. Жеткілікті таңбалар болмағанда, қатені береді.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем Әлем\" мәтінінен 6 индексінде басталатын ішкі жолды анықтау.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "\"Сәлем Әлем Сәлем\" мәтінінен 6 индексінде басталатын 5 таңбаға созылатын ішкі жолды анықтау.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Кіріс мәтіндік мәннен осы таңбаның немесе таңбалар тізімінің барлық даналарын жояды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінің <code>removeChars</code> орнынан барлық таңбалар жойылған көшірмесін қайтарады.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Мәтіндік мәннен , және ; таңбаларын жою.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Осы ауытқуда басталатын таңбалар санын жояды",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінің <code>offset</code> орнынан барлық таңбалар жойылған көшірмесін қайтарады.\r\n    Жоятын таңбалар санын көрсету үшін <code>count</code> міндетті емес параметрін пайдалануға болады. <code>count</code> әдепкі мәні — 1. Орын мәндері 0 мәнінен басталады.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "\"ABEFC\" мәтіндік мәнінен 2 орнында 1 таңбаны жою.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "\"ABEFC\" мәтіндік мәнінен 2 орнынан бастап екі таңбаны жою.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Көрсетілген рет қайталанатын кіріс мәтіннен тұратын мәтіндік мәнді қайтарады.",
        "Documentation.LongDescription": "<code>count</code> рет қайталанатын <code>text</code> кіріс мәтінінен тұратын мәтіндік мәнді қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"a\" мәтінін бес рет қайталау.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "\"сәлемәлем\" мәтінін үш рет қайталау.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Кіріс мәтіндік мәннен берілген таңбаның немесе таңбалар тізімінің барлық даналарын таңдайды.",
        "Documentation.LongDescription": "<code>selectChars</code> ішінде жойылмаған барлық таңбалармен <code>text</code> мәтіндік мәнінің көшірмесін қайтарады.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Мәтіндік мәннен \"а\" – \"я\" аумағындағы барлық таңбаларды таңдау.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Көрсетілген бөлгіштің негізінде мәтінді мәтіндік мәндер тізіміне бөледі.",
        "Documentation.LongDescription": "<code>separator</code> көрсетілген бөлгішінің негізінде <code>text</code> мәтіндік мәнін бөлу нәтижесінде алынған мәтіндік мәндердің тізімін қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"|\" таңбасымен бөлінген \"Name|Address|PhoneNumber\" мәтіндік мәнінен тізімді жасау.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Бөлгіштегі таңбалардың кез келгенінде бөлінген мәтіндік мәндер тізімін қайтарады.",
        "Documentation.LongDescription": "<code>separators</code> көрсетілген бөлгішіндегі кез келген таңбаға негзіделген <code>text</code> мәтіндік мәнін бөлу нәтижесінде алынған мәтіндік мәндер тізімін қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\" мәтіндік мәнінен тізімді жасау.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Мәтіннің басын қайтарады.",
        "Documentation.LongDescription": "<code>text</code> бірінші <code>count</code> таңбасын мәтіндік мән ретінде қайтарады.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем, Әлем\" мәтінінің бірінші 5 таңбасын алу.",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Мәтіннің көрсетілген мәннен басталатынын көрсетеді.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәні <code>substring</code> мәтіндік мәнімен басталса, true мәнін қайтарады.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> Ізделетін <code>text</code> мәні</li>\r\n        <li><code>substring</code>: <i></i> <code>substring</code></li>\r\n        <li><code>comparer</code> ішінде ізделетін ішкі жол болып табылатын <code>text</code> мәні: <i>[Міндетті емес]</i> Салыстыруды басқару үшін қолданылатын <code>Comparer</code>. Мысалы, <code>Comparer.OrdinalIgnoreCase</code> пернетақта регистрінің есебімен іздеу үшін қолданылуы мүмкін</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> — салыстыруды басқару үшін қолданылатын <code>Comparer</code>. Салыстыру функцияларын пернетақта есебімен немесе тіл және аймақ параметрлерін есепке алатын салыстыру үшін қолдануға болады.\r\n      </div>\r\n      <div>\r\n        Формула тілінде келесі ендірілген салыстыру функциялары бар:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: пернетақта регистрінің есебімен реттік нөмірі бойынша дәл салыстыру үшін қолданылады</li>\r\n        <li> <code>Comparer.FromCulture</code>: аймақтық параметрлер бойынша салыстыру үшін пайдаланылады</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем, Әлем\" мәтінінің \"сәлем\" мәтінімен басталатынын тексеру.",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "\"Сәлем, Әлем\" мәтінінің \"Сәлем\" мәтінімен басталатынын тексеру.",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Белгілі бір параметрі бар және түр шектеулерін қайтаратын функцияларды білдіретін түрді қайтарады.",
        "Documentation.LongDescription": "<code>signature</code> бөлімінен <code>function type</code>, <code>ReturnType</code> және <code>Parameters</code> жазбасын және функцияны іске қосу үшін қажет <code>min</code> ең кіші аргументтер санын жасайды.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "X деп аталатын сандық параметрді алатын және санды қайтаратын функция үшін түрді жасайды.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Өрістерде белгілі бір түр шектеулері бар жазбаларды білдіретін түрді қайтарады.",
        "Documentation.LongDescription": "Өрістерде белгілі бір түр шектеулері бар жазбаларды білдіретін түрді қайтарады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Кесте түрін динамикалық түрде жасау.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Бірінші түр мәнінің екінші түрмен үнемі үйлесімді екенін анықтайды.",
        "Documentation.LongDescription": "<code>type1</code> мәнінің әрқашан <code>type2</code> мәнімен сәйкес екенін анықтайды.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Саны түрінің мәнін әрдайым кез келген түр ретінде өңдеу керектігін анықтайды.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Кез келген түр мәнін әрдайым түр саны ретінде өңдеу керектігін анықтайды.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Түр аспектілерін ауыстырады.",
        "Documentation.LongDescription": "<code>type</code> аспектілерін <code>facets</code> жазбасындағы аспектілермен ауыстырады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Барлық кілттері көрсетілген кілттер тізімімен ауыстырылған жаңа кесте түрін қайтарады.",
        "Documentation.LongDescription": "Барлық кілттері көрсетілген кілттер тізімімен ауыстырылған жаңа кесте түрін қайтарады.<br>\r\n    <br>\r\n    Әрбір кілт келесі пішіндегі жазба арқылы анықталады:\r\n    <ul>\r\n      <li>\r\n        <code>Бағандар</code>: кілтті анықтайтын баған атауларының тізімі\r\n      </li>\r\n      <li>\r\n        <code>Негізгі</code>: егер кілт кестенің негізгі кілті болса, <code>рас</code>; әйтпесе, <code>жалған</code>\r\n      </li>\r\n    </ul>\r\n    Кілттердің көрсетілген тізімі біреуден артық негізгі кілт анықталмағанын және кесте түрінде барлық негізгі баған атауларының болуын қамтамасыз ету үшін тексеріледі.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Кесте түрі бойынша кілт ақпаратын ауыстырыңыз.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Кесте түрі бойынша бұрын анықталған негізгі ақпаратты өшіріңіз.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Кестедегі бағанның түрін қайтарады.",
        "Documentation.LongDescription": "<code>tableType</code> кесте түріндегі <code>column</code> бағанының түрін қайтарады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Кіріс негізгі URI мекенжайы мен салыстырмалы URI мекенжайының тіркесімі болып табылатын абсолютті URI мекенжайын қайтарады.",
        "Documentation.LongDescription": "Кіріс <code>baseUri</code> және <code>relativeUri</code> тіркесімі болып табылатын абсолютті URI мекенжайын қайтарады.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Екі мәннің қосындысын қайтарады.",
        "Documentation.LongDescription": "<code>value1</code> және <code>value2</code> қосындысын қайтарады. <code>precision</code> міндетті емес параметрін көрсетуге болады, әдепкі мәні бойынша <code>Precision.Double</code> пайдаланылады.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Мән нақты бір түрмен үйлесімді болса, оны қайтарады.",
        "Documentation.LongDescription": "Мән нақты бір түрмен үйлесімді болса, оны қайтарады. Ол M ішіндегі \"as\" операторына сәйкес келеді, бірақ ол сан түрі сияқты идентификатор түріндегі анықтамалықты қабылдай алады.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Санды санға түрлендіру.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Мәтін мәнін санға түрлендіру әрекеті.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Бірінші мәннің екіншіден азырақ, оған тең немесе одан үлкенірек болуына байланысты -1, 0 немесе 1 мәнін қайтарады.",
        "Documentation.LongDescription": "Бірінші мәннің екіншіден азырақ, оған тең немесе одан үлкенірек болуына байланысты -1, 0 немесе 1 мәнін қайтарады.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Бірінші мәнді екіншісіне бөлудің нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>value1</code> мәнін <code>value2</code> мәніне бөлудің нәтижесін қайтарады. <code>precision</code> міндетті емес параметрін көрсетуге болады, әдепкі мәні бойынша <code>Precision.Double</code> пайдаланылады.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Тең екі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>value1</code> мәні <code>value2</code> мәніне тең болса шын мәнін, олай болмаса өтіркі мәнін қайтарады.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Мәннің нақты бір түрмен үйлесімді екенін анықтайды.",
        "Documentation.LongDescription": "Мәннің берілген түрмен үйлесімді екенін анықтайды. Ол M ішіндегі \"is\" операторына сәйкес келеді, бірақ ол сан түрі сияқты идентификатор түріндегі анықтамалықты қабылдай алады.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Санның түр санымен үйлесімді екенін анықтаудың екі түрін салыстырады.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Екі мәннің көбейтіндісін қайтарады.",
        "Documentation.LongDescription": "<code>value1</code> мәнін <code>value2</code> мәніне көбейтудің нәтижесін қайтарады. <code>precision</code> міндетті емес параметрін көрсетуге болады, әдепкі мәні бойынша <code>Precision.Double</code> пайдаланылады.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Сұрауды мақсаты бойынша бағалайды.",
        "Documentation.LongDescription": "<p><code>parameters</code> және <code>options</code> ішінде көрсетілген параметрлерді пайдалана отырып, <code>target</code> бойынша <code>query</code> есептейді.</p>\r\n<p>Сұраудың шығыс деректері <code>target</code> арқылы анықталады.</p>\r\n<p><code>target</code> <code>query</code> сипатталған операция үшін контекст береді.</p>\r\n<p><code>query</code> <code>target</code> ішінде орындалатын сұрауды сипаттайды. <code>query</code> әдетте <code>target</code> сияқты көрсетіледі (мысалы, T-SQL нұсқауы).</p>\r\n<p>Міндетті емес <code>parameters</code> мәні <code>query</code> тарапынан күтілетін параметр мәндерін қамтамасыз етуге арналған сәйкес тізімді немесе жазбаны қамтуы мүмкін.</p>\r\n<p>Міндетті емес <code>options</code> жазбасы <code>target</code> бойынша <code>query</code> орындайтын әрекетке әсер ететін параметрлерді қамтуы мүмкін. Бұл параметрлер <code>target</code> қатысты.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Тең екі мәнді қайтарады.",
        "Documentation.LongDescription": "\"<code>value1</code>\", \"<code>value2</code>\" аргументттердің біреуінің мәні null болса, null мәнін қайтарады, олай болмаса, Value.Equals тең.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Кірістің метадеректерін ауыстырады.",
        "Documentation.LongDescription": "Кірістің метадеректерін ауыстырады.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Мәннің түрін ауыстырады.",
        "Documentation.LongDescription": "<code>value</code> түрін көрсетілген <code>type</code> түріне ауыстырады.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Жазбаның әдепкі түрін нақтырақ түрмен алмастырыңыз.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Екі мәннің айырмашылығын қайтарады.",
        "Documentation.LongDescription": "<code>value1</code> және <code>value2</code> айырмашылығын қайтарады. <code>precision</code> міндетті емес параметрін көрсетуге болады, әдепкі мәні бойынша <code>Precision.Double</code> пайдаланылады.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Орындалған кезде әрекет жасайды және HTTP сұрауын орындау нәтижелерін екілік мән ретінде қайтарады.",
        "Documentation.LongDescription": "Орындалған кезде екілік мән ретінде HTTP пайдалану арқылы <code>url</code> үшін <code>method</code> сұрауын орындау нәтижелерін қайтаратын әрекетті жасайды.\r\n    Міндетті емес жазба параметрі, <code>options</code>, қосымша параметрлерді көрсету үшін берілуі мүмкін. Жазбада келесі өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>Query</code> : Бас тарту туралы алаңдамай, бағдарламалау жолымен сұрау параметрлерін URL мекенжайына қосыңыз.</li>\r\n<li><code>ApiKeyName</code> : Егер мақсатты сайтта API кілті ұғымы болса, бұл параметрді URL мекенжайында пайдаланылуы тиіс кілт параметрінің атауын (мәнін емес) көрсету үшін пайдалануға болады. Нақты кілт мәні тіркелгі деректерінде беріледі.</li>\r\n<li><code>Headers</code> : Бұл мән жазба ретінде көрсетілсе, HTTP сұрауы үшін қосымша тақырыптарды береді.</li>\r\n<li><code>Timeout</code> : Бұл мән ұзақтық ретінде көрсетілсе, HTTP сұрауы үшін күту уақыты өзгереді. Әдепкі мәні: 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Бұл мән тізім ретінде көрсетілсе, осы HTTP тақырыбының кілттері деректерді кэштеу үшін есептеудің бөлігі болмайды.</li>\r\n<li><code>IsRetry</code> : Бұл логикалық мән &quot;шын&quot; ретінде көрсетілсе, деректерді алу кезінде кэштегі бар жауап ескерілмейді.</li>\r\n<li><code>ManualStatusHandling</code> : Бұл мән тізім ретінде көрсетілсе, жауабы осы күй кодтарының біреуіне ие HTTP сұраулары үшін ендірілген өңдеу болдырылмайды.</li>\r\n<li><code>RelativePath</code> : Бұл мән мәтін ретінде көрсетілсе, сұрау жасалудан бұрын ол негізгі URL мекенжайына қолданылады.</li>\r\n<li><code>Content</code> : Бұл мәнді көрсету оның контентінің HTTP сұрауының мәтіні болуына әкеледі.</li>\r\n</ul>\r\n\r\n    <br>\r\n    Көптеген контекстерде бұл функция өшірілгеніне мән беріңіз. Оның орнына Web.Contents немесе Web.Headers мүмкіндіктерін пайдалануды қарастырыңыз.\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "GET сұрауын Bing-те орындау.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Тіркелумен байланысты Azure Enterprise REST API соңғы нүктесінің URL мекенжайын енгізіңіз",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Azure Enterprise API үшін берілген url мекенжайын шақырудың екілік нәтижелерін қайтарады.",
        "Documentation.Examples": [
          {
            "Description": "Арнайы есептің нәтижелерін қайтару үшін AzureEnterprise.Contents функциясын пайдаланыңыз.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            деңгейі көтерілген",
            "Result": "Кесте"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Көрсетілген BLOB контентін Azure сақтау орнынан қайтарады.",
        "Documentation.LongDescription": "Azure сақтау қоймасынан <code>url</code> URL мекенжайында BLOB контентін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>BlockSize</code> : Деректер тұтынушысын күтуге дейінгі оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>RequestSize</code> : Сервер үшін бір HTTP сұрауында оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests параметрі жадты пайдалану есебінен, параллель орындалатын сұраулар санын көрсету арқылы деректерді жылдамырақ жүктеп алуды қолдайды. Қажетті жад: (ConcurrentRequest * RequestSize). Әдепкі мәні: 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Azure Data Lake Storage файлдық жүйесінен көрсетілген файл контентін қайтарады.",
        "Documentation.LongDescription": "Azure Data Lake Storage файл жүйесінен <code>url</code> URL мекенжайында файл контентін қайтарады. Келесі параметрлерді басқару үшін <code>options</code> көрсетілуі мүмкін:\r\n    <ul>\r\n<li><code>BlockSize</code> : Деректер тұтынушысын күтуге дейінгі оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>RequestSize</code> : Сервер үшін бір HTTP сұрауында оқылатын байттар саны. Әдепкі мәні: 4 Мбайт.</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests параметрі жадты пайдалану есебінен, параллель орындалатын сұраулар санын көрсету арқылы деректерді жылдамырақ жүктеп алуды қолдайды. Қажетті жад: (ConcurrentRequest * RequestSize). Әдепкі мәні: 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Екіліктің жуықталған ұзындығын қайтарады.",
        "Documentation.LongDescription": "<code>binary</code> жуықталған ұзындығын немесе деректер көзі жуықталған ұзындықты қолдамаса, қатені қайтарады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Екілік мәннің жуықталған ұзындығын алу.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Екілік мәнді жадқа буферге сақтайды.",
        "Documentation.LongDescription": "Екілік мәнді жадқа буферге сақтайды.  Бұл шақырудың нәтижесі тұрақты екілік мән болады, яғни, оның анықталған ұзындығы және байттар реті болады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Екілік мәннің тұрақты нұсқасын жасау.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Екілік файлдар тізімін бір екілік файлға біріктіреді.",
        "Documentation.LongDescription": "Екілік файлдар тізімін бір екілік файлға біріктіреді.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Осы мәннен екілік файлды жасайды",
        "Documentation.LongDescription": "Берілген <code>value</code> ішінен <code>binary</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Binary.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> <code>binary</code> болса, <code>value</code> қайтарылады. Келесі түрлердің мәндерін <code>binary</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністегі <code>binary</code> мәні. Қосымша мәліметтерді <code>Binary.FromText</code> бөлімінен қараңыз.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате шығады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1011\"</code> мәнінің <code>binary</code> мәнін алу.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Сандар тізімін екілік мәнге түрлендіреді.",
        "Documentation.LongDescription": "Сандар тізімін екілік мәнге түрлендіреді.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Деректерді мәтіндік түрден екілік түрге кодсыздандырады.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнін екілік мәнге (<code>number</code> тізімі) түрлендіру нәтижесін қайтарады. <code>encoding</code> мәтіндік мәнде пайдаланылатын кодтауды көрсету үшін көрсетуге болады.\r\n      Келесі <code>BinaryEncoding</code> мәндерін <code>encoding</code> үшін пайдалануға болады.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 кодтау</li>\r\n        <li><code>BinaryEncoding.Hex</code>: он алтылық кодтау</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "\"1011\" мәнін екілік мәнге кодсыздандыру.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "\"1011\" мәнін он алтылық кодтаумен екілік мәнге түрлендіру.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Екілік ағынды оқиды және ағынның контент түрі мен пішім ақпаратын анықтауға әрекет жасайды.",
        "Documentation.LongDescription": "Алынған MIME түрін қамтитын Content.Type өрісі бар жазбаны қайтарады.\r\n    Егер алынған контент түрі мәтін/* болып, кодтық бет табылса, ағын кодын қамтитын Content.Encoding өрісін қосымша қайтарады.\r\n    Егер алынған контент түрі мәтін/csv болып, пішім бөлгіштермен болса, ықтимал бөлгіштерді талдау үшін кестені қамтитын Csv.PotentialDelimiter өрісін қосымша қайтарады.\r\n    Егер алынған контент түрі мәтін/csv болып, пішім бекітілген ен болса, ықтимал бекітілген ені бар баған позицияларын талдау үшін тізімді қамтитын Csv.PotentialPositions өрісін қосымша қайтарады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Таңбалар санын қайтарады.",
        "Documentation.LongDescription": "Таңбалар санын қайтарады.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Екілік мәнді сандар тізіміне түрлендіреді.",
        "Documentation.LongDescription": "Екілік мәнді сандар тізіміне түрлендіреді.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Екілік деректерді мәтіндік пішінге кодтайды.",
        "Documentation.LongDescription": "<code>binary</code> екілік сандар тізімін мәтіндік мәнге түрлендіру нәтижесін қайтарады. Таңдау бойынша, алынған мәтіндік мәнде пайдаланылатын кодтауды көрсету үшін <code>encoding</code> көрсетуге болады\r\n      Келесі <code>BinaryEncoding</code> мәндерін <code>encoding</code> үшін пайдалануға болады.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 кодтау</li>\r\n        <li><code>BinaryEncoding.Hex</code>: он алтылық кодтау</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Көріністе (екілік көрініс арқылы) анықталған өңдегіш берген кезде резервтік функцияны іске қоспайтын өзгертілген қате жазбасын жасайды.",
        "Documentation.LongDescription": "<code>errorRecord</code> дегеннен көріністе (екілік көрініс арқылы) анықталған өңдегіш берген кезде резервтік функцияны іске қоспайтын өзгертілген қате жазбасын жасайды.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Көріністе (екілік көрініс арқылы) анықталған өңдегіш ұстай алатын функцияны жасайды.",
        "Documentation.LongDescription": "<p><code>Binary.View</code> жасаған көріністе өңдеуге болатын <code>function</code> негізінде көру функциясын жасайды.</p>\r\n<p><code>Binary.View</code> дегеннің <code>OnInvoke</code> өңдегішін көру функциясы үшін өңдегішті анықтау үшін пайдалануға болады.</p>\r\n<p>Кірістірілген операцияларға арналған өңдегіштер сияқты, <code>OnInvoke</code> өңдегіші көрсетілмеген болса немесе ол көру функциясын өңдемесе я болмаса өңдегіш қате тудырса, <code>function</code> көрініске қоса қолданылады.</p>\r\n<p><code>Binary.View</code> және теңшелетін көрініс функцияларының толығырақ сипаттамасын жарияланған Power Query теңшелетін қосқыш құжаттамасынан қараңыз.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "7 биттік ұзындығы айнымалы кодтауды пайдаланып кодталған 64 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "7 биттік ұзындығы айнымалы кодтауды пайдаланып кодталған 64 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "7 биттік ұзындығы айнымалы кодтауды пайдаланып кодталған 64 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "7 биттік ұзындығы айнымалы кодтауды пайдаланып кодталған 64 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "8 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "8 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": ".NET 16 байттық ондық мәнін оқитын екілік пішім.",
        "Documentation.LongDescription": ".NET 16 байттық ондық мәнін оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "8 байттық IEEE қос дәлдігі бар қалқымалы нүкте мәнін оқитын екілік пішім.",
        "Documentation.LongDescription": "8 байттық IEEE қос дәлдігі бар қалқымалы нүкте мәнін оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Элементтер реттілігін оқитын және тізімді қайтаратын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Элементтер реттілігін оқитын және <code>list</code> қайтаратын екілік пішімді қайтарады.  <code>binaryFormat</code> параметрі әр элементтің екілік пішімін көрсетеді.  Оқылған элементтер санын анықтаудың үш жолы бар: <ul><li>егер <code>countOrCondition</code> көрсетілмеген болса, онда екілік пішім элементтер жоқ болғанша оқылады.</li><li>Егер <code>countOrCondition</code> сан болса, онда екілік пішім сонша элементті оқиды.</li><li>Егер <code>countOrCondition</code> функция болса, онда әр оқылатын элемент үшін сол функция шақырылады.  Функция элементтерді оқуды жалғастыру үшін шын мәнін және тоқтату үшін өтірік мәнін қайтарады.  Түпкілікті элемент тізімге қосылады.</li><li>Егер <code>countOrCondition</code> екілік пішім болса, онда тізім алдында күтілетін элементтер саны және көрсетілген пішім санды оқу үшін пайдаланылады.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Байттарды деректердің соңына дейін оқу.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Екі байтты оқу.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Байттарды байт мәні екіден үлкенірек немесе оған тең болғанша оқу.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Нөл байтты оқитын және нөлді қайтаратын екілік пішім.",
        "Documentation.LongDescription": "Нөл байтты оқитын және нөлді қайтаратын екілік пішім.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Жазбаны оқитын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Жазбаны оқитын екілік пішімді қайтарады.  <code>record</code> параметрі жазбаның пішімін көрсетеді.  Жазбадағы әр өрістің екілік пішімі әр түрлі болады.  Егер өріс екілік пішімдегі мән емес мәнді қамтыса, онда сол өріс үшін деректер оқылмайды және өріс мәні нәтижеге шығарылады.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Бір 16 биттік бүтін санды және бір 32 биттік бүтін санды қамтитын жазбаны оқу.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "16 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "16 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "32 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "32 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "64 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "64 биттік таңбалы бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "4 байттық IEEE жалғыз дәлдігі бар қалқымалы нүкте мәнін оқитын екілік пішім.",
        "Documentation.LongDescription": "4 байттық IEEE жалғыз дәлдігі бар қалқымалы нүкте мәнін оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Мәтіндік мәнді оқитын екілік пішімді қайтарады.",
        "Documentation.LongDescription": "Мәтіндік мәнді оқитын екілік пішімді қайтарады.  <code>length</code> кодсыздандыратын байттар санын немесе мәтіннің алдында келетін ұзындықтың екілік пішімін көрсетеді.  <code>encoding</code> қосымша мәні мәтіннің кодтауын көрсетеді.  Егер <code>encoding</code> көрсетілмеген болса, онда кодтау Unicode байттар реті белгілерінен анықталады.  Егер байттар ретінің белгілері болмаса, онда <code>TextEncoding.Utf8</code> пайдаланылады.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Екі байтты ASCII мәтіні ретінде кодсыздандыру.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Байттар түріндегі мәтін ұзындығы мәтін алдында байт ретінде көрсетілетін ASCII мәтінін кодсыздандыру.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "16 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "16 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "32 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "32 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "64 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.LongDescription": "64 биттік таңбасыз бүтін санды оқитын екілік пішім.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Берілген мәннен 8 биттік бүтін санды жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен 8 биттік бүтін <code>сан</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Byte.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні бөлшегі жоқ 8 биттік бүтін сан ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады. Егер оның бөлшек саны болса, ол сан көрсетілген режиммен дөңгелектеледі. Әдепкі дөңгелектеу режимі – <code>RoundingMode.ToEven</code>. Егер <code>value</code> мәні басқа түрге жататын болса, алдымен ол <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> мәнін қараңыз. Қосымша <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> 8 биттік бүтін <code>сан</code> мәнін алыңыз.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> пайдалана отырып, <code>\"4.5\"</code> мәнінің 8 биттік бүтін <code>санын</code> алыңыз.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Санды мәтін таңбасына түрлендіреді.",
        "Documentation.LongDescription": "Санның таңбалық баламасын қайтарады.<br>\r\n    <br>\r\n    Берілген <code>number</code> 21 биттік Юникод код элементі болуы тиіс.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Санды оның баламалы таңбалық мәніне түрлендіріңіз.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Таңбаны санға және қайта түрлендіріңіз.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "\"Күліп тұрған бет\" эмотиконының он алтылық код нүктесін оның баламалы UTF-16 алмастырғыш жұбына түрлендіріңіз.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Таңбаны сандық мәніне түрлендіреді.",
        "Documentation.LongDescription": "<code>character</code> санының сандық баламасын қайтарады.<br>\r\n    <br>\r\n    Нәтиже берілген таңба немесе алмастырғыш жұбымен ұсынылған 21-биттік Юникод код элементі болады.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Таңбаны оның баламалы сандық мәніне түрлендіріңіз.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "\"Күліп тұрған бет\" эмотиконына арналған UTF-16 алмастырғыш жұбын оның баламалы он алтылық код нүктесіне түрлендіріңіз.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Көрсетілген бөлгішті пайдаланып бір мәтінге біріктіретін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген бөлгішті пайдаланып мәтіндік мәндер тізімін бір мәтіндік мәнге біріктіретін функцияны қайтарады.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Нүктелі үтірді бөлгіш ретінде пайдалану арқылы мәтіндік мәндер тізімін біріктіріңіз.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Үтірлі бөлгішті және CSV мәнерлі дәйексөз арқылы екі бағанның мәтінін біріктіріңіз.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Бөлгіштер тізбегін пайдаланып мәтін тізімін біріктіретін функцияны қайтарады.",
        "Documentation.LongDescription": "Бөлгіш тізбегін пайдаланып мәтіндік мәндер тізімін бір мәтіндік мәнге біріктіретін функцияны қайтарады.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Бөлгіш тізбегін пайдаланып мәтіндік мәндер тізімін біріктіріңіз.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Көрсетілген ұзындықтарды пайдаланып бір мәтінге біріктіретін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген ұзындықтарды пайдаланып мәтіндік мәндер тізімін бір мәтіндік мәнге біріктіретін функцияны қайтарады.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Әрбір кіріс мәнінен таңбалардың көрсетілген сандарын шығару арқылы мәтін мәндерінің тізімін біріктіріңіз.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Нәтижені үлгі мәтінімен алдын ала толтырғаннан кейін, көрсетілген таңбалар санын шығару арқылы мәтін мәндерінің тізімін біріктіріңіз.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Көрсетілген шығыс орындарын пайдаланып мәтін тізімін біріктіретін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген шығыс орындарын пайдаланып, мәтін мәндерінің тізімін бір мәтіндік мәнге біріктіретін функцияны қайтарады.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Мәтін мәндерінің тізімін оларды шығыста көрсетілген орындарға орналастыру арқылы біріктіріңіз.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Көрсетілген орындар мен ұзындықтарды пайдаланып мәтін тізімін біріктіретін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген шығыс орындары мен ұзындықтарды пайдаланып, мәтін мәндерінің тізімін бір мәтіндік мәнге біріктіретін функцияны қайтарады. Нөл ұзындығы бүкіл мәтін мәнін қосу керектігін көрсетеді.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Көрсетілген шығыс орындары мен ұзындықтарды пайдаланып мәтін мәндерінің тізімін біріктіріңіз.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Көрсетілген тіл мен аймақтық параметрлері және пернетақта регистрінің есебі негізінде салыстыру функциясын қайтарады.",
        "Documentation.LongDescription": "Салыстыруды орындау үшін <code>ignoreCase</code> арқылы көрсетілген <code>culture</code> және пернетақта регистрінің есебін пайдаланатын салыстыру функциясын қайтарады.<br>\r\n      <br>\r\n      Салыстыру функциясы екі аргументті қабылдайды және бірінші мән сәйкесінше екіншісінен кіші, оған тең немесе үлкен болса -1, 0 немесе 1 мәнін қайтарады.<br>\r\n      <br>\r\n      <code>ignoreCase</code> үшін әдепкі мән — false. <code>culture</code> .NET Framework қолдау көрсететін тілдердің бірі болуы керек (мысалы, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Мәндердің тең екендігін анықтау үшін \"en-US\" тілін пайдалана отырып \"а\" және \"A\" мәндерін тексеріңіз.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Мәндердің тең екендігін анықтау үшін регистрді ескермей, \"en-US\" тілін пайдалана отырып \"а\" және \"A\" мәндерін тексеріңіз.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Бірегей мүше идентификаторын мүшелер сипаты мәнінен қайтарады.",
        "Documentation.LongDescription": "Бірегей мүше идентификаторын мүше сипаты мәнінен қайтарады. <code>attribute</code>. Басқа мәндер үшін нөл мәнін қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Сипаттың кілтін қайтарады.",
        "Documentation.LongDescription": "<code>property</code> сипатының кілтін қайтарады.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Берілген мәннен валюта мәнін қайтарады.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>currency</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Currency.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні валюта ауқымындағы <code>number</code> болса, <code>value</code> мәнінің бөлшек бөлігі 4 ондық цифрға дөңгелектеліп, қайтарылады. Егер <code>value</code> басқа кез келген түрде болса, ол алдымен <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Валюта үшін жарамды ауқым <code>-922,337,203,685,477.5808</code> - <code>922,337,203,685,477.5807</code> болып табылады. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> қараңыз. Әдепкі мән <code>RoundingMode.ToEven</code> болып табылады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>«1,23455»</code> мәнінің <code>валюта</code> мәнін алыңыз.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "<code>RoundingMode.Down</code> көмегімен <code>\"1.23455\"</code> <code>валюта</code> мәнін алыңыз.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Күн құрамдасын қайтарады.",
        "Documentation.LongDescription": "<code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің күн компонентін қайтарады.\r\n      <ul>\r\n        <li><code>dateTime</code>: күн компоненті шығарып алынатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM күнін және уақытын білдіретін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің күн құрамдасын алу.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Берілген мәннің апта күнін көрсететін санды (0 мен 6 арасындағы) қайтарады.",
        "Documentation.LongDescription": "Берілген <code>dateTime</code> апта күнін көрсететін санды (0 мен 6 арасындағы) қайтарады.\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>Date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n        <li><code>firstDayOfWeek</code>: Аптаның бірінші күнін көрсететін <code>Day</code> мәні. Рұқсат етілген мәндер: Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday немесе Day.Saturday. Егер көрсетілмесе, тіл және аймақтық параметрлерге сәйкес әдепкі мән пайдаланылады.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Жексенбіні аптаның бірінші күні ретінде қарастырып, 2011 жылдың 21 ақпаны арқылы көрсетілген апта күнін алыңыз.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Дүйсенбіні аптаның бірінші күні ретінде қарастырып, 2011 жылдың 21 ақпаны арқылы көрсетілген апта күнін алыңыз.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Апта күнінің атауын қайтарады.",
        "Documentation.LongDescription": "Берілген <code>date</code> үшін аптаның күні атауын қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Апта күнінің атауын алыңыз.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Жылдың күнін көрсететін 1 мен 366 арасындағы санды қайтарады",
        "Documentation.LongDescription": "Көрсетілген <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінде жылдың күнін білдіретін санды қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 жылғы 1 наурызға арналған жыл күні.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Айдағы күндер санын көрсететін 28 мен 31 арасындағы санды қайтарады.",
        "Documentation.LongDescription": "<code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәніндегі айдағы күндер санын қайтарады <code>dateTime</code>. \r\n <ul>\r\n        <li><code>dateTime</code>: айдағы күндер саны қайтарылатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 01)></code> арқылы көрсетілгендей желтоқсан айындағы күндер саны.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Күннің соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> арқылы көрсетілетін күннің соңын қайтарады. Уақыт белдеуі туралы деректер сақталады.\r\n      <ul>\r\n        <li><code>dateTime</code>: күннің соңы есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM үшін күннің соңын алу.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 үшін күннің соңын алу.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Айдың соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын айдың соңын қайтарады.\r\n      <ul>\r\n        <li><code>dateTime</code>: айдың соңы есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 үшін айдың соңын алу.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 үшін айдың соңын алу.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Тоқсанның соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын тоқсанның соңын қайтарады. Уақыт белдеуі туралы деректер сақталады.\r\n      <ul>\r\n        <li><code>dateTime</code>: тоқсанның соңы есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:00AM үшін тоқсанның соңын табу.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Аптаның соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын аптаның соңын қайтарады.\r\nБұл функция осы салыстырмалы есептеу үшін аптаның бірінші күнін орнату үшін қосымша <code>Day</code>, <code>firstDayOfWeek</code> параметрін қабылдайды. Әдепкі мәні — <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: аптаның соңғы күні есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[Міндетті емес]</i> аптаның бірінші күнін білдіретін <code>Day.Type</code> мәні. Ықтимал мәндер: <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> және <code>Day.Saturday</code>. Әдепкі мән — <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 үшін аптаның соңын алу.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 үшін аптаның соңын алу, жексенбі аптаның бірінші күні болады.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Жылдың соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын жылдың соңын қайтарады, секунд үлестерін қамтиды. Уақыт белдеуі туралы ақпарат сақталады.\r\n      <ul>\r\n        <li><code>dateTime</code>: жылдың соңы есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM үшін жылдың соңын алу.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 үшін сағаттың соңын алу.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Осы мәннен күнді жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>date</code> мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").\r\nЕгер берілген <code>value</code> <code>null</code> болса, <code>Date.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>date</code> болса, <code>value</code> қайтарылады. Келесі түрлердегі мәндерді <code>date</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністен алынған <code>date</code> мәні. Мәліметтерді алу үшін <code>Date.FromText</code> қараңыз.</li>\r\n        <li><code>datetime</code>: <code>value</code> мәнінің күн компоненті.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> жергілікті күн/уақыт баламасының күн компоненті.</li>\r\n        <li><code>number</code>: <code>value</code> арқылы көрсетілген OLE автоматтандыру күнінің күн/уақыт баламасының күн компоненті.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>43910</code> мәнін <code>date</code> мәніне түрлендіру.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> мәнін <code>date</code> мәніне түрлендіру.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Жергілікті, әмбебап және теңшелетін күн пішімдерінен күнді жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік көрінісінен <code>date</code> мәнін жасайды. Міндетті емес <code>record</code> параметрі, <code>options</code> қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>record</code> келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>: пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті өткізіп жіберу немесе <code>null</code> мәнін беру ең жақсы болжамды пайдаланып күнді талдауға әкеледі.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"янв\", \"фев\", \"мар\", ...</code>. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін <code>options</code> мәтіндік мән де болуы мүмкін. <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31\"</code> мәнін <code>date</code> мәніне түрлендіру.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Хиджра күнтізбесінде Григориан күнтізбесіндегі 1400 жылдың басына сәйкес келетін жылды табады.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы күн ішінде орын алатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы күн ішінде орын алатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік күн ағымдағы күнде екенін анықтау.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы ай ішінде орын алатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы ай ішінде орын алатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік күн ағымдағы айда екенін анықтау.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы тоқсан ішінде орын алатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы тоқсан ішінде орын алатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік күн ағымдағы тоқсанда екенін анықтау.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы апта ішінде орын алатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы апта ішінде орын алатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік күн ағымдағы аптада екенін анықтау.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы жыл ішінде орын алатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы жыл ішінде орын алатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік күн ағымдағы жылда екенін анықтау.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі күнде болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі күнде болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан кейінгі күн келесі күнде екенін анықтау.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі айда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі айда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан кейінгі ай келесі айда екенін анықтау.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі тоқсанда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі тоқсанда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан кейінгі тоқсан келесі тоқсанда екенін анықтау.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі аптада болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі аптада болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан кейінгі апта келесі аптада екенін анықтау.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің келесі жылда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі жылда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан кейінгі жыл келесі жылда екенін анықтау.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен күнде болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен күнде болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы күнде болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан бұрынғы күн алдыңғы күнде екенін анықтау.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен айда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен айда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы айда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан бұрынғы ай алдыңғы айда екенін анықтау.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен тоқсанда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен тоқсанда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы тоқсанда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан бұрынғы тоқсан алдыңғы тоқсанда екенін анықтау.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен аптада болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен аптада болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы аптада болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан бұрынғы апта алдыңғы аптада екенін анықтау.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мәнінің өткен жылда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен жылда болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы жылда болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттан бұрынғы жыл алдыңғы жылда екенін анықтау.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы күннің ағымдағы жыл ішінде орын алатынын және ағымдағы күні немесе одан бұрын болатынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн және уақыт арқылы анықталғандай осы <code>dateTime</code> күн/уақыт мәнінің ағымдағы жыл ішінде орын алатынын және ағымдағы күні немесе одан бұрын болатынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйелік уақыттың жылдың басынан болып жатқанын анықтау.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Осы күн кібісе жылға жататын-жатпайтынын көрсетеді.",
        "Documentation.LongDescription": "Осы <code>dateTime</code> күн/уақыт мәні кібісе жылға жататын-жатпайтынын көрсетеді. \r\n <ul>\r\n        <li><code>dateTime</code>: есептелетін <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2012, 01, 01)</code> арқылы көрсетілген 2012 жыл кібісі жылы болып табылатынын анықтау.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Ай құрамдасын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>datetime</code> мәнінің ай құрамдасын қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) ішіндегі айды табу.",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Ай компонентінің атауын қайтарады.",
        "Documentation.LongDescription": "Берілген <code>date</code> үшін ай компонентінің атауын қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Ай атауын алыңыз.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Күн жылдың қай тоқсанына жататынын көрсететін санды қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> күні жылдың қай тоқсанына жататынын көрсететін 1 және 4 арасындағы санды қайтарады. <code>dateTime</code> <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы мүмкін.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#date(2011, 12, 31) күні жылдың қай тоқсанына жататынын табу.",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Күннің басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> арқылы көрсетілетін күнінің басын қайтарады.\r\n    <code>dateTime</code> <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы керек.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:00 үшін күннің басын табу.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Айдың басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын айдың басын қайтарады.\r\n    <code>dateTime</code> <code>date</code> немесе <code>datetimezone</code> мәні болуы тиіс.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:10:32 үшін айдың басын табу.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Тоқсанның басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын тоқсанның басын қайтарады.\r\n    <code>dateTime</code> <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы керек.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:00AM үшін тоқсанның басын табу.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Аптаның басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын аптаның басын қайтарады.\r\n    <code>dateTime</code> <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы керек.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Сейсенбі, 2011 жылдың 11 қазаны үшін аптаның басын табу.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Аптаның басын сейсенбі, 11 қазан 2011 жыл үшін, дүйсенбіні аптаның басы ретінде пайдаланып табу.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Жылдың басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәнін қамтитын жылдың басын қайтарады.\r\n    <code>dateTime</code> <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы керек.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:10:32 үшін жылдың басын табу.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Күн мәнінің бөліктерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Берілген күн мәнінің, <code>date</code>, бөліктерін қамтитын жазбаны қайтарады.\r\n <ul>\r\n        <li><code>date</code>: бөліктерінің жазбасы есептелетін <code>date</code> мәні</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2011, 12, 31)</code> мәнін күн мәнінің бөліктерін қамтитын жазбаға түрлендіру.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Күн мәнінің мәтіндік көрінісін қайтарады.",
        "Documentation.LongDescription": "<code>date</code> мәтіндік көрінісін қайтарады. Міндетті емес <code>options</code> <code>record</code> параметрі, қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>culture</code> тек бұрынғы жұмыс ағындары үшін пайдаланылады. <code>record</code> параметрі келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>:Пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті қалдырып кетсеңіз немесе <code>null</code> көрсетсеңіз, <code>Culture</code> параметрінде көрсетілген әдепкі күн пішімі пайдаланылады.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> параметрінде <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> параметрінде <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> болып көрсетіледі. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін, <code>options</code> және <code>culture</code> мәтіндік мәндер де болуы мүмкін. <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "<code>#date(2010, 12, 31)</code> мәнін <code>text</code> мәніне түрлендіреді. <i>Нәтиже ағымдағы мәдениетке байланысты өзгеріп отыруы мүмкін.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Хиджра күнтізбесінде Григориан күнтізбесіндегі 2000 жылдың 1 қаңтарына сәйкес келетін жылды табады.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Осы күн айдың қай аптасына келетінін көрсететін 1 мен 6 арасындағы сандарды қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> күні айдың қай аптасына келетінін көрсететін 1 мен 6 арасындағы сандарды қайтарады.\r\n <ul>\r\n        <li><code>dateTime</code>: айдың аптасы анықталатын <code>datetime</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 жылындағы 15-ші наурыздың қай аптасына келетінін анықтау.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Осы күн жылдың қай аптасына жататынын көрсететін 1 және 54 арасындағы санды қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> күнінің жылдың қай аптасына сәйкес келетінін көрсететін 1 мен 54 арасындағы санды қайтарады.\r\n <ul>\r\n        <li><code>dateTime</code>: Жылдың аптасы анықталатын <code>datetime</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: Жаңа аптаның басы ретінде саналатын күнді көрсететін қосымша <code>Day.Type</code> мәні (мысалы, <code>Day.Sunday</code>). Егер көрсетілмесе, тіл және аймақтық параметрлерге сәйкес әдепкі мән пайдаланылады.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Жылдың қай аптасында 2011 жылдың 27 наурызы қамтылатынын анықтау.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Дүйсенбіні аптаның басы ретінде пайдаланып, 2011 жылдың 27 наурызы жылдың қай аптасында қамтылатынын анықтау.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Жыл құрамдасын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>datetime</code> мәнінің жыл құрамдасын қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) ішіндегі жылды табу.",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Осы date, datetime немесе datetimezone мәнінің күн құрамдасын қайтарады.",
        "Documentation.LongDescription": "Осы <code>date</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің <code>dateTime</code> күн құрамдасын қайтарады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) күн мәнін табу.",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Осы мәннен күнді және уақытты жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>datetime</code> мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").\r\nЕгер берілген <code>value</code> <code>null</code> болса, <code>DateTime.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>datetime</code> болса, <code>value</code> қайтарылады. Келесі түрлердегі мәндерді <code>datetime</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністен алынған <code>datetime</code> мәні. Мәліметтер алу үшін <code>DateTime.FromText</code> қараңыз.</li>\r\n        <li><code>date</code>: <code>datetime</code>, <code>value</code> күн компоненті және <code>12:00:00 AM</code> уақыт компоненті болып табылады.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> жергілікті <code>datetime</code> баламасы.</li>\r\n        <li><code>time</code>: <code>datetime</code>, <code>0</code> OLE автоматтандыру күнінің күн баламасы күн компоненті және <code>value</code> уақыт компоненті болып табылады.</li>\r\n        <li><code>number</code>: <code>value</code> арқылы көрсетілген OLE автоматтандыру күнінің <code>datetime</code> баламасы. </li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(06, 45, 12)</code> мәнін <code>datetime</code> мәніне түрлендіру.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "<code>#date(1975, 4, 4)</code> мәнін <code>datetime</code> мәніне түрлендіру.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "64 биттік нөмірден күнді және уақытты жасайды.",
        "Documentation.LongDescription": "<code>fileTime</code> мәнінен <code>datetime</code> мәнін жасайды және оны жергілікті уақыт белдеуіне түрлендіріледі. Файл уақыты — Windows файл уақытының мәні, ол 00:00 түн ортасы, 1 қаңтар біздің заманымыздағы 1601 ж. күніне бері өткен 100 наносекундтық аралықтардың санын білдіреді. (C.E.) Реттелген әмбебап уақыт (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> күн және уақыт мәніне түрлендіру.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Жергілікті және әмбебап күн/уақыт пішімдерінен күнді және уақыт белдеуін жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік көрінісінен <code>datetime</code> мәнін жасайды. Міндетті емес <code>record</code> параметрі, <code>options</code> қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>record</code> келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>: пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті өткізіп жіберу немесе <code>null</code> мәнін беру ең жақсы болжамды пайдаланып күнді талдауға әкеледі.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"янв\", \"фев\", \"мар\", ...</code>. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін <code>options</code> мәтіндік мән де болуы мүмкін. <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> мәнін күн/уақыт мәніне түрлендіру.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00.121212\"</code> мәнін күн/уақыт мәніне түрлендіру.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "<code>\"2010-12-31T01:30:00\"</code> мәнін күн/уақыт мәніне түрлендіру.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "<code>\"20101231T013000\"</code> мәнін datetime мәніне түрлендіру.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл datetime мәнінің ағымдағы сағатта болатынын не болмайтынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> datetime мәні ағымдағы сағатта болатынын не болмайтынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытының ағымдағы сағатта екендігін анықтау.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл datetime мәні ағымдағы минутта болатынын не болмайтынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> datetime мәні ағымдағы минутта болатынын не болмайтынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытының ағымдағы минутта екендігін анықтау.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл datetime мәні ағымдағы секундта болатынын не болмайтынын көрсетеді.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> datetime мәні ағымдағы секундта болатынын не болмайтынын көрсетеді.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытының ағымдағы секундта екендігін анықтау.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі сағатта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі сағатта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі сағаттың келесі сағатта екендігін анықтау.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі минутта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі минутта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі минуттың келесі минутта екендігін анықтау.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің келесі секундта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні келесі секундта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытынан кейінгі секундтың келесі секундта екендігін анықтау.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен сағатта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен сағатта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы сағатта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі сағаттың өткен сағатта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен минутта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен минутта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы минутта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі минуттың өткен минутта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, бұл күн мен уақыт мәнінің өткен секундта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.",
        "Documentation.LongDescription": "Жүйедегі ағымдағы күн мен уақыт арқылы анықталғандай, берілген <code>dateTime</code> күн мен уақыт мәні өткен секундта болатынын не болмайтынын көрсетеді. Бұл функция ағымдағы секундта болған берілген мән болғанда \"жалған\" мәнін қайтарады.\r\n      <ul>\r\n      <li><code>dateTime</code>: анықталатын <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Ағымдағы жүйе уақытына дейінгі секундтың өткен секундта екендігін анықтау.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Осы күн/уақыт мәнінің уақыт бөлігін қайтарады.",
        "Documentation.LongDescription": "Осы күн/уақыт мәнінің, <code>dateTime</code>, уақыт бөлігін қайтарады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2010, 12, 31, 11, 56, 02) уақыт мәнін табу.",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Күн және уақыт мәнінің бөліктерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Берілген күн және уақыт мәнінің, <code>dateTime</code>, бөліктерін қамтитын жазбаны қайтарады.\r\n <ul>\r\n        <li><code>dateTime</code>: бөліктерінің жазбасы есептелетін <code>datetime</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2011, 12, 31, 11, 56, 2)</code> мәнін күн және уақыт мәндерін қамтитын жазбаға түрлендіру.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Күн және уақыт мәнінің мәтіндік көрінісін қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> мәтіндік көрінісін қайтарады. Міндетті емес <code>options</code> <code>record</code> параметрі, қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>culture</code> тек бұрынғы жұмыс ағындары үшін пайдаланылады. <code>record</code> параметрі келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>:Пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті қалдырып кетсеңіз немесе <code>null</code> көрсетсеңіз, <code>Culture</code> параметрінде көрсетілген әдепкі күн пішімі пайдаланылады.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> параметрінде <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> параметрінде <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> болып көрсетіледі. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін, <code>options</code> және <code>culture</code> мәтіндік мәндер де болуы мүмкін. <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetime(2010, 12, 31, 01, 30, 25)</code> мәнін <code>text</code> мәніне түрлендіреді. <i>Нәтиже ағымдағы мәдениетке байланысты өзгеріп отыруы мүмкін.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "ISO 8601 үлгісін пайдаланып түрлендіру.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Осы мәннен күнді және уақыт белдеуін жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>datetimezone</code> мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").\r\nЕгер берілген <code>value</code> <code>null</code> болса, <code>DateTimeZone.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>datetimezone</code> болса, <code>value</code> қайтарылады. Келесі түрлердегі мәндерді <code>datetimezone</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністен алынған <code>datetimezone</code> мәні. Мәліметтер алу үшін <code>DateTimeZone.FromText</code> қараңыз.</li>\r\n        <li><code>date</code>: <code>datetimezone</code>, <code>value</code> күн компоненті, <code>12:00:00 AM</code> уақыт компоненті және жергілікті уақыт белдеуіне сәйкес ауытқу болып табылады.</li>\r\n        <li><code>datetime</code>: <code>datetimezone</code>, <code>value</code> күн/уақыт және жергілікті уақыт белдеуіне сәйкес ауытқу болып табылады.</li>\r\n        <li><code>time</code>: <code>datetimezone</code>, <code>0</code> OLE автоматтандыру күнінің күн баламасы күн компоненті, <code>value</code> уақыт компоненті және жергілікті уақыт белдеуіне сәйкес ауытқу болып табылады.</li>\r\n        <li><code>number</code>: <code>datetimezone</code>, <code>value</code> арқылы көрсетілген OLE автоматтандыру күніне тең күн/уақыт және жергілікті уақыт белдеуіне сәйкес ауытқу бар.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2020-10-30T01:30:00-08:00\"</code> мәнін <code>datetimezone</code> мәніне түрлендіру.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "64 биттік нөмірден күнді және уақыт белдеуін жасайды.",
        "Documentation.LongDescription": "<code>fileTime</code> мәнінен <code>күнуақытаймағы</code> мәнін жасайды және оны жергілікті уақыт белдеуіне түрлендіреді. Файл уақыты — Windows файл уақытының мәні, ол 00:00 түн ортасы, 1 қаңтар біздің заманымыздағы 1601 ж. күнінен бері өткен 100 наносекундтық аралықтардың санын білдіреді. (C.E.) Реттелген әмбебап уақыт (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>129876402529842245</code> күн және уақыт белдеуі мәніне түрлендіру.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Жергілікті, әмбебап және теңшелетін datetimezone пішімдерінен datetimezone мәнін жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік көрінісінен <code>datetimezone</code> мәнін жасайды. Міндетті емес <code>record</code> параметрі, <code>options</code> қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>record</code> келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>: пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті өткізіп жіберу немесе <code>null</code> мәнін беру ең жақсы болжамды пайдаланып күнді талдауға әкеледі.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> ішіндегі <code>\"MMM\"</code>: <code>\"янв\", \"фев\", \"мар\", ...</code>. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін <code>options</code> мәтіндік мән де болуы мүмкін. <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2010-12-31T01:30:00-08:00\"</code> <code>datetimezone</code> мәніне түрлендіру.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "ISO 8601 арқылы түрлендіру.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Осы күн және уақыт белдеуі мәніне уақыт белдеуі туралы ақпаратты жояды.",
        "Documentation.LongDescription": "уақыт белдеуі ақпараты жойылған <code>dateTimeZone</code> #datetime мәнін береді.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) мәнінен уақыт белдеуі туралы ақпаратты жою.",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Уақыт белдеуі құрамдасын жергілікті уақыт белдеуіне түрлендіреді.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> күн және уақыт белдеуі мәнінің уақыт белдеуі туралы ақпаратын жергілікті уақыт белдеуі туралы ақпаратқа өзгертеді.\r\n    Егер <code>dateTimeZone</code> мәнінде уақыт белдеуі құрамдасы болмаса, жергілікті уақыт белдеуі туралы ақпарат қосылады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) үшін уақыт белдеуі туралы ақпаратты жергілікті уақыт белдеуіне (PST ескеріп) өзгерту.",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Күн және уақыт белдеуі мәнінің бөліктерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Берілген күн және уақыт белдеуі мәнінің, <code>dateTimeZone</code>, бөліктерін қамтитын жазбаны қайтарады.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: бөліктерінің жазбасы есептелетін <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> мәнін күн, уақыт және белдеу мәндерін қамтитын жазбаға түрлендіру.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Күн және уақыт белдеуі мәнінің мәтіндік көрінісін қайтарады.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> мәтіндік көрінісін қайтарады. Міндетті емес <code>options</code> <code>record</code> параметрі, қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>culture</code> тек бұрынғы жұмыс ағындары үшін пайдаланылады. <code>record</code> параметрі келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>:Пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәлімет алу үшін https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті қалдырып кетсеңіз немесе <code>null</code> көрсетсеңіз, <code>Culture</code> параметрінде көрсетілген әдепкі күн пішімі пайдаланылады.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> параметрінде <code>\"MMM\"</code> <code>\"Jan\", \"Feb\", \"Mar\", ...</code>, ал <code>\"ru-RU\"</code> параметрінде <code>\"MMM\"</code> <code>\"янв\", \"фев\", \"мар\", ...</code> болып көрсетіледі. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін, <code>options</code> және <code>culture</code> мәтіндік мәндер де болуы мүмкін. <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "<code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> мәнін <code>text</code> мәніне түрлендіреді. <i>Нәтиже ағымдағы мәдениетке байланысты өзгеріп отыруы мүмкін.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "ISO 8601 үлгісін пайдаланып түрлендіру.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Уақыт белдеуі құрамдасын UTC уақыт белдеуіне түрлендіреді.",
        "Documentation.LongDescription": "<code>dateTimeZone</code> күн және уақыт мәнінің уақыт белдеуі ақпаратын UTC немесе әлемдік уақыт белдеуі ақпаратына өзгертеді.\r\n    Егер <code>dateTimeZone</code> мәнінде уақыт белдеуі құрамдасы болмаса, UTC уақыт белдеуі туралы ақпарат қосылады.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) үшін уақыт белдеуі туралы ақпаратты UTC уақыт белдеуіне өзгерту.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Мәннің уақыт белдеуін өзгертеді.",
        "Documentation.LongDescription": "Мәннің уақыт белдеуін өзгертеді.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Мәннің уақыт белдеуін өзгертеді.",
        "Documentation.LongDescription": "Мәннің уақыт белдеуін өзгертеді.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Берілген мәннен ондық сан жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен Decimal <code>number</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Decimal.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> Decimal ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады, әйтпесе қате қайтарылады. Егер <code>value</code> басқа кез келген түрде болса, ол алдымен <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4.5\"</code> ондық <code>санын</code> алыңыз.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Delta Lake кестесінің мазмұнын береді.",
        "Documentation.LongDescription": "Delta Lake кестесінің мазмұнын береді.",
        "Documentation.Category": "Деректерге қатынасу",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Берілген мәнен Double мәнін жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен Double <code>number</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Double.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> Double ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады, әйтпесе қате қайтарылады. Егер <code>value</code> басқа кез келген түрде болса, ол алдымен <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> Double <code>саны</code> мәнін алыңыз.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Ұзақтықтың күндер бөлігін қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> күндер бөлігін қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Екі күн арасындағы күндер санын шығарып алады.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Осы мәннен ұзақтықты жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> ішінен <code>duration</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Duration.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>duration</code> болса, <code>value</code> қайтарылады. Келесі түрлердің мәндерін <code>duration</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік өткен уақыт түрінен (к.с:м:с) алынған <code>duration</code> мәні. Қосымша мәліметтерді <code>Duration.FromText</code> бөлімінен қараңыз.</li>\r\n        <li><code>number</code>: <code>value</code> арқылы көрсетілген бүтін және бөлшек күндердің санының <code>duration</code> баламасы.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>2.525</code> мәнін <code>duration</code> мәніне түрлендіру.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Мәтіндік өткен уақыт түрінен (к.у:м:с) ұзақтық мәнін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген мәтіннен ұзақтық мәнін қайтарады, <code>text</code>. Бұл функция келесі пішімдерді талдай алады:\r\n <ul>\r\n        <li>(-)сс:мм(:сс(.бб)) </li>\r\n        <li>(-)ккк(.сс:мм(:сс(.бб))) </li>\r\n </ul>\r\n        <br>\r\n        (Барлық ауқымдар қамтылған)<br>\r\n        ккк: Күндердің саны.<br>\r\n        сс: Сағаттардың саны, 0 мен 23 аралығы.<br>\r\n        аа: Минуттардың саны, 0 мен 59 аралығы.<br>\r\n        сс: Секундтардың саны, 0 мен 59 аралығы.<br>\r\n        бб: Секунд бөлігі, 0 мен 9999999 аралығы.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>\"2.05:55:20\"</code> мәнін <code>duration</code> мәніне түрлендіру.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Ұзақтықтың сағаттар бөлігін қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> сағаттар бөлігін қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәнінен сағаттарды шығарып алу.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Ұзақтықтың минуттар бөлігін қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> минуттар бөлігін қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәнінен минуттарды шығарып алу.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Ұзақтықтың секундтар бөлігін қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> секундтар бөлігін қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәнінен секундтарды шығарып алу.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Ұзақтықтың бөліктерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> ұзақтық мәнінің бөліктерін қамтитын жазбаны қайтарады.\r\n  <ul>\r\n        <li><code>duration</code>: жазба жасалған <code>duration</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> мәнін тиісті болса, күндерді, сағаттарды, минуттарды және секундтарды қамтитын бөліктерінің жазбасына түрлендіру.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "\"к.с:м:с\" түріндегі мәтінді қайтарады.",
        "Documentation.LongDescription": "Берілген <code>duration</code> ұзақтық мәнінің \"day.hour:mins:sec\" формасындағы мәтіндік көрінісін қайтарады.\r\n <ul>\r\n        <li><code>duration</code>: мәтіндік көрініс есептелетін <code>ұзақтық</code>.</li>\r\n  <li><code>format</code>: <i>[Қосымша]</i> Ұсынылмаған, бос мән болмаса, қатені береді</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "<code>#duration(2, 5, 55, 20)</code> мәнін мәтіндік мәнге түрлендіру.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Осы ұзақтықтың жалпы күндер санын қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> мәніне созылған жалпы күндерді қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәніне созылған жалпы күндерді табу.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Осы ұзақтықтың жалпы сағаттар санын қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> мәніне созылған жалпы сағаттарды қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәніне созылған жалпы сағаттарды табу.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Осы ұзақтықтың жалпы минуттар санын қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> мәніне созылған жалпы минуттарды қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәніне созылған жалпы минуттарды табу.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Осы ұзақтықтың жалпы секунд санын қайтарады.",
        "Documentation.LongDescription": "<code>duration</code> мәніне созылған жалпы секундтарды қайтарады.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Ұзақтық мәніне созылған жалпы секундтарды табу.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Себеп, хабар және мәліметтер үшін көрсетілген мәтіндік мәндерден қате жазбасын қайтарады.",
        "Documentation.LongDescription": "Себеп, хабар және мәліметтер үшін көрсетілген мәтіндік мәндерден қате жазбасын қайтарады.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Тұрақты мәннің M бастапқы коды көрінісін қайтарады.",
        "Documentation.LongDescription": "Тұрақты мәннің M бастапқы коды көрінісін қайтарады.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Сандық мәннің M бастапқы коды көрінісін алыңыз.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Күн мәнінің M бастапқы коды көрінісін алыңыз.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Мәтін мәнінің M бастапқы коды көрінісін алыңыз.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "M өрнегін есептеудің нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>environment</code> арқылы анықталған сілтеме жасауға болатын қолжетімді идентификаторларымен <code>document</code> M өрнегін есептеудің нәтижесін қайтарады.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Қарапайым қосындыны есептеңіз.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Күрделірек қосындыны есептеңіз.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Идентификаторы бар мәтіндік мәнді біріктіруді есептеңіз.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Идентификатордың M бастапқы коды көрінісін қайтарады.",
        "Documentation.LongDescription": "<code>name</code> идентификаторының M бастапқы коды көрінісін қайтарады.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Идентификатордың M бастапқы коды көрінісін алыңыз.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Бос орын бар идентификатордың M бастапқы коды көрінісін алыңыз.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Көрсетілген файлдың мазмұнын екілік түрде қайтарады.",
        "Documentation.LongDescription": "<code>path</code> файлының мазмұнын бинарлық мән ретінде қайтарады. <code>options</code> параметрі тек ішкі қолданысқа арналған.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Белгілі бір функция деректер көзі ретінде қарастырылғанын не қарастырылмағанын қайтарады.",
        "Documentation.LongDescription": "<code>function</code> деректер көзі ретінде қарастырылғанын не қарастырылмағанын қайтарады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Well-Known Text (WKT) пішіміндегі географиялық мәнді білдіретін мәтінді құрылымдалған жазбаға аударады.",
        "Documentation.LongDescription": "Well-Known Text (WKT) пішіміндегі географиялық мәнді білдіретін мәтінді құрылымдалған жазбаға аударады. WKT - бұл Open Geospatial Consortium (OGC) органы анықтаған стандартты пішім және дерекқорлар, оның ішінде SQL Server пайдаланатын қарапайым сериялау пішімі.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Құрылымдық географиялық нүктелік мәнді өзінің Well-Known Text (WKT) көрсеткішіне аударады.",
        "Documentation.LongDescription": "Open Geospatial Consortium (OGC) органы анықтаған құрылымдық географиялық нүктелік мәнді өзінің Well-Known Text (WKT) көрсеткішіне, сонымен қатар көптеген дерекқорлар, оның ішінде SQL Server пайдаланатын сериялау пішіміне аударады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Well-Known Text (WKT) пішіміндегі геометриялық мәнді білдіретін мәтінді құрылымдалған жазбаға аударады.",
        "Documentation.LongDescription": "Well-Known Text (WKT) пішіміндегі геометриялық мәнді білдіретін мәтінді құрылымдалған жазбаға аударады. WKT - бұл Open Geospatial Consortium (OGC) органы анықтаған стандартты пішім және дерекқорлар, оның ішінде SQL Server пайдаланатын қарапайым сериялау пішімі.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Құрылымдық геометриялық нүкте мәнін өзінің Well-Known Text (WKT) көрсеткішіне аударады.",
        "Documentation.LongDescription": "Open Geospatial Consortium (OGC) органы анықтаған құрылымдық геометриялық нүктелік мәнді өзінің Well-Known Text (WKT) көрсеткішіне, сонымен қатар көптеген дерекқорлар, оның ішінде SQL Server пайдаланатын сериялау пішіміне аударады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Берілген мәннен GUID мәнін қайтарады.",
        "Documentation.LongDescription": "Берілген <code>value</code> арқылы <code>Guid.Type</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Guid.From</code> <code>null</code> мәнін қайтарады. Берілген <code>value</code> пішімі қаншалықты жарамды екенін анықтау үшін тексеріс жүргізіледі. Жарамды пішімдер мысалдарда берілген.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "GUID идентификаторын 32 үздіксіз оналтылық цифр түрінде беруге болады.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID идентификаторын 8-4-4-4-12 блоктарына сызықшалар арқылы бөлінген 32 оналтылық цифр түрінде беруге болады.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID идентификаторын сызықшалармен бөлінген және фигуралық жақшаға алынған 32 оналтылық цифр түрінде беруге болады.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "GUID идентификаторын сызықшалармен бөлінген және дөңгелек жақшаға алынған 32 оналтылық цифр түрінде беруге болады.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Берілген мәннен 16 биттік бүтін сан жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен 16 биттік бүтін <code>сан</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Int16.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні бөлшегі жоқ 16 биттік бүтін сан ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады. Егер оның бөлшек саны болса, ол сан көрсетілген режиммен дөңгелектеледі. Әдепкі дөңгелектеу режимі – <code>RoundingMode.ToEven</code>. Егер <code>value</code> мәні басқа түрге жататын болса, алдымен ол <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> мәнін қараңыз. Қосымша <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> 16 биттік бүтін <code>саны</code> мәнін алыңыз.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> пайдалана отырып, <code>\"4.5\"</code> 16 биттік бүтін <code>сан</code> мәнін алыңыз.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Берілген мәннен 32 биттік бүтін сан жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен 32 биттік бүтін <code>сан</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Int32.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні бөлшегі жоқ 32 биттік бүтін сан ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады. Егер оның бөлшек саны болса, ол сан көрсетілген режиммен дөңгелектеледі. Әдепкі дөңгелектеу режимі – <code>RoundingMode.ToEven</code>. Егер <code>value</code> мәні басқа түрге жататын болса, алдымен ол <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> мәнін қараңыз. Қосымша <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> <code>сан</code> мәнінің 32 биттік бүтін санын алыңыз.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> пайдалана отырып, <code>\"4.5\"</code> 32 биттік бүтін <code>сан</code> мәнін алыңыз.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Берілген мәннен 64 биттік бүтін сан жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен 64 биттік бүтін <code>сан</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Int64.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні бөлшегі жоқ 64 биттік бүтін сан ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады. Егер оның бөлшек саны болса, ол сан көрсетілген режиммен дөңгелектеледі. Әдепкі дөңгелектеу режимі – <code>RoundingMode.ToEven</code>. Егер <code>value</code> мәні басқа түрге жататын болса, алдымен ол <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> мәнін қараңыз. Қосымша <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> 64 биттік бүтін сан <code>number</code> мәнін алыңыз.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> қолданатын <code>\"4.5\"</code> 64 биттік бүтін <code>сан</code> мәні.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Берілген мәннен белгіленген 8 биттік бүтін сан жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен белгіленген 8 биттік бүтін <code>сан</code> мәнін қайтарады. Егер берілген <code>value</code> мәні <code>null</code> болса, <code>Int8.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> мәні бөлшегі жоқ белгіленген 8 биттік бүтін сан ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады. Егер оның бөлшек саны болса, ол сан көрсетілген режиммен дөңгелектеледі. Әдепкі дөңгелектеу режимі – <code>RoundingMode.ToEven</code>. Егер <code>value</code> мәні басқа түрге жататын болса, алдымен ол <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Қолжетімді дөңгелектеу режимдері үшін <code>Number.Round</code> мәнін қараңыз. Қосымша <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> белгіленген 8 биттік бүтін <code>сан</code> мәнін алыңыз .",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>RoundingMode.AwayFromZero</code> пайдалана отырып, <code>\"4.5\"</code> белгіленген 8 биттік бүтін <code>сан</code> мәнін алыңыз.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Функцияның негізгі мәтіні үшін дерексіз синтаксистік ағашты (AST) қайтарады.",
        "Documentation.LongDescription": "<p><i>Элемент өрнегіне</i> бірыңғайланған <code>function</code> негізгі мәтініне арналған абстрактілі синтаксистік ағашты (AST) қайтарады:\r\n<ul>\r\n  <li>Функция 1 аргументті лямбда өрнегі болуы керек.</li>\r\n  <li>Функция параметріне жасалатын барлық сілтемелер  <code>ItemExpression.Item</code> мәніне ауыстырылады.</li>\r\n  <li>AST тармағы келесі түйіндерді қамтитын етіп жеңілдетіледі:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> негізгі мәтіні үшін AST ағашын жол өрнегі ретінде қайтару мүмкін болмаса, қате шығады.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Функцияның <code>each _ <> null</code> деген негізгі бөлігі үшін AST қайтарады",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "JSON құжатының мазмұнын қайтарады.",
        "Documentation.LongDescription": "JSON құжатының мазмұнын қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Берілген мәннің JSON көрінісін шығарады.",
        "Documentation.LongDescription": "<p>Берілген <code>value</code> мәнінің JSON көрінісін <code>encoding</code> арқылы көрсетілген мәтінді кодтау арқылы береді. Егер <code>encoding</code> көрсетілмесе, UTF8 пайдаланылады. Мәндер төмендегіше көрсетіледі:</p>\r\n <ul>\r\n        <li>Null, мәтін және логикалық мәндер тиісті JSON түрлері ретінде көрсетіледі</li>\r\n        <li>Сандар JSON пішімінде сандар түрінде көрсетіледі, бірақ <code>#infinity</code>, <code>-#infinity</code> және <code>#nan</code> null мәніне түрлендіріледі</li>\r\n        <li>Тізімдер JSON массивтері түрінде көрсетіледі</li>\r\n        <li>Жазбалар JSON нысандары түрінде көрсетіледі</li>\r\n        <li>Кестелер нысандар массиві түрінде көрсетіледі</li>\r\n        <li>Күндер, уақыттар, datetimes, datetimezones және ұзақтықтар ISO-8601 мәтіні түрінде көрсетіледі</li>\r\n        <li>Екілік мәндер base-64 кодталған мәтіні түрінде көрсетіледі</li>\r\n        <li>Түрлер мен функциялар қатеге алып келеді</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Күрделі мәнді JSON етіп өзгерту.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Екілік мәнді жол үзілімдерінде бөлінген мәтіндік мәндер тізіміне түрлендіреді.  Егер тырнақша мәнері көрсетілген болса, онда жол үзілімдері тырнақшалар ішінде көрсетілуі мүмкін.  Егер includeLineSeparators шын болса, онда мәтінге жол үзілімі таңбалары қосылады.",
        "Documentation.LongDescription": "Екілік мәнді жол үзілімдерінде бөлінген мәтіндік мәндер тізіміне түрлендіреді.  Егер тырнақша мәнері көрсетілген болса, онда жол үзілімдері тырнақшалар ішінде көрсетілуі мүмкін.  Егер includeLineSeparators шын болса, онда мәтінге жол үзілімі таңбалары қосылады.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Мәтіндік мәнді жол үзілімдерінде бөлінген мәтіндік мәндер тізіміне түрлендіреді. Егер includeLineSeparators шын болса, онды мәтінге жол үзілімі таңбалары қосылады.",
        "Documentation.LongDescription": "Мәтін мәнін жол үзілімдерінде бөлінетін мәтін мәндерінің тізіміне түрлендіреді. Егер includeLineSeparators шын болса, жол үзілімі таңбалары мәтінде қамтылады.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (default) Тырнақшаға алу тәртібі қажет емес.</li>\r\n            <li><code>QuoteStyle.Csv:</code> Тырнақшаға алу Csv сәйкес болады. Қос тырнақша таңбасы мұндай аймақтардың шетін белгілеу үшін пайдаланылады және қос тырнақша таңбасының жұбы осындай аймақтағы бір қос тырнақша таңбасын көрсету үшін пайдаланылады. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Мәтін тізімін көрсетілген кодтауды және жол бөлгішін пайдаланып екілік мәнге түрлендіреді. Көрсетілген жол бөлгіші әр жолға үстеледі.  Егер көрсетілмеген болса, онда жылжыма бөлікті қайтару және бір жолға түсу таңбалары пайдаланылады.",
        "Documentation.LongDescription": "Мәтін тізімін көрсетілген кодтауды және жол бөлгішін пайдаланып екілік мәнге түрлендіреді. Көрсетілген жол бөлгіші әр жолға үстеледі.  Егер көрсетілмеген болса, онда жылжыма бөлікті қайтару және бір жолға түсу таңбалары пайдаланылады.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Мәтін тізімін жалғыз мәтінге түрлендіреді.  Әр жолға көрсетілген жол бөлгіші үстеледі.  Егер көрсетілмеген болса, онда жылжыма бөлікті қайтару және бір жолға түсу таңбалары пайдаланылады.",
        "Documentation.LongDescription": "Мәтін тізімін жалғыз мәтінге түрлендіреді.  Әр жолға көрсетілген жол бөлгіші үстеледі.  Егер көрсетілмеген болса, онда жылжыма бөлікті қайтару және бір жолға түсу таңбалары пайдаланылады.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Барлық өрнектер шын болса, шын мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі барлық өрнектер шын болса, шын мәнін қайтарады.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, true, 2 > 0} тізіміндегі барлық өрнектердің шын болуын анықтайды.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "{true, true, 2 < 0} тізіміндегі барлық өрнектердің шын болуын анықтайды.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Кез келген өрнек шын болса, шын мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі кез келген өрнек шын болса, шын мәнін қайтарады.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "{true, false, 2 > 0} тізіміндегі өрнектердің кез келгені шын екенін анықтау.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "{2 = 0, false, 2 < 0} тізіміндегі өрнектердің кез келгені шын екенін анықтау.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Мәндердің орташа мәнін қайтарады. Сан, күн, күн/уақыт, күн/уақыт белдеуі және ұзақтық мәндерімен жұмыс істейді.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі элементтер үшін орташа мәнді қайтарады. Нәтиже тізімдегі мәндермен бірдей деректер түрімен беріледі. Тек сан, күн, уақыт, күн/уақыт белдеуі және ұзақтық мәндерімен жұмыс істейді.\r\n    Тізім бос болса, нөл мәні қайтарылады.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{3, 4, 6}</code> сандар тізімінің орташа мәнін анықтау.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "1 қаңтар 2011 ж., 2 қаңтар 2011 ж. және 3 қаңтар 2011 ж. күн мәндерінің орташа мәнін анықтау.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Тізімді буферге сақтайды.",
        "Documentation.LongDescription": "<code>list</code> тізімін жадқа буферге сақтайды. Бұл шақырудың нәтижесі — тұрақты тізім.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1..10} тізімінің тұрақты көшірмесін жасау.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Бірнеше тізімді біріктіру арқылы бір тізімді қайтарады.",
        "Documentation.LongDescription": "<code>lists</code> тізімдер тізімін алып, оларды бір жаңа тізімге біріктіреді.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} және {3, 4} екі қарапайым тізімін біріктіру.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "{1, 2} және {3, {4, 5}} екі тізімін біріктіру, біреуі енгізілген тізімді қамтиды.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Тізімдегі элементтер санын қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі элементтер санын қайтарады.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізіміндегі мәндер санын анықтау.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Көшірмелері жойылған мәндер тізімін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі көшірмелері жойылған барлық мәндерді қамтитын тізімді қайтарады. Тізім бос болса, нәтиже бос тізім болады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 1, 2, 3, 3, 3} тізімінен көшірмелерді жою.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Тізімнің бірінші мәнін немесе бос болса, көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі бірінші элементті немесе тізім бос болса, <code>defaultValue</code> міндетті емес әдепкі мәнін қайтарады.\r\n    Егер тізім бос болса және әдепкі мән көрсетілмеген болса, функция <code>null</code> мәнін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізіміндегі бірінші мәнді анықтау.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "{} тізіміндегі бірінші мәнді анықтау. Егер тізім бос болса, -1 мәнін қайтару.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Енгізбедегі тізім мәндерінің қиылысын қайтарады.",
        "Documentation.LongDescription": "<code>lists</code> кіріс тізіміндегі тізім мәндерінің қиылысын қайтарады. <code>equationCriteria</code> міндетті емес параметрін көрсетуге болады.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1..5}, {2..6}, {3..7} тізімдерінің қиылысын анықтау.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Тізімде көшірмелер бар-жоғын көрсетеді.",
        "Documentation.LongDescription": "<code>list</code> тізімінде көшірмелер бар-жоғын көрсететін логикалық мәнді қайтарады; <code>true</code> — тізім ерекше болса, <code>false</code> — қайталанатын мәндер бар болса. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізімі ерекше екенін (яғни, көшірмелер жоқ) екенін анықтау.",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "{1, 2, 3, 3} тізімі ерекше (яғни, көшірмелер жоқ) екенін анықтау.",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Тізім бос болса, шын мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінде мәндер жоқ болса (ұзындығы — 0) <code>true</code> мәнін қайтарады. Тізім мәндерді қамтыса (ұзындығы > 0), <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "{} тізімінің бос екендігін анықтау.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "{1, 2} тізімінің бос екендігін анықтау.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Тізімнің соңғы мәнін немесе бос болса, көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі соңғы элементті немесе тізім бос болса, <code>defaultValue</code> міндетті емес әдепкі мәнін қайтарады.\r\n    Егер тізім бос болса және әдепкі мән көрсетілмеген болса, функция <code>null</code> мәнін қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3} тізіміндегі соңғы мәнді анықтау.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "{} тізіміндегі соңғы мәнді анықтау немесе бос болса, -1.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Тізімдегі соңғы мәнді қайтарады.  Таңдау бойынша, қанша мән қайтарылатынын көрсетуге немесе шартты нақтылауға болады.",
        "Documentation.LongDescription": "<code>list</code> тізімінің соңғы элементін қайтарады. Тізім бос болса, қиыс жағдай туралы хабар қайтарылады.\r\n Бұл функция бірнеше элементті жинауды немесе элементтерді сүзуді қолдау үшін <code>countOrCondition</code> міндетті емес параметрін қабылдайды. <code>countOrCondition</code> үш жолмен көрсетуге болады:\r\n <ul>\r\n  <li>Егер сан көрсетілген болса, соған дейінгі элемент қайтарылады. </li>\r\n  <li>Егер шарт көрсетілген болса, басында шартқа сай болған барлық элементтер тізімнің соңынан бастап қайтарылады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n  <li>Егер бұл параметрдің мәні нөл болса, тізімдегі соңғы элемент қайтарылады.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} тізіміндегі соңғы мәнді анықтау.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "{3, 4, 5, -1, 7, 8, 2} тізіміндегі 0-ден үлкенірек соңғы мәндерді анықтау.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Ең үлкен мәнді немесе бос тізім үшін әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі ең үлкен элементті немесе тізім бос болса, <code>default</code> міндетті емес әдепкі мәнін қайтарады.\r\n    Тізімдегі элементтерді салыстыру әдісін анықтау үшін <code>comparisonCriteria</code> comparisonCriteria міндетті емес мәнін көрсетуге болады. Егер бұл параметрдің мәні нөл болса, әдепкі салыстыру құралы пайдаланылады.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} тізіміндегі ең үлкен мәнді анықтау.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "{} тізіміндегі ең үлкен мәнді анықтау немесе ол бос болса, -1 мәнін қайтару. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Тізімдегі медиана мәнін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінің медиана элементін қайтарады. Бұл функция тізімде <code>null</code> емес мәндер болмаса, <code>null</code> қайтарады.\r\n    Егер элементтердің саны жұп болса, тізім\r\n    толығымен күн мен уақыттан, ұзақтықтардан, сандардан немесе уақыттардан құралған жағдайдан басқа кезде (екі элементтің орташа мәнін қайтарады), функция екі медиана элементінің кішірегін таңдайды.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "<code>{5, 3, 1, 7, 9}</code> тізімінің медиана мәнін анықтау.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Ең аз мәнді немесе бос тізім үшін әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі ең кіші элементті немесе тізім бос болса, <code>default</code> міндетті емес әдепкі мәнін қайтарады.\r\n    Тізімдегі элементтерді салыстыру әдісін анықтау үшін <code>comparisonCriteria</code> comparisonCriteria міндетті емес мәнін көрсетуге болады. Егер бұл параметрдің мәні нөл болса, әдепкі салыстыру құралы пайдаланылады.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{1, 4, 7, 3, -2, 5} тізіміндегі ең кіші мәнді анықтау.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "{} тізіміндегі ең кіші мәнді анықтау немесе ол бос болса, -1 мәнін қайтару. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Тізімдегі ең жиі кездесетін мәнді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінде ең жиі кездесетін элементті қайтарады. Тізім бос болса, ерекшелік пайда болады. Ең көп жиілігі бірдей бірнеше элемент көрінсе, соңғысы таңдалады.\r\n    Теңдікті тексеруді бақылау үшін <code>comparisonCriteria</code> міндетті емес мәнін (<code>equationCriteria</code>) көрсетуге болады. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5}</code> тізімінде ең жиі кездесетін элементті анықтау.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> тізімінде ең жиі кездесетін элементті анықтау.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Тізімдегі ең жиі кездесетін мәндердің тізімін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінде ең жиі кездесетін элементті қайтарады. Тізім бос болса, ерекшелік пайда болады. Ең көп жиілігі бірдей бірнеше элемент көрінсе, соңғысы таңдалады.\r\n    Теңдікті тексеруді бақылау үшін <code>comparisonCriteria</code> міндетті емес мәнін (<code>equationCriteria</code>) көрсетуге болады. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "<code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> тізімінде ең жиі кездесетін элементтерді анықтау.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Тізімдегі мәні нөл емес элементтер санын қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі мәні нөл емес элементтер санын қайтарады.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Енгізбе үшін ауытқулардың тізімін қайтарады.",
        "Documentation.LongDescription": "<code>list</code> кіріс тізімі үшін ауытқулар тізімін қайтарады.\r\n    Тізімді өзгерту үшін List.Transform функциясын қайтарғанда, орындардың тізімін пайдаланып орынға түрлендіру қатынасын беруге болады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, null, 5} тізіміндегі мәндердің ауытқуларын анықтау.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Тізімдегі сандардың көбейтіндісін қайтарады.",
        "Documentation.LongDescription": "<code>numbersList</code> тізіміндегі мәні нөл емес сандардың көбейтіндісін қайтарады. Тізімде мәні нөл емес мәндер жоқ болса, нөл мәнін қайтарады.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3, 3, 4, 5, 5}</code> тізіміндегі сандардың көбейтіндісін анықтау.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Кездейсоқ сандардың тізімін қайтарады.",
        "Documentation.LongDescription": "0 мен 1 арасындағы кездейсоқ сандар тізімін, жасалатын мәндердің берілген санын және қосымша бастапқы мәнді, қайтарады.\r\n<ul>\r\n   <li><code>count</code>: жасалатын кездейсоқ мәндердің саны.</li>\r\n   <li><code>seed</code>:  <i>[Міндетті емес]</i> Кездейсоқ сандар генераторында бастапқы ретінде пайдаланылатын сандық мән.  Егер өткізіп жіберілсе, функцияны шақырған сайын бірегей кездейсоқ сандар тізімі жасалады.  Егер сан көмегімен бастапқы мәнді көрсетсеңіз, функцияны әр шақыру кездейсоқ сандардың бірдей тізімін жасайды.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "3 кездейсоқ санның тізімін жасау.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Бастапқы мәнді көрсетіп, 3 кездейсоқ санның тізімін жасау.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Тізімнің басында көрсетілген элементтер санын өткізіп жіберетін тізімді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінің бірінші элементін жоятын тізімді қайтарады. Егер <code>list</code> бос тізім болса, бос тізім қайтарылады.\r\nБұл функция төменде тізілгендей бірнеше мәнді жою үшін <code>countOrCondition</code> міндетті емес параметрін қабылдайды. \r\n <ul>\r\n <li>Егер сан көрсетілген болса, сонша элементке дейін жойылады. </li>\r\n <li>Егер шарт көрсетілген болса, қайтарылған тізім <code>list</code> ішіндегі шарттарға сай бірінші элементтен басталады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n <li>Егер бұл параметр нөл болса, әдепкі тәртібі сақталады. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімінен бірінші 3 сан жоқ тізімді жасау.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} тізімінен 3-тен кішірек саннан басталатын тізімді жасау.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Тізімнің соңынан көрсетілген элементтер санын жоятын тізімді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімнің соңынан соңғы <code>countOrCondition</code> элементті жоятын тізімді қайтарады. Егер <code>list</code> ішінде <code>countOrCondition</code> кем элемент болса, бос тізім қайтарылады.\r\n <ul>\r\n <li>Егер сан көрсетілген болса, сонша элементке дейін жойылады. </li>\r\n <li>Егер шарт көрсетілген болса, қайтарылған тізім <code>list</code> ішіндегі шарттарға сай төменгі жақтағы бірінші элементпен аяқталады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n <li>Егер бұл параметрдің мәні null болса, тек бір элемент жойылады. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімінен бірінші соңғы 3 саны жоқ тізім жасау.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "{5, 4, 2, 6, 4} тізімінен 3-тен кіші саннан аяқталатын тізім жасау.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Көрсетілген тізімнен барлық \"null\" мәндерін жояды.",
        "Documentation.LongDescription": "<code>list</code> ішіндегі \"null\" мәндерінің барлық даналарын жояды. Егер тізімде \"null\" мәндері болмаса, бастапқы тізім қайтарылады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, null, 4, 5, null, 6} тізімінен \"null\" мәндерін жою.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Тізімдегі мәндердің ретін кері етеді.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі мәндер бар тізімді кері ретпен қайтарады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1..10} тізімінен кері реттегі тізімді жасау.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Ұзындығы бірге тең тізім үшін бір тізім элементін қайтарады, әйтпесе қиыс жағдай туралы хабарды қайтарады.",
        "Documentation.LongDescription": "Егер <code>list</code> тізімінде тек бір элемент болса, сол элементті қайтарады.\r\n    Егер бірнеше элемент бар болса немесе тізім бос болса, функция ерекшелік туралы хабарды қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} тізімінде бір мәнді анықтау.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "{1, 2, 3} тізімінде бір мәнді анықтау.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Ұзындығы бірге тең тізім үшін бір тізім элементін және бос тізім үшін әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "Егер <code>list</code> тізімінде тек бір элемент болса, сол элементті қайтарады.\r\n    Егер тізім бос болса, міндетті емес <code>default</code> көрсетілмесе, функция нөл мәнін қайтарады. Егер тізімде бірнеше элемент бар болса, функция қатені қайтарады.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1} тізімінде бір мәнді анықтау.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "{} тізімінде бір мәнді анықтау.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "{} тізімінде бір мәнді анықтау. Егер бос болса, -1 мәнін қайтару.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Тізімнің басында көрсетілген элементтер санын өткізіп жіберетін тізімді қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізімінің бірінші элементін өткізіп жіберетін тізімді қайтарады. Егер <code>list</code> бос тізім болса, бос тізім қайтарылады.\r\nБұл функция төменде тізілгендей бірнеше мәнді өткізіп жіберу үшін <code>countOrCondition</code> міндетті емес параметрін қабылдайды. \r\n <ul>\r\n <li>Егер сан көрсетілген болса, соншаға дейін элементтер өткізіп жіберіледі. </li>\r\n <li>Егер шарт көрсетілген болса, қайтарылған тізім <code>list</code> ішіндегі шарттарға сай бірінші элементтен басталады. Бір элемент шартқа сай болмаса, басқа ешбір элементтер қарастырылмайды. </li>\r\n <li>Егер бұл параметр нөл болса, әдепкі тәртібі сақталады. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "{1, 2, 3, 4, 5} тізімінен бірінші 3 сан жоқ тізімді жасау.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "{5, 4, 2, 6, 1} тізімінен 3-тен кішірек саннан басталатын тізімді жасау.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Деректер тізімін көрсетілген шарттарға сай сұрыптайды.",
        "Documentation.LongDescription": "Көрсетілген қосымша критерийге байланысты, <code>list</code>, деректер тізімін сұрыптайды.\r\n    <code>comparisonCriteria</code> қосымша параметрін салыстыру критерийі ретінде көрсетуге болады. Бұл келесі мәндерге ие бола алады:\r\n    <ul>\r\n    <li> Реттілікті басқару үшін, салыстыру критерийі “Реттілік” тізім мәні болуы мүмкін. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> Сұрыптау үшін пайдаланылатын кілтті есептеу үшін, 1 аргумент функциясын пайдалануға болады. </li>\r\n    <li> Кілтті таңдау мен реттілікті басқарудың екеуі үшін де салыстыру критерийі кілт пен реттілікті қамтитын тізім болуы мүмкін (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Салыстыруды толығымен басқару үшін 2 аргумент функциясын пайдалануға болады. Бұл функцияға тізімнен екі элемент жіберіледі (кез келген екі элемент, кез келген реттілікте). Функция келесі мәндердің біреуін қайтаруы тиіс:\r\n        <ul>\r\n            <li> <code>-1</code>: Бірінші элемент екінші элементтен кем.</li>\r\n            <li> <code>0</code>: Элементтер тең.</li>\r\n            <li> <code>1</code>: Бірінші элемент екінші элементтен артық.</li>\r\n        </ul>\r\n        Value.Compare осы логикаға өкілеттілік беру үшін пайдалануға болатын әдіс болып табылады. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "{2, 3, 1} тізімін сұрыптау.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "{2, 3, 1} тізімін кему ретімен сұрыптау.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Value.Compare әдісін пайдаланып {2, 3, 1} тізімін кему ретімен сұрыптау.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Стандартты ауытқудың үлгіге негізделіп есептелген мәнін қайтарады.",
        "Documentation.LongDescription": "<code>numbersList</code> тізіміндегі мәндердің стандартты ауытқуының үлгіге негізделген мәнін қайтарады.\r\n    Егер <code>numbersList</code> сандар тізімі болса, сан қайтарылады.\r\n    Бос тізім болса немесе <code>number</code> түрінде емес элементтер тізімі болса, ерекшелік беріледі.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "1 мен 5 арасындағы сандардың стандартты ауытқуын анықтау.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Тізімдегі элементтердің қосындысын қайтарады.",
        "Documentation.LongDescription": "<code>list</code> тізіміндегі null емес мәндердің қосындысын қайтарады.  Тізімде мәні нөл емес мәндер жоқ болса, нөл мәнін қайтарады.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "<code>{1, 2, 3}</code> тізіміндегі сандардың қосындысын анықтау.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Енгізбедегі тізім мәндерін біріктіру нәтижесін қайтарады.",
        "Documentation.LongDescription": "<code>lists</code> тізімдердің тізімін қабылдайды, жеке тізімдердегі элементтерді біріктіреді және оларды шығыс тізімде қайтарады. Нәтижесінде қайтарылған тізім кез келген кіріс тізімдердегі барлық элементтерді қамтиды.\r\n    Бұл әрекет дәстүрлі көшірмелі семантиканы сақтайды, осылайша қайталанатын мәндер UNION бөлігі ретінде сәйкестендіріледі.\r\n    Теңдікті тексеруді бақылау үшін <code>equationCriteria</code> міндетті емес теңдеу шарттарының мәнін көрсетуге болады. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "{1..5}, {2..6}, {3..7} тізімін біріктіруді жасау.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Бірнеше тізімде бірдей орындағы элементтерді біріктіре отырып тізімдердің тізімін қайтарады.",
        "Documentation.LongDescription": "<code>lists</code> тізімдердің тізімін алады және бірдей орындағы элементтерді біріктіре отырып тізімдердің тізімін қайтарады.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "{1, 2} және {3, 4} екі қарапайым тізімді қысады.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "{1, 2} және {3} әр түрлі ұзындықтағы екі қарапайым тізімді қысады.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Көрсетілген мәннен логикалық мәнді жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> ішінен <code>logical</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Logical.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>logical</code> болса, <code>value</code> қайтарылады. Келесі түрлердің мәндерін <code>logical</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік мәннен алынған <code>logical</code> мәні, <code>\"true\"</code> немесе <code>\"false\"</code>. Қосымша мәліметтерді <code>Logical.FromText</code> бөлімінен қараңыз.</li>\r\n        <li><code>number</code>: <code>value</code> <code>0</code> тең болса, <code>false</code>, олай болмаса, <code>true</code>.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>2</code> мәнін <code>logical</code> мәніне түрлендіру.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "\"true\" және \"false\" мәтіндік мәндерінен логикалық мәнді жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінен \"true\" жәннемесе \"false\" логикалық мәнін жасайды. Егер <code>text</code> жолды қамтыса, қиыс жағдай туралы хабар қайтарылады. <code>text</code> мәтіндік мәні регистрді ескермейді.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "\"true\" мәтін жолынан логикалық мәнді жасау.",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "\"a\" мәтін жолынан логикалық мәнді жасау.",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Логикалық мән көрсетілген болса, \"true\" немесе \"false\" мәтінін қайтарады.",
        "Documentation.LongDescription": "<code>logicalValue</code> логикалық мәнінен <code>true</code> немесе <code>false</code> мәтіндік мәнін жасайды. Егер <code>logicalValue</code> логикалық мән болмаса, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "<code>true</code> логикалық мәнінен мәтіндік мәнді жасау.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Санның абсолютті мәнін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> абсолюттік мәнін қайтарады. Егер <code>number</code> null болса, <code>Number.Abs</code> null мәнін қайтарады.\r\n    <ul>\r\n        <li><code>number</code>: абсолюттік мән есептелетін <code>number</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3 санының абсолютті мәні.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Санның арккосинусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> арккосинусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Санның арксинусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> арксинусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Санның арктангенсін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> арктангенсін қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Әр бит енгізбенің қарама-қарсы мәні болып табылатын байтты қайтарады.",
        "Documentation.LongDescription": "<code>number</code> мәнінде биттік \"Not\" әрекетін орындаудың нәтижесін қайтарады.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Санның косинусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> косинусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "0 бұрышының косинусын анықтау.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Санның гиперболалық косинусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> гиперболалық косинусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "e мәнін көрсетілген дәрежеге шығарады.",
        "Documentation.LongDescription": "e санын <code>number</code> дәрежесіне шығарудың нәтижесін қайтарады (экспоненциалдық функция).\r\n      <ul>\r\n        <li><code>number</code>: экспоненциалдық функция есептелетін <code>number</code>. Егер <code>number</code> null болса, <code>Number.Exp</code> null мәнін қайтарады. </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "e мәнін 3 дәрежесіне шығару.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Санның факториалын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> санының факториалын қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "10 факториалын анықтау.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Осы мәннен санды жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>number</code> мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").\r\nЕгер берілген <code>value</code> <code>null</code> болса, <code>Number.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> <code>number</code> болса, <code>value</code> қайтарылады. Келесі түрлерегі мәндерді <code>number</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністен алынған <code>number</code> мәні. Жалпы мәтіндік пішімдер өңделеді (\"15\", \"3423,10\", \"5.0E-10\"). Мәліметтерді алу үшін <code>Number.FromText</code> қараңыз.</li>\r\n        <li><code>logical</code>: 1 <code>true</code> үшін, 0 <code>false</code> үшін.</li>\r\n        <li><code>datetime</code>: OLE автоматтандыру күнінің баламасын қамтитын қос дәлдігі бар қалқымалы нүктесі бар сан.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> жергілікті күні мен уақытының OLE автоматтандыру күнінің баламасын қамтитын қос дәлдігі бар жылжымалы үтірі бар сан.</li>\r\n        <li><code>date</code>: OLE автоматтандыру күнінің баламасын қамтитын қос дәлдігі бар жылжымалы үтірі бар сан.</li>\r\n        <li><code>time</code>:  бөлшек күндер түрінде көрсетіледі.</li>\r\n        <li><code>duration</code>: бүтін және бөлшек күндер түрінде көрсетіледі.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> мәнінің <code>number</code> мәнін алу.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>#datetime(2020, 3, 20, 6, 0, 0)</code> мәнінің <code>number</code> мәнін алу.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "<code>\"12,3%\"</code> үшін <code>сандық</code> мәнді алыңыз.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "(\"15\", \"3,423.10\", \"5.0E-10\") жалпы мәтіндік пішімдерінен сандарды жасайды.",
        "Documentation.LongDescription": "Берілген <code>text</code> мәтіндік мәнінен <code>number</code> мәнін қайтарады.\r\n <ul>\r\n  <li><code>text</code>: сандық мәннің мәтіндік көрінісі. Көрініс сандық пішімде болуы керек, мысалы, \"15\", \"3423,10\", \"5,0E-10\".</li>\r\n  <li><code>culture</code>: <code>text</code> қалай түсіндірілетінін басқаратын қосымша мәдениет (мысалы, \"en-US\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"4\"</code> сандық мәнін алу.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "<code>\"5.0e-10\"</code> сандық мәнін алу.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Мәннің жұп екендігін көрсетеді.",
        "Documentation.LongDescription": "<code>number</code> мәнінің жұп екендігін көрсетеді: ол жұп болса, <code>true</code>, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625 санының жұп сан екенін тексеру.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "82 санының жұп сан екенін тексеру.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Мәннің сан еместігін көрсетеді.",
        "Documentation.LongDescription": "Мәннің сан еместігін көрсетеді. Егер <code>number</code> <code>Number.IsNaN</code> тең болса <code>true</code>, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "0 санына бөлінген 0 мәнінің сан еместігін тексеру.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "0 санына бөлінген 1 мәнінің сан еместігін тексеру.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Мәннің тақ екендігін көрсетеді.",
        "Documentation.LongDescription": "Мәннің тақ екендігін көрсетеді. Егер <code>number</code> тақ сан болса, <code>true</code>, олай болмаса <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "625 санының тақ сан екенін тексеру.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "82 санының тақ сан екенін тексеру.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Санның натурал логарифмін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> санының натурал логарифмін қайтарады. Егер <code>number</code> мәні \"null\" болса, <code>Number.Ln</code> \"null\" мәнін қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "15 санының натурал логарифмін алу.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Көрсетілген негіз (әдепкі бойынша, \"e\") бойынша сан логарифмін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>base</code> негізі үшін <code>number</code> санының логарифмін қайтарады. Егер <code>base</code> көрсетілмесе, әдепкі мәні Number.E болады.\r\n    Егер <code>number</code> null болса, <code>Number.Log</code> null мәнін қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2 санының ондық логарифмін алу.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "2 санының натурал логарифмін алу.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Санның ондық логарифмін қайтарады.",
        "Documentation.LongDescription": "Санның ондық логарифмін қайтарады, <code>number</code>. Егер <code>number</code> нөл болса, <code>Number.Log10</code> нөл мәнін қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "2 санының ондық логарифмін алу.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Дөңгелектелген санды қайтарады. Цифрлар санын және дөңгелектеу режимін көрсетуге болады.",
        "Documentation.LongDescription": "Дөңгелектеу нәтижесі <code>number</code> жақын санға қайтарады. Егер <code>number</code> бос болса, <code>Number.Round</code> бос мәнін қайтарады.<br>\r\n      <br>\r\n      Әдепкі бойынша, <code>number</code> ең жақын бүтін санға дөңгелектенеді, ал байланыстар жақын санға дөңгелектенеді (<code>RoundingMode.ToEven</code> қолданылады, «банкирдің дөңгелектеуі» деп аталады).<br>\r\n      <br>\r\n      Бірақ, бұл әдепкі параметрлерді келесі қосымша параметрлер бойынша ауыстыруға болады.\r\n      <ul>\r\n        <li><code>digits</code>: <code>number</code> белгіленген ондық сандарға дейін дөңгелектенеді.</li>\r\n        <li><code>roundingMode</code>: <code>number</code>екі ықтимал дөңгелектелген мәндерін-\r\n       арасындағы орташа нүктеге арналған мінез-құлықты болдырмайды ( мүмкін мәндерді үшін <code>RoundingMode.Type</code> көріңіз).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 санын ең жақын бүтін санға дейін дөңгелектеу.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "1,56 санын ең жақын бүтін санға дейін дөңгелектеу.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "1,2345 санын екі ондық таңбаға дейін дөңгелектеу.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "1,2345 санын үш ондық таңбаға дейін дөңгелектеу (жоғары қарай дөңгелектеу).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "1,2345 санын үш ондық таңбаға дейін дөңгелектеу (төмен қарай дөңгелектеу).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Оң сандарды жоғары қарай және теріс сандарды төмен қарай дөңгелектеудің нәтижесін қайтарады. Сандардың нөмірі көрсетіледі.",
        "Documentation.LongDescription": "Санның таңбасы бойынша <code>number</code> дөңгелектеудің нәтижесін қайтарады. Бұл функция оң сандарды жоғары қарай және теріс сандарды төмен қарай дөңгелектейді.\r\n    Егер <code>digits</code> көрсетілсе, <code>number</code> саны ондық санның <code>digits</code> санына дөңгелектеледі.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "-1,2 санын нөлден жоғары қарай дөңгелектеу.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "1,2 санын нөлден жоғары қарай дөңгелектеу.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Екі ондық орынға дөңгелектелген сан -1234 нөлден алшақ.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Алдыңғы ең үлкен бүтін санды қайтарады. Сандардың нөмірі көрсетіледі.",
        "Documentation.LongDescription": "<code>number</code> алдыңғы ең үлкен бүтін санға дейін дөңгелектенген нәтижесін қайтарады. Егер <code>number</code> мәні Null болса, бұл функция Null мәнін қайтарады.\r\n\r\n    Егер <code>digits</code> көрсетілсе, <code>number</code> ондық сандардың көрсетілген санына дейін дөңгелектеледі.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 санын бүтін санға дейін төмен қарай дөңгелектеу.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "1,999 санын бүтін санға дейін төмен қарай дөңгелектеу.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "1999 екі ондық орынға төмен қарай дөңгелектелді.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Оң сандарды төмен қарай және теріс сандарды жоғары қарай дөңгелектеудің нәтижесін қайтарады. Сандардың нөмірі көрсетіледі.",
        "Documentation.LongDescription": "Санның таңбасы бойынша <code>number</code> дөңгелектеудің нәтижесін қайтарады. Бұл функция оң сандарды төмен қарай және теріс сандарды жоғары қарай дөңгелектейді.\r\n    Егер <code>digits</code> көрсетілсе, <code>number</code> ондық сандардың <code>digits</code> санына дөңгелектеледі.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "-1,2 санын нөлге қарай дөңгелектеу.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "1,2 санын нөлге қарай дөңгелектеу.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "1234 санын нөлге қарай екі ондық орынға дөңгелектеу.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Келесі ең үлкен бүтін санды қайтарады. Сандардың нөмірі көрсетілген.",
        "Documentation.LongDescription": "<code>number</code> келесі ең үлкен бүтін санға дейін дөңгелектенген нәтижесін қайтарады. Егер <code>number</code> мәні Null болса, бұл функция Null мәнін қайтарады.\r\n    Егер <code>digits</code> көрсетілсе, <code>number</code> ондық сандардың көрсетілген санына дейін дөңгелектеледі.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "1,234 санын бүтін санға дейін жоғары қарай дөңгелектеу.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "1,999 санын бүтін санға дейін жоғары қарай дөңгелектеу.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "1234 санын екі ондық орынға қарай жоғары дөңгелектеу",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Сан оң болса, 1 санын, теріс болса -1 санын және нөлге тең болса, 0 санын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> оң сан болса, 1 санын, теріс болса -1 санын және нөлге тең болса, 0 санын қайтарады.\r\n    Егер <code>number</code> мәні null болса, <code>Number.Sign</code> null мәнін қайтарады.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "182 санының таңбасын анықтау.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "-182 санының таңбасын анықтау.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "0 санының таңбасын анықтау.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Санның синусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> синусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "0 бұрышының синусын анықтау.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Санның гиперболалық синусын қайтарады.",
        "Documentation.LongDescription": "<code>number</code> гиперболалық синусын қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Санның квадрат түбірін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> санының квадрат түбірін қайтарады.\r\n    Егер <code>number</code> мәні null болса, <code>Number.Sqrt</code> null мәнін қайтарады. Егер ол теріс мән болса, <code>Number.NaN</code> қайтарылады (сан емес).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "625 санының квадрат түбірін анықтау.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "85 санының квадрат түбірін анықтау.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Санның тангенсін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> тангенсін қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "1 бұрышының тангенсін анықтау.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Санның гиперболалық тангенсін қайтарады.",
        "Documentation.LongDescription": "<code>number</code> гиперболалық тангенсін қайтарады.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Берілген санды мәтінге түрлендіріңіз.",
        "Documentation.LongDescription": "<code>format</code> арқылы көрсетілген пішімге сәйкес <code>number</code> сандық мәнін мәтіндік мәнге түрлендіреді.<br>\r\n    <br>\r\n    Пішім – санның қалай түрлендірілуі керектігін көрсететін мәтіндік мән. Қолдауға ие мәндер туралы толығырақ мәлімет үшін https://go.microsoft.com/fwlink/?linkid=2241210 және https://go.microsoft.com/fwlink/?linkid=2240884 бетіне өтіңіз.<br>\r\n    <br>\r\n    <code>format</code> мәдениетке тәуелді әрекетін басқару үшін қосымша <code>culture</code> (мысалы, \"en-US\") берілуі мүмкін.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Пішімді көрсетпей санды мәтінге түрлендіріңіз.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Санды экспоненциалды пішімге түрлендіріңіз.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Санды тек бір ондық белгімен пайыздық пішімге түрлендіріңіз.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "OData қызметі ұсынатын OData арналарының кестесін қайтарады.",
        "Documentation.LongDescription": "<code>serviceUri</code> URI, <code>headers</code> тақырыптары арқылы OData қызметі ұсынған OData веб-арналарының кестесін қайтарады. Бір уақыттағы қосылымдарды немесе қосымша <code>options</code> жазба параметрін пайдалануды немесе пайдаланбауды көрсететін логикалық мәнді, келесі параметрлерді басқару үшін көрсетуге болады:\r\n    <ul>\r\n    <li><code>Query</code>: сұрау параметрлерін escape таңбаларынсыз URL мекенжайына бағдарламалық түрде қосу</li>\r\n    <li> <code>Headers</code> : бұл мәнді жазба ретінде көрсету HTTP сұрауына қосымша тақырыптар береді.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: бұл мәнді тізім ретінде көрсету деректерді кэштеу үшін осы HTTP тақырып кілттерін есептеудің бөлігі болудан шығарады.</li>\r\n    <li> <code>ApiKeyName</code> : мақсатты сайтта API кілтінің түсінігі болса, бұл параметр URL мекенжайында қолданылуы тиіс кілт параметрінің атауын (мәнін емес) көрсетуге қолданылады. Нақты кілт мәні тіркелгі деректерінде беріледі.</li>\r\n    <li> <code>Timeout</code> : бұл мәнді ұзақтық ретінде көрсету HTTP сұрауының күту уақытын өзгертеді. Әдепкі мәні — 600 секунд болады.</li>\r\n    <li> <code>EnableBatch</code> : MaxUriLength асқан болса (әдепкі мәні false), OData $batch сұрауының жасалуына рұқсат беру-бермеу керектігін орнататын логикалық мән (true немесе false).</li>\r\n    <li> <code>MaxUriLength</code> : OData қызметіне жіберілетін рұқсат етілген uri мәнінің максималды ұзындығын көрсететін сан. Асып кетсе және EnableBatch true болса, сұрау OData $batch соңғы нүктесіне жасалады, әйтпесе қате болады (әдепкі мәні: 2048).</li>\r\n    <li> <code>Concurrent</code> : логикалық мән (true немесе false), true мәніне қойылғанда қызметке сұраулар бір уақытта жасалады. False мәніне қойылғанда, сұраулар бірінен соң бірі жасалады. Көрсетілмеген кезде, мән қызметтің AsynchronousRequestsSupported аннотациясы арқылы анықталады. Егер қызмет AsynchronousRequestsSupported үшін қолдау көрсетілгенін көрсетпесе, сұраулар бірінен соң бірі жасалады.</li>\r\n    <li> <code>ODataVersion</code> : OData қызметіне қолданылатын OData протоколының нұсқасын көрсететін сан (4 немесе 2.0). Көрсетілмесе, барлық қолдау көрсетілетін нұсқалар сұралады. Қызметтің нұсқасы қызмет арқылы қайтарылған OData-Version тақырыбы арқылы анықталады.</li>\r\n    <li> <code>FunctionOverloads</code> : логикалық мән (true немесе false), true мәніне қойылғанда, функцияны импорттаудың артық жүктемелері навигаторда бөлек жазбалар ретінде тізімделеді, false мәніне қойылғанда функцияны импорттаудың артық жүктемелері навигаторда біріктірілген бір функция ретінде тізімделеді. 3-нұсқа үшін әдепкі мән: false. 4-нұсқа үшін әдепкі мән: true.</li>\r\n    <li> <code>MoreColumns</code> : логикалық мән (true немесе false), true мәніне орнатылғанда, \"More Columns\" бағанын қосады: әр нысан арнасына, құрамында ашық түрлер және полиморфтық түрлер бар. Мұнда негізгі түрде көрсетілмеген өрістер болады. False болса, бұл өріс болмайды. Әдепкіде false болады.</li>\r\n    <li> <code>IncludeAnnotations</code> : \"*\". қойылмалы таңбасы қосылатын, бөлгіш үтірлері бар аттар кеңістіктерімен терминдер немесе үлгілер атауларының тізімі. Әдепкіде ешқандай аннотациялар қосылмайды.</li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : \"*\" қойылмалы таңбасы қосылатын, бөлгіш үтірлері бар аттар кеңістіктерімен терминдер немесе үлгілер атауларының тізімі, метадеректер құжаттары сұрауларына қосу үшін. Әдепкіде IncludeAnnotations сияқты аннотацияларды қосады.</li>\r\n    <li> <code>OmitValues</code> : OData қызметіне жауаптарда нақты мәндерді жазуды болдырмауға мүмкіндік береді. Расталса, сол мәндерді қалдырып кетілген өрістерден аламыз. Параметрлер мыналарды қамтиды:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : OData қызметіне null мәндерін қалдырып кетуге мүмкіндік береді.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code> : Пайдалану үшін OData қосқышын орындауды көрсетеді. Жарамды мәндер: \"2.0\" немесе бос мән.</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "TripPin OData қызметіне қосылады.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "ODBC драйвері үшін SQL мүмкіндіктерін алу әрекетінің нәтижесін қайтарады.",
        "Documentation.LongDescription": "ODBC арқылы <code>connectionString</code> қосылым жолы бар SQL мүмкіндіктерін алу әрекетінің нәтижесін қайтарады. <code>connectionString</code> сипат мәні жұптарының мәтіні немесе жазбасы болу мүмкін. Сипат мәндері мәтін немесе сан болуы мүмкін.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Байланыс жолы үшін берілген SQL мүмкіндіктерін қайтару.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Parquet құжатының контентін кесте ретінде қайтарады.",
        "Documentation.LongDescription": "Parquet құжатының мазмұнын кесте түрінде қайтарады. Опциялар мыналарды қамтиды:\n    <ul>\n    <li> <code>TypeMapping</code> : файлдарды оқу және жазу кезінде әдепкі түрді салыстыруды басқаратын мәтіндік мән. Әдепкі мән null мәні болады және бастапқы түрмен мүмкіндігінше көп сәйкестікті сақтауға әрекеттенеді. «Sql» мәні Sql Server жүйесімен ең үйлесімді нәтижелерді береді.</li>\n    </ul>",
        "Documentation.Category": "Деректерге қол жеткізу",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Деректерге қатынасу",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Берілген мәннің пайыздық мәнін қайтарады.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>percentage</code> мәнін қайтарады. Егер берілген <code>value</code> болса, <code>null</code>, <code>Percentage.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> соңында пайыз таңбасы бар<code>text</code> болса, түрлендірілген ондық сан қайтарылады. Әйтпесе, бұл мән <code>Number.From</code> көмегімен <code>number</code> мәніне түрлендіріледі.  Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"12,3%\"</code> үшін <code>пайыздық</code> мәнді алыңыз.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "RData файлынан деректер бөліктерінің жазбасын қайтарады.",
        "Documentation.LongDescription": "RData файлынан деректер бөліктерінің жазбасын қайтарады.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Осы тізімдегі жазбаларды біріктіреді.",
        "Documentation.LongDescription": "Осы <code>records</code> ішіндегі жазбаларды біріктіреді. Егер <code>records</code> жазба емес мәндерді қамтыса, қате қайтарылады.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Жазбалардан біріктірілген жазба жасау.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Жазбадағы өрістер санын қайтарады.",
        "Documentation.LongDescription": "<code>record</code> жазбасындағы өрістер санын қайтарады.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы өрістер санын анықтау.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Өрістердің атауларын қайтарады.",
        "Documentation.LongDescription": "<code>record</code> жазбасындағы өрістердің атауларын мәтін түрінде қайтарады.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы өрістердің атауларын анықтау.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Өріс мәндерінің тізімін қайтарады.",
        "Documentation.LongDescription": "<code>record</code> жазбасындағы өріс мәндерінің тізімін қайтарады.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Жазбадағы өріс мәндерін анықтау.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "{[Name = name, Value = value]} түріндегі кестеден жазбаны жасайды.",
        "Documentation.LongDescription": "Өріс атауларын және мән атауларын <code>{[Name = name, Value = value]}</code> қамтитын <code>table</code> жазбалар кестесінен жазбаны қайтарады. Өріс атаулары бірегей болмаса, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}) формасының кестесінен жазба жасау.",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Кіріс жазбаның өріс мәндерін қамтитын мәндер тізімін қайтарады.",
        "Documentation.LongDescription": "Кіріс <code>record</code> ішіндегі өріс мәндерін қамтитын мәндер тізімін қайтарады.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Жазбадан өріс мәндерін шығарып алу.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Жол өрнегіндегі бағанға қатынасу мүмкіндігін беретін дерексіз синтаксистік ағашты (AST) қайтарады.",
        "Documentation.LongDescription": "Жол өрнегіндегі жолдың <code>columnName</code> бағанына қатынасу мүмкіндігін беретін дерексіз синтаксистік ағашты (AST) қайтарады.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "\"CustomerName\" бағанына кіруді көрсететін AST жасайды.",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Функцияның негізгі мәтіні үшін дерексіз синтаксистік ағашты (AST) қайтарады.",
        "Documentation.LongDescription": "<p><i>Жол өрнегіне</i> бірыңғайланған<code>function</code> негізгі мәтініне арналған абстрактілі синтаксистік ағашты (AST) қайтарады:\r\n<ul>\r\n  <li>Функция 1 аргументті лямбда өрнегі болуы керек.</li>\r\n  <li>Функция параметріне жасалатын барлық сілтемелер <code>RowExpression.Row</code> мәніне ауыстырылады.</li>\r\n  <li>Бағандарға жасалатын барлық сілтемелер <code>RowExpression.Column(<i>columnName</i>)</code> мәніне ауыстырылады.</li>\r\n  <li>AST тармағы келесі түйіндерді қамтитын етіп жеңілдетіледі:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p><code>function</code> негізгі мәтіні үшін AST ағашын жол өрнегі ретінде қайтару мүмкін болмаса, қате шығады.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "<code>Әрбір [CustomerID] = \"ALFKI\"</code> функциясының негізгі бөлігі үшін AST қайтарады",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Берілген мәннен Single мәнін жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен Single <code>number</code> мәнін қайтарады. Егер берілген <code>value</code> <code>null</code> болса, <code>Single.From</code> <code>null</code> мәнін қайтарады. Егер берілген <code>value</code> Single ауқымындағы <code>number</code> болса, <code>value</code> қайтарылады, әйтпесе қате қайтарылады. Егер <code>value</code> басқа кез келген түрде болса, ол алдымен <code>Number.FromText</code> көмегімен <code>number</code> мәніне түрлендіріледі. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "<code>\"1.5\"</code> Single <code>сан</code> мәнін алыңыз.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Деректер кестесін Smartsheet индекс соңғы нүктесінен қайтарады.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Көрсетілген соңғы нүктеде Smartsheet 2.0 REST API қоңырау шалады және кестеге қайтарылған дерек элементін ауыстырады.",
        "Documentation.Examples": [
          {
            "Description": "Smartsheet API интерфейсінен пайдаланушылар туралы ақпараты бар кестені алады",
            "Code": "Smartsheet.Content(\"пайдаланушылар\")",
            "Result": "Smartsheet API арқылы қайтарылған пайдаланушылар туралы ақпараты бар кесте"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Көрсетілген бөлгіштердің кез келгенінде мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген бөлгіштердің кез келгенінде мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірісті үтір немесе нүктелі үтір арқылы бөледі. Тырнақшаларды және тырнақшаларға алынған бөлгіштерді елемейді және кірістің басынан бастайды.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Кірісті үтір немесе нүктелі үтір арқылы бөледі. Тырнақшаларды және тырнақшаларға алынған бөлгіштерді елемейді әрі кірістің соңынан бастайды.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Көрсетілген бөлгішке сай мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген бөлгішке сай мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірісті үтір арқылы бөледі. Тырнақшаларға алынған үтірлерді елемейді.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Реттіліктегі көрсетілген әр бөлгіште мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Реттіліктегі көрсетілген әр бөлгіште мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірістің басынан бастап кірісті үтір, содан кейін нүктелі үтір арқылы бөледі.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Кірісті үтір, содан кейін нүктелі үтір арқылы бөледі, тырнақшаларға кез келген басқа таңба сияқты қарайды және кірістің соңынан бастайды.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Әр көрсетілген ұзындық бойынша мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Әр көрсетілген ұзындық бойынша мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірістің басынан бастап, кірісті алғашқы екі таңбаға, содан кейін келесі үш таңбаға бөледі.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Кірістің соңынан бастап, кірісті алғашқы үш таңбаға бөледі, содан кейін келесі екеуі болады.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Әр көрсетілген орында мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Әр көрсетілген орында мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірістің басынан бастап кірісті көрсетілген орындарда бөледі.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Кірістің соңынан бастап кірісті көрсетілген орындарда бөледі.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Көрсетілген ауытқуларға және ұзындықтарға сай мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген офсеттер мен ұзындықтарға сәйкес мәтінді мәтін тізіміне бөлетін функцияны қайтарады. Нөл ұзындығы барлық қалған енгізуді қосу керектігін көрсетеді.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірістің басынан бастап кірісті көрсетілген орын және ұзындық жұптары арқылы бөледі. Бұл мысалдағы ауқымдар қабаттасатынын ескеріңіз.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Кірісті кірістің соңынан бастап көрсетілген орын және ұзындық жұптарымен бөледі.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Енгізуді ұзындығы бекітілген пошталық индекске, кейін ұзындығы айнымалы қала атауына бөледі.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Көрсетілген ұзындықтан кейін қайта-қайта мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.LongDescription": "Көрсетілген ұзындықтан кейін қайта-қайта мәтінді мәтін тізіміне бөлетін функцияны қайтарады.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Кірістің басынан бастап кірісті үш таңбалық бөліктерге қайта-қайта бөледі.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Кірістің соңынан бастап кірісті үш таңбалық бөліктерге қайта-қайта бөледі.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Кестедегі жолдардың шамамен санын қайтарады.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі жолдардың жуықталған санын немесе деректер көзі жуық мәнді қолдамаса, қатені қайтарады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Үлкен кестеде ерекше қала және облыс тіркесімдерін болжайды, мұны бағандар үшін элементтер санының болжамы ретінде пайдалануға болады. Элементтер санының болжамдары жеткілікті маңызды, сондықтан әртүрлі деректер көздері (мысалы, SQL Server) нақ осы жуықтауды қолдайды (ол үшін HyperLogLog алгоритмін жиі пайдаланады).",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Кестедегі бағандар санын қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесіндегі бағандар санын қайтарады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі бағандар санын анықтау.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Баған атауларын тізім ретінде қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесіндегі баған атауларын мәтін тізімі ретінде қайтарады.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі бағандардың атауларын анықтау.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Бірінші жолды немесе көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>table</code> бірінші жолын немесе кесте бос болса, <code>default</code> міндетті емес әдепкі мәнін қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірінші жолын анықтау.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "<code>({})</code> кестесінің бірінші жолын анықтау немесе бос болса, [a = 0, b = 0] қайтару.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Кестенің бірінші жолының бірінші бағанын немесе көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>table</code> кестесінің бірінші жолының бірінші бағанын немесе көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Кестеде тек бірегей жолдардың (көшірмелері жоқ) болуын көрсетеді.",
        "Documentation.LongDescription": "<code>table</code> тек бірегей жолдарды (көшірмелері жоқ) қамтитынын көрсетеді. Жолдар бірегей болса, <code>true</code> мәнін, олай болмаса <code>false</code> мәнін қайтарады.\r\n    <code>comparisonCriteria</code> міндетті емес параметрі кестенің қай бағандарында көшірмелер бар-жоғы тексерілетінін көрсетеді. Егер <code>comparisonCriteria</code> көрсетілмеген болса, барлық бағандар тексеріледі.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бірегей екенін анықтау.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Кестенің бағанда бірегей екенін анықтау.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Кестеде қандай да бір жолдың бар не жоқ болуын көрсетеді.",
        "Documentation.LongDescription": "<code>table</code> кез келген жолдарды қамтитынын көрсетеді. Ешқандай жол жоқ болса (яғни, кесте бос болса), <code>true</code> мәнін, керісінше жағдайда <code>false</code> мәнін қайтарады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Кестенің бос екенін анықтау.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "<code>({})</code> кестесінің бостығын анықтау.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Көрсетілген кестенің кілттерін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген кестенің кілттерін қайтарады.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Кестеге арналған кілттер тізімін алыңыз.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Соңғы жолды немесе көрсетілген әдепкі мәнді қайтарады.",
        "Documentation.LongDescription": "<code>table</code> соңғы жолын немесе кесте бос болса, <code>default</code> міндетті емес әдепкі мәнін қайтарады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестенің соңғы жолын анықтау.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "<code>({})</code> кестесінің соңғы жолын анықтау немесе бос болса, [a = 0, b = 0] қайтару.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Кестедегі жолдар санын қайтарады.",
        "Documentation.LongDescription": "<code>table</code> ішіндегі жолдар санын қайтарады.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі жолдар санын анықтау.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Кестедегі бір жолды қайтарады.",
        "Documentation.LongDescription": "Бір жолдың <code>table</code> ішіндегі бір жолды қайтарады. Егер <code>table</code> бірнеше жолы болса, қиыс жағдай туралы хабар қайтарылады.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Кестедегі бір жолды қайтару.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Кестеден баған мәндерінің енгізілген тізімдерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>table</code> кестесінен енгізілген тізімдердің тізімін жасайды.  Әр тізім элементі баған мәндерін қамтитын ішкі тізім болып табылады.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Кестеден баған мәндерінің тізімін жасау.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Кестедегі әрбір мәндер жолына көрсетілген біріктіру функциясын қолдану арқылы кестені тізімге түрлендіреді.",
        "Documentation.LongDescription": "Кестедегі әрбір мәндер жолына көрсетілген біріктіру функциясын қолдану арқылы кестені тізімге түрлендіреді.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Әрбір жолдың мәтінін үтірмен біріктіріңіз.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Кестені жазбалар тізіміне түрлендіреді.",
        "Documentation.LongDescription": "<code>table</code> кестесін жазбалар тізіміне түрлендіреді.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Кестені жазбалар тізіміне түрлендіру.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Кестеден жол мәндерінің енгізілген тізімдерінің тізімін жасайды.",
        "Documentation.LongDescription": "<code>table</code> кестесінен енгізілген тізімдердің тізімін жасайды.  Әр тізім элементі жол мәндерін қамтитын ішкі тізім болып табылады.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Кестеден жол мәндерінің тізімін жасау.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Көріністе (Table.View арқылы) анықталған өңдеушіні шақырған кезде кері қайтаруды іске қоспайтын өзгертілген қате туралы жазбаны жасайды.",
        "Documentation.LongDescription": "Көріністе (Table.View арқылы) анықталған өңдеушіні шақырған кезде кері қайтаруды іске қоспайтын <code>errorRecord</code> ішінен өзгертілген қате туралы жазбаны жасайды.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Көріністе анықталған өңдегіш арқылы ұстауға болатын функция жасайды (Table.View арқылы).",
        "Documentation.LongDescription": "<p><code>function</code> дегенде <code>Table.View</code> арқылы жасалған көріністе өңдеуге болатын көрініс функциясын жасайды.</p>\r\n<p><code>Table.View</code> көрінісінің <code>OnInvoke</code> өңдегішін көрініс функциясы үшін өңдегішті анықтау үшін пайдалануға болады.</p>\r\n<p>Кірістірілген операцияларға арналған өңдегіштер сияқты, <code>OnInvoke</code> өңдегіші көрсетілмеген болса немесе ол көрініс функциясын өңдемесе я болмаса өңдегіш қатеге әкелсе, <code>function</code> көрініске қоса қолданылады.</p>\r\n<p><code>Table.View</code> көрінісінің және теңшелетін көрініс функциясының толығырақ сипаттамасын жарияланған Power Query теңшелетін қосқыш құжаттамасынан қараңыз.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Барлық басқарушы таңбалары жойылған мәтіндік мәнді қайтарады.",
        "Documentation.LongDescription": "<code>text</code> барлық басқарушы таңбалары жойылған мәтіндік мәнді қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Мәтіндік мәннен жолға түсулерді және басқа басқарушы таңбаларды жою.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Мәтіндік мәндер тізімін бір мәтіндік мәнге біріктіреді.",
        "Documentation.LongDescription": "Мәтін мәндерінің тізімін (<code>texts</code>) бір мәтіндік мәнге біріктіру нәтижесін қайтарады. <code>texts</code> ішінде бар барлық <code>NULL</code> мәндері еленбейді.\r\n    Нәтижеде біріктірілген мәтінде пайдаланылатын қосымша <code>separator</code> көрсетуге болады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"Seattle\" және \"WA\" мәтіндік мәндерін біріктіру.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Үтірмен және бос орынмен бөлінген \"Seattle\" және \"WA\" мәтіндік мәндерін біріктіру.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Үтір және бос орынмен бөлінген \"Seattle\", <code>NULL</code> және \"WA\" мәндерін біріктіріңіз. (<code>NULL</code> еленбейтінін ескеріңіз.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Көрсетілген мәннен мәтіндік мәнді жасайды.",
        "Documentation.LongDescription": "<code>value</code> мәтіндік көрінісін қайтарады. <code>value</code> <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> немесе <code>binary</code> мәні бола алады.\r\n    Егер көрсетілген мән null болса, <code>Text.From</code> null мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "3 санынан мәтіндік мәнді жасау.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Деректерді екілік түрден мәтінге кодсыздандырады.",
        "Documentation.LongDescription": "<code>encoding</code> түрін пайдаланып <code>binary</code> деректерін екілік мәннен мәтіндік мәнге түрлендіреді.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Мәтінде кодталған сан үшін нақтыланған сан түрін (Int64.Type, Double.Type және т.б.) алады.",
        "Documentation.LongDescription": "<code>text</code> нақтыланған сан түрін (Int64.Type, Double.Type және т.б.) алады. Егер <code>text</code> сан болмаса, қате шығарылады. Сонымен қатар міндетті емес <code>culture</code> мәні берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Таңбалар санын қайтарады.",
        "Documentation.LongDescription": "<code>text</code> мәтініндегі таңбалар санын қайтарады.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем Әлем\" мәтініндегі таңбалар санын анықтау.",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Барлық таңбаларды кіші әріптерге түрлендіреді.",
        "Documentation.LongDescription": "<code>text</code> ішіндегі барлық таңбаларды төменгі регистрге түрлендіру нәтижесін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"AbCd\" төменгі регистрдегі нұсқасын алу.",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Әр сөздің бірінші әрпін бас әріп етеді.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәніндегі әр сөздің бірінші әрпін ғана бас әріп етудің нәтижесін қайтарады. Барлық басқа әріптер төменгі регистрмен қайтарылады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Қарапайым сөйлемде <code>Text.Proper</code> пайдалану.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Берілген <code>text</code> кері өзгертеді.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"123\" мәтінін кері өзгерту.",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Мәтінді екілік пішінге кодтайды.",
        "Documentation.LongDescription": "Көрсетілген <code>text</code> мәтіндік мәнін көрсетілген <code>encoding</code> пайдаланып екілік мәнге кодтайды.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Көрсетілген мәтіндік мәннен таңбалық мәндердің тізімін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>text</code> мәтіндік мәнінен таңбалық мәндердің тізімін қайтарады.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "\"Сәлем Әлем\" мәтінінен таңбалық мәндердің тізімін жасау.",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Барлық алдындағы және соңындағы артық бос орындарды жояды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінен барлық алдындағы және артындағы артық бос орындарды жоюдың нәтижесін қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" мәтінінен алдындағы және соңындағы артық бос орындарды жою.",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Барлық соңындағы артық бос орындарды жояды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінен барлық соңындағы артық бос орындарды жоюдың нәтижесін қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" мәтінінен соңындағы артық бос орындарды жою.",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Барлық алдындағы артық бос орындарды жояды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік мәнінен барлық алдындағы артық бос орындарды жоюдың нәтижесін қайтарады.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"     a b c d    \" мәтінінен алдындағы артық бос орындарды жою.",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Барлық таңбаларды бас әріптерге түрлендіреді.",
        "Documentation.LongDescription": "<code>text</code> ішіндегі барлық таңбаларды жоғарғы регистрге түрлендіру нәтижесін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "\"aBcD\" жоғарғы регистрдегі нұсқасын алу.",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Сағаттың соңын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> арқылы көрсетілетін сағаттың соңын қайтарады, секунд үлестерін қамтиды. Уақыт белдеуі туралы ақпарат сақталады.\r\n      <ul>\r\n        <li><code>dateTime</code>: сағаттың соңы есептелетін <code>time</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "5/14/2011 05:00:00 PM үшін сағаттың соңын алу.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "5/17/2011 05:00:00 PM -7:00 үшін сағаттың соңын алу.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Осы мәннен уақытты жасайды.",
        "Documentation.LongDescription": "Берілген <code>value</code> мәнінен <code>time</code> мәнін қайтарады. Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").\r\nЕгер берілген <code>value</code> <code>null</code> болса, <code>Time.From</code> <code>null</code> мәнін қайтарады.  Егер берілген <code>value</code> <code>time</code> болса, <code>value</code> қайтарылады. Келесі түрлердегі мәндерді <code>time</code> мәніне түрлендіруге болады:\r\n      <ul>\r\n        <li><code>text</code>: мәтіндік көріністен алынған <code>time</code> мәні. Мәліметтерді алу үшін <code>Time.FromText</code> қараңыз.</li>\r\n        <li><code>datetime</code>: <code>value</code> мәнінің уақыт компоненті.</li>\r\n        <li><code>datetimezone</code>: <code>value</code> жергілікті күн/уақыт баламасының уақыт компоненті.</li>\r\n        <li><code>number</code>: <code>time</code> <code>value</code> арқылы көрсетілген бөлшек күндер санының баламасы. Егер <code>value</code> теріс, 1-ден үлкенірек немесе оған тең болса, қате қайтарылады.</li>\r\n      </ul>\r\nЕгер <code>value</code> кез келген басқа түрге жатса, қате қайтарылады.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>0.7575</code> мәнін <code>time</code> мәніне түрлендіру.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "<code>#datetime(1899, 12, 30, 06, 45, 12)</code> мәнін <code>time</code> мәніне түрлендіру.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Жергілікті, әмбебап және теңшелетін уақыт пішімдерінен уақытты жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік көрінісінен <code>time</code> мәнін жасайды. Міндетті емес <code>options</code> <code>record</code> параметрі, қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>record</code> келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>: пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәліметтер алу үшін, https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті өткізіп жіберу немесе <code>null</code> мәнін беру ең жақсы болжамды пайдаланып күнді талдауға әкеледі.</li>\r\n   <li><code>Culture</code> : <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> тілінде <code>\"tt\"</code> дегеніміз <code>\"AM\" немесе \"PM\"</code> дегенді білдіреді, ал <code>\"ar-EG\"</code> тілінде <code>\"tt\"</code> дегеніміз <code>\"ص\" немесе \"م\"</code> дегенді білдіреді. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін <code>options</code> мәтіндік мән де болуы мүмкін. <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>\"10:12:31am\"</code> мәнін уақыт мәніне түрлендіру.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "<code>\"1012\"</code> мәнін Уақыт мәніне түрлендіру.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "<code>\"10\"</code> мәнін Уақыт мәніне түрлендіру.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Сағат құрамдасын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>time</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің сағат құрамдасын қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) ішіндегі уақытты табу.",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Минут құрамдасын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>time</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің минут құрамдасын қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "#datetime(2011, 12, 31, 9, 15, 36) ішіндегі минутты табу.",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Секунд құрамдасын қайтарады.",
        "Documentation.LongDescription": "Көрсетілген <code>time</code>, <code>datetime</code> немесе <code>datetimezone</code> мәнінің секунд құрамдасын қайтарады, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "datetime мәнінен секунд мәнін табыңыз.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Сағаттың басын қайтарады.",
        "Documentation.LongDescription": "<code>dateTime</code> арқылы көрсетілетін сағаттың басын қайтарады.\r\n    <code>dateTime</code> <code>time</code>, <code>datetime</code> немесе <code>datetimezone</code> мәні болуы керек.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "10 қазан 2011 ж., 8:10:32 үшін сағаттың басын табу.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Уақыт мәнінің бөліктерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Осы уақыт мәнінің, <code>time</code>, бөліктерін қамтитын жазбаны қайтарады.\r\n <ul>\r\n        <li><code>time</code>: бөліктерінің жазбасы есептелетін <code>time</code> мәні.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(11, 56, 2)</code> мәнін уақыт мәндерін қамтитын жазбаға түрлендіру.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Уақыт мәнінің мәтіндік көрінісін қайтарады.",
        "Documentation.LongDescription": "<code>time</code> мәтіндік көрінісін қайтарады. Міндетті емес <code>options</code> <code>record</code> параметрі, қосымша сипаттарды көрсету үшін қамтамасыз етілуі мүмкін. <code>culture</code> тек бұрынғы жұмыс ағындары үшін пайдаланылады. <code>record</code> параметрі келесі өрістерді қамтуы мүмкін:\r\n<ul>\r\n   <li><code>Format</code>:Пайдалану керек пішімді көрсететін <code>text</code> мәні. Қосымша мәліметтер алу үшін, https://go.microsoft.com/fwlink/?linkid=2180104 және https://go.microsoft.com/fwlink/?linkid=2180105 веб-беттеріне өтіңіз. Бұл өрісті қалдырып кетсеңіз немесе <code>null</code> көрсетсеңіз, <code>Culture</code> параметрінде көрсетілген әдепкі күн пішімі пайдаланылады.</li>\r\n   <li><code>Culture</code>: <code>Format</code> мәні null болмаса, <code>Culture</code> кейбір пішім көрсеткіштерін басқарады. Мысалы, <code>\"en-US\"</code> тілінде <code>\"tt\"</code> дегеніміз <code>\"AM\" немесе \"PM\"</code> дегенді білдіреді, ал <code>\"ar-EG\"</code> тілінде <code>\"tt\"</code> дегеніміз <code>\"ص\" немесе \"م\"</code> дегенді білдіреді. <code>Format</code> мәні <code>null</code> болғанда, <code>Culture</code> пайдалану керек әдепкі пішімді басқарады. <code>Culture</code> мәні <code>null</code> болғанда немесе өткізіп жіберілгенде, <code>Culture.Current</code> пайдаланылады.</li>\r\n</ul>\r\nБұрынғы жұмыс ағындарын қолдау үшін <code>options</code> және <code>culture</code> мәтіндік мәндер де болуы мүмкін. <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> болса, мұның әрекеті бірдей болады.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "<code>#time(01, 30, 25)</code> мәнін <code>text</code> мәніне түрлендіреді. <i>Нәтиже ағымдағы мәдениетке байланысты өзгеріп отыруы мүмкін.</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Теңшелетін пішімді және неміс тілі мәдениетін пайдаланып түрлендіру",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Стандартты уақыт пішімін пайдаланып түрлендіру.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Берілген жазба түрінің жабық нұсқасын (бұрын жабылған болса, сол түрін) береді.",
        "Documentation.LongDescription": "Берілген <code>type</code> <code>жазбасының</code> жабық нұсқасын (бұрын жабылған болса, сол түрін) береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number,…]</code> жабық нұсқасын жасаңыз.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Түр аспектілерін қайтарады.",
        "Documentation.LongDescription": "<code>type</code> аспектілері бар жазбаны қайтарады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Функция түрі параметрлерінің атауы орнатылған өріс мәндері және олардың тиісті түрлеріне орнатылған мәндері бар жазбаны береді.",
        "Documentation.LongDescription": "<code>type</code> параметрлерінің атауына орнатылған өріс мәндері және олардың тиісті түрлері орнатылған мәндері бар жазбаны береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, y as text)</code> функциясына арналған параметрлердің түрлерін табыңыз.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Функция түрін шақыруға қажетті параметрлердің ең кіші санын көрсететін санды береді.",
        "Documentation.LongDescription": "Функцияның <code>type</code> кірісін шақыруға қажетті параметрлердің ең кіші санын көрсететін санды береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>(x as number, optional y as text)</code> функциясына қажетті параметрлердің санын табыңыз.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Функция түрі бойынша берілген түрді береді.",
        "Documentation.LongDescription": "<code>type</code> функциясы бойынша берілген түрді береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>() as any)</code> берілетін түрін табыңыз.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Түр нөлдік түрде болса, оң мәнді береді, олай болмаса, теріс мәнді береді.",
        "Documentation.LongDescription": "Түр <code>нөлдік</code> түрде болса, <code>оң мәнді</code> береді; олай болмаса, <code>теріс мәнді</code> береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>Санның</code> нөл екендігін анықтаңыз.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "<code>Түрдің нөлдік саны</code> нөл екендігін анықтыңыз.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Жазба түрінің ашық екендігін көрсетеді.",
        "Documentation.LongDescription": "<code>type</code> жазбасының ашық екендігін көрсететін <code>логикалық мәнді</code> береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number, ...]</code>жазбасының ашық екендігін анықтаңыз.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Тізім түріндегі элемент түрін береді.",
        "Documentation.LongDescription": "<code>type</code> тізіміндегі элемент түрін береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Элемент түрін <code>{number}</code> тізімінен табыңыз.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Түрден нөлдік емес түрді береді.",
        "Documentation.LongDescription": "<code>type</code> түрінен <code>нөлдік емес</code> түрді береді",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>Түрдің нөлдік санының</code> нөлдік емес түрін береді.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Берілген жазба түрінің ашық нұсқасын (бұрын ашылған болса, сол түрін) береді.",
        "Documentation.LongDescription": "Берілген <code>type</code> <code>жазбаының</code> ашық нұсқасын(бұрын ашылған болса, сол түрін) береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>type [ A = number]</code> түрінің ашық нұсқасын жасаңыз.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Тиісті атауы мен мәні бар берілген жазба түрінің әр өрісімен бірге жазба түрінің өрістерін сипаттайтын жазбаны береді.",
        "Documentation.LongDescription": "<code>type</code> жазбасының өрістерін сипаттайтын жазбаны береді. Берілген жазба түрінің әр өрісінде <code>[ Type = type, Optional = logical ]</code> жазбасының пішініндегі тиісті атау мен мән бар.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "<code>[ A = number, optional B = any]</code> жазбасының атауы мен мәнін табыңыз.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Көрсетілген кесте үшін ықтимал бос кілттер тізімін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген кесте үшін ықтимал бос кілттер тізімін қайтарады.<br>\r\n    <br>\r\n    Әрбір кілт келесі пішіндегі жазба арқылы анықталады:\r\n    <ul>\r\n      <li>\r\n        <code>Бағандар</code>: кілтті анықтайтын баған атауларының тізімі\r\n      </li>\r\n      <li>\r\n        <code>Негізгі</code>: егер кілт кестенің негізгі кілті болса, <code>рас</code>; әйтпесе, <code>жалған</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Кесте түрі үшін кілт ақпаратын қайтарыңыз.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Кесте түрі үшін жол түрін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген кесте түрінің жол түрін қайтарады. Нәтиже әрқашан жазба түрі болады.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Қарапайым кесте үшін жол түрінің ақпаратын қайтару.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Түрлер тізімі жиынын қайтарады.",
        "Documentation.LongDescription": "Түрлердің бірігуін <code>types</code> түрінде береді.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Жазбаны URI сұрау жолына біріктіру.",
        "Documentation.LongDescription": "Қажетінше таңбаларды пайдаланбай отырып, <code>query</code> жазабсын URI сұрау жолына біріктіру.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Арнайы таңбалары бар сұрау жолын кодтау.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "RFC 3986 стандартына сәйкес арнайы таңбаларды кодтайды.",
        "Documentation.LongDescription": "<code>data</code> енгізуіндегі арнайы таңбаларды RFC 3986 стандартына сәйкес кодтайды.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "\"+money$\" ішіндегі арнайы таңбаларды кодтайды.",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Кіріс абсолютті URI мекенжайының бөліктерін жазба ретінде қайтарады.",
        "Documentation.LongDescription": "<code>absoluteUri</code> кірісінің бөліктерін Scheme, Host, Port, Path, Query, Fragment, UserName және Password сияқты мәндерді қамтитын жазба ретінде қайтарады.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "\"www.adventure-works.com\" абсолютті URI мекенжайының бөліктерін анықтау.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Пайызбен кодталған жолдың кодын ашыңыз.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps аналитикалық қызметінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Azure DevOps аналитикалық қызметінің URL мекенжайынан жүктеп алынған контентті екілік мән ретінде қайтарады. Бұл функция әртүрлі ұйымдар үшін әртүрлі тіркелгі деректерін пайдаланады."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Azure DevOps аналитикалық қызметінің URL мекенжайын енгізіңіз.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Azure DevOps аналитикалық қызметінің URL мекенжайынан жүктеп алынған контентті екілік мән ретінде қайтарады. Бұл функция барлық қолжетімді ұйымдар үшін глобалдық тіркелгі деректерін пайдаланады."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Басқа сұрау жоспарларын көрсетеді.",
        "Documentation.LongDescription": "Value.Expression(Value.Optimize(...)) арқылы алынған сұрау жоспарының өрнегіндегі басқа сұрау жоспарларын көрсетеді. Басқа мақсатта пайдалануға арналмаған.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Мәннің өрнегі болып табылатын дерексіз синтаксистік ағашын (AST) қайтарады.",
        "Documentation.LongDescription": "Мәннің өрнегі болып табылатын дерексіз синтаксистік ағашын (AST) қайтарады",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Мәтіндік көріністер түрі қатаң көрсетілген мәнді жасайды.",
        "Documentation.LongDescription": "<code>text</code> мәтіндік көрінісінен мәнді кодсыздандырады және оны тиісті түрі бар мән ретінде түсіндіреді.\r\n    <code>Value.FromText</code> мәтіндік мәнді қабылдайды, содан кейін санды, логикалық мәнді, null мәнін, күн және уақыт мәнін, ұзақтық мәнін немесе мәтіндік мәнді қайтарады.  Бос мәтіндік мән null мәні ретінде түсіндіріледі.\r\n    Сонымен қатар қосымша <code>culture</code> берілуі мүмкін (мысалы, \"en-US\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Кірістің метадеректерін қамтитын жазбаны қайтарады.",
        "Documentation.LongDescription": "Кірістің метадеректерін қамтитын жазбаны қайтарады.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Мән үшін оңтайландырылған өрнекті қайтару үшін Value.Expression сигнал береді.",
        "Documentation.LongDescription": "Value.Expression ішінде пайдаланылғанда, егер <code>value</code> оңтайландыруға болатын сұрауды көрсетсе, бұл функция оңтайландырылған өрнектің қайтарылуы керектігін көрсетеді. Әйтпесе <code>value</code> әсерсіз өткізіледі.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Енгізілген метадеректерді жояды.",
        "Documentation.LongDescription": "Енгізілген метадеректерді жояды.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Көрсетілген мәннің түрін қайтарады.",
        "Documentation.LongDescription": "Көрсетілген мәннің түрін қайтарады.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.LongDescription": "Бұл функция тек ішкі пайдалануға арналған.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Көрсетілген URL мекенжайы үшін веб-браузер арқылы көргендегідей HTML кодын қайтарады.",
        "Documentation.LongDescription": "Веб-браузер арқылы көргенде, көрсетілген <code>url</code> үшін HTML қайтарады. Қосымша сипаттарды көрсету үшін <code>options</code> деген міндетті емес жазба параметрі қамтамасыз етілуі мүмкін. Жазба келесі өрістерді қамти алады:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: Мақсатты сайтта API кілті түсінігі болса, бұл параметрді URL мекенжайында пайдалану керек кілт параметрдің атауын (мәнін емес) көрсету үшін пайдалануға болады. Іс жүзіндегі кілт мәні тіркелгі деректерінде қамтамасыз етіледі.</li>\r\n        <li><code>WaitFor</code>: Беттің жүктелуін күтуге (ол әрқашан орындалады) қоса, HTML жүктеп алмай тұрып күту керек шартты көрсетеді. «Күту уақыты» және/немесе «Селектор» өрістерін қамтитын жазба бола алады. Тек «Күту уақыты» көрсетілген болса, функция HTML жүктеп алмай тұрып көрсетілген уақыт мөлшері бойы күтеді. «Селектор» және «Күту уақыты» өрістерінің екеуі де көрсетілген болса әрі «Күту уақыты» бетте «Селектор» бар болмай тұрып өтсе, қате көрсетіледі. «Күту уақыты» жоқ «Селектор» көрсетілсе, 30 секундтан тұратын әдепкі «Күту уақыты» қолданылады.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Деректерге қол жеткізу",
        "Documentation.Examples": [
          {
            "Description": "https://microsoft.com үшін HTML қайтарады.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS селекторының болуын күткеннен кейін https://microsoft.com үшін HTML қайтарады.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Он секунд күткеннен кейін https://microsoft.com үшін HTML қайтарады.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "CSS селекторының болуын он секундқа дейін күткеннен кейін https://microsoft.com үшін HTML қайтарады.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "URL мекенжайынан екілік файл ретінде жүктелген мазмұнды қайтарады.",
        "Documentation.LongDescription": "Екілік мән ретінде <code>url</code> арқылы жүктеп алынған контентті қайтарады. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада мына өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>Query</code> : Бас тарту туралы алаңдамай, бағдарламалау жолымен сұрау параметрлерін URL мекенжайына қосыңыз.</li>\r\n<li><code>ApiKeyName</code> : Егер мақсатты сайтта API кілті ұғымы болса, бұл параметрді URL мекенжайында пайдаланылуы тиіс кілт параметрінің атауын (мәнін емес) көрсету үшін пайдалануға болады. Нақты кілт мәні тіркелгі деректерінде беріледі.</li>\r\n<li><code>Headers</code> : Бұл мән жазба ретінде көрсетілсе, HTTP сұрауы үшін қосымша тақырыптарды береді.</li>\r\n<li><code>Timeout</code> : Бұл мән ұзақтық ретінде көрсетілсе, HTTP сұрауы үшін күту уақыты өзгереді. Әдепкі мәні: 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Бұл мән тізім ретінде көрсетілсе, осы HTTP тақырыбының кілттері деректерді кэштеу үшін есептеудің бөлігі болмайды.</li>\r\n<li><code>IsRetry</code> : Бұл логикалық мән &quot;шын&quot; ретінде көрсетілсе, деректерді алу кезінде кэштегі бар жауап ескерілмейді.</li>\r\n<li><code>ManualStatusHandling</code> : Бұл мән тізім ретінде көрсетілсе, жауабы осы күй кодтарының біреуіне ие HTTP сұраулары үшін ендірілген өңдеу болдырылмайды.</li>\r\n<li><code>RelativePath</code> : Бұл мән мәтін ретінде көрсетілсе, сұрау жасалудан бұрын ол негізгі URL мекенжайына қолданылады.</li>\r\n<li><code>Content</code> : Бұл мәнді көрсету параметр мәнін POST контенті ретінде пайдаланып, GET арқылы POST үшін веб-сұрауды өзгертеді.</li>\r\n</ul>\r\n\r\n    HTTP сұрауы GET әдісімен (контент көрсетілмеген жағдайда) немесе POST әдісімен (контент көрсетілген жағдайда) орындалады.\r\n    <br>\r\n    HTTP жауабының тақырыптары екілік нәтиже үшін метадеректер ретінде қолжетімді. Реттелетін деректер қосқышы контекстінен тыс, тек жауап тақырыптарының қосалқы жиынтығы қолжетімді (қауіпсіздік мақсатында).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath және Сұрау опциялары арқылы <code>\"https://bing.com/search?q=Power+Query\"</code> мазмұнын шығарып алыңыз. Бұл опцияларды статикалық негізді URL мекенжайын динамикалық түрде сұрау үшін пайдалануға болады.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Екілік JSON пайдалы деректерінен өтіп және жауапты JSON ретінде талдай отырып, URL мекенжайы үшін “ЖАРИЯЛАУ” пәрменін орындаңыз.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Аутентификация кілтін сұрау жолының бір бөлігі ретінде қабылдайтын қауіпсіз URL мекенжайына қосылыңыз. М ішінде құпия кілтті қатаң кодтаудың (бұл қауіпсіздікке қауіп төндіреді) орнына, \r\n    кілтті оның атауын (оның мәнін емес) М ішінде көрсету арқылы, веб API аутентификациясын таңдау және кілт мәнін веб API тіркелгі деректерінің бөлігі ретінде енгізу арқылы сенімді түрде енгізуге болады.\r\n    Осылайша пайдаланғанда келесі мысал <code>\"https://contoso.com/api/customers/get?api_key=******\"</code> сұрауын тудырады.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "URL мекенжайынан жазба мәні ретінде жүктелген HTTP тақырыптарын қайтарады.",
        "Documentation.LongDescription": "Жазба ретінде <code>url</code> арқылы жүктеп алынған тақырыптарды қайтарады. Қосымша сипаттарды көрсету үшін <code>options</code> қосымша жазба параметрі берілуі мүмкін. Жазбада мына өрістер болуы мүмкін:\r\n    <ul>\r\n<li><code>Query</code> : Бас тарту туралы алаңдамай, бағдарламалау жолымен сұрау параметрлерін URL мекенжайына қосыңыз.</li>\r\n<li><code>ApiKeyName</code> : Егер мақсатты сайтта API кілті ұғымы болса, бұл параметрді URL мекенжайында пайдаланылуы тиіс кілт параметрінің атауын (мәнін емес) көрсету үшін пайдалануға болады. Нақты кілт мәні тіркелгі деректерінде беріледі.</li>\r\n<li><code>Headers</code> : Бұл мән жазба ретінде көрсетілсе, HTTP сұрауы үшін қосымша тақырыптарды береді.</li>\r\n<li><code>Timeout</code> : Бұл мән ұзақтық ретінде көрсетілсе, HTTP сұрауы үшін күту уақыты өзгереді. Әдепкі мәні: 100 секунд.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Бұл мән тізім ретінде көрсетілсе, осы HTTP тақырыбының кілттері деректерді кэштеу үшін есептеудің бөлігі болмайды.</li>\r\n<li><code>IsRetry</code> : Бұл логикалық мән &quot;шын&quot; ретінде көрсетілсе, деректерді алу кезінде кэштегі бар жауап ескерілмейді.</li>\r\n<li><code>ManualStatusHandling</code> : Бұл мән тізім ретінде көрсетілсе, жауабы осы күй кодтарының біреуіне ие HTTP сұраулары үшін ендірілген өңдеу болдырылмайды.</li>\r\n<li><code>RelativePath</code> : Бұл мән мәтін ретінде көрсетілсе, сұрау жасалудан бұрын ол негізгі URL мекенжайына қолданылады.</li>\r\n</ul>\r\n\r\n    HTTP сұрауы HEAD әдісімен орындалады. Реттелетін деректер қосқышы контекстінен тыс, тек жауап тақырыптарының қосалқы жиынтығы қолжетімді (қауіпсіздік мақсатында).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "RelativePath және Query параметрлерін пайдалану арқылы <code>\"https://bing.com/search?q=Power+Query\"</code> үшін HTTP тақырыптарын алу.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Қатынасты басқару жазбасының (ACE) шарты бағаланатын авторизация контексті.",
        "Documentation.LongDescription": "Қатынасты басқару жазбасының (ACE) шарты бағаланатын авторизация контексті.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Қатынасты басқару жазбаларының (ACE) кестесі.",
        "Documentation.LongDescription": "Авторизация ережелерін көрсететін қатынасты басқару жазбаларының (ACE) реттелген кестесі. Әрбір жол ағымдағы авторизация контексті бойынша бағаланады (ретпен) және <code> Condition</code> өрнегі шын мәнін қайтаратын бірінші жол қолданылатын ережені анықтайды. <code> Action</code> бағаны ереже қолданылатын әрекет түрін көрсетеді. <code>AccessControlKind</code> бағаны әрекет үшін кіру мүмкіндігін беруді не бермеуді анықтайды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Қатынасты басқару түрін көрсетеді.",
        "Documentation.LongDescription": "Қатынасты басқару түрін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "Барлық мәндерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық мәндерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "Барлық екілік мәндерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық екілік мәндерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Екілік кодтаудың түрін көрсетеді.",
        "Documentation.LongDescription": "Екілік кодтаудың түрін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Элементтің топта күтілетін шығу саны көрсетеді.",
        "Documentation.LongDescription": "Элементтің топта күтілетін шығу саны көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Орындалатын буферлеу түрін сипаттайды.",
        "Documentation.LongDescription": "Орындалатын буферлеу түрін сипаттайды.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "Барлық байттарды білдіретін түр.",
        "Documentation.LongDescription": "Барлық байттарды білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Байт ретін көрсетеді.",
        "Documentation.LongDescription": "Байт ретін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "Барлық таңбаларды білдіретін түр.",
        "Documentation.LongDescription": "Барлық таңбаларды білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Қысу түрін көрсетеді.",
        "Documentation.LongDescription": "Қысу түрін көрсетеді.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "CSV құжаттарындағы баға ұсыныстарының маңыздылығын көрсетеді.",
        "Documentation.LongDescription": "CSV құжаттарындағы баға ұсыныстарының маңыздылығын көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "Валюта мәнін көрсететін түр.",
        "Documentation.LongDescription": "Валюта мәнін көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "Барлық күн мәндерін білдіретін түр.",
        "Documentation.LongDescription": "Барлық күн мәндерін білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "Байланысты уақыт белдеуінсіз барлық күн және уақыт мәндерін білдіретін түр.",
        "Documentation.LongDescription": "Байланысты уақыт белдеуінсіз барлық күн және уақыт мәндерін білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "Уақыт белдеуіне қатысты барлық күн және уақыт мәндерін білдіретін түр.",
        "Documentation.LongDescription": "Уақыт белдеуіне қатысты барлық күн және уақыт мәндерін білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Апта күнін көрсетеді.",
        "Documentation.LongDescription": "Апта күнін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "Бекітілген ондық санды көрсететін түр.",
        "Documentation.LongDescription": "Бекітілген ондық санды көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "Қос дәлдікті қалқымалы нүкте санын көрсететін түр.",
        "Documentation.LongDescription": "Қос дәлдікті қалқымалы нүкте санын көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "Барлық ұзақтық мәндерін білдіретін түр",
        "Documentation.LongDescription": "Барлық ұзақтық мәндерін білдіретін түр",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Күтілгеннен көп бағандарды қамтитын жолда қосымша мәндер үшін күтілетін әрекетті көрсетеді.",
        "Documentation.LongDescription": "Күтілгеннен көп бағандарды қамтитын жолда қосымша мәндер үшін күтілетін әрекетті көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "Барлық функцияларды білдіретін түр.",
        "Documentation.LongDescription": "Барлық функцияларды білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Топтау түрін көрсетеді.",
        "Documentation.LongDescription": "Бірдей кілт мәнімен бірнеше жергілікті топтар құруға болады, бірақ берілген кілт мәні үшін тек бір глобалдық топ құрыла алады.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "GUID мәнін көрсететін түр.",
        "Documentation.LongDescription": "GUID мәнін көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Куәлік пайдаланушыны, топты, құрылғыны немесе басқа анықталатын нәрсені көрсетеді.",
        "Documentation.LongDescription": "Куәлік пайдаланушыны, топты, құрылғыны немесе басқа анықталатын нәрсені көрсетеді.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Куәліктер жасалатын және салыстырылатын ауқымды анықтайды.",
        "Documentation.LongDescription": "Куәліктер жасалатын және салыстырылатын ауқымды анықтайды.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "Белгіленген 16 биттік бүтін санды көрсететін түр.",
        "Documentation.LongDescription": "Белгіленген 16 биттік бүтін санды көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "Белгіленген 32 биттік бүтін санды көрсететін түр.",
        "Documentation.LongDescription": "Белгіленген 32 биттік бүтін санды көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "Белгіленген 64 биттік бүтін санды көрсететін түр.",
        "Documentation.LongDescription": "Белгіленген 64 биттік бүтін санды көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "Белгіленген 8 биттік бүтін санды көрсететін түр.",
        "Documentation.LongDescription": "Белгіленген 8 биттік бүтін санды көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Қосылу операциясында пайдаланылатын қосылу алгоритмін көрсетеді.",
        "Documentation.LongDescription": "Қосылу операциясында пайдаланылатын қосылу алгоритмін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Қосылу операциясының түрін көрсетеді.",
        "Documentation.LongDescription": "Қосылу операциясының түрін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Біріктірудің сол немесе оң жақ кестесін көрсетеді.",
        "Documentation.LongDescription": "Біріктірудің сол немесе оң жақ кестесін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Осы деректер көзі пайдаланатын SQL диалектісі қолдау көрсететін шектеу сөйлемінің түрін сипаттайды.",
        "Documentation.LongDescription": "Осы деректер көзі пайдаланатын SQL диалектісі қолдау көрсететін шектеу сөйлемінің түрін сипаттайды.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "Барлық тізімдерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық тізімдерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "Барлық логикалық мәндерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық логикалық мәндерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Күтілгеннен аз бағандарды қамтитын жолда жоқ мәндер үшін күтілетін әрекетті көрсетеді.",
        "Documentation.LongDescription": "Күтілгеннен аз бағандарды қамтитын жолда жоқ мәндер үшін күтілетін әрекетті көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "null мәнін білдіретін түр.",
        "Documentation.LongDescription": "null мәнін білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "Барлық сандарды білдіретін түр.",
        "Documentation.LongDescription": "Барлық сандарды білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "OData қызметі қалдырып кете алатын мәндердің түрлерін көрсетеді.",
        "Documentation.LongDescription": "OData қызметі қалдырып кете алатын мәндердің түрлерін көрсетеді.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Тізбектегі элементтің орын алуын көрсетеді.",
        "Documentation.LongDescription": "Тізбектегі элементтің орын алуын көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Сұрыптау бағытын көрсетеді.",
        "Documentation.LongDescription": "Сұрыптау бағытын көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Мәтіндік құпия сөзді көрсететін түр.",
        "Documentation.LongDescription": "Мәтіндік құпия сөзді көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Пайыздық мәнді көрсететін түр.",
        "Documentation.LongDescription": "Пайыздық мәнді көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Процентиль режимінің түрін көрсетеді.",
        "Documentation.LongDescription": "Процентиль режимінің түрін көрсетеді.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Салыстыру дәлдігін көрсетеді.",
        "Documentation.LongDescription": "Салыстыру дәлдігін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Дәйексөз мәнерін көрсетеді.",
        "Documentation.LongDescription": "Дәйексөз мәнерін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Рейтинг түрін көрсетеді.",
        "Documentation.LongDescription": "Рейтинг түрін көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "Барлық жазбаларды білдіретін түр.",
        "Documentation.LongDescription": "Барлық жазбаларды білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Индекстеудің кіріс деректерінің басынан не соңынан жасалуын көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Дөңгелектенетін ықтимал сандар арасында байланыс болғанда, дөңгелектеу бағытын көрсетеді.",
        "Documentation.LongDescription": "Дөңгелектенетін ықтимал сандар арасында байланыс болғанда, дөңгелектеу бағытын көрсетеді.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "SAP Business Warehouse орындау режимі параметрі үшін жарамды параметрлер.",
        "Documentation.LongDescription": "SAP Business Warehouse орындау режимі параметрі үшін жарамды параметрлер.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA тарату параметрі үшін жарамды параметрлер.",
        "Documentation.LongDescription": "SAP HANA тарату параметрі үшін жарамды параметрлер.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA ауқым кіріс параметрлеріне арналған ауқым операторы.",
        "Documentation.LongDescription": "SAP HANA ауқым кіріс параметрлеріне арналған ауқым операторы.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "Бір дәлдікті қалқымалы нүкте санын көрсететін түр.",
        "Documentation.LongDescription": "Бір дәлдікті қалқымалы нүкте санын көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "Spark нұсқасына қосылған кезде пайдаланылатын протокол.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "Барлық кестелерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық кестелерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "Барлық мәтіндік мәндерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық мәтіндік мәндерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Мәтін шифрлау түрін көрсетеді.",
        "Documentation.LongDescription": "Мәтін шифрлау түрін көрсетеді.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "Барлық уақыт мәндерін білдіретін түр.",
        "Documentation.LongDescription": "Барлық уақыт мәндерін білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Қадағалау деңгейін көрсетеді.",
        "Documentation.LongDescription": "Қадағалау деңгейін көрсетеді.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "Барлық түрлерді білдіретін түр.",
        "Documentation.LongDescription": "Барлық түрлерді білдіретін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "Мәтін URI идентификаторын көрсететін түр.",
        "Documentation.LongDescription": "Мәтін URI идентификаторын көрсететін түр.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "HTTP әдісін көрсетеді.",
        "Documentation.LongDescription": "HTTP әдісін көрсетеді.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
