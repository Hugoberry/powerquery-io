{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "Devuelve una representación estructural de una base de datos de Access.",
        "Documentation.LongDescription": "Devuelve una representación estructural de una base de datos de Access, <code>database</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (true o false) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es false).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [option1 = value1, option2 = value2...], por ejemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "Devuelve las bases de datos de Analysis Services de un host concreto.",
        "Documentation.LongDescription": "Devuelve las bases de datos de una instancia de Analysis Services, <code>server</code>. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : Un valor l&#243;gico que indica si los tipos especificados del modelo tabular o multidimensional se usar&#225;n para los tipos de columnas de medidas agregadas. Cuando se establece en false, el tipo &quot;number&quot; se usar&#225; para todas las columnas de medidas. El valor predeterminado para esta opci&#243;n es false.</li>\r\n<li><code>Culture</code> : Un nombre de referencia cultural que especifica la referencia cultural de los datos. Este se corresponde con la propiedad de cadena de conexi&#243;n &quot;Locale Identifier&quot;.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>SubQueries</code> : N&#250;mero (0, 1 o 2) que establece el valor de la propiedad &quot;SubQueries&quot; en la cadena de conexi&#243;n. Controla el comportamiento de los miembros calculados en subselecciones o subcubos, y el valor predeterminado es 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "Cubos de AtScale",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "Permite importar datos de un cubo de DirectQuery desde una instancia de AtScale.",
        "Documentation.LongDescription": "\r\nDevuelve los datos de cubo de AtScale en el servidor <code>server</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: valor lógico que indica si los tipos especificados en el modelo multidimensional o tabular se usarán para los tipos de las columnas de medida agregadas. Cuando se establece en \"false\", el tipo \"number\" se usa para todas las columnas de medida. El valor predeterminado de esta opción es \"false\".</li>\r\n        <li><code>CommandTimeout</code>: duración (en segundos) que permite controlar durante cuánto tiempo se permite que la consulta del lado servidor se ejecute antes de cancelarla. El valor predeterminado depende del controlador. </li>\r\n        <li><code>ConnectionTimeout</code>: duración (en segundos) que permite controlar cuánto tiempo se debe esperar antes de cancelar un intento de conexión con el servidor. El valor predeterminado depende del controlador. </li>\r\n\r\n</ul>\r\nEl parámetro de registro se especifica de esta forma: [opción1 = valor1, opción2 = valor2...].",
        "Documentation.Examples": {
          "Description": "Permite enumerar los datos de un cubo de AtScale.",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "Importa datos de Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa datos de una instancia de Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla de información sobre Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Una tabla que contiene Storm Events de la base de datos \"Samples\" del clúster \"help\"."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "Especifique la URL del servicio Analytics de Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Devuelve el contenido descargado de la dirección URL del servicio Analytics de Azure DevOps como valor binario. Esta función utiliza credenciales diferentes para cada organización."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Fuente de Azure DevOps Services",
        "Documentation.DisplayName": "Fuente de Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Devuelve una tabla de fuentes de OData ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "Escriba la dirección URL del punto de conexión de la API de REST de Azure Enterprise que se ha asociado a su inscripción",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "Devuelve una lista de los informes y meses disponibles de la API de Azure Enterprise",
        "Documentation.Name": "Importar datos de Azure Enterprise",
        "Documentation.Examples": [
          {
            "Description": "Usar la función AzureEnterprise.Tables y dirigirse a un valor particular para obtener los resultados.",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "Tabla"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "Vea ejemplos de consultas de inicio: https://learn.microsoft.com/es-es/azure/governance/resource-graph/samples/starter?tabs=azure-cli.",
        "Documentation.Examples": [
          {
            "Description": "Devolver una tabla con los resultados de la consulta de usuario \"recursos\"",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Lista de tablas en una instancia de Azure Spark.",
        "Documentation.LongDescription": "Lista de tablas en una instancia de Azure Spark.",
        "Documentation.Examples": [
          {
            "Description": "Lista de tablas en una instancia de Azure Spark.",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "Devuelve una tabla navegacional que contiene los contenedores encontrados en la cuenta especificada de un almacenamiento de Windows Azure.",
        "Documentation.LongDescription": "Devuelve una tabla de navegación que contiene una fila por cada contenedor encontrado en la dirección URL de la cuenta, <code>account</code>, de un almacén de Azure Storage. Cada fila contiene un vínculo a los blobs del contenedor. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>BlockSize</code> : N&#250;mero de bytes que se van a leer antes de esperar en el consumidor de datos. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : N&#250;mero de bytes que se intentar&#225;n leer en una &#250;nica solicitud HTTP al servidor. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : La opci&#243;n ConcurrentRequests permite una descarga de datos m&#225;s r&#225;pida; para ello, hay que especificar el n&#250;mero de solicitudes que se van a realizar en paralelo a costa del uso de la memoria. La memoria necesaria es (ConcurrentRequest * RequestSize). El valor predeterminado es 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "Devuelve una tabla de navegación que contiene los documentos que se han encontrado en el contenedor especificado y en sus subcarpetas desde Azure Data Lake Storage.",
        "Documentation.LongDescription": "Devuelve una tabla de navegación que contiene los documentos encontrados en el contendedor especificado y en sus subcarpetas de la URL de la cuenta, <code>endpoint</code>, desde un sistema de archivos de Azure Data Lake Storage. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>BlockSize</code> : N&#250;mero de bytes que se van a leer antes de esperar en el consumidor de datos. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : N&#250;mero de bytes que se intentar&#225;n leer en una &#250;nica solicitud HTTP al servidor. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : La opci&#243;n ConcurrentRequests permite una descarga de datos m&#225;s r&#225;pida; para ello, hay que especificar el n&#250;mero de solicitudes que se van a realizar en paralelo a costa del uso de la memoria. La memoria necesaria es (ConcurrentRequest * RequestSize). El valor predeterminado es 16.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (true/false) que controla si los archivos se devuelven en una vista de directorio de tipo &#225;rbol o en una lista plana. El valor predeterminado es false.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "Devuelve una tabla de navegación que contiene las tablas encontradas en la cuenta especificada de un almacén de credenciales de Azure.",
        "Documentation.LongDescription": "Devuelve una tabla de navegación con una fila por cada tabla en la dirección URL de la cuenta, <code>account</code>, de un almacén de Azure Storage. Cada fila contiene un vínculo a la tabla de Azure. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>Timeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo es necesario esperar antes de abandonar la solicitud al servidor. El valor predeterminado depende del origen.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight en AKS Trino"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "Datos y analíticos de Bloomberg  v1.1.3",
        "Documentation.Description": "Se usa para obtener datos de Bloomberg"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "Esta función no está disponible porque requiere .NET 4.5.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (heredado)",
        "Documentation.Caption": "Common Data Service (heredado)",
        "Documentation.LongDescription": "Permite conectarse a una instancia de Common Data Service (Dynamics 365 y PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "Devuelve el contenido del documento CSV como una tabla.",
        "Documentation.LongDescription": "Devuelve el contenido del documento CSV como una tabla.\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> puede ser null, el número de columnas, una lista de nombres de columna, un tipo de tabla o un registro de opciones.\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> puede ser un solo carácter, una lista de caracteres o el valor <code>\"\"</code>, que indica que las filas deben dividirse por caracteres de espacio en blanco consecutivos. Valor predeterminado: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        Consulte <code>ExtraValues.Type</code> para obtener los valores admitidos de <code>extraValues</code>.\r\n      </li>\r\n       <li>\r\n        <code>encoding</code> especifica el tipo de codificación de texto.\r\n      </li>\r\n    </ul>\r\n\r\n    Si se especifica un registro para <code>columns</code> (y <code>delimiter</code>, <code>extraValues</code>y <code>encoding</code> son null), se pueden proporcionar los siguientes campos de registro:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: delimitador de columna. Valor predeterminado: <code>\",\"</code>.\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: puede ser null, el número de columnas, una lista de nombres de columna o un tipo de tabla. Si el número de columnas es menor que el número encontrado en la entrada, se omitirán las columnas adicionales. Si el número de columnas es mayor que el número encontrado en la entrada, las columnas adicionales serán null. Cuando no se especifica, el número de columnas viene determinado por lo que se encuentra en la entrada.\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: codificación de texto del archivo. Valor predeterminado: 65001 (UTF-8).\r\n      </li>\r\n      <li>\r\n         <code>CsvStyle</code>: especifica cómo se controlan las comillas.\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (valor predeterminado): las comillas de un campo solo son significativas inmediatamente después del delimitador.\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: las comillas de un campo siempre son significativas, independientemente de dónde aparezcan.\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n            <code>QuoteStyle</code>: especifica cómo se controlan los saltos de línea entre comillas.\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code> (valor predeterminado): los saltos de línea entre comillas se tratan como parte de los datos, no como el final de la fila actual.\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.None</code>: todos los saltos de línea se tratan como el final de la fila actual, incluso cuando se producen dentro de un valor entre comillas.\r\n          </li>\r\n        </ul>\r\n     </li>\r\n    </ul>\r\n..",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Procesa texto CSV con encabezado de columna",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "Devuelve una tabla que contiene el conjunto de dimensiones disponibles.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene el conjunto de dimensiones disponibles dentro del <code>cube</code>. Cada dimensión es una tabla que contiene un conjunto de atributos de dimensión y cada atributo de dimensión se representa como una columna en la tabla de dimensiones. Se pueden expandir dimensiones en el cubo mediante Cube.AddAndExpandDimensionColumn. ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "Devuelve un árbol anidado de tablas que representa la jerarquía de carpetas para mostrar de los objetos (por ejemplo, dimensiones y medidas).",
        "Documentation.LongDescription": "Devuelve un árbol anidado de tablas que representa la jerarquía de carpetas para mostrar de los objetos (por ejemplo, dimensiones y medidas) que se pueden usar en el <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "Devuelve una tabla que contiene el conjunto de propiedades disponibles para las medidas que se expanden en el cubo.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene el conjunto de propiedades disponibles para las medidas que se expanden en el cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "Devuelve una tabla que contiene el conjunto de medidas disponibles.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene el conjunto de medidas disponibles dentro del <code>cube</code>.\r\n    Cada medida se representa como una función. Se pueden aplicar medidas al cubo mediante Cube.AddMeasureColumn.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "Devuelve una tabla que contiene el conjunto de parámetros que se pueden aplicar al cubo.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene el conjunto de parámetros a los que se puede aplicar <code>cube</code>. Cada parámetro es una función que se puede invocar para obtener <code>cube</code> con el parámetro y sus argumentos aplicados.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "Devuelve una tabla que contiene el conjunto de propiedades disponibles para las dimensiones que se expanden en el cubo.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene el conjunto de propiedades disponibles para las dimensiones que se expanden en el cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Escriba la dirección URL de su cuenta de Azure Data Lake Storage Gen1.",
        "Documentation.LongDescription": "Muestra una tabla que contiene una fila para cada carpeta encontrada en la dirección <code>url</code> de Azure Data Lake Storage Gen1. Cada una de las filas contiene propiedades de la carpeta y un vínculo a su contenido."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "Escriba la dirección URL de su cuenta de Azure Data Lake Storage.",
        "Documentation.LongDescription": "Muestra una tabla que contiene una fila para cada archivo encontrado en la dirección <code>url</code>, de Azure Data Lake Storage Gen1. Cada una de las filas contiene propiedades del archivo y un vínculo a su contenido."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (API SQL)",
        "Documentation.Description": "Escriba la URL de una cuenta de Azure Cosmos DB.",
        "Documentation.LongDescription": "Devuelve una tabla de bases de datos de Azure Cosmos DB en <code>url</code>. Si se especifica <code>database</code>, se devolverá una tabla de colecciones. Además, si se especifica el campo <code>Query</code> en el registro <code>options</code>, se devolverán los resultados de la consulta que se está ejecutando en la colección o base de datos especificadas."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV370",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV370(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "Escriba la URL del punto de conexión de su servicio OData para Dynamics 365 Business Central (local).",
        "Documentation.DisplayName": "Dynamics 365 Business Central (local)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (local)",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics 365 Business Central (local). "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "Escriba la URL del punto de conexión de su servicio OData para Dynamics NAV.",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics NAV. "
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "Devuelve los cubos de una instancia de Essbase agrupados por servidor de Essbase.",
        "Documentation.LongDescription": "Devuelve una tabla de cubos agrupada por el servidor de Essbase desde una instancia de Essbase en el servidor de APS <code>url</code>. Se puede especificar un parámetro de registro adicional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "Devuelve el contenido del libro de Excel.",
        "Documentation.LongDescription": "Devuelve el contenido del libro de Excel.\r\n    <ul>\r\n     <li> <code>useHeaders</code> puede ser NULL, un valor lógico (\"true\" o \"false\") que indique si la primera fila de cada tabla devuelta debe tratarse como un encabezado o como un registro de opciones. El valor predeterminado es \"false\".</li>\r\n     <li> <code>delayTypes</code> puede ser NULL o un valor lógico (\"true\" o \"false\") que indique si las columnas de cada tabla devuelta deben dejarse sin tipo. El valor predeterminado es \"false\".</li>\r\n    </ul>\r\n\r\n    Si se especifica un registro para <code>useHeaders</code> (y <code>delayTypes</code> es NULL), se pueden proporcionar los siguientes campos de registro:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: puede ser NULL o un valor lógico (\"true\" o \"false\") que indique si la primera fila de cada tabla devuelta se debe tratar como encabezado. El valor predeterminado es \"false\".</li>\r\n     <li> <code>DelayTypes</code>: puede ser NULL o un valor lógico (\"true\" o \"false\") que indique si las columnas de cada tabla devuelta deben dejarse sin tipo. El valor predeterminado es \"false\".</li>\r\n     <li> <code>InferSheetDimensions</code>: puede ser NULL o un valor lógico (\"true\" o \"false\") que indique si el área de una hoja de cálculo que contiene datos se debe inferir leyendo la propia hoja de cálculo, en lugar de leer los metadatos de dimensión del archivo. Esto puede ser útil en los casos en los que los metadatos de dimensión no son correctos. Tenga en cuenta que esta opción solo se admite para archivos OpenXML de Excel, no para archivos heredados de Excel. El valor predeterminado es \"false\".</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Devuelve el contenido de Sheet1 desde un libro de Excel.",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "Devuelve una tabla con las propiedades y el contenido de los archivos y carpetas que se encuentran en la carpeta especificada.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila por cada carpeta y archivo encontrados en la carpeta <code>path</code>. Cada fila contiene propiedades de la carpeta o archivo y un vínculo a su contenido. El parámetro <code>options</code> está pensado actualmente solo para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "Devuelve una tabla que contiene las propiedades y el contenido de las carpetas y los archivos encontrados en la carpeta y las subcarpetas especificadas.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para cada archivo que se encuentra en la carpeta <code>path</code> y todas sus subcarpetas. Cada fila contiene propiedades del archivo y un vínculo a su contenido. El parámetro <code>options</code> está pensado actualmente solo para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "Importar datos desde una base de datos de Google BigQuery mediante Azure AD",
        "Documentation.LongDescription": "\r\n      Devuelve una tabla que enumera los proyectos disponibles en Google BigQuery mediante Azure AD para <code>Id. de proyecto de facturación</code> . Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: una duración que controla el tiempo de espera antes de abandonar un intento de establecer una conexión con el servidor. El valor predeterminado es valor de tiempo de espera de conexión ODBC.</li>\r\n        <li><code>CommandTimeout</code>: duración que controla cuánto tiempo se permite ejecutar la consulta del lado servidor antes de cancelarse.</li>\r\n        <li><code>UseStorageApi</code>: especifica si se va a usar la API de almacenamiento de BigQuery para conjuntos de resultados grandes. El valor predeterminado es true para usar la API de almacenamiento. Se establece en false para no usar la API de almacenamiento</li>\r\n        <li><code>AudienceUri</code>: este es el URI de audiencia que el controlador ODBC puede usar para sus solicitudes de intercambio de tokens. Este campo debe ser un URI completo (es decir, //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/azuread), donde pool_id es un nombre único global para identificar el grupo de empleados.</li>\r\n      </ul>\r\n    El parámetro de registro se especifica como [option1 = value1, option2 = value2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Mostrar los proyectos disponibles en Google BigQuery mediante Azure AD",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Hojas de cálculo de Google",
        "Documentation.Caption": "Hojas de cálculo de Google",
        "Documentation.Description": "Importe datos de GoogleSheets",
        "Documentation.LongDescription": "Importe datos de GoogleSheets"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "Devuelve una tabla de navegación que contiene los contenedores encontrados en la cuenta especificada de un depósito de Azure.",
        "Documentation.LongDescription": "Devuelve una tabla de navegación que contiene una fila por cada contenedor encontrado en la dirección URL de la cuenta, <code>account</code>, de un depósito de Azure. Cada fila contiene un vínculo a los blobs del contenedor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "Devuelve una tabla de navegación que contiene los contenedores encontrados en la cuenta especificada de un depósito de Azure.",
        "Documentation.LongDescription": "Devuelve una tabla de navegación que contiene una fila por cada contenedor encontrado en la dirección URL de la cuenta, <code>account</code>, de un depósito de Azure. Cada fila contiene un vínculo a los blobs del contenedor.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "Devuelve una tabla que contiene las propiedades y el contenido de las carpetas y los archivos encontrados en la carpeta especificada del sistema de archivos Hadoop.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para cada carpeta y archivo encontrados en la dirección URL de la carpeta, <code>url</code>, de un sistema de archivos Hadoop. Cada fila contiene las propiedades de la carpeta o el archivo y un vínculo a su contenido.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "Devuelve una tabla que contiene las propiedades y el contenido de los archivos encontrados en la carpeta y las subcarpetas especificadas del sistema de archivos Hadoop.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para archivo encontrado en la dirección URL de la carpeta, <code>url</code>, y las subcarpetas de un sistema de archivos Hadoop. Cada fila contiene las propiedades del archivo y un vínculo a su contenido.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "Importa datos de un clúster de Impala",
        "Documentation.LongDescription": "Importa datos de un clúster de Impala <code>server</code>. Se no se ha especificado ningún puerto, el puerto predeterminado que se usará será 21050.",
        "Documentation.Examples": [
          {
            "Description": "Enumera las tablas en un clúster de Impala.",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "Importa datos de Azure Data Explorer (Kusto).",
        "Documentation.DisplayName": "Azure Data Explorer (Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure Data Explorer (Kusto)",
        "Documentation.LongDescription": "Importa datos de una instancia de Azure Data Explorer (Kusto).",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla de información sobre Storm Events",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "Una tabla que contiene Storm Events de la base de datos \"Samples\" del clúster \"help\"."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "Navegador de ventas de LinkedIn",
        "Documentation.LongDescription": "Navegador de ventas de LinkedIn",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla con datos desde un punto de conexión de MailChimp.",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "Realiza una llamada a la API de MailChimp y devuelve el conjunto de datos resultante en forma de tabla. Pasa por todos los resultados automáticamente. El parámetro opcional entityName puede usarse para los puntos de conexión de la API en los que el punto de conexión raíz y el parámetro entityName principal en la respuesta de JSON no coinciden.",
        "Documentation.Examples": [
          {
            "Description": "Extrae una tabla de datos desde el punto de conexión de listas de la API de MailChimp.",
            "Code": "MailChimp.Collection(\"listas\")",
            "Result": "Una tabla con datos de lista."
          },
          {
            "Description": "Extrae una tabla de datos desde el punto de conexión de carpetas de campaña de la API de MailChimp.",
            "Code": "MailChimp.Collection(\"carpetas de campaña\", \"carpetas\")",
            "Result": "Una tabla con datos de carpetas de campaña."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "Devuelve resultados de respuesta sin formato desde un punto de conexión de la API de MailChimp.",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "Realiza una llamada a la API de MailChimp y devuelve la respuesta sin formato.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve datos sin procesar desde el punto de conexión de informes o detalles de clic de la API de MailChimp para una campaña determinada.",
            "Code": "MailChimp.Instance(\"informes/{campaign_id}/detalles de clic\")",
            "Result": "Datos sin procesar de los detalles de clic de la campaña determinada."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy para Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "Proporciona funciones avanzadas para las consultas.",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "Proporciona funciones avanzadas para las consultas.",
        "Documentation.Examples": [
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes al período comprendido entre el 01/05/2017 y el 15/06/2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos de los resúmenes correspondientes al periodo comprendido entre el 01/05/2017 y el 15/06/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes a abril de 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/04/2017 y el 30/04/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes al periodo comprendido entre abril de 2017 hasta ahora.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/04/2017 y el 15/06/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes al periodo entre el diciembre pasado y febrero.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/12/2016 y el 28/02/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los cargos de Marketplace correspondientes a los últimos 18 meses.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/12/2015 y el 15/06/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los cargos detallados correspondientes a mayo y junio de 2017.",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/05/2017 y el 15/06/2017."
          },
          {
            "Description": "Suponiendo que hoy es 03/07/2017, se obtienen los cargos detallados para julio de 2016.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá datos de entre el 01/07/2016 y el 31/07/2016."
          },
          {
            "Description": "Suponiendo que hoy es 13/07/2017, obtiene los resúmenes de los balances correspondientes a los últimos 10 meses, incluidos los 13 días del mes en curso.",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/09/2016 y el 13/07/2017."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure Consumption Insights",
        "Documentation.Description": "Microsoft Azure Consumption Insights",
        "Documentation.DisplayName": "Microsoft Azure Consumption Insights",
        "Documentation.LongDescription": "Microsoft Azure Consumption Insights",
        "Documentation.Name": "Microsoft Azure Consumption Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "Devuelve una tabla de las vistas y las tablas de SQL del origen de datos de ODBC. ",
        "Documentation.LongDescription": "Devuelve una tabla de las vistas y las tablas de SQL del origen de datos ODBC especificado por la cadena de conexión <code>connectionString</code>. <code>connectionString</code> puede ser texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado es de 15&#160;segundos.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Permite devolver las tablas y vistas SQL de la cadena de conexión proporcionada.",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "Devuelve una tabla de las vistas y las tablas de SQL del origen de datos OLE DB.",
        "Documentation.LongDescription": "Devuelve una tabla de las vistas y las tablas de SQL del origen de datos OLE DB especificado por la cadena de conexión <code>connectionString</code>. <code>connectionString</code> puede ser un texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (true o false) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es true).</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [option1 = value1, option2 = value2...] o [Query = \" select ...\" ], por ejemplo.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "Devuelve una tabla de tablas y vistas de SQL desde Oracle Database.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL de Oracle Database en el servidor <code>server</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "Devuelve cualquier tabla encontrada en un archivo PDF.",
        "Documentation.LongDescription": "Devuelve las tablas encontradas en <code>pdf</code>. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener estos campos:\r\n    <ul>\r\n<li><code>Implementation</code> : La versi&#243;n del algoritmo que se utilizar&#225; para identificar las tablas. Las versiones antiguas est&#225;n disponibles s&#243;lo por compatibilidad con el pasado, para evitar que las consultas antiguas se rompan por las actualizaciones del algoritmo. La versi&#243;n m&#225;s reciente deber&#237;a dar siempre los mejores resultados. Los valores v&#225;lidos son &quot;1.3&quot;, &quot;1.2&quot;, &quot;1.1&quot; o nulo.</li>\r\n<li><code>StartPage</code> : Especifica la primera p&#225;gina del intervalo de p&#225;ginas que hay que examinar. El valor predeterminado es &quot;1&quot;.</li>\r\n<li><code>EndPage</code> : Especifica la &#250;ltima p&#225;gina del intervalo de p&#225;ginas que hay que examinar. La opci&#243;n predeterminada es la &#250;ltima p&#225;gina del documento.</li>\r\n<li><code>MultiPageTables</code> : Controla si las tablas similares de las p&#225;ginas consecutivas se combinar&#225;n autom&#225;ticamente en una sola tabla. El valor predeterminado es &quot;true&quot;.</li>\r\n<li><code>EnforceBorderLines</code> : Controla si las l&#237;neas de borde siempre se aplican como l&#237;mites de celda (cuando el valor es &quot;true&quot;) o solo se utilizan como una de las sugerencias para determinar los l&#237;mites de la celda (cuando el valor es &quot;false&quot;). El valor predeterminado es &quot;false&quot;.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": [
          {
            "Description": "Devuelve las tablas de sample.pdf.",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "Especifique la dirección URL de su cuenta de Planview Projectplace.",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Planview Projectplace."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "Þỳтħθⁿ ŝćřίþţ",
        "Documentation.Description": "Е×зčυтёś Þýţĥǿи ŝćřïрŧ αňď ѓєтџŗŋş đãτă ƒřáмєŝ",
        "Documentation.Examples": {
          "Description": "Е×зčυтёś Þýţĥǿи ŝćřïрŧ αňď ѓєтџŗŋş đãτă ƒřáмєŝ",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "Ŕ şčгįρţ",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "Devuelve una tabla en la que cada fila es un nombre de campo y un valor del registro de entrada.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene las columnas <code>Name</code> y <code>Value</code> con una fila para cada campo en <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Devolver la tabla del registro.",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "Muestra los paquetes de una base de datos SAP HANA.",
        "Documentation.LongDescription": "Devuelve una tabla de paquetes multidimensionales de la base de datos SAP HANA <code>server</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>Distribution</code> : SapHanaDistribution que establece el valor de la propiedad &quot;Distribuci&#243;n&quot; en la cadena de conexi&#243;n. El enrutamiento de instrucciones es el m&#233;todo para evaluar el nodo de servidor correcto de un sistema distribuido antes de la ejecuci&#243;n de instrucciones. SapHanaDistribution.All es el valor predeterminado.</li>\r\n<li><code>Implementation</code> : Especifica la implementaci&#243;n del conector SAP HANA que se va a usar.</li>\r\n<li><code>EnableColumnBinding</code> : Enlaza variables a las columnas de un conjunto de resultados de SAP&#160;HANA al capturar datos. Puede mejorar potencialmente el rendimiento a costa de un uso de memoria ligeramente mayor. El valor predeterminado es falso.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado es de 15&#160;segundos.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "Devuelve una tabla con contenido de un sitio de SharePoint.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para cada carpeta y documento encontrados en el sitio de SharePoint especificado, <code>url</code>. Cada fila contiene las propiedades de la carpeta o el archivo y un vínculo a su contenido. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un n&#250;mero (14 o 15) o el texto &quot;Auto&quot; que especifica la versi&#243;n de la API de SharePoint que se usar&#225; para este sitio. Cuando no se especifica, se usa la versi&#243;n 14 de la API. Cuando se especifica Auto, la versi&#243;n del servidor se detectar&#225; autom&#225;ticamente si es posible; de lo contrario, se usar&#225; la versi&#243;n predeterminada 14. Los sitios de SharePoint que no est&#225;n en ingl&#233;s requieren al menos la versi&#243;n 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "Devuelve una tabla que contiene documentos de un sitio web de SharePoint.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para cada documento encontrado en el sitio de SharePoint especificado, <code>url</code>, y las subcarpetas. Cada fila contiene las propiedades de la carpeta o el archivo y un vínculo a su contenido. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un n&#250;mero (14 o 15) o el texto &quot;Auto&quot; que especifica la versi&#243;n de la API de SharePoint que se usar&#225; para este sitio. Cuando no se especifica, se usa la versi&#243;n 14 de la API. Cuando se especifica Auto, la versi&#243;n del servidor se detectar&#225; autom&#225;ticamente si es posible; de lo contrario, se usar&#225; la versi&#243;n predeterminada 14. Los sitios de SharePoint que no est&#225;n en ingl&#233;s requieren al menos la versi&#243;n 15.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "Devuelve una tabla que incluye contenido de una lista de SharePoint.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila para cada elemento de lista encontrado en la lista de SharePoint especificada, <code>url</code>. Cada fila contiene las propiedades de la lista. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>ApiVersion</code> : Un n&#250;mero (14 o 15) o el texto &quot;Auto&quot; que especifica la versi&#243;n de la API de SharePoint que se usar&#225; para este sitio. Cuando no se especifica, se usa la versi&#243;n 14 de la API. Cuando se especifica Auto, la versi&#243;n del servidor se detectar&#225; autom&#225;ticamente si es posible; de lo contrario, se usar&#225; la versi&#243;n predeterminada 14. Los sitios de SharePoint que no est&#225;n en ingl&#233;s requieren al menos la versi&#243;n 15.</li>\r\n<li><code>Implementation</code> : Opcional. Especifica la versi&#243;n del conector de SharePoint que se va a usar. Los valores aceptados son &quot;2.0&quot; o null. Si el valor es &quot;2.0&quot;, se usa la implementaci&#243;n&#160;2.0 del conector de SharePoint. Si el valor es null, se usa la implementaci&#243;n original del conector de SharePoint.</li>\r\n<li><code>ViewMode</code> : Opcional. Esta opci&#243;n solo es v&#225;lida para la implementaci&#243;n&#160;2.0. Los valores aceptados son &quot;Todas&quot; y &quot;Predeterminado&quot;. Si no se especifica ning&#250;n valor, el valor se establece en &quot;Todas&quot;. Cuando se especifica &quot;Todas&quot;, la vista incluye todas las columnas creadas por el usuario y definidas por el sistema. Cuando se especifica &quot;Predeterminado&quot;, la vista coincidir&#225; con lo que el usuario vea al ver la lista en l&#237;nea en la vista que el usuario establezca como predeterminada en su configuraci&#243;n. Si el usuario edita la vista predeterminada para agregar o quitar columnas creadas por el usuario o definidas por el sistema, o al crear una nueva vista y establecerla como predeterminada, estos cambios se propagar&#225;n a trav&#233;s del conector.</li>\r\n<li><code>DisableAppendNoteColumns</code> : Evita que el conector utilice un punto de conexi&#243;n independiente para las columnas de notas.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "Devuelve una tabla a partir del contenido de la URL especificada cuyo formato se corresponde con la API SODA 2.0.",
        "Documentation.LongDescription": "Devuelve una tabla a partir del contenido de la URL especificada <code>url</code> cuyo formato se corresponde con la API SODA 2.0. La dirección URL debe apuntar a una fuente válida compatible con SODA que acabe en una extensión .csv.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "Esta función puede utilizarse para llamar a cualquiera de los extremos de \"Listas\" ofrecidos por la API SparkPost v1. Cuando realice llamadas a la API SparkPost con esta función, tenga en cuenta que la API SparkPost tiene un límite de frecuencia de API estricto. Si el servidor de SparkPost devuelve un código de estado 429, significa que ha alcanzado el límite de frecuencia y tendrá que esperar unos minutos antes de realizar más llamadas.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con una sola columna rellena con los datos de uno de los extremos \"Listas\" de la API SparkPost v1 (consulte la documentación de SparkPost para obtener más detalles).",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "Recupere las tablas integradas expuestas por el conector de SparkPost con los datos acumulados durante el número de días especificado por el usuario. Cuando actualice estas tablas o realice llamadas a la API de SparkPost con este conector, tenga en cuenta que la API de SparkPost tiene un límite de frecuencia de API estricto. Si el servidor de SparkPost devuelve un código de estado 429, significa que ha alcanzado el límite de frecuencia, por lo que deberá esperar unos minutos antes de realizar más llamadas. Al elegir un valor para el parámetro Número de días, tenga en cuenta que la API solo almacena 6 meses de datos."
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "Devuelve una tabla de bases de datos de SQL Server.",
        "Documentation.LongDescription": "Devuelve una tabla de bases de datos en el servidor SQL Server especificado, <code>server</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Un n&#250;mero que establece el valor de la cl&#225;usula de consulta &quot;maxdop&quot; de la consulta SQL generada.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n<li><code>MultiSubnetFailover</code> : Valor l&#243;gico (True o False) que define el valor de la propiedad &quot;MultiSubnetFailover&quot; en la cadena de conexi&#243;n (el valor predeterminado es False).</li>\r\n<li><code>UnsafeTypeConversions</code> : Operador l&#243;gico (&quot;true&quot; o &quot;false&quot;) que, si es &quot;true&quot;, intenta plegar las conversiones de tipos que pueden generar un error y provocar errores en toda la consulta. No se recomienda para uso general.</li>\r\n<li><code>ContextInfo</code> : Valor binario que se usa para establecer CONTEXT_INFO antes de ejecutar cada comando.</li>\r\n<li><code>OmitSRID</code> : Operador l&#243;gico (&quot;true&quot; o &quot;false&quot;) que, si es &quot;true&quot;, omite el SRID cuando se produce texto conocido a partir de tipos de geometr&#237;a y geogr&#225;ficos.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Valor l&#243;gico (VERDADERO/FALSO) que, si es VERDADERO, permitir&#225; plegar consultas a bases de datos en el mismo servidor. El valor predeterminado es FALSO.</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...], por ejemplo.\r\n    <br>\r\n    No admite establecer una consulta SQL para que se ejecute en el servidor. En su lugar, para ejecutar una consulta SQL, se debe usar <code>Sql.Database</code>.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "Hace una llamada a la API de Stripe, con la opción de limitar el número de llamadas a la API que se hacen.",
        "Documentation.LongDescription": "Hace una llamada a la API de Stripe en https://api.stripe.com/v1/<code>method</code>, con el registro <code>query</code> opcional que se pasa como parámetros adicionales y <code>pageLimit</code> opcional como límite del número de solicitudes de API. En primer lugar se devuelven los datos más recientes. Si no se especifica <code>pageLimit</code>, se devuelven todos los datos. Se usa Stripe versión 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve todos los datos sobre los cargos",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "Una tabla con todos los datos sobre los cargos de la cuenta de Stripe actual"
          },
          {
            "Description": "Devuelve una página de los datos sobre los cargos",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "Una tabla con los datos sobre los cargos más recientes de la cuenta de Stripe actual"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "Almacena en búfer una tabla en memoria, aislándola de los cambios externos durante la evaluación.",
        "Documentation.LongDescription": "Almacena en búfer una tabla en memoria, aislándola de los cambios externos durante la evaluación.\r\n    El almacenamiento en búfer es superficial. Fuerza la evaluación de cualquier valor de celda escalar, pero deja los valores no escalares (registros, listas, tablas, etc.) tal cual. \r\n    <br>\r\n    <br>\r\n    Tenga en cuenta que el uso de esta función puede o no hacer que las consultas se ejecuten más rápido. En algunos casos, puede hacer que las consultas se ejecuten más lentamente debido al costo \r\n    agregado de leer todos los datos y almacenarlos en memoria, así como el hecho de que el almacenamiento en búfer impide el plegado de nivel inferior. Si no es necesario\r\n    almacenar en búfer los datos, use <code>Table.StopFolding</code> en su lugar.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Permite cargar todas las filas de una tabla SQL en la memoria para que las operaciones que siguen en la cadena ya no puedan consultar el servidor SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "Devuelve una tabla que es el resultado de combinar una lista de tablas.",
        "Documentation.LongDescription": "Devuelve una tabla que es el resultado de combinar una lista de tablas, <code>tables</code>. La tabla resultante tendrá una estructura de tipo de fila definida por <code>columns</code>, o bien por una unión de los tipos de entrada si no se especifica <code>columns</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Combinar las tres tablas juntas.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Se combinan tres tablas con diferentes estructuras.",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Se combinan dos tablas y el proyecto para el tipo especificado.",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "Degrada los encabezados de columna a la primera fila de valores.",
        "Documentation.LongDescription": "Degrada los encabezados de columna (es decir, los nombres de columna) a la primera fila de valores. Los nombres de columna predeterminados son \"Columna1\", \"Columna2\" etc.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Disminuir el nivel de la primera fila de valores de la tabla.",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "Quita las filas duplicadas de la tabla.",
        "Documentation.LongDescription": "Quita las filas duplicadas de la tabla.\r\n    Un parámetro opcional, <code>equationCriteria</code>, especifica qué columnas de la tabla se prueban para la duplicación. Si no se especifica <code>equationCriteria</code>, se prueban todas las columnas.<br>\r\n    <br>\r\n    Dado que, a veces, Power Query descarga determinadas operaciones en orígenes de datos de back-end (conocidas como \"plegamiento\") y, a veces, optimiza las consultas mediante \r\n    la omisión de operaciones que no son estrictamente necesarias; en general, no hay ninguna garantía de que se conserve un duplicado específico.\r\n    Por ejemplo, no puede asumir que la primera fila con un conjunto único de valores de columna permanecerá y que se quitarán las filas más abajo de la tabla.\r\n    Si desea que la eliminación de duplicados se comporte de forma predecible, primero es necesario almacenar en búfer la tabla con <code>Table.Buffer</code>.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Quitar las filas duplicadas de la tabla.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "Quitar las filas duplicadas de la columna [b] de la tabla <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code>.",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "Crea una tabla a partir de una lista de columnas y de valores especificados.",
        "Documentation.LongDescription": "Crea una tabla de tipo <code>columns</code> a partir de una lista <code>lists</code> que contiene listas anidadas con los nombres de columna y los valores.\r\n    Si algunas columnas tienen más valores que otras, los valores que faltan se llenarán con el valor predeterminado (\"null\") si las columnas admiten valores \"null\".",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolver una tabla de una lista de nombres de clientes en una lista. Cada valor del elemento de la lista de clientes se convierte en un valor de fila y cada lista se convierte en una columna.",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Crear una tabla a partir de una lista dada de columnas y de una lista de nombres de columna.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Cree una tabla con un número diferente de columnas por fila. El valor de la fila que falta es nulo.",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "Convierte una lista en una tabla aplicando la función de división especificada a cada elemento de la lista.",
        "Documentation.LongDescription": "Convierte una lista <code>list</code> en una tabla aplicando la función de división opcional, <code>splitter</code>, a cada elemento de la lista. De forma predeterminada, se supone que se trata de una lista de valores de texto separados por comas. <code>columns</code> opcional puede ser el número de columnas, una lista de columna o un tipo de tabla. También puede especificarse un parámetro opcional <code>default</code> y <code>extraValues</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Cree una tabla a partir de una lista utilizando el divisor por defecto.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "Cree una tabla a partir de una lista utilizando un divisor personalizado.",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "Cree una tabla a partir de la lista utilizando el divisor Record.FieldValues.",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "Convierte una lista de registros en una tabla.",
        "Documentation.LongDescription": "Convierte <code>records</code>, una lista de registros, en una tabla.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crear una tabla a partir de registros, usando los nombres de los campos de registro como nombres de columna.",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Crear una tabla a partir de registros que tengan columnas con tipo y seleccionar las columnas de número.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "Crea una tabla a partir de una lista de valores de fila y columnas opcionales.",
        "Documentation.LongDescription": "Crea una tabla a partir de la lista <code>rows</code> en la que cada elemento de esta es una lista interna que contiene los valores de columna para una sola fila. Se ha podido proporcionar una lista opcional de nombres de columna, un tipo de tabla o un número de columnas para <code>columns</code>.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devolver una tabla con la columna [CustomerID] con los valores {1, 2}, columna [Name] con los valores {\"Bob\", \"Jim\"}, y la columna [Phone] con los valores {\"123-4567\", \"987-6543\"}.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Devolver una tabla con la columna [CustomerID] con los valores {1, 2}, columna [Name] con los valores {\"Bob\", \"Jim\"} y la columna [Phone] con los valores {\"123-4567\", \"987-6543\"}, donde [CustomerID] es el tipo de número, y [Name] y [Phone] son tipos de texto.",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "Crea una tabla con una columna a partir de los valores suministrados.",
        "Documentation.LongDescription": "Crea una tabla con una columna que contiene el valor o la lista de valores <code>value</code> proporcionados. Se puede especificar una parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code>: el nombre de la columna usada al crear una tabla a partir de una lista o valor escalar.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crea una tabla a partir del valor 1.",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "Crear una tabla a partir de la lista.",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "Cree una tabla a partir del valor 1, con un nombre de columna personalizado.",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "Devuelve información acerca de cómo se ha dividido una tabla en particiones.",
        "Documentation.LongDescription": "Devuelve información acerca de cómo se ha dividido una tabla en particiones.  Se devuelve una tabla en la que cada columna es una columna de partición de la tabla original y cada fila corresponde a una partición de la tabla original.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "Muestra el perfil de las columnas de una tabla.",
        "Documentation.LongDescription": "<p>Muestra un perfil para las columnas de <code>table</code>.</p>\r\n<p>Se muestra la siguiente información de cada columna (cuando es aplicable):\r\n<ul>\r\n  <li>mínimo</li>\r\n  <li>máximo</li>\r\n  <li>promedio</li>\r\n  <li>desviación estándar</li>\r\n  <li>recuento</li>\r\n  <li>recuento nulo</li>\r\n  <li>recuento distinto</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "Promueve la primera fila de valores a encabezados de las nuevas columnas (es decir, nombres de columna).",
        "Documentation.LongDescription": "Promueve la primera fila de valores como encabezados de las nuevas columnas (es decir, nombres de columna). De manera predeterminada, solo los valores de texto o numéricos se promueven a encabezados. Opciones válidas:\r\n    <div>\r\n      <code>PromoteAllScalars</code>: si se define como <code>true</code>, todos los valores escalares de la primera fila se promueven a encabezados con el elemento <code>Culture</code>, si se especificó (o la configuración regional del documento actual).\r\n    En el caso de valores que no se pueden convertir en texto, se usará un nombre de columna predeterminado.\r\n    </div>\r\n    <div>\r\n    <code>Culture</code>: nombre de referencia cultural que especifica la referencia cultural de los datos.\r\n    </div>\r\n  ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Promover la primera fila de valores de la tabla.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "Promueve todos los valores escalares de la primera fila de la tabla a encabezados.",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "Devuelve una tabla con las primeras filas de recuentos omitidas.",
        "Documentation.LongDescription": "Devuelve una tabla que no contiene el primer número de filas especificado (<code>countOrCondition</code>) de la tabla <code>table</code>.\r\n    El número de filas quitadas depende del parámetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li>Si se omite <code>countOrCondition</code>, solo se quita la primera fila. </li>\r\n    <li>Si <code>countOrCondition</code> es un número, se quitarán esas filas (empezando por la parte superior). </li>\r\n    <li>Si <code>countOrCondition</code> es una condición, se quitarán las filas que la cumplan hasta que una no lo haga.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Quitar la primera fila de la tabla.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Quitar las dos primeras filas de la tabla.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Quitar las primeras filas donde [CustomerID] <=2 de la tabla.",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "Devuelve una tabla en la que se han quitado las N últimas filas.",
        "Documentation.LongDescription": "Devuelve una tabla que no contiene las <code>countOrCondition</code> últimas filas de la tabla <code>table</code>.\r\n        El número de filas quitadas depende del parámetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li>Si se omite <code>countOrCondition</code>, solo se quita la última fila. </li>\r\n    <li>Si <code>countOrCondition</code> es un número, se quitarán esas filas (empezando por la parte inferior). </li>\r\n    <li>Si <code>countOrCondition</code> es una condición, se quitarán las filas que la cumplan hasta que una no lo haga.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Quitar la última fila de la tabla.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Quitar las últimas filas donde [CustomerID] > 0 de la tabla.",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "Devuelve una tabla con las filas quitadas de la tabla de entrada que contienen un error en al menos una de las celdas. Si se especifica una lista de columnas, solo las celdas de las columnas especificadas se inspeccionan en busca de errores.",
        "Documentation.LongDescription": "Devuelve una tabla con las filas quitadas de la tabla de entrada que contienen un error en al menos una de las celdas. Si se especifica una lista de columnas, solo las celdas de las columnas especificadas se inspeccionan en busca de errores.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Quitar el valor de error de la primera fila.",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "Devuelve una tabla con las filas en orden inverso.",
        "Documentation.LongDescription": "Devuelve una tabla con las filas de la entrada <code>table</code> en orden inverso.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Invertir las filas de la tabla.",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "Muestra una tabla que contiene una descripción de las columnas (p.e., el esquema) de la tabla especificada.",
        "Documentation.LongDescription": "<p>Regresa una tabla que describe las columnas de <code>table</code>.</p>\r\n<p>Cada fila de la tabla describe las propiedades de una columna de <code>table</code>:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>Nombre de columna</b></td>\r\n    <td><b>Descripción</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Nombre</code></td>\r\n    <td>El nombre de las columnas.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Posición</code></td>\r\n    <td>La posición 0 de la columna in <code>table</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>El nombre del tipo de columna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Tipo</code></td>\r\n    <td>La clase de tipo de la columna.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>Si la columna puede o no contener valores <code>null</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td>La base numérica (por ejemplo, base-2 o base-10) de los campos <code>NumericPrecision</code> y <code>NumericScale</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td>La precisión de una columna numérica en la base especificada por <code>NumericPrecisionBase</code>. Este es el número máximo de dígitos que se puede representar con un valor de este tipo (incluidos los dígitos fraccionarios).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td>La escala de una columna numérica en la base especificada por <code>NumericPrecisionBase</code>. Este es el número de dígitos en la parte fraccionaria de un valor de este tipo. Un valor de <code>0</code> indica una escala fija sin dígitos fraccionarios. Un valor de <code>null</code> indica que la escala no se conoce (ya sea porque es flotante o no está definida).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td> El número máximo de dígitos fraccionarios admitidos en la parte de segundos de un valor de fecha u hora.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td>El número máximo de caracteres permitidos en una columna <code>texto</code>, o el número máximo de bytes permitidos en una columna <code>binary</code>.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>Indica si esta columna puede variar en longitud (hasta <code>MaxLength</code>) o si es de tamaño fijo.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>El nombre del tipo de columna en el sistema de tipos nativo de la fuente (por ejemplo, <code>nvarchar</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>La expresión predeterminada para un valor de esta columna en el idioma de expresión nativo de la fuente (por ejemplo, <code>42</code> o <code>newid()</code> para SQL Server).</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>La descripción de la columna.</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "Devuelve una tabla solo con aquellas filas de la tabla de entrada que contienen un error en al menos una de las celdas. Si se especifica una lista de columnas, solo las celdas de las columnas especificadas se inspeccionan en busca de errores.",
        "Documentation.LongDescription": "Devuelve una tabla solo con aquellas filas de la tabla de entrada que contienen un error en al menos una de las celdas. Si se especifica una lista de columnas, solo las celdas de las columnas especificadas se inspeccionan en busca de errores.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Seleccionar los nombres de los clientes que tengan errores en las filas.",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "Devuelve una tabla con las primeras filas de recuentos omitidas.",
        "Documentation.LongDescription": "Devuelve una tabla que no contiene el primer número de filas especificado (<code>countOrCondition</code>) de la tabla <code>table</code>.\r\n    El número de filas omitidas depende del parámetro opcional <code>countOrCondition</code>.\r\n    <ul>\r\n    <li>Si se omite <code>countOrCondition</code>, solo se omitirá la primera fila. </li>\r\n    <li>Si <code>countOrCondition</code> es un número, se omitirán esas filas (a partir de la primera). </li>\r\n    <li>Si <code>countOrCondition</code> es una condición, se omitirán las filas que la cumplan hasta que una no lo haga.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Omitir la primera fila de la tabla.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Omitir las primeras dos filas de la tabla.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Omitir las primeras filas donde [Price] > 25 de la tabla.",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "Impide que se ejecuten operaciones de nivel inferior en el origen original de los datos.",
        "Documentation.LongDescription": "Impide que se ejecuten operaciones de nivel inferior en el origen original de los datos de <code>table</code>.",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "Captura datos de una tabla SQL de forma que impide que las operaciones de nivel inferior se ejecuten como una consulta en el servidor SQL Server.",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "Convierte las columnas en filas y las filas en columnas.",
        "Documentation.LongDescription": "Convierte las columnas en filas y las filas en columnas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Crear las filas de la tabla de pares nombre-valor en columnas.",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "Obtiene las relaciones entre un conjunto de tablas.",
        "Documentation.LongDescription": "Obtiene las relaciones entre un conjunto de tablas. Se presupone que el conjunto <code>tables</code> tiene una estructura similar a la de una tabla de navegación. La columna definida por <code>dataColumn</code> contiene las tablas de datos reales.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "Devuelve una tabla de tablas y vistas de SQL desde la base de datos de Teradata.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL de la base de datos Teradata en el servidor <code>server</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Time Series Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "Escriba el número de meses de datos históricos de Twilio que se quieren recuperar.",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "Devuelve una tabla con datos relevantes de Twilio."
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "Muestra una tabla que contiene una descripción de las columnas (es decir, el esquema) del tipo de tabla especificado.",
        "Documentation.LongDescription": "<p>Muestra una tabla que describe las columnas de <code>tableType</code>.</p>\r\n<p>Consulte la documentación de <code>Table.Schema</code> para ver la descripción de la tabla resultante.</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Fuente de Azure DevOps Services",
        "Documentation.DisplayName": "Fuente de Azure DevOps Services",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "Devuelve una tabla de fuentes de OData ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "Conectar a datos Ideas Viva",
        "Documentation.LongDescription": "Importe datos de atributos y métricas semanales de Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con atributos visibles y métricas semanales para cada empleado medido en la partición.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "Devuelve el contenido del documento HTML dividido en sus estructuras constitutivas, así como una representación de todo el documento y su texto después de quitar las etiquetas.",
        "Documentation.LongDescription": "Devuelve el contenido del documento HTML dividido en sus estructuras constitutivas, así como una representación de todo el documento y su texto después de quitar las etiquetas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla con las métricas clave de Webtrends.",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "Realiza una llamada al punto de conexión de Webtrends KeyMetrics y devuelve todos los datos en forma de tabla.",
        "Documentation.Examples": [
          {
            "Description": "Extrae una tabla de métricas clave para el inquilino 98765 en los últimos 30 días",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "Una tabla de métricas clave"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "Introduzca el Id. de perfil asociado con su cuenta de Webtrends.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "Devuelve una tabla con las métricas relevantes de Webtrends."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "Conectar a datos Ideas Viva",
        "Documentation.LongDescription": "Importe datos de atributos y métricas semanales de Workplace Analytics.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con atributos visibles y métricas semanales para cada empleado medido en la partición.",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#table({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "Devuelve el contenido del documento XML como una tabla jerárquica.",
        "Documentation.LongDescription": "Devuelve el contenido del documento XML como una tabla jerárquica.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "Devuelve el contenido del documento XML como una colección anidada de tablas sin formato.",
        "Documentation.LongDescription": "Devuelve el contenido del documento XML como una colección anidada de tablas sin formato.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupere el contenido de un archivo XML local.",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "Escriba la URL de su cuenta de Zendesk.",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Zendesk."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "Devuelve la colección de esquema para un origen de datos de ADO.NET.",
        "Documentation.LongDescription": "Devuelve la colección de esquema para el origen de datos de ADO.NET con el nombre de proveedor <code>providerName</code> y la cadena de conexión <code>connectionString</code>. <code>connectionString</code> puede ser texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (beta)",
        "Documentation.Description": "Importar datos de una base de datos de Amazon Redshift.",
        "Documentation.LongDescription": "Devuelve una tabla en la que se muestran las tablas del <code>servidor</code> de clúster de Amazon Redshift en la base de datos <code>base de datos</code>.  Se puede especificar un parámetro de registro opcional, <code>opciones</code>, para controlar las siguientes opciones:\r\n<ul>\r\n<li><code>Nombre de proveedor</code>: un valor de texto que se usará como nombre del proveedor para la conexión. Se usa cuando se usa Microsoft Authentication.</li>\r\n<li><code>Tamaño de lote</code>: el número de filas que se capturan en una sola llamada al servidor.</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "Devuelve una tabla de cubos multidimensionales o de modelos tabulares de la base de datos de Analysis Services.",
        "Documentation.LongDescription": "Devuelve una tabla de cubos multidimensionales o de modelos tabulares de la base de datos <code>database</code> de Analysis Services que se encuentra en el servidor <code>server</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>Query</code> : Una consulta MDX nativa usada para recuperar datos.</li>\r\n<li><code>TypedMeasureColumns</code> : Un valor l&#243;gico que indica si los tipos especificados del modelo tabular o multidimensional se usar&#225;n para los tipos de columnas de medidas agregadas. Cuando se establece en false, el tipo &quot;number&quot; se usar&#225; para todas las columnas de medidas. El valor predeterminado para esta opci&#243;n es false.</li>\r\n<li><code>Culture</code> : Un nombre de referencia cultural que especifica la referencia cultural de los datos. Este se corresponde con la propiedad de cadena de conexi&#243;n &quot;Locale Identifier&quot;.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>SubQueries</code> : N&#250;mero (0, 1 o 2) que establece el valor de la propiedad &quot;SubQueries&quot; en la cadena de conexi&#243;n. Controla el comportamiento de los miembros calculados en subselecciones o subcubos, y el valor predeterminado es 2.</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Devuelve una tabla que enumera las tablas del clúster de Spark especificado.",
        "Documentation.LongDescription": "Devuelve una tabla que enumera las tablas del clúster de Spark <code>host</code>, mediante <code>protocol</code>. Los protocolos válidos son:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla que enumera las tablas del clúster de Spark especificado.",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Especifique el nombre de la organización y del proyecto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (solo paneles)",
        "Documentation.LongDescription": "Devuelve una tabla de vistas de Analytics ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "Permite importar datos de HDInsight Interactive Query.",
        "Documentation.LongDescription": "\r\nDevuelve una lista de tablas de HDInsight Interactive Query que especifica la base de datos <code>database</code> en el servidor de HDInsight Interactive Query <code>server</code>. Opcionalmente, se puede especificar un número de puerto con el servidor separado por dos puntos. También se puede especificar un parámetro de opciones, <code>options</code>, para controlar las opciones siguientes:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: duración que controla cuánto tiempo hay que esperar antes de dejar de intentar establecer una conexión con el servidor. El valor predeterminado depende del controlador.</li>\r\n        <li><code>CommandTimeout</code>: duración que controla durante cuánto tiempo se puede ejecutar la consulta de servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n</ul>\r\nEl parámetro <code>options</code> se especifica como [opción1 = valor1, opción2 = valor2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "Devuelve una tabla con columnas asignadas a los atributos de una entidad en Common Data Model, incluidos los tipos de datos.",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "Devuelve una tabla con columnas asignadas a los atributos de una entidad en Common Data Model, incluidos los tipos de datos. Se agregarán las columnas de la definición de la entidad si no se asignan, y se quitarán todas las comunas no asignadas.",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "CloudBluePSA",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "Devuelve un cubo tras aplicarle un parámetro.",
        "Documentation.LongDescription": "Devuelve un cubo tras aplicarle <code>parameter</code> con <code>arguments</code> a <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "Cambia la granularidad de dimensión del contexto de filtro del cubo contrayendo los atributos asignados a las columnas especificadas.",
        "Documentation.LongDescription": "Cambia la granularidad de dimensión del contexto de filtro del <code>cube</code> contrayendo los atributos asignados a las columnas especificadas <code>columnNames</code>. Las columnas también se quitan de la vista tabular del cubo.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "Reemplaza el conjunto de dimensiones devuelto por Cube.Dimensions.",
        "Documentation.LongDescription": "Reemplaza el conjunto de dimensiones devuelto por <code>Cube.Dimensions</code>.\r\n    Por ejemplo, esta función se puede usar para agregar una columna Id. a un atributo de dimensión, de forma que el origen de datos pueda agruparse en el Id. en lugar del valor mostrado.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "Aplica una lista de funciones de cubo.",
        "Documentation.LongDescription": "Aplica la lista de funciones de cubo, <code>transforms</code>, en el <code>cube</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "Devuelve una tabla de tablas y vistas de SQL disponibles en una base de datos Db2.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL disponibles en una base de datos Db2 en el servidor <code>server</code> de la instancia de base de datos denominada <code>database</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n<li><code>Implementation</code> : Especifica la implementaci&#243;n interna del proveedor de base de datos que se debe usar. Los valores v&#225;lidos son: &quot;IBM&quot; y &quot;Microsoft&quot;.</li>\r\n<li><code>BinaryCodePage</code> : N&#250;mero del CCSID (Identificador codificado del juego de caracteres) para descodificar datos binarios Db2 FOR BIT en cadenas de caracteres. Se aplica a Implementation = &quot;Microsoft&quot;. Establ&#233;zcalo en 0 para deshabilitar la conversi&#243;n (valor predeterminado). Establ&#233;zcalo en 1 para realizar la conversi&#243;n seg&#250;n la codificaci&#243;n de la base de datos. Establezca otro n&#250;mero de CCSID para realizar la conversi&#243;n de acuerdo con la codificaci&#243;n de la aplicaci&#243;n.</li>\r\n<li><code>PackageCollection</code> : Especifica un valor de cadena para la colecci&#243;n de paquetes (el valor predeterminado es &quot; NULLID&quot;) para habilitar el uso de los paquetes compartidos necesarios para procesar instrucciones SQL. Se aplica a Implementation = &quot;Microsoft&quot;.</li>\r\n<li><code>UseDb2ConnectGateway</code> : Especifica si la conexi&#243;n se realiza a trav&#233;s de una puerta de enlace de DB2 Connect. Se aplica a la implementaci&#243;n = &quot;Microsoft&quot;.</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "Permite recuperar un conjunto de datos de Data.World."
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV370",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV370(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "Devuelve una tabla que contiene las propiedades y el contenido de los blobs encontrados en el contenedor especificado de un depósito de Azure.",
        "Documentation.LongDescription": "Devuelve una tabla que contiene una fila por cada archivo de blob encontrado en la dirección URL del contenedor, <code>account</code>, de un depósito de Azure. Cada fila contiene las propiedades del archivo y un vínculo a su contenido.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "Devuelve una tabla que contiene los resultados de ejecutar los selectores CSS especificados en el código HTML proporcionado.",
        "Documentation.LongDescription": "Devuelve una tabla con los resultados de la ejecución de los selectores de CSS especificados en el <code>html</code> que se indicó. Puede proporcionarse un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla de un valor de texto HTML de ejemplo.",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Administrador</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#tabla({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "Permite extraer todos los valores HREF de un valor de texto HTML de ejemplo.",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Prueba</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "Devuelve una tabla con las tablas y las vistas SQL disponibles en una base de datos Informix.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL disponibles en una base de datos Informix en el servidor <code>server</code> de la instancia de base de datos denominada <code>database</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "Devuelve una tabla con los detalles del cliente potencial.",
        "Documentation.LongDescription": "Hace una llamada al punto de conexión de la API de REST de Marketo en <code>url</code>/rest/v1/leads.json. Se devolverán todos los clientes potenciales de la lista <code>leadIds</code>.",
        "Documentation.Examples": [
          {
            "Description": "Extrae los detalles de tres clientes potenciales",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "Una tabla con los detalles de los clientes potenciales suministrados"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "Escriba la dirección URL de la API de REST de Marketo asociada con su cuenta.",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "Devuelve una tabla con datos relevantes de Marketo."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "Devuelve una tabla de tablas, vistas y funciones escalares almacenadas SQL disponibles en una base de datos MySQL.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas, vistas y funciones escalares almacenadas SQL disponibles en una base de datos MySQL en el servidor <code>server</code> de la instancia de base de datos denominada <code>database</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>Encoding</code> : Valor TextEncoding que especifica el juego de caracteres usado para codificar todas las consultas enviadas al servidor (el valor predeterminado es &quot;null&quot;).</li>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>TreatTinyAsBoolean</code> : Un valor l&#243;gico (True o False) que determina si forzar columnas tinyint en el servidor como valores l&#243;gicos. El valor predeterminado es True.</li>\r\n<li><code>OldGuids</code> : Un valor l&#243;gico (True o False) que establece si las columnas char(36) (si su valor es False) o las columnas binary(16) (si su valor es True) se tratar&#225;n como GUID. El valor predeterminado es False.</li>\r\n<li><code>ReturnSingleDatabase</code> : Un valor l&#243;gico (True o False) que determina si devolver todas las tablas de todas las bases de datos (si el valor es False) o si devolver las tablas y las vistas de la base de datos especificada (si el valor es True). El valor predeterminado es False.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "Importa datos de una base de datos IBM Netezza.",
        "Documentation.LongDescription": "\r\nDevuelve una tabla con las tablas, visualizaciones y funciones almacenadas de Netezza de la base de datos <code>database</code> del servidor de Netezza <code>server</code>. Opcionalmente, el puerto se puede especificar con el servidor separado por dos puntos. También se puede especificar un parámetro de registro, <code>options</code>, para controlar las opciones siguientes:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: lógica (\"true\" o \"false\") que establece si hay que generar propiedades de navegación sobre los valores devueltos. El valor predeterminado es \"true\".</li>\r\n        <li><code>HierarchicalNavigation</code>: lógica (\"true\" o \"false\") que establece si hay que consultar las tablas agrupadas según el nombre de su esquema. El valor predeterminado es \"false\".</li>\r\n        <li><code>ConnectionTimeout</code>: duración que controla el período de tiempo que hay que esperar antes de dejar de intentar establecer una conexión con el servidor. El valor predeterminado depende del controlador.</li>\r\n        <li><code>CommandTimeout</code>: duración que controla el período de tiempo durante el que se puede ejecutar la consulta de servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n<li><code>NormalizeDatabaseName</code>: lógica (\"true\" o \"false\") que establece si hay que normalizar el nombre de la base de datos en mayúsculas, o bien es necesario interpretarlo literalmente. El valor predeterminado es \"true\".</li>\r\n</ul>\r\nEl parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...].",
        "Documentation.Examples": [
          {
            "Description": "Enumera las tablas de un proyecto de IBM Netezza.",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "Devuelve el resultado de ejecutar una consulta nativa en un origen de datos de ODBC.",
        "Documentation.LongDescription": "Devuelve el resultado de ejecutar <code>query</code> con la cadena de conexión <code>connectionString</code> mediante ODBC. <code>connectionString</code> puede ser texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado es de 15&#160;segundos.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Permite devolver el resultado de ejecutar una consulta simple en la cadena de conexión proporcionada.",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "Devuelve el resultado de ejecutar una consulta nativa en un origen de datos de OLE DB.",
        "Documentation.LongDescription": "Devuelve el resultado de ejecutar <code>query</code> con la cadena de conexión <code>connectionString</code> mediante OLE DB. <code>connectionString</code> puede ser un texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "Devuelve una tabla de tablas y vistas de SQL disponibles en una base de datos PostgreSQL.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL disponibles en una base de datos PostgreSQL en el servidor <code>server</code> de la instancia de base de datos denominada <code>database</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "Importa datos de un almacén de Snowflake Computing.",
        "Documentation.LongDescription": "Devuelve una tabla que enumera las tablas en <code>warehouse</code> de Snowflake Computing en <code>server</code>. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n<ul>\r\n<li><code>Role</code>: un valor de texto para usarlo como nombre de rol para la conexión.</li>\r\n<li><code>CreateNavigationProperties</code>: un valor lógico (true o false) que establece si se generan propiedades de navegación en los valores devueltos (el valor predeterminado es true)</li>\r\n<li><code>ConnectionTimeout</code>: el número de segundos que se esperará por las respuestas de red de Snowflake.</li>\r\n<li><code>CommandTimeout</code>: el número de segundos que se esperará para que se ejecute una consulta.</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Enumera las tablas en un almacén de Snowflake.",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "Devuelve una tabla que enumera las tablas del clúster de Spark especificado.",
        "Documentation.LongDescription": "Devuelve una tabla que enumera las tablas del clúster de Spark <code>host</code>, mediante <code>protocol</code>. Los protocolos válidos son:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "Lista de tablas en una instancia de Azure Spark.",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "Devuelve una tabla de tablas, vistas y funciones almacenadas de SQL desde la base de datos de SQL Server.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas, vistas y funciones almacenadas SQL de la base de datos SQL Server <code>database</code> en el servidor <code>server</code>. Es posible especificar el puerto con el servidor, separado por dos puntos o una coma. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>MaxDegreeOfParallelism</code> : Un n&#250;mero que establece el valor de la cl&#225;usula de consulta &quot;maxdop&quot; de la consulta SQL generada.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n<li><code>MultiSubnetFailover</code> : Valor l&#243;gico (True o False) que define el valor de la propiedad &quot;MultiSubnetFailover&quot; en la cadena de conexi&#243;n (el valor predeterminado es False).</li>\r\n<li><code>UnsafeTypeConversions</code> : Operador l&#243;gico (&quot;true&quot; o &quot;false&quot;) que, si es &quot;true&quot;, intenta plegar las conversiones de tipos que pueden generar un error y provocar errores en toda la consulta. No se recomienda para uso general.</li>\r\n<li><code>ContextInfo</code> : Valor binario que se usa para establecer CONTEXT_INFO antes de ejecutar cada comando.</li>\r\n<li><code>OmitSRID</code> : Operador l&#243;gico (&quot;true&quot; o &quot;false&quot;) que, si es &quot;true&quot;, omite el SRID cuando se produce texto conocido a partir de tipos de geometr&#237;a y geogr&#225;ficos.</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : Valor l&#243;gico (VERDADERO/FALSO) que, si es VERDADERO, permitir&#225; plegar consultas a bases de datos en el mismo servidor. El valor predeterminado es FALSO.</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "Devuelve una tabla de tablas y vistas de SQL disponibles en una base de datos Sybase.",
        "Documentation.LongDescription": "Devuelve una tabla de tablas y vistas SQL disponibles en una base de datos Sybase en el servidor <code>server</code> de la instancia de base de datos denominada <code>database</code>. Es posible especificar el puerto con el servidor, separado por dos puntos. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (True o False) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es True).</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : Una funci&#243;n que se usa para crear nombres para las propiedades de navegaci&#243;n.</li>\r\n<li><code>Query</code> : Una consulta SQL nativa usada para recuperar datos. Si la consulta produce varios conjuntos de resultados, solo se devolver&#225; el primero.</li>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>ConnectionTimeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo de espera es necesario antes de abandonar un intento de establecer una conexi&#243;n con el servidor. El valor predeterminado depende del controlador.</li>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n</ul>\r\n\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...] o [Query = \"select ...\"], por ejemplo.\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "Anexa una columna con valores de posición explícitos.",
        "Documentation.LongDescription": "Anexar una columna con nombre <code>newColumnName</code> a <code>table</code> con valores de posición explícitos.\r\n    Un valor opcional, <code>initialValue</code>, el valor del índice inicial. Un valor opcional, <code>increment</code>, especifica cuánto aumentar cada valor de índice.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregar una columna de índice denominada \"Índice\" a la tabla.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "Agregar una columna de índice denominada \"índice\", empezando en el valor 10 e incrementando ese valor en 5, a la tabla.",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "Dada una columna de listas de una tabla, crear una copia de una fila para cada valor de la lista.",
        "Documentation.LongDescription": "Dado un <code>table</code>, donde <code>column</code> es una lista de valores, divide la lista en una fila para cada valor. Los valores de otras columnas se duplican en cada nueva fila creada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividir la columna de la lista [Name] en la tabla.",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "Propaga el valor de una celda anterior a las celdas con valor NULL por debajo de la columna.",
        "Documentation.LongDescription": "Devuelve una tabla del <code>table</code> especificado donde el valor de una celda anterior se propaga a las celdas con valor NULL por debajo de la <code>columns</code> especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con los valores NULL en la columna [Place] llena con el valor por encima de la tabla.",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "Propaga el valor de una celda a las celdas con valor NULL por encima de la columna.",
        "Documentation.LongDescription": "Devuelve una tabla del <code>table</code> especificado donde el valor de la celda siguiente se propaga a las celdas con valor NULL por encima de la <code>columns</code> especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con los valores NULL en la columna [Column2] rellenos con el valor por debajo de ellos de la tabla.",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "Devuelve todas las filas que contienen el texto indicado en la tabla.",
        "Documentation.LongDescription": "Devuelve las filas de la tabla <code>table</code> que contienen el texto <code>text</code>. Si no se encuentra el texto, se devuelve una tabla vacía.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar filas de la tabla que contienen \"Pedro\".",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "Devuelve las primeras filas de recuentos especificadas.",
        "Documentation.LongDescription": "Devuelve las primeras filas de la tabla <code>table</code>, en función del valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Si <code>countOrCondition</code> es un número, se devolverán esas filas (a partir de la primera). </li>\r\n    <li> Si <code>countOrCondition</code> es una condición, se devolverán las filas que la cumplan hasta que una no lo haga.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar las primeras dos filas de la tabla.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Buscar las primeras filas donde [a] > 0 en la tabla.",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "Devuelve una tabla que es el resultado de combinar un conjunto de tablas divididas en particiones.",
        "Documentation.LongDescription": "Devuelve una tabla que es el resultado de la combinación de un conjunto de tablas particionadas, <code>partitions</code>. <code>partitionColumn</code> es el nombre de la columna que se debe agregar. El tipo predeterminado de columna es <code>any</code> pero se puede especificar mediante <code>partitionColumnType</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar el tipo de elemento en la lista <code>{number}</code>.",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "Devuelve el último número especificado de filas.",
        "Documentation.LongDescription": "Devuelve las últimas filas de la tabla <code>table</code>, en función del valor de <code>countOrCondition</code>:\r\n    <ul>\r\n    <li> Si <code>countOrCondition</code> es un número, se devolverán esas filas a partir de la posición (final - <code>countOrCondition</code>). </li>\r\n    <li> Si <code>countOrCondition</code> es una condición, se devolverán las filas que la cumplan en posición ascendente hasta que una fila no lo haga.</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar las últimas dos filas de la tabla.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "Buscar las últimas filas donde [a] > 0 en la tabla.",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "Devuelve una tabla donde todas las columnas tienen como prefijo el texto dado.",
        "Documentation.LongDescription": "Devuelve una tabla donde todos los nombres de columna de la <code>table</code> proporcionada tienen como prefijo el texto dado <code>prefix</code>, más un punto en el formato <code>prefix</code><code>.ColumnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Anteponer a las columnas \"MyTable\" en la tabla.",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "Devuelve las filas que empiezan en el desplazamiento especificado.",
        "Documentation.LongDescription": "Devuelve las filas de <code>table</code> a partir del <code>offset</code> especificado. Un parámetro opcional, <code>count</code>, especifica cuántas filas se devolverán. De forma predeterminada, se devuelven todas las filas a continuación del desplazamiento.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver todas las filas a partir del desplazamiento 1 en la tabla.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Devolver una fila a partir del desplazamiento 1 en la tabla.",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "Quita las columnas especificadas.",
        "Documentation.LongDescription": "Quita la <code>columns</code> especificada de <code>table</code> proporcionado.\r\n    Si la columna no existe, se produce un error a menos que el parámetro opcional <code>missingField</code> especifique un comportamiento alternativo (por ejemplo, <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Quitar la columna [Phone] de la tabla.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Intente quitar una columna inexistente de la tabla.",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "Quita todas las coincidencias de las filas especificadas de la tabla.",
        "Documentation.LongDescription": "Quita todas las repeticiones de las <code>rows</code> especificadas de la <code>table</code>.\r\n    Se puede especificar un parámetro <code>equationCriteria</code> opcional para controlar la comparación entre las filas de la tabla.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Quitar las filas en las que [a = 1] de la tabla <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code>.",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "Quita el número especificado de filas.",
        "Documentation.LongDescription": "Quita <code>count</code> de las filas a partir del principio de <code>table</code>, empezando en la <code>offset</code> especificada. Se usa el recuento predeterminado de 1 si el parámetro <code>count</code> no se proporciona. ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Quitar la primera fila de la tabla.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Quitar la fila de la posición 1 de la tabla.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Quitar dos filas a partir de la posición 1 de la tabla.",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "Aplica los cambios de nombre con el formato {old, new}.",
        "Documentation.LongDescription": "Realiza los cambios de nombre indicados a las columnas de la tabla <code>table</code>. Una operación de reemplazo <code>renames</code> consta de una lista de dos valores, el nombre de columna anterior y el nuevo, proporcionados en una lista.\r\n    Si la columna no existe, se inicia una excepción a menos que el parámetro opcional <code>missingField</code> especifique una alternativa (por ejemplo, <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar el nombre de columna \"CustomerNum\" con \"CustomerID\" en la tabla.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Reemplazar el nombre de columna \"CustomerNum\" con \"CustomerID\" y \"PhoneNum\" con \"Phone\" en la tabla.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Reemplazar el nombre de columna \"NewCol\" con \"NewColumn\" en la tabla y omitirlo si la columna no existe.",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "Devuelve una tabla con las columnas en el orden especificado.",
        "Documentation.LongDescription": "Devuelve una tabla de la entrada <code>table</code>, con las columnas en el orden especificado por <code>columnOrder</code>. Las columnas que no se especifiquen en la lista no se volverán a ordenar.\r\n     Si la columna no existe, se inicia una excepción a menos que el parámetro opcional <code>missingField</code> especifique una alternativa (por ejemplo, <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Cambiar el orden de las columnas [Phone] y [Name] en la tabla.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "Cambiar el orden de las columnas [Phone] y [Address] o usar \"MissingField.Ignore\" en la tabla. No cambia la tabla porque la columna [Address] no existe.",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "Repite las filas de las tablas un número de veces especificado.",
        "Documentation.LongDescription": "Devuelve una tabla con las filas de la entrada <code>table</code> repetidas las veces <code>count</code> especificadas.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Repetir las filas de la tabla dos veces.",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "Reemplaza los valores de error en las columnas especificadas por el valor especificado correspondiente.",
        "Documentation.LongDescription": "Reemplaza los valores de error en las columnas especificadas de <code>table</code> por los nuevos valores de la lista <code>errorReplacement</code>. El formato de la lista es {{column1, value1}, …}. Puede haber solo un valor de reemplazo por columna, si se especifica la columna más de una vez, se producirá un error.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar el valor de error por el texto \"world\" en la tabla.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "Reemplazar el valor de error en la columna A por el texto \"hello\" y en la columna B por el texto \"world\" en la tabla.",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "Reemplaza las claves de la tabla especificada.",
        "Documentation.LongDescription": "Reemplaza las claves de la tabla especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Reemplaza las claves existentes de una tabla.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "Sustituye todas las filas especificadas con las filas proporcionadas.",
        "Documentation.LongDescription": "Sustituye todas las filas especificadas en <code>table</code> con las proporcionadas. Las filas que se sustituyen y los reemplazos se especifican en <code>replacements</code> con el formato {old, new}.\r\n    Se puede especificar un parámetro <code>equationCriteria</code> opcional para controlar la comparación entre las filas de la tabla.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar las filas [a = 1, b = 2] y [a = 2, b = 3] con [a = -1, b = -2],[a = -2, b = -3] en la tabla.",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "Devuelve una tabla solo con las columnas especificadas.",
        "Documentation.LongDescription": "Devuelve la <code>table</code> solo con las <code>columns</code> especificadas.\r\n    <ul>\r\n       <li><code>table</code>: la tabla proporcionada.</li>\r\n       <li><code>columns</code>: la lista de columna de la tabla <code>table</code> que devolver. Las columnas de la tabla devuelta están en el orden indicado en <code>columns</code>.</li>\r\n       <li><code>missingField</code>: <i>(opcional)</i> qué hacer si la columna no existe.  Por ejemplo: <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>.\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Incluir solo la columna [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "Incluir solo las columnas [CustomerID] y [Name].",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "Si la columna incluida no existe, el resultado predeterminado será un error.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "Si la columna incluida no existe, la opción <code>MissingField.UseNull</code> crea una columna de valores NULL.",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "Selecciona las filas que cumplen la función de la condición.",
        "Documentation.LongDescription": "Devuelve una tabla de filas de la <code>table</code>, que coincide con la selección <code>condition</code>.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Seleccionar las filas de la tabla en la cual los valores de la columna [CustomerID] sean mayores que 2.",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "Seleccionar las filas de la tabla en la cual los nombres no contengan una \"B\".",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "Ordena la tabla con uno o varios nombres de columna y criterios de comparación.",
        "Documentation.LongDescription": "Ordena la <code>table</code> con la lista de uno o varios nombres de columna y valores opcionales <code>comparisonCriteria</code> en el formato { { col1, comparisonCriteria }, {col2} }.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordenar la tabla en la columna \"OrderID\".",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "Ordenar la tabla en la columna \"OrderID\" por orden descendente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "Ordenar la tabla en la columna \"CustomerID\" y luego \"OrderID\", estando \"CustomerID\" en orden ascendente.",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "Transforma los nombres de columna mediante la función especificada.",
        "Documentation.LongDescription": "Transforma los nombres de columna mediante la función de <code>nameGenerator</code> especificada. Opciones válidas:\r\n    <div>\r\n <code>MaxLength</code> especifica la longitud máxima de los nuevos nombres de columna. Si la función dada da como resultado un nombre de columna más largo, se recortará el nombre largo.\r\n     </div>\r\n    <div>\r\n      <code>Comparer</code> se usa para controlar la comparación al generar nuevos nombres de columna. Los comparadores se pueden usar para proporcionar comparaciones que no distinguen mayúsculas de minúsculas o referencias culturales y que reconocen la configuración regional.\r\n    </div>\r\n    <div>\r\n     Los siguientes comparadores integrados están disponibles en el lenguaje de fórmulas:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>:  Se usa para realizar una comparación ordinal exacta</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: se usa para realizar una comparación exacta sin distinción entre mayúsculas y minúsculas</li>\r\n      <li><code>Comparer.FromCulture</code>: se usa para realizar una comparación compatible con la referencia cultural</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Quite el carácter <code>#(tab)</code> de los nombres de columna",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "Transforma los nombres de columna para generar nombres que no distinguen mayúsculas de minúsculas con una longitud de 6 caracteres.",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "Aplica la transformación de tipo del formato { column, type } con una referencia cultural específica.",
        "Documentation.LongDescription": "Devuelve una tabla de la entrada <code>table</code> mediante la aplicación de la operación de transformación a las columnas especificadas en el parámetro <code>typeTransformations</code> (donde el formato es { column name, type name}), con la referencia cultural especificada en el parámetro <code>culture</code> (por ejemplo, \"es-ES\").\r\n    Si no existe la columna, se inicia una excepción.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformar los valores de número de la columna [a] en valores de texto de la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "Transforma los valores de una o varias columnas.",
        "Documentation.LongDescription": "Transforma <code>table</code> aplicando cada operación de columna enumerada en <code>transformOperations</code> (donde el formato es { column name, transformation } o { column name, transformation, new column type }).\r\n Si un <code>defaultTransformation</code> se especifica, se aplicará a todas las columnas que no aparezcan en <code>transformOperations</code>.\r\n Si no existe una columna enumerada en <code>transformOperations</code>, se produce una excepción a menos que el parámetro opcional <code>missingField</code> especifica una alternativa (por ejemplo, <code>MissingField.UseNull</code> o <code>MissingField.Ignore</code>).",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Convierte los valores de texto de la columna [A] en valores numéricos, y los valores numéricos de la columna [B] en valores de texto.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "Convierte los valores numéricos de la columna que falta [X] en valores de texto, omitiendo las columnas que no existen.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "Convierte los valores numéricos de la columna que falta [X] en valores de texto, y los convierte de forma predeterminada a null en las columnas que no existen.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "Incrementa los valores numéricos de la columna [B] y los convierte en valores de texto, y convierte todas las demás columnas en números.",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "Crea o amplía una tabla con controladores definidos por el usuario para operaciones de consulta y acción.",
        "Documentation.LongDescription": "<p>Devuelve una vista de <code>table</code> dónde se usan las funciones especificadas en <code>handlers</code> son usadas en lugar del comportamiento predeterminado de una operación cuando la operación se aplica a la vista.</p>\r\n<p> Si <code>table</code> se proporciona, todas las funciones del controlador son opcionales. Si <code>table</code> no se proporciona, se requieren las funciones de controlador <code>GetType</code> y <code>GetRows</code>. Si no se especifica una función de controlador para una operación, en su lugar se aplica el comportamiento predeterminado de la operación a <code>table</code> (excepto en el caso de <code>GetExpression</code>).</p>\r\n<p> Las funciones de controlador deben devolver un valor que es semánticamente equivalente al resultado de aplicar la operación contra <code>table</code> (o la vista resultante en el caso de <code> GetExpression </code>).</p>\r\n<p> Si una función de controlador genera un error, el comportamiento predeterminado de la operación se aplica a la vista.</p>\r\n<p> <code>Table.View</code> se puede usar para implementar el plegado a una fuente de datos: la traducción de consultas M en consultas específicas de la fuente (por ejemplo, para crear declaraciones T-SQL a partir de consultas M).</p>\r\n<p>Consulte la documentación publicada del conector personalizado de Power Query para obtener una descripción más completa de <code>Table.View</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Cree una vista básica que no requiera tener acceso a las filas para determinar el tipo o el recuento de filas.",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "Especifique el nombre de la organización y del proyecto.",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (solo paneles)",
        "Documentation.LongDescription": "Devuelve una tabla de vistas de Analytics ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "Importa datos de Vertica.",
        "Documentation.LongDescription": "Devuelve una tabla de los esquemas disponibles en el servidor denominado mediante el parámetro <code>server</code> en la base de datos denominada mediante el parámetro <code>database</code>.\r\nEs posible proporcionar un parámetro de registro opcional <code>options</code> para especificar propiedades adicionales. Dicho registro puede contener los siguientes campos:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: duración que controla el período que hay que esperar antes de abandonar un intento de establecer la conexión con el servidor. El valor predeterminado depende del controlador.</li>\r\n    <li><code>CommandTimeout </code>: duración que controla el período en el que se permite ejecutar la consulta del lado servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "Enumera las tablas en Vertica."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla con el contenido del informe de Webtrends.",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "Realiza una llamada al punto de conexión de informes de Webtrends en cuestión y devuelve todos los datos en forma de tabla.",
        "Documentation.Examples": [
          {
            "Description": "Realiza una llamada al punto de conexión de informes de visitantes de Webtrends para obtener los datos de los últimos 30 días",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "Una tabla de datos de los visitantes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Devuelve el contenido de VisualQuery (vqr), informes o funciones publicadas por el software Zucchetti HR",
        "Documentation.Examples": [
          {
            "Description": "Solicitud de lista de empleados",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "Devuelve una lista de Dominios de Active Directory en el mismo bosque que el dominio especificado o del dominio del equipo si no se especifica ninguna.",
        "Documentation.LongDescription": "Devuelve una lista de Dominios de Active Directory en el mismo bosque que el dominio especificado o del dominio del equipo si no se especifica ninguna.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "Devuelve el resultado de ejecutar una consulta nativa en un origen de datos ADO.NET.",
        "Documentation.LongDescription": "Devuelve el resultado de ejecutar <code>query</code> con la cadena de conexión <code>connectionString</code> mediante el proveedor de ADO.NET <code>providerName</code>. <code>connectionString</code> puede ser texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o numéricos. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : Duraci&#243;n que controla durante cu&#225;nto tiempo se permite la ejecuci&#243;n de la consulta del lado servidor antes de cancelarla. El valor predeterminado es de 10&#160;minutos.</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : L&#243;gica (true/false) que determina si se producen opciones de cadena de conexi&#243;n compatibles con SQL Server para la autenticaci&#243;n de Windows. El valor predeterminado es &quot;true&quot;.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "Devuelve los conjuntos de informes en Adobe Analytics.",
        "Documentation.LongDescription": "Devuelve una tabla de paquetes multidimensionales de Adobe Analytics. Se puede especificar un parámetro de registro opcional (<code>options</code>) para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : Un valor l&#243;gico (True o False) que establece si se deben ver las tablas agrupadas por sus nombres de esquema (el valor predeterminado es False).</li>\r\n<li><code>MaxRetryCount</code> : N&#250;mero de reintentos que se realizar&#225;n durante el sondeo para obtener el resultado de la consulta. El valor predeterminado es de 120.</li>\r\n<li><code>RetryInterval</code> : Duraci&#243;n del per&#237;odo entre reintentos. El valor predeterminado es de 1 segundo.</li>\r\n<li><code>Implementation</code> : Especifica la versi&#243;n de la API de Adobe Analytics. Los valores aceptados son: &quot;2.0&quot;. El valor predeterminado usa la versi&#243;n 1.4 de la API.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "Permite importar datos de Hive LLAP.",
        "Documentation.LongDescription": "\r\nDevuelve una lista de tablas de Hive LLAP que especifica la base de datos <code>database</code> en el servidor Hive LLAP <code>server</code> mediante el protocolo <code>protocol</code> seleccionado. Opcionalmente, se puede especificar un número de puerto con el servidor separado por dos puntos. El protocolo de transporte Thrift es un tipo enumerado con los valores \"Standard\" y \"HTTP\". También se puede especificar un parámetro de opciones, <code>options</code>, para controlar las opciones siguientes:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: duración que controla cuánto tiempo hay que esperar antes de dejar de intentar establecer una conexión con el servidor. El valor predeterminado depende del controlador.</li>\r\n        <li><code>CommandTimeout</code>: duración que controla durante cuánto tiempo se puede ejecutar la consulta de servidor antes de cancelarla. El valor predeterminado depende del controlador.</li>\r\n</ul>\r\nEl parámetro <code>options</code> se especifica como [opción1 = valor1, opción2 = valor2...]."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes al período comprendido entre el 01/05/2017 y el 15/06/2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La función devolverá los datos de los resúmenes correspondientes al periodo comprendido entre el 01/05/2017 y el 15/06/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes a abril de 2017.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/04/2017 y el 30/04/2017."
          },
          {
            "Description": "Suponiendo que hoy es 15/06/2017, obtiene los datos de los resúmenes correspondientes al periodo comprendido entre abril de 2017 hasta ahora.",
            "Code": "let\r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)\r\n      in\r\n          result",
            "Result": "La función devolverá los datos correspondientes al periodo comprendido entre el 01/04/2017 y el 15/06/2017."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure Cost Management",
        "Documentation.Description": "Azure Cost Management",
        "Documentation.DisplayName": "Azure Cost Management",
        "Documentation.LongDescription": "Azure Cost Management",
        "Documentation.Name": "Azure Cost Management"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "Especifique el nombre de la organización y del proyecto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Devuelve una tabla de fuentes de OData ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "Permite conectarse a una instancia de Dataverse (Dynamics 365 y PowerApps)."
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "Combina la tabla de dimensiones especificada en el contexto de filtro del cubo y cambia la granularidad de dimensión del contexto de filtro expandiendo el conjunto especificado de atributos de dimensión.",
        "Documentation.LongDescription": "Combina la tabla de dimensiones especificada, <code>dimensionSelector</code>, en el contexto de filtro del cubo, <code>cube</code>, y cambia la granularidad de dimensión expandiendo el conjunto especificado <code>attributeNames</code> de atributos de dimensión. Los atributos de dimensión se agregan a la vista tabular con las columnas con nombre <code>newColumnNames</code>, o <code>attributeNames</code> si no se especificada nada.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "Agrega una columna al cubo que contiene los resultados de la medida aplicada al contexto de fila de cada fila.",
        "Documentation.LongDescription": "Agrega una columna con el nombre <code>column</code> al <code>cube</code> que contiene los resultados de la medida <code>measureSelector</code> aplicada al contexto de fila de cada fila. La aplicación de medidas se ve afectada por los cambios en la granularidad y la segmentación de dimensiones. Los valores de medida se ajustarán después de realizar ciertas operaciones con cubos.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "Escriba el entorno y la compañía de Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "Escriba el entorno y la compañía de Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "Escriba el entorno y la compañía de Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "Escriba el entorno y la compañía de Dynamics 365 Business Central.",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "Devuelve una tabla con los datos pertinentes de Dynamics 365 Business Central. "
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "Devuelve el contenido del libro de Excel actual.",
        "Documentation.LongDescription": "Devuelve el contenido del libro de Excel actual. Devuelve tablas, rangos con nombre y matrices dinámicas. A diferencia de <code>Excel.Workbook</code>, no devuelve hojas.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "Devuelve una tabla de contenido de una cuenta de Microsoft Exchange.",
        "Documentation.LongDescription": "Devuelve una tabla de contenido de la cuenta de Microsoft Exchange <code>mailboxAddress</code>. Si no se especifica <code>mailboxAddress</code>, se usará la cuenta de credenciales predeterminada.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "Almacén",
        "Documentation.Caption": "Almacén",
        "Documentation.Description": "Importa datos de almacenamiento",
        "Documentation.LongDescription": "Importa datos de almacenamiento"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "Devuelve cuentas de Google Analytics.",
        "Documentation.LongDescription": "Devuelve cuentas de Google Analytics que son accesibles desde la credencial actual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "Importa datos de una base de datos de Google BigQuery.",
        "Documentation.LongDescription": "\r\n      Devuelve una tabla en la que se muestran los proyectos disponibles en Google BigQuery. Se puede especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: duración que controla cuánto tiempo de espera es necesario antes de abandonar un intento de establecer una conexión con el servidor. El valor predeterminado es el valor del tiempo de espera de la conexión de ODBC.</li>\r\n        <li><code>CommandTimeout</code>: duración que controla durante cuánto tiempo se permite la ejecución de la consulta del lado servidor antes de que se cancele.</li>\r\n        <li><code>BillingProject</code>: id. del proyecto de facturación. El valor predeterminado es el primer proyecto disponible.</li>\r\n        <li><code>UseStorageApi</code>: especifica si se usará la API de Storage de BigQuery para conjuntos de resultados grandes. El valor predeterminado es true en cuanto al uso de la API de Storage. Si se establece en false, no se usará la API de Storage.</li>\r\n      </ul>\r\n    El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...].\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "Muestra los proyectos disponibles en Google BigQuery.",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "Lakehouse",
        "Documentation.Caption": "Importar datos desde Lakehouse",
        "Documentation.Description": "Importar datos desde Lakehouse",
        "Documentation.LongDescription": "Conéctese a todos los servicios de Lakehouse a los que tiene acceso y elija las entidades que desea usar."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla con datos de clave de MailChimp.",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "Devuelve una tabla con datos de clave de MailChimp.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con datos de clave de MailChimp.",
            "Code": "MailChimp.Tables()",
            "Result": "Una tabla con datos de clave de MailChimp."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "Devuelve una tabla con las actividades del cliente potencial.",
        "Documentation.LongDescription": "Hace una llamada al punto de conexión de la API de REST de Marketo en <code>url</code>/rest/v1/activities.json. Se devuelven todas las actividades de la lista <code>activityIds</code> que se produjeron desde las <code>startTime</code>.",
        "Documentation.Examples": [
          {
            "Description": "Extrae una tabla de las actividades \"Visitar página web\" desde el 1 de noviembre de 2015",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "Una tabla con los detalles de todas las actividades \"Visitar página web\" desde el 1 de noviembre de 2015"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Flujos de datos de Power BI (heredado)",
        "Documentation.Caption": "Importar datos de un flujo de datos de Power BI",
        "Documentation.LongDescription": "Conéctese a todos los flujos de datos de Power BI a los que tenga acceso y seleccione las entidades que le gustaría usar."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "Datamarts",
        "Documentation.Caption": "Datamarts",
        "Documentation.Description": "Importa datos de datamarts",
        "Documentation.LongDescription": "Importa datos de datamarts"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "Flujos de datos",
        "Documentation.Caption": "Importar datos de un flujo de datos",
        "Documentation.Description": "Importar datos de un flujo de datos",
        "Documentation.LongDescription": "Conéctese a todos los flujos de datos a los que tiene acceso y elija las entidades que desea usar."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "Importe datos de QuickBooks Online.",
        "Documentation.LongDescription": "\r\n        Devuelve una tabla en la que se enumeran las tablas disponibles en QuickBooks Online. Es posible especificar un parámetro de registro opcional, <code>options</code>, para controlar las opciones siguientes:\r\n          <ul>\r\n            <li><code>ConnectionTimeout</code>: duración que controla el período de espera antes de abandonar un intento de establecer una conexión con el servidor.</li>\r\n            <li><code>CommandTimeout</code>: duración que controla el período durante el que puede ejecutarse una consulta del lado servidor antes de cancelarse.</li>\r\n          </ul>\r\n        El parámetro de registro se especifica como [opción1 = valor1, opción2 = valor2...].\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "Devuelve los objetos desde la cuenta Salesforce.",
        "Documentation.LongDescription": "Devuelve los objetos de la cuenta de Salesforce que se proporciona en las credenciales. La cuenta se conectará a través del entorno de <code>loginUrl</code> proporcionado. Si no se proporciona ninguno, la cuenta se conectará al entorno de producción (https://login.salesforce.com). Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : Un valor l&#243;gico (true o false) que establece si se deben generar propiedades de navegaci&#243;n en los valores devueltos (el valor predeterminado es false).</li>\r\n<li><code>ApiVersion</code> : La versi&#243;n de la API de Salesforce que se usar&#225; para esta consulta. Si no se especifica, se usar&#225; la versi&#243;n 29.0 de la API.</li>\r\n<li><code>Timeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo es necesario esperar antes de abandonar la solicitud al servidor. El valor predeterminado depende del origen.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "Devuelve los informes desde la cuenta Salesforce.",
        "Documentation.LongDescription": "Devuelve los informes de la cuenta de Salesforce que se proporciona en las credenciales. La cuenta se conectará a través del entorno de <code>loginUrl</code> proporcionado. Si no se proporciona ninguno, la cuenta se conectará al entorno de producción (https://login.salesforce.com). Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n    <ul>\r\n<li><code>ApiVersion</code> : La versi&#243;n de la API de Salesforce que se usar&#225; para esta consulta. Si no se especifica, se usar&#225; la versi&#243;n 29.0 de la API.</li>\r\n<li><code>Timeout</code> : Duraci&#243;n que controla cu&#225;nto tiempo es necesario esperar antes de abandonar la solicitud al servidor. El valor predeterminado depende del origen.</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "Devuelve los elementos InfoCubes y las consultas en un sistema SAP Business Warehouse agrupados por InfoArea.",
        "Documentation.LongDescription": "Devuelve una tabla de elementos InfoCubes y consultas agrupados por InfoArea de una instancia de SAP Business Warehouse en el servidor <code>server</code> con el número de sistema <code>systemNumberOrSystemId</code> y el id. de cliente <code>clientId</code>. Se puede especificar un parámetro de registro opcional, <code>optionsOrLogonGroup</code>, para controlar las siguientes opciones:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla de hojas, informes, carpetas y áreas de trabajo de la API de Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "Devuelve una tabla anidada de hojas, informes, carpetas y áreas de trabajo disponibles de la API de Smartsheet.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve hojas, carpetas, informes y áreas de trabajo disponibles en el nivel superior de la jerarquía de Smartsheet",
            "Code": "Smartsheet.Tables()",
            "Result": "Una tabla de carpetas, informes y áreas de trabajo del nivel superior de la jerarquía de Smartsheet"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla de métricas disponibles de la API de SparkPost v1",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "Esta función puede utilizarse para recuperar datos de un punto de conexión de \"Métricas\" concreto de la API SparkPost v1. Cuando actualice estas tablas o realice llamadas a la API de SparkPost con este conector, tenga en cuenta que la API de SparkPost tiene un límite de frecuencia de API estricto. Si el servidor de SparkPost devuelve un código de estado 429, significa que ha alcanzado el límite de frecuencia y tendrá que esperar unos minutos antes de realizar más llamadas. Al elegir un valor para el parámetro Número de días, tenga en cuenta que la API solo almacena 6 meses de datos.",
        "Documentation.Examples": [
          {
            "Description": "Recupera las métricas de entrega count_sent y count_rejected de los identificadores campaign_ids de los últimos tres días. ",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "tabla"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "Hace una llamada a la API de Stripe.",
        "Documentation.LongDescription": "Hace una llamada a la API de Stripe en https://api.stripe.com/v1/<code>method</code>, con el registro <code>additionalParameters</code> que se pasa como parámetros adicionales y la lista <code>ColumnNames</code> de nombres de columna esperados. Se usa Stripe versión 2015-10-16.",
        "Documentation.Examples": [
          {
            "Description": "Devuelve una tabla con los eventos creados después del 1 de noviembre de 2015",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "Una tabla con los eventos especificados de la cuenta de Stripe actual"
          },
          {
            "Description": "Devuelve una tabla con todas las SKU",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "Una tabla con todas las SKU de la cuenta de Stripe actual"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "Devuelve una tabla con las tablas y funciones de Stripe disponibles.",
        "Documentation.LongDescription": "Devuelve una tabla con las tablas y funciones de Stripe disponibles."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Área de trabajo de Azure Synapse Analytics",
        "Documentation.Caption": "Área de trabajo de Azure Synapse Analytics",
        "Documentation.LongDescription": "Conector PQ para área de trabajo de Azure Synapse Analytics",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "Agrega una columna con el nombre especificado. El valor se calcula utilizando la función especificada de selección en la que cada fila se toma como entrada.",
        "Documentation.LongDescription": "Agrega una columna <code>newColumnName</code> con nombre a la tabla <code>table</code>. Los valores de la columna se calculan utilizando la función especificada de selección <code>columnGenerator</code> en la que cada fila se toma como entrada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrega una columna numérica denominada \"TotalPrice\" a la tabla, en la que cada valor es la suma de las columnas [Price] y [Shipping].",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "Permite agregar una nueva columna con valores representativos obtenidos a partir de valores agrupados aproximados de la columna especificada en la tabla.",
        "Documentation.LongDescription": "Permite agregar una nueva columna <code>newColumnName</code> a <code>table</code> con valores representativos de <code>columnName</code>. Dichos valores se obtienen mediante coincidencias aproximadas de los valores de <code>columnName</code> para cada fila.\r\n    <p>Se puede incluir un conjunto opcional de <code>options</code> para especificar cómo deben compararse las columnas de claves. Opciones disponibles:\r\n    <ul>\r\n<li><code>Culture</code> : Permite agrupar registros seg&#250;n reglas espec&#237;ficas de una referencia cultural. Puede usarse cualquier nombre de referencia cultural v&#225;lido. Por ejemplo, la opci&#243;n de referencia cultural &quot;ja-JP&quot; agrupa registros seg&#250;n la referencia cultural de japon&#233;s. El valor predeterminado es &quot;&quot;, que se basa en la referencia cultural invariable de ingl&#233;s.</li>\r\n<li><code>IgnoreCase</code> : Valor l&#243;gico (true o false) que permite la agrupaci&#243;n de claves sin distinci&#243;n de may&#250;sculas y min&#250;sculas. Por ejemplo, si es true, &quot;Uvas&quot; se agrupar&#225; con &quot;uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>IgnoreSpace</code> : Valor l&#243;gico (true o false) que permite combinar elementos de texto para buscar grupos. Por ejemplo, si es true, &quot;Uv as&quot; se agrupar&#225; con &quot;Uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>SimilarityColumnName</code> : Nombre de la columna que muestra la similitud entre un valor de entrada y el valor representativo de esa entrada. El valor predeterminado es null, en cuyo caso no se agregar&#225; una nueva columna para similitudes.</li>\r\n<li><code>Threshold</code> : N&#250;mero comprendido entre 0,00 y 1,00 que especifica la puntuaci&#243;n de similitud en la que se agrupar&#225;n dos valores.\r\n    Por ejemplo, &quot;Uvas&quot; y &quot;Uas&quot; (sin la &quot;v&quot;) solo se agrupar&#225;n juntos si esta opci&#243;n estuviera establecida en menos de 0,90.\r\n     Un umbral de 1,00 solo permitir&#225; coincidencias exactas.\r\n    (tenga en cuenta que una &quot;coincidencia exacta&quot; aproximada podr&#237;a omitir diferencias, como el uso de may&#250;sculas y min&#250;sculas, el orden de las palabras y la puntuaci&#243;n).\r\n     El valor predeterminado es 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabla que permite agrupar registros en funci&#243;n de asignaciones de valores personalizadas. Debe contener las columnas &quot;Desde&quot; y &quot;Hasta&quot;. Por ejemplo, &quot;Uvas&quot; se agrupa con &quot;Pasas&quot; si se proporciona una tabla de transformaci&#243;n en la que la columna &quot;Desde&quot; contiene &quot;Uva&quot; y la columna &quot;Hasta&quot; contiene &quot;Pasas&quot;. Tenga en cuenta que la transformaci&#243;n se aplicar&#225; a todas las repeticiones del texto en la tabla de transformaci&#243;n. Con la tabla de transformaci&#243;n anterior, &quot;Las uvas son dulces&quot; tambi&#233;n se agrupar&#225; con &quot;Las pasas son dulces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Encuentre los valores representativos para la ubicación de los empleados.",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "Realiza una combinación de las tablas en las columnas proporcionadas y genera el resultado de la combinación en una nueva columna.",
        "Documentation.LongDescription": "Combina las filas de <code>table1</code> con las filas de <code>table2</code> según la igualdad de los valores de las columnas de clave seleccionadas por <code>key1</code> (para <code>table1</code>) y <code>key2</code> (para <code>table2</code>). Los resultados se especifican en la columna denominada <code>newColumnName</code>.\r\nEsta función se comporta de forma similar a Table.Join con un JoinKind de LeftOuter salvo en que los resultados de la combinación se muestran de forma anidada en lugar de sin formato.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregar una columna de combinación a ({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]}) con el nombre \"price/stock\" a partir de la tabla ({[saleID = 1, price = 20], [saleID = 2, price = 10]}) unida a [saleID].",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "Agrega una clave a una tabla.",
        "Documentation.LongDescription": "Agregar una clave a <code>table</code>, donde<code>columns</code> es la lista de nombres que define la clave, y <code>isPrimary</code> especifica si la clave es la principal.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregue una clave principal de una sola columna a una tabla.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "Anexa una columna con la clasificación de una o más columnas.",
        "Documentation.LongDescription": "Anexa una columna denominada <code>newColumnName</code> al <code>table</code> con la clasificación de una o más columnas descrita por <code>comparisonCriteria</code>.\r\nLos usuarios avanzados pueden usar la opción RankKind de <code>options</code> para elegir un método de clasificación más específico.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Agregar una columna denominada \"RevenueRank\" a la tabla que clasifica la columna \"Ingresos\" de mayor a menor.",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "Agrega una columna de tablas en varias columnas en la tabla contenedora.",
        "Documentation.LongDescription": "Agrega las tablas de <code>table</code>[<code>column</code>] en varias columnas que contienen los valores globales de las tablas. <code>aggregations</code> se usa para especificar las columnas que contienen las tablas que agregar, las funciones de agregado que se aplican a las tablas para generar sus valores y los nombres de las columnas agregadas que se crean.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agregar columnas de tabla en <code>[t]</code> en la tabla <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> en la suma de <code>[t.a]</code>, el mínimo y el máximo de <code>[t.b]</code> y el recuento de valores de <code>[t.a]</code>.",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "Conserva el desplazamiento inicial y entonces alterna entre tomar y saltar las siguientes filas.",
        "Documentation.LongDescription": "Conserva el desplazamiento inicial y entonces alterna entre tomar y saltar las siguientes filas.\r\n    <ul>\r\n       <li><code>table</code>: la tabla de entrada.</li>\r\n       <li><code>offset</code>: el número de filas que desea conservar antes de iniciar las iteraciones.</li>\r\n       <li><code>skip</code>: el número de filas que desea quitar en cada iteración.</li>\r\n       <li><code>take</code>: el número de filas que desea conservar en cada iteración.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver una tabla de la tabla que, empezando en la primera fila, salta un valor y, a continuación, conserva otro valor.",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "Combina las columnas especificadas en una nueva columna con la función especificada de combinador.",
        "Documentation.LongDescription": "Combina las columnas especificadas en una nueva columna con la función especificada de combinador.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combine los apellidos y los nombres en una nueva columna, separadas por una coma.",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "Combina las columnas especificadas en una nueva columna con valores de registro donde cada registro tiene nombres de campo y valores correspondientes a los nombres de columna y los valores de las columnas combinadas.",
        "Documentation.LongDescription": "Permite combinar las columnas especificadas de <code>table</code> en una nueva columna con valores de registro denominada <code>newColumnName</code> en la que cada registro tiene nombres y valores de campo correspondientes a los nombres de columna y los valores de las columnas que se han combinado. Si se especifica un registro para <code>options</code>, se pueden proporcionar las siguientes opciones: \r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: cuando se especifica como texto, indica que el nombre de la columna en cuestión se debe tratar como el nombre para mostrar del registro. No es necesario que sea una de las columnas del propio registro.</li>\r\n     <li> <code>TypeName</code>: cuando se especifica como texto, proporciona un nombre de tipo lógico para el registro resultante que se puede usar durante la carga de datos para controlar el comportamiento del entorno de carga.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "Duplica una columna con el nombre especificado. Los valores y el tipo se copian de la columna de origen.",
        "Documentation.LongDescription": "Duplicar la columna denominada <code>columnName</code> en la tabla <code>table</code>. Los valores y el tipo de la columna <code>newColumnName</code> se copian de la columna <code>columnName</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Duplica la columna \"a\" en una columna denominada \"columna copiada\" en la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "Expande una columna de registros en columnas con cada uno de los valores.",
        "Documentation.LongDescription": "Dado el <code>column</code> de registros de la entrada <code>table</code>, crea una tabla con una columna para cada campo del registro. Opcionalmente, puede especificarse <code>newColumnNames</code> para proteger los nombres únicos de las columnas de la nueva tabla.\r\n    <ul>\r\n        <li><code>table</code>: la tabla original con la columna de registros que se va a expandir. </li>\r\n        <li><code>column</code>: la columna que se va a expandir.</li>\r\n        <li><code>fieldNames</code>: la lista de campos que se van a expandir en columnas de la tabla.</li>\r\n        <li><code>newColumnNames</code>: la lista de nombres de columna que asignar a las nuevas columnas. Los nombres de nuevas columnas no pueden duplicar ninguna columna en la nueva tabla.</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expandir la columna [a] en la tabla <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> en 3 columnas \"aa\", \"bb\" y \"cc\".",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "Expande una columna de registros o una columna de tablas en varias columnas de la tabla contenedora.",
        "Documentation.LongDescription": "Expande las tablas de <code>table</code>[<code>column</code>] en varias filas y columnas. <code>columnNames</code> se usa para seleccionar las columnas que expandir de la tabla interna. Especifique <code>newColumnNames</code> para evitar conflictos entre las columnas existentes y las columnas nuevas.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Expandir las columnas de tabla de <code>[a]</code> en la tabla <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> en 3 columnas <code>[t.a]</code>, <code>[t.b]</code> y <code>[t.c]</code>.",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "Agrupa las filas de la tabla según las coincidencias aproximadas de las claves.",
        "Documentation.LongDescription": "Permite agrupar las filas de <code>table</code> por coincidencias aproximadas de los valores en la columna especificada, <code>key</code>, para cada fila.\r\n    Para cada grupo, se crea un registro que contiene las columnas de claves y sus valores junto con las columnas agregadas especificadas por <code>aggregatedColumns</code>.\r\n    Esta función no puede garantizar que se devuelva un orden de filas fijo.\r\n    <p>Se puede incluir un conjunto opcional de <code>options</code> para especificar cómo deben compararse las columnas de claves. Opciones disponibles:\r\n    <ul>\r\n<li><code>Culture</code> : Permite agrupar registros seg&#250;n reglas espec&#237;ficas de una referencia cultural. Puede usarse cualquier nombre de referencia cultural v&#225;lido. Por ejemplo, la opci&#243;n de referencia cultural &quot;ja-JP&quot; agrupa registros seg&#250;n la referencia cultural de japon&#233;s. El valor predeterminado es &quot;&quot;, que se basa en la referencia cultural invariable de ingl&#233;s.</li>\r\n<li><code>IgnoreCase</code> : Valor l&#243;gico (true o false) que permite la agrupaci&#243;n de claves sin distinci&#243;n de may&#250;sculas y min&#250;sculas. Por ejemplo, si es true, &quot;Uvas&quot; se agrupar&#225; con &quot;uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>IgnoreSpace</code> : Valor l&#243;gico (true o false) que permite combinar elementos de texto para buscar grupos. Por ejemplo, si es true, &quot;Uv as&quot; se agrupar&#225; con &quot;Uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>SimilarityColumnName</code> : Nombre de la columna que muestra la similitud entre un valor de entrada y el valor representativo de esa entrada. El valor predeterminado es null, en cuyo caso no se agregar&#225; una nueva columna para similitudes.</li>\r\n<li><code>Threshold</code> : N&#250;mero comprendido entre 0,00 y 1,00 que especifica la puntuaci&#243;n de similitud en la que se agrupar&#225;n dos valores.\r\n    Por ejemplo, &quot;Uvas&quot; y &quot;Uas&quot; (sin la &quot;v&quot;) solo se agrupar&#225;n juntos si esta opci&#243;n estuviera establecida en menos de 0,90.\r\n     Un umbral de 1,00 solo permitir&#225; coincidencias exactas.\r\n    (tenga en cuenta que una &quot;coincidencia exacta&quot; aproximada podr&#237;a omitir diferencias, como el uso de may&#250;sculas y min&#250;sculas, el orden de las palabras y la puntuaci&#243;n).\r\n     El valor predeterminado es 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabla que permite agrupar registros en funci&#243;n de asignaciones de valores personalizadas. Debe contener las columnas &quot;Desde&quot; y &quot;Hasta&quot;. Por ejemplo, &quot;Uvas&quot; se agrupa con &quot;Pasas&quot; si se proporciona una tabla de transformaci&#243;n en la que la columna &quot;Desde&quot; contiene &quot;Uva&quot; y la columna &quot;Hasta&quot; contiene &quot;Pasas&quot;. Tenga en cuenta que la transformaci&#243;n se aplicar&#225; a todas las repeticiones del texto en la tabla de transformaci&#243;n. Con la tabla de transformaci&#243;n anterior, &quot;Las uvas son dulces&quot; tambi&#233;n se agrupar&#225; con &quot;Las pasas son dulces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Para agrupar la tabla, agregue una columna agregada [Count] que contenga el número de empleados de cada ubicación (\"cada Table.RowCount(_))\").",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "Permite combinar las filas de las dos tablas que coinciden de forma aproximada en función de las claves facilitadas.",
        "Documentation.LongDescription": "<p>Combina las filas de <code>table1</code> con las de <code>table2</code> de acuerdo con una coincidencia aproximada de los valores de las columnas de claves seleccionadas por <code>key1</code> (para <code>table1</code>) y <code>key2</code> (para <code>table2</code>).</p>\r\n<p>La coincidencia aproximada es en una comparación basada en la similitud del texto, en vez de en su igualdad.</p>\r\n<p>De forma predeterminada, se realiza una combinación interna, pero se puede incluir un valor <code>joinKind</code> opcional para especificar el tipo de combinación. Opciones disponibles:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Se puede incluir un conjunto opcional de <code>joinOptions</code> para especificar cómo deben compararse las columnas de claves. Opciones disponibles:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : N&#250;mero comprendido entre 1 y 8 que especifica el n&#250;mero de subprocesos paralelos que se usar&#225;n para la coincidencia aproximada. El valor predeterminado es 1.</li>\r\n<li><code>Culture</code> : Permite que los registros coincidentes se basen en reglas espec&#237;ficas de una referencia cultural. Puede usarse cualquier nombre de referencia cultural v&#225;lido. Por ejemplo, una opci&#243;n de referencia cultural de &quot;ja-JP&quot; coincidir&#225; con los registros basados en la referencia cultural de japon&#233;s. El valor predeterminado es &quot;&quot;, que se basa en la referencia cultural invariable de ingl&#233;s.</li>\r\n<li><code>IgnoreCase</code> : Valor l&#243;gico (true o false) que permite la asociaci&#243;n de claves sin distinci&#243;n de may&#250;sculas y min&#250;sculas. Por ejemplo, si es true, &quot;Uvas&quot; se asociar&#225; a &quot;uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>IgnoreSpace</code> : Valor l&#243;gico (true o false) que permite combinar elementos de texto para encontrar coincidencias. Por ejemplo, si es true, &quot;Uv as&quot; se asociar&#225; a &quot;Uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>NumberOfMatches</code> : N&#250;mero entero que especifica el n&#250;mero m&#225;ximo de filas coincidentes que se pueden devolver para cada fila de entrada. Por ejemplo, un valor de 1 devolver&#225; como m&#225;ximo una fila coincidente para cada fila de entrada. Si no se proporciona esta opci&#243;n, se devolver&#225;n todas las filas coincidentes.</li>\r\n<li><code>SimilarityColumnName</code> : Nombre de la columna que muestra la similitud entre un valor de entrada y el valor representativo de esa entrada. El valor predeterminado es null, en cuyo caso no se agregar&#225; una nueva columna para similitudes.</li>\r\n<li><code>Threshold</code> : N&#250;mero comprendido entre 0,00 y 1,00 que especifica la puntuaci&#243;n de similitud en la que se asociar&#225;n dos valores.\r\n    Por ejemplo, &quot;Uvas&quot; y &quot;Uas&quot; (sin la &quot;v&quot;) solo se asociar&#225;n si esta opci&#243;n estuviera establecida en menos de 0,90.\r\n     Un umbral de 1,00 solo permitir&#225; coincidencias exactas.\r\n    (tenga en cuenta que una &quot;coincidencia exacta&quot; aproximada podr&#237;a omitir diferencias, como el uso de may&#250;sculas y min&#250;sculas, el orden de las palabras y la puntuaci&#243;n).\r\n     El valor predeterminado es 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabla que permite asociar registros en funci&#243;n de asignaciones de valores personalizadas. Debe contener las columnas &quot;Desde&quot; y &quot;Hasta&quot;. Por ejemplo, &quot;Uvas&quot; se asocia a &quot;Pasas&quot; si se proporciona una tabla de transformaci&#243;n en la que la columna &quot;Desde&quot; contiene &quot;Uva&quot; y la columna &quot;Hasta&quot; contiene &quot;Pasas&quot;. Tenga en cuenta que la transformaci&#243;n se aplicar&#225; a todas las repeticiones del texto en la tabla de transformaci&#243;n. Con la tabla de transformaci&#243;n anterior, &quot;Las uvas son dulces&quot; tambi&#233;n se asociar&#225; a &quot;Las pasas son dulces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combinación aproximada interna izquierda de dos tablas basada en [FirstName]",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "Realiza una combinación parcial de las tablas en las columnas proporcionadas y genera el resultado de la combinación en una nueva columna.",
        "Documentation.LongDescription": "<p>Combina las filas de <code>table1</code> con las filas de <code>table2</code> según la coincidencia aproximada de los valores de las columnas de clave seleccionadas por <code>key1</code> (para <code>table1</code>) y <code>key2</code> (para <code>table2</code>). Los resultados se especifican en la columna denominada <code>newColumnName</code>.</p>\r\n<p>La coincidencia aproximada es una comparación basada en la similitud del texto, en vez de en su igualdad.</p>\r\n<p>El valor opcional <code>joinKind</code> especifica el tipo de unión que se debe realizar. De manera predeterminada, se efectuará una combinación externa izquierda en caso de no especificar <code>joinKind</code>. Entre las opciones incluidas están las siguientes:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Es posible incluir un conjunto opcional de <code>joinOptions</code> para especificar el modo de comparar las columnas clave. Entre las opciones incluidas están las siguientes:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : N&#250;mero comprendido entre 1 y 8 que especifica el n&#250;mero de subprocesos paralelos que se usar&#225;n para la coincidencia aproximada. El valor predeterminado es 1.</li>\r\n<li><code>Culture</code> : Permite que los registros coincidentes se basen en reglas espec&#237;ficas de una referencia cultural. Puede usarse cualquier nombre de referencia cultural v&#225;lido. Por ejemplo, una opci&#243;n de referencia cultural de &quot;ja-JP&quot; coincidir&#225; con los registros basados en la referencia cultural de japon&#233;s. El valor predeterminado es &quot;&quot;, que se basa en la referencia cultural invariable de ingl&#233;s.</li>\r\n<li><code>IgnoreCase</code> : Valor l&#243;gico (true o false) que permite la asociaci&#243;n de claves sin distinci&#243;n de may&#250;sculas y min&#250;sculas. Por ejemplo, si es true, &quot;Uvas&quot; se asociar&#225; a &quot;uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>IgnoreSpace</code> : Valor l&#243;gico (true o false) que permite combinar elementos de texto para encontrar coincidencias. Por ejemplo, si es true, &quot;Uv as&quot; se asociar&#225; a &quot;Uvas&quot;. El valor predeterminado es true.</li>\r\n<li><code>NumberOfMatches</code> : N&#250;mero entero que especifica el n&#250;mero m&#225;ximo de filas coincidentes que se pueden devolver para cada fila de entrada. Por ejemplo, un valor de 1 devolver&#225; como m&#225;ximo una fila coincidente para cada fila de entrada. Si no se proporciona esta opci&#243;n, se devolver&#225;n todas las filas coincidentes.</li>\r\n<li><code>SimilarityColumnName</code> : Nombre de la columna que muestra la similitud entre un valor de entrada y el valor representativo de esa entrada. El valor predeterminado es null, en cuyo caso no se agregar&#225; una nueva columna para similitudes.</li>\r\n<li><code>Threshold</code> : N&#250;mero comprendido entre 0,00 y 1,00 que especifica la puntuaci&#243;n de similitud en la que se asociar&#225;n dos valores.\r\n    Por ejemplo, &quot;Uvas&quot; y &quot;Uas&quot; (sin la &quot;v&quot;) solo se asociar&#225;n si esta opci&#243;n estuviera establecida en menos de 0,90.\r\n     Un umbral de 1,00 solo permitir&#225; coincidencias exactas.\r\n    (tenga en cuenta que una &quot;coincidencia exacta&quot; aproximada podr&#237;a omitir diferencias, como el uso de may&#250;sculas y min&#250;sculas, el orden de las palabras y la puntuaci&#243;n).\r\n     El valor predeterminado es 0,80.</li>\r\n<li><code>TransformationTable</code> : Tabla que permite asociar registros en funci&#243;n de asignaciones de valores personalizadas. Debe contener las columnas &quot;Desde&quot; y &quot;Hasta&quot;. Por ejemplo, &quot;Uvas&quot; se asocia a &quot;Pasas&quot; si se proporciona una tabla de transformaci&#243;n en la que la columna &quot;Desde&quot; contiene &quot;Uva&quot; y la columna &quot;Hasta&quot; contiene &quot;Pasas&quot;. Tenga en cuenta que la transformaci&#243;n se aplicar&#225; a todas las repeticiones del texto en la tabla de transformaci&#243;n. Con la tabla de transformaci&#243;n anterior, &quot;Las uvas son dulces&quot; tambi&#233;n se asociar&#225; a &quot;Las pasas son dulces&quot;.</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Combinación aproximada interna izquierda de dos tablas basada en [FirstName]",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "Agrupa las filas de la tabla que tienen la misma clave.",
        "Documentation.LongDescription": "Agrupa las filas de <code>table</code> por las columnas clave definidas por <code>key</code>. El <code>key</code> puede ser un solo nombre de columna, o una lista de nombres de columnas.\r\n    Para cada grupo, se construye un registro que contiene las columnas clave (y sus valores), junto con cualquier columna agregada especificada por <code>aggregatedColumns</code>.\r\n    Opcionalmente, <code>groupKind</code> también se puede especificar y. <code>comparer</code> <br>\r\n    <br>\r\n    Si los datos ya están ordenados por las columnas clave, entonces se puede proporcionar un de <code>groupKind</code> GroupKind.Local. Esto puede mejorar el rendimiento de la agrupación en ciertos casos,\r\n    ya que se supone que todas las filas con un conjunto dado de valores clave son contiguas.<br>\r\n    <br>\r\n    Al pasar a <code>comparer</code>, tenga en cuenta que si trata las claves diferentes como iguales, una fila puede colocarse en un grupo cuyas claves difieren de las suyas.<br>\r\n    <br>\r\n    Esta función no garantiza el orden de las filas que devuelve.\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Agrupar la tabla agregando una columna agregada [total] que contiene la suma de precios (\"each List.Sum([price])\").",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "Inserta una lista de filas en la tabla en la posición especificada.",
        "Documentation.LongDescription": "Devuelve una tabla con la lista de filas, <code>rows</code>, insertadas en la <code>table</code> en la posición, <code>offset</code> dada. Cada columna de la fila para insertar coincide con los tipos de columna de la tabla.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Insertar la fila en la tabla en la posición 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "Insertar las dos filas en la tabla en la posición 1.",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "Combina las filas de las dos tablas que coinciden según las claves dadas.",
        "Documentation.LongDescription": "<p>Combina las filas de <code>table1</code> con las filas de <code>table2</code> según la igualdad de los valores de las columnas clave seleccionadas por <code>key1</code> (para <code>table1</code>) y <code>key2</code> (para <code>table2</code>).</p>\r\n<p>De manera predeterminada, se realiza una combinación interna, pero se puede incluir un valor <code>joinKind</code> opcional para especificar el tipo de combinación. Algunas opciones son las siguientes:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>Se puede incluir un conjunto de <code>keyEqualityComparers</code> opcional para especificar cómo comparar las columnas de clave. Actualmente, esta característica solo está diseñada para uso interno.</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Una dos tablas con una única columna de clave.",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "Combinar dos tablas que tienen nombres de columna en conflicto, usando varias columnas de clave.",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "Devuelve las filas mayores con los criterios dados.",
        "Documentation.LongDescription": "Devuelve las filas mayores de <code>table</code>, dados el <code>comparisonCriteria</code>.\r\n    Después de ordenar las filas, es necesario especificar el parámetro <code>countOrCondition</code> para filtrar aún más el resultado. Tenga en cuenta que el algoritmo de ordenación no puede garantizar un resultado ordenado fijo. El parámetro <code>countOrCondition</code> puede adoptar varios formatos:\r\n    <ul>\r\n        <li>Si se especifica un número, se devuelve una lista de hasta <code>countOrCondition</code> elementos en orden ascendente. </li>\r\n        <li>Si se especifica una condición, se devuelve una lista de los elementos que cumplen inicialmente la condición. Si un elemento no cumple la condición, no se considerarán más elementos. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar la fila con el valor máximo de la columna [a] con la condición [a] > 0, en la tabla. Las filas están ordenadas antes de aplicar el filtro.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Buscar la fila con el valor máximo de la columna [a] con la condición [b] > 0, en la tabla. Las filas están ordenadas antes de aplicar el filtro.",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "Devuelve las filas menores con los criterios dados.",
        "Documentation.LongDescription": "Devuelve las filas mayores de <code>table</code>, dado el <code>comparisonCriteria</code>. Una vez ordenadas las filas, el parámetro <code>countOrCondition</code> debe especificarse para filtrar más el resultado. Tenga en cuenta que el algoritmo de ordenación no puede garantizar un resultado ordenado fijo. El parámetro <code>countOrCondition</code> puede adoptar varios formatos:\r\n    <ul>\r\n        <li> Si se especifica un número, se devuelve una lista de hasta <code>countOrCondition</code> elementos en orden ascendente. </li>\r\n        <li> Si se especifica una condición, se devuelve una lista de los elementos que cumplen inicialmente la condición. Una vez un elemento no cumple la condición, no se consideran más elementos. </li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar la fila con el valor menor de la columna [a] con la condición [a] < 3, en la tabla. Las filas están ordenadas antes de aplicar el filtro.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "Buscar la fila con el valor menor de la columna [a] con la condición [b] < 0, en la tabla. Las filas están ordenadas antes de aplicar el filtro.",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "Realiza una combinación de las tablas en las columnas proporcionadas y genera el resultado de la combinación en una nueva columna.",
        "Documentation.LongDescription": "<p>Combina las filas de <code>table1</code> con las filas de <code>table2</code> según la igualdad de los valores de las columnas clave seleccionadas por <code>key1</code> (para <code>table1</code>) y <code>key2</code> (para <code>table2</code>). Los resultados se especifican en la columna denominada <code>newColumnName</code>.</p>\r\n<p>El valor opcional <code>joinKind</code> especifica el tipo de unión que se debe realizar. De manera predeterminada, se efectuará una combinación externa izquierda en caso de no especificar <code>joinKind</code>.</p>\r\n<p>Se puede incluir un conjunto de <code>keyEqualityComparers</code> opcional para especificar cómo comparar las columnas clave. Actualmente, esta característica solo está diseñada para uso interno.</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Una dos tablas con una única columna de clave.",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "Dado un par de columnas que representan parejas atributo-valor, rota los datos de la columna de atributo en los encabezados de columna.",
        "Documentation.LongDescription": "Dado un par de columnas que representan parejas atributo-valor, rota los datos de la columna de atributo en los encabezados de columna.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tomar los valores \"a\", \"b\" y \"c\" en la columna de atributo de la tabla <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> y dinamizarlos en su propia columna.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "Tomar los valores \"a\", \"b\" y \"c\" en la columna de atributo de la tabla <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> y dinamizarlos en su propia columna.  El atributo \"c\" para la clave \"x\" tiene varios valores asociados, por lo que usa la función List.Max para resolver el conflicto.",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "Sustituye el intervalo de filas especificado con las filas proporcionadas.",
        "Documentation.LongDescription": "Sustituye un número de filas especificado, <code>count</code>, en la entrada <code>table</code> con la <code>rows</code> especificada, a partir de <code>offset</code>. El parámetro <code>rows</code> es una lista de registros.\r\n    <ul>\r\n       <li><code>table</code>: la tabla donde se realiza el reemplazo.</li>\r\n       <li><code>offset</code>: el nNúmero de filas que se omitirán antes de hacer el reemplazo.</li>\r\n       <li><code>count</code>: el número de filas que se reemplazan.</li>\r\n       <li><code>rows</code>: la lista de registros de fila que se insertan en la <code>table</code> en la ubicación especificada por <code>offset</code>.</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "A partir de la posición 1, reemplazar 3 filas.",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "Reemplaza un valor con otro en las columnas especificadas.",
        "Documentation.LongDescription": "Sustituye <code>oldValue</code> con <code>newValue</code> en las columnas especificadas en <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Reemplace el texto \"adiós\" por \"mundo\" en la columna B, para coincidir solo con el valor completo.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "Reemplace el texto \"su\" con \"o\" en la columna B, para coincidir con cualquier parte del valor.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "Anonimizar los nombres de los empleados de EE. UU.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "Anonimizar todas las columnas de empleados de EE. UU.",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "Divide las columnas especificadas en un conjunto de columnas adicionales con la función de separación especificada.",
        "Documentation.LongDescription": "Divide las columnas especificadas en un conjunto de columnas adicionales con la función de separación especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Dividir la columna [Name] de la posición \"i\" en dos columnas",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "Traduce un conjunto de columnas de una tabla en parejas atributo-valor.",
        "Documentation.LongDescription": "Traduce un conjunto de columnas de una tabla en parejas de atributo-valor, combinado con el resto de los valores de cada fila.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Tomar las columnas \"a\", \"b\" y \"c\" en la tabla <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> y anular la dinamización en pares de atributo-valor.",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "Traduce todas las columnas distintas de un conjunto especificado en pares de atributo-valor.",
        "Documentation.LongDescription": "Traduce todas las columnas distintas de un conjunto especificado en pares de atributo-valor, combinados con el resto de los valores de cada fila.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Traduce todas las columnas que no formen parte de un conjunto especifico de pares de atributo-valor y que están combinadas con el resto de valores de cada fila.",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Análisis personales de Microsoft Teams",
        "Documentation.LongDescription": "<p>El conector de análisis de Teams permite obtener información detallada sobre el uso de Teams. Ofrece datos tanto en relación con la actividad personal en Teams como sobre aquellas actividades de Teams en las que participe.</p>\r\n<p>Los datos disponibles corresponden a los 90 días anteriores.</p>\r\n<p>Para obtener más información sobre los tipos de datos disponibles, consulte la documentación siguiente: </p>\r\n<ul>\r\n<li><b>Uso de Teams</b>: https://docs.microsoft.com/es-es/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Actividad del usuario en Teams</b>: https://docs.microsoft.com/es-es/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "Especifique el nombre de la organización y del proyecto.",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "Devuelve una tabla de fuentes de OData ofrecida por Azure DevOps."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "Devuelve un formato binario que lee un valor binario.",
        "Documentation.LongDescription": "Devuelve un formato binario que lee un valor binario.  Si se especifica <code>length</code>, el valor binario contendrá varios bytes.  Si no se especifica <code>length</code>, el valor binario contendrá el resto de bytes.  La <code>length</code> puede especificarse como número o como un formato binario de la longitud que antecede a los datos binarios.",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "Devuelve un valor lógico basado en la comparación de igualdad de dos valores determinados.",
        "Documentation.LongDescription": "Devuelve un valor <code>lógico</code> basado en la comprobación de igualdad sobre los dos valores dados, <code>x</code> y <code>y</code>, utilizando el <code>comparer</code>.\r\n      <div>\r\n        <code>comparer</code>es un <code>Comparador</code> que se utiliza para controlar la comparación.\r\n        Un comparador es una función que acepta dos argumentos y devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.\r\n        Los comparadores pueden utilizarse para realizar comparaciones que no distingan entre mayúsculas y minúsculas o que tengan en cuenta la cultura y la localización.\r\n      </div>\r\n      <div>\r\n        El lenguaje de fórmulas dispone de los siguientes comparadores integrados:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparador.ordinal</code>: Se utiliza para realizar una comparación ordinal exacta</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: Se utiliza para realizar una comparación ordinal exacta sin tener en cuenta mayúsculas y minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: Se utiliza para realizar una comparación que tenga en cuenta la cultura</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Compara \"1\" y \"A\" usando la configuración regional \"en-US\" para determinar si los valores son iguales.",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales de la zona horaria local. Este valor es fijo y no cambiará con las sucesivas llamadas.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetime</code> establecido en la fecha y hora actuales según el sistema. Este valor es fijo y no cambiará con las sucesivas llamadas, a diferencia de DateTime.LocalNow, que puede devolver valores distintos durante la ejecución de una expresión.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales de la zona horaria local.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetime</code> establecido en la fecha y hora actuales según el sistema.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales en la zona horaria local. Este valor es fijo y no cambiará con las sucesivas llamadas.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetime</code> establecido en la fecha y hora actuales según el sistema. El valor devuelto contiene la información de zona horaria que representa la zona horaria local. Este valor es fijo y no cambiará con las sucesivas llamadas, a diferencia de DateTimeZone.LocalNow, que puede devolver valores distintos durante la ejecución de una expresión.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales en UTC (la zona horaria GMT). Este valor es fijo y no cambiará con las sucesivas llamadas.",
        "Documentation.LongDescription": "Devuelve la fecha y la hora actuales en UTC (la zona horaria GMT). Este valor es fijo y no cambiará con las sucesivas llamadas.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales en la zona horaria local.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetimezone</code> establecido en la fecha y hora actuales según el sistema.\r\n    El valor devuelto contiene la información de zona horaria que representa la zona horaria local.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "Devuelve la fecha y la hora actuales en UTC (la zona horaria GMT).",
        "Documentation.LongDescription": "Devuelve la fecha y la hora actuales en UTC (la zona horaria GMT).",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Obtiene la fecha y la hora actuales en UTC.",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "Devuelve un identificador opaco para la evaluación que se está ejecutando actualmente.",
        "Documentation.LongDescription": "Devuelve un identificador opaco para la evaluación que se está ejecutando actualmente.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "Devuelve un identificador opaco para correlacionar las solicitudes entrantes con las salientes.",
        "Documentation.LongDescription": "Devuelve un identificador opaco para correlacionar las solicitudes entrantes con las salientes.",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "Escribe una entrada de seguimiento, si está habilitado el seguimiento, y devuelve el valor.",
        "Documentation.LongDescription": "Escribe un valor <code>message</code> de seguimiento, si está habilitado el seguimiento, y devuelve <code>value</code>. Un parámetro opcional, <code>delayed</code>, especifica si se debe retardar la evaluación de <code>value</code> hasta que se realice el seguimiento del mensaje. <code>traceLevel</code> Puede tomar uno de estos valores:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>\r\n    <code>TraceLevel.Warning</code>\r\n    <code>TraceLevel.Information</code>\r\n    <code>TraceLevel.Verbose</code>\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "Hace un seguimiento del mensaje antes de invocar la función Text.From y devuelve el resultado.",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "Proveedor de identidades predeterminado para el host actual.",
        "Documentation.LongDescription": "Proveedor de identidades predeterminado para el host actual.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "Acumula un valor de resumen de los elementos de la lista.",
        "Documentation.LongDescription": "Acumula un valor de resumen de los elementos de la lista <code>list</code>, usando <code>accumulator</code>.\r\n    Puede establecerse un parámetro opcional de inicialización <code>seed</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Acumula el valor de resumen de los elementos de la lista {1, 2, 3, 4, 5} usando ((estado, actual)=> estado + actual).",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "Genera una lista de valores datetimezone dados un valor inicial, un recuento y un valor de duración incremental.",
        "Documentation.LongDescription": "Devuelve una lista de valores <code>datetimezone</code> de tamaño <code>count</code>, a partir de <code>start</code>. El incremento especificado, <code>step</code>, es un valor <code>duration</code> que se agrega a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de 10 valores comenzando 5 minutos antes del Día del Año Nuevo (#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0)) con incrementos de 1 minuto (#duration (0, 0, 1, 0)).",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "Genera una lista de valores datetime dados un valor inicial, un recuento y un valor de duración incremental.",
        "Documentation.LongDescription": "Devuelve una lista de valores <code>datetime</code> de tamaño <code>count</code>, a partir de <code>start</code>. El incremento especificado, <code>step</code>, es un valor <code>duration</code> que se agrega a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de 10 valores comenzando 5 minutos antes del Día del Año Nuevo (#datetime(2011, 12, 31, 23, 55, 0)) con incrementos de 1 minuto (#duration(0, 0, 1, 0)).",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "Genera una lista de valores date dados un valor inicial, un recuento y un valor de duración incremental.",
        "Documentation.LongDescription": "Devuelve una lista de valores <code>date</code> de tamaño <code>count</code>, a partir de <code>start</code>. El incremento especificado, <code>step</code>, es un valor <code>duration</code> que se agrega a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de 5 valores empezando por Nochevieja (#date(2011, 12, 31)) con incrementos de 1 día (#duration(1, 0, 0, 0)).",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "Genera una lista de valores duration dado un valor inicial, un recuento y un valor de duración incremental.",
        "Documentation.LongDescription": "Devuelve una lista de valores <code>count</code> <code>duration</code>, empezando en <code>start</code> con el incremento dado <code>duration</code> <code>step</code>.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de 5 valores empezando por 1 hora y con incrementos de 1 hora.",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "Genera una lista de valores.",
        "Documentation.LongDescription": "Genera una lista de valores mediante las funciones proporcionadas. La función <code>initial</code> genera un valor candidato inicial, que se prueba con <code>condition</code>.\r\n    Si se aprueba el valor candidato, se devuelve como parte de la lista resultante y se genera el siguiente valor candidato al pasar el valor recién aprobado a <code>next</code>.\r\n    Cuando un valor candidato no coincide con <code>condition</code>, se detiene el proceso de generación de listas.\r\n    También se puede proporcionar un parámetro opcional, <code>selector</code>, para transformar los elementos de la lista resultante.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crea una lista empezando desde diez y disminuye repetidamente por uno, mientras se asegura de que cada elemento sea mayor que cero.",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "Generar una lista de registros que contiene x e y, donde x es un valor e y es una lista. x debe ser menor que 10 y representa el número de elementos de la lista y. Después de generar la lista, devolver solo los valores x.",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "Inserta valores en una lista en el índice especificado.",
        "Documentation.LongDescription": "Devuelve una nueva lista generada insertando los valores de <code>values</code> en <code>list</code> y <code>index</code>. La primera posición de la lista está en el índice 0.\r\n      <ul>\r\n        <li><code>list</code>: la lista de destino donde se van a insertar los valores.</li>\r\n        <li><code>index</code>: el índice de la lista de destino (<code>list</code>) donde se van a insertar los valores. La primera posición de la lista está en el índice 0.</li>\r\n        <li><code>values</code>: la lista de valores que se van a insertar en <code>list</code>.</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Insertar lista ({3, 4}) en la lista de destino ({1, 2, 5}) en el índice 2.",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "Insertar una lista con una lista anidada ({1, {1.1, 1.2}}) en una lista de destino ({2, 3, 4}) en el índice 0.",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "Sustituye el número de recuento de valores a partir de la posición con los valores de reemplazo.",
        "Documentation.LongDescription": "Reemplaza los valores <code>count</code> de <code>list</code> con la lista <code>replaceWith</code>, a partir de la posición especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar {7, 8, 9} en la lista {1, 2, 7, 8, 9, 5} por {3, 4}.",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "Busca en una lista el valor especificado y lo sustituye.",
        "Documentation.LongDescription": "Busca en una lista de valores <code>list</code> el valor <code>oldValue</code> y sustituye cada coincidencia con el valor de reemplazo <code>newValue</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Reemplaza todos los valores \"a\" de la lista {\"a\", \"B\", \"a\", \"a\"} con \"A\".",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "Genera una lista de valores time dados un valor inicial, un recuento y un valor de duración incremental.",
        "Documentation.LongDescription": "Devuelve una lista de valores <code>time</code> de tamaño <code>count</code>, a partir de <code>start</code>. El incremento especificado, <code>step</code>, es un valor <code>duration</code> que se agrega a cada valor.",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de 4 valores comenzando desde el mediodía (#time(12, 0,0)) con incrementos de una hora (#duration(0, 1, 0, 0)).",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "Devuelve una lista cuyos elementos se transforman de la lista de entrada con las funciones especificadas.",
        "Documentation.LongDescription": "Devuelve una lista cuyos elementos se proyectan a partir de la lista de entrada.<br>\r\n    <br>\r\n    La función <code>collectionTransform</code> transforma cada elemento en una lista intermedia y la función <code>resultTransform</code> recibe el elemento original, así como un elemento de la lista intermedia, para construir el resultado final.<br>\r\n    <br>\r\n    La función <code>collectionTransform</code> tiene la firma <code>(x como cualquiera) como lista => ...</code>,  donde <code>x</code> es un elemento en <code>list</code>.\r\n    La función <code>resultTransform</code> proyecta la forma del resultado y tiene la firma <code>(x como cualquiera, y como cualquiera) como cualquiera => ...</code>, donde <code>x</code> es un elemento en <code>list</code> y <code>y</code> es un elemento de la lista generada al pasar <code>x</code> a <code>collectionTransform</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Acopla una lista de personas y sus mascotas.",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "Devuelve un número aleatorio.",
        "Documentation.LongDescription": "Devuelve un número aleatorio entre 0 y 1.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obtener un número aleatorio.",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "Agrega un campo a un registro.",
        "Documentation.LongDescription": "Agrega un campo a un registro <code>record</code>, dado el nombre del campo <code>fieldName</code> y el valor <code>value</code>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Agregar el campo Dirección al registro.",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "Reemplaza el texto dentro de la entrada proporcionada.",
        "Documentation.LongDescription": "Reemplaza el texto <code>old</code> del original <code>text</code> con el texto <code>new</code>. Esta función sustituto se puede usar en <code>List.ReplaceValue</code> y <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar el texto \"hO\" con \"Ho\" en la cadena \"hOla mundo\".",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "Reemplaza valores dentro de la entrada proporcionada.",
        "Documentation.LongDescription": "Reemplaza el valor <code>old</code> del original <code>value</code> con el valor <code>new</code>. Esta función de sutitución se puede usar en <code>List.ReplaceValue</code> y <code>Table.ReplaceValue</code>.",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar el valor 11 con el valor 10.",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "Devuelve un resultado JSON de la API de Smartsheet",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "Realiza una llamada a la API de REST de Smartsheet 2.0 en el punto de conexión especificado y devuelve los resultados en forma registro JSON.",
        "Documentation.Examples": [
          {
            "Description": "Extrae datos del punto de conexión de la API de Smartsheet de hojas con los argumentos adicionales especificados",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "Una tabla con información de las hojas tal como la devuelve la API de Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.ContentsV110",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "RangeStart": "datetime",
        "RangeEnd": "datetime"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "Devuelve una función que no divide y devuelve su argumento como una única lista de elementos.",
        "Documentation.LongDescription": "Devuelve una función que no divide y devuelve su argumento como una única lista de elementos.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto con los espacios en blanco.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto con los espacios en blanco.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada por espacios en blanco y trata las comillas como cualquier otro carácter.",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "Divide la tabla en una lista de tablas según el número de grupos y la columna especificados.",
        "Documentation.LongDescription": "Divide la <code>table</code> en una lista de un número de tablas <code>groups</code>, según el valor de <code>column</code> y una función <code>hash</code>.\r\n     La función <code>hash</code> se aplica el valor de la fila <code>column</code> para obtener un valor hash para la fila. El módulo de valor hash <code>groups</code> determina en cuáles de las tablas devueltas se colocará la fila.\r\n    <ul>\r\n       <li><code>table</code>: tabla que dividir.</li>\r\n       <li><code>column</code>: columna a la que aplicar hash para determinar en qué tabla devuelta está la fila.</li>\r\n       <li><code>groups</code>: número de tablas en las que se dividirá la tabla de entrada.</li>\r\n       <li><code>hash</code>: la función aplicada para obtener un valor hash.</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Divida la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> en 2 tablas según la columna [a], con el valor de las columnas como función hash.",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "Devuelve la porción de <code>text</code> entre los delimitadores <code>startDelimiter</code> y <code>endDelimiter</code> especificados.\r\n    Un <code>startIndex</code> numérico opcional indica la aparición de <code>startDelimiter</code> que debe considerarse.\r\n    Una lista opcional <code>startIndex</code> indica la aparición de <code>startDelimiter</code> que debe considerarse, así como si la indexación debe realizarse desde el inicio o el final de la entrada.\r\n    Es similar a <code>endIndex</code>, excepto que la indexación se realiza en relación con <code>startIndex</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la porción de \"111 (222) 333 (444)\" entre el primer paréntesis de apertura y el primer paréntesis de cierre que le siga.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "Obtenga la porción de \"111 (222) 333 (444)\" entre el segundo paréntesis de apertura y el primer paréntesis de cierre que le siga.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "Obtenga la porción de \"111 (222) 333 (444)\" entre el segundo paréntesis de apertura desde el final y el segundo paréntesis de cierre que le siga.",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "Inserta un valor de texto en otro en una posición especificada.",
        "Documentation.LongDescription": "Devuelve el resultado de insertar el valor de texto <code>newText</code> en el valor de texto <code>text</code> en la posición <code>offset</code>. Las posiciones empiezan en el número 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Insertar \"C\" entre \"B\" y \"D\" en \"ABD\".",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "Devuelve un identificador único global nuevo y aleatorio (GUID).",
        "Documentation.LongDescription": "Devuelve un identificador único global nuevo y aleatorio (GUID).",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "Reemplaza todas las coincidencias de la subcadena dada en el texto.",
        "Documentation.LongDescription": "Devuelve el resultado de reemplazar las coincidencias del valor de texto <code>old</code> en el valor de texto <code>text</code> con el valor de texto <code>new</code>. Esta función distingue mayúsculas y minúsculas.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar cada coincidencia de \"el\" en una frase con \"a\".",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "Quita un intervalo de caracteres e inserta un nuevo valor en la posición especificada.",
        "Documentation.LongDescription": "Devuelve el resultado de quitar varios caracteres, <code>count</code>, del valor de texto <code>text</code> a partir de la posición <code>offset</code> y después de insertar el valor de texto <code>newText</code> en la misma posición en <code>text</code>.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Reemplazar un solo carácter en la posición 2 en el valor de texto \"ABGF\" con el nuevo valor de texto \"CDE\".",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "Agrega una clave al tipo de tabla dado.",
        "Documentation.LongDescription": "Agrega una clave al tipo de tabla dado.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "Devuelve una lista de identidades que la condición aceptará.",
        "Documentation.LongDescription": "<p>Mediante el elemento <code>identityProvider</code> especificado, convierte <code>condition</code> en una lista de identidades para las cuales <code>condition</code> devolvería un valor <code>true</code> en todos los contextos de autorización con <code>identityProvider</code> como proveedor de identidades. Si no es posible convertir <code>condition</code> en una lista de identidades, por ejemplo, si <code>condition</code> consulta atributos que no sean relativos a identidades de usuarios o grupos para tomar una decisión, se genera un error.</p>\r\n    <p>Tenga en cuenta que la lista de identidades representa las identidades tal como aparecen en <code>condition</code>, es decir, sobre ellas no se ejecuta ninguna operación de normalización, como sería el caso de una expansión de grupos.</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "Comprime un valor binario usando el tipo de compresión especificado.",
        "Documentation.LongDescription": "Comprime un valor binary con el tipo de compresión especificado. El resultado de esta llamada es una copia comprimida de la entrada. Entre los tipos de compresión se incluyen:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Comprime el valor binario.",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "Descomprime un valor binario usando el tipo de compresión especificado.",
        "Documentation.LongDescription": "Descomprime un valor binary con el tipo de compresión especificado. El resultado de esta llamada es una copia descomprimida de la entrada. Entre los tipos de compresión se incluyen:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Descomprime el valor binario.",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "Devuelve un subconjunto del valor binario comenzando en un desplazamiento.",
        "Documentation.LongDescription": "Devuelve un subconjunto del valor binario comenzando en el desplazamiento <code>binary</code>. Un parámetro opcional, <code>offset</code>, establece la longitud máxima del subconjunto.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Devuelve un subconjunto del valor binario comenzando en el desplazamiento 6.",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "Devuelve un subconjunto de longitud 2 a partir del desplazamiento 6 del valor binario.",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "Divide el binario especificado en una lista de archivos binarios con el tamaño de página especificado.",
        "Documentation.LongDescription": "Divide <code>binary</code> en una lista de archivos binarios donde el primer elemento de la lista de salida es un binario que contiene los primeros bytes <code>pageSize</code> de\r\n    el binario de origen, el siguiente elemento de la lista de salida es un binario que contiene los siguientes bytes <code>pageSize</code> del binario de origen,  y así sucesivamente.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "Crea o amplía un binario con controladores definidos por el usuario para operaciones de consulta y acción.",
        "Documentation.LongDescription": "<p>Devuelve una vista de <code>binary</code> dónde se usan las funciones especificadas en <code>handlers</code> en lugar del comportamiento predeterminado de una operación cuando la operación se aplica a la vista.</p>\r\n<p> Si <code>binary</code> se proporciona, todas las funciones del controlador son opcionales. Si <code>binary</code> no se proporciona, se requiere la función de controlador <code>GetStream</code>. Si no se especifica una función de controlador para una operación, en su lugar se aplica el comportamiento predeterminado de la operación a <code>binary</code> (excepto en el caso de <code>GetExpression</code>).</p>\r\n<p> Las funciones de controlador deben devolver un valor que es semánticamente equivalente al resultado de aplicar la operación contra <code>binary</code> (o la vista resultante en el caso de <code>GetExpression</code>).</p>\r\n<p> Si una función de controlador genera un error, el comportamiento predeterminado de la operación se aplica a la vista.</p>\r\n<p><code>Binary.View</code> se puede usar para implementar el plegado a una fuente de datos: la traducción de consultas M en operaciones específicas de la fuente (por ejemplo, para descargar una sección de un archivo).</p>\r\n<p>Consulte la documentación publicada del conector personalizado de Power Query para obtener una descripción más completa de <code>Binary.View</code>.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Cree una vista básica que no requiera tener acceso a los datos para determinar la longitud.",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "Devuelve un formato binario con el orden de bytes especificado por una función.",
        "Documentation.LongDescription": "Devuelve un formato binario con el orden de bytes especificado por <code>binaryFormat</code>.  El orden de bytes predeterminado es <code>ByteOrder.BigEndian</code>.",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "Devuelve un formato binario que elige el formato binario siguiente según un valor que ya se ha leído.",
        "Documentation.LongDescription": "Devuelve un formato binario que elige el formato binario siguiente según un valor que ya se ha leído.  El valor de formato binario generado por esta función funciona en fases:<ul>\r\n<li>El formato binario especificado por el parámetro <code>binaryFormat</code> se usa para leer un valor.</li>\r\n<li>El valor se pasa a la función elegida especificada por el parámetro <code>chooseFunction</code>.</li>\r\n<li>La función elegida inspecciona el valor y devuelve un segundo formato binario.</li>\r\n<li>El segundo formato binario se usa para leer un segundo valor.</li>\r\n<li>Si se especifica la función de combinación, se pasan el primer y el segundo valor a la misma y se devuelve el valor resultante.</li>\r\n<li>Si no se especifica la función de combinación, se devuelve el segundo valor.</li>\r\n<li>Se devuelve el segundo valor.</li>\r\n</ul>El parámetro opcional <code>type</code> indica el tipo de formato binario que devolverá la función elegida.  Puede especificar <code>type any</code>, <code>type list</code> o <code>type binary</code>.  Si el parámetro <code>type</code> no se especifica, se usa <code>type any</code>.   Si se usa <code>type list</code> o <code>type binary</code>, el sistema puede devolver un valor <code>binary</code> o <code>list</code> en secuencia en vez de uno almacenado en búfer, lo que puede reducir la cantidad de memoria necesaria para leer el formato.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "Leer una lista de bytes cuyo número de elementos viene determinado por el primer byte.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "Leer una lista de bytes cuyo número de elementos viene determinado por el primer byte y conservar el primer byte leído.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "Leer una lista de bytes cuyo número de elementos viene determinado por el primer byte con una lista en secuencia.",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "Devuelve un formato binario que lee un grupo de elementos.",
        "Documentation.LongDescription": "Los parámetros son los siguientes:\r\n<ul>\r\n<li>El parámetro <code>binaryFormat</code> especifica el formato binario del valor de clave.</li>\r\n<li>El parámetro <code>group</code> proporciona información sobre el grupo de elementos conocidos.</li>\r\n<li>El parámetro opcional <code>extra</code> puede utilizarse para especificar una función que devolverá un valor de formato binario para el valor seguido de cualquier clave inesperada.  Si el parámetro <code>extra</code> no está especificado, entonces se producirá un error si existen valores de clave inesperados.</li>\r\n</ul>\r\nEl parámetro <code>group</code> especifica una lista de definiciones de elementos.  Cada definición de elemento es una lista que contiene 3-5 valores, según lo indicado a continuación:\r\n<ul>\r\n<li>Valor de clave.  El valor de la clave que se corresponde con el elemento.  Debe ser único dentro del conjunto de elementos.</li>\r\n<li>Formato de elemento.  El formato binario que se corresponde con el valor del elemento.  Esto permite que cada elemento tenga un formato distinto. </li>\r\n<li>Repetición del elemento.  El valor <code>BinaryOccurrence.Type</code> con el número de veces que se espera que aparezca el elemento en el grupo.   Los elementos requeridos que no están presentes provocan un error.  Los elementos duplicados requeridos u opcionales se tratan como valores de clave imprevistos.</li>\r\n<li>Valor predeterminado del elemento (opcional).  Si el valor predeterminado del elemento aparece en la lista de definiciones de elementos y no es nulo, entonces se empleará este en lugar del valor predeterminado.  El valor predeterminado para elementos repetidos u opcionales es nulo y el valor predeterminado para valores repetidos es una lista vacía { }.</li>\r\n<li>Transformación de valores de elementos (opcional).   Si la función de transformación de valores de elementos está presente en la lista de definiciones de elementos y no es nula, entonces se llamará a esta función para transformar el valor del elemento antes de que sea devuelto.  Solo se llamará a la función de transformación si el elemento aparece en la entrada (nunca será llamada con el valor predeterminado). </li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "Lo siguiente asume un valor de clave que es un byte individual, con 4 elementos esperados en el grupo, todos ellos con un byte de datos después de la clave.  El elemento aparece en la entrada del modo indicado a continuación:\r\n<ul>\r\n<li>La clave 1 se requiere y no aparece con valor 11.</li>\r\n<li>La clave 2 se repite y aparece dos veces con valor 22 y da como resultado un valor de { 22, 22 }.</li>\r\n<li>La clave 3 es opcional y no aparece y da como resultado un valor de nulo.</li>\r\n<li>La clave 4 se repite, pero no aparece, y da como resultado un valor de { }.</li>\r\n<li>La clave 5 no es parte del grupo, pero aparece una vez con valor 55.  A la función extra se llama con el valor de clave 5 y devuelve el formato correspondiente a ese valor (BinaryFormat.Byte).  El valor 55 está leído y descartado.</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "El siguiente ejemplo muestra la transformación del valor del elemento y el valor predeterminado del elemento.   El elemento repetido con la clave 1 suma la lista de valores leídos utilizando List.Sum.  El elemento opcional con clave 2 tiene un valor predeterminado de 123 en lugar de nulo.",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "Devuelve un formato binario que limita la cantidad de datos que se pueden leer.",
        "Documentation.LongDescription": "Devuelve un formato binario que limita la cantidad de datos que se pueden leer.  Tanto <code>BinaryFormat.List</code> como <code>BinaryFormat.Binary</code> se pueden usar para leer hasta el final de los datos.  <code>BinaryFormat.Length</code> puede usarse para limitar el número de bytes que se leen.  El parámetro <code>binaryFormat</code> especifica el formato binario que limitar.  El parámetro <code>length</code> especifica el número de bytes que leer.  El parámetro <code>length</code> puede ser un valor numérico o un valor de formato binario que especifica el formato del valor de longitud que aparece que antecede al valor que se lee.",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "Limitar el número de bytes leídos a 2 al leer una lista de bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Limite el número de bytes leídos al leer una lista de bytes al valor de byte que precede a la lista.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "Devuelve un formato binario que transformará los valores leídos por otro formato binario.",
        "Documentation.LongDescription": "Devuelve un formato binario que transformará los valores leídos por otro formato binario.  El parámetro <code>binaryFormat</code> especifica el formato binario que se usará para leer el valor.  El <code>function</code> se invoca con el valor leído y devuelve el valor transformado.",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "Lea un byte y agréguele uno.",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "Devuelve una función de comparador que usa reglas ordinales para comparar valores.",
        "Documentation.LongDescription": "Devuelve una función comparadora que utiliza reglas ordinales para comparar los valores proporcionados <code>x</code> y <code>y</code>.<br>\r\n      <br>\r\n      Una función comparadora acepta dos argumentos y devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Usando reglas ordinales, compare si \"encyclopædia\" y \"encyclopaedia\" son equivalentes. Tenga en cuenta que son equivalentes si se usa <code>Comparer.FromCulture(\"en-US\")</code>. ",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "Devuelve una función de comparador que no distingue mayúsculas de minúsculas y que usa reglas ordinales para comparar valores.",
        "Documentation.LongDescription": "Devuelve una función comparadora que no distingue entre mayúsculas y minúsculas y que utiliza reglas ordinales para comparar los valores proporcionados <code>x</code> y <code>y</code>.<br>\r\n        <br>\r\n        Una función comparadora acepta dos argumentos y devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Usando reglas ordinales que no distinguen mayúsculas de minúsculas, compare \"Abc\" con \"abc\". Observe que \"Abc\" es menor que \"abc\" usando <code>Comparer.Ordinal</code>. ",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "Devuelve una propiedad de un atributo de dimensión.",
        "Documentation.LongDescription": "Devuelve la propiedad <code>propertyName</code> del atributo de dimensión <code>attribute</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "Devuelve la propiedad de una medida (propiedad de celda).",
        "Documentation.LongDescription": "Devuelve la propiedad <code>propertyName</code> de la medida <code>measure</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Origen de la consulta de Databricks SQL",
        "Documentation.LongDescription": "Definición de un origen de datos de Databricks para ejecutar consultas SQL"
      },
      "ReturnType": "Consulta SQL de Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Origen de la consulta de Databricks SQL",
        "Documentation.LongDescription": "Definición de un origen de datos de Databricks para ejecutar consultas SQL"
      },
      "ReturnType": "Consulta SQL de Databricks",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "Suma los días especificados a la fecha.",
        "Documentation.LongDescription": "Devuelve el resultado <code>date</code>, <code>datetime</code> o <code>datetimezone</code> obtenido al sumar <code>numberOfDays</code> días al valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> al que se suman los días.</li>\r\n      <li><code>numberOfDays</code>: el número de días que se deben sumar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Sumar 5 días al valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que representa la fecha 14/5/2011.",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "Suma los meses especificados a la fecha.",
        "Documentation.LongDescription": "Devuelve el valor <code>date</code><code>datetime</code> o <code>datetimezone</code> como resultado de sumar <code>numberOfMonths</code> meses al valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: el valor <code>date</code><code>datetime</code> o <code>datetimezone</code> al que se suman los meses.</li>\r\n        <li><code>numberOfMonths</code>: número de meses que se sumarán.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Sumar 5 meses al valor <code>date</code><code>datetime</code> o <code>datetimezone</code> que representa la fecha 5/14/2011.",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "Sumar 18 meses al valor <code>date</code><code>datetime</code> o <code>datetimezone</code> que representa la fecha y la hora 5/14/2011 08:15:22 a.m.",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "Suma los trimestres especificados a la fecha.",
        "Documentation.LongDescription": "Devuelve el resultado <code>date</code>, <code>datetime</code> o <code>datetimezone</code> obtenido al sumar <code>numberOfQuarters</code> trimestres al valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> al que se suman los trimestres.</li>\r\n      <li><code>numberOfQuarters</code>: el número de trimestres que se deben sumar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Sumar 1 trimestre al valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que representa la fecha 14/5/2011.",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "Suma las semanas especificadas a la fecha.",
        "Documentation.LongDescription": "Devuelve el resultado <code>date</code>, <code>datetime</code> o <code>datetimezone</code> obtenido al sumar <code>numberOfWeeks</code> semanas al valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n      <li><code>dateTime</code>: el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> al que se suman las semanas.</li>\r\n      <li><code>numberOfWeeks</code>: el número de semanas que se deben sumar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Sumar 2 semanas al valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que representa la fecha 14/5/2011.",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "Suma los años especificados a la fecha.",
        "Documentation.LongDescription": "Devuelve el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> como resultado de sumar <code>numberOfYears</code> a un valor <code>datetime</code> <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> al que se suman los años.</li>\r\n        <li><code>numberOfYears</code>: número de años que se sumarán.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Sumar 4 años al valor <code>date</code><code>datetime</code> o <code>datetimezone</code> que representa la fecha 5/14/2011.",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "Sumar 10 años al valor <code>date</code><code>datetime</code> o <code>datetimezone</code> que representa la fecha y la hora 5/14/2011 08:15:22 a.m.",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de días siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de días, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el día actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>days</code>: número de días.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el día posterior a la hora del sistema actual se encuentra dentro de los dos días siguientes.",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de meses siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del mes actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de meses, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el mes actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>months</code>: número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina si el mes posterior a la hora del sistema actual se encuentra dentro de los siguientes dos meses.",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de trimestres siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de trimestres, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el trimestre actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>quarters</code>: número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el trimestre posterior a la hora del sistema actual se encuentra dentro de los dos trimestres siguientes.",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de semanas siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de semanas, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en la semana actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>weeks</code>: número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina si la semana posterior a la hora del sistema actual se encuentra dentro de las dos semanas siguientes.",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de años siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de años, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el año actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>years</code>: número de años.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el año posterior a la hora del sistema actual se encuentra dentro de los dos años siguientes.",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de días anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de días, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el día actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>days</code>: número de días.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el día anterior a la hora del sistema actual se encuentra dentro de los dos días anteriores.",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de meses anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del mes actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de meses, como se determina por la hora y fecha actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el mes actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>months</code>: número de meses.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el mes anterior a la hora del sistema actual se encuentra dentro de los dos meses anteriores.",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de trimestres anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de trimestres, como se determina por la hora y fecha actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el trimestre actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>quarters</code>: número de trimestres.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si el trimestre anterior a la hora del sistema actual se encuentra dentro de los dos trimestres anteriores.",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de semanas anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de semanas, como se determina por la hora y fecha actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en la semana actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>weeks</code>: número de semanas.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determine si la semana anterior a la hora del sistema actual está dentro de las dos semanas anteriores.",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "Indica si esta fecha se produce durante el número de años anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de años, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el año actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>years</code>: número de años.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determina si el año anterior a la hora del sistema actual se encuentra dentro de los dos años anteriores.",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "Añade la información de la zona horaria al valor de fecha y hora.",
        "Documentation.LongDescription": "Agrega la información de zona horaria al valor de <code>dateTime</code>. La información de zona horaria incluye <code>timezoneHours</code> y, opcionalmente, <code>timezoneMinutes</code>, que especifican el desplazamiento deseado respecto a la hora UTC.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Establezca la zona horaria en UTC+7:30 (7 horas y 30 minutos posteriores a UTC).",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de horas siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de horas, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en la hora actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>hours</code>: número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determina si la hora posterior a la hora del sistema actual se encuentra en las siguientes dos horas.",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de minutos siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de minutos, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el minuto actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>minutes</code>: número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el minuto posterior a la hora del sistema actual se encuentra en los siguientes dos minutos.",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de segundos siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el siguiente número de segundos, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el segundo actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>seconds</code>: número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determina si el segundo posterior a la hora del sistema actual se encuentra en los siguientes dos segundos.",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de horas anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de horas, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en la hora actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>hours</code>: número de horas.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora anterior a la hora del sistema actual se encuentra en las dos horas anteriores.",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de minutos anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de minutos, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el minuto actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>minutes</code>: número de minutos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el minuto anterior a la hora del sistema actual se encuentra en los dos minutos anteriores.",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "Indica si este valor datetime se produce durante el número de segundos anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.",
        "Documentation.LongDescription": "Indica si el valor datetime <code>dateTime</code> proporcionado se produce durante el número anterior de segundos, como se determina por la fecha y hora actual del sistema. Tenga en cuenta que esta función devolverá un valor \"false\" al pasar un valor que se produzca en el segundo actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>datetime</code> o <code>datetimezone</code> para evaluar.</li>\r\n      <li><code>seconds</code>: número de segundos.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el minuto anterior a la hora del sistema actual se encuentra en los dos segundos anteriores.",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "Cambia la zona horaria del valor.",
        "Documentation.LongDescription": "Cambia la información de zona horaria al valor de datetimezone <code>dateTimeZone</code> para la nueva información de zona horaria proporcionada por <code>timezoneHours</code> y, opcionalmente, <code>timezoneMinutes</code>.\r\n    Si <code>dateTimeZone</code> no tiene un componente de zona horaria, se inicia una excepción.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Cambie la información de zona horaria para #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) a 8 horas.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "Cambiar la información de zona horaria para #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) a -30 minutos.",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "Tiene acceso a un valor por nombre en un mashup incrustado.",
        "Documentation.LongDescription": "Tiene acceso a un valor por nombre en un mashup incrustado.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "Crea una función con una firma de parámetro específica agregada a una función que utiliza un único argumento de lista.",
        "Documentation.LongDescription": "Utiliza una función de unario <code>function</code> y crea una función nueva con el tipo <code>functionType</code>, que construye una lista a partir de sus argumentos y la pasa a <code>function</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Convierte List.Sum en una función de dos argumentos que se agregan.",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "Convierte una función a partir de una lista en una función de dos argumentos.",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "Invoca la función dada",
        "Documentation.LongDescription": "Invoca la función especificada con la lista especificada de argumentos y devuelve el resultado.",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "Invoca Record.FieldNames con un argumento [A=1, B=2]",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "Invoca la función determinada cuando termina la duración especificada.",
        "Documentation.LongDescription": "Devuelve el resultado de la invocación de <code>function</code> cuando termina la duración <code>delay</code>.",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "Crea una función escalar sobre una función de vector y procesa varias invocaciones por lotes.",
        "Documentation.LongDescription": "<p>Devuelve una función escalar de tipo <code>scalarFunctionType</code> que invoca <code>vectorFunction</code> con una sola fila de argumentos y devuelve su salida única. Además, cuando la función escalar se aplica repetidamente para cada fila de una tabla de entradas, como en Table.AddColumn, <code>vectorFunction</code> se aplicará una vez para todas las entradas en su lugar.</p>\r\n<p>Se pasará una tabla a <code>vectorFunction</code>; las columnas de esta tabla tendrán el mismo nombre y la misma posición que los parámetros de <code>scalarFunctionType</code>. Cada fila de esta tabla contiene los argumentos de una llamada de la función escalar; las columnas se corresponden con los parámetros de <code>scalarFunctionType</code>.</p>\r\n<p><code>vectorFunction</code> debe devolver una lista con la misma longitud que la tabla de entradas. El elemento de cada posición de esta tabla debe equivaler a evaluar la función escalar en la fila de entrada de la misma posición.</p>\r\n<p>Se espera que la tabla de entradas esté secuenciada, por lo que también se espera que <code>vectorFunction</code> secuencie los resultados a medida que recibe las entradas, así como que solo procese un fragmento de entradas al mismo tiempo. Específicamente, <code>vectorFunction</code> no debe enumerar su tabla de entradas más de una vez.</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "Permite crear un registro que representa un punto geográfico a partir de distintos elementos.",
        "Documentation.LongDescription": "Permite crear un registro que representa un punto geográfico a partir de sus distintas partes, como la longitud, la latitud y, si están presentes, la elevación (Z) y la medida (M). Se puede proporcionar un identificador de referencia espacial (SRID) opcional si no coincide con el valor predeterminado (4326).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "Permite crear un registro que representa un punto geométrico a partir de distintos elementos.",
        "Documentation.LongDescription": "Permite crear un registro que representa un punto geométrico a partir de sus distintas partes, como la coordenada X, la coordenada Y y, si están presentes, la coordenada Z y la medida (M). Se puede proporcionar un identificador de referencia espacial (SRID) opcional si no coincide con el valor predeterminado (0).",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "Crea una identidad.",
        "Documentation.LongDescription": "Crea una identidad.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "Determina si una identidad es miembro de una colección de identidades.",
        "Documentation.LongDescription": "Determina si una identidad es miembro de una colección de identidades.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "Devuelve una lista formada por todos los elementos de desplazamiento con numeración impar de una lista.",
        "Documentation.LongDescription": "Devuelve una lista formada por todos los elementos de desplazamiento con numeración impar de una lista. Alterna entre tomar y omitir los valores de la lista <code>list</code> en función de los parámetros.\r\n    <ul>\r\n    <li><code>count</code>: especifica el número de valores que se omiten cada vez.</li>\r\n    <li><code>repeatInterval</code>: un intervalo opcional de repetición para indicar cuántos valores se agregan entre los valores omitidos.</li>\r\n    <li><code>offset</code>: un parámetro de desplazamiento opcional para comenzar a omitir los valores en el desplazamiento inicial.</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de {1..10} que omite el primer número.",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "Crear una lista de {1..10} que omite números alternos.",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "Crear una lista de {1..10} que comienza en 1 y omite números alternos.",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "Crear una lista de {1..10} que comienza en 1, omite un valor, conserva dos, y así sucesivamente.",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "Indica si la lista contiene el valor.",
        "Documentation.LongDescription": "Indica si la lista <code>list</code> contiene el valor <code>value</code>.\r\n    Devuelve \"true\" si el valor se encuentra en la lista, y \"false\" en caso contrario. Se puede especificar un valor opcional de criterios de ecuación (<code>equationCriteria</code>) para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 3.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 6.",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "Indica dónde incluye una lista todos los valores en otra lista.",
        "Documentation.LongDescription": "Indica si la lista <code>list</code> incluye todos los valores en otra lista <code>values</code>.\r\n    Devuelve true si el valor se encuentra en la lista y false en caso contrario. Se puede especificar un valor opcional de criterios de ecuación, <code>equationCriteria</code>, para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 3 y 4.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 5 y 6.",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "Indica dónde incluye una lista alguno de los valores de otra lista.",
        "Documentation.LongDescription": "Indica si la lista <code>list</code> incluye alguno de los valores de otra lista <code>values</code>.\r\n        Devuelve true si el valor se encuentra en la lista y false en caso contrario. Se puede especificar un valor opcional de criterios de ecuación, <code>equationCriteria</code>, para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 3 o 9.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "Buscar si la lista {1, 2, 3, 4, 5} contiene 6 o 7.",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "Devuelve la covarianza entre las dos listas de números.",
        "Documentation.LongDescription": "Devuelve la covarianza entre las dos listas de números, <code>numberList1</code> y <code>numberList2</code>. <code>numberList1</code> y <code>numberList2</code> deben contener el mismo número de valores <code>number</code>.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Calcular la covarianza entre las dos listas de números.",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "Devuelve la diferencia de las dos listas dadas.",
        "Documentation.LongDescription": "Devuelve los elementos de la lista <code>list1</code> que no están en la lista <code>list2</code>. No se admiten valores duplicados.\r\n    Se puede especificar un valor opcional de criterios de ecuación (<code>equationCriteria</code>) para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar los elementos de la lista {1, 2, 3, 4, 5} que no aparecen en {4, 5, 3}.",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "Encuentra los elementos de la lista {1, 2} que no aparecen en la lista {1, 2, 3}.",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "Devuelve una lista de valores (campos de registro incluidos) que contienen el texto especificado.",
        "Documentation.LongDescription": "Devuelve una lista de valores de la lista <code>list</code> que contiene el valor <code>text</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar los valores de texto en la lista {\"a\", \"b\", \"ab\"} que coinciden con \"a\". ",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "Devuelve el primer conjunto de elementos de la lista especificando cuántos elementos devolver o una condición que cumplir.",
        "Documentation.LongDescription": " <ul>\r\n  <li>Si se especifica un número, se devuelven hasta ese número de elementos. </li>\r\n  <li>Si se especifica una condición, se devuelven todos los elementos que cumplen inicialmente la condición. Una vez un elemento no cumple la condición, no se consideran más elementos. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar los valores iniciales en la lista {3, 4, 5, -1, 7, 8, 2} que sean mayores que 0.",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "Devuelve true si todos los valores de la lista satisfacen la función de la condición.",
        "Documentation.LongDescription": "Devuelve <code>true</code> si todos los valores de la lista <code>list</code> satisfacen la función de la condición, <code>condition</code>; de lo contrario, devuelve <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Determinar si todos los valores de la lista {11, 12, 13} son mayores que 10.",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Determinar si todos los valores de la lista {1, 2, 3} son mayores que 10.",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "Devuelve true si algún valor satisface la función de la condición.",
        "Documentation.LongDescription": "Devuelve <code>true</code> si alguno de los valores de la lista <code>list</code> satisfacen la función de la condición, <code>condition</code>; de lo contrario, devuelve <code>false</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar si alguno de los valores de la lista {9, 10, 11} son mayores que 10.",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "Buscar si alguno de los valores de la lista {1, 2, 3} son mayores que 10.",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "Devuelve los valores máximos de la lista. Debe especificarse la condición de filtrado o el número de valores que se van a devolver.",
        "Documentation.LongDescription": "Devuelve los valores máximos de la lista, <code>list</code>.\r\n    Una vez ordenadas las filas, se pueden especificar parámetros opcionales para filtrar aún más el resultado. El parámetro opcional <code>countOrCondition</code> especifica el número de valores que se devolverán o una condición de filtrado. El parámetro opcional <code>comparisonCriteria</code> especifica cómo se comparan los valores de la lista.\r\n <ul>\r\n        <li><code>list</code>: La lista de valores.</li>\r\n        <li><code>countOrCondition</code>: si se especifica un número, se devuelve una lista de hasta <code>countOrCondition</code> elementos en orden ascendente. Si se especifica una condición, se devuelve una lista de los elementos que cumplen inicialmente la condición. Si un elemento no cumple la condición, no se considerarán más elementos.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Se puede especificar un valor <code>comparisonCriteria</code> opcional para determinar cómo se comparan los elementos de la lista. Si este parámetro es \"null\", se usa el comparador predeterminado.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "Devuelve los valores mínimos de la lista. Puede especificarse la condición de filtrado o el número de valores que se van a devolver.",
        "Documentation.LongDescription": "Devuelve los valores mínimos de la lista, <code>list</code>.\r\n    El parámetro <code>countOrCondition</code> especifica el número de valores que se devolverán o una condición de filtrado. El parámetro opcional <code>comparisonCriteria</code> especifica cómo se comparan los valores de la lista.\r\n <ul>\r\n        <li><code>list</code>: La lista de valores.</li>\r\n        <li><code>countOrCondition</code>: si se especifica un número, se devuelve una lista de hasta <code>countOrCondition</code> elementos en orden ascendente. Si se especifica una condición, se devuelve una lista de los elementos que cumplen inicialmente la condición. Si un elemento no cumple la condición, no se considerarán más elementos. Si este parámetro es \"null\", se devuelve el valor menor único de la lista.</li>\r\n<li><code>comparisonCriteria</code>: <i>[Opcional]</i> Se puede especificar un valor <code>comparisonCriteria</code> opcional para determinar cómo se comparan los elementos de la lista. Si este parámetro es \"null\", se usa el comparador predeterminado.\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar los cinco valores menores de la lista <code>{3, 4, 5, -1, 7, 8, 2}</code>.",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "Devuelve una lista de números dado un valor inicial, un recuento y un valor de incremento opcional.",
        "Documentation.LongDescription": "Devuelve una lista de números dado un valor inicial, un recuento y un valor de incremento opcional. El valor de incremento predeterminado es 1.\r\n<ul>\r\n   <li><code>start</code>: el valor inicial de la lista.</li>\r\n   <li><code>count</code>: número de valores que crear.</li>\r\n   <li><code>increment</code>: <i>[opcional]</i> el valor en el que incrementar. Si los valores omitidos se incrementan en 1.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Generar una lista de 10 números consecutivos que empieza en 1.",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "Generar una lista de 10 números que empieza en 1, con un incremento de 2 para cada número posterior.",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "Devuelve uno o más percentiles de muestra correspondientes a las probabilidades especificadas.",
        "Documentation.LongDescription": "Devuelve uno o más percentiles de muestra de la lista <code>list</code>. Si el valor <code>percentiles</code> es un número entre 0,0 y 1,0, se tratará como percentil, y el resultado será\r\n    un valor único correspondiente a esa probabilidad. Si el valor <code>percentiles</code> es una lista de números con valores entre 0,0 y 1,0, el resultado será una lista de percentiles\r\n    correspondiente a la probabilidad de entrada. Los usuarios avanzados pueden usar la opción PercentileMode en <code>options</code> para elegir un método de interpolación más específico, pero no se recomienda para la mayoría de los usos.\r\n    Los símbolos predefinidos <code>PercentileMode. ExcelInc</code> y <code>PercentileMode. ExcelExc</code> coinciden con los métodos de interpolación utilizados por las funciones de Excel\r\n    <code>PERCENTILE.INC</code> y <code>PERCENTILE.EXC</code>. El comportamiento predeterminado coincide con <code>PercentileMode.ExcelInc</code>. Los símbolos\r\n    <code>PercentileMode.SqlCont</code> y <code>PercentileMode.SqlDisc</code> coinciden con el comportamiento de SQL Server para <code>PERCENTILE_CONT</code> y\r\n    <code>PERCENTILE_DISC</code> respectivamente.\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Encuentre el primer cuartil de la lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "Encuentre los cuartiles de la lista <code>{5, 3, 1, 7, 9}</code> usando un método de interpolación que coincida con <code>PERCENTILE.EXC</code> de Excel.",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "Devuelve los desplazamientos de un valor en una lista.",
        "Documentation.LongDescription": "Devuelve el desplazamiento en el que el valor <code>value</code> aparece en la lista <code>list</code>. Devuelve -1 si el valor no aparece.\r\n    Puede especificarse un parámetro de repetición opcional, <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: el número máximo de repetición que notificar.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Buscar la posición en la lista {1, 2, 3} en la que el valor 3 aparece.",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "Devuelve el primer desplazamiento de un valor en una lista.",
        "Documentation.LongDescription": "Devuelve el desplazamiento de la lista <code>list</code> de la primera repetición de un valor de una lista <code>values</code>. Devuelve -1 si no se encuentra ninguna repetición.\r\n    Puede especificarse un parámetro de repetición opcional, <code>occurrence</code>.\r\n<ul>\r\n   <li><code>occurrence</code>: el número máximo de repeticiones que se puede devolver.</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Buscar la primera posición en la lista {1, 2, 3} en la que el valor 2 o 3 aparece.",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "Devuelve un subconjunto de la lista comenzando en un desplazamiento.",
        "Documentation.LongDescription": "Devuelve un subconjunto de la lista comenzando en el desplazamiento <code>list</code>. Un parámetro opcional, <code>offset</code>, establece el número máximo de elementos del subconjunto.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el subconjunto que empieza en el desplazamiento 6 de la lista de números 1 a 10.",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "Buscar el subconjunto de longitud 2 a partir del desplazamiento 6 de la lista de números 1 a 10.",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "Quita los elementos de list1 que estén presentes en la lista.",
        "Documentation.LongDescription": "Quita todas las coincidencias de los valores proporcionados en <code>list2</code> de <code>list1</code>. Si no existen los valores de <code>list2</code> en <code>list1</code>, se devuelve la lista original.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Quitar de la lista {1, 2, 3, 4, 2, 5, 5} los elementos de la lista {2, 4, 6}.",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "Quita todas las coincidencias de los valores de entrada.",
        "Documentation.LongDescription": "Quita todas las coincidencias de los valores proporcionados en <code>list2</code> de la lista <code>list1</code>. Si no existen los valores de <code>list2</code> en <code>list1</code>, se devuelve la lista original.\r\n    Se puede especificar un valor opcional de criterios de ecuación, <code>equationCriteria</code>, para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir de {1, 2, 3, 4, 5, 5} sin {1, 5}.",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "Quita el número de recuento de valores a partir de la posición especificada.",
        "Documentation.LongDescription": "Quita los valores <code>count</code> de <code>list</code> a partir de la posición especificada, <code>index</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Quitar 3 valores de la lista {1, 2, 3, 4, -6, -2, -1, 5} a partir del índice 4.",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "Devuelve una lista que un recuento de repeticiones de la lista original.",
        "Documentation.LongDescription": "Devuelve una lista que <code>count</code> repeticiones de la lista original, <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista que tenga {1, 2} repetido 3 veces.",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "Aplica cada reemplazo de { old, new }.",
        "Documentation.LongDescription": "Realiza los reemplazos dados a la lista <code>list</code>. Una operación de reemplazo <code>replacements</code> consta de una lista de dos valores, el valor anterior y un valor nuevo, proporcionado en una lista.\r\n    Se puede especificar un valor opcional de criterios de ecuación, <code>equationCriteria</code>, para controlar la igualdad de las pruebas.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de {1, 2, 3, 4, 5} reemplazando el valor 5 por -5 y el valor 1 por -1.",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "Devuelve una lista de valores que cumplen la condición.",
        "Documentation.LongDescription": "Devuelve una lista de valores de la lista <code>list</code>, que coincide con la condición de selección <code>selection</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar los valores de la lista {1, -3, 4, 9, -2} que son mayores que 0.",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "Permite dividir la lista especificada en una lista de listas usando el tamaño de página especificado.",
        "Documentation.LongDescription": "Divide <code>list</code> una lista de listas donde el primer elemento de la lista de salida es una lista que contiene el primer <code>pageSize</code> elementos de\r\n    la lista de origen, el siguiente elemento de la lista de salida es una lista que contiene los siguientes <code>pageSize</code>elementos de la lista de origen, etc.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "Devuelve una nueva lista de los valores calculados a partir de esta lista.",
        "Documentation.LongDescription": "Devuelve una nueva lista de valores aplicando la función de transformación <code>transform</code> a la lista <code>list</code>.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Sumar 1 a cada valor de la lista {1, 2}.",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "Devuelve el arco tangente de la división de los dos números.",
        "Documentation.LongDescription": "Devuelve el arco tangente de la división de los dos números, <code>y</code> y <code>x</code>. La división se construirá como <code>y</code>/<code>x</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "Devuelve el resultado de realizar una operación bit a bit \"Y\" entre las dos entradas.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar una operación bit a bit \"Y\" entre las <code>number1</code> y <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "Devuelve el resultado de realizar una operación bit a bit \"OR\" entre las dos entradas.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar una operación bit a bit \"O\" entre <code>number1</code> y <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "Desplaza los bits establecidos a la izquierda.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar un desplazamiento bit a bit a la izquierda en <code>number1</code>, el número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "Desplaza los bits establecidos a la derecha.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar un desplazamiento bit a bit a la derecha en <code>number1</code>, el número especificado de bits <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "Devuelve el resultado de realizar una operación \"XOR\" (OR exclusivo) entre las dos entradas.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar una operación bit a bit \"XOR\" (OR exclusivo) entre <code>number1</code> y <code>number2</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "Devuelve el número de combinaciones únicas.",
        "Documentation.LongDescription": "Devuelve el número de combinaciones únicas de una lista de elementos, <code>setSize</code> con tamaño especificado de combinación, <code>combinationSize</code>.\r\n<ul>\r\n    <li><code>setSize</code>: número de elementos en la lista.</li>\r\n    <li><code>combinationSize</code>: número de elementos de cada combinación.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de combinaciones de un total de 5 elementos cuando cada combinación es un grupo de 3.",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "Divide dos números y devuelve la parte entera del resultado.",
        "Documentation.LongDescription": "Devuelve la parte entera del resultado de dividir un número <code>number1</code>, por otro número <code>number2</code>.\r\n    Si <code>number1</code> o <code>number2</code> son \"null\", <code>Number.IntegerDivide</code> devuelve \"null\".\r\n      <ul>\r\n        <li><code>number1</code>: el dividendo.</li>\r\n        <li><code>number2</code>: el divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Divide 6 entre 4.",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "Divide 8,3 entre 3.",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "El entero divide dos números y devuelve el resto.",
        "Documentation.LongDescription": "Devuelve el resto resultante de la división entera de <code>number</code> entre <code>divisor</code>.\r\n    Si <code>number</code> o <code>divisor</code> son \"null\", <code>Number.Mod</code> devuelve \"null\".\r\n      <ul>\r\n        <li><code>number</code>: el dividendo.</li>\r\n        <li><code>divisor</code>: el divisor.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar el resto cuando se divide 5 entre 3.",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "Devuelve el número de permutaciones.",
        "Documentation.LongDescription": "Devuelve el número de permutaciones que pueden generarse a partir de varios elementos, <code>setSize</code>, con un tamaño especificado de la permutación <code>permutationSize</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de permutaciones de un total de 5 elementos en grupos de 3.",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "Eleva un número a la potencia especificada.",
        "Documentation.LongDescription": "Devuelve el resultado de elevar <code>number</code> a la potencia de <code>power</code>.\r\n    Si <code>number</code> o <code>power</code> son \"null\", <code>Number.Power</code> devuelve \"null\".\r\n      <ul>\r\n        <li><code>number</code>: la base.</li>\r\n        <li><code>power</code>: el exponente.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Hallar el valor de 5 elevado a la potencia de 3 (5 al cubo).",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "Devuelve un número aleatorio entre dos números.",
        "Documentation.LongDescription": "Devuelve un número aleatorio entre <code>bottom</code> y <code>top</code>.",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "Obtener un número aleatorio entre 1 y 5.",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "Devuelve el valor del campo especificado en un registro.",
        "Documentation.LongDescription": "Devuelve el valor del <code>field</code> especificado en el <code>record</code>. Si el campo no se encuentra, se inicia una excepción.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Hallar el valor del campo \"CustomerID\" en el registro.",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "Devuelve el valor del campo especificado en un registro o el valor predeterminado si el campo no se encuentra.",
        "Documentation.LongDescription": "Devuelve el valor del campo <code>field</code> especificado en el registro <code>record</code>. Si el campo no se encuentra, se devuelve el valor <code>defaultValue</code> opcional.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor del campo \"Phone\" en el registro o devolver NULL si no existe.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "Buscar el valor del campo \"Phone\" en el registro o devolver el valor predeterminado si no existe.",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "Devuelve un registro dada una lista de valores de campo y un conjunto de campos.",
        "Documentation.LongDescription": "Devuelve un registro dado una <code>list</code> de valores de campo y un conjunto de campos.  El <code>fields</code> puede especificarse mediante una lista de valores de texto o un tipo de registro.  Se arroja un error si los campos no son únicos.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Crear un registro de una lista de valores de campo y una lista de nombres de campo.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Crear un registro de una lista de valores de campo y un tipo de registro.",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "Indica si el registro tiene los campos especificados.",
        "Documentation.LongDescription": "Indica si el registro <code>record</code> tiene los campos especificados en <code>fields</code> devolviendo un valor lógico (true o false).\r\n    Se pueden especificar varios valores de campo con una lista.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si el registro tiene el campo \"CustomerID\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "Comprobar si el registro tiene el campo \"CustomerID\" y \"Address\".",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "Quita los campos especificados del registro de entrada.",
        "Documentation.LongDescription": "Devuelve un registro que quita todos los campos especificados en la lista <code>fields</code> de la entrada <code>record</code>. Si el campo especificado no existe, se inicia una excepción.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Quitar el campo \"Price\" del registro.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "Quitar los campos \"Price\" e \"Item\" del registro.",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "Cambia el nombre de los elementos de una lista con el formato { old, new }.",
        "Documentation.LongDescription": "Devuelve un registro después de cambiar el nombre de los campos en la entrada <code>record</code> por los nuevos nombres de campo especificados en la lista <code>renames</code>. Para cambiar varios nombres, se puede usar una lista anidada ({ {old1, new1}, {old2, new2} }.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Cambiar el nombre \"UnitPrice\" por \"Price\" del registro.",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "Cambiar el nombre de los campos \"UnitPrice\" a \"Price\" y \"OrderNum\" a \"OrderID\" del registro.",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "Reordena los campos especificados en el nuevo orden.",
        "Documentation.LongDescription": "Devuelve un registro después de cambiar el orden de los campos de <code>record</code> por el orden de campos especificado en la lista <code>fieldOrder</code>. Se mantienen los valores de campo y los campos no mostrados en <code>fieldOrder</code> se quedan en su posición original.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Cambiar algunos de los campos del registro.",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "Devuelve un registro que solo contiene los campos especificados.",
        "Documentation.LongDescription": "Devuelve un registro que incluye solo los campos especificados en la lista <code>fields</code> de la entrada <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Seleccione los campos \"Item\" y \"Price\" en el registro.",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "Devuelve un registro después de aplicar las transformaciones especificadas.",
        "Documentation.LongDescription": "Devuelve un registro después de aplicar las transformaciones especificadas en la lista <code>transformOperations</code> a <code>record</code>.\r\n    Uno o más campos se pueden transformar en un momento especificado.\r\n      <div>Si se transforma un solo campo, se espera que <code>transformOperations</code> sea una lista con dos elementos. El primer elemento de <code>transformOperations</code> especifica un nombre de campo y el segundo elemento de <code>transformOperations</code> especifica la función que se usará para la transformación. Por ejemplo, <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>Si se transforman varios campos, se espera que <code>transformOperations</code> sea una lista de listas, donde cada lista interna es un par de nombre de campo y de operación de transformación. Por ejemplo, <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Transformar el campo \"Price\" en un número.",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "Transformar los campos \"OrderID\" y \"Price\" en números.",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "Devuelve una función que divide texto en una lista de texto según una transición de un tipo de carácter a otro. Los parámetros {0} y {1} pueden ser una lista de caracteres o una función que toma un carácter y devuelve true o false.",
        "Documentation.LongDescription": "Devuelve una función que divide texto en una lista de texto según una transición de un tipo de carácter a otro. Los parámetros <code>before</code> y <code>after</code> pueden ser una lista de caracteres o una función que toma un carácter y devuelve true o false.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada cada vez que una letra mayúscula o minúscula va seguida de un dígito.",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "Convierte la consulta SQL proporcionada en código M. Esta función está pensada solo para uso interno.",
        "Documentation.LongDescription": "Convierte la consulta de <code>sql</code> proporcionada en código M, con los identificadores disponibles definidos por <code>environment</code>. Esta función está pensada solo para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "Devuelve una columna de datos de la tabla especificada como una lista.",
        "Documentation.LongDescription": "Devuelve la columna de datos especificados por <code>column</code> de la tabla <code>table</code> como una lista.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver los valores de la columna [Name] de la tabla.",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "Devuelve una lista con los nombres de las columnas que coinciden con los tipos especificados.",
        "Documentation.LongDescription": "Devuelve una lista con los nombres de las columnas desde la tabla <code>table</code> que coinciden con los tipos especificados en <code>listOfTypes</code>.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Devuelve los nombres de columnas de tipo Number.Type de la tabla.",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "Indica si el registro especificado aparece como una fila de la tabla.",
        "Documentation.LongDescription": "Indica si el registro especificado, <code>row</code>, aparece como una fila de <code>table</code>.\r\n    Se puede especificar un parámetro <code>equationCriteria</code> opcional para controlar la comparación entre las filas de la tabla.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la tabla contiene la fila.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar si la tabla contiene la fila.",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar si la tabla contiene la fila comparando solo la columna [Name].",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "Indica si todos los registros especificados aparecen como filas en la tabla.",
        "Documentation.LongDescription": "Indica si todos los registros especificados en la lista de registros <code>rows</code> aparecen como filas en <code>table</code>.\r\n    Se puede especificar un parámetro <code>equationCriteria</code> opcional para controlar la comparación entre las filas de la tabla.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determine si la tabla contiene todas las filas comparando solo la columna [CustomerID].",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar si la tabla contiene todas las filas.",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "Indica si alguno de los registros especificados aparece como filas en la tabla.",
        "Documentation.LongDescription": "Indica si alguno de los registros especificados en la lista de registros <code>rows</code> aparece como filas en <code>table</code>.\r\n    Se puede especificar un parámetro <code>equationCriteria</code> opcional para controlar la comparación entre las filas de la tabla.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contiene las filas <code>[a = 1, b = 2]</code> o <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar si la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> contiene las filas <code>[a = 1, b = 3]</code> o <code>[a = 3, b = 5]</code>.",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar si la tabla <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> contiene las filas <code>[a = 1, b = 3]</code> o <code>[a = 3, b = 5]</code> comparando solo la columna [a].",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "Indica si la tabla contiene las columnas especificadas.",
        "Documentation.LongDescription": "Indica si la <code>table</code> contiene las columnas especificadas, <code>columns</code>. Devuelve <code>true</code> si la tabla contiene las columnas; <code>false</code> en caso contrario.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la tabla tiene la columna [Name].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "Buscar si la tabla tiene las columnas [Name] y [PhoneNumber].",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "Indica si todas las filas de la tabla cumplen la condición especificada.",
        "Documentation.LongDescription": "Indica si todas las filas de la <code>table</code> cumplen la <code>condition</code> especificada. Devuelve <code>true</code> si coinciden todas las filas, <code>false</code> en caso contrario.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determine si todos los valores de fila de la columna [a] son pares en la tabla.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "Buscar si todos los valores de fila son [a = 1, b = 2], en la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "Indica si alguna fila de la tabla cumple la condición especificada.",
        "Documentation.LongDescription": "Indica si alguna fila de la <code>table</code> cumple la <code>condition</code> especificada. Devuelve <code>true</code> si coincide alguna fila, <code>false</code> en caso contrario.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Determine si algún valor de fila de la columna [a] es par en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determine si algún valor de fila es [a = 1, b = 2], en la tabla <code>({[a = 1, b = 2], [a = 3, b = 4]})</code>.",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "Devuelve el valor predeterminado o la fila mayor con los criterios dados.",
        "Documentation.LongDescription": "Devuelve las filas mayores de <code>table</code>, dado el <code>comparisonCriteria</code>. Si la tabla está vacía, se devuelve un valor <code>default</code> opcional. ",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar la fila con el valor máximo de la columna [a] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8]})</code>.",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "Buscar la fila con el valor máximo de la columna [a] en la tabla <code>({})</code>. Si está vacía, se devuelve -1.",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "Devuelve el valor predeterminado o la fila menor con los criterios dados.",
        "Documentation.LongDescription": "Devuelve las filas mayores de <code>table</code>, dado el <code>comparisonCriteria</code>. Si la tabla está vacía, se devuelve un valor <code>default</code> opcional.",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar la fila con el valor menor de la columna [a] en la tabla.",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "Buscar la fila con el valor menor de la columna [a] en la tabla. Si está vacía, se devuelve -1.",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "Devuelve la posición o las posiciones de la fila en la tabla.",
        "Documentation.LongDescription": "Devuelve la posición de la fila de la primera repetición de <code>row</code> en la <code>table</code> especificada. Devuelve -1 si no se encuentra ninguna repetición.\r\n    <ul>\r\n       <li><code>table</code>: la tabla de entrada.</li>\r\n       <li><code>row</code>: la fila de la tabla en la que buscar las posiciones.</li>\r\n       <li><code>occurrence</code>: <i>[opcional]</i> especifica las repeticiones de la fila que se devolverán.</li>\r\n       <li><code>equationCriteria</code>: <i>[opcional]</i> controla la comparación entre las filas de la tabla.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Buscar la posición de la primera coincidencia [a = 2, b = 4] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "Buscar la posición de la segunda coincidencia de [a = 2, b = 4] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "Buscar la posición de todas las coincidencias de [a = 2, b = 4] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "Devuelve la posición o las posiciones de alguna de las filas especificadas dentro de la tabla.",
        "Documentation.LongDescription": "Devuelve las posiciones de las filas de <code>table</code> de la primera repetición de la lista de <code>rows</code>. Devuelve -1 si no se encuentra ninguna repetición.\r\n    <ul>\r\n    <li><code>table</code>: la tabla de entrada.</li>\r\n       <li><code>rows</code>: la lista de filas de la tabla en las que buscar las posiciones.</li>\r\n       <li><code>occurrence</code>: <i>[opcional]</i> especifica las repeticiones de la fila que se devolverán.</li>\r\n       <li><code>equationCriteria</code>: <i>[opcional]</i> controla la comparación entre las filas de la tabla.</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Buscar la posición de la primera coincidencia [a = 2, b = 4] o [a = 6, b = 8] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "Buscar la posición de todas las coincidencias de [a = 2, b = 4] o [a = 6, b = 8] en la tabla <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code>.",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "Permite dividir la tabla especificada en una lista de tablas usando el tamaño de página especificado.",
        "Documentation.LongDescription": "Divide <code>table</code> una lista de tablas donde el primer elemento de la lista es una tabla que contiene las primeras <code>pageSize</code>filas desde\r\n    la tabla de origen, el siguiente elemento de la lista es una tabla que contiene las siguientes <code>pageSize</code>filas de la tabla de origen, etc.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Permite dividir una tabla de cinco registros en tablas con dos registros cada una.",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "Devuelve una lista que contiene las primeras filas de recuento especificadas y las filas restantes.",
        "Documentation.LongDescription": "Devuelve una lista que contiene dos tablas: una tabla con las primeras N filas de <code>table</code> (según lo especificado por <code>count</code>) y una tabla que contiene las filas restantes de <code>table</code>.\r\n\r\n. Si las tablas de la lista resultante se enumeran exactamente una vez y en orden, la función <code>table</code> enumerará sólo una vez.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devuelve las dos primeras filas de la tabla y las restantes filas de la tabla.",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "Transforma las filas de la tabla con la función de transformación especificada.",
        "Documentation.LongDescription": "Crea una <code>lista</code> aplicando la operación <code>transform</code> a cada fila en <code>table</code>.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Transformar las filas de una tabla en una lista de números.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "Transformar las filas de una tabla numérica en registros textuales.",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "Devuelve la porción de <code>text</code> después del delimitador <code>delimiter</code> especificado.\r\n    Un <code>index</code> numérico opcional indica la aparición de <code>delimiter</code> que debe considerarse.\r\n    Una lista opcional <code>index</code> indica la aparición de <code>delimiter</code> que debe considerarse, así como si la indexación debe realizarse desde el inicio o el final de la entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la porción de \"111-222-333\" después del primer guion.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "Obtenga la porción de \"111-222-333\" después del segundo guion.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "Obtenga la porción de \"111-222-333\" después del segundo guion desde el final.",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "Devuelve el carácter en la posición especificada.",
        "Documentation.LongDescription": "Devuelve el carácter en el valor de texto <code>text</code>, en la posición <code>index</code>. El primer carácter del texto está en la posición 0.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Buscar el carácter en la posición 4 de la cadena \"Hola mundo\".",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "Devuelve la porción de <code>text</code> antes del delimitador <code>delimiter</code> especificado.\r\n    Un <code>index</code> numérico opcional indica la aparición de <code>delimiter</code> que debe considerarse.\r\n    Una lista opcional <code>index</code> indica la aparición de <code>delimiter</code> que debe considerarse, así como si la indexación debe realizarse desde el inicio o el final de la entrada.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la porción de \"111-222-333\" antes del primer guion.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "Obtenga la porción de \"111-222-333\" antes del segundo guion.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "Obtenga la porción de \"111-222-333\" antes del segundo guion desde el final.",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "Devuelve si el texto contiene la subcadena.",
        "Documentation.LongDescription": "Detecta si <code>text</code> contiene el valor <code>substring</code>. Devuelve true si se encuentra el valor. Esta función no admite caracteres comodín ni expresiones regulares.\r\n      <br>\r\n      <br>\r\n      El argumento opcional <code>comparer</code> se puede usar para especificar comparaciones que no distinguen mayúsculas de minúsculas o que tengan en cuenta la referencia cultural y la configuración regional.\r\n      Los siguientes comparadores integrados están disponibles en el lenguaje de fórmulas:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: se usa para realizar una comparación ordinal que distingue mayúsculas de minúsculas</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: se usa para realizar una comparación ordinal con distinción de mayúsculas y minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: se usa para realizar una comparación con reconocimiento de referencia cultural</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Buscar si el texto \"Hola mundo\" contiene \"Hola\".",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "Buscar si el texto \"Hola mundo\" contiene \"hola\".",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Permite buscar si el texto \"Hola mundo\" contiene \"hola\", usando un comparador que no distingue mayúsculas de minúsculas.",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "Devuelve el último carácter del texto.",
        "Documentation.LongDescription": "Devuelve un valor <code>text</code> que son los últimos <code>count</code> caracteres del valor <code>text</code> <code>text</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obtener los 5 caracteres últimos del texto \"Hola mundo\".",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "Indica si el texto termina en el valor especificado.",
        "Documentation.LongDescription": "Indica si el texto especificado, <code>text</code>, termina con el valor especificado, <code>substring</code>. La indicación distingue mayúsculas de minúsculas.\r\n\r\n      <div>\r\n        <code>comparer</code> es un elemento <code>Comparer</code> que se usa para controlar la comparación. Los comparadores se pueden usar para proporcionar comparaciones compatibles con la referencia cultural y la configuración regional, o bien que no distingan mayúsculas de minúsculas.\r\n      </div>\r\n      <div>\r\n        Los siguientes comparadores integrados están disponibles en el lenguaje de fórmulas:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: se usa para realizar una comparación ordinal exacta</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: se usa para realizar una comparación ordinal exacta que no distinga mayúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: se usa para realizar una comparación que tiene en cuenta la referencia cultural</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si \"Hola, mundo\" termina con \"mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "Comprobar si \"Hola, mundo\" termina con \"Mundo\".",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "Devuelve texto formateado a partir de una cadena de formato y argumentos.",
        "Documentation.LongDescription": "Devuelve texto con formato que se crea por la aplicación de <code>arguments</code> de una lista o registro a una cadena de formato <code>formatString</code>. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Formatea una lista de números.",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "Formatea diferentes tipos de datos de un registro según la referencia cultural del inglés de Estados Unidos.",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "Devuelve una subcadena hasta una longitud concreta.",
        "Documentation.LongDescription": "Devuelve <code>count</code> caracteres o hasta el final de <code>text</code>; en el desplazamiento <code>start</code>.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Encuentra la subcadena del texto \"Hello World\", comenzando en el índice 6 y abarcando 5 caracteres.",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "Encuentra la subcadena del texto \"Hello World\", comenzando en el índice 6 y abarcando hasta el final.",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "Devuelve texto de una longitud especificada rellenando el final del texto dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>text</code> rellenado hasta la longitud <code>count</code> insertando espacios al final del valor de texto <code>text</code>.\r\n    Se puede usar un carácter opcional <code>character</code> para especificar el carácter usado para el relleno. El carácter de relleno predeterminado es un espacio.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rellenar el final de un valor de texto para que tenga 10 caracteres de largo.",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "Rellenar el final de un valor de texto con \"|\" para que tenga 10 caracteres de largo.",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "Devuelve texto de una longitud especificada rellenando el comienzo del texto dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>text</code> rellenado hasta la longitud <code>count</code> insertando espacios al inicio del valor de texto <code>text</code>.\r\n    Se puede usar un carácter opcional <code>character</code> para especificar el carácter usado para el relleno. El carácter de relleno predeterminado es un espacio.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Rellenar el comienzo de un valor de texto para que tenga 10 caracteres de largo.",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "Rellenar el comienzo de un valor de texto con \"|\" para que tenga 10 caracteres de largo.",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "Devuelve la primera posición del valor (- 1 si no se encuentra).",
        "Documentation.LongDescription": "Devuelve la posición de la repetición especificada del valor text <code>substring</code> encontrado en <code>text</code>.\r\n    Se puede usar un parámetro opcional <code>occurrence</code> para especificar la posición de repetición que se devolverá (de forma predeterminada, la primera repetición).\r\n    Devuelve el valor -1 si no se encuentra <code>substring</code>.\r\n\r\n      <div>\r\n        <code>comparer</code> es un elemento <code>Comparer</code> que se usa para controlar la comparación. Los comparadores se pueden usar para proporcionar comparaciones compatibles con la referencia cultural y la configuración regional, o bien que no distingan mayúsculas de minúsculas.\r\n      </div>\r\n      <div>\r\n        Los siguientes comparadores integrados están disponibles en el lenguaje de fórmulas:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: se usa para realizar una comparación ordinal exacta</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: se usa para realizar una comparación ordinal exacta que no distinga mayúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: se usa para realizar una comparación que tiene en cuenta la referencia cultural</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Obtener la posición de la primera coincidencia de \"mundo\" en el texto \"Hola mundo. Hola mundo\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "Obtener la posición de la última coincidencia de \"mundo\" en el texto \"Hola, mundo. Hola, mundo\".",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "Devuelve la primera posición en el valor de texto de cualquier carácter enumerado (- 1 si no se encuentra).",
        "Documentation.LongDescription": "Devuelve la primera posición de cualquier carácter de la lista <code>characters</code> que se encuentre en <code>text</code>.\n    Es posible usar un parámetro opcional <code>occurrence</code> para especificar la posición de repetición que se vaya a devolver.",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Buscar la primera posición de \"m\" o \"h\" en el texto \"Hola, mundo\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "Buscar todas las posiciones de \"m\" o \"h\" en el texto \"Hola, mundo\".",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "Devuelve la subcadena encontrada en el desplazamiento.",
        "Documentation.LongDescription": "Devuelve la subcadena del texto <code>text</code> que se encuentra en el desplazamiento <code>offset</code>.\r\n    Se puede incluir un parámetro opcional (<code>count</code>) para especificar el número de caracteres que tienen que devolverse. Genera un error si no hay suficientes caracteres.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Buscar la subcadena del texto \"Hola mundo\" que empieza en el índice 6.",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "Buscar la subcadena del texto \"Hola mundo Hola\" que empieza en el índice 6 y abarca 5 caracteres.",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "Quita todas las coincidencias del carácter o de la lista de caracteres especificados del valor de texto de entrada.",
        "Documentation.LongDescription": "Devuelve una copia del valor de texto <code>text</code> con todos los caracteres desde <code>removeChars</code> quitados.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Quitar los caracteres , y ; del valor de texto.",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "Quita un número de caracteres a partir del desplazamiento dado",
        "Documentation.LongDescription": "Devuelve una copia del valor de texto <code>text</code> con todos los caracteres desde la posición <code>offset</code> quitados.\r\n    Se puede usar un parámetro opcional (<code>count</code>) para especificar el número de caracteres que se van a quitar. El valor predeterminado de <code>count</code> es 1. Los valores de posición empiezan en 0.",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Quitar un carácter del valor de texto \"ABEFC\" en la posición 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "Quitar dos caracteres del valor de texto \"ABEFC\" a partir de la posición 2.",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "Devuelve un valor de texto compuesto por el texto de entrada repetido un número de veces especificado.",
        "Documentation.LongDescription": "Devuelve un valor de texto compuesto por el texto de entrada <code>text</code> repetido <code>count</code> veces.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Repetir el texto \"a\" cinco veces.",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "Repetir el texto \"holamundo\" tres veces.",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "Selecciona todas las coincidencias del carácter o de la lista de caracteres especificados del valor de texto de entrada.",
        "Documentation.LongDescription": "Devuelve una copia del valor de texto <code>text</code> con todos los caracteres que no estén en <code>selectChars</code> quitados.  ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "Selecciona todos los caracteres en un intervalo de la \"a\" a la \"z\" en el valor de texto.",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "Divide el texto en una lista de valores de texto según un delimitador especificado.",
        "Documentation.LongDescription": "Devuelve una lista de los valores de texto resultantes de dividir un valor de texto <code>text</code> según el delimitador especificado, <code>separator</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir del valor de texto delimitado \"|\" \"Nombre|Dirección|NúmeroDeTeléfono”.",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "Devuelve una lista de valores de texto, dividida con alguno de los caracteres del delimitador.",
        "Documentation.LongDescription": "Devuelve una lista de los valores de texto resultantes de dividir un valor de texto <code>text</code> según algún carácter del delimitador especificado, <code>separators</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir del valor de texto “Jamie|Campbell|Administrador|Adventure Works|www.adventure-works.com”.",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "Devuelve el inicio del texto.",
        "Documentation.LongDescription": "Devuelve los primeros <code>count</code> caracteres de <code>text</code> como un valor de texto.",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "Obtener los primeros 5 caracteres de \"Hola mundo\".",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "Indica si el texto empieza con un valor especificado.",
        "Documentation.LongDescription": "Devuelve true si el valor de texto <code>text</code> empieza con el valor de texto <code>substring</code>.\r\n      <ul>\r\n        <li><code>text</code>: <i></i> un valor <code>text</code> en el que se va a buscar</li>\r\n        <li><code>substring</code>: <i></i> un valor <code>text</code> que es la subcadena que se buscará en <code>substring</code></li>\r\n        <li><code>comparer</code>: <i>[Optional]</i> Un <code>Comparer</code> que se usa para controlar la comparación. Por ejemplo, <code>Comparer.OrdinalIgnoreCase</code> se puede usar para realizar búsquedas que no distinguen mayúsculas de minúsculas</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> es un elemento <code>Comparer</code> que se usa para controlar la comparación. Los comparadores se pueden usar para proporcionar comparaciones compatibles con la referencia cultural y la configuración regional, o bien que no distingan mayúsculas de minúsculas.\r\n      </div>\r\n      <div>\r\n        Los siguientes comparadores integrados están disponibles en el lenguaje de fórmulas:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: se usa para realizar una comparación ordinal exacta</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: se usa para realizar una comparación ordinal exacta que no distinga mayúsculas de minúsculas</li>\r\n        <li> <code>Comparer.FromCulture</code>: se usa para realizar una comparación que tiene en cuenta la referencia cultural</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si el texto \"Hola mundo\" empieza con el texto \"hola\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "Comprobar si el texto \"Hola mundo\" empieza con el texto \"Hola\".",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "Devuelve un tipo que representa las funciones con restricciones concretas de tipo de devolución y parámetros.",
        "Documentation.LongDescription": "Crea <code>function type</code> de <code>signature</code>, un registro de <code>ReturnType</code> y <code>Parameters</code> y <code>min</code>, el número mínimo de argumentos necesarios para invocar la función.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Crea el tipo para una función que toma un parámetro de número denominado X y devuelve un número.",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "Devuelve un tipo que representa los registros con campos o restricciones de tipos específicos.",
        "Documentation.LongDescription": "Devuelve un tipo que representa los registros con campos o restricciones de tipos específicos.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Generar dinámicamente un tipo de tabla.",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "Determina si un valor del primer tipo siempre es compatible con el segundo tipo.",
        "Documentation.LongDescription": "Determina si un valor de <code>type1</code> es siempre compatible con <code>type2</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determine si un valor de tipo número siempre se puede tratar como un tipo cualquiera.",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "Determine si un valor de tipo cualquiera siempre se puede tratar como tipo número.",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "Sustituye las facetas de un tipo.",
        "Documentation.LongDescription": "Sustituye las facetas de <code>type</code> por las facetas que contiene el registro <code>facets</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "Devuelve un nuevo tipo de tabla con todas las claves reemplazadas por la lista especificada de claves.",
        "Documentation.LongDescription": "Devuelve un nuevo tipo de tabla con todas las claves reemplazadas por la lista especificada de claves.<br>\r\n    <br>\r\n    Cada clave se define mediante un registro de la siguiente forma:\r\n    <ul>\r\n      <li>\r\n        <code>Columnas</code>: una lista de los nombres de columna que definen la clave\r\n      </li>\r\n      <li>\r\n        <code>Principal</code>: <code>true</code> si la clave es la clave principal de la tabla; de lo contrario, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    La lista especificada de claves se valida para garantizar que no se defina más de una clave principal y que todos los nombres de columna de clave existan en el tipo de tabla.\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Reemplace la información de clave en un tipo de tabla.",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "Borra la información de clave definida previamente en un tipo de tabla.",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "Devuelve el tipo de una columna de una tabla.",
        "Documentation.LongDescription": "Devuelve el tipo de la columna <code>column</code> de la tabla <code>tableType</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "Devuelve un URI absoluto que es la combinación del URI de base de entrada y del URI relativo.",
        "Documentation.LongDescription": "Devuelve un URI absoluto que es la combinación del <code>baseUri</code> de entrada y de <code>relativeUri</code>.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "Devuelve la suma de los dos valores.",
        "Documentation.LongDescription": "Devuelve la suma de <code>value1</code> y <code>value2</code>. Se puede especificar un parámetro opcional <code>precision</code>, de manera predeterminada se usa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "Devuelve el valor si es compatible con el tipo especificado.",
        "Documentation.LongDescription": "Devuelve el valor si es compatible con el tipo especificado. Esto es equivalente al operador \"as\" en M, con la excepción de que puede aceptar referencias de tipo de identificador como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Convertir un número en un número.",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "Intento de convertir un valor de texto en un número.",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "Devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.",
        "Documentation.LongDescription": "Devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "Devuelve el resultado de dividir el primer valor por el segundo.",
        "Documentation.LongDescription": "Devuelve el resultado de dividir <code>value1</code> entre <code>value2</code>. Se puede especificar un parámetro opcional <code>precision</code>, de manera predeterminada se usa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "Devuelve si dos valores son iguales.",
        "Documentation.LongDescription": "Devuelve true si el valor <code>value1</code> es igual que el valor <code>value2</code>; false, en caso contrario.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "Determina si un valor es compatible con el tipo especificado.",
        "Documentation.LongDescription": "Determina si un valor es compatible con el tipo especificado. Esto es equivalente al operador \"is\" en M, con la excepción de que puede aceptar referencias de tipo de identificador como Number.Type.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Compare dos maneras de determinar si un número es compatible con el tipo número.",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "Devuelve el producto de los dos valores.",
        "Documentation.LongDescription": "Devuelve el producto de multiplicar <code>value1</code> por <code>value2</code>. Se puede especificar un parámetro opcional <code>precision</code>, de manera predeterminada se usa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "Evalúa una consulta en un destino.",
        "Documentation.LongDescription": "<p> Evalúa <code>query</code>en contra <code>target</code> usar los parámetros especificados en <code>parameters</code> y las opciones especificadas en <code>options</code>.</p>\r\n<p>La salida de la consulta se define mediante <code>target</code>.</p>\r\n<p><code>target</code>provecha el contexto de la operación descrita por <code>query</code>.</p>\r\n<p><code>query</code> describe la consulta que se va a ejecutar en <code>target</code>. <code>query</code>es expresado de forma específica para <code>target</code> (por ejemplo, una instrucción T-SQL).</p>\r\n<p> El valor opcional <code>parameters</code> puede contener una lista o un registro según corresponda para proporcionar los valores de parámetro esperados por <code>query</code>.</p>\r\n<p>El registro opcional <code>options</code> puede contener opciones que afectan al comportamiento de evaluación de <code>query</code> en contra <code>target</code>. Estas opciones son específicas de <code>target</code>.</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "Devuelve si dos valores son iguales.",
        "Documentation.LongDescription": "Devuelve nulo si un argumento '<code>value1</code>', '<code>value2</code>' es nulo, de lo contrario equivale a Value.Equals.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "Reemplaza la información de metadatos de la entrada.",
        "Documentation.LongDescription": "Reemplaza la información de metadatos de la entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "Reemplaza el tipo del valor.",
        "Documentation.LongDescription": "Reemplaza el tipo del <code>value</code> por el <code>type</code> proporcionado.",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "Reemplaza el tipo predeterminado de un registro por un tipo más específico.",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "Devuelve la diferencia de los dos valores.",
        "Documentation.LongDescription": "Devuelve la diferencia de <code>value1</code> y <code>value2</code>. Se puede especificar un parámetro opcional <code>precision</code>, de manera predeterminada se usa <code>Precision.Double</code>.",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "Crea una acción que, al ejecutarse, devolverá los resultados de realizar una solicitud HTTP como valor binario.",
        "Documentation.LongDescription": "Crea una acción que, cuando se ejecuta, devolverá los resultados de realizar una solicitud de <code>method</code> en <code>url</code> mediante HTTP como valor binario.\r\n Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los campos siguientes:\r\n <ul>\r\n<li><code>Query</code> : Agregue mediante programaci&#243;n par&#225;metros de consulta a la direcci&#243;n URL sin tener que preocuparse por los escapes.</li>\r\n<li><code>ApiKeyName</code> : Si el sitio de destino tiene una noci&#243;n de una clave de API, este par&#225;metro se puede usar para especificar el nombre (no el valor) del par&#225;metro de la clave que se debe usar en la direcci&#243;n URL. El valor de la clave real se proporciona en la credencial.</li>\r\n<li><code>Headers</code> : Si este valor se especifica como un registro, se proporcionar&#225;n encabezados adicionales a una solicitud HTTP.</li>\r\n<li><code>Timeout</code> : Si este valor se especifica como una duraci&#243;n, se cambiar&#225; el tiempo de espera de una solicitud HTTP. El valor predeterminado es de 100&#160;segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Si este valor se especifica como una lista, estas claves del encabezado HTTP se excluir&#225;n del c&#225;lculo para almacenar los datos en cach&#233;.</li>\r\n<li><code>IsRetry</code> : Si este valor l&#243;gico se especifica como &quot;true&quot;, se omitir&#225; cualquier respuesta existente en la memoria cach&#233; al capturar datos.</li>\r\n<li><code>ManualStatusHandling</code> : Si este valor se especifica como una lista, se evitar&#225; cualquier control integrado para las solicitudes HTTP cuya respuesta tenga uno de estos c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Si este valor se especifica como texto, se anexar&#225; a la direcci&#243;n URL base antes de realizar la solicitud.</li>\r\n<li><code>Content</code> : Si se especifica este valor, su contenido se convertir&#225; en el cuerpo de la solicitud HTTP.</li>\r\n</ul>\r\n\r\n <br>\r\n Tenga en cuenta que esta función está deshabilitada en la mayoría de los contextos. Considere la posibilidad de usar Web.Contents o Web.Headers en su lugar.\r\n",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "Realice una solicitud GET en Bing.",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "Escriba la dirección URL del punto de conexión de la API de REST de Azure Enterprise que se ha asociado a su inscripción",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "Devuelve los resultados binarios de la llamada a la dirección URL que se ha proporcionado para la API de Azure Enterprise.",
        "Documentation.Examples": [
          {
            "Description": "Usar la función AzureEnterprise.Contents para devolver los resultados de un informe específico.",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "Tabla"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "Devuelve el contenido del objeto binario especificado de un almacén de Azure Storage.",
        "Documentation.LongDescription": "Devuelve el contenido del BLOB en la dirección URL, <code>url</code>, desde un almacén de Azure Storage. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>BlockSize</code> : N&#250;mero de bytes que se van a leer antes de esperar en el consumidor de datos. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : N&#250;mero de bytes que se intentar&#225;n leer en una &#250;nica solicitud HTTP al servidor. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : La opci&#243;n ConcurrentRequests permite una descarga de datos m&#225;s r&#225;pida; para ello, hay que especificar el n&#250;mero de solicitudes que se van a realizar en paralelo a costa del uso de la memoria. La memoria necesaria es (ConcurrentRequest * RequestSize). El valor predeterminado es 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "Devuelve el contenido del archivo especificado desde un sistema de archivos de Azure Data Lake Storage.",
        "Documentation.LongDescription": "Devuelve el contenido del archivo en la dirección URL, <code>url</code>, desde un sistema de archivos de Azure Data Lake Storage. Se puede especificar <code>options</code> para controlar las siguientes opciones:\r\n    <ul>\r\n<li><code>BlockSize</code> : N&#250;mero de bytes que se van a leer antes de esperar en el consumidor de datos. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>RequestSize</code> : N&#250;mero de bytes que se intentar&#225;n leer en una &#250;nica solicitud HTTP al servidor. El valor predeterminado es 4&#160;MB.</li>\r\n<li><code>ConcurrentRequests</code> : La opci&#243;n ConcurrentRequests permite una descarga de datos m&#225;s r&#225;pida; para ello, hay que especificar el n&#250;mero de solicitudes que se van a realizar en paralelo a costa del uso de la memoria. La memoria necesaria es (ConcurrentRequest * RequestSize). El valor predeterminado es 16.</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "Devuelve la longitud aproximada del binario.",
        "Documentation.LongDescription": "Devuelve la longitud aproximada de <code>binary</code>, o un error si el origen de datos no admite una longitud aproximada.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obtiene la longitud aproximada del valor binario.",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "Almacena en búfer el valor binario en memoria.",
        "Documentation.LongDescription": "Almacena en búfer el valor binario en memoria. El resultado de esta llamada es un valor binario estable, lo cual significa que tendrá una longitud y un orden de bytes deterministas.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Crear una versión estable del valor binario.",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "Combina una lista de binarios en un solo binario.",
        "Documentation.LongDescription": "Combina una lista de binarios en un solo binario.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "Crea un binario a partir del valor dado",
        "Documentation.LongDescription": "Devuelve un valor <code>binary</code> a partir del <code>value</code> especificado. Si el <code>value</code> especificado es <code>null</code>, <code>Binary.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>binary</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir a un valor <code>binary</code>:\r\n      <ul>\r\n        <li><code>text</code>: un valor <code>binary</code> a partir de la representación de texto. Para más información, vea <code>Binary.FromText</code>.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>binary</code> de <code>\"1011\"</code>.",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "Convierte una lista de números en un valor binario.",
        "Documentation.LongDescription": "Convierte una lista de números en un valor binario.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "Descodifica datos de un formato de texto en binario.",
        "Documentation.LongDescription": "Devuelve el resultado de convertir el valor de texto <code>text</code> en un binario (lista de <code>number</code>). <code>encoding</code> se puede especificar para indicar la codificación usada en el valor text.\r\n      Los siguientes valores <code>BinaryEncoding</code> se pueden usar para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificación Base 64.</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificación hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "Descodificar “1011” en binario.",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "Descodificar “1011” en binario con la codificación hexadecimal.",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "Lee la secuencia binaria e intenta determinar el tipo de contenido y la información de formato de la secuencia.",
        "Documentation.LongDescription": "Devuelve un registro con el campo Content.Type, que contiene el tipo MIME inferido.\r\n    Si el tipo de contenido inferido es text/* y se detecta una página de códigos de codificación, se devolverá también el campo Content.Encoding, que contiene el cifrado de la secuencia.\r\n    Si el tipo de contenido inferido es text/csv y el formato es delimitado, se devolverá también el campo Csv.PotentialDelimiter, que contiene una tabla para el análisis de delimitadores potenciales.\r\n    Si el tipo de contenido inferido es text/csv y el formato tiene un ancho fijo, se devolverá también el campo Csv.PotentialPositions, que contiene una lista para el análisis de las potenciales posiciones de columna de ancho fijo.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "Devuelve el número de caracteres.",
        "Documentation.LongDescription": "Devuelve el número de caracteres.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "Convierte un valor binario en una lista de números.",
        "Documentation.LongDescription": "Convierte un valor binario en una lista de números.",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "Codifica datos binarios en un formato de texto.",
        "Documentation.LongDescription": "Devuelve el resultado de convertir una lista binaria de números <code>binary</code> en un valor text. También puede especificar <code>encoding</code> para indicar la codificación que se usará en el valor text producido.\r\n      Los siguientes valores <code>BinaryEncoding</code> se pueden usar para <code>encoding</code>.\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: codificación Base 64.</li>\r\n        <li><code>BinaryEncoding.Hex</code>: codificación hexadecimal</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "Crea un registro de error modificado que no desencadenará una reserva cuando lo inicie un controlador definido en una vista (mediante Binary.View).",
        "Documentation.LongDescription": "Crea un registro de error modificado desde <code>errorRecord</code> que no desencadenará una reserva cuando lo inicie un controlador definido en una vista (mediante Binary.View).",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "Crea una función que un controlador definido en una visualización (mediante Binary.View) puede interceptar.",
        "Documentation.LongDescription": "<p>Crea una función de vista basada en <code>function</code> que se puede controlar en una vista creada por <code>Binary.View</code>.</p>\r\n<p>El controlador <code>OnInvoke</code> de <code>Binary.View</code> se puede utilizar para definir un controlador para la función de vista.</p>\r\n<p>Al igual que con los controladores para operaciones integradas, si no se especifica ningún controlador <code>OnInvoke</code>, o si no maneja la función de vista, o si el controlador genera un error <code>function</code> se aplica sobre la vista.</p>\r\n<p> Consulte la documentación del conector personalizado de Power Query publicada para obtener una descripción más completa de <code>Binary.View</code> y funciones de vista personalizadas.</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "Formato binario leer un entero con signo de 64 bits que se codificó con una codificación de longitud variable de 7 bits.",
        "Documentation.LongDescription": "Formato binario leer un entero con signo de 64 bits que se codificó con una codificación de longitud variable de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "Formato binario leer un entero sin signo de 64 bits que se codificó con una codificación de longitud variable de 7 bits.",
        "Documentation.LongDescription": "Formato binario leer un entero sin signo de 64 bits que se codificó con una codificación de longitud variable de 7 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "Formato binario que lee un entero sin signo de 8 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero sin signo de 8 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "Un formato binario que lee un valor decimal de 16 bytes .NET.",
        "Documentation.LongDescription": "Un formato binario que lee un valor decimal de 16 bytes .NET.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "Formato binario que lee un valor de coma flotante de doble precisión IEEE de 8 bytes.",
        "Documentation.LongDescription": "Formato binario que lee un valor de coma flotante de doble precisión IEEE de 8 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "Devuelve un formato binario que lee una secuencia de elementos y devuelve una lista.",
        "Documentation.LongDescription": "Devuelve un formato binario que lee una secuencia de elementos y devuelve un <code>list</code>. El parámetro <code>binaryFormat</code> especifica el formato binario de cada elemento.  Hay tres formas de determinar el número de elementos leídos: <ul><li>Si no se especifica el <code>countOrCondition</code>, el formato binario leerá hasta que no haya más elementos.</li><li>Si el <code>countOrCondition</code> es un número, entonces el formato binario leerá ese número de elementos.Si el es una función, entonces esa función será invocada para cada elemento leído.</li><li>Si el <code>countOrCondition</code> es un formato binario, entonces se espera que el recuento de elementos preceda a la lista, y el formato especificado se utiliza para leer el recuento.</li><li>Si el <code>countOrCondition</code> es un formato binario, entonces se espera que el recuento de elementos preceda a la lista, y el formato especificado se utiliza para leer el recuento.</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "Lea los bytes hasta el final de los datos.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Lea dos bytes.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Lea los bytes hasta que el valor de bytes sea mayor o igual que dos.",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "Formato binario que lee cero bytes y devuelve NULL.",
        "Documentation.LongDescription": "Formato binario que lee cero bytes y devuelve NULL.",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "Devuelve un formato binario que lee un registro.",
        "Documentation.LongDescription": "Devuelve un formato binario que lee un registro.  El parámetro <code>record</code> especifica el formato del registro.  Cada campo del registro puede tener otro formato binario.  Si un campo contiene un valor que no es un valor de formato binario, no se lee ningún dato para ese campo y el valor de campo se muestra en el resultado.",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "Leer un registro que contenga un entero de 16 bits y un entero de 32 bits.",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "Formato binario que lee un entero con signo de 16 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero con signo de 16 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "Formato binario que lee un entero con signo de 32 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero con signo de 32 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "Formato binario que lee un entero con signo de 64 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero con signo de 64 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "Formato binario que lee un valor de coma flotante de precisión simple IEEE de 4 bytes.",
        "Documentation.LongDescription": "Formato binario que lee un valor de coma flotante de precisión simple IEEE de 4 bytes.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "Devuelve un formato binario que lee un valor de texto.",
        "Documentation.LongDescription": "Devuelve un formato binario que lee un valor de texto.  El <code>length</code> especifica el número de bytes para decodificar o el formato binario de la longitud que antecede al texto.  El valor opcional <code>encoding</code> especifica la codificación del texto.  Si no se especifica <code>encoding</code>, la codificación se determina a partir de las marcas BOM Unicode.  Si no hay ninguna marca BOM, se usa <code>TextEncoding.Utf8</code>.",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "Descodifique dos bytes como texto ASCII.",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "Decodificar texto ASCII cuando la longitud del texto en bytes aparezca antes que el texto como un byte.",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "Formato binario que lee un entero sin signo de 16 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero sin signo de 16 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "Formato binario que lee un entero sin signo de 32 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero sin signo de 32 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "Formato binario que lee un entero sin signo de 64 bits.",
        "Documentation.LongDescription": "Formato binario que lee un entero sin signo de 64 bits.",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "Crea un entero de 8 bits a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> entero de 8 bits a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Byte.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de enteros de 8 bits sin una parte fraccionaria, se devuelve <code>value</code>. Si tiene una parte fraccionaria, el número se redondea con el modo de redondeo que se haya especificado. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. Vea <code>Number.Round</code> para conocer los modos de redondeo disponibles. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> entero de 8 bits de <code>\"4\"</code>.",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor <code>number</code> entero de 8 bits de <code>\"4.5\"</code> con <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "Convierte un número en un carácter de texto.",
        "Documentation.LongDescription": "Devuelve el equivalente en caracteres del número.<br>\r\n    <br>\r\n    El <code>number</code> proporcionado debe ser un punto de código Unicode de 21 bits.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Convierte un número en su valor de carácter equivalente.",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "Convierte un carácter en un número y vuelve a convertirlo.",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "Convierte el punto de código hexadecimal del emoticono \"cara sonriente\" en su par suplente UTF-16 equivalente.",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "Convierte un carácter en un valor numérico.",
        "Documentation.LongDescription": "Devuelve el número equivalente del <code>character</code>.<br>\r\n    <br>\r\n    El resultado será el punto de código Unicode de 21 bits representado por el carácter o par suplente proporcionado.\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Convierte un carácter en su valor numérico equivalente.",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "Convierte el par suplente UTF-16 para el emoticono \"cara sonriente\" en su punto de código hexadecimal equivalente.",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "Devuelve una función que combina una lista de texto utilizando el delimitador especificado.",
        "Documentation.LongDescription": "Devuelve una función que combina una lista de valores de texto en un único valor de texto utilizando el delimitador especificado.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combina una lista de valores de texto con un delimitador de punto y coma.",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "Combine el texto de dos columnas utilizando un delimitador de comas y comillas al estilo CSV.",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "Devuelve una función que combina una lista de texto mediante una secuencia de delimitadores.",
        "Documentation.LongDescription": "Devuelve una función que combina una lista de valores de texto en un solo valor de texto mediante una secuencia de delimitadores.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine una lista de valores de texto mediante una secuencia de delimitadores.",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "Devuelve una función que combina una lista de texto con las longitudes especificadas.",
        "Documentation.LongDescription": "Devuelve una función que combina una lista de valores de texto en un solo valor de texto utilizando las longitudes especificadas.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine una lista de valores de texto extrayendo los números de caracteres especificados de cada valor de entrada.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "Combine una lista de valores de texto extrayendo los números de caracteres especificados, después de rellenar previamente el resultado con el texto de la plantilla.",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "Devuelve una función que combina una lista de texto utilizando las posiciones de salida especificadas.",
        "Documentation.LongDescription": "Devuelve una función que combina una lista de valores de texto en un único valor de texto utilizando el delimitador especificado.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine una lista de valores de texto colocándolos en la salida en las posiciones especificadas.",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "Devuelve una función que combina una lista de texto utilizando las posiciones y longitudes especificadas.",
        "Documentation.LongDescription": "Devuelve una función que combina una lista de valores de texto en un solo valor de texto utilizando las posiciones y longitudes de salida especificadas. Una longitud nula indica que se debe incluir el valor de texto completo.",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "Combine una lista de valores de texto con las posiciones y longitudes de salida especificadas.",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "Devuelve una función comparadora basada en la cultura y la distinción entre mayúsculas y minúsculas especificadas.",
        "Documentation.LongDescription": "Devuelve una función comparadora que utiliza la <code>culture</code> y la distinción entre mayúsculas y minúsculas especificada por <code>ignoreCase</code> para realizar las comparaciones..<br>\r\n      <br>\r\n      Una función comparadora acepta dos argumentos y devuelve -1, 0 o 1 en función de si el primer valor es menor, igual o mayor que el segundo.<br>\r\n      <br>\r\n      El valor por defecto para <code>ignoreCase</code> es false. El <code>culture</code> debe ser una de las localizaciones soportadas por el framework .NET (por ejemplo, \"en-US\").\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "Compara \"a\" y \"A\" usando la configuración regional \"en-US\" para determinar si los valores son iguales.",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "Compara \"a\" y \"A\" usando la configuración regional \"en-US\" e ignorando las mayúsculas y minúsculas para determinar si los valores son iguales.",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "Devuelve el identificador de miembro único desde el valor de la propiedad de los miembros.",
        "Documentation.LongDescription": "Devuelve el identificador de miembro único desde el valor de la propiedad de un miembro. <code>attribute</code>. Devuelve el valor null para todos los demás valores.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "Devuelve una clave de una propiedad.",
        "Documentation.LongDescription": "Devuelve una clave de la propiedad <code>property</code>.",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "Devuelve un valor monetario para un valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>currency</code> del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Currency.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> dentro del rango de moneda, la parte fraccionaria de <code>value</code> se redondea a 4 dígitos decimales y se devuelve. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. El rango válido para la moneda es de <code>-922 337 203 685 477,5808</code> a <code>922 337 203 685 477,5807</code>. Vea <code>Number.Round</code> para los modos de redondeo disponibles. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenga el valor <code>currency</code> de <code>\"1.23455\"</code>.",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "Obtenga el valor de <code>currency</code> de <code>\"1.23455\"</code> con <code>RoundingMode.Down</code>.",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "Devuelve el componente del día.",
        "Documentation.LongDescription": "Devuelve el componente de día de un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a partir del que se extrae el componente del día.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el componente del día de un valor <code>date</code><code>datetime</code> o <code>datetimezone</code> que representa la fecha y hora de 5/14/2011 05:00: 00 p.m.",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "Devuelve un número (del 0 al 6) que indica el día de la semana del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un número (del 0 al 6) que indica el día de la semana que ocupa el valor <code>dateTime</code> proporcionado.\r\n  <ul>\r\n        <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.</li>\r\n        <li><code>firstDayOfWeek</code>: valor <code>Day</code> que indica qué día debería considerarse el primero de la semana. Los valores permitidos son Day.Sunday, Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday o Day.Saturday. Si no se especifica ningún valor, se utilizará uno predeterminado que dependerá de la referencia cultural.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Defina el día de la semana como \"Lunes, 21 de febrero de 2011\" y establezca que el domingo sea el primer día de la semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "Defina el día de la semana como \"Lunes, 21 de febrero de 2011\" y establezca que el lunes sea el primer día de la semana.",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "Devuelve el nombre del día de la semana.",
        "Documentation.LongDescription": "Devuelve el nombre del día de la semana para el valor <code>date</code> proporcionado. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el nombre del día de la semana.",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "Devuelve un número del 1 al 366 que representa el día del año.",
        "Documentation.LongDescription": "Devuelve un número que representa el día del año en el valor de <code>date</code>, <code>datetime</code> o <code>datetimezone</code>, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Día del año del 1 de marzo de 2011.",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "Devuelve un número del 28 al 31 que indica el número de días del mes.",
        "Documentation.LongDescription": "Devuelve el número de días del mes en el valor de <code>date</code>, <code>datetime</code> o <code>datetimezone</code> <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> para el que se devuelve el número de días del mes.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Número de días del mes de diciembre según se representa con <code>#date(2011, 12, 01)></code>.",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "Devuelve el final del día.",
        "Documentation.LongDescription": "Devuelve el final del día representado por <code>dateTime</code>. Se conserva la información de zona horaria.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a partir del cual se calcula el final del día.</li>\r\n </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el final del día para 5/14/2011 05:00:00 p.m.",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obtener el final del día para 5/17/2011 05:00:00 p.m -7:00.",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "Devuelve el final del mes.",
        "Documentation.LongDescription": "Devuelve el final del mes que contiene <code>dateTime</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: un valor de <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a partir del cual se calcula el final del mes</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el final del mes de 5/14/2011.",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "Obtener el final del día mes de 5/17/2011 05:00:00 p.m. -7:00.",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "Devuelve el final del trimestre.",
        "Documentation.LongDescription": "Devuelve el final del trimestre que contiene <code>dateTime</code>. Se conserva la información de zona horaria.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a partir del cual se calcula el final del trimestre.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el final del trimestre del 10 de octubre de 2011, 8:00 a.m.",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "Devuelve el final de la semana.",
        "Documentation.LongDescription": "Devuelve el final de la semana que contiene <code>dateTime</code>.\r\n    Esta función toma un valor opcional <code>Day</code> (<code>firstDayOfWeek</code>) para establecer el primer día de la semana para este cálculo relativo. El valor predeterminado es <code>Day.Sunday</code>.\r\n      <ul>\r\n        <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code>o <code>datetimezone</code> a partir del que se calcula el último día de la semana.</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[opcional]</i> un valor <code>Day.Type</code> que representa el primer día de la semana. Los valores posibles son <code>Day.Sunday</code>, <code>Day.Monday</code>, <code>Day.Tuesday</code>, <code>Day.Wednesday</code>, <code>Day.Thursday</code>, <code>Day.Friday</code> y <code>Day.Saturday</code>. El valor predeterminado es <code>Day.Sunday</code>.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el final de la semana de 5/14/2011.",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "Obtener el final de la semana de 5/17/2011 05:00: 00 p.m. -7:00, siendo el domingo el primer día de la semana.",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "Devuelve el final del año.",
        "Documentation.LongDescription": "Devuelve el final del año que contiene <code>dateTime</code>, incluidos los segundos fraccionarios. Se mantiene la información de zona horaria.\r\n      <ul>\r\n        <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> a partir del que se calcula el final del año.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el final del año de 5/14/2011 05:00:00 p.m.",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "Obtener el final de la hora de 5/17/2011 05:00:00 p.m -7:00.",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "Crea una fecha a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>date</code> del <code>value</code>especificado. También se puede proporcionar un <code>culture</code> opcional (por ejemplo, \"en-US\").\r\nSi el <code>value</code> especificado es <code>null</code>, <code>Date.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>date</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir en un valor <code>date</code>:\r\n <ul>\r\n <li><code>text</code>: un valor <code>date</code> de la representación textual. Consulte <code>Date.FromText</code> para obtener más información.</li>\r\n <li><code>datetime</code>: el componente de fecha del <code>value</code>.</li>\r\n <li><code>datetimezone</code>:  Componente de fecha del equivalente de fecha y hora local de <code>value</code>.</li>\r\n <li><code>number</code>: el componente de fecha del equivalente datetime de la fecha de automatización OLE expresada por <code>value</code>.</li>\r\n </ul>\r\nSi <code>value</code> es de cualquier otro tipo,  se devuelve un error.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>43910</code> en un valor <code>date</code>.",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "Convertir <code>#datetime(1899, 12, 30, 06, 45, 12)</code> en un valor <code>date</code>.",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "Crea una fecha a partir de formatos de fecha locales, universales y personalizados.",
        "Documentation.LongDescription": "Crea un valor <code>fecha</code> a partir de una representación textual, <code>text</code>. Un parámetro opcional <code>registro</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Formato</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>null</code>, se analizará la fecha utilizando el mayor esfuerzo.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Cultura.Actual</code>.</li>\r\n</ul>\r\nPara soportar los flujos de trabajo heredados, <code>options</code> también puede ser un valor de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = nulo, Cultura = <code>options</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>\"2010-12-31\"</code> en un valor <code>date</code>.",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "Busque la fecha en el calendario gregoriano que corresponde al principio de 1400 en el calendario Hijri.",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "Indica si esta fecha corresponde al día de hoy, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece al día de hoy, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la hora actual del sistema pertenece al día de hoy.",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "Indica si esta fecha pertenece al mes actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece al mes actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la fecha y hora actual del sistema pertenece al mes actual.",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "Indica si esta fecha pertenece al trimestre actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece al trimestre actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la fecha y hora actual del sistema pertenece al trimestre actual.",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "Indica si esta fecha pertenece a la semana actual, determinada por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece a la semana actual, determinada por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la fecha y hora actual del sistema pertenece a la semana actual.",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "Indica si esta fecha pertenece al año actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece al año actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la fecha y hora actual del sistema pertenece al año actual.",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "Indica si esta fecha se produce durante el día siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el día siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el día posterior a la fecha y hora actual del sistema se corresponde con el día de mañana.",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "Indica si esta fecha se produce durante el mes siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del mes actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el mes siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del mes actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el mes posterior a la fecha y hora actual del sistema se corresponde con el mes que viene.",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "Indica si esta fecha se produce durante el trimestre siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el trimestre siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el trimestre posterior a la fecha y hora actual del sistema se corresponde con el trimestre que viene.",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "Indica si esta fecha se produce durante la semana siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante la semana siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la semana posterior a la fecha y hora actual del sistema se corresponde con la semana que viene.",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "Indica si esta fecha se produce durante el año siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el año siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el año posterior a la fecha y hora actual del sistema se corresponde con el año que viene.",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "Indica si esta fecha se produce durante el día anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el día anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del día actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el día anterior a la fecha y hora actual del sistema se corresponde con el día de ayer.",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "Indica si esta fecha ocurre durante el mes anterior, según se determine con la fecha y hora actuales del sistema. Tenga en cuenta que esta función devolverá \"false\" al pasar un valor que ocurra durante el mes actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el mes anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del mes actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el mes anterior a la fecha y hora actual del sistema se corresponde con el mes pasado.",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "Indica si esta fecha se produce durante el trimestre anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el trimestre anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del trimestre actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el trimestre anterior a la fecha y hora actual del sistema se corresponde con el trimestre pasado.",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "Indica si esta fecha se produce durante la semana anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante la semana anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la semana actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la semana anterior a la fecha y hora actual del sistema se corresponde con la semana pasada.",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "Indica si esta fecha se produce durante el año anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el año anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del año actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el año anterior a la fecha y hora actual del sistema se corresponde con el año pasado.",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "Indica si esta fecha pertenece al año actual y es anterior o se corresponde con el día de hoy, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor de fecha y hora dado <code>dateTime</code> pertenece al año actual y es anterior o se corresponde con el día de hoy, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la fecha y hora actual del sistema pertenece al año hasta la fecha.",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "Indica si esta fecha cae en año bisiesto.",
        "Documentation.LongDescription": "Indica si el valor datetime especificado <code>dateTime</code> cae en año bisiesto.\r\n <ul>\r\n        <li><code>dateTime</code>: un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> que se evaluará.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el año 2012, según se representa en <code>#date(2012, 01, 01)</code>, es un año bisiesto.",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "Devuelve el componente del mes",
        "Documentation.LongDescription": "Devuelve el componente de mes del valor <code>datetime</code> proporcionado, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el mes en #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "Devuelve el nombre del componente del mes.",
        "Documentation.LongDescription": "Devuelve el nombre del componente de mes para el valor <code>date</code> proporcionado. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el nombre del mes.",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "Devuelve un número que indica en qué trimestre el año cae la fecha.",
        "Documentation.LongDescription": "Devuelve un número del 1 al 4 que indica en qué trimestre el año cae la fecha <code>dateTime</code>. <code>dateTime</code> puede ser un valor <code>date</code><code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar en qué trimestre del año cae la fecha #date(2011, 12, 31).",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "Devuelve el inicio del día.",
        "Documentation.LongDescription": "Devuelve el inicio del día representado por <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el inicio del día del 10 de octubre de 2011, 8:00 a.m.",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "Devuelve el inicio del mes.",
        "Documentation.LongDescription": "Devuelve el inicio del mes que contiene <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>date</code> o <code>datetime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el inicio del mes del 10 de octubre de 2011, 8:10:32 a.m.",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "Devuelve el inicio del trimestre.",
        "Documentation.LongDescription": "Devuelve el inicio del trimestre que contiene <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el principio del trimestre del 10 de octubre de 2011, 8:00 a.m.",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "Devuelve el inicio de la semana.",
        "Documentation.LongDescription": "Devuelve el inicio de la semana que contiene <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Busque el inicio de la semana del martes 11 de octubre de 2011.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "Busque el inicio de la semana del martes 11 de octubre de 2011, usando el lunes como inicio de la semana.",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "Devuelve el inicio del año.",
        "Documentation.LongDescription": "Devuelve el inicio del año que contiene <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el inicio del año del 10 de octubre de 2011, 8:10:32 a.m.",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "Devuelve un registro que contiene los elementos del valor de fecha.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los elementos del valor date especificado, <code>date</code>.\r\n <ul>\r\n        <li><code>date</code>: un valor <code>date</code> a partir del cual se calculará el registro de sus partes.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertir el valor <code>#date(2011, 12, 31)</code> en un registro que contenga las partes del valor de fecha.",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "Devuelve una representación de texto del valor de fecha.",
        "Documentation.LongDescription": "Devuelve una representación textual de <code>date</code>. Un parámetro opcional <code>record</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. <code>culture</code>solo se utiliza para los flujos de trabajo heredados. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Formato</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code> la fecha será formateada utilizando el valor predeterminado definido por <code>Cultura</code>.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Cultura.Actual</code>.</li>\r\n</ul>\r\n Para soportar los flujos de trabajo heredados, <code>options</code> y <code>culture</code> también pueden ser valores de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = <code>options</code>, Cultura = <code>culture</code>]</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#date(2010, 12, 31)</code> en un valor <code>text</code>. <i>La salida del resultado puede variar en función de la referencia cultural actual.</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "Busque el año en el calendario Hijri correspondiente al 1 de enero de 2000 en el calendario gregoriano.",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "Devuelve un número del 1 al 6 que indica en qué semana del mes cae esta fecha.",
        "Documentation.LongDescription": "Devuelve un número del 1 al 6 que indica en qué semana del mes <code>dateTime</code>cae la fecha .\r\n <ul>\r\n        <li><code>dateTime</code>: Un valor <code>datetime</code> para el que se determina la semana del mes.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar en qué semana de marzo cae el día 15 en 2011.",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "Devuelve un número del 1 al 54 que indica en qué semana del año cae esta fecha.",
        "Documentation.LongDescription": "Devuelve un número del 1 al 54 que indica qué en que semana del año cae la fecha, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: un valor <code>datetime</code> para el que se determina la semana del año.</li>\r\n        <li><code>firstDayOfWeek</code>: un valor opcional <code>Day.Type</code> que indica qué día se considera que el inicio de una nueva semana (por ejemplo, <code>Day.Sunday</code>). Si no se especifica, se usa un valor predeterminado dependiente de la referencia cultural.</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Determinar qué semana del año contiene el 27 de marzo de 2011.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "Determinar qué semana del año contiene el 27 de marzo de 2011, usando lunes como inicio de la semana.",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "Devuelve el componente de año.",
        "Documentation.LongDescription": "Devuelve el componente de año del valor <code>datetime</code> proporcionado, <code>dateTime</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el año en #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "Devuelve el componente de fecha del valor date, datetime o datetimezone especificado.",
        "Documentation.LongDescription": "Devuelve el componente de fecha de <code>dateTime</code>, el valor <code>date</code>, <code>datetime</code> o <code>datetimezone</code> dados.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor de fecha de #datetime (2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "Crea un datetime a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetime</code> del <code>value</code>especificado. También se puede proporcionar un <code>culture</code> opcional (por ejemplo, \"en-US\").\r\nSi el <code>value</code> especificado es <code>null</code>, <code>DateTime.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>datetime</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir en un valor <code>datetime</code>:\r\n <ul>\r\n <li><code>text</code>: un valor <code>datetime</code> de la representación textual. Consulte <code>DateTime.FromText</code> para obtener más información.</li>\r\n        <li><code>date</code>: un <code>datetime</code> con <code>value</code> como componente de fecha y <code>12:00:00 AM</code> como componente de hora.</li>\r\n <li><code>datetimezone </code>: el <code>datetime</code> equivalente local de <code>value</code>.</li>\r\n <li><code>time</code>: Un <code>datetime</code> con la fecha equivalente a la fecha de automatización OLE de <code>0</code> como componente de fecha y <code>value</code> como componente de hora.</li>\r\n        <li><code>number</code>: un <code>datetime</code> equivalente de la fecha de automatización OLE expresada por <code>value</code>. </li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#time(06, 45, 12)</code> en un valor <code>datetime</code>.",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "Convertir <code>#date(1975, 4, 4)</code> en un valor <code>datetime</code>.",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "Crea un datetime a partir de un número long de 64 bits.",
        "Documentation.LongDescription": "Crea un valor <code>datetime</code> a partir del valor <code>fileTime</code> y lo convierte a la zona horaria local. El FILETIME es un valor de hora del archivo de Windows que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 a.C. (C.E.) Hora universal Coordenada (UTC).\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>129876402529842245</code> en un valor datetime.",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "Crea un datetimezone a partir de formatos de fecha y hora local y universal.",
        "Documentation.LongDescription": "Crea un valor <code>datetime</code> a partir de una representación textual, <code>text</code>. Un parámetro opcional <code>registro</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Format</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code>, se analizará la fecha utilizando el mejor esfuerzo.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>null</code> o se omite, se utiliza <code>Cultura.Actual</code>.</li>\r\n</ul>\r\nPara soportar los flujos de trabajo heredados, también <code>options</code> puede ser un valor de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = nulo, Cultura = <code>options</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convierta <code>\"2010-12-31T01:30:00\"</code> en un valor datetime.",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "Convertir <code>\"2010-12-31T01:30:00.121212\"</code> en un valor datetime.",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "Convierta <code>\"2010-12-31T01:30:00\"</code> en un valor datetime.",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "Convertir <code>\"20101231T013000\"</code> en un valor datetime.",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "Indica si esta datetime se produce durante la hora actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante la hora actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora del sistema actual se encuentra en la hora actual.",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "Indica si esta datetime se produce durante el minuto actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el minuto actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora del sistema actual se encuentra en el minuto actual.",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "Indica si esta datetime se produce durante el segundo actual, determinado por la fecha y hora actual del sistema.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el segundo actual, determinado por la fecha y hora actual del sistema.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora del sistema actual se encuentra en el segundo actual.",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "Indica si este valor datetime se produce durante la hora siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante la hora siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora posterior a la hora del sistema actual se encuentra en la siguiente hora.",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "Indica si este valor datetime se produce durante el minuto siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el minuto siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el minuto posterior a la hora del sistema actual se encuentra en el siguiente minuto.",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "Indica si este valor datetime se produce durante el segundo siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el segundo siguiente, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el segundo posterior a la hora del sistema actual se encuentra en el siguiente segundo.",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "Indica si este valor datetime se produce durante la hora anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante la hora anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro de la hora actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si la hora anterior a la hora del sistema actual se encuentra en la hora anterior.",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "Indica si este valor datetime se produce durante el minuto anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el minuto anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del minuto actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el minuto anterior a la hora del sistema actual se encuentra en el minuto anterior.",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "Indica si este valor datetime se produce durante el segundo anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.",
        "Documentation.LongDescription": "Indica si el valor datetime proporcionado <code>dateTime</code> se produce durante el segundo anterior, determinado por la fecha y hora actual del sistema. Tenga en cuenta que esta función devuelve false cuando se pasa un valor que está dentro del segundo actual.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>datetime</code> o <code>datetimezone</code> que se va a evaluar.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Determine si el segundo anterior a la hora del sistema actual se encuentra en el segundo anterior.",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "Devuelve la parte de hora del valor de fecha y hora dado.",
        "Documentation.LongDescription": "Devuelve la parte de hora del valor de fecha y hora dado, <code>dateTime</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor de hora de #datetime(2010, 12, 31, 11, 56, 02).",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "Devuelve un registro que contiene los elementos del valor de datetime.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los elementos del valor datetime especificado, <code>dateTime</code>.\r\n <ul>\r\n        <li><code>dateTime</code>: un valor <code>datetime</code> a partir del cual se calculará el registro de sus partes.</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertir el valor <code>#datetime(2011, 12, 31, 11, 56, 2)</code> en un registro que contenga valores de fecha y hora.",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "Devuelve una representación de texto del valor datetime.",
        "Documentation.LongDescription": "Devuelve una representación textual de <code>dateTime</code>. Un parámetro opcional <code>record</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. <code>culture</code>solo se utiliza para los flujos de trabajo heredados. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Formato</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code> la fecha será formateada utilizando el valor predeterminado definido por <code>Cultura</code>.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Cultura.Actual</code>.</li>\r\n</ul>\r\n Para soportar los flujos de trabajo heredados, <code>options</code> y <code>culture</code> también pueden ser valores de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = <code>options</code>, Cultura = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#datetime(2010, 12, 31, 01, 30, 25) </code> en un valor <code>text</code>. <i>La salida del resultado puede variar en función de la referencia cultural actual.</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "Convertir con el patrón ISO 8601.",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "Crea un datetimezone a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>datetimezone</code> del <code>value</code>especificado. También se puede proporcionar un <code>culture</code> opcional (por ejemplo, \"en-US\").\r\nSi el <code>value</code> especificado es <code>null</code>, <code>DateTimeZone.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>datetimezone</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir en un valor <code>datetimezone</code>:\r\n      <ul>\r\n        <li><code>text</code>: un valor <code>datetimezone</code> de la representación textual. Consulte <code>DateTimeZone.FromText</code> para obtener más información.</li>\r\n        <li><code>date</code>: un <code>datetimezone</code> con <code>value</code> como componente de fecha, <code>12:00:00 AM</code> como el componente de hora y el desplazamiento correspondiente a la zona horaria local.</li>\r\n        <li><code>datetime</code>: un <code>datetimezone</code> con <code>value</code> como fecha y hora y el desplazamiento correspondiente a la zona horaria local.</li>\r\n        <li><code>time</code>: <code>datetimezone</code> con la fecha equivalente a la fecha de automatización OLE de <code>0</code> como el componente de fecha, <code>value</code> como el componente de hora y el desplazamiento correspondiente a la zona horaria local.</li>\r\n        <li><code>number</code>: un <code>datetimezone</code> con el equivalente datetime de la fecha de automatización OLE expresada por <code>value</code> y el desplazamiento correspondiente a la zona horaria local.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>\"2020-10-30T01:30:00-08:00\"</code>en un valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "Crea un datetimezone a partir de un número long de 64 bits.",
        "Documentation.LongDescription": "Crea un valor <code>datetimezone</code> a partir del valor <code>fileTime</code> y lo convierte a la zona horaria local. Filetime es un valor de hora del archivo de Windows que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 a.C. (C.E.), hora universal coordinada (UTC).\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>129876402529842245</code> en un valor datetimezone.",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "Crea una datetimezone a partir de formatos datetimezone locales, universales y personalizados.",
        "Documentation.LongDescription": "Crea un valor <code>datetimezone</code> a partir de una representación textual, <code>text</code>. Un parámetro opcional <code>registro</code>, <code>options</code>,  puede ser proporcionado para especificar propiedades adicionales. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Formato</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code>, la fecha será analizada utilizando el mayor esfuerzo.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato a utilizar por defecto. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Culture.Current</code>.</li>\r\n</ul>\r\n Para admitir los flujos de trabajo heredados, <code>options</code> también puede ser un valor de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = nulo, Cultura = <code>options</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>\"2010-12-31T01:30:00-08:00\"</code> en un valor <code>datetimezone</code>.",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "Convertir con ISO 8601.",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "Quita la información de zona horaria del valor de zona horaria dado.",
        "Documentation.LongDescription": "Devuelve un valor #datetime de <code>dateTimeZone</code> con la información de zona horaria quitada.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Quita la información de zona horaria del valor #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0).",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "Convierte el componente de zona horaria a la zona horaria local.",
        "Documentation.LongDescription": "Cambia la información de zona horaria del valor de datetimezone <code>dateTimeZone</code> por la información de zona horaria local.\r\n    Si <code>dateTimeZone</code> no tiene un componente de zona horaria, se agrega la información local de zona horaria.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Cambie la información de zona horaria para el #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) a la zona horaria local (suponiendo PST).",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "Devuelve un registro que contiene los elementos del valor de datetimezone.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los elementos del valor datetimezone especificado, <code>dateTimeZone</code>.\r\n <ul>\r\n        <li><code>dateTimeZone</code>: un valor <code>datetimezone</code> a partir del cual se calculará el registro de sus partes.</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convertir el valor <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> en un registro que contenga valores de fecha, hora y zona.",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "Devuelve una representación de texto del valor datetimezone.",
        "Documentation.LongDescription": "Devuelve una representación textual de <code>dateTimeZone</code>. Un parámetro opcional <code>record</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. <code>culture</code>solo se utiliza para los flujos de trabajo heredados. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Formato</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code> la fecha será formateada utilizando el valor predeterminado definido por <code>Cultura</code>.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"es-US\"</code> <code>\"MMM\"</code> es <code>\"Ene\", \"Feb\", \"Mar\", ...</code>, mientras que en <code>\"ru-RU\"</code> <code>\"MMM\"</code> es <code>\"янв\", \"фев\", \"мар\", ...</code>. Cuando <code>Formato</code> es <code>nulo</code>, <code>Cultura</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Cultura.Actual</code>.</li>\r\n</ul>\r\n Para soportar los flujos de trabajo heredados, <code>options</code> y <code>culture</code> también pueden ser valores de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = <code>options</code>, Cultura = <code>culture</code>]</code>.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Convierta <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> en un valor <code>text</code>. <i>La salida del resultado puede variar en función de la referencia cultural actual.</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "Convertir con el patrón ISO 8601.",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "Convierte el componente de zona horaria a la zona horaria UTC.",
        "Documentation.LongDescription": "Cambia la información de zona horaria del valor datetime <code>dateTimeZone</code> por la información de zona horaria UTC u Hora universal.\r\n    Si <code>dateTimeZone</code> no tiene un componente de zona horaria, se suma la información de zona horaria UTC.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "Cambie la información de zona horaria para #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) a la zona horaria UTC.",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "Cambia la zona horaria del valor.",
        "Documentation.LongDescription": "Cambia la zona horaria del valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "Cambia la zona horaria del valor.",
        "Documentation.LongDescription": "Cambia la zona horaria del valor.",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "Crea un Decimal a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> decimal a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Decimal.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de Decimal, se devuelve <code>value</code>; en cualquier otro caso, se devuelve un error. Si <code>value</code> es de cualquier otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. También se puede proporcionar un parámetro <code>culture</code> (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> Decimal de <code>\"4.5\"</code>.",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "Devuelve el contenido de la tabla de Delta Lake.",
        "Documentation.LongDescription": "Devuelve el contenido de la tabla de Delta Lake.",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "Crea un Double a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> Double a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Double.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de Double, se devuelve <code>value</code>; en cualquier otro caso, se devuelve un error. Si <code>value</code> es de cualquier otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. También se puede proporcionar un parámetro <code>culture</code> (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> Double de <code>\"4\"</code>.",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "Devuelve la parte de días de una duración.",
        "Documentation.LongDescription": "Devuelve la parte de días de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extrae el número de días entre dos fechas.",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "Crea una duración a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>duration</code> a partir del <code>value</code> especificado. Si el <code>value</code> especificado es <code>null</code>, <code>Duration.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>duration</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir a un valor <code>duration</code>:\r\n      <ul>\r\n        <li><code>text</code>: un valor <code>duration</code> a partir de los formatos de tiempo transcurrido en forma de texto (d.h:m:s). Para más información, vea <code>Duration.FromText</code>.</li>\r\n        <li><code>number</code>: un valor <code>duration</code> equivalente al número de días enteros y fraccionarios expresados por <code>value</code>.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>2.525</code> en un valor <code>duration</code>.",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "Devuelve un valor de duración de los formatos de tiempo transcurrido en forma de texto (d.h:m:s).",
        "Documentation.LongDescription": "Devuelve un valor de duración del texto especificado <code>text</code>. Esta función puede analizar los formatos siguientes:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (Todos los intervalos son inclusivos)<br>\r\n        ddd: número de días.<br>\r\n        hh: número de horas, entre 0 y 23.<br>\r\n        mm: número de minutos, entre 0 y 59.<br>\r\n        ss: número de segundos, entre 0 y 59.<br>\r\n        ff: fracción de segundos, entre 0 y 9999999.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>\"2.05:55:20\"</code> en un valor <code>duration</code>.",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "Devuelve la parte de horas de una duración.",
        "Documentation.LongDescription": "Devuelve la parte de horas de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraiga las horas de un valor de duración.",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "Devuelve la parte de minutos de una duración.",
        "Documentation.LongDescription": "Devuelve la parte de minutos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraiga los minutos de un valor de duración.",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "Devuelve la parte de segundos de una duración.",
        "Documentation.LongDescription": "Devuelve la parte de segundos de <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Extraiga los segundos de un valor de duración.",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "Devuelve un registro que contiene los elementos de la duración.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los elementos del valor duration, <code>duration</code>.\r\n  <ul>\r\n        <li><code>duration</code>: un valor <code>duration</code> a partir del que se creará el registro.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#duration(2, 5, 55, 20)</code> en un registro de sus elementos incluidos los días, horas, minutos y segundos, si corresponde.",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "Devuelve el texto en el formato “d.h:m:s”.",
        "Documentation.LongDescription": "Devuelve una representación textual en el formato \"día.hora.minuto:segundo\" del valor de duración determinado, <code>duration</code>.\r\n <ul>\r\n        <li><code>duration</code>: elemento <code>duration</code> mediante el que se calcula la representación textual.</li>\r\n  <li><code>format</code>: <i>[opcional]</i> se encuentra en desuso; si no es NULL, se generará un error.</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#duration(2, 5, 55, 20)</code> en un valor de texto.",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "Devuelve el total de días que abarca esta duración.",
        "Documentation.LongDescription": "Devuelve el total de días distribuidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Busque el total de días distribuidos por un valor de duración.",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "Devuelve el total de horas que abarca esta duración.",
        "Documentation.LongDescription": "Devuelve el total de horas distribuidas por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Busque el total de horas distribuidas por un valor de duración.",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "Devuelve el total de minutos que abarca esta duración.",
        "Documentation.LongDescription": "Devuelve el total de minutos distribuidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Busque el total de minutos distribuidos por un valor de duración.",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "Devuelve el total de segundos que abarca esta duración.",
        "Documentation.LongDescription": "Devuelve el total de segundos distribuidos por <code>duration</code>.",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "Busque el total de segundos distribuidos por un valor de duración.",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "Devuelve un registro de error de los valores de texto proporcionados para el motivo, el mensaje y el detalle.",
        "Documentation.LongDescription": "Devuelve un registro de error de los valores de texto proporcionados para el motivo, el mensaje y el detalle.",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "Devuelve la representación del código fuente M de un valor constante.",
        "Documentation.LongDescription": "Devuelve la representación del código fuente M de un valor constante.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la representación del código fuente M de un valor numérico.",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "Obtenga la representación del código fuente M de un valor de fecha.",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "Obtenga la representación del código fuente M de un valor de texto.",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "Devuelve el resultado de evaluar una expresión M.",
        "Documentation.LongDescription": "Devuelve el resultado de evaluar una expresión M <code>document</code>, con los identificadores disponibles a los que <code>environment</code> pueda hacer referencia.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Evaluar una suma simple.",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "Evalúe una suma más compleja.",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "Evalúe la concatenación de un valor de texto con un identificador.",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "Devuelve la representación del código fuente M de un identificador.",
        "Documentation.LongDescription": "Devuelve la representación del código fuente M de un identificador <code>name</code>.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la representación del código fuente M de un identificador.",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "Obtenga la representación del código fuente M de un identificador que contenga un espacio.",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "Devuelve el contenido del archivo especificado como binario.",
        "Documentation.LongDescription": "Devuelve el contenido del archivo, <code>path</code>, como binario. El parámetro <code>options</code> está pensado actualmente solo para uso interno.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "Devuelve si una determinada función se considera o no una origen de datos.",
        "Documentation.LongDescription": "Devuelve si <code>function</code> se considera o no una origen de datos.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "Traduce texto que representa un valor geográfico en formato Well-Known Text (WKT) en un registro estructurado.",
        "Documentation.LongDescription": "Traduce texto que representa un valor geográfico en formato Well-Known Text (WKT) en un registro estructurado. WKT es un formato estándar definido por el consorcio Open Geospatial Consortium (OGC) y es el formato de serialización típico que usan las bases de datos, incluidas las de SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "Traduce un valor de punto geográfico estructurado en su representación de Well-Known Text (WKT).",
        "Documentation.LongDescription": "Traduce un valor de punto geográfico estructurado en su representación de Well-Known Text (WKT), tal como la define el consorcio Open Geospatial Consortium (OGC), el formato de serialización que usan muchas bases de datos, incluidas las de SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "Traduce texto que representa un valor geométrico en formato Well-Known Text (WKT) en un registro estructurado.",
        "Documentation.LongDescription": "Traduce texto que representa un valor geométrico en formato Well-Known Text (WKT) en un registro estructurado. WKT es un formato estándar definido por el consorcio Open Geospatial Consortium (OGC) y es el formato de serialización típico que usan las bases de datos, incluidas las de SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "Traduce un valor de punto geométrico estructurado en su representación de Well-Known Text (WKT).",
        "Documentation.LongDescription": "Traduce un valor de punto geométrico estructurado en su representación de Well-Known Text (WKT), tal como la define el consorcio Open Geospatial Consortium (OGC), el formato de serialización que usan muchas bases de datos, incluidas las de SQL Server.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "Devuelve un valor GUID a partir de un valor determinado.",
        "Documentation.LongDescription": "Devuelve un valor <code>Guid.Type</code> a partir del valor <code>value</code> proporcionado. Si dicho valor, <code>value</code>, es <code>null</code>, <code>Guid.From</code> devuelve <code>null</code>. Se llevará a cabo una comprobación para determinar si el valor <code>value</code> tiene un formato aceptable. Los formatos aceptables se proporcionan en los ejemplos.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "El GUID se puede proporcionar con 32 dígitos hexadecimales contiguos.",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "El GUID se puede proporcionar con 32 dígitos hexadecimales separados por guiones en bloques de 8-4-4-4-12.",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "El GUID se puede proporcionar con 32 dígitos hexadecimales separados por guiones y entre llaves.",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "El GUID se puede proporcionar con 32 dígitos hexadecimales separados por guiones y entre paréntesis.",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "Crea un entero de 16 bits a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> entero de 16 bits a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Int16.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de enteros de 16 bits sin una parte fraccionaria, se devuelve <code>value</code>. Si tiene una parte fraccionaria, el número se redondea con el modo de redondeo que se haya especificado. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. Vea <code>Number.Round</code> para conocer los modos de redondeo disponibles. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> entero de 16 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor <code>number</code> entero de 16 bits de <code>\"4.5\"</code> con <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "Crea un entero de 32 bits a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> entero de 32 bits a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Int32.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de enteros de 32 bits sin una parte fraccionaria, se devuelve <code>value</code>. Si tiene una parte fraccionaria, el número se redondea con el modo de redondeo que se haya especificado. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. Vea <code>Number.Round</code> para conocer los modos de redondeo disponibles. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> entero de 32 bits de <code>\"4\"</code>.",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor <code>number</code> entero de 32 bits de <code>\"4.5\"</code> con <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "Crea un entero de 64 bits a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> entero de 64 bits a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Int64.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de enteros de 64 bits sin una parte fraccionaria, se devuelve <code>value</code>. Si tiene una parte fraccionaria, el número se redondea con el modo de redondeo que se haya especificado. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. Vea <code>Number.Round</code> para conocer los modos de redondeo disponibles. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenga el valor de <code>number</code> de entero de 64 bits de <code>\"4\"</code>.",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtenga el valor de <code>number</code> del entero de 64 bits de <code>\"4,5\"</code> con <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "Crea un entero con signo de 8 bits a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> entero de 8 bits firmado a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Int8.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de enteros de 8 bits firmados sin una parte fraccionaria, se devuelve <code>value</code>. Si tiene una parte fraccionaria, el número se redondea con el modo de redondeo que se haya especificado. El modo de redondeo predeterminado es <code>RoundingMode.ToEven</code>. Si <code>value</code> es de otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. Vea <code>Number.Round</code> para conocer los modos de redondeo disponibles. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> entero con signo de 8 bits de <code>\"4\"</code>.",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor <code>number</code> entero con signo de 8 bits de <code>\"4.5\"</code> con <code>RoundingMode.AwayFromZero</code>.",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "Devuelve el árbol de sintaxis abstracta (AST) para el cuerpo de una función.",
        "Documentation.LongDescription": "<p>Devuelve el árbol de sintaxis abstracta (AST) del cuerpo de <code>function</code>, normalizado en una <i>Devuelve el árbol de sintaxis abstracta expresión de elemento</i>:\r\n<ul>\r\n  <li>La función debe ser una expresión lambda de un argumento.</li>\r\n  <li>Todas las referencias al parámetro de la función se reemplazan por <code>ItemExpression.Item</code>.</li>\r\n  <li>El AST se simplificará para que contenga solo los nodos de los tipos:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Se genera un error si no se puede devolver el AST de una expresión de fila para el cuerpo de <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devuelve el AST del cuerpo de la función <code>each _ <> null</code>",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "Devuelve el contenido del documento JSON.",
        "Documentation.LongDescription": "Devuelve el contenido del documento JSON.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "Produce una representación JSON de un determinado valor.",
        "Documentation.LongDescription": "<p>Produce una representación JSON de un valor especificado <code>value</code> con una codificación de texto que especifica <code>encoding</code>. Si <code>encoding</code> se omite, se usa UTF8. Los valores se representan de la siguiente manera:</p>\r\n <ul>\r\n        <li>Los valores nulos, de texto y lógicos se representan con los tipos JSON correspondientes</li>\r\n        <li>Los números se representan con números en JSON, excepto <code>#infinity</code>, <code>-#infinity</code> y <code>#nan</code>, que se convierten en nulos</li>\r\n        <li>Las listas se representan con matrices JSON</li>\r\n        <li>Los registros se representan con objetos JSON</li>\r\n        <li>Las tablas se representan con una matriz de objetos</li>\r\n        <li>Los valores de date, time, datetime, datetimezone y duration se representan con texto ISO-8601</li>\r\n        <li>Los valores binarios se representan con texto con codificación base 64</li>\r\n        <li>Los tipos y las funciones generan un error</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Convertir un valor complejo a JSON.",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "Convierte un valor binario en una lista de valores de texto dividida por saltos de línea. Si se especifica un estilo de comillas, los saltos de línea pueden aparecer entrecomillados. Si el valor includeLineSeparators es True, los caracteres de saltos de línea se incluyen en el texto.",
        "Documentation.LongDescription": "Convierte un valor binario en una lista de valores de texto dividida por saltos de línea. Si se especifica un estilo de comillas, los saltos de línea pueden aparecer entrecomillados. Si el valor includeLineSeparators es True, los caracteres de saltos de línea se incluyen en el texto.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "Convierte un valor de texto en una lista de valores de texto dividida por saltos de línea. Si el valor de includeLineSeparators es true, los caracteres de saltos de línea se incluyen en el texto.",
        "Documentation.LongDescription": "Convierte un valor de texto a una lista de valores de texto divididos por saltos de línea. Si el valor de includeLineSeparators es true, los caracteres de salto de línea se incluyen en el texto.\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (valor predeterminado) no se necesita comportamiento de comillas.</li>\r\n            <li><code>QuoteStyle.Csv:</code> las comillas se determinan por Csv. Se usa un carácter de comillas dobles para delimitar esas regiones y dos caracteres de comillas dobles para indicar un único carácter de comillas dobles dentro de una región como esa. </li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "Convierte una lista de texto en un valor binario con la codificación y el separador de líneas especificados. Este se anexa a cada línea.  Si no se especifica, se usan los caracteres de retorno de carro y de avance de línea.",
        "Documentation.LongDescription": "Convierte una lista de texto en un valor binario con la codificación y el separador de líneas especificados. Este se anexa a cada línea.  Si no se especifica, se usan los caracteres de retorno de carro y de avance de línea.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "Convierte una lista de texto en un solo texto.  El separador de línea especificado se anexa a cada línea.  Si no se especifica, se usan los caracteres de retorno de carro y de avance de línea.",
        "Documentation.LongDescription": "Convierte una lista de texto en un solo texto.  El separador de línea especificado se anexa a cada línea.  Si no se especifica, se usan los caracteres de retorno de carro y de avance de línea.",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "Devuelve True si todas las expresiones son True.",
        "Documentation.LongDescription": "Devuelve True si todas las expresiones de la lista <code>list</code> son True.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina si todas las expresiones de la lista {true, true, 2 > 0} son True.",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "Determina si todas las expresiones de la lista {true, true, 2 < 0} son True.",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "Devuelve true si alguna expresión es true.",
        "Documentation.LongDescription": "Devuelve true si alguna expresión de la lista <code>list</code> es true.",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "Determina si alguna de las expresiones de la lista {true, false, 2 > 0} es true.",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "Determina si alguna de las expresiones de la lista {2 = 0, false, 2 < 0} es true.",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "Devuelve la media de los valores. Opera con valores number, date, datetime, datetimezone y duration.",
        "Documentation.LongDescription": "Devuelve el valor promedio de los elementos de la lista, <code>list</code>. El resultado se proporciona en el mismo tipo de datos que los valores de la lista. Solo opera con valores number, date, time, datetime, datetimezone y duration.\r\n    Si la lista está vacía, se devuelve NULL.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Busca el promedio de la lista de números <code>{3, 4, 6}</code>.",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "Buscar el promedio de los valores de fecha del 1 de enero de 2011, el 2 de enero de 2011 y el 3 de enero de 2011.",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "Almacenar en búfer una lista.",
        "Documentation.LongDescription": "Almacena en búfer la lista <code>list</code> en memoria. El resultado de esta llamada es una lista estable.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crear una copia estable de la lista {1..10}.",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "Devuelve una sola lista combinando varias.",
        "Documentation.LongDescription": "Toma una lista de listas, <code>lists</code>, y las combina en una sola lista nueva.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Combinar las dos listas simples {1, 2} y {3, 4}.",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "Combinar las dos listas, {1, 2} y {3, {4, 5}}, una de las cuales contiene una lista anidada.",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "Devuelve el número de elementos de la lista.",
        "Documentation.LongDescription": "Devuelve el número de elementos de la lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de valores de la lista {1, 2, 3}.",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "Devuelve una lista de valores con los duplicados quitados.",
        "Documentation.LongDescription": "Devuelve una lista que contiene todos los valores de la lista <code>list</code> con los duplicados quitados. Si la lista está vacía, el resultado es una lista vacía.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Quitar duplicados de la lista {1, 1, 2, 3, 3, 3}.",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "Devuelve el primer valor de la lista o el valor predeterminado especificado si está vacía.",
        "Documentation.LongDescription": "Devuelve el primer elemento de la lista <code>list</code> o el valor predeterminado opcional <code>defaultValue</code>, si la lista está vacía.\r\n    Si la lista está vacía y no se especifica un valor predeterminado, la función devuelve <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el primer valor de la lista {1, 2, 3}.",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "Buscar el primer valor de la lista {}. Si la lista está vacía, se devuelve -1.",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "Devuelve la intersección de los valores de lista encontrados en la entrada.",
        "Documentation.LongDescription": "Devuelve la intersección de los valores de la lista encontrados en la lista de entrada <code>lists</code>. Se puede especificar un parámetro opcional, <code>equationCriteria</code>,.",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Busca la intersección de las listas {1..5}, {2..6}, {3..7}.",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "Indica si hay duplicados en la lista.",
        "Documentation.LongDescription": "Devuelve un valor lógico si hay duplicados en la lista <code>list</code>; <code>true</code> si la lista es distinta, <code>false</code> si hay valores duplicados. ",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar si la lista {1, 2, 3} es distinta (es decir, no hay duplicados).",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "Buscar si la lista {1, 2, 3, 3} es distinta (es decir, no hay duplicados).",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "Devuelve true si la lista está vacía.",
        "Documentation.LongDescription": "Vuelve <code>true</code> si la lista <code>list</code> no contiene ningún valor (length 0). Si la lista contiene valores (length > 0), devuelve <code>false</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "Buscar si la lista {} está vacía.",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "Buscar si la lista {1, 2} está vacía.",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "Devuelve el último valor de la lista o el valor predeterminado especificado si está vacío.",
        "Documentation.LongDescription": "Devuelve el último elemento de la lista <code>list</code> o el valor predeterminado opcional <code>defaultValue</code>, si la lista está vacía.\r\n    Si la lista está vacía y no se especifica un valor predeterminado, la función devuelve <code>null</code>.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el último valor de la lista {1, 2, 3}.",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "Buscar el último valor de la lista {} o devolver -1 si está vacía.",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "Devuelve el último valor de la lista.  Si lo desea, puede especificar cuántos valores devolver o una condición que cumplir.",
        "Documentation.LongDescription": "Devuelve el último elemento de la lista <code>list</code>. Si la lista está vacía, se inicia una excepción.\r\n Esta función toma un parámetro opcional <code>countOrCondition</code> para recopilar varios elementos o filtrarlos. <code>countOrCondition</code> se puede especificar de tres formas:\r\n <ul>\r\n  <li>Si se especifica un número, se devuelven hasta ese número de elementos. </li>\r\n  <li>Si se especifica una condición, se devuelven todos los elementos que cumplen inicialmente la condición, a partir del final de la lista. Una vez un elemento no cumple la condición, no se consideran más elementos. </li>\r\n  <li>Si este parámetro es NULL, se devuelve el último elemento de la lista.</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el último valor de la lista {3, 4, 5, -1, 7, 8, 2}.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "Buscar los últimos valores de la lista {3, 4, 5, -1, 7, 8, 2} que sean mayores que 0.",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "Devuelve el valor máximo o el valor predeterminado de una lista vacía.",
        "Documentation.LongDescription": "Devuelve el elemento máximo de la lista <code>list</code> o, si la lista está vacía, el valor predeterminado opcional <code>default</code>.\r\n    Se puede especificar un valor de criterio de comparación opcional <code>comparisonCriteria</code> para determinar cómo se comparan los elementos de la lista. Si este parámetro es \"null\", se usa el comparador predeterminado.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor máximo de la lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "Buscar el valor máximo de la lista {} o devolver -1 si está vacía. ",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "Devuelve el valor de la mediana de la lista.",
        "Documentation.LongDescription": "Devuelve el elemento de mediana de la lista <code>list</code>. Esta función devuelve <code>null</code> si la lista no contiene ningún valor que no sea <code>null</code>.\r\n    Si el número de elementos es par, la función elige el menor de los dos elementos de mediana, a menos que la lista esté\r\n    formada en su totalidad por valores de fecha y hora, duración, números o repeticiones, en cuyo caso devuelve la media de los dos elementos.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar la mediana de la lista <code>{5, 3, 1, 7, 9}</code>.",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "Devuelve el valor mínimo o el valor predeterminado de una lista vacía.",
        "Documentation.LongDescription": "Devuelve el elemento mínimo de la lista <code>list</code> o, si la lista está vacía, el valor predeterminado opcional <code>default</code>.\r\n    Se puede especificar un valor de criterio de comparación opcional <code>comparisonCriteria</code> para determinar cómo se comparan los elementos de la lista. Si este parámetro es \"null\", se usa el comparador predeterminado.",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor mínimo de la lista {1, 4, 7, 3, -2, 5}.",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "Buscar el valor mínimo de la lista {} o devolver -1 si está vacía. ",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "Devuelve el valor más frecuente de la lista.",
        "Documentation.LongDescription": "Devuelve el elemento que aparece con más frecuencia en la lista <code>list</code>. Si la lista está vacía, se produce una excepción. Si varios elementos aparecen con la misma frecuencia máxima, se elige el último.\r\n    Se puede especificar un valor <code>comparisonCriteria</code> opcional (<code>equationCriteria</code>) para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Buscar el elemento que aparece con más frecuencia en la lista <code>{\"A\", 1, 2, 3, 3, 4, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "Buscar el elemento que aparece con más frecuencia en la lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "Devuelve una lista de los valores más frecuentes de la lista.",
        "Documentation.LongDescription": "Devuelve el elemento que aparece con más frecuencia en la lista <code>list</code>. Si la lista está vacía, se produce una excepción. Si varios elementos aparecen con la misma frecuencia máxima, se elige el último.\r\n    Se puede especificar un valor <code>comparisonCriteria</code> opcional (<code>equationCriteria</code>) para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Buscar los elementos que aparecen con más frecuencia en la lista <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "Devuelve el número de elementos que no son NULL de la lista.",
        "Documentation.LongDescription": "Devuelve el número de elementos que no son NULL de la lista <code>list</code>.",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "Devuelve una lista de desplazamientos para la entrada.",
        "Documentation.LongDescription": "Devuelve una lista de desplazamientos para la lista de entrada <code>list</code>.\r\n    Al usar List.Transform para cambiar una lista, la lista de posiciones se puede usar para dar a la transformación acceso a la posición.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar los desplazamientos de los valores de la lista {1, 2, 3, 4, null, 5}.",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "Devuelve el producto de los números de la lista.",
        "Documentation.LongDescription": "Devuelve el producto de los números que no son NULL de la lista, <code>numbersList</code>. Devuelve NULL si no hay valores no NULL en la lista.",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "Buscar el producto de los números de la lista <code>{1, 2, 3, 3, 4, 5, 5}</code>.",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "Devuelve una lista de números aleatorios.",
        "Documentation.LongDescription": "Devuelve una lista de números aleatorios entre 0 y 1, especificado el número de valores que se generarán y un valor de inicialización opcional.\r\n<ul>\r\n   <li><code>count</code>: número de valores aleatorios que generar.</li>\r\n   <li><code>seed</code>: <i>[opcional]</i> valor numérico que se usa para inicializar el generador de números aleatorios. Si se omite, se genera una lista única de números aleatorios cada vez que se llama a la función. Si especifica el valor de inicialización con un número, cada llamada a la función generará la misma lista de números aleatorios.</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de tres números aleatorios.",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "Crear una lista de tres números aleatorios, especificando el valor de inicialización.",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "Devuelve una lista que omite el número especificado de elementos al principio de la lista.",
        "Documentation.LongDescription": "Devuelve una lista que quita el primer elemento de la lista <code>list</code>. Si <code>list</code> es una lista vacía, se devuelve una lista vacía.\r\nEsta función toma un parámetro opcional, <code>countOrCondition</code> para admitir la eliminación de varios valores como se muestra a continuación.\r\n <ul>\r\n <li>Si se especifica un número, se quitan hasta ese número de elementos. </li>\r\n <li>Si se especifica una condición, se quitan todos los elementos coincidentes consecutivos al principio de <code>list</code>.</li>\r\n <li>Si este parámetro es null, se observa el comportamiento predeterminado. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir de {1, 2, 3, 4, 5} sin los 3 primeros números.",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Crear una lista a partir de {5, 4, 2, 6, 1} que empiece con un número menor que 3.",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "Devuelve una lista que quita el número especificado de elementos del final de la lista.",
        "Documentation.LongDescription": "Devuelve una lista que quita los <code>countOrCondition</code> últimos elementos del final de la lista <code>list</code>. Si <code>list</code> tiene menos de <code>countOrCondition</code> elementos, se devuelve una lista vacía.\r\n <ul>\r\n <li>Si se especifica un número, se quitan hasta ese número de elementos. </li>\r\n <li>Si se especifica una condición, se quitan todos los elementos coincidentes consecutivos al final de <code>list</code>.</li>\r\n <li>Si este parámetro es null, solo se quita un elemento. </li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir de {1, 2, 3, 4, 5} sin los 3 últimos números.",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "Crear una lista a partir de {5, 4, 2, 6, 4} que termine con un número menor que 3.",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "Quita todos los valores \"NULL\" de la lista especificada.",
        "Documentation.LongDescription": "Quita todas las coincidencias de valores \"NULL\" de <code>list</code>. Si no existen valores 'NULL', se devuelve la lista original.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Quitar los valores \"null\" de la lista {1, 2, 3, null, 4, 5, null, 6}.",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "Revierte el orden de valores de la lista.",
        "Documentation.LongDescription": "Devuelve una lista con los valores de la lista <code>list</code> en orden inverso.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de {1..10} en orden inverso.",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "Devuelve el elemento de lista uno para una lista de longitud uno; de lo contrario, se inicia una excepción.",
        "Documentation.LongDescription": "Si solo hay un elemento en la lista <code>list</code>, devuelve dicho elemento.\r\n    Si hay más de un elemento o la lista está vacía, la función produce una excepción.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el único valor de la lista {1}.",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "Buscar el único valor de la lista {1, 2, 3}.",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "Devuelve el elemento uno de la lista para una lista de longitud uno y el valor predeterminado para una lista vacía.",
        "Documentation.LongDescription": "Si solo hay un elemento en la lista <code>list</code>, devuelve dicho elemento.\r\n    Si la lista está vacía, la función devuelve \"null\", excepto si se especifica un <code>default</code> opcional. Si hay más de un elemento en la lista, la función devuelve un error.",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Buscar el único valor de la lista {1}.",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "Buscar el único valor de la lista {}.",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "Buscar el único valor de la lista {}. Si está vacío, se devuelve -1.",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "Devuelve una lista que omite el número especificado de elementos al principio de la lista.",
        "Documentation.LongDescription": "Devuelve una lista que omite el primer elemento de la lista <code>list</code>. Si <code>list</code> es una lista vacía, se devuelve una lista vacía.\r\nEsta función toma un parámetro opcional, <code>countOrCondition</code>, para admitir la omisión de varios valores, como se muestra a continuación.\r\n <ul>\r\n <li>Si se especifica un número, se omiten hasta ese número de elementos. </li>\r\n <li>Si se especifica una condición, se omiten los elementos coincidentes consecutivos al principio de <code>list</code>.</li>\r\n <li>Si este parámetro es null, se observa el comportamiento predeterminado. </li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista a partir de {1, 2, 3, 4, 5} sin los primeros 3 números.",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "Crear una lista a partir de {5, 4, 2, 6, 1} que empiece con un número menor que 3.",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "Ordena una lista de datos según los criterios especificados.",
        "Documentation.LongDescription": "Ordena una lista de datos, <code>list</code>, según los criterios opcionales especificados.\r\n    Se puede especificar un parámetro opcional, <code>comparisonCriteria</code>, como criterio de comparación. Esto puede tomar los siguientes valores:\r\n    <ul>\r\n    <li>Para controlar el orden, el criterio de comparación puede ser un valor de enumeración de orden. (<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li>  Para calcular una clave que se usará para la ordenación, se puede usar una función de 1 argumento. </li>\r\n <li>Para seleccionar una clave y un orden de control, el criterio de comparación puede ser una lista que contenga la clave y el orden (<code>{each 1 / _, Order.Descending}</code>). </li>\r\n    <li> Para controlar completamente la comparación, se puede usar una función de 2 argumentos. A esta función se le pasarán dos elementos de la lista (dos elementos cualquiera, en cualquier orden). La función debe devolver uno de los siguientes valores:\r\n        <ul>\r\n            <li> <code>-1</code>: el primer elemento es menor que el segundo elemento.</li>\r\n            <li> <code>0</code>: los elementos son iguales.</li>\r\n            <li> <code>1</code>: el primer elemento es mayor que el segundo elemento.</li>\r\n        </ul>\r\n        Value.Compare es un método que se puede usar para delegar esta lógica. </li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "Ordenar la lista {2, 3, 1}.",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "Ordenar la lista {2, 3, 1} en orden descendente.",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "Ordenar la lista {2, 3, 1} en orden descendente mediante el método Value.Compare.",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "Devuelve una estimación basada en la muestra de la desviación estándar.",
        "Documentation.LongDescription": "Devuelve una estimación basada en la muestra de la desviación estándar de los valores de la lista <code>numbersList</code>.\r\n    Si <code>numbersList</code> es una lista de números, se devuelve un número.\r\n    Se produce una excepción en una lista vacía o una lista de elementos que no sean del tipo <code>number</code>.",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "Buscar la desviación estándar de los números 1 a 5.",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "Devuelve la suma de los elementos de la lista.",
        "Documentation.LongDescription": "Devuelve la suma de todos los valores que no son NULL de la lista <code>list</code>.  Devuelve NULL si no hay valores no NULL en la lista.",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "Buscar la suma de los números de la lista <code>{1, 2, 3}</code>.",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "Devuelve la unión de los valores de lista encontrados en la entrada.",
        "Documentation.LongDescription": "Toma una lista de listas <code>lists</code>, combina los elementos de las listas individuales y los devuelve en la lista de salida. Como resultado, la lista devuelta contiene todos los elementos de cualquiera de las listas de entrada.\r\n    Esta operación mantiene la semántica multiconjunto tradicional, por lo que los valores duplicados se buscan como parte de la unión.\r\n    Se puede especificar un valor opcional de criterios de ecuación (<code>equationCriteria</code>) para controlar la igualdad de las pruebas. ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "Crear una combinación de la lista {1..5}, {2..6}, {3..7}.",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "Combina los elementos situados en la misma posición de múltiples listas y devuelve una elaborada a partir de dichas listas.",
        "Documentation.LongDescription": "Toma una lista elaborada a partir de varias listas (<code>lists</code>), combina los elementos situados en la misma posición y devuelve otra lista también elaborada a partir de varias.",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "Comprime las dos listas simples {1, 2} y {3, 4}.",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "Comprime las dos listas simples de longitudes distintas {1, 2} y {3}.",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "Crea una lógica a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>logical</code> a partir del <code>value</code> especificado. Si el <code>value</code> especificado es <code>null</code>, <code>Logical.From</code> devuelve <code>null</code>. Si el <code>value</code> especificado es <code>logical</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir a un valor <code>logical</code>:\r\n      <ul>\r\n        <li><code>text</code>: un valor <code>logical</code> a partir del valor de texto, ya sea <code>\"false\"</code> o <code>\"true\"</code>. Para más información, vea <code>Logical.FromText</code>.</li>\r\n        <li><code>number</code>: <code>false</code> si <code>value</code> es igual que <code>0</code>, <code>true</code> en caso contrario.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>2</code> en un valor <code>logical</code>.",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "Crea un valor lógico a partir de los valores de texto \"true\" y \"false\".",
        "Documentation.LongDescription": "Crea un valor lógico a partir de los valores de texto <code>text</code>, ya sean \"true\" o \"false\". Si <code>text</code> contiene otra cadena, se inicia una excepción. El valor de texto <code>text</code> no distingue entre mayúsculas y minúsculas.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Crear un valor lógico a partir de la cadena de texto \"true\".",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "Crear un valor lógico a partir de la cadena de texto \"a\".",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "Devuelve el texto \"true\" or\"false\" dado un valor lógico.",
        "Documentation.LongDescription": "Crea un valor de texto a partir del valor lógico <code>logicalValue</code>, ya sea <code>true</code> o <code>false</code>. Si <code>logicalValue</code> no es un valor lógico, se inicia una excepción.",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "Crear un valor de texto a partir del valor lógico <code>true</code>.",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "Devuelve el valor absoluto del número.",
        "Documentation.LongDescription": "Devuelve el valor absoluto de <code>number</code>. Si <code>number</code> es \"null\", <code>Number.Abs</code> devuelve \"null\".\r\n    <ul>\r\n        <li><code>number</code>: un <code>number</code> cuyo valor absoluto se va a calcular.</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Valor absoluto de -3.",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "Devuelve el arco coseno del número.",
        "Documentation.LongDescription": "Devuelve el arco coseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "Devuelve el arco seno del número.",
        "Documentation.LongDescription": "Devuelve el arco seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "Devuelve el arco tangente del número.",
        "Documentation.LongDescription": "Devuelve el arco tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "Devuelve un byte donde cada bit es el opuesto de la entrada.",
        "Documentation.LongDescription": "Devuelve el resultado de realizar una operación bit a bit \"Not\" en <code>number</code>.",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "Devuelve el coseno del número.",
        "Documentation.LongDescription": "Devuelve el coseno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Buscar el coseno del ángulo 0.",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "Devuelve el coseno hiperbólico del número.",
        "Documentation.LongDescription": "Devuelve el coseno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "Eleva e a la potencia especificada.",
        "Documentation.LongDescription": "Devuelve el resultado de elevar \"e\" a la potencia de <code>number</code> (función exponencial).\r\n      <ul>\r\n        <li><code>number</code>: un <code>number</code> cuya función exponencial se va a calcular. Si <code>number</code> es \"null\", <code>Number.Exp</code> devuelve \"null\". </li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Elevar e a la potencia de 3.",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "Devuelve el factorial del número.",
        "Documentation.LongDescription": "Devuelve el factorial del número <code>number</code>.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar el factorial de 10.",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "Crea un número a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> a partir del valor <code>value</code> dado. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").\r\nSi <code>value</code> es <code>null</code>, <code>Number.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir a un valor <code>number</code>:\r\n      <ul>\r\n        <li><code>text</code>: valor <code>number</code> a partir de la representación de texto. Se usan los formatos de texto comunes (\"15\", \"3423,10\", \"5.0E-10\"). Para más información, vea <code>Number.FromText</code>.</li>\r\n        <li><code>logical</code>: 1 para <code>true</code>, 0 para <code>false</code>.</li>\r\n        <li><code>datetime</code>: número de punto flotante de doble precisión que contiene un equivalente de fecha de automatización OLE.</li>\r\n        <li><code>datetimezone</code>: número de punto flotante de doble precisión que contiene un equivalente de fecha de automatización OLE de la fecha y hora locales <code>value</code>.</li>\r\n        <li><code>date</code>: número de punto flotante de doble precisión que contiene un equivalente de fecha de automatización OLE.</li>\r\n        <li><code>time</code>: expresado en días fraccionarios.</li>\r\n        <li><code>duration</code>: expresado en días enteros y fraccionarios.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> de <code>\"4\"</code>.",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor <code>number</code> de <code>#datetime(2020, 3, 20, 6, 0, 0)</code>.",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "Obtenga el valor <code>numérico</code> de <code>\"12,3 %\"</code>.",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "Crea los números de los formatos de texto comunes (\"15\", \"3,423.10\", \"5.0E-10\").",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> a partir del valor de texto dado, <code>text</code>.\r\n <ul>\r\n  <li><code>text</code>: representación de texto de un valor numérico. La representación debe tener un formato numérico común como \"15\", \"3423,10\" o \"5.0E-10\".</li>\r\n  <li><code>culture</code>: referencia cultural opcional que controla cómo se interpreta <code>text</code> (por ejemplo, \"es-ES\").</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor numérico de <code>\"4\"</code>.",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "Obtener el valor numérico de <code>\"5.0e-10\"</code>.",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "Indica si el valor es par.",
        "Documentation.LongDescription": "Indica si el valor <code>number</code>, está volviendo <code>true</code> incluso si es uniforme, <code>false</code> si no.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si 625 es un número par.",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "Comprobar si 82 es un número par.",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "Indica si el valor es NaN (no un número).",
        "Documentation.LongDescription": "Indica si el valor es NaN (no un número). Devuelve <code>true</code> si <code>number</code> es equivalente a <code>Number.IsNaN</code>, <code>false</code> en caso contrario.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si 0 dividido por 0 es NaN.",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "Comprobar si 1 dividido por 0 es NaN.",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "Indica si el valor es impar.",
        "Documentation.LongDescription": "Indica si el valor es impar. Devuelve <code>true</code> si <code>number</code> es un número impar, <code>false</code> en caso contrario.",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "Comprobar si 625 es un número impar.",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "Comprobar si 82 es un número impar.",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "Devuelve el logaritmo natural del número.",
        "Documentation.LongDescription": "Devuelve el logaritmo natural de un número <code>number</code>. Si <code>number</code> es NULL, <code>Number.Ln</code> devuelve NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtener el logaritmo natural de 15.",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "Devuelve el logaritmo del número en la base especificada (e, de forma predeterminada).",
        "Documentation.LongDescription": "Devuelve el logaritmo de un número (<code>number</code>) en la base especificada <code>base</code>. Si no se especifica <code>base</code>, el valor predeterminado es Number.E.\r\n    Si <code>number</code> es \"null\", <code>Number.Log</code> devuelve \"null\".",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtenga el logaritmo en base 10 de 2.",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "Obtenga el logaritmo en base e de 2.",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "Devuelve el logaritmo en base 10 del número.",
        "Documentation.LongDescription": "Devuelve el logaritmo en base 10 de un número, <code>number</code>. Si <code>number</code> es NULL, <code>Number.Log10</code> devuelve NULL.",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Obtenga el logaritmo en base 10 de 2.",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "Devuelve el número redondeado. Se puede especificar el número de dígitos y el modo de redondeo.",
        "Documentation.LongDescription": "Aporta el resultado de redondear <code>number</code> al número más próximo. Si <code>number</code> es nulo, <code>Number.Round</code> resultará nulo.<br>\r\n      <br>\r\n      De manera predeterminada, <code>number</code> se redondea al número entero más próximo y los empates se desharán redondeando al número par más próximo (mediante <code>RoundingMode.ToEven</code>, o «redondeo bancario» ).<br>\r\n      <br>\r\n      Sin embargo, estos valores predeterminados se pueden anular a través de los siguientes parámetros opcionales.\r\n      <ul>\r\n        <li><code>digits</code>: Redondea <code>number</code> al número especificado de dígitos decimales.</li>\r\n        <li><code>roundingMode</code>: Anula el desempate predeterminado cuando <code>number</code> se encuentra en el punto medio entre dos posibles valores redondeados\r\n      (visite <code>RoundingMode.Type</code> para ver posibles valores).</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Redondear 1,234 al entero más próximo.",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "Redondear 1,56 al entero más próximo.",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "Redondear 1,2345 con dos posiciones decimales.",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "Redondear 1,2345 con tres posiciones decimales (redondear hacia arriba).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "Redondear 1,2345 con tres posiciones decimales (redondear hacia abajo).",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "Devuelve el resultado de redondear los números positivos hacia arriba y los números negativos hacia abajo. Se puede especificar el número de dígitos.",
        "Documentation.LongDescription": "Devuelve el resultado de redondear <code>number</code> según el signo del número. Esta función redondeará los números positivos hacia arriba y los números negativos hacia abajo.\r\n    Si se especifica <code>digits</code>, <code>number</code> se redondea al número <code>digits</code> de dígitos decimales.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Redondear el número -1,2 en dirección contraria a cero.",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "Redondear el número 1,2 en dirección contraria a cero.",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "Redondee el número -1,234 a dos posiciones decimales a partir de cero.",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "Devuelve el número anterior más alto. Se puede especificar el número de dígitos.",
        "Documentation.LongDescription": "Devuelve el resultado de redondear <code>number</code> hacia abajo hasta el entero más alto anterior. Si <code>number</code> es NULL, esta función devuelve NULL.\r\n\r\n    Si se proporciona <code>digits</code>, <code>number</code> se redondea al número especificado de dígitos decimales.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Redondear 1,234 a un entero.",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "Redondear 1,999 a un entero.",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "Redondee hacia abajo 1,999 a dos posiciones decimales.",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "Devuelve el resultado de redondear los números positivos hacia abajo y los números negativos hacia arriba. Se puede especificar el número de dígitos.",
        "Documentation.LongDescription": "Devuelve el resultado de redondear <code>number</code> según el signo del número. Esta función redondeará los números positivos hacia abajo y los números negativos hacia arriba.\r\n    Si se especifica <code>digits</code>, <code>number</code> se redondea al número <code>digits</code> de dígitos decimales.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Redondear el número -1,2 hacia cero.",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "Redondear el número 1,2 hacia cero.",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "Redondee el número -1.234 a dos posiciones decimales hacia cero.",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "Devuelve el número más alto siguiente. Se puede especificar el número de dígitos.",
        "Documentation.LongDescription": "Devuelve el resultado de redondear <code>number</code> hacia arriba hasta el entero más alto siguiente. Si <code>number</code> es NULL, esta función devuelve NULL.\r\n    Si se proporciona <code>digits</code>, <code>number</code> se redondea al número especificado de dígitos decimales.\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "Redondear hacia arriba 1,234 a un entero.",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "Redondear hacia arriba 1,999 a un entero.",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "Redondee 1,234 hacia arriba hasta dos posiciones decimales.",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "Devuelve 1 si el número es positivo, -1 si es negativo y 0 si es cero.",
        "Documentation.LongDescription": "Devuelve 1 si <code>number</code> es un número positivo, -1 si es negativo y 0 si es cero.\r\n    Si <code>number</code> es \"null\", <code>Number.Sign</code> devuelve \"null\".",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Determinar el signo de 182.",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "Determinar el signo de -182.",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "Determinar el signo de 0.",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "Devuelve el seno del número.",
        "Documentation.LongDescription": "Devuelve el seno de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Buscar el seno del ángulo 0.",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "Devuelve el seno hiperbólico del número.",
        "Documentation.LongDescription": "Devuelve el seno hiperbólico de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "Devuelve la raíz cuadrada del número.",
        "Documentation.LongDescription": "Devuelve la raíz cuadrada de <code>number</code>.\r\n    Si <code>number</code> es \"null\", <code>Number.Sqrt</code> devuelve \"null\". Si es un valor negativo, se devuelve <code>Number.NaN</code> (no es un número).",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "Hallar la raíz cuadrada de 625.",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "Hallar la raíz cuadrada de 85.",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "Devuelve la tangente del número.",
        "Documentation.LongDescription": "Devuelve la tangente de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "Hallar la tangente del ángulo 1.",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "Devuelve la tangente hiperbólica del número.",
        "Documentation.LongDescription": "Devuelve la tangente hiperbólica de <code>number</code>.",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "Convierte el número dado en texto.",
        "Documentation.LongDescription": "Convierte el valor numérico <code>number</code> en un valor de texto según el formato especificado por <code>format</code>.<br>\r\n    <br>\r\n    El formato es un valor de texto que indica cómo se debe convertir el número. Para ver más detalles acerca de los valores de formato admitidos, vaya a https://go.microsoft.com/fwlink/?linkid=2241210 y https://go.microsoft.com/fwlink/?linkid=2240884.<br>\r\n    <br>\r\n    Un <code>culture</code> opcional también se puede proporcionar (por ejemplo, \"es-ES\") para controlar el comportamiento cultural de <code>format</code>.",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Convierte un número en texto sin especificar un formato.",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "Convierte un número en formato exponencial.",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "Convierte un número en formato de porcentaje con una sola posición decimal.",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "Devuelve una tabla de fuentes OData proporcionadas por un servicio OData.",
        "Documentation.LongDescription": "Devuelve una tabla de fuentes OData ofrecidas por un servicio OData a partir de un URI <code>serviceUri</code>, encabezados <code>headers</code>. Se puede especificar un valor booleano que especifica si se deben usar conexiones simultáneas o un parámetro de registro opcional, <code>options</code>, para controlar las siguientes opciones:\r\n    <ul>\r\n    <li><code>Query</code>: agregue parámetros de consulta mediante programación a la dirección URL sin tener que preocuparse por los caracteres de escape. </li>\r\n    <li> <code>Headers</code> : si se especifica este valor como registro, se proporcionarán más encabezados a una solicitud HTTP.</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: si se especifica este valor como una lista, se excluirán las claves de encabezado HTTP del cálculo para almacenar datos en la caché.</li>\r\n    <li> <code>ApiKeyName</code> : si el sitio de destino tiene una noción de una clave de API, este parámetro se puede usar para especificar el nombre (no el valor) del parámetro de la clave que se debe usar en la dirección URL. El valor real de la clave se proporciona en las credenciales.</li>\r\n    <li> <code>Timeout</code> : Si se especifica este valor como duración, se cambiará el tiempo de espera de una solicitud HTTP. El valor predeterminado es 600 segundos.</li>\r\n    <li> <code>EnableBatch</code> : valor lógico (true/false) que establece si se permite la generación de una solicitud de $batch de OData si se supera MaxUriLength (el valor predeterminado es false).</li>\r\n    <li> <code>MaxUriLength</code> : número que indica la longitud máxima de un URI permitido enviado a un servicio OData. Si se supera y EnableBatch es true, se realizará la solicitud a un punto de conexión $batch de OData; de lo contrario, se producirá un error (el valor predeterminado es 2048).</li>\r\n    <li> <code>Concurrent</code> : un valor lógico (true/false) cuando se establece en true, las solicitudes al servicio se realizarán de manera simultánea. Cuando se establece en false, las solicitudes se realizarán de manera secuencial. Si no se especifica, el valor se determinará mediante la anotación AsynchronousRequestsSupported del servicio. Si el servicio no especifica si se admite AsynchronousRequestsSupported, las solicitudes se realizarán de manera secuencial.</li>\r\n    <li> <code>ODataVersion</code> : número (3 o 4) que especifica la versión del protocolo OData que se usará para este servicio OData. Si no se especifica, se solicitarán todas las versiones admitidas. La versión del servicio se determinará por el encabezado OData-Version devuelto por el servicio.</li>\r\n    <li> <code>FunctionOverloads</code> : un valor lógico (true/false) cuando se establece en true, las sobrecargas de importación de funciones se mostrarán en el navegador como entradas independientes, cuando se establezca en false, las sobrecargas de importación de funciones se mostrarán como una función de unión en el navegador. Valor predeterminado para V3: false. Valor predeterminado para V4: true.</li>\r\n    <li> <code>MoreColumns</code> : un valor lógico (true/false) cuando se establece en true, agrega una columna \"Más columnas\" a cada fuente de entidad que contiene tipos abiertos y tipos polimórficos. Esto contendrá los campos no declarados en el tipo base. Cuando es false, este campo no está presente. El valor predeterminado es false.</li>\r\n    <li> <code>IncludeAnnotations</code> : lista separada por comas de nombres de patrones o nombres calificados de términos de espacios de nombres que se incluirán con \"*\" como carácter comodín. De forma predeterminada, no se incluye ninguna de las anotaciones. </li>\r\n    <li> <code>IncludeMetadataAnnotations</code> : lista separada por comas de nombres de patrones o nombres calificados de términos de espacios de nombres que se incluirán en las solicitudes de documentos de metadatos, con \"*\" como carácter comodín. De forma predeterminada, incluye las mismas anotaciones que IncludeAnnotations.</li>\r\n    <li> <code>OmitValues</code> : Permite al servicio OData evitar escribir determinados valores en las respuestas. Si el servicio lo reconoce, inferiremos esos valores de los campos omitidos. Las opciones incluyen:\r\n      <ul>\r\n        <li><code>ODataOmitValues.Nulls</code> : permite que el servicio OData omita valores nulos.</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>implementation</code> : especifica la implementación del conector OData que se va a usar. Los valores válidos son \"2.0\" o nulo..</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Conéctese al servicio OData de TripPin.",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "Devuelve el resultado de intentar inferir las capacidades de SQL para un controlador ODBC.",
        "Documentation.LongDescription": "Devuelve el resultado de intentar inferir las capacidades de SQL con la cadena de conexión <code>connectionString</code> mediante ODBC. <code>connectionString</code> puede ser un texto o un registro de pares de valores de propiedad. Los valores de propiedad pueden ser de texto o número.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Permite devolver las funcionalidades de SQL inferidas para una cadena de conexión.",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "Devuelve el contenido del documento de Parquet como una tabla.",
        "Documentation.LongDescription": "Devuelve el contenido del documento Parquet como una tabla. Las opciones incluyen: \n    <ul>\n    <li> <code>TypeMapping</code>: valor de texto que controla la asignación de tipos predeterminada al leer y escribir archivos. El valor predeterminado es null e intenta conservar la mayor fidelidad posible al tipo original. El valor de \"Sql\" producirá resultados más compatibles con SQL Server.</li>\n    </ul>",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "Devuelve un valor porcentual a partir de un valor determinado.",
        "Documentation.LongDescription": "Devuelve un valor <code>percentage</code> a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Percentage.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>text</code> con un símbolo de porcentaje final, se devolverá el número decimal convertido. En caso contrario, se convertirá en un valor <code>number</code> con <code>Number.From</code>. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtenga el valor <code>porcentual</code> de <code>\"12,3 %\"</code>.",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "Muestra un registro de tramas de datos del archivo RData.",
        "Documentation.LongDescription": "Muestra un registro de tramas de datos del archivo RData.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "Combina los registros en la lista dada.",
        "Documentation.LongDescription": "Combina los registros en la <code>records</code> dada. Si <code>records</code> contiene valores que no sean registros, se devuelve un error.",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Crea un registro combinado a partir de los registros.",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "Devuelve el número de campos del registro.",
        "Documentation.LongDescription": "Devuelve el número de campos del registro <code>record</code>.",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "Hallar el número de campos del registro.",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "Devuelve los nombres de los campos.",
        "Documentation.LongDescription": "Devuelve los nombres de los campos del registro <code>record</code> como texto.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Hallar los nombres de los campos del registro.",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "Devuelve una lista de valores de campo.",
        "Documentation.LongDescription": "Devuelve una lista de valores de campo del registro <code>record</code>.",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "Hallar los valores de campos en el registro.",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "Crea un registro a partir de una tabla con el formato {[Name = name, Value = value]}.",
        "Documentation.LongDescription": "Devuelve un registro a partir de una tabla de registros <code>table</code> que contienen nombres de campo y nombres de valor <code>{[Name = name, Value = value]}</code>. Si los nombres de campo no son únicos, se inicia una excepción.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Crear un registro a partir de la tabla del formulario Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]}).",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "Devuelve una lista de valores que contiene los valores de campo del registro de entrada.",
        "Documentation.LongDescription": "Devuelve una lista de valores que contiene los valores de campo de la entrada <code>record</code>.",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "Extraer los valores de campo de un registro.",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "Devuelve un árbol de sintaxis abstracta (AST) que representa el acceso a una columna dentro de una expresión de fila.",
        "Documentation.LongDescription": "Devuelve un árbol de sintaxis abstracta (AST) que representa el acceso a la columna <code>columnName</code> de la fila dentro de una expresión de fila.",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Crea un AST que representa el acceso a la columna \"CustomerName\".",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "Devuelve el árbol de sintaxis abstracta (AST) para el cuerpo de una función.",
        "Documentation.LongDescription": "<p>Devuelve el árbol de sintaxis abstracta (AST) del cuerpo de <code>function</code>, normalizado en una <i>expresión de fila</i>:\r\n<ul>\r\n  <li>La función debe ser una expresión lambda de un argumento.</li>\r\n  <li>Todas las referencias al parámetro de la función se reemplazan por <code>RowExpression.Row</code>.</li>\r\n  <li>Todas las referencias a las columnas se reemplazan por <code>RowExpression.Column(<i>columnName</i>)</code>.</li>\r\n  <li>El AST se simplificará para que contenga solo los nodos de los tipos:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>Se genera un error si no se puede devolver el AST de una expresión de fila para el cuerpo de <code>function</code>.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "Devuelve el AST para el cuerpo de la función <code>each [CustomerID] = \"ALFKI\"</code>",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "Crea un Single a partir del valor proporcionado.",
        "Documentation.LongDescription": "Devuelve un valor <code>number</code> Single a partir del valor <code>value</code> dado. Si <code>value</code> es <code>null</code>, <code>Single.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>number</code> en el rango de Single, se devuelve <code>value</code>; en cualquier otro caso, se devuelve un error. Si <code>value</code> es de cualquier otro tipo, se convertirá en un valor <code>number</code> con <code>Number.FromText</code>. También se puede proporcionar un parámetro <code>culture</code> (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "Obtener el valor <code>number</code> Single de <code>\"1.5\"</code>.",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "Devuelve una tabla de datos de un punto de conexión de índice de Smartsheet.",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "Realiza una llamada a la API de REST de Smartsheet 2.0 en el punto de conexión especificado y transforma el elemento de datos devuelto en una tabla.",
        "Documentation.Examples": [
          {
            "Description": "Extrae una tabla de información de usuarios de la API de Smartsheet",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "Una tabla con información de los usuarios tal como la devuelve la API de Smartsheet"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto en cualquiera de los delimitadores especificados.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto en cualquiera de los delimitadores especificados.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada por coma o punto y coma, omitiendo las comillas y los delimitadores entre comillas y empezando desde el principio de la entrada.",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "Divida la entrada por coma o punto y coma, omitiendo las comillas y los delimitadores entre comillas y empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto según el delimitador especificado.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto según el delimitador especificado.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada por comas, omitiendo las comas entre comillas.",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto en cada delimitador especificado en secuencia.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto en cada delimitador especificado en secuencia.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada por coma y, a continuación, punto y coma, empezando desde el principio de la entrada.",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "Divida la entrada con coma y, a continuación, punto y coma, tratando las comillas como cualquier otro carácter y empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto de cada longitud especificada.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto de cada longitud especificada.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada en los dos primeros caracteres seguidos de los tres siguientes, empezando desde el principio de la entrada.",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "Divida la entrada en los tres primeros caracteres seguidos de los dos siguientes, empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto de cada posición especificada.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto de cada posición especificada.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada en las posiciones especificadas, empezando desde el principio de la entrada.",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "Divida la entrada en las posiciones especificadas, empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto según los desplazamientos y longitudes especificados.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto según los desplazamientos y longitudes especificados. Una longitud nula indica que se deben incluir todas las entradas restantes.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada por los pares de posición y longitud especificados, empezando desde el principio de la entrada. Tenga en cuenta que los intervalos de este ejemplo se superponen.",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "Divida la entrada por los pares de posición y longitud especificados, empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "Dividir la entrada en un código postal de longitud fija seguido de un nombre de ciudad de longitud variable.",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "Devuelve una función que divide el texto en una lista de texto repetidamente después de la longitud especificada.",
        "Documentation.LongDescription": "Devuelve una función que divide el texto en una lista de texto repetidamente después de la longitud especificada.",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "Divida la entrada repetidamente en fragmentos de tres caracteres, empezando desde el principio de la entrada.",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "Divida la entrada repetidamente en fragmentos de tres caracteres, empezando desde el final de la entrada.",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "Devuelve el número aproximado de filas de la tabla.",
        "Documentation.LongDescription": "Devuelve el número aproximado de filas del <code>table</code>, o un error si el origen de datos no admite la aproximación.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Calcula el número de combinaciones distintas de ciudad y estado en una tabla grande, que se puede usar como estimación de cardinalidad para las columnas. Las estimaciones de cardinalidad son lo suficientemente importantes como para que varios orígenes de datos (como SQL Server) admitan esta aproximación concreta, a menudo usando un algoritmo llamado HyperLogLog.",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "Devuelve el número de columnas de la tabla.",
        "Documentation.LongDescription": "Devuelve el número de columnas de la tabla <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de columnas de la tabla.",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "Devuelve los nombres de columna como una lista.",
        "Documentation.LongDescription": "Devuelve los nombres de columna de la tabla <code>table</code> como una lista de texto.",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar los nombres de columna de la tabla.",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "Devuelve la primera fila o un valor predeterminado especificado.",
        "Documentation.LongDescription": "Devuelve la primera fila de <code>table</code> o un valor predeterminado opcional, <code>default</code>, si la tabla está vacía.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar la primera fila de la tabla.",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "Buscar la primera fila de la tabla <code>({})</code> o devolver [a = 0, b = 0] si está vacía.",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "Devuelve la primera fila de la tabla o un valor predeterminado especificado.",
        "Documentation.LongDescription": "Devuelve la primera columna de la primera fila de la tabla <code>table</code> o un valor predeterminado especificado.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "Indica si la tabla contiene solo filas distintas (sin duplicados).",
        "Documentation.LongDescription": "Indica si la <code>table</code> contiene solo filas distintas (sin duplicados). Devuelve <code>true</code> si las filas son distintas, <code>false</code> en caso contrario.\r\n    Un parámetro opcional, <code>comparisonCriteria</code>, especifica en qué columnas de la tabla se comprueba si hay duplicación. Si no se especifica <code>comparisonCriteria</code>, se comprueban todas las columnas.",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la tabla es distinta.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "Determinar si la tabla es distinta en la columna.",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "Indica si la tabla contiene alguna fila.",
        "Documentation.LongDescription": "Indica si la <code>table</code> contiene alguna fila. Devuelve <code>true</code> si no hay filas (es decir, si la tabla está vacía), <code>false</code> en caso contrario.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Determinar si la tabla está vacía.",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "Determinar si la tabla <code>({})</code> está vacía.",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "Devuelve las claves de la tabla especificada.",
        "Documentation.LongDescription": "Devuelve las claves de la tabla especificada.",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "Obtenga la lista de claves de una tabla.",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "Devuelve la última fila o un valor predeterminado especificado.",
        "Documentation.LongDescription": "Devuelve la última fila de <code>table</code> o un valor predeterminado opcional, <code>default</code>, si la tabla está vacía.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Buscar la última fila de la tabla.",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "Buscar la última fila de la tabla <code>({})</code> o devolver [a = 0, b = 0] si está vacía.",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "Devuelve el número de filas de la tabla.",
        "Documentation.LongDescription": "Devuelve el número de filas de la <code>table</code>.",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de filas de la tabla.",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "Devuelve la única fila de la tabla.",
        "Documentation.LongDescription": "Devuelve la única fila de fila uno <code>table</code>. Si la <code>table</code> tiene más de una fila, se inicia una excepción.",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "Devolver la fila única de la tabla.",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "Crea una lista de listas anidadas de valores de columna a partir de una tabla.",
        "Documentation.LongDescription": "Crea una lista de listas anidadas a partir de la tabla <code>table</code>.  Cada elemento de lista es una lista interna que contiene los valores de columna.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de valores de columna a partir de la tabla.",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "Convierte una tabla en una lista aplicando la función de combinación especificada a cada fila de valores de la tabla.",
        "Documentation.LongDescription": "Convierte una tabla en una lista aplicando la función de combinación especificada a cada fila de valores de la tabla.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Combinar el texto de cada fila con una coma.",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "Convierte una tabla en una lista de registros.",
        "Documentation.LongDescription": "Convierte una tabla, <code>table</code>, en una lista de registros.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Convertir la tabla en una lista de registros.",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "Crea una lista de listas anidadas de valores de fila a partir de una tabla.",
        "Documentation.LongDescription": "Crea una lista de listas anidadas a partir de la tabla <code>table</code>.  Cada elemento de lista es una lista interna que contiene los valores de fila.",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de valores de fila a partir de la tabla.",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "Crea un registro de error modificado que no desencadenará una reserva cuando lo inicie un controlador definido en una vista (mediante Table.View).",
        "Documentation.LongDescription": "Crea un registro de error modificado desde <code>errorRecord</code> que no desencadenará una reserva cuando lo inicie un controlador definido en una vista (mediante Table.View).",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "Crea una función que un controlador definido en una visualización (mediante Table.View) puede interceptar.",
        "Documentation.LongDescription": "<p>Crea una función de vista basada en <code>function</code> que se puede controlar en una vista creada por <code>Table.View</code>.</p>\r\n<p>El controlador <code>OnInvoke</code> de <code>Table.View</code> se puede utilizar para definir un controlador para la función de vista.</p>\r\n<p>Al igual que con los controladores para operaciones integradas, si no se especifica ningún controlador <code>OnInvoke</code>, o si no maneja la función de vista, o si el controlador genera un error <code>function</code> se aplica sobre la vista.</p>\r\n<p>Consulte la documentación del conector personalizado de Power Query publicada para obtener una descripción más completa de <code>Table.View</code> y funciones de vista personalizadas.</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "Devuelve el valor de texto con todos los caracteres de control quitados.",
        "Documentation.LongDescription": "Devuelve un valor de texto con todos los caracteres de control de <code>text</code> quitados.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Permite quitar los saltos de línea y otros caracteres de control de un valor de texto.",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "Concatena una lista de valores de texto en un valor de texto.",
        "Documentation.LongDescription": "Devuelve el resultado de combinar la lista de valores de texto, <code>texts</code>, en un único valor de texto. Se omiten los valores <code>null</code> presentes en <code>texts</code>.\r\n    Se puede especificar <code>separator</code> opcional usado en el texto combinado final.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Combinar los valores de texto \"Seattle\" y \"WA\".",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "Combine los valores de texto \"Seattle\" y \"WA\" separados por una coma y un espacio.",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "Combine los valores \"Seattle\", <code>null</code> y \"WA\" separados por una coma y un espacio. (Tenga en cuenta que se ignora <code>null</code>.)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "Crea un valor de texto a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve la representación de texto de <code>value</code>. <code>value</code> puede ser un valor <code>number</code>, <code>date</code>, <code>time</code>, <code>datetime</code>, <code>datetimezone</code>, <code>logical</code>, <code>duration</code> o <code>binary</code>.\r\n    Si el valor dado es \"null\", <code>Text.From</code> devuelve \"null\". También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Crear un valor de texto a partir del número 3.",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "Descodifica datos de un formato binario en texto.",
        "Documentation.LongDescription": "Descodifica los datos <code>binary</code>, de un valor binario en un valor de texto, usando el tipo <code>encoding</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "Deduce el tipo de número granular (Int64.Type, Double.Type, etc.) de un número codificado en texto.",
        "Documentation.LongDescription": "Deduce el tipo de número granular (Int64.Type, Double.Type, etc.) de <code>text</code>. Se produce un error si <code>text</code> no es un número. También se puede proporciona un <code>culture</code>opcional (por ejemplo, \"en-US\").",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "Devuelve el número de caracteres.",
        "Documentation.LongDescription": "Devuelve el número de caracteres del texto <code>text</code>.",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "Buscar cuántos caracteres hay en el texto \"Hola mundo\".",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "Convierte todos los caracteres a minúsculas.",
        "Documentation.LongDescription": "Devuelve el resultado de convertir todos los caracteres de <code>text</code> en minúsculas. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtener la versión en minúsculas de \"AbCd\".",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "Pone en mayúsculas la primera letra de cada palabra.",
        "Documentation.LongDescription": "Devuelve el resultado de poner en mayúsculas solo la primera letra de cada palabra en el valor de texto <code>text</code>. El resto de las letras se devuelven en minúsculas. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Usar <code>Text.Proper</code> en una frase simple.",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "Se invierte el valor <code>text</code> proporcionado.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Invierta el texto \"123\".",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "Codifica el texto en un formato binario.",
        "Documentation.LongDescription": "Codifica el valor del texto indicado, <code>text</code>, en un valor binario usando el <code>encoding</code> especificado.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "Devuelve una lista de valores de carácter a partir del valor de texto dado.",
        "Documentation.LongDescription": "Devuelve una lista de valores de carácter a partir del valor de texto dado <code>text</code>.",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "Crear una lista de valores de carácter a partir del texto \"Hola mundo.\".",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "Quita todos los espacios en blanco iniciales y finales.",
        "Documentation.LongDescription": "Devuelve el resultado de quitar todos los espacios en blanco iniciales y finales del valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Quitar los espacios en blanco iniciales y finales de \"     a b c d    \".",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "Quita todos los espacios en blanco finales.",
        "Documentation.LongDescription": "Devuelve el resultado de quitar todos los espacios en blanco finales del valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Quitar los espacios en blanco finales de \"     a b c d    \".",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "Quita todos los espacios en blanco iniciales.",
        "Documentation.LongDescription": "Devuelve el resultado de quitar todos los espacios en blanco iniciales del valor de texto <code>text</code>.",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Quitar los espacios en blanco iniciales \"     a b c d    \".",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "Convierte todos los caracteres en mayúsculas.",
        "Documentation.LongDescription": "Devuelve el resultado de convertir todos los caracteres de <code>text</code> en mayúsculas. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "Obtener la versión en mayúsculas de \"aBcD\".",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "Devuelve el final de la hora.",
        "Documentation.LongDescription": "Devuelve el final de la hora representada por <code>dateTime</code>, incluidas las fracciones de segundo. Se conserva la información de zona horaria.\r\n      <ul>\r\n      <li><code>dateTime</code>: un valor <code>time</code>, <code>datetime</code> o <code>datetimezone</code> a partir del cual se calcula el final de la hora.</li>\r\n </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Obtener el final de la hora de 5/14/2011 05:00:00 p.m.",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "Obtener el final de la hora de 5/17/2011 05:00:00 p.m -7:00.",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "Crea una hora a partir del valor dado.",
        "Documentation.LongDescription": "Devuelve un valor <code>time</code> a partir del valor <code>value</code> dado. También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").\r\nSi <code>value</code> es <code>null</code>, <code>Time.From</code> devuelve <code>null</code>. Si <code>value</code> es <code>time</code>, se devuelve <code>value</code>. Los valores de los tipos siguientes se pueden convertir a un valor <code>time</code>:\r\n      <ul>\r\n        <li><code>text</code>: valor <code>time</code> a partir de la representación de texto. Para más información, vea <code>Time.FromText</code>.</li>\r\n        <li><code>datetime</code>: componente de hora de <code>value</code>.</li>\r\n        <li><code>datetimezone</code>: componente de hora del equivalente datetime local de <code>value</code>.</li>\r\n        <li><code>number</code>: valor de <code>time</code> equivalente al número de días fraccionarios expresados por <code>value</code>. Si <code>value</code> es negativo o mayor o igual que 1, se devuelve un error.</li>\r\n      </ul>\r\nSi <code>value</code> es de cualquier otro tipo, se devuelve un error.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>0.7575</code> en un valor <code>time</code>.",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "Convertir <code>#datetime(1899, 12, 30, 06, 45, 12)</code> en un valor <code>time</code>.",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "Crea una hora a partir de formatos de hora locales y universales y personalizados.",
        "Documentation.LongDescription": "Crea un valor <code>time</code> a partir de una representación textual, <code>text</code>. Se puede proporcionar un parámetro opcional de <code>registro</code> <code>options</code> para especificar propiedades adicionales. El <code>registro</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Format</code>: un valor de <code>texto</code> que indica el formato que se va a usar. Para obtener más información, vaya a https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105 para obtener más detalles. Si se omite este campo o se proporciona <code>null</code>, se analizará la hora con el mejor esfuerzo.</li>\r\n   <li><code>Culture</code> : cuando <code>Format</code> no es null, <code>Culture</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"en-US\"</code> <code>\"tt\"</code> es <code>\"AM\" o \"PM\"</code>, mientras que en <code>\"ar-EG\"</code> <code>\"tt\"</code> es <code>\"ص\" o \"م\"</code>. Cuando <code>Format</code> es <code>nulo</code>, <code>Culture</code> controla el formato predeterminado que se va a usar. Cuando <code>Culture</code> es <code>nulo</code> o se omite, se usa <code>Culture.Current</code>.</li>\r\n</ul>\r\nPara admitir flujos de trabajo heredados, <code>options</code> también puede ser un valor de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Format = nulo, Culture = <code>options</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>\"10:12:31am\"</code> en un valor Time.",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "Convertir <code>\"1012\"</code> en un valor de hora.",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "Convertir <code>\"10\"</code> en un valor de hora.",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "Devuelve el componente de hora.",
        "Documentation.LongDescription": "Devuelve el componente de hora del valor <code>time</code>, <code>datetime</code> o <code>datetimezone</code> proporcionado, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Buscar la hora en #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "Devuelve el componente de minutos.",
        "Documentation.LongDescription": "Devuelve el componente de minutos del valor <code>time</code>, <code>datetime</code> o <code>datetimezone</code> proporcionado, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Buscar los minutos en #datetime(2011, 12, 31, 9, 15, 36).",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "Devuelve el componente de segundos.",
        "Documentation.LongDescription": "Devuelve el componente de segundos del valor <code>time</code>, <code>datetime</code> o <code>datetimezone</code> proporcionado, <code>dateTime</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Buscar el valor de segundos en un valor datetime.",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "Devuelve el inicio de la hora.",
        "Documentation.LongDescription": "Devuelve el inicio de la hora representado por <code>dateTime</code>.\r\n    <code>dateTime</code> debe ser un valor <code>time</code>, <code>datetime</code> o <code>datetimezone</code>.",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "Buscar el inicio de la hora del 10 de octubre de 2011, 8:10:32 a.m.",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "Devuelve un registro que contiene los elementos del valor Time.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los elementos del valor Time especificado, <code>time</code>.\r\n <ul>\r\n        <li><code>time</code>: un valor <code>time</code> a partir del cual se calculará el registro de sus partes.</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertir el valor <code>#time(11, 56, 2)</code> en un registro que contenga valores Time.",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "Devuelve una representación de texto del valor de hora.",
        "Documentation.LongDescription": "Devuelve una representación textual de <code>time</code>. Un parámetro opcional <code>record</code>, <code>options</code>, puede ser proporcionado para especificar propiedades adicionales. <code>culture</code> sólo se utiliza para los flujos de trabajo heredados. El <code>record</code> puede contener los siguientes campos:\r\n<ul>\r\n   <li><code>Format</code>: Un valor de <code>texto</code> que indica el formato a utilizar. Para más detalles, consulte https://go.microsoft.com/fwlink/?linkid=2180104 y https://go.microsoft.com/fwlink/?linkid=2180105. Si se omite este campo o se proporciona <code>nulo</code> la fecha será formateada utilizando el valor predeterminado definido por <code>Cultura</code>.</li>\r\n   <li><code>Cultura</code>: Cuando <code>Formato</code> no es nulo, <code>Cultura</code> controla algunos especificadores de formato. Por ejemplo, en <code>\"en-US\"</code> <code>\"tt\"</code> es <code>\"AM\" o \"PM\"</code>.mientras que en <code>\"ar-EG\"</code> <code>\"tt\"</code> es <code>\"ص\" o \"م\"</code>. Cuando <code>Format</code> es <code>nulo</code>, <code>Culture</code> controla el formato por defecto a utilizar. Cuando <code>Cultura</code> es <code>nulo</code> o se omite, se utiliza <code>Culture.Current</code>.</li>\r\n</ul>\r\nPara soportar los flujos de trabajo heredados, <code>options</code> y <code>culture</code> también pueden ser valores de texto. Esto tiene el mismo comportamiento que si <code>options</code><code> = [Formato = <code>options</code>, Cultura = <code>culture</code>]</code>.",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "Convertir <code>#time(01, 30, 25)</code> en un valor <code>text</code>. <i>La salida del resultado puede variar en función de la referencia cultural actual. </i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "Convertir con un formato personalizado y la referencia cultural alemana.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "Convertir con formato de hora estándar.",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "Devuelve una versión cerrada del tipo de registro proporcionado (o el mismo tipo, si ya está cerrado).",
        "Documentation.LongDescription": "Devuelve una versión cerrada del <code>record</code> <code>type</code> proporcionado (o el mismo tipo, si ya está cerrado).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Cree una versión cerrada de <code>type [ A = number,…]</code>.",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "Muestra las facetas de un tipo.",
        "Documentation.LongDescription": "Muestra un registro que contiene las facetas de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "Devuelve un registro con valores de campo establecidos en el nombre de los parámetros de un tipo de función, y sus valores establecidos en sus tipos correspondientes.",
        "Documentation.LongDescription": "Devuelve un registro con los valores de campo establecidos en el nombre de los parámetros de <code>type</code>, y sus valores establecidos en sus tipos correspondientes.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buscar los tipos de los parámetros para la función <code>(x as number, y as text)</code>.",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "Devuelve un número que indica el número mínimo de parámetros necesarios para invocar el tipo de función.",
        "Documentation.LongDescription": "Devuelve un número que indica el número mínimo de parámetros necesarios para invocar la entrada <code>type</code> de función.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buscar el número de parámetros necesarios para la función <code>(x as number, optional y as text)</code>.",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "Devuelve un tipo devuelto por un tipo de función.",
        "Documentation.LongDescription": "Devuelve un tipo devuelto por una función <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buscar el tipo devuelto de <code>() as any)</code>.",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "Devuelve true si un tipo es de un tipo que acepta valores NULL; de lo contrario, false.",
        "Documentation.LongDescription": "Devuelve <code>true</code> si un tipo es de tipo <code>nullable</code>; de lo contrario, <code>false</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinar si <code>number</code> acepta valores NULL.",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "Determinar si <code>type nullable number</code> acepta valores NULL.",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "Devuelve si un tipo de registro está abierto.",
        "Documentation.LongDescription": "Devuelve un <code>logical</code> que indica si un registro <code>type</code> está abierto.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Determinar si el registro <code>type [ A = number, ...]</code> está abierto.",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "Devuelve un tipo de elemento de un tipo de lista.",
        "Documentation.LongDescription": "Devuelve un tipo de elemento de una lista <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buscar un tipo de elemento de la lista <code>{number}</code>.",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "Devuelve el tipo que no acepta valores NULL de un tipo.",
        "Documentation.LongDescription": "Devuelve el tipo no <code>nullable</code> de <code>type</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devuelve el tipo que no acepta valores NULL de <code>type nullable number</code>.",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "Devuelve una versión abierta del tipo de registro proporcionado (o el mismo tipo, si ya está abierto).",
        "Documentation.LongDescription": "Devuelve una versión abierta del <code>record</code> <code>type</code> proporcionado (o el mismo tipo, si ya está abierto).",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Crear una versión abierta de <code>type [ A = number]</code>.",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "Devuelve un registro que describe los campos de un tipo de registro, y cada campo del tipo de registro devuelto tiene un nombre y un valor correspondientes.",
        "Documentation.LongDescription": "Devuelve un registro que describe los campos de un registro <code>type</code>. Cada campo del tipo de registro tiene un nombre y un valor correspondientes, en forma de un registro <code>[ Type = type, Optional = logical ]</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Buscar el nombre y el valor del registro <code>[ A = number, optional B = any]</code>.",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "Devuelve la lista posiblemente vacía de claves para el tipo de tabla dado.",
        "Documentation.LongDescription": "Devuelve la lista posiblemente vacía de claves para el tipo de tabla proporcionado.<br>\r\n    <br>\r\n    Cada clave se define mediante un registro de la siguiente forma:\r\n    <ul>\r\n      <li>\r\n        <code>Columnas</code>: una lista de los nombres de columna que definen la clave\r\n      </li>\r\n      <li>\r\n        <code>Principal</code>: <code>true</code> si la clave es la clave principal de la tabla; de lo contrario, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devuelve la información de clave de un tipo de tabla.",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "Devuelve el tipo de fila del tipo de tabla.",
        "Documentation.LongDescription": "Devuelve el tipo de fila del tipo de tabla especificado. El resultado siempre será un tipo de registro.",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "Devuelve la información de tipo de fila de una tabla simple.",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "Devuelve la unión de una lista de tipos.",
        "Documentation.LongDescription": "Devuelve la unión de los tipos en <code>types</code>.",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "Ensamble un registro en una cadena de consulta de URI.",
        "Documentation.LongDescription": "Ensamble el registro <code>query</code> en una cadena de consulta de URI, evitando caracteres según resulte necesario.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique una cadena de consulta que contenga varios caracteres especiales.",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "Codifica caracteres especiales de acuerdo con RFC 3986.",
        "Documentation.LongDescription": "Codifica caracteres especiales en la entrada <code>data</code> de acuerdo con las reglas de RFC 3986.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Codifique los caracteres especiales en \"+money$\".",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "Devuelve las partes del URI absoluto de entrada como un registro.",
        "Documentation.LongDescription": "Devuelve las partes del <code>absoluteUri</code> de entrada como un registro, con valores como el esquema, el host, el puerto, la ruta de acceso, la consulta, el fragmento, el nombre de usuario y una contraseña.",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "Buscar las partes del URI absoluto “www.adventure-works.com”.",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "Descodifica una cadena codificada por porcentaje.",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "Especifique la URL del servicio Analytics de Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "Devuelve el contenido descargado de la dirección URL del servicio Analytics de Azure DevOps como valor binario. Esta función utiliza credenciales diferentes para cada organización."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "Especifique la URL del servicio Analytics de Azure DevOps.",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "Devuelve el contenido descargado de la dirección URL del servicio Analytics de Azure DevOps como valor binario. Esta función utiliza credenciales globales para todas las organizaciones con acceso."
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "Expresa los planes de consultas alternativos.",
        "Documentation.LongDescription": "Expresa los planes de consultas alternativos en una expresión de plan de consulta obtenida a través de Value.Expression(Value.Optimize(...)). No se ha diseñado para otros usos.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "Devuelve un árbol de sintaxis abstracta (AST) que representa la expresión del valor.",
        "Documentation.LongDescription": "Devuelve un árbol de sintaxis abstracta (AST) que representa la expresión del valor",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "Crea un valor con establecimiento inflexible de tipos a partir de una representación de texto.",
        "Documentation.LongDescription": "Permite descodificar un valor a partir de una representación de texto, <code>text</code>, y lo interpreta como un valor con un tipo apropiado.\r\n    <code>Value.FromText</code> toma un valor de texto y devuelve un número, un valor lógico, un valor NULL, un valor de fecha y hora, un valor de duración o un valor de texto. El valor de texto vacío se interpreta como un valor NULL.\r\n    También se puede proporcionar un parámetro <code>culture</code> opcional (por ejemplo, \"es-ES\").",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "Devuelve un registro que contiene los metadatos de entrada.",
        "Documentation.LongDescription": "Devuelve un registro que contiene los metadatos de entrada.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "Indica Value.Expression para devolver la expresión optimizada para un valor.",
        "Documentation.LongDescription": "Si se usa en Value.Expression y <code>value</code> representa una consulta que se puede optimizar, esta función indica que debe devolverse la expresión optimizada. De lo contrario, se pasará <code>value</code> sin ningún efecto.",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "Elimina la entrada de metadatos.",
        "Documentation.LongDescription": "Elimina la entrada de metadatos.",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "Devuelve el tipo del valor dado.",
        "Documentation.LongDescription": "Devuelve el tipo del valor dado.",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "Esta función solo está diseñada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está diseñada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "Esta función solo está pensada para uso interno.",
        "Documentation.LongDescription": "Esta función solo está pensada para uso interno.",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "Devuelve el código HTML de la dirección URL especificada, tal y como lo ve un explorador web.",
        "Documentation.LongDescription": "Devuelve el HTML del <code>url</code> especificado, tal y como lo ve un navegador web. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n     <ul>\r\n        <li><code>ApiKeyName</code>: si el sitio de destino tiene noción de una clave de API, este parámetro puede utilizarse para especificar el nombre (no el valor) del parámetro clave que debe usarse en la URL. El valor real de la clave se proporciona en la credencial.</li>\r\n        <li><code>WaitFor</code>: especifica una condición a la que esperar antes de descargar el HTML, además de esperar a que se cargue la página (lo que siempre se hace). Puede ser un registro que contenga campos de Tiempo de espera y/o Selector. Si solo se especifica un Tiempo de espera, la función esperará el tiempo especificado antes de descargar el HTML. Si se especifican tanto un Selector como un Tiempo de espera, y el Tiempo de espera transcurre antes de que el Selector exista en la página, se producirá un error. Si se especifica un Selector sin Tiempo de espera, se aplicará un Tiempo de espera predeterminado de 30 segundos.</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "Acceso a los datos",
        "Documentation.Examples": [
          {
            "Description": "Devuelve el código HTML de https://microsoft.com.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Permite devolver el código HTML de https://microsoft.com después de esperar a que aparezca un selector CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Devuelve el código HTML de https://microsoft.com después de esperar diez segundos.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "Permite devolver el código HTML de https://microsoft.com después de esperar un máximo de diez segundos a que aparezca un selector CSS.",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "Devuelve el contenido descargado de la dirección URL como un valor binario.",
        "Documentation.LongDescription": "Devuelve el contenido descargado de <code>url</code> como binario. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>Query</code> : Agregue mediante programaci&#243;n par&#225;metros de consulta a la direcci&#243;n URL sin tener que preocuparse por los escapes.</li>\r\n<li><code>ApiKeyName</code> : Si el sitio de destino tiene una noci&#243;n de una clave de API, este par&#225;metro se puede usar para especificar el nombre (no el valor) del par&#225;metro de la clave que se debe usar en la direcci&#243;n URL. El valor de la clave real se proporciona en la credencial.</li>\r\n<li><code>Headers</code> : Si este valor se especifica como un registro, se proporcionar&#225;n encabezados adicionales a una solicitud HTTP.</li>\r\n<li><code>Timeout</code> : Si este valor se especifica como una duraci&#243;n, se cambiar&#225; el tiempo de espera de una solicitud HTTP. El valor predeterminado es de 100&#160;segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Si este valor se especifica como una lista, estas claves del encabezado HTTP se excluir&#225;n del c&#225;lculo para almacenar los datos en cach&#233;.</li>\r\n<li><code>IsRetry</code> : Si este valor l&#243;gico se especifica como &quot;true&quot;, se omitir&#225; cualquier respuesta existente en la memoria cach&#233; al capturar datos.</li>\r\n<li><code>ManualStatusHandling</code> : Si este valor se especifica como una lista, se evitar&#225; cualquier control integrado para las solicitudes HTTP cuya respuesta tenga uno de estos c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Si este valor se especifica como texto, se anexar&#225; a la direcci&#243;n URL base antes de realizar la solicitud.</li>\r\n<li><code>Content</code> : Si se especifica este valor, se cambiar&#225; la solicitud web de GET a POST, con el valor de la opci&#243;n como el contenido de POST.</li>\r\n</ul>\r\n\r\n    La solicitud HTTP se realiza como GET (cuando no se especifica ningún contenido) o post (cuando hay contenido). Las solicitudes POST solo se pueden realizar de forma anónima.\r\n    <br>\r\n    Los encabezados de la respuesta HTTP están disponibles como metadatos en el resultado binario. Fuera de un contexto de conector de datos personalizado, solo está disponible un subconjunto de encabezados de respuesta (por motivos de seguridad).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recuperar el contenido de <code>\"https://bing.com/search?q=Power+Query\"</code> mediante las opciones RelativePath y Query. Estas opciones se pueden usar para consultar de forma dinámica una URL base estática.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "Realizar una PUBLUICACIÓN en una dirección URL, pasar una carga binaria JSON y analizar la respuesta como JSON.",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "Conéctese a una dirección URL segura que acepte una clave de autenticación como parte de su cadena de consulta. En lugar de codificar la clave secreta en M (lo que supondría un riesgo para la seguridad), \r\n    la clave se puede proporcionar de forma segura especificando su nombre (no su valor) en M, eligiendo la autenticación de la API web e introduciendo el valor de la clave como parte de la credencial de la api web.\r\n    Cuando se usa de este modo, el siguiente ejemplo generará una solicitud a <code>\"https://contoso.com/api/customers/get?api_key=\"</code>.",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "Devuelve los encabezados HTTP descargados de la dirección URL como un valor de registro.",
        "Documentation.LongDescription": "Devuelve los encabezados descargados de <code>url</code> como registro. Se puede proporcionar un parámetro de registro opcional, <code>options</code>, para especificar propiedades adicionales. El registro puede contener los siguientes campos:\r\n    <ul>\r\n<li><code>Query</code> : Agregue mediante programaci&#243;n par&#225;metros de consulta a la direcci&#243;n URL sin tener que preocuparse por los escapes.</li>\r\n<li><code>ApiKeyName</code> : Si el sitio de destino tiene una noci&#243;n de una clave de API, este par&#225;metro se puede usar para especificar el nombre (no el valor) del par&#225;metro de la clave que se debe usar en la direcci&#243;n URL. El valor de la clave real se proporciona en la credencial.</li>\r\n<li><code>Headers</code> : Si este valor se especifica como un registro, se proporcionar&#225;n encabezados adicionales a una solicitud HTTP.</li>\r\n<li><code>Timeout</code> : Si este valor se especifica como una duraci&#243;n, se cambiar&#225; el tiempo de espera de una solicitud HTTP. El valor predeterminado es de 100&#160;segundos.</li>\r\n<li><code>ExcludedFromCacheKey</code> : Si este valor se especifica como una lista, estas claves del encabezado HTTP se excluir&#225;n del c&#225;lculo para almacenar los datos en cach&#233;.</li>\r\n<li><code>IsRetry</code> : Si este valor l&#243;gico se especifica como &quot;true&quot;, se omitir&#225; cualquier respuesta existente en la memoria cach&#233; al capturar datos.</li>\r\n<li><code>ManualStatusHandling</code> : Si este valor se especifica como una lista, se evitar&#225; cualquier control integrado para las solicitudes HTTP cuya respuesta tenga uno de estos c&#243;digos de estado.</li>\r\n<li><code>RelativePath</code> : Si este valor se especifica como texto, se anexar&#225; a la direcci&#243;n URL base antes de realizar la solicitud.</li>\r\n</ul>\r\n\r\n    La solicitud HTTP se realiza con el método HEAD. Fuera de un contexto de conector de datos personalizado, solo está disponible un subconjunto de encabezados de respuesta (por motivos de seguridad).\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "Recupere los encabezados HTTP para <code>\"https://bing.com/search?q=Power+Query\"</code> con las opciones RelativePath y Query.",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "Contexto de autorización en el que se evalúa una condición de la entrada de control de acceso (ACE).",
        "Documentation.LongDescription": "Contexto de autorización en el que se evalúa una condición de la entrada de control de acceso (ACE).",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "Tabla de entradas de control de acceso (ACE).",
        "Documentation.LongDescription": "Tabla ordenada de entradas de control de acceso (ACE) que representan reglas de autorización. Cada fila se evalúa en el contexto de autorización actual y en orden, y el elemento encargado de determinar la regla que se aplica es la primera fila para la que la expresión <code>Condition</code> devuelve \"true\". La columna <code>Action</code> corresponde al tipo de acción a la que se aplica la regla, mientras que la columna <code>AccessControlKind</code> determina si conviene permitir o denegar el acceso para la acción.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "Especifica el tipo de control de acceso.",
        "Documentation.LongDescription": "Especifica el tipo de control de acceso.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "El tipo que representa todos los valores.",
        "Documentation.LongDescription": "El tipo que representa todos los valores.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "El tipo que representa todos los valores binarios.",
        "Documentation.LongDescription": "El tipo que representa todos los valores binarios.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "Especifica el tipo de codificación binaria.",
        "Documentation.LongDescription": "Especifica el tipo de codificación binaria.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "Especifica las veces que se espera que el elemento aparezca en el grupo.",
        "Documentation.LongDescription": "Especifica las veces que se espera que el elemento aparezca en el grupo.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "Describe el tipo de almacenamiento en búfer que se va a realizar.",
        "Documentation.LongDescription": "Describe el tipo de almacenamiento en búfer que se va a realizar.",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "El tipo que representa todos los bytes.",
        "Documentation.LongDescription": "El tipo que representa todos los bytes.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "Especifica el orden de los bytes.",
        "Documentation.LongDescription": "Especifica el orden de los bytes.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "El tipo que representa todos los caracteres.",
        "Documentation.LongDescription": "El tipo que representa todos los caracteres.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "Especifica el tipo de compresión.",
        "Documentation.LongDescription": "Especifica el tipo de compresión.",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "Especifica la importancia de las comillas en los documentos CSV.",
        "Documentation.LongDescription": "Especifica la importancia de las comillas en los documentos CSV.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "El tipo que representa el valor de divisa.",
        "Documentation.LongDescription": "El tipo que representa el valor de divisa.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "El tipo que representa todos los valores de fecha.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de fecha.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "El tipo que representa todos los valores de fecha y hora sin una zona horaria asociada.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de fecha y hora sin una zona horaria asociada.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "El tipo que representa todos los valores de fecha y hora relativos con una zona horaria.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de fecha y hora relativos con una zona horaria.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "Especifica un día de la semana.",
        "Documentation.LongDescription": "Especifica un día de la semana.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "El tipo que representa números decimales de punto fijo.",
        "Documentation.LongDescription": "El tipo que representa números decimales de punto fijo.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "El tipo que representa números de punto flotante de doble precisión.",
        "Documentation.LongDescription": "El tipo que representa números de punto flotante de doble precisión.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "El tipo que representa todos los valores de duración.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de duración.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "Especifica la acción esperada para los valores de sobra en una fila que contiene más columnas de las esperadas.",
        "Documentation.LongDescription": "Especifica la acción esperada para los valores de sobra en una fila que contiene más columnas de las esperadas.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "El tipo que representa todas las funciones.",
        "Documentation.LongDescription": "El tipo que representa todas las funciones.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "Especifica el tipo de agrupación.",
        "Documentation.LongDescription": "Se pueden generar varios grupos locales con el mismo valor de clave, pero solo se genera un único grupo global para un valor de clave determinado.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "Tipo que representa un valor GUID.",
        "Documentation.LongDescription": "Tipo que representa un valor GUID.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "Una identidad representa un usuario, grupo, dispositivo u otro elemento identificable.",
        "Documentation.LongDescription": "Una identidad representa un usuario, grupo, dispositivo u otro elemento identificable.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "Define un ámbito en el que se crean y se comparan las identidades.",
        "Documentation.LongDescription": "Define un ámbito en el que se crean y se comparan las identidades.",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "El tipo que representa el entero con signo de 16 bits.",
        "Documentation.LongDescription": "El tipo que representa el entero con signo de 16 bits.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "El tipo que representa un entero con signo de 32 bits.",
        "Documentation.LongDescription": "El tipo que representa un entero con signo de 32 bits.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "El tipo que representa un entero con signo de 64 bits.",
        "Documentation.LongDescription": "El tipo que representa un entero con signo de 64 bits.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "El tipo que representa el entero con signo de 8 bits.",
        "Documentation.LongDescription": "El tipo que representa el entero con signo de 8 bits.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "Especifica el algoritmo de combinación que se usará en la operación de combinación.",
        "Documentation.LongDescription": "Especifica el algoritmo de combinación que se usará en la operación de combinación.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "Especifica el tipo de operación de combinación.",
        "Documentation.LongDescription": "Especifica el tipo de operación de combinación.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "Especifica la tabla izquierda o derecha de una combinación.",
        "Documentation.LongDescription": "Especifica la tabla izquierda o derecha de una combinación.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "Describe el tipo de cláusula de límite admitido por el dialecto SQL que utiliza este origen de datos.",
        "Documentation.LongDescription": "Describe el tipo de cláusula de límite admitido por el dialecto SQL que utiliza este origen de datos.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "El tipo que representa todas las listas.",
        "Documentation.LongDescription": "El tipo que representa todas las listas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "El tipo que representa todos los valores lógicos.",
        "Documentation.LongDescription": "El tipo que representa todos los valores lógicos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "Especifica la acción esperada para los valores que faltan en una fila que contiene menos columnas de las esperadas.",
        "Documentation.LongDescription": "Especifica la acción esperada para los valores que faltan en una fila que contiene menos columnas de las esperadas.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "El tipo que representa NULL.",
        "Documentation.LongDescription": "El tipo que representa NULL.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "El tipo que representa todos los números.",
        "Documentation.LongDescription": "El tipo que representa todos los números.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "Especifica los tipos de valores que un servicio OData puede omitir.",
        "Documentation.LongDescription": "Especifica los tipos de valores que un servicio OData puede omitir.",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "Especifica la repetición de un elemento en una secuencia.",
        "Documentation.LongDescription": "Especifica la repetición de un elemento en una secuencia.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "Especifica la dirección de la ordenación.",
        "Documentation.LongDescription": "Especifica la dirección de la ordenación.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "Tipo que representa una contraseña de texto.",
        "Documentation.LongDescription": "Tipo que representa una contraseña de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "Tipo que representa un valor porcentual.",
        "Documentation.LongDescription": "Tipo que representa un valor porcentual.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "Especifica el tipo de modo de percentil.",
        "Documentation.LongDescription": "Especifica el tipo de modo de percentil.",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "Especifica la previsión de la comparación.",
        "Documentation.LongDescription": "Especifica la previsión de la comparación.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "Especifica el estilo de comillas.",
        "Documentation.LongDescription": "Especifica el estilo de comillas.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "Especifica el tipo de clasificación.",
        "Documentation.LongDescription": "Especifica el tipo de clasificación.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "El tipo que representa todos los registros.",
        "Documentation.LongDescription": "El tipo que representa todos los registros.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "Indica si la indexación debe realizarse desde el inicio o el final de la entrada.",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "Especifica la dirección de redondeo cuando exista la misma distancia respecto a los números posibles a los que se puede redondear.",
        "Documentation.LongDescription": "Especifica la dirección de redondeo cuando exista la misma distancia respecto a los números posibles a los que se puede redondear.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "Opciones válidas para la opción del modo de ejecución de SAP Business Warehouse.",
        "Documentation.LongDescription": "Opciones válidas para la opción del modo de ejecución de SAP Business Warehouse.",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "Opciones de distribución válidas para SAP HANA.",
        "Documentation.LongDescription": "Opciones de distribución válidas para SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "Un operador de intervalo para los parámetros de entrada de intervalo de SAP HANA.",
        "Documentation.LongDescription": "Un operador de intervalo para los parámetros de entrada de intervalo de SAP HANA.",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "El tipo que representa números de punto flotante de precisión simple.",
        "Documentation.LongDescription": "El tipo que representa números de punto flotante de precisión simple.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "El protocolo que debe usarse al conectar con una instancia de Spark.",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "El tipo que representa todas las tablas.",
        "Documentation.LongDescription": "El tipo que representa todas las tablas.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "El tipo que representa todos los valores de texto.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "Especifica el tipo de codificación del texto.",
        "Documentation.LongDescription": "Especifica el tipo de codificación del texto.",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "El tipo que representa todos los valores de hora.",
        "Documentation.LongDescription": "El tipo que representa todos los valores de hora.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "Especifica el nivel de seguimiento.",
        "Documentation.LongDescription": "Especifica el nivel de seguimiento.",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "El tipo que representa todos los tipos.",
        "Documentation.LongDescription": "El tipo que representa todos los tipos.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "El tipo que representa un URI de texto.",
        "Documentation.LongDescription": "El tipo que representa un URI de texto.",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "Especifica un método HTTP.",
        "Documentation.LongDescription": "Especifica un método HTTP.",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
