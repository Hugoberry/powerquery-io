{
  "functions": [
    {
      "Name": "Access.Database",
      "Documentation": {
        "Documentation.Name": "Access.Database",
        "Documentation.Description": "返回 Access 数据库的结构表示形式。",
        "Documentation.LongDescription": "返回 Access 数据库 <code>database</code> 的结构表示形式。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 false)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...]。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "database": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AmazonAthena.Databases",
      "Documentation": {
        "Documentation.Name": "Amazon Athena",
        "Documentation.LongDescription": "This function sends basic authentication info"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "role": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AnalysisServices.Databases",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Databases",
        "Documentation.Description": "将 Analysis Services 数据库返回到特定的主机上。",
        "Documentation.LongDescription": "返回 Analysis Services 实例 <code>server</code> 上的数据库。可提供可选的记录参数 <code>options</code> 来指定附加属性。该记录可以包含以下字段:\r\n    <ul>\r\n<li><code>TypedMeasureColumns</code> : 一个逻辑值，指示在多维模型或表格模型中指定的类型是否用作所添加的度量值列的类型。设置为 false 时，类型 &quot;number&quot; 将用于所有度量值列。此选项的默认值为 false。</li>\r\n<li><code>Culture</code> : 指定数据区域性的区域性名称。这对应于“区域设置标识符”连接字符串属性。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>SubQueries</code> : 一个数字(0、1 或 2)，设置连接字符串中 &quot;SubQueries&quot; 属性的值。该数字控制嵌套 select 或子多维数据集上计算成员的行为。(默认值为 2)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Asana.Tables",
      "Documentation": {
        "Documentation.Name": "Asana",
        "Documentation.LongDescription": "Returns a table with Asana task data"
      },
      "ReturnType": "table",
      "Parameters": {
        "link": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Contents",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type",
        "viewAtDate": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AssembleViews.Feed",
      "Documentation": {
        "Documentation.Name": "Assemble Views",
        "Documentation.LongDescription": "Access views created within Assemble Insight"
      },
      "ReturnType": "table",
      "Parameters": {
        "resourceUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AtScale.Cubes",
      "Documentation": {
        "Documentation.Name": "AtScale 多维数据集",
        "Documentation.Caption": "AtScale",
        "Documentation.Description": "从 AtScale 中导入/DirectQuery 多维数据集数据。",
        "Documentation.LongDescription": "\r\n从服务器 <code>server</code> 上的 AtScale 返回多维数据集数据。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n<ul>\r\n        <li><code>TypedMeasureColumns</code>: 指示在多维模型或表格模型中指定的类型是否用于添加的度量值列类型的逻辑值。设置为 false 时，类型 \"number\" 将用于所有度量值列。此选项的默认值为 false。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段(以秒为单位)，控制在取消服务器端查询前允许其运行的时间。默认值与驱动程序相关。</li>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段(以秒为单位)，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n\r\n</ul>\r\n记录参数指定为 [option1 = value1, option2 = value2...]。",
        "Documentation.Examples": {
          "Description": "列出 AtScale 多维数据集中的多维数据集数据。",
          "Code": "AtScale.Cubes(\"https://contoso.atscale.com:10502/xmla/...\")"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Contents",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AutodeskConstructionCloud.Feed",
      "Documentation": {
        "Documentation.Name": "Autodesk Construction Cloud",
        "Documentation.LongDescription": null
      },
      "ReturnType": "table",
      "Parameters": {
        "region": "Text.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDataExplorer.Contents",
      "Documentation": {
        "Documentation.Description": "从 Azure 数据资源管理器导入数据(Kusto)",
        "Documentation.DisplayName": "Azure 数据资源管理器(Kusto)",
        "Documentation.Caption": "AzureDataExplorer.Contents",
        "Documentation.Name": "Azure 数据资源管理器(Kusto)",
        "Documentation.LongDescription": "从 Azure 数据资源管理器(Kusto)实例导入数据",
        "Documentation.Examples": [
          {
            "Description": "返回 Storm Events 信息的表",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "具有 \"help\" 群集中 \"Samples\" 数据库的 Storm Events 的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.AccountContents",
      "Documentation": {
        "Documentation.Description": "输入 Azure DevOps Analytics Service 的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "返回通过 Azure DevOps Analytics Service URL 下载为二进制值的内容。此函数对各个组织使用不同凭据。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureDevOpsServer.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 源",
        "Documentation.DisplayName": "Azure DevOps Services 源",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的 OData 源的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Tables",
      "Documentation": {
        "Documentation.Caption": "",
        "Documentation.Description": "输入与你的注册相关联的 Azure Enterprise REST API 终结点的 URL",
        "Documentation.DisplayName": "",
        "Documentation.LongDescription": "返回 Azure Enterprise API 提供的报表和月份列表",
        "Documentation.Name": "导入 Azure Enterprise 中的数据",
        "Documentation.Examples": [
          {
            "Description": "使用 AzureEnterprise.Tables 函数，然后定位到特定的值以获取结果。",
            "Code": "let\r\n    Source = AzureEnterprise.Tables(\"http://ea.azure.com/rest/12345\"),\r\n    Contents = Source{[Key=\"Contents\"]}[Data]\r\nin\r\n    Contents",
            "Result": "表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureResourceGraph.Query",
      "Documentation": {
        "Documentation.Name": "Azure Resource Graph",
        "Documentation.LongDescription": "See https://learn.microsoft.com/azure/governance/resource-graph/samples/starter?tabs=azure-cli for starter query samples.",
        "Documentation.Examples": [
          {
            "Description": "Return a table with query results of user query 'resources'",
            "Code": "AzureResourceGraph.Query(\"resources\")",
            "processedResult": "#table({\"\"Column1\"\"}, {{\"\"result\"\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "scope": "text",
        "subscription": "text",
        "managementGroup": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Azure HDInsight Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "列出 Azure Spark 实例中的表。",
        "Documentation.LongDescription": "列出 Azure Spark 实例中的表。",
        "Documentation.Examples": [
          {
            "Description": "列出 Azure Spark 实例中的表。",
            "Code": "AzureSpark.Tables(\"contoso.azurehdinsight.net\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Blobs",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Blobs",
        "Documentation.Description": "返回一个导航表，它包含从 Azure 存储库的指定帐户中找到的容器。",
        "Documentation.LongDescription": "从 Azure 存储保管库返回包含帐户 URL <code>account</code> 处每个容器的行的导航表。每行都包含与容器 blob 的链接。可以指定 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等待数据使用者前要读取的字节数。默认值为 4MB。</li>\r\n<li><code>RequestSize</code> : 要在对服务器的单个 HTTP 请求中尝试读取的字节数。默认值为 4MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 选项通过指定要并行执行的请求数来支持更快速的数据下载，这是以内存利用率为代价的。所需的内存为 (ConcurrentRequest * RequestSize)。默认值为 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLake",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLake",
        "Documentation.Description": "返回一个导航表，其中包含在 Azure Data Lake Storage 的指定容器及其子文件夹中找到的文档。",
        "Documentation.LongDescription": "从 Azure Data Lake Storage 文件系统返回包含帐户 URL <code>endpoint</code> 处指定容器及其子文件夹中的文档的导航表。可以指定 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等待数据使用者前要读取的字节数。默认值为 4MB。</li>\r\n<li><code>RequestSize</code> : 要在对服务器的单个 HTTP 请求中尝试读取的字节数。默认值为 4MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 选项通过指定要并行执行的请求数来支持更快速的数据下载，这是以内存利用率为代价的。所需的内存为 (ConcurrentRequest * RequestSize)。默认值为 16。</li>\r\n<li><code>HierarchicalNavigation</code> : 逻辑(true/false)，用于控制是以类似树的目录视图还是以简单列表的形式返回文件。默认值为 false。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "endpoint": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.Tables",
      "Documentation": {
        "Documentation.Name": "AzureStorage.Tables",
        "Documentation.Description": "返回一个导航表，它包含从 Azure 存储库的指定帐户中找到的表。",
        "Documentation.LongDescription": "返回一个导航表，它包含从 Azure 存储库的帐户 URL <code>account</code> 中找到的每个表的行。每行都包含指向 Azure 表的链接。可能提供了可选记录参数 <code>options</code> 来指定其他属性。记录可包含以下字段:\r\n    <ul>\r\n<li><code>Timeout</code> : 一个时间段，控制在放弃对服务器的请求之前等待的时间。默认值特定于源。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure 时序见解"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureTrino.Contents",
      "Documentation": {
        "Documentation.Name": "AKS Trino 上的 Azure HDInsight"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BI360.Contents",
      "Documentation": {
        "Documentation.Name": "Solver",
        "Documentation.FieldDescription": "Navigation table",
        "Documentation.LongDescription": "Retrieves a Navigation Table populated with the enabled tables for a given token"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BIConnector.Contents",
      "Documentation": {
        "Documentation.Description": "Enter connection information",
        "Documentation.DisplayName": "BI Connector",
        "Documentation.Name": "BI Connector",
        "Documentation.Caption": "BI Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsnname": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BQL.Query",
      "Documentation": {
        "Documentation.Name": "彭博数据与分析  v1.1.3",
        "Documentation.Description": "用于调取彭博数据"
      },
      "ReturnType": "table",
      "Parameters": {
        "BQLQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cdm.Contents",
      "Documentation": {
        "Documentation.Name": "Cdm.Contents",
        "Documentation.Description": "Cdm.Contents",
        "Documentation.LongDescription": "此功能不可用，因为它需要使用 .NET 4.5。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Entities",
      "Documentation": {
        "Documentation.Name": "Common Data Service (旧版)",
        "Documentation.Caption": "Common Data Service (旧版)",
        "Documentation.LongDescription": "连接到 Common Data Service 实例(Dynamics 365 和 PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.KnowledgeModels",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Celonis.Navigation",
      "Documentation": {
        "Documentation.Name": "Celonis EMS"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cognite.Contents",
      "Documentation": {
        "Documentation.Name": "Cognite Data Fusion (CDF)",
        "Documentation.LongDescription": "Cognite Data Fusion (CDF)"
      },
      "ReturnType": "table",
      "Parameters": {
        "project": "text",
        "environment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "CosmosDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v2"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Csv.Document",
      "Documentation": {
        "Documentation.Name": "Csv.Document",
        "Documentation.Description": "返回 CSV 文档的内容作为表。",
        "Documentation.LongDescription": "以表的形式返回 CSV 文档的内容。\r\n    <ul>\r\n      <li>\r\n        <code>columns</code> 可以为 null、列数、列名称的列表、表类型或选项记录。\r\n      </li>\r\n      <li>\r\n        <code>delimiter</code> 可以是单个字符、字符的列表，或值 <code>\"\"</code>，表示应使用连续空格字符拆分行。默认值: <code>“,”</code>。\r\n      </li>\r\n      <li>\r\n        请参考 <code>ExtraValues.Type</code> 以了解 <code>extraValues</code> 的受支持的值。\r\n      </li>\r\n      <li>\r\n        <code>encoding</code> 指定文本编码类型。\r\n      </li>\r\n    </ul>\r\n\r\n    如果为 <code>columns</code> 指定了记录(且 <code>delimiter</code>、<code>extraValues</code> 和 <code>encoding</code> 为 null)，则可能提供以下记录字段:\r\n    <ul>\r\n      <li>\r\n        <code>Delimiter</code>: 列分隔符。默认值: <code>“,”</code>。\r\n      </li>\r\n      <li>\r\n        <code>Columns</code>: 可以为 null、列数、列名称的列表或表类型。如果列数小于输入中发现的数字，则忽略其他列。如果列数大于输入中发现的数字，则其他列将为 null。如果未指定，则列数将由输入中发现的数字决定。\r\n      </li>\r\n      <li>\r\n        <code>Encoding</code>: 文件的文本编码。默认值: 65001 (UTF-8)。\r\n      </li>\r\n      <li>\r\n        <code>CsvStyle</code>: 指定引号的处理方式。\r\n        <ul>\r\n          <li>\r\n            <code>CsvStyle.QuoteAfterDelimiter</code> (默认值): 字段中的引号仅在紧跟分隔符后才起作用。\r\n          </li>\r\n          <li>\r\n            <code>CsvStyle.QuoteAlways</code>: 字段中的引号始终起作用，无论它们出现在什么位置。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n      <li>\r\n        <code>QuoteStyle</code>: 指定带引号换行符的处理方式。\r\n        <ul>\r\n          <li>\r\n            <code>QuoteStyle.None</code> (默认值): 将所有换行符视为当前行的末尾，即使它们出现在带引号的值内也是如此。\r\n          </li>\r\n          <li>\r\n            <code>QuoteStyle.Csv</code>: 将带引号的换行符视为数据的一部分，而不是当前行的末尾。\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "处理包含列标题的 CSV 文本",
            "Code": "let\r\n    csv = Text.Combine({\"OrderID,Item\", \"1,Fishing rod\", \"2,1 lb. worms\"}, \"#(cr)#(lf)\")\r\nin\r\n    Table.PromoteHeaders(Csv.Document(csv))",
            "Result": "Table.FromRecords({\r\n    [OrderID = \"1\", Item = \"Fishing rod\"],\r\n    [OrderID = \"2\", Item = \"1 lb. worms\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "any",
        "columns": "any",
        "delimiter": "any",
        "extraValues": "number",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Dimensions",
      "Documentation": {
        "Documentation.Name": "Cube.Dimensions",
        "Documentation.Description": "返回包含可用维度集的表。",
        "Documentation.LongDescription": "返回包含 <code>cube</code> 中可用的维度集的表。每个维度均为包含维度属性集的表，而每个维度属性则表现为维度表中的一列。使用 Cube.AddAndExpandDimensionColumn 可展开多维数据集中的维度。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.DisplayFolders",
      "Documentation": {
        "Documentation.Name": "Cube.DisplayFolders",
        "Documentation.Description": "返回表示对象(如维度和度量值)显示文件夹层次结构的表嵌套树。",
        "Documentation.LongDescription": "返回可在 <code>cube</code> 中使用的表示对象(如维度和度量值)显示文件夹层次结构的表嵌套树。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.MeasureProperties",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperties",
        "Documentation.Description": "返回包含在多维数据集中扩展的可用度量值属性集的表。",
        "Documentation.LongDescription": "返回一个表，该表包含在多维数据集中扩展的度量的可用属性集。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Measures",
      "Documentation": {
        "Documentation.Name": "Cube.Measures",
        "Documentation.Description": "返回包含可用度量值集的表。",
        "Documentation.LongDescription": "返回包含 <code>cube</code> 中可用的度量值集的表。\r\n    每个度量值表示为一个函数。使用 Cube.AddMeasureColumn 可将度量值应用于多维数据集。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Parameters",
      "Documentation": {
        "Documentation.Name": "Cube.Parameters",
        "Documentation.Description": "返回的表所包含的参数集可应用到多维数据集。",
        "Documentation.LongDescription": "返回的表所包含的参数集可应用到 <code>cube</code>。每个参数都是一个函数，可调用这些函数以获取 <code>cube</code>，其中应用了形参及其实参。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.Properties",
      "Documentation": {
        "Documentation.Name": "Cube.Properties",
        "Documentation.Description": "返回一个表，该表包含在多维数据集中扩展的维度的可用属性集。",
        "Documentation.LongDescription": "返回一个表，该表包含在多维数据集中扩展的维度的可用属性集。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DCWInsights.Feed",
      "Documentation": {
        "Documentation.Name": "DCW - Integrations Platform Insights",
        "Documentation.LongDescription": "Use the DCW Integrations Platform OData API to build powerful reports and dashboards. Consult the API documentation to get the various endpoints available as well as  how to obtain to your JWT key."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "输入 Azure Data Lake Storage Gen1 帐户的 URL。",
        "Documentation.LongDescription": "返回 Azure Data Lake Storage Gen1 中 <code>url</code> 处每个文件夹和文件都对应有一行的表。每行包含文件夹或文件的属性及其内容链接。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DataLake.Files",
      "Documentation": {
        "Documentation.Name": "Azure Data Lake Storage Gen1",
        "Documentation.Description": "输入 Azure Data Lake Storage 帐户的 URL。",
        "Documentation.LongDescription": "返回 Azure Data Lake Storage Gen1 中 <code>url</code> 处每个文件都对应有一行的表。每行包含文件的属性及其内容链接。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaSharing.Contents",
      "Documentation": {
        "Documentation.Name": "Delta Sharing"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Denodo.Contents",
      "Documentation": {
        "Documentation.Name": "Denodo Connector",
        "Documentation.LongDescription": "The Denodo Connector allows you to connect to Denodo's VDP server from PowerBI"
      },
      "ReturnType": "table",
      "Parameters": {
        "DSN": "text",
        "debug": "logical",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DirectQueryCapabilities.From",
      "Documentation": {
        "Documentation.Name": "DirectQueryCapabilities.From",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DocumentDB.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Cosmos DB v1",
        "Documentation.Caption": "Azure Cosmos DB (SQL API)",
        "Documentation.Description": "输入 Azure Cosmos DB 帐户的 URL。",
        "Documentation.LongDescription": "在 <code>url</code> 位置返回 Azure Cosmos DB 数据库的表。如果指定了<code>数据库</code>，将返回一个集合表。此外，如果在<code>选项</code>记录中指定了<code>查询</code>字段，将返回在指定数据库和/或集合上执行的查询结果。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "collection": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dremio.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost. This uses the default encrypted connection.",
            "Code": "Dremio.Databases(\"localhost:31010\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.Databases",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets in the specified project on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource. This function is maintained for backward compatibility with previous connector versions of Dremio Cloud.",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, on Dremio Cloud.",
            "Code": "DremioCloud.Databases(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")",
            "Result": "A table listing the datasets in project, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServer",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServer(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV330",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV330(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DremioCloud.DatabasesByServerV360",
      "Documentation": {
        "Documentation.Name": "Dremio Cloud",
        "Documentation.LongDescription": "Returns a table listing the datasets on the specified server on Dremio Cloud. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on a server on Dremio Cloud.",
            "Code": "DremioCloud.DatabasesByServerV360(\"sql.dremio.cloud:443\")",
            "Result": "A table listing the datasets on a server."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "projectId": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text",
        "encryption": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Dynamics365BusinessCentralOnPremises.Contents",
      "Documentation": {
        "Documentation.Description": "输入 Dynamics 365 Business Central (本地) OData 服务终结点的 URL。",
        "Documentation.DisplayName": "Dynamics 365 Business Central (本地)",
        "Documentation.Caption": "Dynamics365BusinessCentralOnPremises.Contents",
        "Documentation.Name": "Dynamics 365 Business Central (本地)",
        "Documentation.LongDescription": "返回包含相关 Dynamics 365 Business Central (本地)数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DynamicsNav.Contents",
      "Documentation": {
        "Documentation.Description": "输入 Dynamics NAV OData 服务终结点的 URL。",
        "Documentation.DisplayName": "Dynamics NAV",
        "Documentation.Caption": "DynamicsNavision.Contents",
        "Documentation.Name": "Dynamics NAV",
        "Documentation.LongDescription": "返回包含相关 Dynamics NAV 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "company": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EQuIS.Contents",
      "Documentation": {
        "Documentation.Name": "EQuIS"
      },
      "ReturnType": "table",
      "Parameters": {
        "baseUri": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Essbase.Cubes",
      "Documentation": {
        "Documentation.Name": "Essbase.Cubes",
        "Documentation.Description": "返回 Essbase 实例中按 Essbase 服务器分组的多维数据集。",
        "Documentation.LongDescription": "从 APS 服务器 <code>url</code> 处的 Essbase 实例中返回按 Essbase 服务器分组的多维数据集表。可以指定可选的记录参数 <code>options</code>，从而控制以下选项:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.Workbook",
      "Documentation": {
        "Documentation.Name": "Excel.Workbook",
        "Documentation.Description": "返回 Excel 工作簿的内容。",
        "Documentation.LongDescription": "返回 Excel 工作簿的内容。\r\n    <ul>\r\n     <li> <code>useHeaders</code> 可为 null、指示是否应将每个返回表的第一行视为标题的逻辑值(true/false)，或选项记录。默认值: false。</li>\r\n     <li> <code>delayTypes</code> 可为 null 或逻辑值(true/false)，其中逻辑值表示每个返回的表的列是否应保留未设类型的状态。默认值: false。</li>\r\n    </ul>\r\n\r\n    如果为 <code>useHeaders</code> 指定了记录(且 <code>delayTypes</code> 为 null)，则可能提供以下记录字段:\r\n    <ul>\r\n     <li> <code>UseHeaders</code>: 可为 null 或指示是否应将每个返回表的第一行视为标题的逻辑值(true/false)。默认值: false。</li>\r\n     <li> <code>DelayTypes</code>: 可为 null 或逻辑值(true/false)，其中逻辑值表示每个返回的表的列应保留未设类型的状态。默认值: false。</li>\r\n     <li> <code>InferSheetDimensions</code>: 可为 null 或逻辑值(true/false)，其中逻辑值表示包含数据的工作表的区域应通过读取工作表本身进行推断，而不是通过读取文件中的维度元数据。如果维度元数据不正确，那么这非常有用。请注意，仅支持对 Open XML Excel 文件使用此选项，不可用于旧版 Excel 文件。默认值: false。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "从 Excel 工作簿返回 Sheet1 的内容。",
            "Code": "Excel.Workbook(File.Contents(\"C:\\Book1.xlsx\"), null, true){[Item=\"Sheet1\"]}[Data]",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"ID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 3, Column2 = \"Pam\", Column3 = \"543-7890\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "workbook": "binary",
        "useHeaders": "any",
        "delayTypes": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Fhir.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "searchQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Contents",
      "Documentation": {
        "Documentation.Name": "Folder.Contents",
        "Documentation.Description": "返回一个表，其中包含在指定文件夹中找到的文件和文件夹的属性和内容。",
        "Documentation.LongDescription": "返回一个表，其中包含在文件夹 <code>path</code> 中找到的每个文件夹和文件的一行。每行都包含文件夹或文件的属性以及指向其内容的链接。<code>options</code> 参数当前仅供内部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Folder.Files",
      "Documentation": {
        "Documentation.Name": "Folder.Files",
        "Documentation.Description": "返回一个表，它包含在指定文件夹和子文件夹中找到的文件的属性和内容。",
        "Documentation.LongDescription": "返回一个表，其中包含在文件夹 <code>path</code> 及其所有子文件夹中找到的每个文件的一行。每行都包含文件的属性和指向其内容的链接。<code>options</code> 参数当前仅供内部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Foundry.Contents",
      "Documentation": {
        "Documentation.Name": "Foundry",
        "Documentation.LongDescription": "Connect to Palantir Foundry datasets.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "BaseUri": "text",
        "datasetRid": "text",
        "branch": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleBigQueryAad.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery (Azure AD)",
        "Documentation.Caption": "Google BigQuery (Azure AD)",
        "Documentation.Description": "使用 Azure AD 从 Google BigQuery 数据库导入数据",
        "Documentation.LongDescription": "\r\n      使用 Azure AD 返回一张表，其中列出了<code>计费项目 ID</code> 在 Google BigQuery 中可用的项目。可指定一个可选的记录参数 <code>options</code> 来控制以下选项:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值是 ODBC 连接超时值。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。</li>\r\n        <li><code>UseStorageApi</code>: 指定是否使用 BigQuery Storage API 来处理大型结果集。默认值为 true，表示使用存储 API。设置为 false 则表示不使用存储 API</li>\r\n        <li><code>AudienceUri</code>: 这是 ODBC 驱动程序可用于其令牌交换请求的受众 URI。此字段必须是完全限定的 URI (即 //iam.googleapis.com/locations/global/workforcePools/${pool_id}/providers/aad-provider)，其中 pool_id 是用于标识工作人员池的全局唯一名称。</li>\r\n      </ul>\r\n    记录参数指定为 [option1 = value1, option2 = value2...]。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "使用 Azure AD 列出 Google BigQuery 中的可用项目",
            "Code": "GoogleBigQueryAad.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "billingProject": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "GoogleSheets.Contents",
      "Documentation": {
        "Documentation.Name": "Google 表格",
        "Documentation.Caption": "Google 表格",
        "Documentation.Description": "从 GoogleSheets 导入数据",
        "Documentation.LongDescription": "从 GoogleSheets 导入数据"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Containers",
      "Documentation": {
        "Documentation.Name": "HdInsight.Containers",
        "Documentation.Description": "返回一个导航表，它包含从 Azure 存储库的指定帐户中找到的容器。",
        "Documentation.LongDescription": "返回包含从 Azure 存储库的帐户 URL <code>account</code> 中找到的每个容器行的导航表。每行包含一个到容器 Blob 的链接。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HdInsight.Contents",
      "Documentation": {
        "Documentation.Name": "HdInsight.Contents",
        "Documentation.Description": "返回一个导航表，它包含从 Azure 存储库的指定帐户中找到的容器。",
        "Documentation.LongDescription": "返回包含从 Azure 存储库的帐户 URL <code>account</code> 中找到的每个容器行的导航表。每行包含一个到容器 Blob 的链接。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Contents",
      "Documentation": {
        "Documentation.Name": "Hdfs.Contents",
        "Documentation.Description": "返回一个表，它包含在 Hadoop 文件系统的指定文件夹中找到的文件和文件夹的属性和内容。",
        "Documentation.LongDescription": "返回一个表，它包含在 Hadoop 文件系统的文件夹 URL <code>url</code> 上找到的每个文件夹和文件所对应的行。每一行都包含所对应的文件夹或文件的属性以及指向其内容的链接。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Hdfs.Files",
      "Documentation": {
        "Documentation.Name": "Hdfs.Files",
        "Documentation.Description": "返回一个表，它包含在 Hadoop 文件系统的指定文件夹和子文件夹中找到的文件的属性和内容。",
        "Documentation.LongDescription": "返回一个表，它包含在 Hadoop 文件系统的文件夹 URL <code>url</code> 和子文件夹中找到的每个文件所对应的行。每一行都包含所对应的文件的属性以及指向其内容的链接。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.Feed",
      "Documentation": {
        "Documentation.Name": "Hexagon PPM Smart® API",
        "Documentation.LongDescription": "Returns a table from a Hexagon PPM Smart® API OData feed.",
        "Documentation.Examples": [
          {
            "Description": "Returns an OData service document in table form from a Hexagon PPM Smart® API OData feed.",
            "Code": "HexagonSmartApi.Feed(\"https://example.com/SampleService/V1\")",
            "Result": "#table({\"Name\"}, {{\"Data\"}, {\"Signature\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "headers": "text",
        "odataFeedVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Impala.Database",
      "Documentation": {
        "Documentation.Name": "Impala",
        "Documentation.Caption": "Impala",
        "Documentation.Description": "从 Impala 群集导入数据",
        "Documentation.LongDescription": "从 Impala 群集 <code>server</code> 导入数据。若未指定端口，则将使用默认端口 21050。",
        "Documentation.Examples": [
          {
            "Description": "列出 Impala 群集中的表。",
            "Code": "Impala.Database(\"localhost:21050\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "InformationGrid.Contents",
      "Documentation": {
        "Documentation.Name": "Information Grid BI Services",
        "Documentation.LongDescription": "Retrieves information from authorised BI services available on the given server",
        "Documentation.Examples": [
          {
            "Description": "Returns a Navigation Table listing the available Information Grid BI services",
            "Code": "InformationGrid.Contents(\"192.168.1.123\", false)",
            "Result": "(Navigation table listing available BI services)"
          },
          {
            "Description": "Returns information from a specific named Information Grid BI service using HTTP",
            "Code": "InformationGrid.Contents(\"igserver.somedomain.com\", true){[Service=\"service-name\"]}[Data]",
            "Result": "(Data retrieved for the named BI service)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Intune.Contents",
      "Documentation": {
        "Documentation.Name": "Intune Data Warehouse",
        "Documentation.LongDescription": "Intune Data Warehouse"
      },
      "ReturnType": "table",
      "Parameters": {
        "maxHistoryDays": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kognitwin.Contents",
      "Documentation": {
        "Documentation.Name": "Kognitwin v1.1"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Contents",
      "Documentation": {
        "Documentation.Description": "从 Azure 数据资源管理器(Kusto)导入数据",
        "Documentation.DisplayName": "Azure 数据资源管理器(Kusto)",
        "Documentation.Caption": "Kusto.Contents",
        "Documentation.Name": "Azure 数据资源管理器(Kusto)",
        "Documentation.LongDescription": "从 Azure 数据资源管理器(Kusto)实例导入数据",
        "Documentation.Examples": [
          {
            "Description": "返回 Storm Events 信息的表",
            "Code": "Kusto.Contents(\"help\", \"Samples\", \"StormEvents\", [])",
            "Result": "具有 \"help\" 群集中 \"Samples\" 数据库的 Storm Events 的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "cluster": "text",
        "database": "text",
        "tableOrQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "LinkedIn.SalesNavigator",
      "Documentation": {
        "Documentation.Name": "LinkedIn Sales Navigator",
        "Documentation.LongDescription": "LinkedIn Sales Navigator",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "selectContracts": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "List.ConformToPageReader",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Collection",
      "Documentation": {
        "Documentation.Description": "返回包含 MailChimp 终结点中数据的表。",
        "Documentation.DisplayName": "MailChimp.Collection",
        "Documentation.Caption": "MailChimp.Collection",
        "Documentation.Name": "MailChimp.Collection",
        "Documentation.LongDescription": "调用 MailChimp API 并将结果数据集作为表返回。自动对所有结果进行分页。当根终结点和 JSON 响应中的主要 entityName 不匹配时，可以对 API 终结点使用可选的 entityName 参数。",
        "Documentation.Examples": [
          {
            "Description": "拉取包含 MailChimp API 列表终结点中数据的表。",
            "Code": "MailChimp.Collection(\"lists\")",
            "Result": "包含列表数据的表。"
          },
          {
            "Description": "拉取包含 MailChimp API 市场活动文件夹终结点中数据的表。",
            "Code": "MailChimp.Collection(\"campaign-folders\", \"folders\")",
            "Result": "包含市场活动文件夹数据的表。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text",
        "entityName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MailChimp.Instance",
      "Documentation": {
        "Documentation.Description": "从 MailChimp API 终结点返回原始响应结果。",
        "Documentation.DisplayName": "MailChimp.Instance",
        "Documentation.Caption": "MailChimp.Instance",
        "Documentation.Name": "MailChimp.Instance",
        "Documentation.LongDescription": "调用 MailChimp API 并返回原始响应。",
        "Documentation.Examples": [
          {
            "Description": "从报表/单击详细信息 MailChimp API 终结点返回指定市场活动的原始数据。",
            "Code": "MailChimp.Instance(\"reports/{campaign_id}/click-details\")",
            "Result": "指定市场活动的单击详细信息原始数据。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MariaDB.Contents",
      "Documentation": {
        "Documentation.Name": "MariaDB data source",
        "Documentation.LongDescription": "<p>Returns a navigation table.</p>\r\n        <ul>\r\n        <li>Without a <code>databasename</code>, returns a table of databases on the specified MariaDB server <code>servername</code>.\r\n        <li>With a <code>databasename</code>, returns or a table of tables and views from the specified MariaDB database <code>databasename</code> on the server <code>servername</code>.\r\n        </ul>\r\n        \r\n        <p><code>databasename</code> can be provided in either of the input parameters:</p>\r\n        <ul>\r\n        <li>In the <b>MariaDB Data Source</b> string after a semicolon. This approach allows using database-specific credentials. See details below.\r\n        <li>As the optional <b>Database</b> parameter. This approach allows using same credentials for all databases on the specified server <code>servername</code>.\r\n        </ul>\r\n        <p>The <b>MariaDB Data Source</b> string uniquely identifies a data source in Power BI and allows using different credentials for each data source.\r\n        Credentials for a data source are configured in Power BI <i>Data source settings</i> screen. \r\n        MariaDB Power BI connector supports Basic authentication per server or per database.\r\n        E.g. it is possible to connect with different credentials to databases residing on the same MariaDB server.</p>\r\n        \r\n        <p><code>CreateNavigationProperties</code> is a parameter for Odbc.DataSource.</p>\r\n        <p>A logical value that sets whether to generate navigation properties on the returned tables. Navigation properties are based on foreign key relationships reported by the driver. These properties show up as “virtual” columns that can be expanded in the query editor, creating the appropriate join.</p>\r\n        <p>If calculating foreign key dependencies is an expensive operation for your driver, you may want to set this value to false.</p>\r\n        <p>Default: TRUE</p>",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of MariaDB tables and views functions from the MariaDB database <code>databasename</code> on server <code>servername</code>.",
            "Code": "MariaDB.Contents(\"servername\", \"databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server using the default port 3306 to connect. Equivalent to <code>MariaDB.Contents(\"servername:3306\")</code>.",
            "Code": "MariaDB.Contents(\"servername\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of databases on the specified MariaDB server <code>servername</code> using the provided port number <code>portnumber</code> to connect.",
            "Code": "MariaDB.Contents(\"servername:portnumber\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"mysql\", null, #table(...), \"Database\"},\r\n       {\"flights\", null, #table(...), \"Database\"}\r\n       })"
          },
          {
            "Description": "Returns a table of MariaDB tables and views from the MariaDB database <code>databasename</code> on server <code>servername</code>. \r\n            The result is similar to <code>MariaDB.Contents(\"servername\", \"databasename\")</code>, but the string <code>servername;databasename</code> identifies a unique data source and allows using dedicated credentials for the database <code>databasename</code>.",
            "Code": "MariaDB.Contents(\"servername;databasename\")",
            "Result": "#table({\"Name\", \"Description\", \"Data\", \"Kind\"}, {\r\n       {\"airlines\", null, #table(...), \"Table\"},\r\n       {\"airports\", null, #table(...), \"Table\"},\r\n       {\"flights\", null, #table(...), \"Table\"}\r\n       })"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "MariaDB Data Source": "text",
        "database": "text",
        "CreateNavigationProperties": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.Contents",
      "Documentation": {
        "Documentation.Name": "MicroStrategy for Power BI ver. 2.4.5"
      },
      "ReturnType": "table",
      "Parameters": {
        "libraryUrl": "Uri.Type",
        "authMode": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Contents",
      "Documentation": {
        "Documentation.Description": "提供高级查询功能。",
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.Name": "MicrosoftAzureConsumptionInsights.Contents",
        "Documentation.LongDescription": "提供高级查询功能。",
        "Documentation.Examples": [
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取 2017 年 5 月 1 日到 2017 年 6 月 15 日之间的摘要数据",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ numberOfMonth = 1 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2017 年 5 月 1 日到 2017 年 6 月 15 日之间的摘要数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取 2017 年 4 月的摘要数据。",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2017 年 4 月 1 日到 2017 年 4 月 30 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取从 2017 年 4 月至今的摘要数据。",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2017 年 4 月 1 日到 2017 年 6 月 15 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取从去年 12 月到今年 2 月的摘要数据",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-6\", endBillingDataWindow = \"-3\", dataType = \"Summaries\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)\r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2016 年 12 月 1 日到 2017 年 2 月 28 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获得过去 18 个月的应用商店费用",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-18\", endBillingDataWindow = \"0\", dataType = \"MarketplaceCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2015 年 12 月 1 日到 2017 年 6 月 15 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取 2017 年 6 月和 2017 年 5 月的详细费用",
            "Code": "\r\n      let    \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-1\", endBillingDataWindow = \"0\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)   \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2017 年 5 月 1 日到 2017 年 6 月 15 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 7 月 3 日，获取 2016 年 7 月的费用详细信息",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ startBillingDataWindow = \"-12\", endBillingDataWindow = \"-11\", dataType = \"DetailCharges\" ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "函数会返回从 2016 年 7 月 1 日到 2016 年 7 月 31 日的数据"
          },
          {
            "Description": "假设今天是 2017 年 7 月 13 日，获取过去 10 个月外加本月 13 天的余额汇总",
            "Code": "\r\n      let  \r\n          enrollmentNumber = \"100\",\r\n          optionalParameters = [ dataType = \"Summaries\", numberOfMonth = 10 ],\r\n          result = MicrosoftAzureConsumptionInsights.Contents(enrollmentNumber, optionalParameters)    \r\n      in     \r\n          result\r\n    ",
            "Result": "函数将返回 2016 年 9 月 1 日到 2017 年 7 月 13 日之间的数据"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Tables",
      "Documentation": {
        "Documentation.Caption": "Microsoft Azure 使用见解",
        "Documentation.Description": "Microsoft Azure 使用见解",
        "Documentation.DisplayName": "Microsoft Azure 使用见解",
        "Documentation.LongDescription": "Microsoft Azure 使用见解",
        "Documentation.Name": "Microsoft Azure 使用见解"
      },
      "ReturnType": "table",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftGraphSecurity.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Graph Security",
        "Documentation.Description": "Connector for the Microsoft Graph Security API",
        "Documentation.LongDescription": "The Microsoft Graph Security connector helps to connect different Microsoft \r\n\t\tand partner security products and services, to streamline security operations, and \r\n\t\timprove threat protection, detection, and response capabilities. Learn more about integrating with the Microsoft \r\n\t\tGraph Security API at \"https://aka.ms/graphsecuritydocs\". This connector will return the recent most 6000 rows \r\n\t\tof the result set. This constraint and the workaround to overcome this constraint is documented at \r\n\t\t\"https://aka.ms/graphsecurityapiconstraints\". You can either use the power query function ‘Specify custom Microsoft Graph Security URL to filter results’ or use the Power \r\n\t\tQuery Editor to provide the $filter query per the constraint workarounds to get data beyond the initial 6000 rows.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"v1.0\")"
          },
          {
            "Description": "Returns a table from the Microsoft Graph Security API.",
            "Code": "MicrosoftGraphSecurity.Contents(\"beta\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "version": "Text.Type",
        "options": "Record.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.DataSource",
      "Documentation": {
        "Documentation.Name": "Odbc.DataSource",
        "Documentation.Description": "从 ODBC 数据源中返回 SQL 表和视图的表。",
        "Documentation.LongDescription": "从连接字符串 <code>connectionString</code> 指定的 ODBC 数据源中返回 SQL 表和视图的表。<code>connectionString</code> 可以为文本或属性值对记录。属性值可以为文本或数字。可提供一个可选的记录参数 <code>options</code> 以指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值为 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "从提供的连接字符串返回 SQL 表和视图。",
            "Code": "Odbc.DataSource(\"dsn=your_dsn\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OleDb.DataSource",
      "Documentation": {
        "Documentation.Name": "OleDb.DataSource",
        "Documentation.Description": "返回 SQL 表的表并从 OLE DB 数据源进行查看。",
        "Documentation.LongDescription": "返回 SQL 表的表并从连接字符串 <code>connectionString</code> 指定的 OLE DB 数据源进行查看。<code>connectionString</code> 可以是文本或属性值对的记录。属性值可以是文本或数字。可以提供一个可选的记录参数 <code>options</code> 来指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 true)。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n</ul>\r\n\r\n    例如，将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Oracle.Database",
      "Documentation": {
        "Documentation.Name": "Oracle.Database",
        "Documentation.Description": "从 Oracle Database 中返回 SQL 表和视图的表。",
        "Documentation.LongDescription": "从服务器 <code>server</code> 上的 Oracle Database 中返回 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Paxata.Contents",
      "Documentation": {
        "Documentation.Name": "From Paxata"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Pdf.Tables",
      "Documentation": {
        "Documentation.Name": "Pdf.Tables",
        "Documentation.Description": "返回在 PDF 文件中找到的任何表。",
        "Documentation.LongDescription": "返回在 <code>pdf</code> 中找到的任何表。可提供可选记录参数 <code>options</code>，以指定其他属性。记录可包含以下字段:\r\n    <ul>\r\n<li><code>Implementation</code> : 标识表时要使用的算法版本。旧版本仅用于向后兼容，以防止算法更新终端旧的查询。最新版本应始终提供最佳结果。有效值为 &quot;1.3&quot;、&quot;1.2&quot;、&quot;1.1&quot; 或 null。</li>\r\n<li><code>StartPage</code> : 指定页范围中要检查的第一页。默认值: 1。</li>\r\n<li><code>EndPage</code> : 指定页范围中要检查的最后一页。默认值:文档的最后一页。</li>\r\n<li><code>MultiPageTables</code> : 控制是否将连续页面上的相似表自动合并为一个表。默认值: true。</li>\r\n<li><code>EnforceBorderLines</code> : 控制是否始终将边界线强制用作单元格边界(若为 true)，或仅用作确定单元格边界的许多提示之一(若为 false)。默认值: false。</li>\r\n</ul>\r\n\r\n",
        "Documentation.Category": "访问数据",
        "Documentation.Examples": [
          {
            "Description": "返回 sample.pdf 中的表。",
            "Code": "Pdf.Tables(File.Contents(\"c:\\sample.pdf\"))",
            "Result": "#table({\"Name\", \"Kind\", \"Data\"}, ...)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "pdf": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewOKR.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview OKR account.",
        "Documentation.DisplayName": "Planview OKR",
        "Documentation.Caption": "Planview OKR.Contents",
        "Documentation.Name": "Planview OKR",
        "Documentation.LongDescription": "Returns a table with relevant Planview OKR data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "PlanviewProjectplace.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview ProjectPlace account.",
        "Documentation.DisplayName": "Planview ProjectPlace",
        "Documentation.Caption": "PlanviewProjectplace.Contents",
        "Documentation.Name": "Planview ProjectPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview ProjectPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Profisee.Tables",
      "Documentation": {
        "Documentation.Name": "Profisee",
        "Documentation.LongDescription": "Navigation Table returning Profisee entities.",
        "Documentation.Examples": [
          {
            "Description": "Returns a navigational table containing all profisee entities that contains data for each entity.",
            "Code": "Profisee.Tables(\"https://12345.com/profisee\")",
            "Result": "#table({\"Name\", \"Data\", \"ItemKind\", \"ItemName\"}, {{\"ABCCode\", \"Table\", \"Table\", \"Table\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Projectplace.Feed",
      "Documentation": {
        "Documentation.Description": "输入 Planview Projectplace 帐户的 URL。",
        "Documentation.DisplayName": "Planview Projectplace",
        "Documentation.Caption": "Projectplace.Feed",
        "Documentation.Name": "Planview Projectplace",
        "Documentation.LongDescription": "返回包含相关 Planview Projectplace 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Python.Execute",
      "Documentation": {
        "Documentation.Name": "Python.Execute",
        "Documentation.Caption": "亊亐獈弪Python script",
        "Documentation.Description": "齄府亊Executes Python script and returns data frames",
        "Documentation.Examples": {
          "Description": "齄府亊Executes Python script and returns data frames",
          "Code": "Python.Execute(\"a = pandas.DataFrame(dataset[dataset.columns[0]])\", [dataset=#\"Source\"])"
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBase.Contents",
      "Documentation": {
        "Documentation.Name": "Quick Base Connector",
        "Documentation.LongDescription": "Quick Base Connector"
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Query",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "query": "text",
        "schema": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QuickBooks.Report",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "urlFragment": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "R.Execute",
      "Documentation": {
        "Documentation.Name": "R.Execute",
        "Documentation.Caption": "府孱侢侢R script",
        "Documentation.Description": null,
        "Documentation.Examples": {
          "Description": null,
          "Code": null
        }
      },
      "ReturnType": "table",
      "Parameters": {
        "script": "text",
        "arguments": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToTable",
      "Documentation": {
        "Documentation.Name": "Record.ToTable",
        "Documentation.Description": "返回一个表，其中的每行是输入记录的字段名称和值。",
        "Documentation.LongDescription": "返回一个表，它包含 <code>Name</code> 和 <code>Value</code> 列以及对应于 <code>record</code> 中每个字段的行。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "从记录返回表。",
            "Code": "Record.ToTable([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "Table.FromRecords({\r\n    [Name = \"OrderID\", Value = 1],\r\n    [Name = \"CustomerID\", Value = 1],\r\n    [Name = \"Item\", Value = \"Fishing rod\"],\r\n    [Name = \"Price\", Value = 100]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SapHana.Database",
      "Documentation": {
        "Documentation.Name": "SapHana.Database",
        "Documentation.Description": "返回 SAP HANA 数据库中的包。",
        "Documentation.LongDescription": "从 SAP HANA 数据库 <code>server</code> 返回多维包的表。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>Distribution</code> : 连接字符串中设置“分发”属性值的 SapHanaDistribution。语句路由是在语句执行前计算分布式系统的正确服务器节点的方法。默认值为 SapHanaDistribution.All。</li>\r\n<li><code>Implementation</code> : 指定要使用的 SAP HANA 连接器实现。</li>\r\n<li><code>EnableColumnBinding</code> : 提取数据时，将变量绑定到 SAP HANA 结果集的列。可能会以略高的内存利用率为代价提高性能。默认值为 false。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值为 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Contents",
      "Documentation": {
        "Documentation.Name": "SharePoint.Contents",
        "Documentation.Description": "返回一个包含 SharePoint 站点内容的表。",
        "Documentation.LongDescription": "返回包含在指定 SharePoint 站点 <code>url</code> 上找到的每个文件夹和文档的行的表。每行都包含该文件夹或文件的属性以及指向其内容的链接。可以指定 <code>options</code> 以控制以下选项:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数字(14 或 15)或文本 &quot;Auto&quot;，指定要用于此站点的 SharePoint API 版本。未指定时，使用 API 版本 14。指定 Auto 时，如果可能将自动发现服务器版本，否则版本默认为 14。非英文的 SharePoint 网站至少需要版本 15。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Files",
      "Documentation": {
        "Documentation.Name": "SharePoint.Files",
        "Documentation.Description": "返回一个包含 SharePoint 站点文档的表。",
        "Documentation.LongDescription": "返回包含在指定 SharePoint 站点 <code>url</code> 上找到的每个文档和子文件夹的行的表。每行都包含该文件夹或文件的属性以及指向其内容的链接。可以指定 <code>options</code> 以控制以下选项:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数字(14 或 15)或文本 &quot;Auto&quot;，指定要用于此站点的 SharePoint API 版本。未指定时，使用 API 版本 14。指定 Auto 时，如果可能将自动发现服务器版本，否则版本默认为 14。非英文的 SharePoint 网站至少需要版本 15。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SharePoint.Tables",
      "Documentation": {
        "Documentation.Name": "SharePoint.Tables",
        "Documentation.Description": "返回一个包含 SharePoint 列表内容的表。",
        "Documentation.LongDescription": "返回包含在指定 SharePoint 列表 <code>url</code> 上找到的每个列表项的行的表。每行都包含该列表的属性。可以指定 <code>options</code> 以控制以下选项:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 数字(14 或 15)或文本 &quot;Auto&quot;，指定要用于此站点的 SharePoint API 版本。未指定时，使用 API 版本 14。指定 Auto 时，如果可能将自动发现服务器版本，否则版本默认为 14。非英文的 SharePoint 网站至少需要版本 15。</li>\r\n<li><code>Implementation</code> : 可选。指定要使用的 SharePoint 连接器版本。接受的值为 “2.0” 或 null。如果值为 “2.0”，则使用 SharePoint 连接器的 2.0 实现。如果值为 null，则使用 SharePoint 连接器的原始实现。</li>\r\n<li><code>ViewMode</code> : 可选。此选项仅对实现 2.0 有效。接受的值为“全部”和“默认”。如果未指定任何值，则该值设置为“全部”。指定“全部”后，视图将包括用户创建的所有列和系统定义的列。指定“默认”时，视图将与用户在其设置中设置为“默认”的任何视图中在线查看列表时所看到的内容相匹配。。如果用户编辑其默认视图以添加或移除用户创建的列或系统定义的列，或者通过创建新视图并将其设置为默认视图，则这些更改将通过连接器传播。</li>\r\n<li><code>DisableAppendNoteColumns</code> : 阻止连接器对注释列使用单独的终结点。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Soda.Feed",
      "Documentation": {
        "Documentation.Name": "Soda.Feed",
        "Documentation.Description": "从位于指定 URL (根据 SODA 2.0 API 进行格式化)的内容中返回一个表。",
        "Documentation.LongDescription": "从位于指定 URL <code>url</code> (根据 SODA 2.0 API 进行格式化)的内容中返回一个表。URL 必须指向有效的符合 SODA 的源(以 .csv 扩展名结尾)。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.GetList",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost.GetList",
        "Documentation.Caption": "SparkPost.GetList",
        "Documentation.Name": "SparkPost.GetList",
        "Documentation.LongDescription": "此函数可用于调用 SparkPost API v1 提供的任意“列表”终结点。使用此函数调用 SparkPost API 时，请注意 SparkPost API 有严格的 API 速率限制。如果 SparkPost 服务器返回了 429 状态代码，表明已达到速率限制，需要先稍等片刻，再执行多个调用。",
        "Documentation.Examples": [
          {
            "Description": "返回表，其中一列填充有来自 SparkPost API v1“列表”终结点之一的数据(有关详细信息，请参阅 SparkPost 文档)。",
            "Code": "Source = SparkPost.GetList(\"metrics/campaigns\")",
            "Result": "Json.Document"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "path": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SparkPost.NavTable",
      "Documentation": {
        "Documentation.DisplayName": "SparkPost",
        "Documentation.Caption": "SparkPost",
        "Documentation.Name": "SparkPost",
        "Documentation.LongDescription": "检索 SparkPost 连接器公开的内置表，其中包含在用户指定的天数内聚合的数据。使用此连接器刷新这些表或调用 SparkPost API 时，请注意 SparkPost API 有严格的 API 速率限制。如果 SparkPost 服务器返回了 429 状态代码，表明已达到速率限制，需要先稍等片刻，再执行多个调用。选择“天数”参数的值时，请注意 API 仅存储相当于 6 个月的数据。"
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Spigit.Contents",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview IdeaPlace account.",
        "Documentation.DisplayName": "Planview IdeaPlace",
        "Documentation.Caption": "Spigit.Contents",
        "Documentation.Name": "Planview IdeaPlace",
        "Documentation.LongDescription": "Returns a table with relevant Planview IdeaPlace data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ODataURL": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Sql.Databases",
      "Documentation": {
        "Documentation.Name": "Sql.Databases",
        "Documentation.Description": "返回 SQL Server 上的数据库表。",
        "Documentation.LongDescription": "返回指定 SQL Server <code>server</code> 上的数据库表。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 一个数字，用于设置生成的 SQL 查询中 &quot;maxdop&quot; 查询子句的值。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n<li><code>MultiSubnetFailover</code> : 一个逻辑值(true/false)，用于设置连接字符串中 &quot;MultiSubnetFailover&quot; 属性的值(默认值为 false)。</li>\r\n<li><code>UnsafeTypeConversions</code> : 一个逻辑值(true/false)；如果为 true，则尝试折叠可能会失败并导致整个查询失败的类型转换。不建议用于常规用途。</li>\r\n<li><code>ContextInfo</code> : 一个二进制值，用于在运行每个命令之前设置 CONTEXT_INFO。</li>\r\n<li><code>OmitSRID</code> : 一个逻辑值(true/false)；如果为 true，则在从几何图形和地理类型生成已知文本时省略 SRID。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : 一个逻辑 (true/false) 值，如果为 true，则允许查询折叠同一服务器上的数据库。默认值为 false。</li>\r\n</ul>\r\n\r\n    例如，将记录参数指定为 [option1 = value1, option2 = value2...]。\r\n    <br>\r\n    不支持将 SQL 查询设置为在服务器上运行。应改用 <code>Sql.Database</code> 来运行 SQL 查询。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Stripe.Contents",
      "Documentation": {
        "Documentation.Name": "Stripe.Contents",
        "Documentation.DisplayName": "Stripe.Contents",
        "Documentation.Caption": "Stripe.Contents",
        "Documentation.Description": "使用限制 API 调用次数的选项来调用 Stripe API。",
        "Documentation.LongDescription": "在 https://api.stripe.com/v1/<code>method</code> 上调用 Stripe API，将可选记录 <code>query</code> 传递为其他参数，并将可选 <code>pageLimit</code> 传递为对 API 请求次数的限制。先返回最近的数据。如果未指定 <code>pageLimit</code>，将返回所有数据。使用的是 Stripe 2015-10-16 版本。",
        "Documentation.Examples": [
          {
            "Description": "返回所有费用数据",
            "Code": "Stripe.Contents(\"charges\")",
            "Result": "包含当前 Stripe 帐户所有费用数据的表"
          },
          {
            "Description": "返回一页费用数据",
            "Code": "Stripe.Contents(\"charges\", [], 1)",
            "Result": "包含当前 Stripe 帐户最近费用数据的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "query": "record",
        "pageLimit": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SumTotal.ODataFeed",
      "Documentation": {
        "Documentation.Name": "SumTotal BI Connector",
        "Documentation.LongDescription": "SumTotal's Custom connector connects to SumTotal's external facing OData API service to pull data from data warehousing database . Filter expand, slice and create customer visuals and reports based on data returned from the OData feed",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with specified entity data",
            "Code": "SumTotal.ODataFeed('https://host.sumtotalystems.com/?rowVersionId=0')",
            "Result": " Source{[Name='{OData Entity chosen}']}[Data]"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Buffer",
      "Documentation": {
        "Documentation.Name": "Table.Buffer",
        "Documentation.Description": "在内存中缓冲一个表，同时在计算期间使其与外部更改隔离。",
        "Documentation.LongDescription": "在内存中缓冲表，在评估期间将其与外部更改隔离。\r\n    缓冲较浅。它强制计算所有标量单元值，但保留非标量值(记录、列表以及表等)不变。\r\n    <br>\r\n    <br>\r\n    请注意，使用此函数可能会也可能不会加快查询运行。在一些情况下，它可能会使查询的运行速度变慢，这是因为读取所有数据并将其存储在内存中增加了\r\n    成本，且存在缓冲阻止下游折叠这一事实。如果数据不需要\r\n    缓冲，而你只想防止下游折叠，请改为使用 <code>Table.StopFolding</code>。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "将 SQL 表的所有行加载到内存中，从而使得所有下游操作都将无法再查询 SQL Server。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    BufferMyTable = Table.Buffer(dbo_MyTable)\r\nin\r\n    BufferMyTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Combine",
      "Documentation": {
        "Documentation.Name": "Table.Combine",
        "Documentation.Description": "返回作为合并一系列表的结果的表。",
        "Documentation.LongDescription": "返回合并表列表 <code>tables</code> 后生成的表。生成的表的行类型结构由 <code>columns</code> 定义，或由输入类型的联合定义(如果未指定 <code>columns</code> 的话)。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "将以下三个表合并在一起。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]}),\r\n    Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "合并结构不同的三个表。",
            "Code": "Table.Combine({\r\n    Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n    Table.FromRecords({[Cell = \"543-7890\"]})\r\n})",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Phone = \"123-4567\", Fax = null, Cell = null],\r\n    [Name = null, Phone = \"838-7171\", Fax = \"987-6543\", Cell = null],\r\n    [Name = null, Phone = null, Fax = null, Cell = \"543-7890\"]\r\n})"
          },
          {
            "Description": "合并两个表并投影到给定类型。",
            "Code": "Table.Combine(\r\n    {\r\n        Table.FromRecords({[Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        Table.FromRecords({[Fax = \"987-6543\", Phone = \"838-7171\"]}),\r\n        Table.FromRecords({[Cell = \"543-7890\"]})\r\n    },\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = null, Name = \"Bob\"],\r\n    [CustomerID = null, Name = null],\r\n    [CustomerID = null, Name = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.DemoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.DemoteHeaders",
        "Documentation.Description": "将列标题降级到第一行值。",
        "Documentation.LongDescription": "将列标题(也即列名)降级到第一行值。默认列名为 \"Column1\"、\"Column2\" 等。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "降级表中的第一行值。",
            "Code": "Table.DemoteHeaders(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = \"Phone\"],\r\n    [Column1 = 1, Column2 = \"Bob\", Column3 = \"123-4567\"],\r\n    [Column1 = 2, Column2 = \"Jim\", Column3 = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Distinct",
      "Documentation": {
        "Documentation.Name": "Table.Distinct",
        "Documentation.Description": "从表中删除重复的行。",
        "Documentation.LongDescription": "从表中删除重复的行。\r\n    可选参数 <code>equationCriteria</code> 指定对表的哪些列进行重复测试。如果未指定 <code>equationCriteria</code>，则将测试所有列。<br>\r\n    <br>\r\n    因为 Power Query 有时会将某些操作卸载到后端数据源(称为“折叠”)，并且有时还会通过\r\n    跳过并非绝对需要的操作来优化查询，所以通常无法保证将保留哪些特定重复项。\r\n    例如，不能假定将会保留具有一组唯一列值的第一行，并将删除表中更靠下的行。\r\n    如果希望删除重复项的行为可以预测，请首先使用 <code>Table.Buffer</code> 缓冲该表。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "从表中删除重复的行。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"b\"],\r\n        [a = \"A\", b = \"a\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"B\", b = \"b\"]\r\n})"
          },
          {
            "Description": "从表 <code>({[a = \"A\", b = \"a\"], [a = \"B\", b = \"a\"], [a = \"A\", b = \"b\"]})</code> 的列 [b] 中删除重复的行。",
            "Code": "Table.Distinct(\r\n    Table.FromRecords({\r\n        [a = \"A\", b = \"a\"],\r\n        [a = \"B\", b = \"a\"],\r\n        [a = \"A\", b = \"b\"]\r\n    }),\r\n    \"b\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"A\", b = \"a\"],\r\n    [a = \"A\", b = \"b\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromColumns",
      "Documentation": {
        "Documentation.Name": "Table.FromColumns",
        "Documentation.Description": "从列和指定值的列表创建一个表。",
        "Documentation.LongDescription": "从包含嵌套列表以及列名和值的列表 <code>lists</code> 创建类型为 <code>columns</code> 的表。\r\n    如果某些列比其他列具有更多值，则当这些列可为 Null 时，缺少的值将使用默认值 \"Null\" 填充。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "从列表中的客户名称列表返回一个表。客户列表项中的每个值将成为一个行值，每个列表将成为一个列。",
            "Code": "Table.FromColumns({\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n})",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2, Column3 = 3],\r\n    [Column1 = \"Bob\", Column2 = \"Jim\", Column3 = \"Paul\"],\r\n    [Column1 = \"123-4567\", Column2 = \"987-6543\", Column3 = \"543-7890\"]\r\n})"
          },
          {
            "Description": "从给定的列列表和列名列表创建一个表。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"},\r\n        {3, \"Paul\", \"543-7890\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = 2, Phone = 3],\r\n    [CustomerID = \"Bob\", Name = \"Jim\", Phone = \"Paul\"],\r\n    [CustomerID = \"123-4567\", Name = \"987-6543\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "创建一个表，其中每行的列数不同。缺失的行值为 null。",
            "Code": "Table.FromColumns(\r\n    {\r\n        {1, 2, 3},\r\n        {4, 5},\r\n        {6, 7, 8, 9}\r\n    },\r\n    {\"column1\", \"column2\", \"column3\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [column1 = 1, column2 = 4, column3 = 6],\r\n    [column1 = 2, column2 = 5, column3 = 7],\r\n    [column1 = 3, column2 = null, column3 = 8],\r\n    [column1 = null, column2 = null, column3 = 9]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "lists": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromList",
      "Documentation": {
        "Documentation.Name": "Table.FromList",
        "Documentation.Description": "通过将指定的拆分函数应用于列表中的每一项，将列表转换为表。",
        "Documentation.LongDescription": "通过将可选的拆分函数 <code>splitter</code> 应用于列表中的每一项，将列表 <code>list</code> 转换为表。默认情况下，假定列表是用逗号分隔的文本值的列表。可选的 <code>columns</code> 可以是列数、列的列表或 TableType。还可以指定可选的 <code>default</code> 和 <code>extraValues</code>。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "使用默认拆分器从列表创建表。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    null,\r\n    {\"Letter\", \"Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Letter = \"a\", #\"Example Word\" = \"apple\"],\r\n    [Letter = \"b\", #\"Example Word\" = \"ball\"],\r\n    [Letter = \"c\", #\"Example Word\" = \"cookie\"],\r\n    [Letter = \"d\", #\"Example Word\" = \"door\"]\r\n})"
          },
          {
            "Description": "使用自定义拆分器从列表创建表。",
            "Code": "Table.FromList(\r\n    {\"a,apple\", \"b,ball\", \"c,cookie\", \"d,door\"},\r\n    Splitter.SplitByNothing(),\r\n    {\"Letter and Example Word\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [#\"Letter and Example Word\" = \"a,apple\"],\r\n    [#\"Letter and Example Word\" = \"b,ball\"],\r\n    [#\"Letter and Example Word\" = \"c,cookie\"],\r\n    [#\"Letter and Example Word\" = \"d,door\"]\r\n})"
          },
          {
            "Description": "使用 Record.FieldValues 拆分器从列表中创建表。",
            "Code": "Table.FromList(\r\n    {\r\n        [CustomerID = 1, Name = \"Bob\"],\r\n        [CustomerID = 2, Name = \"Jim\"]\r\n    },\r\n    Record.FieldValues,\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [CustomerID = 2, Name = \"Jim\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "list": "list",
        "splitter": "function",
        "columns": "any",
        "default": "any",
        "extraValues": "ExtraValues.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRecords",
      "Documentation": {
        "Documentation.Name": "Table.FromRecords",
        "Documentation.Description": "将记录列表转换为表。",
        "Documentation.LongDescription": "将记录列表 <code>records</code> 转换为表。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "使用记录字段名称作为列名称，通过记录创建表。",
            "Code": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "使用键入的列通过记录创建表并选择数字列。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[CustomerID = 1, Name = \"Bob\"]},\r\n        type table[CustomerID = Number.Type, Name = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"CustomerID\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "records": "list",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromRows",
      "Documentation": {
        "Documentation.Name": "Table.FromRows",
        "Documentation.Description": "从行值列表和可选列创建一个表",
        "Documentation.LongDescription": "从列表 <code>rows</code> 创建一个表，其中该列表的每个元素都是一个包含用于单一行的列值的内部列表。可以为 <code>columns</code> 提供可选的列名列表、表类型或若干列。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "使用列 [CustomerID] 以及值 {1, 2}、列 [Name] 以及值 {\"Bob\", \"Jim\"}、列 [Phone] 以及值 {\"123-4567\", \"987-6543\"} 返回一个表。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    {\"CustomerID\", \"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "使用列 [CustomerID] 以及值 {1, 2}、列 [Name] 以及值 {\"Bob\", \"Jim\"}、列 [Phone] 以及值 {\"123-4567\", \"987-6543\"} 返回一个表，其中 [CustomerID] 是数值类型，[Name] 和 [Phone] 是文本类型。",
            "Code": "Table.FromRows(\r\n    {\r\n        {1, \"Bob\", \"123-4567\"},\r\n        {2, \"Jim\", \"987-6543\"}\r\n    },\r\n    type table [CustomerID = number, Name = text, Phone = text]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "rows": "list",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FromValue",
      "Documentation": {
        "Documentation.Name": "Table.FromValue",
        "Documentation.Description": "从提供的值创建具有一列的表。",
        "Documentation.LongDescription": "使用包含提供的值或值列表 <code>value</code> 的列创建表。可选记录参数 <code>options</code> 可以指定为控制以下选项:\r\n    <ul>\r\n    <li> <code>DefaultColumnName</code> : 从列表或标量值构造表时使用的列名。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "从值 1 创建一个表。",
            "Code": "Table.FromValue(1)",
            "Result": "Table.FromRecords({[Value = 1]})"
          },
          {
            "Description": "从列表创建一个表。",
            "Code": "Table.FromValue({1, \"Bob\", \"123-4567\"})",
            "Result": "Table.FromRecords({\r\n    [Value = 1],\r\n    [Value = \"Bob\"],\r\n    [Value = \"123-4567\"]\r\n})"
          },
          {
            "Description": "使用自定义列名从值 1 创建一个表。",
            "Code": "Table.FromValue(1, [DefaultColumnName = \"MyValue\"])",
            "Result": "Table.FromRecords({[MyValue = 1]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PartitionValues",
      "Documentation": {
        "Documentation.Name": "Table.PartitionValues",
        "Documentation.Description": "返回有关如何对表进行分区的信息。",
        "Documentation.LongDescription": "返回有关如何对表进行分区的信息。 此时将返回一个表，其中的每列为原始表中的一个分区列，每行对应于原始表中的一个分区。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Profile",
      "Documentation": {
        "Documentation.Name": "Table.Profile",
        "Documentation.Description": "返回表中列的配置文件。",
        "Documentation.LongDescription": "<p>返回 <code>table</code> 中列的配置文件。</p>\r\n<p>为每一列返回以下信息(如果适用):\r\n<ul>\r\n  <li>最小值</li>\r\n  <li>最大值</li>\r\n  <li>平均值</li>\r\n  <li>标准偏差</li>\r\n  <li>计数</li>\r\n  <li>Null 计数</li>\r\n  <li>非重复计数</li>\r\n</ul>\r\n</p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "additionalAggregates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.PromoteHeaders",
      "Documentation": {
        "Documentation.Name": "Table.PromoteHeaders",
        "Documentation.Description": "将第一行值升级为新的列标题(即列名)。",
        "Documentation.LongDescription": "将第一行值升级为新的列标题(即列名)。默认情况下，仅将文本或数值升级为标题。有效选项:\r\n    <div>\r\n      <code>PromoteAllScalars</code> : 如果设置为 <code>true</code>，则使用 <code>Culture</code> (如果已指定，或当前文档区域设置)将第一行中的所有标量值升级为标题。\r\n    对于无法转换为文本的值，将使用默认列名。\r\n    </div>\r\n    <div>\r\n    <code>Culture</code> : 区域性名称，指定数据的区域性。\r\n    </div>\r\n",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "升级表中的第一行值。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Column1 = \"CustomerID\", Column2 = \"Name\", Column3 = #date(1980, 1, 1)],\r\n        [Column1 = 1, Column2 = \"Bob\", Column3 = #date(1980, 1, 1)]\r\n    })\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Column3 = #date(1980, 1, 1)]})"
          },
          {
            "Description": "将表的第一行中的所有标量升级为标题。",
            "Code": "Table.PromoteHeaders(\r\n    Table.FromRecords({\r\n        [Rank = 1, Name = \"Name\", Date = #date(1980, 1, 1)],\r\n        [Rank = 1, Name = \"Bob\", Date = #date(1980, 1, 1)]}\r\n    ),\r\n    [PromoteAllScalars = true, Culture = \"en-US\"]\r\n)",
            "Result": "Table.FromRecords({[1 = 1, Name = \"Bob\", #\"1/1/1980\" = #date(1980, 1, 1)]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveFirstN",
        "Documentation.Description": "返回跳过了前几个计数行的表。",
        "Documentation.LongDescription": "返回一个表，该表不包含表 <code>table</code> 的指定数量的前几行 <code>countOrCondition</code>。\r\n    删除的行数依赖于可选参数 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果忽略 <code>countOrCondition</code>，则只删除第一行。</li>\r\n    <li> 如果 <code>countOrCondition</code> 为数字，则将删除该数字那么多的行(从顶部开始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是条件，将删除满足此条件的行，直到行不满足条件为止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "删除表的第一行。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "删除表的前两行。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "删除表中 [CustomerID] <=2 的前几行。",
            "Code": "Table.RemoveFirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] <= 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "Table.RemoveLastN",
        "Documentation.Description": "返回一个表，其中删除了最后 N 行。",
        "Documentation.LongDescription": "返回一个表，该表不包含表 <code>table</code> 的最后 <code>countOrCondition</code> 行。\r\n        删除的行数依赖于可选参数 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果忽略 <code>countOrCondition</code>，则只删除最后一行。</li>\r\n    <li> 如果 <code>countOrCondition</code> 为数字，则将删除该数字那么多的行(从底部开始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是条件，将删除满足此条件的行，直到行不满足条件为止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "删除表的最后一行。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "删除表中 [CustomerID] > 2 的最后几行。",
            "Code": "Table.RemoveLastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] >= 2\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RemoveRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRowsWithErrors",
        "Documentation.Description": "返回一个表，其中已从输入表中删除了在至少一个单元中包含错误的行。如果指定了列列表，则只检查指定列中的单元内是否有错误。",
        "Documentation.LongDescription": "返回一个表，其中已从输入表中删除了在至少一个单元中包含错误的行。如果指定了列列表，则只检查指定列中的单元内是否有错误。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "从第一行中删除错误值。",
            "Code": "Table.RemoveRowsWithErrors(\r\n    Table.FromRecords({\r\n        [Column1 = ...],\r\n        [Column1 = 2],\r\n        [Column1 = 3]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 2],\r\n    [Column1 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ReverseRows",
      "Documentation": {
        "Documentation.Name": "Table.ReverseRows",
        "Documentation.Description": "返回一个表，其中的行以相反顺序排序。",
        "Documentation.LongDescription": "从输入 <code>table</code> 返回一个表，其中的行遵循相反顺序。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "使表中的行按相反顺序排列。",
            "Code": "Table.ReverseRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Schema",
      "Documentation": {
        "Documentation.Name": "Table.Schema",
        "Documentation.Description": "返回一个表，该表包含指定表的列的描述(即架构)。",
        "Documentation.LongDescription": "<p>返回一个表，该表描述 <code>table</code> 的列。</p>\r\n<p>该表中的各行分别描述 <code>table</code> 的某一列的属性:</p>\r\n<p><table>\r\n  <tr>\r\n    <td><b>列名</b></td>\r\n    <td><b>描述</b></td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Name</code></td>\r\n    <td>该列的名称。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Position</code></td>\r\n    <td>该列在 <code>table</code> 中的位置(从 0 开始)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>TypeName</code></td>\r\n    <td>该列的类型名称。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Kind</code></td>\r\n    <td>该列的类型种类。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsNullable</code></td>\r\n    <td>该列是否可以包含 <code>null</code> 值。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecisionBase</code></td>\r\n    <td><code>NumericPrecision</code> 和 <code>NumericScale</code> 字段的数值基数(例如，base-2、base-10)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericPrecision</code></td>\r\n    <td><code>NumericPrecisionBase</code> 指定的基数中数值列的精度。这是此类型的值可以表示的最大位数(包括小数位)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NumericScale</code></td>\r\n    <td><code>NumericPrecisionBase</code> 指定的基数中数值列的位数。这是此类型的值的小数部分的位数。值 <code>0</code> 指示不带小数位的固定位数。值 <code>null</code> 指示位数未知(因为它是浮点数或未定义)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>DateTimePrecision</code></td>\r\n    <td>日期或时间值的秒部分支持的最大小数位数。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>MaxLength</code></td>\r\n    <td><code>text</code> 列中允许的最大字符数，或 <code>binary</code> 列中允许的最大字节数。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>IsVariableLength</code></td>\r\n    <td>指示此列的长度可变(长达 <code>MaxLength</code>)还是为固定大小。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeTypeName</code></td>\r\n    <td>该列在源的本机类型系统中的类型名称(例如，在 SQL Server 中为 <code>nvarchar</code>)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>NativeDefaultExpression</code></td>\r\n    <td>此列的值在源的本机表达式语言中的默认表达式(例如，在 SQL Server 中为 <code>42</code> 或 <code>newid()</code>)。</td>\r\n  </tr>\r\n  <tr>\r\n    <td>&nbsp;</td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td><code>Description</code></td>\r\n    <td>该列的描述。</td>\r\n  </tr>\r\n</table></p>",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SelectRowsWithErrors",
      "Documentation": {
        "Documentation.Name": "Table.SelectRowsWithErrors",
        "Documentation.Description": "返回一个表，其中只具有输入表中的在至少一个单元中包含错误的那些行。如果指定了列列表，则只检查指定列中的单元内是否有错误。",
        "Documentation.LongDescription": "返回一个表，其中只具有输入表中的在至少一个单元中包含错误的那些行。如果指定了列列表，则只检查指定列中的单元内是否有错误。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "选择其行中包含错误的客户的名称。",
            "Code": "Table.SelectRowsWithErrors(\r\n    Table.FromRecords({\r\n        [CustomerID = ..., Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)[Name]",
            "Result": "{\"Bob\"}"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Skip",
      "Documentation": {
        "Documentation.Name": "Table.Skip",
        "Documentation.Description": "返回跳过了前几个计数行的表。",
        "Documentation.LongDescription": "返回一个表，该表不包含表 <code>table</code> 的指定数量的前几行 <code>countOrCondition</code>。\r\n    跳过的行数依赖于可选参数 <code>countOrCondition</code>。\r\n    <ul>\r\n    <li> 如果忽略 <code>countOrCondition</code>，则只跳过第一行。</li>\r\n    <li> 如果 <code>countOrCondition</code> 为数字，则将跳过该数字那么多的行(从顶部开始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是条件，将跳过满足此条件的行，直到行不满足条件为止。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "跳过表的第一行。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "跳过表的前两行。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "跳过表中 [Price] > 25 的前几行。",
            "Code": "Table.Skip(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    each [Price] > 25\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.StopFolding",
      "Documentation": {
        "Documentation.Name": "Table.StopFolding",
        "Documentation.Description": "防止任何下游操作针对原始数据源运行。",
        "Documentation.LongDescription": "防止任何下游操作针对 <code>table</code> 中的原始数据源运行。",
        "Documentation.Category": "Table.Other",
        "Documentation.Examples": [
          {
            "Description": "以防止任何下游操作在 SQL 服务器上作为查询运行的方式从 SQL 表中获取数据。",
            "Code": "let\r\n    Source = Sql.Database(\"SomeSQLServer\", \"MyDb\"),\r\n    MyTable = Source{[Item=\"MyTable\"]}[Data],\r\n    MyLocalTable = Table.StopFolding(dbo_MyTable)\r\nin\r\n    MyLocalTable",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Transpose",
      "Documentation": {
        "Documentation.Name": "Table.Transpose",
        "Documentation.Description": "使列成为行，并使行成为列。",
        "Documentation.LongDescription": "使列成为行，并使行成为列。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "使名称-值对的表行成为列。",
            "Code": "Table.Transpose(\r\n    Table.FromRecords({\r\n        [Name = \"Full Name\", Value = \"Fred\"],\r\n        [Name = \"Age\", Value = 42],\r\n        [Name = \"Country\", Value = \"UK\"]\r\n    })\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = \"Full Name\", Column2 = \"Age\", Column3 = \"Country\"],\r\n    [Column1 = \"Fred\", Column2 = 42, Column3 = \"UK\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Tables.GetRelationships",
      "Documentation": {
        "Documentation.Name": "Tables.GetRelationships",
        "Documentation.Description": "获取一组表之间的关系。",
        "Documentation.LongDescription": "获取一组表之间的关系。假定集 <code>tables</code> 的结构与导航表的结构相似。<code>dataColumn</code> 定义的列包含实际数据表。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tables": "table",
        "dataColumn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Database",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Database",
        "Documentation.LongDescription": "Connects to TeamDesk database and let you select a table and a view to retrieve the data from.",
        "Documentation.Examples": [
          {
            "Description": "Connect to sample TeamDesk database",
            "Code": "TeamDesk.Database(\"https://www.teamdesk.net/secure/db/57692\")",
            "Result": "Navigation table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.Select",
      "Documentation": {
        "Documentation.Name": "TeamDesk.Select",
        "Documentation.LongDescription": "Retrieves the data from select columns in provided table. You can also apply an additional filter for results as well as change the order in which records are retrieved.",
        "Documentation.Examples": [
          {
            "Description": "Selects text and date columns",
            "Code": "TeamDesk.Select(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", { \"Starter\", \"Start Date\", \"Participants\" })",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "columns": "any",
        "filter": "text",
        "orderBy": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TeamDesk.SelectView",
      "Documentation": {
        "Documentation.Name": "TeamDesk.SelectView",
        "Documentation.LongDescription": "Retrieves the data from provided table and view. You can also apply an additional filter for results.",
        "Documentation.Examples": [
          {
            "Description": "Retrieve all meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          },
          {
            "Description": "Retrieve today's meetings from List All view",
            "Code": "TeamDesk.SelectView(\"https://www.teamdesk.net/secure/db/57692\", \"Meeting\", \"List All\", \"[Start Date] = Today()\")",
            "Result": "#table(\r\n\t{ \"Starter\", \"Start Date\", \"Participants\" },\r\n\t{\r\n\t\t{ \"\"Joe\"\", #date(2018, 10, 12), 10 },\r\n\t\t// ...\r\n\t}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "table": "text",
        "view": "text",
        "filter": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Teradata.Database",
      "Documentation": {
        "Documentation.Name": "Teradata.Database",
        "Documentation.Description": "从 Teradata 数据库中返回 SQL 表和视图的表。",
        "Documentation.LongDescription": "从服务器 <code>server</code> 上的 Teradata 数据库返回 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TibcoTdv.DataSource",
      "Documentation": {
        "Documentation.DisplayName": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Caption": "Power BI Connector for TIBCO(R) Data Virtualization",
        "Documentation.Name": "Power BI Connector for TIBCO(R) Data Virtualization"
      },
      "ReturnType": "table",
      "Parameters": {
        "dsn": "text",
        "advancedOptions": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "TimeSeriesInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Azure 时序见解"
      },
      "ReturnType": "table",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Troux.Feed",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.Tables",
      "Documentation": {
        "Documentation.Description": "输入 Twilio 历史数据的月数进行检索。",
        "Documentation.DisplayName": "Twilio",
        "Documentation.Caption": "Twilio.Tables",
        "Documentation.Name": "Twilio",
        "Documentation.LongDescription": "返回包含相关 Twilio 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "historyMonths": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableSchema",
      "Documentation": {
        "Documentation.Name": "Type.TableSchema",
        "Documentation.Description": "返回包含指定表类型的列(即架构)的说明的表。",
        "Documentation.LongDescription": "<p>返回说明 <code>tableType</code> 的列的表。</p>\r\n<p>请参阅有关 <code>Table.Schema</code> 的文档，以了解生成的表的说明。</p>",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Usercube.Universes",
      "Documentation": {
        "Documentation.Name": "Usercube",
        "Documentation.LongDescription": "Provides data from a Usercube instance",
        "Documentation.Examples": [
          {
            "Description": "Returns the universe data defined in the Usercube database.",
            "Code": "Usercube.Universes(\"https://mycompany.usercube.com\")",
            "Result": "Navigation table containing Usercube's universes"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "serverUrl": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Feed",
      "Documentation": {
        "Documentation.Description": "Azure DevOps Services 源",
        "Documentation.DisplayName": "Azure DevOps Services 源",
        "Documentation.Caption": "VSTS.Feed",
        "Documentation.Name": "VSTS.Feed",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的 OData 源的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Traits",
      "Documentation": {
        "Documentation.Name": "Value.Traits",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Versions",
      "Documentation": {
        "Documentation.Name": "Value.Versions",
        "Documentation.Description": "Value.Versions",
        "Documentation.LongDescription": "Value.Versions",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Vena.Contents",
      "Documentation": {
        "Documentation.Name": "Vena 1.0.4",
        "Documentation.LongDescription": "Vena"
      },
      "ReturnType": "table",
      "Parameters": {
        "source": "text",
        "modelQuery": "text",
        "apiVersion": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VivaInsights.Data",
      "Documentation": {
        "Documentation.Name": "连接到 Viva Insights 数据",
        "Documentation.LongDescription": "从工作区分析导入每周指标和属性数据。",
        "Documentation.Examples": [
          {
            "Description": "返回一个表，其中包含分区中每个受测员工的可见属性和每周指标。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#表({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "advancedParameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Page",
      "Documentation": {
        "Documentation.Name": "Web.Page",
        "Documentation.Description": "返回 HTML 文档的内容(分解为其组成结构)，以及完整文档的表示形式及其删除标记后的文本。",
        "Documentation.LongDescription": "返回 HTML 文档的内容(分解为其组成结构)，以及完整文档的表示形式及其删除标记后的文本。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.KeyMetrics",
      "Documentation": {
        "Documentation.Description": "返回包含关键 Webtrends 指标的表。",
        "Documentation.DisplayName": "Webtrends.KeyMetrics",
        "Documentation.Caption": "Webtrends.KeyMetrics",
        "Documentation.Name": "Webtrends.KeyMetrics",
        "Documentation.LongDescription": "调用 Webtrends KeyMetrics 终结点，并将所有数据作为表返回。",
        "Documentation.Examples": [
          {
            "Description": "拉取包含最近 30 天内租户 98765 的关键指标的表",
            "Code": "Webtrends.KeyMetrics(\"98765\")",
            "Result": "包含关键指标的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Webtrends.Tables",
      "Documentation": {
        "Documentation.Description": "输入与你的 Webtrends 帐户相关联的配置文件 ID。",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Webtrends.Tables",
        "Documentation.Name": "Webtrends",
        "Documentation.LongDescription": "返回包含相关 Webtrends 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Witivio.Contents",
      "Documentation": {
        "Documentation.Name": "Witivio 365 - Configuration",
        "Documentation.LongDescription": "Witivio 365 - Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "botId": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "WorkplaceAnalytics.Data",
      "Documentation": {
        "Documentation.Name": "连接到 Viva Insights 数据",
        "Documentation.LongDescription": "从工作区分析导入每周指标和属性数据。",
        "Documentation.Examples": [
          {
            "Description": "返回一个表，其中包含分区中每个受测员工的可见属性和每周指标。",
            "Code": "VivaInsights.Data(\"5f142ea5-c08a-eb02-de68-41dccdefb141\")",
            "Result": "#表({\"Query1\"}, {{\"PersonId\"\"}, {\"PID\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scopeId": "text",
        "jobName": "text",
        "jobId": "text",
        "schemaType": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Document",
      "Documentation": {
        "Documentation.Name": "Xml.Document",
        "Documentation.Description": "返回 XML 文档的内容作为层次结构表。",
        "Documentation.LongDescription": "返回 XML 文档的内容作为层次结构表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Xml.Tables",
      "Documentation": {
        "Documentation.Name": "Xml.Tables",
        "Documentation.Description": "返回 XML 文档的内容作为平展表的嵌套集合。",
        "Documentation.LongDescription": "返回 XML 文档的内容作为平展表的嵌套集合。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "检索本地 xml 文件的内容。",
            "Code": "Xml.Tables(File.Contents(\"C:\\invoices.xml\"))",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "contents": "any",
        "options": "record",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Zendesk.Tables",
      "Documentation": {
        "Documentation.Description": "输入你的 Zendesk 帐户的 URL。",
        "Documentation.DisplayName": "Zendesk",
        "Documentation.Caption": "Zendesk.Tables",
        "Documentation.Name": "Zendesk",
        "Documentation.LongDescription": "返回包含相关 Zendesk 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AdoDotNet.DataSource",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.DataSource",
        "Documentation.Description": "返回 ADO.NET 数据源的架构集合。",
        "Documentation.LongDescription": "使用提供程序名称 <code>providerName</code> 和连接字符串 <code>connectionString</code> 返回 ADO.NET 数据源的架构集合。<code>connectionString</code> 可以是文本或属性值对的记录。属性值可以是文本或数字。可提供一个可选的记录参数 <code>options</code> 以指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n<li><code>TypeMap</code></li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AmazonRedshift.Database",
      "Documentation": {
        "Documentation.Name": "Amazon Redshift",
        "Documentation.Caption": "Amazon Redshift (Beta)",
        "Documentation.Description": "从 Amazon Redshift 数据库导入数据。",
        "Documentation.LongDescription": "返回一个表，其中列出了<code>数据库</code>中 Amazon Redshift 群集<code>服务器</code>上的表。可将可选记录参数<code>选项</code>指定用于控制以下选项:\r\n<ul>\r\n<li><code>提供程序名称</code>: 要用作连接的提供程序名称的文本值。使用 Microsoft 身份验证时将使用此项。</li>\r\n<li><code>批大小</code>: 在单次调用服务器时提取的行数。</li>\r\n</ul>\r\n  ",
        "Documentation.Examples": [
          {
            "Description": null,
            "Code": "AmazonRedshift.Database(\"contoso.redshift.amazonaws.com:5439\", \"dev\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AnalysisServices.Database",
      "Documentation": {
        "Documentation.Name": "AnalysisServices.Database",
        "Documentation.Description": "从 Analysis Services 数据库中返回多维数据集或表格模型的表。",
        "Documentation.LongDescription": "从服务器 <code>server</code> 上的 Analysis Services 数据库 <code>database</code> 中返回多维数据集或表格模型的表。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>Query</code> : 用于检索数据的本机 MDX 查询。</li>\r\n<li><code>TypedMeasureColumns</code> : 一个逻辑值，指示在多维模型或表格模型中指定的类型是否用作所添加的度量值列的类型。设置为 false 时，类型 &quot;number&quot; 将用于所有度量值列。此选项的默认值为 false。</li>\r\n<li><code>Culture</code> : 指定数据区域性的区域性名称。这对应于“区域设置标识符”连接字符串属性。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>SubQueries</code> : 一个数字(0、1 或 2)，设置连接字符串中 &quot;SubQueries&quot; 属性的值。该数字控制嵌套 select 或子多维数据集上计算成员的行为。(默认值为 2)。</li>\r\n<li><code>Implementation</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Anaplan.Contents",
      "Documentation": {
        "Documentation.Name": "Anaplan Connection Configuration"
      },
      "ReturnType": "table",
      "Parameters": {
        "apiUrl": "text",
        "authUrl": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ApacheSpark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "返回列出指定 Spark 群集上的表的表。",
        "Documentation.LongDescription": "使用<code>协议</code>返回列出 Spark 群集<code>主机</code>上的表的表，有效协议为:\r\nSparkProtocol.Standard, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "返回列出指定 Spark 群集上的表的表。",
            "Code": "Spark.Tables(\"http://example.com:10000/cliservice\", SparkProtocol.HTTP)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AutomationAnywhere.Feed",
      "Documentation": {
        "Documentation.Name": "Automation Anywhere - Login",
        "Documentation.LongDescription": "Automation Anywhere - Login"
      },
      "ReturnType": "table",
      "Parameters": {
        "CRVersion": "text",
        "CRHostName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDevOpsServer.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "输入组织和项目名称。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps Server (仅 Boards)",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的“分析”视图的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "HDInsight Interactive Query",
        "Documentation.Caption": null,
        "Documentation.Description": "从 HDInsight Interactive Query 导入数据",
        "Documentation.LongDescription": "\r\n从 HDInsight Interactive Query<code>服务器</code>上的<code>数据库</code>指定的 HDInsight Interactive Query 中返回表列表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的 <code>options</code> 参数来控制以下选项:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n</ul>\r\n将 <code>options</code> 参数指定为 [option1 = value1, option2 = value2...]。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cdm.MapToEntity",
      "Documentation": {
        "Documentation.Caption": "Cdm.MapToEntity",
        "Documentation.Description": "返回一个表，其中的列映射到 Common Data Model 中实体的属性，包括数据类型。",
        "Documentation.DisplayName": "Cdm.MapToEntity",
        "Documentation.LongDescription": "返回一个表，其中的列映射到 Common Data Model 中实体的属性，包括数据类型。将添加实体定义中的列(如果未映射)，并且将删除任何未映射的列。",
        "Documentation.Name": "Cdm.MapToEntity"
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnDefinitions": "any",
        "defaultType": "type",
        "defaultCdmClass": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cherwell.SavedSearches",
      "Documentation": {
        "Documentation.Name": "Cherwell Data Connector v1.0",
        "Documentation.LongDescription": "Returns the results of a Saved Search from a Cherwell Service Management REST API (requires CSM version 10.2 or later)."
      },
      "ReturnType": "table",
      "Parameters": {
        "API URL": "text",
        "Client ID": "text",
        "Locale": "text",
        "Saved Search URL": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "CloudBluePSA.Feed",
      "Documentation": {
        "Documentation.Name": "Retrieve all pages of data",
        "Documentation.LongDescription": "This function will resolve the page limitation issue and will retrieve and combine all pages of data returned by the API endpoint in an efficient manner."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Text.Type",
        "filter": "Text.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ApplyParameter",
      "Documentation": {
        "Documentation.Name": "Cube.ApplyParameter",
        "Documentation.Description": "在将参数应用到多维数据集后将其返回。",
        "Documentation.LongDescription": "通过 <code>arguments</code> 将 <code>parameter</code> 应用到 <code>cube</code> 后返回多维数据集。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "parameter": "any",
        "arguments": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.CollapseAndRemoveColumns",
      "Documentation": {
        "Documentation.Name": "Cube.CollapseAndRemoveColumns",
        "Documentation.Description": "通过折叠映射至指定列的属性，更改多维数据集筛选上下文的维度粒度。",
        "Documentation.LongDescription": "通过折叠映射至指定列 <code>columnNames</code> 的属性，更改 <code>cube</code> 的筛选上下文的维度粒度。还将从多维数据集的表格视图中删除列。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "columnNames": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.ReplaceDimensions",
      "Documentation": {
        "Documentation.Name": "Cube.ReplaceDimensions",
        "Documentation.Description": "替换 Cube.Dimensions 返回的维度集。",
        "Documentation.LongDescription": "替换 <code>Cube.Dimensions</code> 返回的维度集。\r\n    例如，此函数可用于向维度属性添加 ID 列，以便数据源可以按 ID 而不是显示的值进行分组。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensions": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.Transform",
      "Documentation": {
        "Documentation.Name": "Cube.Transform",
        "Documentation.Description": "应用多维数据集函数列表。",
        "Documentation.LongDescription": "在 <code>cube</code> 上应用多维数据集函数列表 <code>transforms</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "transforms": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DB2.Database",
      "Documentation": {
        "Documentation.Name": "DB2.Database",
        "Documentation.Description": "返回 Db2 数据库中可用的 SQL 表和视图的表。",
        "Documentation.LongDescription": "返回服务器 <code>server</code> (在名为 <code>database</code> 的数据库实例中)上 Db2 数据库中可用的 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n<li><code>Implementation</code> : 指定要使用的内部数据库提供程序实现。有效值为: &quot;IBM&quot; 和 &quot;Microsoft&quot;。</li>\r\n<li><code>BinaryCodePage</code> : CCSID (编码字符集标识符)的编号，用于将 Db2 FOR BIT 二进制数据解码为字符串。适用于 Implementation = &quot;Microsoft&quot;。设置为 0 可禁用转换(默认值)。设置为 1 可根据数据库编码进行转换。设置其他 CCSID 编号可转换为应用程序编码。</li>\r\n<li><code>PackageCollection</code> : 为包集合指定字符串值(默认值为 &quot;NULLID&quot;)以启用处理 SQL 语句所需的共享包。适用于 Implementation = &quot;Microsoft&quot;。</li>\r\n<li><code>UseDb2ConnectGateway</code> : 指定是否通过 Db2 连接网关进行连接。适用于实现 = &quot;Microsoft&quot;。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataVirtuality.Database",
      "Documentation": {
        "Documentation.Name": "Data Virtuality LDW",
        "Documentation.LongDescription": "Data Virtuality LDW",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAB0VBMVEUAAAD9VAD9VAD9VQD8UwD8UwD/UgD/YAD8VAD8UwD/VQD/TgD9VAD9VAD/WQD9VAD9VQD9VAD8VQD9VAD9VQD/WAD9VAD9VAD/QAD9VAD+VAD9UwD8VQD/WAD9UwD9VAD9VAD9VQD9VAD/UwD9VAD8VQD7UwD9UwD9VAD/ZgD/VQD7VQD+VQD+VAD9VAD8VAD9VAD8VQD9VAD+VAD+VAD9VAD8VQD8VAD9VAD9VQD+VAD9UwD9VAD+VQD/UgD8UwD/VQD/VQD9VAD9VAD/XQD/gAD9UwD9VAD9VQD9VAD9VAD8UwD+VAD9VQD/AAD9UwD8VAD/VQD9VAD9UwD9UwD9VAD9UwD/VQD+VAD9VAD/UgD/UQD8VAD9VAD9VAD/VQD9VQD9VAD8UwD9VAD9VAD9VAD8VQD9VAD9UwD/VQD9VAD9VAD9UwD8VQD9VAD+VAD9VAD8VAD9VAD9UwD+VAD8VQD8VAD8VAD/UgD8VAD9VQD8UwD/VQD9VAD9VAD9VAD/UgD9VAD9UwD+VQD9VAD9VAD8VAD7VAD/UwD/UAD/UwD/SQD/VQD8UwD9UwD9UwD8VQD8VAD9VAD/WwD7UwD/WgD/VQD9VAD9VAD9VAD////dQrB6AAAAmXRSTlMAfNjQX2I+CF5WBg3ngxTjzYZXhWkd99sEnrefUSBonYxs9jH9wUSN1wUkSL6z82TUXZK6sPTKSehvsZz1sjtZAwn53gsClptm/tVNtngBpcI2o4ri/Kghv20cFsn4iA917lPs6XlLdoQS7aTcxKC95cOVgbROYUwfxn5cMGpnmjjda7vR2sBDIhA0Bx5lkNZjUuoORxEt4X/Uy7aCAAAAAWJLR0SamN9nEgAAAAd0SU1FB+MGEhMlMY4ZZMwAAAHrSURBVDjLfVP3WxNBEB2kHEZKBCEUaTHSYiNUNYFESMjFEHoRTSyolNAUkKKogKHbUND5b93Zu1vvy346P9zMvPd2Zm93FiDJUs6lpsF/LB2ZZci4knneQv5CFgmyJT4nF9GqsOAi8ZgnCfIJvgRQUEiBrUgSFBNeAlDKC1wmqKy8ojJHCKoItytXHOSvgqW6ppZHdYagnq90XuOu9PoN1O2mKGGj9BYmW4MQuHSksanZxLcoQtCqIW0At/HOXb4Vt6dc49tTOrzgsyPec3k6u8AfAOhm7Zw+fW1QRQzdhzBiD4CfbTsC0MsK9PWbt4d9A4iDouHQMIPUkVGejIktqQ903jL+8BEB0dhjlj0x+KfPTEcb07CJIGsYfK4lL0z8ywlj2SRd8ZSdwgGYNviav0cxw4GCOPsVnLWKCnOI8wtcsKgj/a9Y8loIlhCXYYVdmPpGR3yrIcQpiLCWa+tLG6yn3QdFb7PfcbZuM8wHJfr+A34Eb1Tr3irq+ddN97O1vaNHLiFYkW75E30SQpBp4O5lPnq4u8fdviE44KOecDkV7dzVwyM3+W1R4vjzl80yClb5yjiAh3xAmm3/V8IL1/T39U0SfOcFYvTQ2I+1jUuCDeJPflB49DPtVOLhzKG9r39bg+3X70gS9gcfgQLGL9JAEQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAxOS0wNi0xOFQxOTowOTo0MSswMDowMHnJhwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMTktMDYtMThUMTk6MDk6NDMrMDA6MDCfCy6fAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DataWorld.Dataset",
      "Documentation": {
        "Documentation.Name": "DataWorld.Dataset",
        "Documentation.LongDescription": "从 Data.World 检索数据集"
      },
      "ReturnType": "table",
      "Parameters": {
        "owner": "text",
        "id": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Catalogs",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Catalogs",
      "Documentation": {
        "Documentation.Name": "Databricks"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Dremio.DatabasesV300",
      "Documentation": {
        "Documentation.Name": "Dremio Software",
        "Documentation.LongDescription": "Returns a table listing the datasets on Dremio Server. This will be the same list as shown in Power BI Navigator. See https://docs.microsoft.com/en-us/powerquery-m/odbc-datasource",
        "Documentation.Examples": [
          {
            "Description": "How to return the list of datasets on localhost with an encrypted connection.",
            "Code": "Dremio.DatabasesV300(\"localhost:31010\",\"Enabled\")",
            "Result": "A table listing the datasets on localhost."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encryption": "text",
        "engine": "text",
        "routingTag": "text",
        "routingQueue": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "EduFrame.Contents",
      "Documentation": {
        "Documentation.Name": "Eduframe"
      },
      "ReturnType": "table",
      "Parameters": {
        "domainSlug": "text",
        "personalInput": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Exasol.Database",
      "Documentation": {
        "Documentation.Name": "Exasol",
        "Documentation.LongDescription": "Exasol",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gMJCSYX4iwYHwAAA+tJREFUWMOll11oHUUUx3+73hA/qj4YqUZ9sPGxaz+wKoKCrpiRusGHUEWhBm2bUgNttWpBUVFRUWL9wD7c+gFiFK2gzSieSgc/QONDApKpPvjgB6WgKdZq1bbpTdaHzCbrzd3ZDR64D8s98/+f+Z8zZ85ARUtEkYiq5hzFVWGpJaJWAl3AyQKfaWBEKzlUKYAoBmsgis8ArgPaCjxD4EiQiLoWGAYWeWBfAwa0kmMLUOBR4JESzztD4DPggRLHPuCW0jTMSd8N3FOC+TTwZqiVpEAdGPI4h85nuVbSOog56TuBncCZHrwvgOew5mSYiEIrabiIrWdRG7A7EbV4XhBz5G0uXUs8OL8Am7HmEFFMmIFpJRPArcBhz+JLgHcSUe2zQWTkM/ayk99n67Hmm7y0s6aVfAf0lgBcAzzj/PMqbATWlqzdjDUf5lULms86EAD3As96gBrAHcBbWglE8eXAHuA8z5o3gLuARk4xak0KAKSJqDpwNdBT1D9cFe8Hxt136iG3wENY02hV3fM6nlbyJ7AJ+NkDehEw1LNXnY41XznVWtk/QD/WHGjVIecFkOVVKzno6mHKE8TSNOW9mT2atwvSthVrRnznu7D3ayWjwO0lhdWdiHrMBXE/kKtMnsea+uzOc7nPLCi7gJzPILDV4/oHsFYrGebS+BxSPgcmgNXAsSJyrwK5lKTA465lF9nZwIuJqE7GzW/AGmAd1njJSxVoUuNi10Iv9LjtDwJWDHdLoypuWIE4U+JHYKzEfWmasmohc8FCFNgOPFmyZoNWsqv9qrh24igp1kz9LwWy3SeirndXto/8pb8m0lcBThxlO7C+igpByTEkEdUJjALne3A+JaVX3yiHieJeYDcwCazCmvGmC6s8gBx5DfgIuMFD/iuwWisZI4qXAN8Cp7r/DgIR1vxeFERRK84+dzryoj4/BfRrJWPBsngxsC9HDnAB8D5R3O7mhQWl4G7gBeAUz+63aSWDwbJ4UTrNLjdPtLJB4D6sSSsVYSLqSjdU+sjrTiHSaW7ykAMMzN6sTSqELSq+wwF3eABHgSdyU7J2vyJrB14hiruaUxE2FV3gxqoVHrAjwBat5EBuJPsb2AL85FnXAQwRxWflgwibim6H6+M+69dKvpwbNUwWxA/AbZ4HDsAVwOv5dfkU9AEbSsgf1krebXFasmBG3Kjmsx6i+MEsiMCBrQQ+cFNOke1x6kzOI/5v7685JQdKru81WPNJmIg61x0TH/n37shNevdmDW7uewr4uuT63kEUdwWJqJtd3z7uaTZ1rWRf5XfhTH4vA7Z5HqenAcM14GNgbwns8cK8+49qX8kFlv4LfFV/DJ8HVEEAAAAASUVORK5CYII="
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "encrypted": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Github.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the GitHub repository owner and the repository name.",
        "Documentation.DisplayName": "GitHub",
        "Documentation.Caption": "GitHub.Tables",
        "Documentation.Name": "GitHub",
        "Documentation.LongDescription": "Returns a table with relevant GitHub data."
      },
      "ReturnType": "table",
      "Parameters": {
        "RepositoryOwner": "text",
        "Repository": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HdInsight.Files",
      "Documentation": {
        "Documentation.Name": "HdInsight.Files",
        "Documentation.Description": "返回包含从 Azure 存储库的指定容器中找到的 Blob 属性和内容的表。",
        "Documentation.LongDescription": "返回包含从 Azure 存储库的容器 URL <code>account</code> 中找到的每个 Blob 文件行的表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "account": "text",
        "containerName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ApplySelectList",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "serviceRoot": "text",
        "inputSelectListTarget": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Html.Table",
      "Documentation": {
        "Documentation.Name": "Html.Table",
        "Documentation.Description": "返回一个表，该表包含针对提供的 HTML 运行指定 CSS 选择器的结果。",
        "Documentation.LongDescription": "返回一个表，其中包含针对所提供的 <code>html</code> 运行指定 CSS 选择器的结果。可提供可选的记录参数 <code>options</code> 来指定附加属性。此记录可包含以下字段:\r\n    <ul>\r\n<li><code>RowSelector</code></li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "正在访问数据",
        "Documentation.Examples": [
          {
            "Description": "从示例 html 文本值返回一个表。",
            "Code": "Html.Table(\"<div class=\"\"name\"\">Jo</div><span>Manager</span>\", {{\"Name\", \".name\"}, {\"Title\", \"span\"}}, [RowSelector=\".name\"])",
            "Result": "#table({\"Name\", \"Title\"}, {{\"Jo\", \"Manager\"}})"
          },
          {
            "Description": "从示例 html 文本值中提取所有 href。",
            "Code": "Html.Table(\"<a href=\"\"/test.html\"\">Test</a>\", {{\"Link\", \"a\", each [Attributes][href]}})",
            "Result": "#table({\"Link\"}, {{\"/test.html\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "html": "any",
        "columnNameSelectorPairs": "list",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Indexima.Database",
      "Documentation": {
        "Documentation.Name": "Indexima v1.7.5",
        "Documentation.LongDescription": "Connection to Indexima Data Hub"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number",
        "ODBCdriver": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Informix.Database",
      "Documentation": {
        "Documentation.Name": "Informix.Database",
        "Documentation.Description": "返回包含 Informix 数据库中可用的 SQL 表和视图的表。",
        "Documentation.LongDescription": "返回服务器 <code>server</code> 上 Informix 数据库(在名为 <code>database</code> 的数据库实例中)中可用的 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "JethroODBC.Database",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MarkLogicODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MarkLogic ODBC (v3.0.2)",
        "Documentation.LongDescription": "Returns the list of tables returned from the ODBC driver",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "port": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Leads",
      "Documentation": {
        "Documentation.Name": "Marketo.Leads",
        "Documentation.DisplayName": "Marketo.Leads",
        "Documentation.Caption": "Marketo.Leads",
        "Documentation.Description": "返回包含潜在客户详细信息的表。",
        "Documentation.LongDescription": "在 <code>url</code>/rest/v1/leads.json 上调用 Marketo REST API 终结点。返回列表 <code>leadIds</code> 中的所有潜在客户。",
        "Documentation.Examples": [
          {
            "Description": "拉取三个潜在客户的详细信息",
            "Code": "Marketo.Leads(\"https://100-AAA-999.mktorest.com/rest\", {50, 2343, 88498})",
            "Result": "包含提供的潜在客户详细信息的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "leadIds": "list",
        "options": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Marketo.Tables",
      "Documentation": {
        "Documentation.Description": "输入与你的帐户关联的 Marketo REST API 终结点的 URL。",
        "Documentation.DisplayName": "Marketo",
        "Documentation.Caption": "Marketo.Tables",
        "Documentation.Name": "Marketo",
        "Documentation.LongDescription": "返回包含相关 Marketo 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "QueryStart": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MongoDBAtlasODBC.Contents",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "MySQL.Database",
      "Documentation": {
        "Documentation.Name": "MySQL.Database",
        "Documentation.Description": "返回 MySQL 数据库中可用的 SQL 表、视图和存储标量函数的表。",
        "Documentation.LongDescription": "返回服务器 <code>server</code> 上 MySQL 数据库(在名为 <code>database</code> 的数据库实例中)中可用的 SQL 表、视图和存储标量函数的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>Encoding</code> : 指定用于对发送到服务器的所有查询进行编码的字符集的 TextEncoding 值(默认值为 null)。</li>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>TreatTinyAsBoolean</code> : 一个逻辑值(true/false)，用于确定是否将服务器上的 tinyint 列强制设置为逻辑值。默认值为 true。</li>\r\n<li><code>OldGuids</code> : 一个逻辑值(true/false)，用于设置将 char(36)列(如果为 false)还是 binary(16)列(如果为 true)视为 GUID。默认值为 false。</li>\r\n<li><code>ReturnSingleDatabase</code> : 一个逻辑值(true/false)，用于设置是返回所有数据库的所有表(如果为 false)，还是返回指定数据库的表和视图(如果为 true)。默认值为 false。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，可以将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Netezza.Database",
      "Documentation": {
        "Documentation.Name": "IBM Netezza",
        "Documentation.Caption": "IBM Netezza",
        "Documentation.Description": "从 IBM Netezza 数据库导入数据。",
        "Documentation.LongDescription": "\r\n从服务器 <code>server</code> 上的 Netezza 服务器数据库 <code>database</code> 中返回 Netezza 表、视图和存储函数的表。可根据需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n<ul>\r\n        <li><code>CreateNavigationProperties</code>: 一个逻辑值(true/false)，用于设置是否在返回的值上生成导航属性(默认值为 true)</li>\r\n        <li><code>HierarchicalNavigation</code>: 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)</li>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段，用于控制在放弃尝试与服务器建立连接之前等待的时间。默认值与驱动程序相关。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段，用于控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n<li><code>NormalizeDatabaseName</code>: 一个逻辑值(true/false)，用于设置是否将数据库名称规范化为大写或按字面意义解释(默认值为 true)</li>\r\n</ul>\r\n将记录参数指定为 [option1 = value1, option2 = value2...]。",
        "Documentation.Examples": [
          {
            "Description": "列出 IBM Netezza 项目中的表。",
            "Code": "Netezza.Database(\"netezza:5480\", \"netezza_database\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Odbc.Query",
      "Documentation": {
        "Documentation.Name": "Odbc.Query",
        "Documentation.Description": "返回在 ODBC 数据源上运行本机查询的结果。",
        "Documentation.LongDescription": "返回通过使用 ODBC 的连接字符串 <code>connectionString</code> 运行 <code>query</code> 的结果。<code>connectionString</code> 可以为文本或属性值对记录。属性值可以为文本或数字。可提供一个可选的记录参数 <code>options</code> 以指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值为 15 秒。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "返回针对提供的连接字符串运行简单查询的结果。",
            "Code": "Odbc.Query(\"dsn=your_dsn\", \"select * from Customers\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "OleDb.Query",
      "Documentation": {
        "Documentation.Name": "OleDb.Query",
        "Documentation.Description": "返回在 OLE DB 数据源上运行本机查询的结果。",
        "Documentation.LongDescription": "返回通过使用 OLE DB 的连接字符串 <code>connectionString</code> 运行 <code>query</code> 的结果。<code>connectionString</code> 可以是文本或属性值对的记录。属性值可以是文本或数字。可提供一个可选的记录参数 <code>options</code> 来指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PlanviewEnterprise.Feed",
      "Documentation": {
        "Documentation.Description": "Enter the URL and database name associated with your Planview Portfolios account.",
        "Documentation.DisplayName": "PlanviewEnterprise.Feed",
        "Documentation.Caption": "PlanviewEnterprise.Feed",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of Planview Portfolios information",
            "Code": "PlanviewEnterprise.Feed(\"https://contoso.com/planview\", \"pve\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "PostgreSQL.Database",
      "Documentation": {
        "Documentation.Name": "PostgreSQL.Database",
        "Documentation.Description": "返回 PostgreSQL 数据库中可用的 SQL 表和视图的表。",
        "Documentation.LongDescription": "返回服务器 <code>server</code> 上 PostgreSQL 数据库(在名为 <code>database</code> 的数据库实例中)中可用的 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SDMX.Contents",
      "Documentation": {
        "Documentation.Name": "SIS-CC SDMX Connector for SDMX-CSV web services",
        "Documentation.LongDescription": "Get data from an SDMX RESTful web service that supports the CSV format.",
        "Documentation.Examples": [
          {
            "Description": "Get data from an SDMX RESTful web service that supports the CSV format.",
            "Code": "SDMX.Contents(url,\"Show codes and labels\",\"en\")",
            "Result": "Data from the SDMX web service in a table format."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "Uri.Type",
        "Option": "text",
        "Language": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.DataSource",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Database",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SingleStoreODBC.Query",
      "Documentation": {
        "Documentation.Name": "SingleStore database",
        "Documentation.LongDescription": "The SingleStore Connector is a high-performance connector that lets you DirectQuery and import data from your SingleStore instance."
      },
      "ReturnType": "table",
      "Parameters": {
        "ServerAddr": "text",
        "Database": "text",
        "Query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Snowflake.Databases",
      "Documentation": {
        "Documentation.Name": "Snowflake",
        "Documentation.Caption": "Snowflake",
        "Documentation.Description": "从 Snowflake 计算仓库导入数据。",
        "Documentation.LongDescription": "返回一个表，其中列出<code>服务器</code>的 Snowflake Computing <code>仓库</code>中的表。可指定一个可选记录参数 <code>options</code> 来控制以下选项:\r\n<ul>\r\n<li><code>Role</code>: 一个文本值，用作连接的角色名称。</li>\r\n<li><code>CreateNavigationProperties</code>: 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)</li>\r\n<li><code>ConnectionTimeout</code>: 等待来自 Snowflake 的网络响应的秒数。</li>\r\n<li><code>CommandTimeout</code>: 等待执行查询的秒数。</li>\r\n</ul>\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "列出 Snowflake 仓库中的表。",
            "Code": "Snowflake.Databases(\"contoso.snowflakecomputing.com\", \"CONTOSO_WH\")"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "warehouse": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Spark.Tables",
      "Documentation": {
        "Documentation.Name": "Spark.Tables",
        "Documentation.Caption": "Spark",
        "Documentation.Description": "返回列出指定 Spark 群集上的表的表。",
        "Documentation.LongDescription": "使用<code>协议</code>返回列出 Spark 群集<code>主机</code>上的表的表，有效协议为:\r\nSparkProtocol.Standard, SparkProtocol.Azure, SparkProtocol.HTTP",
        "Documentation.Examples": [
          {
            "Description": "列出 Azure Spark 实例中的表。",
            "Code": "Spark.Tables(\"contoso.azurehdinsight.net\", SparkProtocol.Azure)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "protocol": "SparkProtocol.Type",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sql.Database",
      "Documentation": {
        "Documentation.Name": "Sql.Database",
        "Documentation.Description": "从 SQL Server 数据库中返回 SQL 表、视图和存储函数的表。",
        "Documentation.LongDescription": "从服务器 <code>server</code> 上的 SQL Server 数据库 <code>database</code> 返回 SQL 表、视图和存储函数的表。可以视需要指定服务器的端口，并用冒号或逗号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>MaxDegreeOfParallelism</code> : 一个数字，用于设置生成的 SQL 查询中 &quot;maxdop&quot; 查询子句的值。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n<li><code>MultiSubnetFailover</code> : 一个逻辑值(true/false)，用于设置连接字符串中 &quot;MultiSubnetFailover&quot; 属性的值(默认值为 false)。</li>\r\n<li><code>UnsafeTypeConversions</code> : 一个逻辑值(true/false)；如果为 true，则尝试折叠可能会失败并导致整个查询失败的类型转换。不建议用于常规用途。</li>\r\n<li><code>ContextInfo</code> : 一个二进制值，用于在运行每个命令之前设置 CONTEXT_INFO。</li>\r\n<li><code>OmitSRID</code> : 一个逻辑值(true/false)；如果为 true，则在从几何图形和地理类型生成已知文本时省略 SRID。</li>\r\n<li><code>EnableCrossDatabaseFolding</code> : 一个逻辑 (true/false) 值，如果为 true，则允许查询折叠同一服务器上的数据库。默认值为 false。</li>\r\n</ul>\r\n\r\n    例如，将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "StarburstPresto.Contents",
      "Documentation": {
        "Documentation.Name": "Starburst Enterprise"
      },
      "ReturnType": "table",
      "Parameters": {
        "Host": "text",
        "Port": "number",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Sybase.Database",
      "Documentation": {
        "Documentation.Name": "Sybase.Database",
        "Documentation.Description": "返回 Sybase 数据库中可用的 SQL 表和视图的表。",
        "Documentation.LongDescription": "返回服务器 <code>server</code> 上 Sybase 数据库(在名为 <code>database</code> 的数据库实例中)中可用的 SQL 表和视图的表。可以视需要指定服务器的端口，并用冒号分隔。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 true)。</li>\r\n<li><code>NavigationPropertyNameGenerator</code> : 一个函数，用于创建导航属性的名称。</li>\r\n<li><code>Query</code> : 用于检索数据的本机 SQL 查询。如果查询生成多个结果集，则仅返回第一个结果集。</li>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>ConnectionTimeout</code> : 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n</ul>\r\n\r\n    例如，将记录参数指定为 [option1 = value1, option2 = value2...] 或 [Query = \"select ...\"]。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.AddIndexColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddIndexColumn",
        "Documentation.Description": "使用显式位置值追加列。",
        "Documentation.LongDescription": "使用显式位置值将名为 <code>newColumnName</code> 的列追加到 <code>table</code>。\r\n    可选值 <code>initialValue</code> 为初始索引值。可选值 <code>increment</code> 指定每个索引值的增量值。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将名为 \"Index\" 的索引列添加到表。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 0],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 2],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 3]\r\n})"
          },
          {
            "Description": "从值 10 开始、按 5 递增将名为 \"index\" 的索引列添加到表。",
            "Code": "Table.AddIndexColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Index\",\r\n    10,\r\n    5\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Index = 10],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Index = 15],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", Index = 20],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\", Index = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "initialValue": "number",
        "increment": "number",
        "columnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ConformToPageReader",
      "Documentation": {
        "Documentation.Name": "Table.ConformToPageReader",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "shapingFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ExpandListColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandListColumn",
        "Documentation.Description": "给定表中的列表列之后，为其列表中的每个值创建行的副本。",
        "Documentation.LongDescription": "给定 <code>table</code> 后(其中 <code>column</code> 是值列表)，针对每个值将列表拆分为一行。将在每个创建的新行中复制其他列的值。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "拆分表中的列表列 [Name]。",
            "Code": "Table.ExpandListColumn(\r\n    Table.FromRecords({[Name = {\"Bob\", \"Jim\", \"Paul\"}, Discount = .15]}),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\", Discount = 0.15],\r\n    [Name = \"Jim\", Discount = 0.15],\r\n    [Name = \"Paul\", Discount = 0.15]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillDown",
      "Documentation": {
        "Documentation.Name": "Table.FillDown",
        "Documentation.Description": "将前一个单元的值传播到该列中下面的值为 Null 的单元中。",
        "Documentation.LongDescription": "从指定的 <code>table</code> 中返回一个表，其中前一个单元的值传播到指定的 <code>columns</code> 下值为 Null 的单元。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "从表返回一个表，其中，列 [Place] 中的 null 值使用这些值上方的值填充。",
            "Code": "Table.FillDown(\r\n    Table.FromRecords({\r\n        [Place = 1, Name = \"Bob\"],\r\n        [Place = null, Name = \"John\"],\r\n        [Place = 2, Name = \"Brad\"],\r\n        [Place = 3, Name = \"Mark\"],\r\n        [Place = null, Name = \"Tom\"],\r\n        [Place = null, Name = \"Adam\"]\r\n    }),\r\n    {\"Place\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Place = 1, Name = \"Bob\"],\r\n    [Place = 1, Name = \"John\"],\r\n    [Place = 2, Name = \"Brad\"],\r\n    [Place = 3, Name = \"Mark\"],\r\n    [Place = 3, Name = \"Tom\"],\r\n    [Place = 3, Name = \"Adam\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FillUp",
      "Documentation": {
        "Documentation.Name": "Table.FillUp",
        "Documentation.Description": "将一个单元的值传播到该列中上面的值为 Null 的单元中。",
        "Documentation.LongDescription": "从指定的 <code>table</code> 中返回一个表，其中下一个单元的值传播到指定的 <code>columns</code> 上面值为 Null 的单元。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "从表返回一个表，其中，列 [Column2] 中的 null 值使用这些值下方的值填充。",
            "Code": "Table.FillUp(\r\n    Table.FromRecords({\r\n        [Column1 = 1, Column2 = 2],\r\n        [Column1 = 3, Column2 = null],\r\n        [Column1 = 5, Column2 = 3]\r\n    }),\r\n    {\"Column2\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1, Column2 = 2],\r\n    [Column1 = 3, Column2 = 3],\r\n    [Column1 = 5, Column2 = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FindText",
      "Documentation": {
        "Documentation.Name": "Table.FindText",
        "Documentation.Description": "返回表中包含给定文本的所有行。",
        "Documentation.LongDescription": "返回表 <code>table</code> 中包含文本 <code>text</code> 的行。如果找不到文本，则返回空表。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "查找表中包含 \"Bob\" 的行。",
            "Code": "Table.FindText(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Bob\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FirstN",
      "Documentation": {
        "Documentation.Name": "Table.FirstN",
        "Documentation.Description": "返回指定的前几个计数行。",
        "Documentation.LongDescription": "返回表 <code>table</code> 的前几行，具体取决于 <code>countOrCondition</code> 的值:\r\n    <ul>\r\n    <li> 如果 <code>countOrCondition</code> 为数字，则将返回多行(从顶部开始)。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是条件，将返回满足此条件的行，直到行不满足条件为止。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "查找表的前两行。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "查找表中 [a] > 0 的前几行。",
            "Code": "Table.FirstN(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = -5, b = -6]\r\n    }),\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2],\r\n    [a = 3, b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FromPartitions",
      "Documentation": {
        "Documentation.Name": "Table.FromPartitions",
        "Documentation.Description": "返回作为组合一组分区表的结果的表。",
        "Documentation.LongDescription": "返回为组合分区表 <code>partitions</code> 集的结果的表。<code>partitionColumn</code> 是要添加的列名称。列类型默认为 <code>any</code>，但可以由 <code>partitionColumnType</code> 指定。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "从列表 <code>{number}</code> 中找到项类型。",
            "Code": "Table.FromPartitions(\r\n    \"Year\",\r\n    {\r\n        {\r\n            1994,\r\n            Table.FromPartitions(\r\n                \"Month\",\r\n                {\r\n                    {\r\n                        \"Jan\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {1, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {2, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    },\r\n                    {\r\n                        \"Feb\",\r\n                        Table.FromPartitions(\r\n                            \"Day\",\r\n                            {\r\n                                {3, #table({\"Foo\"}, {{\"Bar\"}})},\r\n                                {4, #table({\"Foo\"}, {{\"Bar\"}})}\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 1,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 2,\r\n        Month = \"Jan\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 3,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ],\r\n    [\r\n        Foo = \"Bar\",\r\n        Day = 4,\r\n        Month = \"Feb\",\r\n        Year = 1994\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "partitionColumn": "text",
        "partitions": "list",
        "partitionColumnType": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.LastN",
      "Documentation": {
        "Documentation.Name": "Table.LastN",
        "Documentation.Description": "返回指定数量的最后几行。",
        "Documentation.LongDescription": "返回表 <code>table</code> 中的最后几行，具体取决于 <code>countOrCondition</code> 的值:\r\n    <ul>\r\n    <li> 如果 <code>countOrCondition</code> 为数字，则将返回从位置(结尾 - <code>countOrCondition</code>)开始的多行。</li>\r\n    <li> 如果 <code>countOrCondition</code> 是条件，将以升序位置返回满足此条件的行，直到行不满足条件为止。</li>\r\n</ul>",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "查找表的最后两行。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          },
          {
            "Description": "查找表中 [a] > 0 的后几行。",
            "Code": "Table.LastN(\r\n    Table.FromRecords({\r\n        [a = -1, b = -2],\r\n        [a = 3, b = 4],\r\n        [a = 5, b = 6]\r\n    }),\r\n    each _ [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 3, b = 4],\r\n    [a = 5, b = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PrefixColumns",
      "Documentation": {
        "Documentation.Name": "Table.PrefixColumns",
        "Documentation.Description": "返回一个表，其中所有列均以给定的文本为前缀。",
        "Documentation.LongDescription": "返回一个表，其中来自所提供的 <code>table</code> 中的所有列名均以给定的文本 <code>prefix</code> 为前缀，另加一个采用格式 <code>prefix</code><code>.ColumnName</code> 的句点。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "为表中的列加前缀 \"MyTable\"。",
            "Code": "Table.PrefixColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"MyTable\"\r\n)",
            "Result": "Table.FromRecords({[MyTable.CustomerID = 1, MyTable.Name = \"Bob\", MyTable.Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "prefix": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Range",
      "Documentation": {
        "Documentation.Name": "Table.Range",
        "Documentation.Description": "以指定的偏移量开始返回行。",
        "Documentation.LongDescription": "以指定的 <code>offset</code> 开始返回 <code>table</code> 中的行。可选参数 <code>count</code> 指定要返回的行数。默认情况下，将返回偏移量之后的所有行。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "返回表中以偏移量 1 开始的所有行。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "返回表中以偏移量 1 开始的一行。",
            "Code": "Table.Range(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveColumns",
      "Documentation": {
        "Documentation.Name": "Table.RemoveColumns",
        "Documentation.Description": "删除指定的列。",
        "Documentation.LongDescription": "从提供的 <code>table</code> 中删除指定的 <code>columns</code>。\r\n    如果指定列不存在，则会引发错误，除非可选参数 <code>missingField</code> 指定备用行为(例如，<code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "从表中删除列 [Phone]。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Phone\"\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "尝试从表中删除不存在的列。",
            "Code": "Table.RemoveColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"Address\"\r\n)",
            "Result": "[Expression.Error] The column 'Address' of the table wasn't found."
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveMatchingRows",
        "Documentation.Description": "从表中删除出现的所有指定行。",
        "Documentation.LongDescription": "从 <code>table</code> 中删除出现的所有指定 <code>rows</code>。\r\n    可以指定一个可选参数 <code>equationCriteria</code>，以控制表各行之间的比较。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "从表 <code>({[a = 1, b = 2], [a = 3, b = 4], [a = 1, b = 6]})</code> 中删除其中具有 [a = 1] 的任何行。",
            "Code": "Table.RemoveMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 6]\r\n    }),\r\n    {[a = 1]},\r\n    \"a\"\r\n)",
            "Result": "Table.FromRecords({[a = 3, b = 4]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RemoveRows",
      "Documentation": {
        "Documentation.Name": "Table.RemoveRows",
        "Documentation.Description": "删除指定数量的行。",
        "Documentation.LongDescription": "从 <code>table</code> 的开头，以指定的 <code>offset</code> 开始删除 <code>count</code> 行。如果没有提供 <code>count</code> 参数，则使用默认计数 1。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "从表中删除第一行。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    0\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "删除位于表的位置 1 的行。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "删除表中从位置 1 开始的两行。",
            "Code": "Table.RemoveRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    1,\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.RenameColumns",
      "Documentation": {
        "Documentation.Name": "Table.RenameColumns",
        "Documentation.Description": "对格式 {old, new} 应用重命名。",
        "Documentation.LongDescription": "对表 <code>table</code> 中的列执行给定的重命名。一个替换操作 <code>renames</code> 由两个值的列表以及某个列表中提供的旧列名和新列名组成。\r\n    如果此列不存在，将引发异常，除非可选参数 <code>missingField</code> 指定备用值(例如， <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "在表中将列名 \"CustomerNum\" 替换为 \"CustomerID\"。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerNum\", \"CustomerID\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "在表中将列名 \"CustomerNum\" 替换为 \"CustomerID\"，并将 \"PhoneNum\" 替换为 \"Phone\"。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerNum = 1, Name = \"Bob\", PhoneNum = \"123-4567\"]}),\r\n    {\r\n        {\"CustomerNum\", \"CustomerID\"},\r\n        {\"PhoneNum\", \"Phone\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "在表中将列名 \"NewCol\" 替换为 \"NewColumn\"，如果列不存在，则忽略。",
            "Code": "Table.RenameColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"NewCol\", \"NewColumn\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReorderColumns",
      "Documentation": {
        "Documentation.Name": "Table.ReorderColumns",
        "Documentation.Description": "返回一个表，其中的列遵循指定的顺序。",
        "Documentation.LongDescription": "从输入 <code>table</code> 返回一个表，其中的列遵循由 <code>columnOrder</code> 指定的顺序。列表中未指定的列将不重新排序。\r\n     如果此列不存在，将引发异常，除非可选参数 <code>missingField</code> 指定备用值(例如，<code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "切换表中列 [Phone] 和 [Name] 的顺序。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Phone = \"123-4567\", Name = \"Bob\"]}),\r\n    {\"Name\", \"Phone\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          },
          {
            "Description": "切换表中列 [Phone] 和 [Address] 的顺序或使用 \"MissingField.Ignore\"。这不会更改表，因为列 [Address] 不存在。",
            "Code": "Table.ReorderColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"Phone\", \"Address\"},\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Repeat",
      "Documentation": {
        "Documentation.Name": "Table.Repeat",
        "Documentation.Description": "对表行重复指定的次数。",
        "Documentation.LongDescription": "从输入 <code>table</code> 返回一个表，其中的列重复了指定的 <code>count</code> 次。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "对表中的行重复两次。",
            "Code": "Table.Repeat(\r\n    Table.FromRecords({\r\n        [a = 1, b = \"hello\"],\r\n        [a = 3, b = \"world\"]\r\n    }),\r\n    2\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"],\r\n    [a = 1, b = \"hello\"],\r\n    [a = 3, b = \"world\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceErrorValues",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceErrorValues",
        "Documentation.Description": "使用相应指定值替换指定列中的错误值。",
        "Documentation.LongDescription": "使用 <code>errorReplacement</code> 列表中的新值替换 <code>table</code> 指定列中的错误值。列表的格式为 {{column1, value1}, …}。每列可能只有一个替换值，为列进行多于一次的指定将导致错误。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "在表中将错误值替换为文本 \"world\"。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{1, \"hello\"}, {3, ...}}, {\"A\", \"B\"}),\r\n    {\"B\", \"world\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 3, B = \"world\"]\r\n})"
          },
          {
            "Description": "在表中将 A 列中的错误值替换为文本 \"hello\"，将 B 列中的错误值替换为文本 \"world\"。",
            "Code": "Table.ReplaceErrorValues(\r\n    Table.FromRows({{..., ...}, {1, 2}}, {\"A\", \"B\"}),\r\n    {{\"A\", \"hello\"}, {\"B\", \"world\"}}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"hello\", B = \"world\"],\r\n    [A = 1, B = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "errorReplacement": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceKeys",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceKeys",
        "Documentation.Description": "替换指定表的键。",
        "Documentation.LongDescription": "替换指定表的键。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "替换表的现有键。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    resultTable = Table.ReplaceKeys(tableWithKeys, {[Columns = {\"Id\"}, Primary = false]})\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceMatchingRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceMatchingRows",
        "Documentation.Description": "使用提供的行替换所有指定的行。",
        "Documentation.LongDescription": "使用提供的行替换 <code>table</code> 中所有指定的行。要替换的行以及替换项在 <code>replacements</code> 中使用 {old, new} 格式指定。\r\n    可以指定一个可选 <code>equationCriteria</code> 参数，以控制表各行之间的比较。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "在表中将行 [a = 1, b = 2] 和 [a = 2, b = 3] 替换为 [a = -1, b = -2] 和 [a = -2, b = -3]。",
            "Code": "Table.ReplaceMatchingRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 2, b = 3],\r\n        [a = 3, b = 4],\r\n        [a = 1, b = 2]\r\n    }),\r\n    {\r\n        {[a = 1, b = 2], [a = -1, b = -2]},\r\n        {[a = 2, b = 3], [a = -2, b = -3]}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = -1, b = -2],\r\n    [a = -2, b = -3],\r\n    [a = 3, b = 4],\r\n    [a = -1, b = -2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectColumns",
      "Documentation": {
        "Documentation.Name": "Table.SelectColumns",
        "Documentation.Description": "返回只含有指定列的表。",
        "Documentation.LongDescription": "返回仅具有指定 <code>columns</code> 的 <code>table</code>。\r\n    <ul>\r\n       <li><code>table</code>: 提供的表。</li>\r\n       <li><code>columns</code>: 要返回的表 <code>table</code> 中列的列表。返回表中的列按 <code>columns</code> 中列出的顺序。</li>\r\n       <li><code>missingField</code>: <i>(可选)</i> 列不存在时如何操作。示例: <code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>。\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "只包含列 [Name]。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"Bob\"],\r\n    [Name = \"Jim\"],\r\n    [Name = \"Paul\"],\r\n    [Name = \"Ringo\"]\r\n})"
          },
          {
            "Description": "只包含列 [CustomerID] 和列 [Name]。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"Name\"}\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\"]})"
          },
          {
            "Description": "如果包含的列没有退出，则默认结果为错误。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    \"NewColumn\"\r\n)",
            "Result": "[Expression.Error] The field 'NewColumn' of the record wasn't found."
          },
          {
            "Description": "如果包含的列没有退出，选项 <code>MissingField.UseNull</code> 将创建包含 null 值的列。",
            "Code": "Table.SelectColumns(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    {\"CustomerID\", \"NewColumn\"},\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, NewColumn = null]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SelectRows",
      "Documentation": {
        "Documentation.Name": "Table.SelectRows",
        "Documentation.Description": "选择满足条件函数的行。",
        "Documentation.LongDescription": "从 <code>table</code> 返回与选择 <code>condition</code> 匹配的行的表。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "选择表中的行，其中 [CustomerID] 列中的值大于 2。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each [CustomerID] > 2\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          },
          {
            "Description": "选择表中的行，其中名称不包含 \"B\"。",
            "Code": "Table.SelectRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    each not Text.Contains([Name], \"B\")\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Sort",
      "Documentation": {
        "Documentation.Name": "Table.Sort",
        "Documentation.Description": "使用一个或多个列名以及比较条件对表排序。",
        "Documentation.LongDescription": "使用一个或多个列名的列表和可选的 <code>comparisonCriteria</code> (格式为 { { col1, comparisonCriteria }, {col2} })对 <code>table</code> 排序。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在列 \"OrderID\" 上对表排序。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          },
          {
            "Description": "在列 \"OrderID\" 上以降序顺序对表排序。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\"OrderID\", Order.Descending}\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]\r\n})"
          },
          {
            "Description": "依次在列 \"CustomerID\"、列 \"OrderID\" 上对表排序，其中列 \"CustomerID\" 上以升序顺序排序。",
            "Code": "Table.Sort(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n        [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100.0],\r\n        [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    {\r\n        {\"CustomerID\", Order.Ascending},\r\n        \"OrderID\"\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5],\r\n    [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25],\r\n    [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200],\r\n    [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2],\r\n    [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25],\r\n    [OrderID = 8, CustomerID = 5, Item = \"Fishing Rod\", Price = 100],\r\n    [OrderID = 9, CustomerID = 6, Item = \"Bait\", Price = 3.25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnNames",
        "Documentation.Description": "使用给定的函数转换列名。",
        "Documentation.LongDescription": "使用给定的 <code>nameGenerator</code> 函数转换列名。有效选项:\r\n    <div>\r\n      <code>MaxLength</code> 指定新列名的最大长度。如果给定函数生成的列名较长，则长名称将被剪裁。\r\n    </div>\r\n    <div>\r\n      <code>Comparer</code> 用于在生成新列名时控制比较。比较器可用于提供不区分大小写或区分区域性和区域设置的比较。\r\n    </div>\r\n    <div>\r\n      以下内置比较器以公式语言提供:\r\n    </div>\r\n    <ul>\r\n      <li><code>Comparer.Ordinal</code>: 用于执行精确的序号比较</li>\r\n      <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行精确的不区分大小写的序号比较</li>\r\n      <li> <code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "从列名中删除 <code>#(tab)</code> 字符",
            "Code": "Table.TransformColumnNames(Table.FromRecords({[#\"Col#(tab)umn\" = 1]}), Text.Clean)",
            "Result": "Table.FromRecords({[Column = 1]})"
          },
          {
            "Description": "转换列名以生成不区分大小写的名称(长度为 6)。",
            "Code": "Table.TransformColumnNames(\r\n    Table.FromRecords({[ColumnNum = 1, cOlumnnum = 2, coLumnNUM = 3]}),\r\n    Text.Clean,\r\n    [MaxLength = 6, Comparer = Comparer.OrdinalIgnoreCase]\r\n)",
            "Result": "Table.FromRecords({[Column = 1, cOlum1 = 2, coLum2 = 3]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "nameGenerator": "function",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumnTypes",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumnTypes",
        "Documentation.Description": "使用特定的区域性应用格式 { column, type } 的类型转换。",
        "Documentation.LongDescription": "通过对在参数 <code>typeTransformations</code> 中指定的列应用转换操作(其中格式为 { column name, type name})，使用可选参数 <code>culture</code> 中的指定区域性(例如 \"en-US\")，从输入 <code>table</code> 中返回一个表。\r\n    如果该列不存在，则引发异常。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "在表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中将列 [a] 中的数值转换为文本值。",
            "Code": "Table.TransformColumnTypes(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\"a\", type text},\r\n    \"en-US\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = \"1\", b = 2],\r\n    [a = \"3\", b = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "typeTransformations": "list",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformColumns",
      "Documentation": {
        "Documentation.Name": "Table.TransformColumns",
        "Documentation.Description": "转换一个或多个列的值。",
        "Documentation.LongDescription": "通过应用 <code>transformOperations</code> 中列出的每个列操作来转换 <code>table</code> (格式为 { column name, transformation } 或 { column name, transformation, new column type })。\r\n    如果指定了 <code>defaultTransformation</code>，它将应用于未在 <code>transformOperations</code> 中列出的所有列。\r\n    如果 <code>transformOperations</code> 中列出的列不存在，则除非可选参数 <code>missingField</code> 指定了替代项，否则将引发一场(例如，<code>MissingField.UseNull</code> 或 <code>MissingField.Ignore</code>)。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将列 [A] 中的文本值转换为数字值，并将列 [B] 中的数字值转换为文本值。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\r\n        {\"A\", Number.FromText},\r\n        {\"B\", Text.From}\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"2\"],\r\n    [A = 5, B = \"10\"]\r\n})"
          },
          {
            "Description": "将缺失列 [X] 中的数字值转换为文本值，同时忽略不存在的列。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.Ignore\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2],\r\n    [A = \"5\", B = 10]\r\n})"
          },
          {
            "Description": "将缺失列 [X] 中的数字值转换为文本值，同时将不存在的列中的值默认设置为 null。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"X\", Number.FromText},\r\n    null,\r\n    MissingField.UseNull\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = \"1\", B = 2, X = null],\r\n    [A = \"5\", B = 10, X = null]\r\n})"
          },
          {
            "Description": "递增列 [B] 中的数字值并将其转换为文本值，并将所有其他列转换为数字。",
            "Code": "Table.TransformColumns(\r\n    Table.FromRecords({\r\n        [A = \"1\", B = 2],\r\n        [A = \"5\", B = 10]\r\n    }),\r\n    {\"B\", each Text.From(_ + 1), type text},\r\n    Number.FromText\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"3\"],\r\n    [A = 5, B = \"11\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "transformOperations": "list",
        "defaultTransformation": "function",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.View",
      "Documentation": {
        "Documentation.Name": "Table.View",
        "Documentation.Description": "使用用户定义的处理程序创建或扩展表，以执行查询和操作。",
        "Documentation.LongDescription": "<p>返回 <code>table</code> 的视图，其中，如果将操作应用到视图，则使用 <code>handlers</code> 中指定的函数替代操作的默认行为。</p>\r\n<p>如果提供 <code>table</code>，则所有处理程序函数均为可选项。如果不提供 <code>table</code>，则 <code>GetType</code> 和 <code>GetRows</code> 处理程序函数为必填。如果没有为操作指定处理程序函数，则将操作的默认行为应用到 <code>table</code> (<code>GetExpression</code> 除外)。</p>\r\n<p>处理程序函数返回的值必须在语义上等同于针对 <code>table</code> 应用操作的结果(如果是 <code>GetExpression</code>，则为结果视图)。</p>\r\n<p>如果处理程序函数引发一个错误，则将操作的默认行为应用到视图。</p>\r\n<p><code>Table.View</code> 可用于实现数据源的折叠 - 将 M 查询转换为特定于源的查询(例如，从 M 查询创建 T-SQL 语句)。</p>\r\n<p>有关 <code>Table.View</code> 的更多完整说明，请查看已发布的 Power Query 自定义连接器文档。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "创建一个基本视图，该视图不需要访问行便可以确定类型或行计数。",
            "Code": "Table.View(\r\n    null,\r\n    [\r\n        GetType = () => type table [CustomerID = number, Name = text, Phone = nullable text],\r\n        GetRows = () => Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n        GetRowCount = () => 1\r\n    ]\r\n)",
            "Result": "Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Troux.CustomFeed",
      "Documentation": {
        "Documentation.Description": "Enter the URL of your Planview Enterprise Architecture account and a query.",
        "Documentation.DisplayName": "Planview Enterprise Architecture",
        "Documentation.Caption": "Planview Enterprise Architecture",
        "Documentation.Name": "Planview Enterprise Architecture",
        "Documentation.LongDescription": "Returns a table with relevant Planview Enterprise Architecture data specified by the query."
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "query": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "VSTS.AnalyticsViews",
      "Documentation": {
        "Documentation.Description": "输入组织和项目名称。",
        "Documentation.DisplayName": "VSTS.AnalyticsViews",
        "Documentation.Caption": "VSTS.AnalyticsViews",
        "Documentation.Name": "Azure DevOps (仅 Boards)",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的“分析”视图的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Vertica.Database",
      "Documentation": {
        "Documentation.Name": "Vertica",
        "Documentation.Caption": "Vertica",
        "Documentation.Description": "从 Vertica 导入数据",
        "Documentation.LongDescription": "返回 <code>server</code> 参数命名的服务器(位于 <code>database</code> 参数命名的数据库中)上的可用架构表。\r\n可提供一个可选记录参数 <code>options</code> 来指定其他属性。记录可以包含以下字段:\r\n<ul>\r\n    <li><code>ConnectionTimeout</code>: 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n    <li><code>CommandTimeout</code>: 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n</ul>",
        "Documentation.Examples": [
          {
            "Description": "列出 Vertica 中的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Webtrends.ReportContents",
      "Documentation": {
        "Documentation.Description": "从 Webtrends 返回包含报表内容的表。",
        "Documentation.DisplayName": "Webtrends.ReportContents",
        "Documentation.Caption": "Webtrends.ReportContents",
        "Documentation.Name": "Webtrends.ReportContents",
        "Documentation.LongDescription": "调用给定的 Webtrends 报表终结点，并将所有数据作为表返回。",
        "Documentation.Examples": [
          {
            "Description": "调用 Webtrends 访问者报表终结点，以返回最近 30 天内的数据",
            "Code": "Webtrends.ReportContents(\"98765\", \"xPcmTDDP0P6\")",
            "Result": "包含访问者数据的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "ReportId": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zucchetti.Contents",
      "Documentation": {
        "Documentation.Name": "Zucchetti HR Infinity",
        "Documentation.LongDescription": "Returns contents of VisualQueries (vqr), reports or functions published by the Zucchetti HR software",
        "Documentation.Examples": [
          {
            "Description": "Request for employees list",
            "Code": "    Zucchetti.Contents(\"https://myurl/HRPortal/\", \"001\"),\n    ERM = Origine{[idproced=\"ERM\"]}[Data],\n    ERM_query_pbi_employee = ERM{[id=\"ERM_query_pbi_employee\"]}[Data]",
            "Result": "    Table containing employee list"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "Url": "text",
        "Environment": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "ActiveDirectory.Domains",
      "Documentation": {
        "Documentation.Name": "ActiveDirectory.Domains",
        "Documentation.Description": "返回与指定域或当前计算机的域(如果未指定任何域)处于同一个林中的 Active Directory 域的列表。",
        "Documentation.LongDescription": "返回与指定域或当前计算机的域(如果未指定任何域)处于同一个林中的 Active Directory 域的列表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "forestRootDomainName": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AdoDotNet.Query",
      "Documentation": {
        "Documentation.Name": "AdoDotNet.Query",
        "Documentation.Description": "返回在 ADO.NET 数据源上运行本机查询的结果。",
        "Documentation.LongDescription": "返回通过使用 ADO.NET 提供程序 <code>providerName</code> 的连接字符串 <code>connectionString</code> 运行 <code>query</code> 的结果。<code>connectionString</code> 可以是文本或属性值对记录。属性值可以是文本或数字。可提供一个可选的记录参数 <code>options</code> 来指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>CommandTimeout</code> : 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值为 10 分钟。</li>\r\n<li><code>SqlCompatibleWindowsAuth</code> : 用于确认是否生成与 SQL Server 兼容的 Windows 身份验证连接字符串选项的逻辑(true/false)。默认值为 true。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "providerName": "text",
        "connectionString": "any",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AdobeAnalytics.Cubes",
      "Documentation": {
        "Documentation.Name": "AdobeAnalytics.Cubes",
        "Documentation.Description": "在 Adobe Analytics 中返回报表套件。",
        "Documentation.LongDescription": "从 Adobe Analytics 返回多维包的表。可以指定可选的记录参数 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>HierarchicalNavigation</code> : 一个逻辑值(true/false)，用于设置是否查看按架构名称分组的表(默认值为 false)。</li>\r\n<li><code>MaxRetryCount</code> : 在轮询查询的结果时要执行的重试次数。默认值为 120。</li>\r\n<li><code>RetryInterval</code> : 重试尝试之间的持续时间。默认值为 1 秒。</li>\r\n<li><code>Implementation</code> : 指定 Adobe Analytics API 版本。有效值为: “2.0”。默认使用 API 版本 1.4。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "AmazonOpenSearchService.Contents",
      "Documentation": {
        "Documentation.Name": "Amazon OpenSearch Service"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ApacheHiveLLAP.Database",
      "Documentation": {
        "Documentation.Name": "Hive LLAP",
        "Documentation.Caption": null,
        "Documentation.Description": "从 Hive LLAP 导入数据",
        "Documentation.LongDescription": "\r\n使用所选的<code>协议</code>从 Hive LLAP <code>服务器</code>上的<code>数据库</code>指定的 Hive LLAP 返回表格列表。端口可以视情况使用服务器进行指定，并用冒号分隔。Thrift 传输协议是枚举类型，其值为 \"Standard\"、\"HTTP\"。可以指定可选的 <code>options</code> 参数来控制以下选项:\r\n<ul>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值与驱动程序相关。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。默认值与驱动程序相关。</li>\r\n</ul>\r\n将 <code>options</code> 参数指定为 [option1 = value1, option2 = value2...]。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "database": "text",
        "thriftTransport": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AutomyDataAnalytics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureCostManagement.Contents",
      "Documentation": {
        "Documentation.Description": null,
        "Documentation.DisplayName": "Contents",
        "Documentation.Caption": "AzureCostManagement.Contents",
        "Documentation.Name": "AzureCostManagement.Contents",
        "Documentation.LongDescription": null,
        "Documentation.Examples": [
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取 2017 年 5 月 1 日到 2017 年 6 月 15 日之间的摘要数据",
            "Code": "设\r\n          enrollmentNumber = “100”，\r\n          optionalParameters = [ numberOfMonth = 1 ]，\r\n      则在\r\n          结果中\r\n          结果 = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)",
            "Result": "函数将返回 2017 年 5 月 1 日到 2017 年 6 月 15 日之间的摘要数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取 2017 年 4 月的摘要数据。",
            "Code": "设\r\n          enrollmentNumber = “100”，\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"-1\" ]，\r\n      则在\r\n          结果中\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)",
            "Result": "函数将返回 2017 年 4 月 1 日到 2017 年 4 月 30 日之间的数据"
          },
          {
            "Description": "假设今天是 2017 年 6 月 15 日，获取从 2017 年 4 月至今的摘要数据。",
            "Code": "设\r\n          enrollmentNumber = “100”，\r\n          optionalParameters = [ startBillingDataWindow = \"-2\", endBillingDataWindow = \"0\", dataType = \"Summaries\" ]，\r\n      则在\r\n          结果中\r\n          result = AzureCostManagement.Contents(enrollmentNumber, optionalParameters)",
            "Result": "函数将返回 2017 年 4 月 1 日到 2017 年 6 月 15 日之间的数据"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "parameters": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureCostManagement.Tables",
      "Documentation": {
        "Documentation.Caption": "Azure 成本管理",
        "Documentation.Description": "Azure 成本管理",
        "Documentation.DisplayName": "Azure 成本管理",
        "Documentation.LongDescription": "Azure 成本管理",
        "Documentation.Name": "Azure 成本管理"
      },
      "ReturnType": "table",
      "Parameters": {
        "scope": "text",
        "scopeValue": "text",
        "numberOfMonths": "number",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AzureDevOpsServer.Views",
      "Documentation": {
        "Documentation.Description": "输入组织和项目名称。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的 OData 源的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CDataConnectCloud.Contents",
      "Documentation": {
        "Documentation.Name": "CData Connect Cloud",
        "Documentation.LongDescription": "Returns a table with relevant data from the connected data source in CData Connect Cloud."
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "CommonDataService.Database",
      "Documentation": {
        "Documentation.Name": "Dataverse",
        "Documentation.Caption": "Dataverse",
        "Documentation.LongDescription": "连接到 Dataverse 实例(Dynamics 365 和 PowerApps)。"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Cube.AddAndExpandDimensionColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddAndExpandDimensionColumn",
        "Documentation.Description": "将指定维度表合并到多维数据集的筛选上下文中，并通过展开指定维度属性集来更改筛选上下文的维度粒度。",
        "Documentation.LongDescription": "将指定维度表 <code>dimensionSelector</code> 合并到多维数据集 <code>cube</code> 的筛选上下文中，并通过展开指定维度属性集 <code>attributeNames</code> 来更改维度粒度。维度属性将添加到含有名为 <code>newColumnNames</code> (如果未指定，则为 <code>attributeNames</code>)的列的表格视图。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "dimensionSelector": "any",
        "attributeNames": "list",
        "newColumnNames": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Cube.AddMeasureColumn",
      "Documentation": {
        "Documentation.Name": "Cube.AddMeasureColumn",
        "Documentation.Description": "向多维数据集添加列，其中包含在每行的行上下文中应用的度量值的结果。",
        "Documentation.LongDescription": "将名为 <code>column</code> 的列添加到 <code>cube</code>，其中包含在每行的行上下文中应用的度量值 <code>measureSelector</code> 的结果。度量值应用受维度粒度和切片的变化的影响。执行特定多维数据集操作后，系统会调整度量值。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "cube": "table",
        "column": "text",
        "measureSelector": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "CustomerInsights.Contents",
      "Documentation": {
        "Documentation.Name": "Dynamics 365 Customer Insights"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "DataWorld.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContents",
      "Documentation": {
        "Documentation.Description": "输入你的 Dynamics 365 Business Central 环境和公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "返回包含相关 Dynamics 365 Business Central 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.ApiContentsWithOptions",
      "Documentation": {
        "Documentation.Description": "输入你的 Dynamics 365 Business Central 环境和公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "返回包含相关 Dynamics 365 Business Central 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text",
        "apiRoute": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.Contents",
      "Documentation": {
        "Documentation.Description": "输入你的 Dynamics 365 Business Central 环境和公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "返回包含相关 Dynamics 365 Business Central 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Dynamics365BusinessCentral.EnvironmentContents",
      "Documentation": {
        "Documentation.Description": "输入你的 Dynamics 365 Business Central 环境和公司。",
        "Documentation.DisplayName": "Dynamics 365 Business Central",
        "Documentation.Caption": "Dynamics365BusinessCentral.Contents",
        "Documentation.Name": "Dynamics 365 Business Central",
        "Documentation.LongDescription": "返回包含相关 Dynamics 365 Business Central 数据的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "environment": "text",
        "company": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Emigo.Contents",
      "Documentation": {
        "Documentation.Name": "Emigo.Contents",
        "Documentation.LongDescription": "The purpose of the method is to set parameters for odata feed data source calls, thus the non-function calls may be limited by, for example, the period",
        "Documentation.Examples": [
          {
            "Description": "The purpose of the function is set the feed call parametrs",
            "Code": "let\r\n    Source = Emigo.Contents(\"DAYS\", \"3\", \"exact\", null),\r\n    emigoList = Source{[Key=\"emigoList\"]}[Data],\r\n    Dziennik_table = emigoList{[Name=\"Dziennik\",Signature=\"table\"]}[Data],\r\n    #\"Removed Columns\" = Table.RemoveColumns(Dziennik_table,{\"CzasWykonywaniaSekundy\", \"CzyCzasUKlienta\", \"CzyCzasDojazdu\", \"CzyZdjecia\", \"Odrzucona\", \"Obligatoryjna\", \"Wykonana\", \"DataCzasRozpoczecia\", \"DataGodzina\", \"Data\", \"Hierarchia\", \"IDCzynnosciTypy\", \"IDDziennikGrup\", \"IDGrupaDocelowa\", \"IDLogin\", \"IDKlient\", \"IdPrzOdm\", \"IDZadania\", \"IDTypZadania\", \"IDTME\", \"SekundyMiedzyCzynnosciami\", \"IloscZdjec\", \"OkresWykonywaniaSekundy\", \"CzyZadanieWykonane\", \"AnulowaneNaTME\", \"OdlegloscKlientKM\", \"IDKatZad\"}),\r\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each true)\r\nin\r\n    #\"Filtered Rows\"",
            "Result": "\"#Filtered Rows\"({\"IDDZiennik\", \"DataNumerycznie\"}, {{132806, 20190220}, {132803, 20190220}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text",
        "AuthorizationMode": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "EmplifiMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Excel.CurrentWorkbook",
      "Documentation": {
        "Documentation.Name": "Excel.CurrentWorkbook",
        "Documentation.Description": "返回当前 Excel 工作簿的内容。",
        "Documentation.LongDescription": "返回当前 Excel 工作簿的内容。它会返回表、命名范围和动态数组。与 <code>Excel.Workbook</code> 不同，它不返回工作表。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Exchange.Contents",
      "Documentation": {
        "Documentation.Name": "Exchange.Contents",
        "Documentation.Description": "返回来自 Microsoft Exchange 帐户的目录。",
        "Documentation.LongDescription": "返回 Microsoft Exchange 帐户 <code>mailboxAddress</code> 中的内容表。如果未指定 <code>mailboxAddress</code>，则将使用凭据的默认帐户。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "mailboxAddress": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Fabric.Warehouse",
      "Documentation": {
        "Documentation.Name": "仓库",
        "Documentation.Caption": "仓库",
        "Documentation.Description": "从仓库导入数据",
        "Documentation.LongDescription": "从仓库导入数据"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetRMS.Functions",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Funnel.Contents",
      "Documentation": {
        "Documentation.Name": "Navigational data",
        "Documentation.LongDescription": "Returns a navigation table to help the user navigate their Workspaces and respective Data Shares."
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleAnalytics.Accounts",
      "Documentation": {
        "Documentation.Name": "GoogleAnalytics.Accounts",
        "Documentation.Description": "返回 Google Analytics 帐户。",
        "Documentation.LongDescription": "返回可通过当前凭据进行访问的 Google Analytics 帐户。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "GoogleBigQuery.Database",
      "Documentation": {
        "Documentation.Name": "Google BigQuery",
        "Documentation.Caption": "Google BigQuery",
        "Documentation.Description": "从 Google BigQuery 数据库导入数据。",
        "Documentation.LongDescription": "\r\n      返回一张表，其中列出了 Google BigQuery 中可用的项目。可指定一个可选的记录参数 <code>options</code> 来控制以下选项:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>: 一个时间段，控制在放弃尝试建立到服务器的连接之前等待的时间。默认值是 ODBC 连接超时值。</li>\r\n        <li><code>CommandTimeout</code>: 一个时间段，控制在取消服务器端查询之前允许该查询运行的时间。</li>\r\n        <li><code>BillingProject</code>: 计费项目 ID。默认值是第一个可用的项目。</li>\r\n        <li><code>UseStorageApi</code>: 指定是否使用 BigQuery Storage API 来处理大型结果集。默认值为 true，表示使用存储 API。设置为 false 则表示不使用存储 API</li>\r\n      </ul>\r\n    可将记录参数指定为 [option1 = value1, option2 = value2...]。\r\n    ",
        "Documentation.Examples": [
          {
            "Description": "列出 Google BigQuery 中的可用项目",
            "Code": "GoogleBigQuery.Database()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "IRIS.Database",
      "Documentation": {
        "Documentation.Name": "InterSystems IRIS",
        "Documentation.LongDescription": "InterSystems IRIS",
        "Documentation.Icon": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gkZDwUXQqFc8gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAADzElEQVRYR8WXS4wUVRSGv1PV1cX0jCMjymR6xBCcUfBBgiGinYwLHWOERIyuNMbEuHTnhkjiDnWhGI2udOPehXF2KiYudDE+SBSNYIJgQkCNPAYyTtNddY+LW1Vdj9vdMyDhX1RVn3Puvf895z+3ukRVleuImr0pnU6UmDxHWMpRHL41QkHFENYDAERVVY1hevIAjdH19BbLjUBQNQ7f2iHAhfNn+fvCa3hemgGB0ZFRRhp1kMHLyNVzINZutkitZ7aWV/bNsfOBZl8SqoL0YWHV5C6T5ynff3uSN15fTKMByROwaN7aYPaOCYan27VQvzE29s/T/1Q8FQLieFo9ho2p+quS/z+K3Aeuhs8RGMb+2qBKYBUJGB4yPCJFRQOuc+i9n39APB8jiqfC8zPbGK+HfHjkMPg1DGrpK9w0NkrrlmmajXVUs6oVbpU2zPtto8A7vx2lHoYoEAvs3TzLeD3krd+PIbWAMoSfeHXbXTy75U4KJMQ+e9qz5faraImwoCjw5vZddKM2APtn72U8qGcRRg2PNTexe2qa3VNNNtQ8FMP+I4c5275cnC/Zkea2mcuAOBpAEJSnZmbY9+MiUoOnb59h3PMTvxJFMQd37MpNpNz/+QJdoxy7eJ7WuqmcR7MqpEu53jwlFNNSbiWlKKRT7TbtKCISZcT3cUGyS0mE5RLkIXjVRhWoBwFbP/0421GsEX4QcJsIOzZsLIaLHWO0l+0sA6qDzyDFYJKnng18FDRCJUYCqNVCWjeu55P5J/rMVESvBFIVYR554aQQhH87Mb88+QwLD+8BFQThwH0tbg6r3eFCRkCGnoQ2QnIiEABPiYGtYzdwT2OM2I948etDrEpelKIqJVB7OXrpInj256/Ly3TitBiaCUeBjx6ap26EPzoxX5w5U1WsAwPPgVSuez5bIKiHADz3zZf8dXnFutUj1YQAY36NFzbPosS8tPgVXUfZyhhyDlg8MjmJH4QYwAfCpL3mNzaJTbeQxpfv3s7plWU6xnDo1Eke37TFNWWGylFchqJ8MPeo0/f+g3MOq3JwZ8thz9wFFNrQheHiLEIGiK8g3/S9kJo8PxHTKoRzpUi34muc2RwiXNuOrwhClo5eCbIEXTsCheyW3wWiiigcP36OiYkgYZhSzd+TyZK78cAzFHaVQUg+aAA8Tpw4VxpdakOAd9/+jkEQwFxFkkSg46X/NJLvAgWWlpaJjY+l3SuJkgnWQtUadHCHqKQHlGSpF+zBubJ0KTnSxX4bAhiTz18x3U6oO+sZkuGilkxvRks+7bqMwPXCfx1BWTtnUBwAAAAAAElFTkSuQmCC"
      },
      "ReturnType": "table",
      "Parameters": {
        "host": "text",
        "port": "number",
        "namespace": "text",
        "ssl": "text",
        "logs": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IndustrialAppStore.NavigationTable",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Kyligence.Database",
      "Documentation": {
        "Documentation.Name": "Kyligence",
        "Documentation.LongDescription": "Connect your Kyligence"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "text",
        "Project": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Lakehouse.Contents",
      "Documentation": {
        "Documentation.Name": "湖屋",
        "Documentation.Caption": "从湖屋导入数据",
        "Documentation.Description": "从湖屋导入数据",
        "Documentation.LongDescription": "连接到你有权访问的所有湖屋，并选择要使用的实体。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Linkar.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "entrypoint": "text",
        "port": "number",
        "language": "text",
        "freetext": "text",
        "customvars": "text",
        "FileName": "text",
        "SelectClause": "text",
        "DictClause": "text",
        "SortClause": "text",
        "sqlmode": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "LinkedIn.SalesContracts",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesContractsWithReportAccess",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalytics",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "MailChimp.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "MailChimp.TablesV2",
      "Documentation": {
        "Documentation.Description": "返回包含关键 MailChimp 数据的表。",
        "Documentation.DisplayName": "MailChimp",
        "Documentation.Caption": "MailChimp.Tables",
        "Documentation.Name": "MailChimp",
        "Documentation.LongDescription": "返回包含关键 MailChimp 数据的表。",
        "Documentation.Examples": [
          {
            "Description": "返回包含关键 MailChimp 数据的表。",
            "Code": "MailChimp.Tables()",
            "Result": "包含关键 MailChimp 数据的表。"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Marketo.Activities",
      "Documentation": {
        "Documentation.Name": "Marketo.Activities",
        "Documentation.DisplayName": "Marketo.Activities",
        "Documentation.Caption": "Marketo.Activities",
        "Documentation.Description": "返回包含潜在客户活动的表。",
        "Documentation.LongDescription": "在 <code>url</code>/rest/v1/activities.json 上调用 Marketo REST API 终结点。返回列表 <code>activityIds</code> 中自 <code>startTime</code> 以来发生的所有活动。",
        "Documentation.Examples": [
          {
            "Description": "拉取自 2015 年 11 月 1 日以来的“访问网页”活动表",
            "Code": "Marketo.Activities(\"https://100-AAA-999.mktorest.com/rest\", #date(2015,11,1), {1})",
            "Result": "包含自 11 月 1 日以来所有“访问网页”活动详细信息的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "startTime": "date",
        "activityIds": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "MongoDBAtlasODBC.Query",
      "Documentation": {
        "Documentation.Name": "MongoDB Atlas SQL"
      },
      "ReturnType": "table",
      "Parameters": {
        "mongodbUri": "text",
        "database": "text",
        "query": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "OpenSearchProject.Contents",
      "Documentation": {
        "Documentation.Name": "OpenSearch Project"
      },
      "ReturnType": "table",
      "Parameters": {
        "Server": "text",
        "Port": "number",
        "UseSSL": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PlanviewEnterprise.CallQueryService",
      "Documentation": {
        "Documentation.Description": "Enter the URL, database name associated with your Planview Portfolios account and a SQL query.",
        "Documentation.DisplayName": "PlanviewEnterprise.CallQueryService",
        "Documentation.Caption": "PlanviewEnterprise.CallQueryService",
        "Documentation.Name": "Planview Portfolios",
        "Documentation.LongDescription": "Returns a table with Planview Portfolios data.",
        "Documentation.Examples": [
          {
            "Description": "Returns a table with Planview Portfolios data.",
            "Code": "PlanviewEnterprise.CallQueryService(\"https://contoso.com/planview\", \"pve\", \"select * from PV_Table\")",
            "Result": "A table of Planview Portfolios data about database pve"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "database": "text",
        "sqlQueryString": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "PowerBI.Dataflows",
      "Documentation": {
        "Documentation.Name": "Power BI 数据流(旧版)",
        "Documentation.Caption": "从 Power BI 数据流导入数据",
        "Documentation.LongDescription": "连接到有权访问的所有 Power BI 数据流，并选择要使用的实体。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerBI.Datamarts",
      "Documentation": {
        "Documentation.Name": "数据市场",
        "Documentation.Caption": "数据市场",
        "Documentation.Description": "从数据市场导入数据",
        "Documentation.LongDescription": "从数据市场导入数据"
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "PowerPlatform.Dataflows",
      "Documentation": {
        "Documentation.Name": "数据流",
        "Documentation.Caption": "从数据流导入数据。",
        "Documentation.Description": "从数据流导入数据。",
        "Documentation.LongDescription": "连接到有权访问的所有数据流，并选择要使用的实体。"
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "ProductInsights.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooksOnline.Tables",
      "Documentation": {
        "Documentation.Name": "QuickBooks Online",
        "Documentation.Caption": "QuickBooks Online",
        "Documentation.Description": "从 QuickBooks Online 导入数据。",
        "Documentation.LongDescription": "\r\n      返回列出 QuickBooks Online 中可用表的表。可指定可选记录参数 <code>options</code> 来控制以下选项:\r\n      <ul>\r\n        <li><code>ConnectionTimeout</code>:时间段，控制在放弃尝试与服务器建立连接之前等待的时间。</li>\r\n        <li><code>CommandTimeout</code>:时间段，控制服务器端查询在取消之前可运行的时间。</li>\r\n          </ul>\r\n        可以将记录参数指定为 [option1 = value1, option2 = value2...]。\r\n    "
      },
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Data",
      "Documentation": {
        "Documentation.Name": "Salesforce.Data",
        "Documentation.Description": "返回来自 Salesforce 帐户的对象。 ",
        "Documentation.LongDescription": "返回凭据中提供的 Salesforce 帐户上的对象。该帐户将通过提供的环境 <code>loginUrl</code> 进行连接。如果没有提供任何环境，则该帐户将连接到生产(https://login.salesforce.com)。可提供可选记录参数 <code>options</code> 来指定附加属性。该记录可以包含以下字段:\r\n    <ul>\r\n<li><code>CreateNavigationProperties</code> : 一个逻辑值(true/false)，用于在返回的值上设置是否生成导航属性(默认值为 false)。</li>\r\n<li><code>ApiVersion</code> : 此查询所使用的 Salesforce API 版本。未指定时，使用 API 版本 29.0。</li>\r\n<li><code>Timeout</code> : 一个时间段，控制在放弃对服务器的请求之前等待的时间。默认值特定于源。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "any",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Salesforce.Reports",
      "Documentation": {
        "Documentation.Name": "Salesforce.Reports",
        "Documentation.Description": "返回来自 Salesforce 帐户的报告。 ",
        "Documentation.LongDescription": "返回凭据中提供的 Salesforce 帐户上的报表。该帐户将通过提供的环境 <code>loginUrl</code> 进行连接。如果没有提供任何环境，则该帐户将连接到生产环境(https://login.salesforce.com)。可提供可选记录参数 <code>options</code> 来指定附加属性。该记录可以包含以下字段:\r\n    <ul>\r\n<li><code>ApiVersion</code> : 此查询所使用的 Salesforce API 版本。未指定时，使用 API 版本 29.0。</li>\r\n<li><code>Timeout</code> : 一个时间段，控制在放弃对服务器的请求之前等待的时间。默认值特定于源。</li>\r\n</ul>\r\n\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "loginUrl": "text",
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SapBusinessWarehouse.Cubes",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouse.Cubes",
        "Documentation.Description": "返回 SAP Business Warehouse 系统中按 InfoArea 分组的 InfoCube 和查询。",
        "Documentation.LongDescription": "从 SAP Business Warehouse 实例(位于服务器 <code>server</code> 上，系统号为 <code>systemNumberOrSystemId</code>，客户端 ID 为 <code>clientId</code>)返回一个表，其中包含按 InfoArea 分组的 InfoCube 和查询。可以指定可选的记录参数 <code>optionsOrLogonGroup</code> 来控制以下选项:\r\n    \r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "server": "text",
        "systemNumberOrSystemId": "text",
        "clientId": "text",
        "optionsOrLogonGroup": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ShortcutsBI.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Siteimprove.Contents",
      "Documentation": {
        "Documentation.Name": "Siteimprove",
        "Documentation.LongDescription": "Siteimprove API connector"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Tables",
      "Documentation": {
        "Documentation.Description": "从 Smartsheet API 返回包含工作表、报表、文件夹和工作区的表",
        "Documentation.DisplayName": "Smartsheet.Tables",
        "Documentation.Caption": "Smartsheet.Tables",
        "Documentation.Name": "Smartsheet.Tables",
        "Documentation.LongDescription": "从 Smartsheet API 返回包含可用的工作表、报表、文件夹和工作区的嵌套表。",
        "Documentation.Examples": [
          {
            "Description": "返回 Smartsheet 层次结构中的顶级工作表、文件夹、报表和工作区",
            "Code": "Smartsheet.Tables()",
            "Result": "包含 Smartsheet 层次结构中顶级文件夹、报表和工作区的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SocialbakersMetrics.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "options": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SoftOneBI.Contents",
      "Documentation": {
        "Documentation.Name": "SoftOne BI",
        "Documentation.LongDescription": "Retrieves all Soft1/Atlantis tables in the datalake",
        "Documentation.Examples": [
          {
            "Description": "Returns a table of tables from the datalake",
            "Code": "SoftOneBI.Contents()",
            "Result": "#table({\"Name\"}, {\"ItemKind\"}, {\"ItemName\"}, {\"Data\"}, {\"IsLeaf\"}, {{\"Companies\"}, {\"Table\"}, {\"Table\"}, {\"Table\"}, {\"true\"}})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SparkPost.GetTable",
      "Documentation": {
        "Documentation.Description": "从 SparkPost API v1 返回包含可用指标的表",
        "Documentation.DisplayName": "SparkPost.GetTable",
        "Documentation.Caption": "SparkPost.GetTable",
        "Documentation.Name": "SparkPost.GetTable",
        "Documentation.LongDescription": "此函数可用于检索来自 SparkPost API v1 的特定“指标”终结点的数据。使用此连接器刷新这些表或调用 SparkPost API 时，请注意 SparkPost API 有严格的 API 速率限制。如果 SparkPost 服务器返回了 429 状态代码，表明已达到速率限制，需要先稍等片刻，再执行多个调用。选择“天数”参数的值时，请注意 API 仅存储相当于 6 个月的数据。",
        "Documentation.Examples": [
          {
            "Description": "检索在过去三天内聚合的所有 campaign_ids 的 count_sent 和 count_rejected 可交付性指标。",
            "Code": "Source = SparkPost.GetTable(3, \"count_sent,count_rejected\", \"campaign_id\", \"metrics/deliverability/campaign\")",
            "Result": "表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "DaysToAggregate": "number",
        "MetricColumns": "text",
        "NonMetricColumns": "text",
        "Path": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Stripe.Method",
      "Documentation": {
        "Documentation.Name": "Stripe.Method",
        "Documentation.DisplayName": "Stripe.Method",
        "Documentation.Caption": "Stripe.Method",
        "Documentation.Description": "调用 Stripe API。",
        "Documentation.LongDescription": "在 https://api.stripe.com/v1/<code>method</code> 上调用 Stripe API，将记录 <code>additionalParameters</code> 传递为其他参数和预期列名的列表 <code>ColumnNames</code>。使用的是 Stripe 2015-10-16 版本。",
        "Documentation.Examples": [
          {
            "Description": "返回包含 2015 年 11 月 1 日之后创建的事件的表",
            "Code": "Stripe.Method(\"events\", [#\"created[gte]\"=1446374329], {\"id\", \"livemode\", \"created\", \"type\", \"data\", \"object\", \"pending_webhooks\", \"request\", \"api_version\"})",
            "Result": "包含当前 Stripe 帐户指定事件的表"
          },
          {
            "Description": "返回包含全部 SKU 的表",
            "Code": "Stripe.Method(\"skus\", [], {\"id\", \"created\", \"updated\", \"object\", \"livemode\", \"product\", \"image\", \"active\", \"price\", \"currency\", \"inventory\", \"attributes\", \"metadata\", \"package_dimensions\"})",
            "Result": "包含当前 Stripe 帐户全部 SKU 的表"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "method": "text",
        "additionalParameters": "record",
        "ColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Stripe.Tables",
      "Documentation": {
        "Documentation.Name": "Stripe.Tables",
        "Documentation.DisplayName": "Stripe.Tables",
        "Documentation.Caption": "Stripe.Tables",
        "Documentation.Description": "返回列出可用 Stripe 表和函数的表。",
        "Documentation.LongDescription": "返回列出可用 Stripe 表和函数的表。"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SurveyMonkey.Contents",
      "Documentation": {
        "Documentation.Name": "SurveyMonkey",
        "Documentation.LongDescription": "A Navigation table showing all the surveys in the account related to the input access token.",
        "Documentation.Examples": [
          {
            "Description": "Returns the navigation table.",
            "Code": "SurveyMonkey.Contents()"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Synapse.Contents",
      "Documentation": {
        "Documentation.Name": "Azure Synapse Analytics 工作区",
        "Documentation.Caption": "Azure Synapse Analytics 工作区",
        "Documentation.LongDescription": "适用于 Azure Synapse Analytics 工作区的 PQ 连接器",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "option": "record"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.AddColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddColumn",
        "Documentation.Description": "添加具有指定名称的列。使用指定的选择函数(它将每行作为输入)来计算值。",
        "Documentation.LongDescription": "将名为 <code>newColumnName</code> 的列添加到表 <code>table</code>。使用指定的选择函数 <code>columnGenerator</code>(它将每行作为输入)来计算列的值。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将名为“TotalPrice”的数字列添加到表中，每个值是 [Price] 和 [Shipping] 列的总和。",
            "Code": "Table.AddColumn(\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0, Shipping = 10.00],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0, Shipping = 15.00],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0, Shipping = 10.00]\r\n    }),\r\n    \"TotalPrice\",\r\n    each [Price] + [Shipping],\r\n    type number\r\n)",
            "Result": "Table.FromRecords({\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100, Shipping = 10, TotalPrice = 110],\r\n    [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5, Shipping = 15, TotalPrice = 20],\r\n    [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25, Shipping = 10, TotalPrice = 35]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "columnGenerator": "function",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddFuzzyClusterColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddFuzzyClusterColumn",
        "Documentation.Description": "添加一个具有代表值的新列，这些值由表中指定列的模糊分组值获得的。",
        "Documentation.LongDescription": "使用 <code>columnName</code> 的代表值将新列 <code>newColumnName</code> 添加到 <code>table</code> 中。代表值是通过模糊匹配针对每一行匹配 <code>columnName</code> 中的值获得的。\r\n    <p>可包含一组可选的 <code>options</code> 来指定如何比较键列。选项包括:\r\n    <ul>\r\n<li><code>Culture</code> : 允许根据区域性特定的规则对记录进行分组。它可以是任何有效的区域性名称。例如，&quot;ja-JP&quot; 的区域性选项基于日语区域性对记录进行分组。默认值为 &quot;&quot;，它基于固定英语区域性进行分组。</li>\r\n<li><code>IgnoreCase</code> : 一个逻辑(true/false)值，它允许不区分大小写的键分组。例如，如果为 true，则 &quot;Grapes&quot; 与 &quot;grapes&quot; 分组到一起。默认值为 true。</li>\r\n<li><code>IgnoreSpace</code> : 一个逻辑(true/false)值，它允许组合文本部分来查找组。例如，如果为 true，则 &quot;Gra pes&quot; 与 &quot;Grapes&quot; 分组到一起。默认值为 true。</li>\r\n<li><code>SimilarityColumnName</code> : 列的名称，该名称显示输入值与该输入的代表值之间的相似之处。默认值为 null，在这种情况下，将不会添加用于相似性的新列。</li>\r\n<li><code>Threshold</code> : 一个介于 0.00 和 1.00 之间的数字，指定两个值分组的相似性分数。\r\n    例如，仅当此选项设置为小于 0.90 时，“Grapes”和“Graes”(缺少“p”)才会组合在一起。\r\n    阈值 1.00 仅允许完全匹配。\r\n    (请注意，模糊的“精确匹配”可能会忽略大小写、字词顺序和标点符号等差异。)\r\n    默认值为 0.80。</li>\r\n<li><code>TransformationTable</code> : 允许根据自定义值映射对记录进行分组的表。它应包含“从”和“到”列。例如，如果提供了一个转换表，表中有包含 &quot;Grapes&quot; 的“从”列和包含 &quot;Raisins&quot; 的“到”列，则 &quot;Grapes&quot; 与 &quot;Raisins&quot; 分组到一起。请注意，转换将应用于转换表中所有出现该文本的位置。通过上述转换表，&quot;Grapes are sweet&quot; 也将与 &quot;Raisins are sweet&quot; 分组到一起。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "查找员工所在位置的代表值。",
            "Code": "Table.AddFuzzyClusterColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    \"Location_Cleaned\",\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [EmployeeID = 1, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 2, Location = \"seattl\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 3, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 4, Location = \"Seatle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 5, Location = \"vancover\", Location_Cleaned = \"Vancouver\"],\r\n        [EmployeeID = 6, Location = \"Seattle\", Location_Cleaned = \"Seattle\"],\r\n        [EmployeeID = 7, Location = \"Vancouver\", Location_Cleaned = \"Vancouver\"]\r\n    },\r\n    type table [EmployeeID = nullable number, Location = nullable text, Location_Cleaned = nullable text]\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddJoinColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddJoinColumn",
        "Documentation.Description": "对提供的列执行两个表之间的联接，并在新列中生成联接结果。",
        "Documentation.LongDescription": "根据由 <code>key1</code> (针对 <code>table1</code>)和 <code>key2</code> (针对 <code>table2</code>)选择的键列的值是否相等，联接 <code>table1</code> 的行与 <code>table2</code> 的行。将结果输入到名为 <code>newColumnName</code> 的列。\r\n此函数的行为类似于具有 JoinKind 的 LeftOuter 的 Table.Join，除了联接结果以嵌套而非平展方式存在之外。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "从已联接 [saleID] 的表({[saleID = 1, price = 20], [saleID = 2, price = 10]})将名为 \"price/stock\" 的联接列添加到({[saleID = 1, item = \"Shirt\"], [saleID = 2, item = \"Hat\"]})。",
            "Code": "Table.AddJoinColumn(\r\n    Table.FromRecords({\r\n        [saleID = 1, item = \"Shirt\"],\r\n        [saleID = 2, item = \"Hat\"]\r\n    }),\r\n    \"saleID\",\r\n    () => Table.FromRecords({\r\n        [saleID = 1, price = 20, stock = 1234],\r\n        [saleID = 2, price = 10, stock = 5643]\r\n    }),\r\n    \"saleID\",\r\n    \"price\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n        saleID = 1,\r\n        item = \"Shirt\",\r\n        price = Table.FromRecords({[saleID = 1, price = 20, stock = 1234]})\r\n    ],\r\n    [\r\n        saleID = 2,\r\n        item = \"Hat\",\r\n        price = Table.FromRecords({[saleID = 2, price = 10, stock = 5643]})\r\n    ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.AddKey",
      "Documentation": {
        "Documentation.Name": "Table.AddKey",
        "Documentation.Description": "向表添加键。",
        "Documentation.LongDescription": "向 <code>table</code> 添加一个键，其中 <code>columns</code> 是定义该键的列名称列表，<code>isPrimary</code> 指定该键是否为主键。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "向表添加单列主键。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    resultTable = Table.AddKey(table, {\"Id\"}, true)\r\nin\r\n    resultTable",
            "Result": "Table.FromRecords({\r\n    [Id = 1, Name = \"Hello There\"],\r\n    [Id = 2, Name = \"Good Bye\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AddRankColumn",
      "Documentation": {
        "Documentation.Name": "Table.AddRankColumn",
        "Documentation.Description": "追加一列，并使用一个或多个其他列进行排名。",
        "Documentation.LongDescription": "将名为“<code>newColumnName</code>”的列追加到<code>table</code>，并使用由<code>comparisonCriteria</code>描述的一个或多个其他列进行排名。\r\n高级用户可以使用<code>options</code>中的 RankKind 选项来选择更具体的排名方法。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "向表中添加名为 \"RevenueRank\" 的列，以便对 \"Revenue\" 列进行从高到低的排名。",
            "Code": "Table.AddRankColumn(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Revenue = 200],\r\n        [CustomerID = 2, Name = \"Jim\", Revenue = 100],\r\n        [CustomerID = 3, Name = \"Paul\", Revenue = 200],\r\n        [CustomerID = 4, Name = \"Ringo\", Revenue = 50]\r\n    }),\r\n    \"RevenueRank\",\r\n    {\"Revenue\", Order.Descending},\r\n    [RankKind = RankKind.Competition]\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 3, Name = \"Paul\", Revenue = 200, RevenueRank = 1],\r\n    [CustomerID = 2, Name = \"Jim\", Revenue = 100, RevenueRank = 3],\r\n    [CustomerID = 4, Name = \"Ringo\", Revenue = 50, RevenueRank = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "comparisonCriteria": "any",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AggregateTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.AggregateTableColumn",
        "Documentation.Description": "将多个表的一列聚合到包含表中的多列。",
        "Documentation.LongDescription": "将 <code>table</code>[<code>column</code>] 中的表聚合到包含这些表的聚合值的多个列。<code>aggregations</code> 用于指定包含要聚合的表的列、要应用于表以生成其值的聚合函数以及要创建的聚合列的名称。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将表 <code>{[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]}</code> 中的 <code>[t]</code> 的表列聚合为 <code>[t.a]</code>、<code>[t.b]</code> 的最小值和最大值以及 <code>[t.a]</code> 中值计数的总和。",
            "Code": "Table.AggregateTableColumn(\r\n    Table.FromRecords(\r\n        {\r\n            [\r\n                t = Table.FromRecords({\r\n                    [a = 1, b = 2, c = 3],\r\n                    [a = 2, b = 4, c = 6]\r\n                }),\r\n                b = 2\r\n            ]\r\n        },\r\n        type table [t = table [a = number, b = number, c = number], b = number]\r\n    ),\r\n    \"t\",\r\n    {\r\n        {\"a\", List.Sum, \"sum of t.a\"},\r\n        {\"b\", List.Min, \"min of t.b\"},\r\n        {\"b\", List.Max, \"max of t.b\"},\r\n        {\"a\", List.Count, \"count of t.a\"}\r\n    }\r\n)",
            "Result": "Table.FromRecords({[#\"sum of t.a\" = 3, #\"min of t.b\" = 2, #\"max of t.b\" = 4, #\"count of t.a\" = 2, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "aggregations": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.AlternateRows",
      "Documentation": {
        "Documentation.Name": "Table.AlternateRows",
        "Documentation.Description": "保留初始偏移量，然后交替选取和跳过下列行。",
        "Documentation.LongDescription": "保留初始偏移量，然后交替选取和跳过下列行。\r\n    <ul>\r\n       <li><code>table</code>: 输入表。</li>\r\n       <li><code>offset</code>: 在开始迭代之前要保留的行数。</li>\r\n       <li><code>skip</code>: 每次迭代中要删除的行数。</li>\r\n       <li><code>take</code>: 每次迭代中要保留的行数。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "从表中创建一个表，从第一行开始，跳过 1 个值，然后保留 1 个值。",
            "Code": "Table.AlternateRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }),\r\n    1,\r\n    1,\r\n    1\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "skip": "number",
        "take": "number"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumns",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumns",
        "Documentation.Description": "使用指定的组合程序函数将指定的列组合为一个新列。",
        "Documentation.LongDescription": "使用指定的组合程序函数将指定的列组合为一个新列。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将姓、名合并到新列中，用逗号分隔。",
            "Code": "Table.CombineColumns(\r\n    Table.FromRecords({[FirstName = \"Bob\", LastName = \"Smith\"]}),\r\n    {\"LastName\", \"FirstName\"},\r\n    Combiner.CombineTextByDelimiter(\",\", QuoteStyle.None),\r\n    \"FullName\"\r\n)",
            "Result": "Table.FromRecords({[FullName = \"Smith,Bob\"]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumns": "list",
        "combiner": "function",
        "column": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.CombineColumnsToRecord",
      "Documentation": {
        "Documentation.Name": "Table.CombineColumnsToRecord",
        "Documentation.Description": "将指定的列合并到新的记录值列中，其中每条记录都有与所合并的列的列名和值对应的字段名称和值。",
        "Documentation.LongDescription": "将 <code>table</code> 的指定列合并到名为 <code>newColumnName</code> 的新记录值列中，其中每条记录都具有对应于所合并列的列名和值的字段名称和值。如果为 <code>options</code> 指定了记录，可能会提供以下选项:\r\n    <ul>\r\n     <li> <code>DisplayNameColumn</code>: 指定为文本时，指示应将给定列名视为记录的显示名称。这不一定要是记录本身包含的列。</li>\r\n     <li> <code>TypeName</code>: 指定为文本时，为生成的记录提供逻辑类型名称。在数据加载过程中，加载环境可以使用该逻辑类型名称来驱动行为。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "newColumnName": "text",
        "sourceColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.DuplicateColumn",
      "Documentation": {
        "Documentation.Name": "Table.DuplicateColumn",
        "Documentation.Description": "复制具有指定名称的列。从源列复制值和类型。",
        "Documentation.LongDescription": "将名为 <code>columnName</code> 的列复制到表 <code>table</code>。列 <code>newColumnName</code> 的值和类型从列 <code>columnName</code> 复制。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "将列 \"a\" 复制到表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中名为 \"copied column\" 的列。",
            "Code": "Table.DuplicateColumn(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    \"a\",\r\n    \"copied column\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 1, b = 2, #\"copied column\" = 1],\r\n    [a = 3, b = 4, #\"copied column\" = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "columnName": "text",
        "newColumnName": "text",
        "columnType": "type"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandRecordColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandRecordColumn",
        "Documentation.Description": "将记录列扩展为具有每个值的列。",
        "Documentation.LongDescription": "给定输入 <code>table</code> 中的 <code>column</code> 条记录后，创建一个表，其中针对记录中的每个字段都有一列。也可以指定 <code>newColumnNames</code>，以确保新表中的各列具有唯一名称。\r\n    <ul>\r\n        <li><code>table</code>: 原始表以及要扩展的记录列。</li>\r\n        <li><code>column</code>: 要扩展的列。</li>\r\n        <li><code>fieldNames</code>: 要扩展到表中各列的字段列表。</li>\r\n        <li><code>newColumnNames</code>: 给予新列的列名的列表。新列名不能与新表中的任何列重复。</li>\r\n    </ul>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将表 <code>({[a = [aa = 1, bb = 2, cc = 3], b = 2]})</code> 中的列 [a] 扩展为 3 列 \"aa\"、\"bb\" 和 \"cc\"。",
            "Code": "Table.ExpandRecordColumn(\r\n    Table.FromRecords({\r\n        [\r\n            a = [aa = 1, bb = 2, cc = 3],\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"a\",\r\n    {\"aa\", \"bb\", \"cc\"}\r\n)",
            "Result": "Table.FromRecords({[aa = 1, bb = 2, cc = 3, b = 2]})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "fieldNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.ExpandTableColumn",
      "Documentation": {
        "Documentation.Name": "Table.ExpandTableColumn",
        "Documentation.Description": "将一个记录列或表列扩展到包含表中的多列。",
        "Documentation.LongDescription": "将 <code>table</code>[<code>column</code>] 中的表扩展为多个行和列。<code>columnNames</code> 用于从内部表中选择要扩展的列。指定 <code>newColumnNames</code> 以避免现有列与新列之间的冲突。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将表 <code>({[t = {[a=1, b=2, c=3], [a=2,b=4,c=6]}, b = 2]})</code> 的 <code>[a]</code> 中的表列扩展为 3 列 <code>[t.a]</code>、<code>[t.b]</code> 和 <code>[t.c]</code>。",
            "Code": "Table.ExpandTableColumn(\r\n    Table.FromRecords({\r\n        [\r\n            t = Table.FromRecords({\r\n                [a = 1, b = 2, c = 3],\r\n                [a = 2, b = 4, c = 6]\r\n            }),\r\n            b = 2\r\n        ]\r\n    }),\r\n    \"t\",\r\n    {\"a\", \"b\", \"c\"},\r\n    {\"t.a\", \"t.b\", \"t.c\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [t.a = 1, t.b = 2, t.c = 3, b = 2],\r\n    [t.a = 2, t.b = 4, t.c = 6, b = 2]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "column": "text",
        "columnNames": "list",
        "newColumnNames": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyGroup",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyGroup",
        "Documentation.Description": "根据键的模糊匹配对表中的行进行分组。",
        "Documentation.LongDescription": "通过模糊匹配针对每一行匹配指定的列 <code>key</code> 中的值，对 <code>table</code> 的行进行分组。\r\n    对于每个组，记录包含键列(及其值)，还包含 <code>aggregatedColumns</code> 指定的所有聚合列。\r\n    此函数无法保证返回固定顺序的行。\r\n    <p>可包含一组可能的 <code>options</code> 来指定如何比较键列。选项包括:\r\n    <ul>\r\n<li><code>Culture</code> : 允许根据区域性特定的规则对记录进行分组。它可以是任何有效的区域性名称。例如，&quot;ja-JP&quot; 的区域性选项基于日语区域性对记录进行分组。默认值为 &quot;&quot;，它基于固定英语区域性进行分组。</li>\r\n<li><code>IgnoreCase</code> : 一个逻辑(true/false)值，它允许不区分大小写的键分组。例如，如果为 true，则 &quot;Grapes&quot; 与 &quot;grapes&quot; 分组到一起。默认值为 true。</li>\r\n<li><code>IgnoreSpace</code> : 一个逻辑(true/false)值，它允许组合文本部分来查找组。例如，如果为 true，则 &quot;Gra pes&quot; 与 &quot;Grapes&quot; 分组到一起。默认值为 true。</li>\r\n<li><code>SimilarityColumnName</code> : 列的名称，该名称显示输入值与该输入的代表值之间的相似之处。默认值为 null，在这种情况下，将不会添加用于相似性的新列。</li>\r\n<li><code>Threshold</code> : 一个介于 0.00 和 1.00 之间的数字，指定两个值分组的相似性分数。\r\n    例如，仅当此选项设置为小于 0.90 时，“Grapes”和“Graes”(缺少“p”)才会组合在一起。\r\n    阈值 1.00 仅允许完全匹配。\r\n    (请注意，模糊的“精确匹配”可能会忽略大小写、字词顺序和标点符号等差异。)\r\n    默认值为 0.80。</li>\r\n<li><code>TransformationTable</code> : 允许根据自定义值映射对记录进行分组的表。它应包含“从”和“到”列。例如，如果提供了一个转换表，表中有包含 &quot;Grapes&quot; 的“从”列和包含 &quot;Raisins&quot; 的“到”列，则 &quot;Grapes&quot; 与 &quot;Raisins&quot; 分组到一起。请注意，转换将应用于转换表中所有出现该文本的位置。通过上述转换表，&quot;Grapes are sweet&quot; 也将与 &quot;Raisins are sweet&quot; 分组到一起。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "对表进行分组，同时添加聚合列 [Count]，其中包含每个位置的员工数(\"each Table.RowCount(_))\")。",
            "Code": "Table.FuzzyGroup(\r\n    Table.FromRecords(\r\n        {\r\n            [EmployeeID = 1, Location = \"Seattle\"],\r\n            [EmployeeID = 2, Location = \"seattl\"],\r\n            [EmployeeID = 3, Location = \"Vancouver\"],\r\n            [EmployeeID = 4, Location = \"Seatle\"],\r\n            [EmployeeID = 5, Location = \"vancover\"],\r\n            [EmployeeID = 6, Location = \"Seattle\"],\r\n            [EmployeeID = 7, Location = \"Vancouver\"]\r\n        },\r\n        type table [EmployeeID = nullable number, Location = nullable text]\r\n    ),\r\n    \"Location\",\r\n    {\"Count\", each Table.RowCount(_)},\r\n    [IgnoreCase = true, IgnoreSpace = true]\r\n)",
            "Result": "Table.FromRecords({\r\n    [Location = \"Seattle\", Count = 4],\r\n    [Location = \"Vancouver\", Count = 3]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.FuzzyJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyJoin",
        "Documentation.Description": "联接两个表中基于给定键模糊匹配的行。",
        "Documentation.LongDescription": "<p>根据由 <code>key1</code> (针对 <code>table1</code>)和 <code>key2</code> (针对 <code>table2</code>)选择的键列值的模糊匹配，将 <code>table1</code> 的行与 <code>table2</code> 的行联接在一起。</p>\r\n<p>模糊匹配是基于文本相似度(而不是文本等同性)的一种比较方法。</p>\r\n<p>默认执行的是内联，但也可视需要添加 <code>joinKind</code> 来指定联接类型。选项包括:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可包含一组可选的 <code>joinOptions</code> 来指定如何比较键列。选项包括:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 一个介于 1 至 8 之间的数字，用于指定模糊匹配要使用的并行线程数。默认值为 1。</li>\r\n<li><code>Culture</code> : 允许根据区域性特定的规则匹配记录。它可以是任何有效的区域性名称。例如，&quot;ja-JP&quot; 的区域性选项基于日语区域性来匹配记录。默认值为 &quot;&quot;，它基于固定英语区域性进行匹配。</li>\r\n<li><code>IgnoreCase</code> : 一个逻辑(true/false)值，它允许不区分大小写的键匹配。例如，如果为 true，则 &quot;Grapes&quot; 与 &quot;grapes&quot; 匹配。默认值为 true。</li>\r\n<li><code>IgnoreSpace</code> : 一个逻辑(true/false)值，它允许组合文本部分来查找匹配项。例如，如果为 true，则 &quot;Gra pes&quot; 与 &quot;Grapes&quot; 匹配。默认值为 true。</li>\r\n<li><code>NumberOfMatches</code> : 一个整数，用于指定可为每个输入行返回的匹配行的最大数目。例如，如果值为 1，则每个输入行最多返回 1 个匹配行。如果未提供此选项，则返回所有匹配的行。</li>\r\n<li><code>SimilarityColumnName</code> : 列的名称，该名称显示输入值与该输入的代表值之间的相似之处。默认值为 null，在这种情况下，将不会添加用于相似性的新列。</li>\r\n<li><code>Threshold</code> : 一个介于 0.00 和 1.00 之间的数字，指定匹配两个值的相似性分数。\r\n    例如，仅当此选项设置为小于 0.90 时，“Grapes”和“Graes”(缺少“p”)才匹配。\r\n    阈值 1.00 仅允许完全匹配。\r\n    (请注意，模糊的“精确匹配”可能会忽略大小写、字词顺序和标点符号等差异。)\r\n    默认值为 0.80。</li>\r\n<li><code>TransformationTable</code> : 允许根据自定义值映射来匹配记录的表。它应包含“从”和“到”列。例如，如果提供了一个转换表，表中有包含 &quot;Grapes&quot; 的“从”列和包含 &quot;Raisins&quot; 的“到”列，则 &quot;Grapes&quot; 与 &quot;Raisins&quot; 匹配。请注意，转换将应用于转换表中所有出现该文本的位置。通过上述转换表，&quot;Grapes are sweet&quot; 也将与 &quot;Raisins are sweet&quot; 匹配。</li>\r\n</ul>\r\n\r\n</p>\r\n    ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "基于 [FirstName] 的两个表的左侧内部模糊联接",
            "Code": "Table.FuzzyJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 1,\r\n\t\t\t  FirstName2 = \"Bob\",\r\n\t\t\t  State = \"TX\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 1,\r\n\t\t\t  FirstName1 = \"Bob\",\r\n\t\t\t  Phone = \"555-1234\",\r\n\t\t\t  CustomerStateID = 2,\r\n\t\t\t  FirstName2 = \"bOB\",\r\n\t\t\t  State = \"CA\"\r\n\t\t],\r\n    [\r\n\t\t\t  CustomerID = 2,\r\n\t\t\t  FirstName1 = \"Robert\",\r\n\t\t\t  Phone = \"555-4567\",\r\n\t\t\t  CustomerStateID = null,\r\n\t\t\t  FirstName2 = null,\r\n\t\t\t  State = null\r\n\t\t]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.FuzzyNestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.FuzzyNestedJoin",
        "Documentation.Description": "在两个表之间对提供的列执行模糊联接，并在新列中生成联接结果。",
        "Documentation.LongDescription": "<p>根据由 <code>key1</code> (针对 <code>table1</code>)和 <code>key2</code> (针对 <code>table2</code>)选择的键列值的模糊匹配，联接 <code>table1</code> 的行与 <code>table2</code> 的行。结果在名为 <code>newColumnName</code> 的新列中返回。</p>\r\n<p>模糊匹配是基于文本相似度(而不是文本等同性)的一种比较方法。</p>\r\n<p>可选的 <code>joinKind</code> 指定要执行的联接种类。默认情况下，如果未指定 <code>joinKind</code>，执行的是左外部联接。选项包括:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可视需要添加一组 <code>joinOptions</code> 来指定如何比较键列。选项包括:\r\n    <ul>\r\n<li><code>ConcurrentRequests</code> : 一个介于 1 至 8 之间的数字，用于指定模糊匹配要使用的并行线程数。默认值为 1。</li>\r\n<li><code>Culture</code> : 允许根据区域性特定的规则匹配记录。它可以是任何有效的区域性名称。例如，&quot;ja-JP&quot; 的区域性选项基于日语区域性来匹配记录。默认值为 &quot;&quot;，它基于固定英语区域性进行匹配。</li>\r\n<li><code>IgnoreCase</code> : 一个逻辑(true/false)值，它允许不区分大小写的键匹配。例如，如果为 true，则 &quot;Grapes&quot; 与 &quot;grapes&quot; 匹配。默认值为 true。</li>\r\n<li><code>IgnoreSpace</code> : 一个逻辑(true/false)值，它允许组合文本部分来查找匹配项。例如，如果为 true，则 &quot;Gra pes&quot; 与 &quot;Grapes&quot; 匹配。默认值为 true。</li>\r\n<li><code>NumberOfMatches</code> : 一个整数，用于指定可为每个输入行返回的匹配行的最大数目。例如，如果值为 1，则每个输入行最多返回 1 个匹配行。如果未提供此选项，则返回所有匹配的行。</li>\r\n<li><code>SimilarityColumnName</code> : 列的名称，该名称显示输入值与该输入的代表值之间的相似之处。默认值为 null，在这种情况下，将不会添加用于相似性的新列。</li>\r\n<li><code>Threshold</code> : 一个介于 0.00 和 1.00 之间的数字，指定匹配两个值的相似性分数。\r\n    例如，仅当此选项设置为小于 0.90 时，“Grapes”和“Graes”(缺少“p”)才匹配。\r\n    阈值 1.00 仅允许完全匹配。\r\n    (请注意，模糊的“精确匹配”可能会忽略大小写、字词顺序和标点符号等差异。)\r\n    默认值为 0.80。</li>\r\n<li><code>TransformationTable</code> : 允许根据自定义值映射来匹配记录的表。它应包含“从”和“到”列。例如，如果提供了一个转换表，表中有包含 &quot;Grapes&quot; 的“从”列和包含 &quot;Raisins&quot; 的“到”列，则 &quot;Grapes&quot; 与 &quot;Raisins&quot; 匹配。请注意，转换将应用于转换表中所有出现该文本的位置。通过上述转换表，&quot;Grapes are sweet&quot; 也将与 &quot;Raisins are sweet&quot; 匹配。</li>\r\n</ul>\r\n\r\n</p>\r\n",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "基于 [FirstName] 的两个表的左侧内部模糊联接",
            "Code": "Table.FuzzyNestedJoin(\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerID = 1, FirstName1 = \"Bob\", Phone = \"555-1234\"],\r\n\t\t        [CustomerID = 2, FirstName1 = \"Robert\", Phone = \"555-4567\"]\r\n\t      },\r\n        type table [CustomerID = nullable number, FirstName1 = nullable text, Phone = nullable text]\r\n    ),\r\n\t  {\"FirstName1\"},\r\n\t  Table.FromRecords(\r\n        {\r\n\t\t        [CustomerStateID = 1, FirstName2 = \"Bob\", State = \"TX\"],\r\n\t\t        [CustomerStateID = 2, FirstName2 = \"bOB\", State = \"CA\"]\r\n\t      },\r\n        type table [CustomerStateID = nullable number, FirstName2 = nullable text, State = nullable text]\r\n    ),\r\n\t  {\"FirstName2\"},\r\n\t  \"NestedTable\",\r\n\t  JoinKind.LeftOuter,\r\n\t  [IgnoreCase = true, IgnoreSpace = false]\r\n)",
            "Result": "Table.FromRecords({\r\n    [\r\n\t\t    CustomerID = 1,\r\n\t\t    FirstName1 = \"Bob\",\r\n\t\t    Phone = \"555-1234\",\r\n\t\t    NestedTable = Table.FromRecords({\r\n            [\r\n\t\t\t\t      CustomerStateID = 1,\r\n\t\t\t\t      FirstName2 = \"Bob\",\r\n\t\t\t\t      State = \"TX\"\r\n\t\t\t      ],\r\n            [\r\n\t\t\t\t      CustomerStateID = 2,\r\n\t\t\t\t      FirstName2 = \"bOB\",\r\n\t\t\t\t      State = \"CA\"\r\n\t\t\t      ]\r\n\t\t    })\r\n\t  ],\r\n    [\r\n\t\t  CustomerID = 2,\r\n\t\t  FirstName1 = \"Robert\",\r\n\t\t  Phone = \"555-4567\",\r\n\t\t  NestedTable = Table.FromRecords({})\r\n\t  ]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "joinOptions": "record"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Group",
      "Documentation": {
        "Documentation.Name": "Table.Group",
        "Documentation.Description": "对表中具有相同键的行进行分组。",
        "Documentation.LongDescription": "按 <code>key</code> 定义的键列对 <code>table</code> 的行进行分组。<code>key</code> 可以是单个列名，也可以是列名称列表。\r\n    每个组会构造一条记录，其中包含键列(和它们的值) 以及由 <code>aggregatedColumns</code> 指定的任何聚合列。\r\n    或者，也可以指定 <code>groupKind</code> 和 <code>comparer</code>。<br>\r\n    <br>\r\n    如果数据已按键列排序，则可以提供 GroupKind.Local 的 <code>groupKind</code>。在某些情况下，这可能会提高分组的性能，\r\n    因为具有给定键值集的所有行都被认为是连续的。 <br>\r\n    <br>\r\n    传递 <code>comparer</code> 时，请注意，如果它将不同的键视为相等，则可能会将行放置在与其键不同的组中。<br>\r\n    <br>\r\n    此函数不能保证它返回的行的顺序。\r\n  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "对表进行分组，同时添加一个聚合列 [total]，其中包含价格总和(\"each List.Sum([price])\")。",
            "Code": "Table.Group(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, price = 20],\r\n        [CustomerID = 2, price = 10],\r\n        [CustomerID = 2, price = 20],\r\n        [CustomerID = 1, price = 10],\r\n        [CustomerID = 3, price = 20],\r\n        [CustomerID = 3, price = 5]\r\n    }),\r\n    \"CustomerID\",\r\n    {\"total\", each List.Sum([price])}\r\n)",
            "Result": "Table.FromRecords(\r\n    {\r\n        [CustomerID = 1, total = 30],\r\n        [CustomerID = 2, total = 30],\r\n        [CustomerID = 3, total = 25]\r\n    },\r\n    {\"CustomerID\", \"total\"}\r\n)"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "key": "any",
        "aggregatedColumns": "list",
        "groupKind": "GroupKind.Type",
        "comparer": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.InsertRows",
      "Documentation": {
        "Documentation.Name": "Table.InsertRows",
        "Documentation.Description": "将行列表插入到表中的指定位置。",
        "Documentation.LongDescription": "返回一个表，其中行列表 <code>rows</code> 插入到 <code>table</code> 的给定位置 <code>offset</code>。要插入的行中的每列都必须与表的列类型相匹配。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "将行插入表中的位置 1。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    1,\r\n    {[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n})"
          },
          {
            "Description": "将两行插入表中的位置 1。",
            "Code": "Table.InsertRows(\r\n    Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}),\r\n    1,\r\n    {\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    }\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "rows": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Join",
      "Documentation": {
        "Documentation.Name": "Table.Join",
        "Documentation.Description": "联接两个表中基于给定键匹配的行。",
        "Documentation.LongDescription": "<p>根据由 <code>table1</code> (针对 <code>table2</code>)和 <code>key1</code> (针对 <code>table1</code>)选择的键列值的等同性联接 <code>key2</code> 的行与 <code>table2</code> 的行。</p>\r\n<p>默认执行内联接，但可包含可选的 <code>joinKind</code> 来指定联接类型。选项包括:\r\n    <ul>\r\n<li><code>JoinKind.Inner</code></li>\n<li><code>JoinKind.LeftOuter</code></li>\n<li><code>JoinKind.RightOuter</code></li>\n<li><code>JoinKind.FullOuter</code></li>\n<li><code>JoinKind.LeftAnti</code></li>\n<li><code>JoinKind.RightAnti</code></li>\n</ul>\r\n\r\n</p>\r\n<p>可包含 <code>keyEqualityComparers</code> 的可选集来指定如何比较键列。此参数目前仅适用于内部使用。</p>",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "使用单个键列联接两个表。",
            "Code": "Table.Join(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"CustomerID\",\r\n    Table.FromRecords({\r\n        [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n        [OrderID = 2, CustomerID = 1, Item = \"1 lb. worms\", Price = 5.0],\r\n        [OrderID = 3, CustomerID = 2, Item = \"Fishing net\", Price = 25.0],\r\n        [OrderID = 4, CustomerID = 3, Item = \"Fish tazer\", Price = 200.0],\r\n        [OrderID = 5, CustomerID = 3, Item = \"Bandaids\", Price = 2.0],\r\n        [OrderID = 6, CustomerID = 1, Item = \"Tackle box\", Price = 20.0],\r\n        [OrderID = 7, CustomerID = 5, Item = \"Bait\", Price = 3.25]\r\n    }),\r\n    \"CustomerID\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 1, Item = \"Fishing rod\", Price = 100],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 2, Item = \"1 lb. worms\", Price = 5],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", OrderID = 3, Item = \"Fishing net\", Price = 25],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 4, Item = \"Fish tazer\", Price = 200],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\", OrderID = 5, Item = \"Bandaids\", Price = 2],\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", OrderID = 6, Item = \"Tackle box\", Price = 20]\r\n})"
          },
          {
            "Description": "使用多个键列联接具有冲突列名的两个表。",
            "Code": "let\r\n    customers = Table.FromRecords({\r\n        [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    orders = Table.FromRecords({\r\n        [TenantID = 1, OrderID = 1, CustomerID = 1, Name = \"Fishing rod\", Price = 100.0],\r\n        [TenantID = 1, OrderID = 2, CustomerID = 1, Name = \"1 lb. worms\", Price = 5.0],\r\n        [TenantID = 1, OrderID = 3, CustomerID = 2, Name = \"Fishing net\", Price = 25.0]\r\n    })\r\nin\r\n    Table.Join(\r\n        customers,\r\n        {\"TenantID\", \"CustomerID\"},\r\n        Table.PrefixColumns(orders, \"Order\"),\r\n        {\"Order.TenantID\", \"Order.CustomerID\"}\r\n    )",
            "Result": "Table.FromRecords({\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 1, Order.CustomerID = 1, Order.Name = \"Fishing rod\", Order.Price = 100],\r\n    [TenantID = 1, CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Order.TenantID = 1, Order.OrderID = 2, Order.CustomerID = 1, Order.Name = \"1 lb. worms\", Order.Price = 5],\r\n    [TenantID = 1, CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\", Order.TenantID = 1, Order.OrderID = 3, Order.CustomerID = 2, Order.Name = \"Fishing net\", Order.Price = 25]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "table",
        "key2": "any",
        "joinKind": "JoinKind.Type",
        "joinAlgorithm": "JoinAlgorithm.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.MaxN",
      "Documentation": {
        "Documentation.Name": "Table.MaxN",
        "Documentation.Description": "使用给定条件返回最大值行。",
        "Documentation.LongDescription": "在给定 <code>comparisonCriteria</code> 的情况下，返回 <code>table</code> 中的最大值行。\r\n    在对行排序后，必须指定 <code>countOrCondition</code> 参数以进一步筛选结果。注意，排序算法无法保证固定的排序结果。<code>countOrCondition</code> 参数可以采用多种格式:\r\n    <ul>\r\n        <li> 如果指定一个数，则返回以升序排序的、最多包含 <code>countOrCondition</code> 项的列表。</li>\r\n        <li> 如果指定条件，则返回最初满足该条件的项列表。如果某个项不满足该条件，则不再考虑其他项。</li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找表中在列 [a] 中具有最大值且条件 [a] > 0 的行。在应用筛选器之前，先对行排序。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [a] > 0\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 6, b = 2],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "查找表中在列 [a] 中具有最大值且条件 [b] > 0 的行。在应用筛选器之前，先对行排序。",
            "Code": "Table.MaxN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] > 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.MinN",
      "Documentation": {
        "Documentation.Name": "Table.MinN",
        "Documentation.Description": "使用给定条件返回最小值行。",
        "Documentation.LongDescription": "在给定 <code>comparisonCriteria</code> 的情况下，返回 <code>table</code> 中的最小值行。在对行排序后，必须指定 <code>countOrCondition</code> 参数以进一步筛选结果。注意，排序算法无法保证固定的排序结果。<code>countOrCondition</code> 参数可以采用多种格式:\r\n    <ul>\r\n        <li> 如果指定一个数，则返回以升序排序的、最多包含 <code>countOrCondition</code> 项的列表。</li>\r\n        <li> 如果指定条件，则返回最初满足该条件的项列表。如果某个项不满足该条件，则不再考虑其他项。</li>\r\n </ul>",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找表中在列 [a] 中具有最小值且条件 [a] < 3 的行。在应用筛选器之前，先对行排序。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 0, b = 0],\r\n        [a = 6, b = 4]\r\n    }),\r\n    \"a\",\r\n    each [a] < 3\r\n)",
            "Result": "Table.FromRecords({\r\n    [a = 0, b = 0],\r\n    [a = 2, b = 4]\r\n})"
          },
          {
            "Description": "查找表中在列 [a] 中具有最小值且条件 [b] < 0 的行。在应用筛选器之前，先对行排序。",
            "Code": "Table.MinN(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 8, b = 0],\r\n        [a = 6, b = 2]\r\n    }),\r\n    \"a\",\r\n    each [b] < 0\r\n)",
            "Result": "Table.FromRecords({})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "countOrCondition": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.NestedJoin",
      "Documentation": {
        "Documentation.Name": "Table.NestedJoin",
        "Documentation.Description": "对提供的列执行两个表之间的联接，并在新列中生成联接结果。",
        "Documentation.LongDescription": "<p>根据由 <code>key1</code> (针对 <code>table1</code>)和 <code>key2</code> (针对 <code>table2</code>)选择的键列值的等同性联接 <code>table1</code> 的行与 <code>table2</code> 的行。将结果输入名为 <code>newColumnName</code> 的列。</p>\r\n<p>可选的 <code>joinKind</code> 指定要执行的联接类型。默认情况下，如果未指定 <code>joinKind</code>，则执行左外部联接。</p>\r\n<p>可包含 <code>keyEqualityComparers</code> 的可选集来指定如何比较键列。此功能目前仅适用于内部使用。</p>  ",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "使用单个键列联接两个表。",
            "Code": "Table.NestedJoin(\r\n    Table.FromRecords({\r\n        [CustomerToCall = 1],\r\n        [CustomerToCall = 3]\r\n    }),\r\n    {\"CustomerToCall\"},\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"CustomerID\"},\r\n    \"CustomerDetails\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [CustomerToCall = 1, CustomerDetails = Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]})],\r\n    [CustomerToCall = 3, CustomerDetails = Table.FromRecords({[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]})]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table1": "table",
        "key1": "any",
        "table2": "any",
        "key2": "any",
        "newColumnName": "text",
        "joinKind": "JoinKind.Type",
        "keyEqualityComparers": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.Pivot",
      "Documentation": {
        "Documentation.Name": "Table.Pivot",
        "Documentation.Description": "给定一对表示属性-值对的列，将属性列中的数据旋转为列标题。",
        "Documentation.LongDescription": "给定一对表示属性-值对的列，将属性列中的数据旋转为列标题。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "选取表 <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 的属性列中的值 \"a\"、\"b\" 和 \"c\"，并将它们透视为其自己的列。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 3],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          },
          {
            "Description": "选取表 <code>({ [ key = \"x\", attribute = \"a\", value = 1 ], [ key = \"x\", attribute = \"c\", value = 3 ], [ key = \"x\", attribute = \"c\", value = 5 ], [ key = \"y\", attribute = \"a\", value = 2 ], [ key = \"y\", attribute = \"b\", value = 4 ] })</code> 的属性列中的值 \"a\"、\"b\" 和 \"c\"，并将它们透视为其自己的列。 键 \"x\" 的属性 \"c\" 具有多个与其关联的值，因此使用函数 List.Max 来解决冲突。",
            "Code": "Table.Pivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", attribute = \"a\", value = 1],\r\n        [key = \"x\", attribute = \"c\", value = 3],\r\n        [key = \"x\", attribute = \"c\", value = 5],\r\n        [key = \"y\", attribute = \"a\", value = 2],\r\n        [key = \"y\", attribute = \"b\", value = 4]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\",\r\n    List.Max\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", a = 1, b = null, c = 5],\r\n    [key = \"y\", a = 2, b = 4, c = null]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotValues": "list",
        "attributeColumn": "text",
        "valueColumn": "text",
        "aggregationFunction": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceRows",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRows",
        "Documentation.Description": "使用提供的行替换指定范围内的行。",
        "Documentation.LongDescription": "在输入 <code>table</code> 中使用指定的 <code>rows</code>，从 <code>offset</code> 之后开始替换指定的行数 <code>count</code>。<code>rows</code> 参数是记录列表。\r\n    <ul>\r\n       <li><code>table</code>: 要在其中执行替换的表。</li>\r\n       <li><code>offset</code>: 在进行替换之前要跳过的行数。</li>\r\n       <li><code>count</code>: 要替换的行数。</li>\r\n       <li><code>rows</code>: 要在由 <code>offset</code> 指定的位置插入到 <code>table</code> 中的行记录的列表。</li>\r\n    </ul>\r\n",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "从位置 1 开始，替换 3 行。",
            "Code": "Table.ReplaceRows(\r\n    Table.FromRecords({\r\n        [Column1 = 1],\r\n        [Column1 = 2],\r\n        [Column1 = 3],\r\n        [Column1 = 4],\r\n        [Column1 = 5]\r\n    }),\r\n    1,\r\n    3,\r\n    {[Column1 = 6], [Column1 = 7]}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Column1 = 1],\r\n    [Column1 = 6],\r\n    [Column1 = 7],\r\n    [Column1 = 5]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "offset": "number",
        "count": "number",
        "rows": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceValue",
        "Documentation.Description": "用指定列中的其他值替换一个值。",
        "Documentation.LongDescription": "在 <code>table</code> 的指定列中将 <code>oldValue</code> 替换为 <code>newValue</code>。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将文本“goodbye”替换为 B 列中的“world”，仅匹配整个值。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"goodbye\"],\r\n        [A = 3, B = \"goodbyes\"]\r\n    }),\r\n    \"goodbye\",\r\n    \"world\",\r\n    Replacer.ReplaceValue,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"],\r\n    [A = 3, B = \"goodbyes\"]\r\n})"
          },
          {
            "Description": "将文本 “your” 替换为 B 列中的 “or”，与值的任何部分匹配。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [A = 1, B = \"hello\"],\r\n        [A = 2, B = \"wurld\"]\r\n    }),\r\n    \"ur\",\r\n    \"or\",\r\n    Replacer.ReplaceText,\r\n    {\"B\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [A = 1, B = \"hello\"],\r\n    [A = 2, B = \"world\"]\r\n})"
          },
          {
            "Description": "匿名化美国员工的姓名。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each if [Country] = \"US\" then [Name] else false,\r\n    each Text.Repeat(\"*\", Text.Length([Name])),\r\n    Replacer.ReplaceValue,\r\n    {\"Name\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"*****\", Country = \"US\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          },
          {
            "Description": "匿名化美国员工的所有列。",
            "Code": "Table.ReplaceValue(\r\n    Table.FromRecords({\r\n        [Name = \"Cindy\", Country = \"US\"],\r\n        [Name = \"Bob\", Country = \"CA\"]\r\n    }),\r\n    each [Country] = \"US\",\r\n    \"?\",\r\n    (currentValue, isUS, replacementValue) =>\r\n        if isUS then\r\n            Text.Repeat(replacementValue, Text.Length(currentValue))\r\n        else\r\n            currentValue,\r\n    {\"Name\", \"Country\"}\r\n)",
            "Result": "Table.FromRecords({\r\n    [Name = \"?????\", Country = \"??\"],\r\n    [Name = \"Bob\", Country = \"CA\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function",
        "columnsToSearch": "list"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Table.SplitColumn",
      "Documentation": {
        "Documentation.Name": "Table.SplitColumn",
        "Documentation.Description": "使用指定的拆分器功能，将指定的列拆分为一组其他列。",
        "Documentation.LongDescription": "使用指定的拆分器功能，将指定的列拆分为一组其他列。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将“i”处的 [Name] 列拆分为两列",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    })\r\nin\r\n    Table.SplitColumn(Customers, \"Name\", Splitter.SplitTextByDelimiter(\"i\"), 2)",
            "Result": "Table.FromRecords({\r\n    [CustomerID = 1, Name.1 = \"Bob\", Name.2 = null, Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name.1 = \"J\", Name.2 = \"m\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name.1 = \"Paul\", Name.2 = null, Phone = \"543-7890\"],\r\n    [CustomerID = 4, Name.1 = \"Cr\", Name.2 = \"st\", Phone = \"232-1550\"]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "sourceColumn": "text",
        "splitter": "function",
        "columnNamesOrNumber": "any",
        "default": "any",
        "extraColumns": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Table.Unpivot",
      "Documentation": {
        "Documentation.Name": "Table.Unpivot",
        "Documentation.Description": "将表中的一组列转换为属性-值对。",
        "Documentation.LongDescription": "将表中的一组列转换为属性-值对，并与每行中的剩余值相结合。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "选取表 <code>({[ key = \"x\", a = 1, b = null, c = 3 ], [ key = \"y\", a = 2, b = 4, c = null ]})</code> 中的列 \"a\"、\"b\" 和 \"c\"，并将它们逆透视为属性-值对。",
            "Code": "Table.Unpivot(\r\n    Table.FromRecords({\r\n        [key = \"x\", a = 1, b = null, c = 3],\r\n        [key = \"y\", a = 2, b = 4, c = null]\r\n    }),\r\n    {\"a\", \"b\", \"c\"},\r\n    \"attribute\",\r\n    \"value\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"x\", attribute = \"a\", value = 1],\r\n    [key = \"x\", attribute = \"c\", value = 3],\r\n    [key = \"y\", attribute = \"a\", value = 2],\r\n    [key = \"y\", attribute = \"b\", value = 4]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Table.UnpivotOtherColumns",
      "Documentation": {
        "Documentation.Name": "Table.UnpivotOtherColumns",
        "Documentation.Description": "将指定集以外的所有列转换为属性-值对。",
        "Documentation.LongDescription": "将指定集以外的所有列转换为属性值对，并与每行中的剩余值合并。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "将指定集以外的所有列转换为属性值对，并与每行中的剩余值合并。",
            "Code": "Table.UnpivotOtherColumns(\r\n    Table.FromRecords({\r\n        [key = \"key1\", attribute1 = 1, attribute2 = 2, attribute3 = 3],\r\n        [key = \"key2\", attribute1 = 4, attribute2 = 5, attribute3 = 6]\r\n    }),\r\n    {\"key\"},\r\n    \"column1\",\r\n    \"column2\"\r\n)",
            "Result": "Table.FromRecords({\r\n    [key = \"key1\", column1 = \"attribute1\", column2 = 1],\r\n    [key = \"key1\", column1 = \"attribute2\", column2 = 2],\r\n    [key = \"key1\", column1 = \"attribute3\", column2 = 3],\r\n    [key = \"key2\", column1 = \"attribute1\", column2 = 4],\r\n    [key = \"key2\", column1 = \"attribute2\", column2 = 5],\r\n    [key = \"key2\", column1 = \"attribute3\", column2 = 6]\r\n})"
          }
        ]
      },
      "ReturnType": "table",
      "Parameters": {
        "table": "table",
        "pivotColumns": "list",
        "attributeColumn": "text",
        "valueColumn": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "TeamsAnalytics.Contents",
      "Documentation": {
        "Documentation.Name": "Microsoft Teams 个人分析",
        "Documentation.LongDescription": "<p>借助 Teams 分析连接器，可深入了解你对 Teams 的使用情况。数据既可用于你在 Teams 中的个人活动，又可用于你在 Teams 中所属的活动。</p>\r\n<p>可获取先前 90 天的数据。</p>\r\n<p>有关可用数据类型的详细信息，请参阅以下帮助文档: </p>\r\n<ul>\r\n<li><b>Teams 使用情况:</b> https://docs.microsoft.com/zh-cn/microsoftteams/teams-analytics-and-reports/teams-usage-report</li>\r\n<li><b>Teams 用户活动:</b> https://docs.microsoft.com/zh-cn/microsoftteams/teams-analytics-and-reports/user-activity-report</li>\r\n</ul>"
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Tenforce.Contents",
      "Documentation": {
        "Documentation.Name": "Tenforce (Smart)List",
        "Documentation.LongDescription": "Selection data"
      },
      "ReturnType": "table",
      "Parameters": {
        "ApplicationUrl": "text",
        "ListId": "text",
        "DataType": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VSTS.Views",
      "Documentation": {
        "Documentation.Description": "输入组织和项目名称。",
        "Documentation.DisplayName": "VSTS.Views",
        "Documentation.Caption": "VSTS.Views",
        "Documentation.Name": "Azure DevOps Services",
        "Documentation.LongDescription": "返回包含 Azure DevOps 提供的 OData 源的表。"
      },
      "ReturnType": "table",
      "Parameters": {
        "url": "text",
        "project": "text",
        "areaPath": "text",
        "options": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "WebtrendsAnalytics.Tables",
      "Documentation": {
        "Documentation.Description": "Enter the Profile ID associated with your Webtrends account.",
        "Documentation.DisplayName": "Webtrends",
        "Documentation.Caption": "Tables",
        "Documentation.Name": "Webtrends Analytics",
        "Documentation.LongDescription": "Returns a table with relevant Webtrends data."
      },
      "ReturnType": "table",
      "Parameters": {
        "ProfileId": "text",
        "Period": "text",
        "reportType": "text",
        "startDate": "date",
        "endDate": "date",
        "startPeriod": "text",
        "endPeriod": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Wrike.Contents",
      "Documentation": {
        "Documentation.Name": "Wrike",
        "Documentation.LongDescription": " Shared function and first entry point to Connector. Display initial Navigation hierarchy.",
        "Documentation.Examples": []
      },
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "appFigures.Tables",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "eWayCRM.Contents",
      "Documentation": {},
      "ReturnType": "table",
      "Parameters": {
        "IncludeRelations": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "inwink.ScopeContents",
      "Documentation": {
        "Documentation.Name": "inwink source",
        "Documentation.LongDescription": "inwink data"
      },
      "ReturnType": "table",
      "Parameters": {
        "customerId": "text",
        "scope": "text",
        "scopeId": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.SampleStratifiedWithHoldout",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "strata": "text",
        "totalSize": "number",
        "data": "table",
        "targetSampleSize": "number",
        "holdoutRatio": "number",
        "stratifyTrainingSet": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AI.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Capacities",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIFunctions.ExecuteInternal",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "capacityobjectid": "text",
        "params": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIFunctions.GetAutoMLEntity",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "modelDataflowId": "text",
        "entityName": "text",
        "partitionUri": "text",
        "entityAttributes": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AIFunctions.PostProcess",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "input": "table",
        "columnName": "text",
        "functionName": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "AIInsights.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AIInsights.ContentsGenerator",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AML.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AML.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "Acterys.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "AzureMLFunctions.Execute",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "payload": "text",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "AzureMLFunctions.ExecuteBatch",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "uri": "text",
        "key": "text",
        "inputTable": "table",
        "version": "number",
        "dataframeName": "text"
      },
      "RequiredParameters": "5"
    },
    {
      "Name": "BQECore.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "BinaryFormat.Binary",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Binary",
        "Documentation.Description": "返回读取二进制值的二进制格式。",
        "Documentation.LongDescription": "返回读取二进制值的二进制格式。如果指定了 <code>length</code>，则该二进制值将包含这些字节。如果未指定 <code>length</code>，则该二进制值将包含剩余字节。可将 <code>length</code> 指定为数值，也可以指定为置二进制数据之前长度的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading binary data",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "BitSightSecurityRatings.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "company_guid": "text",
        "affects_rating_findings": "logical"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "Comparer.Equals",
      "Documentation": {
        "Documentation.Name": "Comparer.Equals",
        "Documentation.Description": "在对两个给定值进行同等性检查的基础上返回一个逻辑值。",
        "Documentation.LongDescription": "使用提供的 <code>comparer</code> 基于对两个给定值 <code>x</code> 和 <code>y</code> 的相等性检查返回 <code>logical</code> 值。\r\n      <div>\r\n        <code>comparer</code> 是用于控制比较的 <code>Comparer</code>。\r\n        比较器是接受两个参数并根据第一个值是小于、等于还是大于第二个值返回 -1、0 或 1 的函数。 \r\n        比较器可用于提供不区分大小写或区分区域性和区域设置的比较。\r\n      </div>\r\n      <div>\r\n        以下内置比较器以公式语言提供:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用于执行精确的序号比较</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行精确的不区分大小写序号比较</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n      </ul>",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 \"en-US\" 区域设置比较 \"1\" 和 \"A\" 以确定这些值是否相等。",
            "Code": "Comparer.Equals(Comparer.FromCulture(\"en-US\"), \"1\", \"A\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "comparer": "function",
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "DateTime.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.FixedLocalNow",
        "Documentation.Description": "返回采用本地时区的当前日期和时间。该值是固定的，因此将不会随着连续调用而更改。",
        "Documentation.LongDescription": "返回设置为系统上的当前日期和时间的 <code>datetime</code> 值。该值是固定的，因此将不会随着连续调用而更改，这与 DateTime.LocalNow 不同，后者可能会在表达式的执行过程中返回不同值。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTime.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTime.LocalNow",
        "Documentation.Description": "返回采用本地时区的当前日期和时间。",
        "Documentation.LongDescription": "返回设置为系统上的当前日期和时间的 <code>datetime</code> 值。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": []
      },
      "ReturnType": "datetime",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedLocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedLocalNow",
        "Documentation.Description": "返回采用本地时区的当前日期和时间。该值是固定的，因此将不会随着连续调用而更改。",
        "Documentation.LongDescription": "返回设置为系统上的当前日期和时间的 <code>datetime</code> 值。返回的值包含表示本地时区的时区信息。该值是固定的，因此将不会随着连续调用而更改，这与 DateTimeZone.LocalNow 不同，后者可能会在表达式的执行过程中返回不同值。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.FixedUtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FixedUtcNow",
        "Documentation.Description": "返回采用 UTC (GMT 时区)的当前日期和时间。该值是固定的，因此将不会随着连续调用而更改。",
        "Documentation.LongDescription": "返回采用 UTC (GMT 时区)的当前日期和时间。该值是固定的，因此将不会随着连续调用而更改。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.LocalNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.LocalNow",
        "Documentation.Description": "返回采用本地时区的当前日期和时间。",
        "Documentation.LongDescription": "返回设置为系统上的当前日期和时间的 <code>datetimezone</code> 值。\r\n    返回的值包含表示本地时区的时区信息。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "DateTimeZone.UtcNow",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.UtcNow",
        "Documentation.Description": "返回采用 UTC (GMT 时区)的当前日期和时间。",
        "Documentation.LongDescription": "返回采用 UTC (GMT 时区)的当前日期和时间。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "获取采用 UTC 的当前日期和时间。",
            "Code": "DateTimeZone.UtcNow()",
            "Result": "#datetimezone(2011, 8, 16, 23, 34, 37.745, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.ActivityId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.ActivityId",
        "Documentation.Description": "为当前正在运行的计算返回不透明的标识符。",
        "Documentation.LongDescription": "为当前正在运行的计算返回不透明的标识符。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.CorrelationId",
      "Documentation": {
        "Documentation.Name": "Diagnostics.CorrelationId",
        "Documentation.Description": "返回不透明标识符，以将传入请求与传出请求相关联。",
        "Documentation.LongDescription": "返回不透明标识符，以将传入请求与传出请求相关联。",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Diagnostics.Trace",
      "Documentation": {
        "Documentation.Name": "Diagnostics.Trace",
        "Documentation.Description": "写入跟踪条目(如果已启用跟踪的话)并返回值。",
        "Documentation.LongDescription": "写入跟踪 <code>message</code> (如果已启用跟踪的话)并返回 <code>value</code>。可选参数 <code>delayed</code> 指定了是否延迟计算 <code>value</code> 直到跟踪到消息。<code>traceLevel</code> 可取以下任一值:\r\n    <code>TraceLevel.Critical</code>\r\n    <code>TraceLevel.Error</code>、\r\n    <code>TraceLevel.Warning</code>、\r\n    <code>TraceLevel.Information</code>、\r\n    <code>TraceLevel.Verbose</code>。\r\n  ",
        "Documentation.Category": "Diagnostics",
        "Documentation.Examples": [
          {
            "Description": "在调用 Text.From 函数前跟踪消息，并返回结果。",
            "Code": "Diagnostics.Trace(TraceLevel.Information, \"TextValueFromNumber\", () => Text.From(123), true)",
            "Result": "\"123\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "traceLevel": "number",
        "message": "any",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "EntersoftBusinessSuite.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "FactSetAnalytics.AuthenticationCheck",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "HexagonSmartApi.ApplyUnitsOfMeasure",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "unitsOfMeasureTarget": "any",
        "unitCategory": "text",
        "fromUnit": "text",
        "toUnit": "text",
        "precision": "number"
      },
      "RequiredParameters": "6"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterUrl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filterTarget": "text",
        "parameterNames": "record",
        "objectHierarchyNameInput": "text",
        "objectHierarchyResourceIdsInput": "text",
        "objectTypesInput": "text",
        "queryExpressionInput": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "IdentityProvider.Default",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Default",
        "Documentation.Description": "当前主机的默认标识提供程序。",
        "Documentation.LongDescription": "当前主机的默认标识提供程序。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "LinkedIn.SalesNavigatorAnalyticsImpl",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "contractName": "text",
        "action": "text",
        "startAt": "date",
        "endAt": "date"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Accumulate",
      "Documentation": {
        "Documentation.Name": "List.Accumulate",
        "Documentation.Description": "从列表中的项累积汇总值。",
        "Documentation.LongDescription": "使用 <code>accumulator</code> 从列表 <code>list</code> 中的项累积汇总值。\r\n    可以设置可选的种子参数 <code>seed</code>。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "使用 ((state, current) => state + current ) 从列表 {1, 2, 3, 4, 5} 中的项累积汇总值。",
            "Code": "List.Accumulate({1, 2, 3, 4, 5}, 0, (state, current) => state + current)",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "seed": "any",
        "accumulator": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimeZones",
      "Documentation": {
        "Documentation.Name": "List.DateTimeZones",
        "Documentation.Description": "给定初始值、计数和增量期间值来生成 datetimezone 值的列表。",
        "Documentation.LongDescription": "返回大小为 <code>count</code> 的 <code>datetimezone</code> 值的列表，从 <code>start</code> 开始。给定的增量 <code>step</code> 是加到每个值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "从新年前 5 分钟(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0))开始创建 10 个值的列表，以 1 分钟为增量(#duration(0, 0, 1, 0))。",
            "Code": "List.DateTimeZones(#datetimezone(2011, 12, 31, 23, 55, 0, -8, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetimezone(2011, 12, 31, 23, 55, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 56, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 57, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 58, 0, -8, 0),\r\n    #datetimezone(2011, 12, 31, 23, 59, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 0, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 1, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 2, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 3, 0, -8, 0),\r\n    #datetimezone(2012, 1, 1, 0, 4, 0, -8, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetimezone",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.DateTimes",
      "Documentation": {
        "Documentation.Name": "List.DateTimes",
        "Documentation.Description": "给定初始值、计数和增量期间值来生成 datetime 值的列表。",
        "Documentation.LongDescription": "返回大小为 <code>count</code> 的 <code>datetime</code> 值的列表，从 <code>start</code> 开始。给定的增量 <code>step</code> 是加到每个值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "从新年前 5 分钟(#datetime(2011, 12, 31, 23, 55, 0))开始创建 10 个值的列表，以 1 分钟为增量(#duration(0, 0, 1, 0))。",
            "Code": "List.DateTimes(#datetime(2011, 12, 31, 23, 55, 0), 10, #duration(0, 0, 1, 0))",
            "Result": "{\r\n    #datetime(2011, 12, 31, 23, 55, 0),\r\n    #datetime(2011, 12, 31, 23, 56, 0),\r\n    #datetime(2011, 12, 31, 23, 57, 0),\r\n    #datetime(2011, 12, 31, 23, 58, 0),\r\n    #datetime(2011, 12, 31, 23, 59, 0),\r\n    #datetime(2012, 1, 1, 0, 0, 0),\r\n    #datetime(2012, 1, 1, 0, 1, 0),\r\n    #datetime(2012, 1, 1, 0, 2, 0),\r\n    #datetime(2012, 1, 1, 0, 3, 0),\r\n    #datetime(2012, 1, 1, 0, 4, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "datetime",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Dates",
      "Documentation": {
        "Documentation.Name": "List.Dates",
        "Documentation.Description": "给定初始值、计数和增量期间值来生成 date 值的列表。",
        "Documentation.LongDescription": "返回大小为 <code>count</code> 的 <code>date</code> 值的列表，从 <code>start</code> 开始。给定的增量 <code>step</code> 是加到每个值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "创建 5 个值的列表，从新年除夕(#date(2011, 12, 31))开始，以 1 天为增量(#duration(1, 0, 0, 0))。",
            "Code": "List.Dates(#date(2011, 12, 31), 5, #duration(1, 0, 0, 0))",
            "Result": "{\r\n    #date(2011, 12, 31),\r\n    #date(2012, 1, 1),\r\n    #date(2012, 1, 2),\r\n    #date(2012, 1, 3),\r\n    #date(2012, 1, 4)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "date",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Durations",
      "Documentation": {
        "Documentation.Name": "List.Durations",
        "Documentation.Description": "给定初始值、计数和增量 duration 值来生成 duration 值的列表。",
        "Documentation.LongDescription": "返回 <code>count</code> <code>duration</code> 值的列表，从 <code>start</code> 开始，以给定的 <code>duration</code> <code>step</code> 为增量。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "创建 5 个值的列表，从 1 小时开始，以 1 小时为增量。",
            "Code": "List.Durations(#duration(0, 1, 0, 0), 5, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #duration(0, 1, 0, 0),\r\n    #duration(0, 2, 0, 0),\r\n    #duration(0, 3, 0, 0),\r\n    #duration(0, 4, 0, 0),\r\n    #duration(0, 5, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "duration",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.Generate",
      "Documentation": {
        "Documentation.Name": "List.Generate",
        "Documentation.Description": "生成值列表。",
        "Documentation.LongDescription": "使用提供的函数生成值列表。<code>initial</code> 函数生成一个起始候选值，然后针对 <code>condition</code> 进行测试。\r\n    如果候选值获得批准，则会将其作为结果列表的一部分返回，并通过将新批准的值传递给 <code>next</code> 来生成下一个候选值。\r\n    候选值无法匹配 <code>condition</code> 后，列表生成进程将停止。\r\n    也可以提供可选参数 <code>selector</code>，以转换生成列表中的项。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "创建一个列表，方法是从 10 开始，重复递减一个，并确保每项大于零。",
            "Code": "List.Generate(() => 10, each _ > 0, each _ - 1)",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          },
          {
            "Description": "生成包含 x 和 y 的记录的列表，其中 x 是一个值，y 是一个列表。x 应保持小于 10 并表示列表 y 中的项数。在生成列表后，只返回 x 值。",
            "Code": "List.Generate(\r\n    () => [x = 1, y = {}],\r\n    each [x] < 10,\r\n    each [x = List.Count([y]), y = [y] & {x}],\r\n    each [x]\r\n)",
            "Result": "{1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "initial": "function",
        "condition": "function",
        "next": "function",
        "selector": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.InsertRange",
      "Documentation": {
        "Documentation.Name": "List.InsertRange",
        "Documentation.Description": "在给定的索引处将值插入列表。",
        "Documentation.LongDescription": "返回通过在 <code>index</code> 处将 <code>values</code> 中的值插入 <code>list</code> 来生成的新列表。列表中的第一个位置为索引 0 处。\r\n      <ul>\r\n        <li><code>list</code>: 要插入值的目标列表。</li>\r\n        <li><code>index</code>: 目标列表(<code>list</code>)的索引，要在此处插入值。列表中的第一个位置为索引 0 处。</li>\r\n        <li><code>values</code>: 要插入 <code>list</code> 的值列表。</li>\r\n      </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "在索引 2 处将列表({3, 4})插入目标列表({1, 2, 5})。",
            "Code": "List.InsertRange({1, 2, 5}, 2, {3, 4})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5\r\n}"
          },
          {
            "Description": "在索引 0 处将带嵌套列表的列表({1, {1.1, 1.2}})插入目标列表({2, 3, 4})。",
            "Code": "List.InsertRange({2, 3, 4}, 0, {1, {1.1, 1.2}})",
            "Result": "{\r\n    1,\r\n    {\r\n        1.1,\r\n        1.2\r\n    },\r\n    2,\r\n    3,\r\n    4\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "values": "list"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "List.ReplaceRange",
        "Documentation.Description": "从特定位置开始使用替换值替换指定数目的值。",
        "Documentation.LongDescription": "从指定的位置 <code>index</code> 开始使用列表 <code>replaceWith</code> 替换 <code>list</code> 中的 <code>count</code> 个值。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "使用 {3, 4} 替换列表 {1, 2, 7, 8, 9, 5} 中的 {7, 8, 9}。",
            "Code": "List.ReplaceRange({1, 2, 7, 8, 9, 5}, 2, 3, {3, 4})",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number",
        "replaceWith": "list"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "List.ReplaceValue",
        "Documentation.Description": "在列表中搜索指定的值并替换它。",
        "Documentation.LongDescription": "在值列表 <code>list</code> 中搜索值 <code>oldValue</code>，每次找到后使用替换值 <code>newValue</code> 替换它。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "使用 \"A\" 替换列表 {\"a\", \"B\", \"a\", \"a\"} 中的所有 \"a\" 值。",
            "Code": "List.ReplaceValue({\"a\", \"B\", \"a\", \"a\"}, \"a\", \"A\", Replacer.ReplaceText)",
            "Result": "{\"A\", \"B\", \"A\", \"A\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "oldValue": "any",
        "newValue": "any",
        "replacer": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "List.Times",
      "Documentation": {
        "Documentation.Name": "List.Times",
        "Documentation.Description": "给定初始值、计数和增量期间值来生成 time 值的列表。",
        "Documentation.LongDescription": "返回大小为 <code>count</code> 的 <code>time</code> 值的列表，从 <code>start</code> 开始。给定的增量 <code>step</code> 是加到每个值的 <code>duration</code> 值。",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "从中午(#time(12, 0, 0))开始创建 4 个值的列表，以 1 小时为增量(#duration(0, 1, 0, 0))。",
            "Code": "List.Times(#time(12, 0, 0), 4, #duration(0, 1, 0, 0))",
            "Result": "{\r\n    #time(12, 0, 0),\r\n    #time(13, 0, 0),\r\n    #time(14, 0, 0),\r\n    #time(15, 0, 0)\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "time",
        "count": "number",
        "step": "duration"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "List.TransformMany",
      "Documentation": {
        "Documentation.Name": "List.TransformMany",
        "Documentation.Description": "返回一个列表，其元素是使用指定的函数从输入列表转换而来。",
        "Documentation.LongDescription": "返回其元素从输入列表投影的列表。<br>\r\n    <br>\r\n<code>collectionTransform</code> 函数将每个元素转换为中间列表， <code>resultTransform</code> 函数接收原始元素以及中间列表中的项，以便构造最终结果。<br>\r\n    <br>\r\n<code>collectionTransform</code> 函数具有签名<code> (x as any)作为列表 =>...</code>，其中 <code>x</code> 是 <code>list</code> 中的元素。\r\n<code>resultTransform</code> 函数将投影结果的形状，并具有签名 <code>(x as any， y as any) 作为任何 =>...</code>，其中 <code>x</code> 是 <code>list</code> 中的元素，<code>y</code> 是通过将 <code>x</code> 传递给 <code>collectionTransform</code> 生成的列表中的元素。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "平展人员及其宠物的列表。",
            "Code": "List.TransformMany(\r\n    {\r\n        [Name = \"Alice\", Pets = {\"Scruffy\", \"Sam\"}],\r\n        [Name = \"Bob\", Pets = {\"Walker\"}]\r\n    },\r\n    each [Pets],\r\n    (person, pet) => [Name = person[Name], Pet = pet]\r\n)",
            "Result": "{\r\n    [Name = \"Alice\", Pet = \"Scruffy\"],\r\n    [Name = \"Alice\", Pet = \"Sam\"],\r\n    [Name = \"Bob\", Pet = \"Walker\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "collectionTransform": "function",
        "resultTransform": "function"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Funnels",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Mixpanel.Segmentation",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "event": "text",
        "fromDate": "text",
        "toDate": "text",
        "whereClause": "text",
        "unit": "text",
        "interval": "number",
        "countType": "text",
        "onProperty": "text",
        "limit": "number",
        "where": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Mixpanel.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Number.Random",
      "Documentation": {
        "Documentation.Name": "Number.Random",
        "Documentation.Description": "返回随机数。",
        "Documentation.LongDescription": "返回介于 0 到 1 之间的随机数。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "获取随机数。",
            "Code": "Number.Random()",
            "Result": "0.919303"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Progress.DataSourceProgress",
      "Documentation": {
        "Documentation.Name": "Progress.DataSourceProgress",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "QuickBooks.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Record.AddField",
      "Documentation": {
        "Documentation.Name": "Record.AddField",
        "Documentation.Description": "将字段添加到记录。",
        "Documentation.LongDescription": "给定字段 <code>fieldName</code> 的名称和值 <code>value</code>，将字段添加到记录 <code>record</code>。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "将字段地址添加到记录。",
            "Code": "Record.AddField([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"Address\", \"123 Main St.\")",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\", Address = \"123 Main St.\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldName": "text",
        "value": "any",
        "delayed": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceText",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceText",
        "Documentation.Description": "在提供的输入内替换文本。",
        "Documentation.LongDescription": "使用 <code>new</code> 文本替换原始 <code>text</code> 中的 <code>old</code> 文本。可以在 <code>List.ReplaceValue</code> 和 <code>Table.ReplaceValue</code> 中使用此替换器函数。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "在字符串 \"hEllo world\" 中使用 \"He\" 替换文本 \"hE\"。",
            "Code": "Replacer.ReplaceText(\"hEllo world\", \"hE\", \"He\")",
            "Result": "\"Hello world\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Replacer.ReplaceValue",
      "Documentation": {
        "Documentation.Name": "Replacer.ReplaceValue",
        "Documentation.Description": "在提供的输入内替换值。",
        "Documentation.LongDescription": "使用 <code>new</code> 值替换原始 <code>value</code> 中的 <code>old</code> 值。可以在 <code>List.ReplaceValue</code> 和 <code>Table.ReplaceValue</code> 中使用此替换器函数。",
        "Documentation.Category": "Replacer",
        "Documentation.Examples": [
          {
            "Description": "使用值 10 替换值 11。",
            "Code": "Replacer.ReplaceValue(11, 11, 10)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "old": "any",
        "new": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Roamler.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Smartsheet.Query",
      "Documentation": {
        "Documentation.Description": "从 Smartsheet API 返回 JSON 结果",
        "Documentation.DisplayName": "Smartsheet.Query",
        "Documentation.Caption": "Smartsheet.Query",
        "Documentation.Name": "Smartsheet.Query",
        "Documentation.LongDescription": "在指定终结点调用 Smartsheet 2.0 REST API，并将结果作为 JSON 记录返回。",
        "Documentation.Examples": [
          {
            "Description": "从指定了其他参数的工作表 Smartsheet API 终结点拉取数据",
            "Code": "Smartsheet.Content(\"sheets\", \"include=ownerInfo&includeAll=true\", [])",
            "Result": "包含由 Smartsheet API 返回的工作表信息的表"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text",
        "args": "text",
        "headers": "record"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "SolarWindsServiceDesk.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "SolarWindsServiceDesk.TestContents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitByNothing",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitByNothing",
        "Documentation.Description": "返回不拆分且将其自变量作为单元素列表返回的函数。",
        "Documentation.LongDescription": "返回不拆分且将其自变量作为单元素列表返回的函数。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Splitter.SplitTextByWhitespace",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByWhitespace",
        "Documentation.Description": "返回一个函数，它在空白处将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它在空白处将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "按空格字符拆分输入，将引号视为任何其他字符。",
            "Code": "Splitter.SplitTextByWhitespace(QuoteStyle.None)(\"a b#(tab)c\")",
            "Result": "{\"a\", \"b\", \"c\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "clientId": "text",
        "path": "text",
        "optionalParameter": "text"
      },
      "RequiredParameters": "0"
    },
    {
      "Name": "SweetIQ.Tables",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Table.Partition",
      "Documentation": {
        "Documentation.Name": "Table.Partition",
        "Documentation.Description": "根据指定的组和列的数目，将表分区为一系列表。",
        "Documentation.LongDescription": "根据 <code>column</code> 和 <code>hash</code> 函数的值，将 <code>table</code> 分区为一组 <code>groups</code> 个表。\r\n    <code>hash</code> 函数应用于 <code>column</code> 行的值，以获取该行的哈希值。哈希值模数 <code>groups</code> 确定要将该行放入所返回的哪个表中。\r\n    <ul>\r\n       <li><code>table</code>: 要分区的表。</li>\r\n       <li><code>column</code>: 要执行哈希运算以确定该行位于返回的哪个表中的列。</li>\r\n       <li><code>groups</code>: 要对输入表进行分区的表数。</li>\r\n       <li><code>hash</code>: 应用以获取哈希值的函数。</li>\r\n    </ul>\r\n  ",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "使用列的值作为哈希函数，基于列 [a] 将表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 分区为 2 个表。",
            "Code": "Table.Partition(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    \"a\",\r\n    2,\r\n    each _\r\n)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 2, b = 4]\r\n    }),\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 1, b = 4]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text",
        "groups": "number",
        "hash": "function"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Text.BetweenDelimiters",
      "Documentation": {
        "Documentation.Name": "Text.BetweenDelimiters",
        "Documentation.Description": "Text.BetweenDelimiters",
        "Documentation.LongDescription": "返回 <code>text</code> 中位于指定的 <code>startDelimiter</code> 和 <code>endDelimiter</code> 之间的部分。\r\n    可选数字 <code>startIndex</code> 指示要考虑哪一次出现的 <code>startDelimiter</code>。\r\n    可选列表 <code>startIndex</code> 指示要考虑哪一次出现的 <code>startDelimiter</code>，以及应从输入的开头还是结尾编制索引。\r\n    <code>endIndex</code> 类似，不同之处在于，相对于 <code>startIndex</code> 编制索引。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "获取 \"111 (222) 333 (444)\" (第一个)左括号及其随后(第一个)右括号之间的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\")",
            "Result": "\"222\""
          },
          {
            "Description": "获取 \"111 (222) 333 (444)\" 第二个左括号及其随后第一个右括号之间的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", 1, 0)",
            "Result": "\"444\""
          },
          {
            "Description": "获取 \"111 (222) 333 (444)\" 倒数第二个左括号及其随后第二个右括号之间的部分。",
            "Code": "Text.BetweenDelimiters(\"111 (222) 333 (444)\", \"(\", \")\", {1, RelativePosition.FromEnd}, {1, RelativePosition.FromStart})",
            "Result": "\"222) 333 (444\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "startDelimiter": "text",
        "endDelimiter": "text",
        "startIndex": "any",
        "endIndex": "any"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.Insert",
      "Documentation": {
        "Documentation.Name": "Text.Insert",
        "Documentation.Description": "将一个文本值插入到另一个文本值的给定位置。",
        "Documentation.LongDescription": "返回将文本值 <code>newText</code> 插入到文本值 <code>text</code> 中的位置 <code>offset</code> 的结果。位置从数字 0 开始。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "在 \"ABD\" 中的 \"B\" 和 \"D\" 之间插入 \"C\"。",
            "Code": "Text.Insert(\"ABD\", 2, \"C\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "newText": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.NewGuid",
      "Documentation": {
        "Documentation.Name": "Text.NewGuid",
        "Documentation.Description": "返回新的、随机的全局唯一标识符(GUID)。",
        "Documentation.LongDescription": "返回新的、随机的全局唯一标识符(GUID)。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Text.Replace",
      "Documentation": {
        "Documentation.Name": "Text.Replace",
        "Documentation.Description": "替换文本中所有出现的给定子字符串。",
        "Documentation.LongDescription": "返回将文本值 <code>text</code> 中所有出现的文本值 <code>old</code> 替换为文本值 <code>new</code> 的结果。此函数区分大小写。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "将句子中出现的每个 \"the\" 替换为 \"a\"。",
            "Code": "Text.Replace(\"the quick brown fox jumps over the lazy dog\", \"the\", \"a\")",
            "Result": "\"a quick brown fox jumps over a lazy dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "old": "text",
        "new": "text"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "Text.ReplaceRange",
      "Documentation": {
        "Documentation.Name": "Text.ReplaceRange",
        "Documentation.Description": "删除一系列字符并在指定的位置插入新值。",
        "Documentation.LongDescription": "返回从文本值 <code>text</code> 中的位置 <code>offset</code> 开始删除一些字符 <code>count</code>，然后在 <code>text</code> 中的相同位置插入文本值 <code>newText</code> 的结果。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "使用新文本值 \"CDE\" 替换文本值 \"ABGF\" 中位置 2 的单个字符。",
            "Code": "Text.ReplaceRange(\"ABGF\", 2, 1, \"CDE\")",
            "Result": "\"ABCDEF\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number",
        "newText": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "Type.AddTableKey",
      "Documentation": {
        "Documentation.Name": "Type.AddTableKey",
        "Documentation.Description": "向给定表类型添加键。",
        "Documentation.LongDescription": "向给定表类型添加键。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type",
        "columns": "list",
        "isPrimary": "logical"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "VesselInsight.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "Webtrends.Profile",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {},
      "RequiredParameters": "0"
    },
    {
      "Name": "WorkforceDimensions.Contents",
      "Documentation": {
        "Documentation.Name": "Workforce Dimensions Connector Configuration",
        "Documentation.LongDescription": "Configuration to access OAuth server as well as default date range settigns."
      },
      "ReturnType": "text",
      "Parameters": {
        "configurationServer": "text",
        "workForceDimensionsServer": "text",
        "symbolicPeriod": "text",
        "startDate": "date",
        "endDate": "date"
      },
      "RequiredParameters": "3"
    },
    {
      "Name": "ZohoCreator.Contents",
      "Documentation": {
        "Documentation.Name": "Zoho Creator",
        "Documentation.LongDescription": "This connector will fetch data only from Zoho Creator application reports",
        "Documentation.Examples": [
          {
            "Description": "To fetches data from US account, scope 'jack', application 'task-management', report 'Task_Details'",
            "Code": "ZohoCreator.Contents(\"zoho.com\", \"jack\", \"zylker-management\", \"Employee_Details\")",
            "Result": "#table({\"Column1\"}, {{\"Column2\"}, {\"Column3\"}})"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "creatordomain": "text",
        "scopname": "text",
        "applinkname": "text",
        "reportlinkname": "text"
      },
      "RequiredParameters": "4"
    },
    {
      "Name": "AI.ExecuteInProc",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "methodName": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AI.ExternalSort",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "data": "table",
        "sortColumnName": "text",
        "maxBufferRows": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AccessControlEntry.ConditionToIdentities",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionToIdentities",
        "Documentation.Description": "返回条件将接受的标识的列表。",
        "Documentation.LongDescription": "<p>使用指定的 <code>identityProvider</code>，在 <code>identityProvider</code> 作为标识提供者的情况下，将 <code>condition</code> 转换为标识的列表，其中 <code>condition</code> 将在所有授权上下文中返回 <code>true</code>。如果无法将 <code>condition</code> 转换为标识列表，则会引发错误，例如，如果 <code>condition</code> 查询用户或组标识以外的属性以做出决策。</p>\r\n    <p>请注意，标识列表表示 <code>condition</code> 中显示的标识，并且不对其执行任何规范化操作(如组扩展)。</p>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "identityProvider": "function",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Actian.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "server": "text",
        "database": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Action.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Action.WithErrorContext",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "action",
      "Parameters": {
        "action": "action",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Compress",
      "Documentation": {
        "Documentation.Name": "Binary.Compress",
        "Documentation.Description": "使用给定的压缩类型压缩二进制值。",
        "Documentation.LongDescription": "使用给定的压缩类型压缩二进制值。此调用的结果是输入的压缩后副本。压缩类型包括:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "压缩二进制值。",
            "Code": "Binary.Compress(Binary.FromList(List.Repeat({10}, 1000)), Compression.Deflate)",
            "Result": "#binary({227, 226, 26, 5, 163, 96, 20, 12, 119, 0, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Decompress",
      "Documentation": {
        "Documentation.Name": "Binary.Decompress",
        "Documentation.Description": "使用给定压缩类型解压缩二进制值。",
        "Documentation.LongDescription": "使用给定的压缩类型解压缩二进制值。此调用的结果是输入的压缩后副本。压缩类型包括:\r\n  <ul>\r\n        <li><code>Compression.GZip</code></li>\r\n        <li><code>Compression.Deflate</code></li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "解压缩二进制值。",
            "Code": "Binary.Decompress(#binary({115, 103, 200, 7, 194, 20, 134, 36, 134, 74, 134, 84, 6, 0}), Compression.Deflate)",
            "Result": "#binary({71, 0, 111, 0, 111, 0, 100, 0, 98, 0, 121, 0, 101, 0})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "compressionType": "Compression.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Range",
      "Documentation": {
        "Documentation.Name": "Binary.Range",
        "Documentation.Description": "返回从偏移量开始的二进制值的子集。",
        "Documentation.LongDescription": "返回从偏移量 <code>binary</code> 开始的二进制值的子集。可选参数 <code>offset</code> 用于设置该子集的最大长度。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "返回从偏移量 6 开始的二进制值的子集。",
            "Code": "Binary.Range(#binary({0..10}), 6)",
            "Result": "#binary({6, 7, 8, 9, 10})"
          },
          {
            "Description": "返回从偏移量 6 开始、长度为 2 的二进制值的子集。",
            "Code": "Binary.Range(#binary({0..10}), 6, 2)",
            "Result": "#binary({6, 7})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.Split",
      "Documentation": {
        "Documentation.Name": "Binary.Split",
        "Documentation.Description": "使用指定的页面大小将指定的二进制文件拆分为二进制文件列表。",
        "Documentation.LongDescription": "将 <code>binary</code> 拆分为二进制文件列表，其中输出列表的第一个元素是包含源二进制文件 \r\n    的第一个 <code>pageSize</code> 字节的二进制文件，输出列表的下一个元素是包含源二进制文件中下一个 <code>pageSize</code> 字节的二进制文件，等等。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Binary.View",
      "Documentation": {
        "Documentation.Name": "Binary.View",
        "Documentation.Description": "使用用户定义的处理程序创建或扩展二进制，从而执行查询和操作操作。",
        "Documentation.LongDescription": "<p>返回 <code>binary</code> 视图，其中在将操作应用于视图时，使用 <code>handlers</code> 中指定的函数代替操作的默认行为。</p>\r\n<p>如果已提供 <code>binary</code>，则所有处理程序函数都为可选项。如果未提供 <code>binary</code>，则<code>GetStream</code>处理程序函数为必需项。如果未为操作指定处理程序函数，则操作的默认行为会应用于 <code>binary</code> (<code>GetExpression</code>除外)。</p>\r\n<p>处理程序函数必须返回值，该值在语义上等效于对 <code>binary</code> 应用操作的结果(或在<code>GetExpression</code>情况下生成的视图)。</p>\r\n<p>如果处理程序函数引发错误，则操作的默认行为会应用于视图。</p>\r\n<p><code>Binary.View</code>可用于实现数据源的折叠 - 将 M 查询转换为特定于源的操作(例如，用于下载文件的一部分)。</p>\r\n<p>请参阅已发布的 Power Query 自定义连接器文档，从而了解有关 <code>Binary.View</code>的更完整的说明。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "创建无需访问数据即可确定长度的基本视图。",
            "Code": "Binary.View(\r\n    null,\r\n    [\r\n        GetLength = () => 12,\r\n        GetStream = () => Text.ToBinary(\"hello world!\")\r\n    ]\r\n)",
            "Result": "Text.ToBinary(\"hello world!\")"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary",
        "handlers": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.ByteOrder",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.ByteOrder",
        "Documentation.Description": "以函数指定的字节顺序返回二进制格式。",
        "Documentation.LongDescription": "返回具有 <code>binaryFormat</code> 指定的字节顺序的二进制格式。 默认字节顺序是 <code>ByteOrder.BigEndian</code>。",
        "Documentation.Category": "Binary Formats.Controlling byte order",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "byteOrder": "ByteOrder.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Choice",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Choice",
        "Documentation.Description": "返回一个二进制格式，它基于已读取的值选择下一个二进制格式。",
        "Documentation.LongDescription": "返回一个二进制格式，它基于已读取的值选择下一个二进制格式。 由此函数生成的二进制格式值的工作方式分为以下几个阶段:<ul>\r\n<li>使用 <code>binaryFormat</code> 参数指定的二进制格式读取一个值。</li>\r\n<li>将该值传递到由 <code>chooseFunction</code> 参数指定的选择函数。</li>\r\n<li>该选择函数检查值并且返回第二个二进制格式。</li>\r\n<li>使用该第二个二进制格式读取第二个值。</li>\r\n<li>如果指定了合并函数，则第一个值和第二个值将传递到该合并函数，然后返回最终生成的值。</li>\r\n<li>如果未指定该合并函数，则返回第二个值。</li>\r\n<li>返回第二个值。</li>\r\n</ul>可选的 <code>type</code> 参数指示选择函数将返回的二进制格式的类型。 或者可以指定 <code>type any</code>、<code>type list</code> 或 <code>type binary</code>。 如果未指定 <code>type</code> 参数，则使用 <code>type any</code>。  如果使用了 <code>type list</code> 或 <code>type binary</code>，则系统可能能够返回流式 <code>binary</code> 或 <code>list</code> 值，而不是缓冲后的值，这可以减少读取该格式所需的内存量。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": [
          {
            "Description": "读取字节的列表，其中的元素数目由第一个字节确定。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length)\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          },
          {
            "Description": "读取字节的列表，其中的元素数目由第一个字节确定，并且保留读取的第一个字节。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.Record([\r\n            length = length,\r\n            list = BinaryFormat.List(BinaryFormat.Byte, length)\r\n        ])\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "[length = 2, list = {3, 4}]"
          },
          {
            "Description": "读取字节的列表，其中的元素数目通过使用流式列表由第一个字节确定。",
            "Code": "let\r\n    binaryData = #binary({2, 3, 4, 5}),\r\n    listFormat = BinaryFormat.Choice(\r\n        BinaryFormat.Byte,\r\n        (length) => BinaryFormat.List(BinaryFormat.Byte, length),\r\n        type list\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{3, 4}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "chooseFunction": "function",
        "type": "type",
        "combineFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Group",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Group",
        "Documentation.Description": "返回读取一组项的二进制格式。",
        "Documentation.LongDescription": "参数如下所示:\r\n<ul>\r\n<li><code>binaryFormat</code> 参数指定键值的二进制格式。</li>\r\n<li><code>group</code> 参数提供与已知项的组有关的信息。</li>\r\n<li>可选的 <code>extra</code> 参数可用于指定一个函数，该函数将为跟随在任何意外的键之后的值返回一个二进制格式值。如果未指定 <code>extra</code> 参数，则在存在意外的键值时会引发错误。</li>\r\n</ul>\r\n<code>group</code> 参数指定项定义的列表。每个项定义都是一个列表，包含 3-5 个值，如下所示:\r\n<ul>\r\n<li>键值。与项相对应的键的值。该值在项组内必须唯一。</li>\r\n<li>项格式。与项的值相对应的二进制格式。其允许每个项都具有不同的格式。</li>\r\n<li>项出现次数。针对该项应在组中出现多少次的 <code>BinaryOccurrence.Type</code> 值。如果必需的项未提供，将会导致错误。像对待意外键值一样处理必需的或可选的重复项。</li>\r\n<li>默认项值(可选)。如果默认项值出现在项定义列表中并且不为 Null，将使用默认项值而非默认值。重复或可选项的默认值为 Null，而重复值的默认值为空列表 { }。</li>\r\n<li>项值转换(可选)。如果在项定义列表中提供了项值转换函数并且不为 Null，将调用该函数以便转换该项值，然后才能返回它。只有在该项出现在输入中的情况下才调用该转换函数(将永远不会用默认值调用它)。</li>\r\n</ul>",
        "Documentation.Category": "Binary Formats.Reading a group of items",
        "Documentation.Examples": [
          {
            "Description": "下面假定一个键值，它是单字节的，在组中应该有 4 个项，并且所有这些项都在该键后有一个数据字节。 这些项按如下所示出现在输入中:\r\n<ul>\r\n<li>键 1 是必需的，并且与值 11 一起出现。</li>\r\n<li>键 2 重复，与值 22 一起出现两次，并且导致值{ 22, 22 }。</li>\r\n<li>键 3 是可选的，它不出现，并且导致 Null 值。</li>\r\n<li>键 4 重复，但不出现，并且导致值 { }。</li>\r\n<li>键 5 不是该组的一部分，但与值 55 一起出现一次。 使用键值 5 调用该附加函数，并且返回与该值相对应的格式(BinaryFormat.Byte)。 值 55 被读取和放弃。</li>\r\n</ul>",
            "Code": "let\r\n    b = #binary({\r\n        1, 11,\r\n        2, 22,\r\n        2, 22,\r\n        5, 55,\r\n        1, 11\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Required},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Repeating},\r\n            {3, BinaryFormat.Byte, BinaryOccurrence.Optional},\r\n            {4, BinaryFormat.Byte, BinaryOccurrence.Repeating}\r\n        },\r\n        (extra) => BinaryFormat.Byte\r\n    )\r\nin\r\n    f(b)",
            "Result": "{11, {22, 22}, null, {}}"
          },
          {
            "Description": "下面的示例说明项值转换和默认项值。  具有键 1 的重复项使用 List.Sum 对读取的值列表进行求和。 具有键 2 的可选项具有默认值 123，而非 Null。",
            "Code": "let\r\n    b = #binary({\r\n        1, 101,\r\n        1, 102\r\n    }),\r\n    f = BinaryFormat.Group(\r\n        BinaryFormat.Byte,\r\n        {\r\n            {1, BinaryFormat.Byte, BinaryOccurrence.Repeating,\r\n              0, (list) => List.Sum(list)},\r\n            {2, BinaryFormat.Byte, BinaryOccurrence.Optional, 123}\r\n        }\r\n    )\r\nin\r\n    f(b)",
            "Result": "{203, 123}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "group": "list",
        "extra": "function",
        "lastKey": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Length",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Length",
        "Documentation.Description": "返回一个二进制格式，它列出可读取的数据量。",
        "Documentation.LongDescription": "返回一个二进制格式，以限制可读取的数据量。<code>BinaryFormat.List</code> 和 <code>BinaryFormat.Binary</code> 都可用于读取到数据末尾。<code>BinaryFormat.Length</code> 可用于限制读取的字节数。<code>binaryFormat</code> 参数指定要限制的二进制格式。<code>length</code> 参数指定要读取的字节数。<code>length</code> 参数可以是数值，也可以是指定出现在要读取的值之前长度值格式的二进制格式值。",
        "Documentation.Category": "Binary Formats.Limiting input",
        "Documentation.Examples": [
          {
            "Description": "在读取字节列表时，将读取字节数限制为 2。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        2\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "在读取字节列表时将读取字节数限制为该列表前面的字节值。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.Length(\r\n        BinaryFormat.List(BinaryFormat.Byte),\r\n        BinaryFormat.Byte\r\n    )\r\nin\r\n    listFormat(binaryData)",
            "Result": "{2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "length": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "BinaryFormat.Transform",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Transform",
        "Documentation.Description": "返回一个二进制格式，该二进制格式将转换由另一个二进制格式读取的值。",
        "Documentation.LongDescription": "返回一个二进制格式，该二进制格式将转换由另一个二进制格式读取的值。 参数 <code>binaryFormat</code> 指定将用于读取值的二进制格式。 使用读取的值调用 <code>function</code>，并返回转换后的值。",
        "Documentation.Category": "Binary Formats.Transforming what was read",
        "Documentation.Examples": [
          {
            "Description": "读取一个字节并向其加 1。",
            "Code": "let\r\n    binaryData = #binary({1}),\r\n    transformFormat = BinaryFormat.Transform(\r\n        BinaryFormat.Byte,\r\n        (x) => x + 1\r\n    )\r\nin\r\n    transformFormat(binaryData)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.Ordinal",
      "Documentation": {
        "Documentation.Name": "Comparer.Ordinal",
        "Documentation.Description": "返回一个使用 Ordinal 规则的比较器函数以比较值。",
        "Documentation.LongDescription": "返回比较器函数，该函数使用序号规则比较提供的值 <code>x</code> 和 <code>y</code>。<br>\r\n        <br>\r\n        比较器函数接受两个参数，并根据第一个值是小于、等于还是大于第二个值返回 -1、0 或 1。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 Ordinal 规则，比较“encyclopædia”和“encyclopaedia”是否相等。请注意，这些与使用 <code>Comparer.FromCulture(\"en-US\")</code> 等效。",
            "Code": "Comparer.Equals(Comparer.Ordinal, \"encyclopædia\", \"encyclopaedia\")",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Comparer.OrdinalIgnoreCase",
      "Documentation": {
        "Documentation.Name": "Comparer.OrdinalIgnoreCase",
        "Documentation.Description": "返回使用 Ordinal 规则来比较值的不区分大小写的比较器函数。",
        "Documentation.LongDescription": "返回不区分大小写的比较器函数，该函数使用序号规则比较提供的值 <code>x</code> 和 <code>y</code>。<br>\r\n        <br>\r\n        比较器函数接受两个参数，并根据第一个值是小于、等于还是大于第二个值返回 -1、0 或 1。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用不区分大小写的 Ordinal 规则，比较 \"Abc\" 和 \"abc\"。请注意，通过使用 <code>Comparer.Ordinal</code>，\"Abc\" 要小于 \"abc\"。",
            "Code": "Comparer.OrdinalIgnoreCase(\"Abc\", \"abc\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "x": "any",
        "y": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.AttributeMemberProperty",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberProperty",
        "Documentation.Description": "返回维度属性的属性。",
        "Documentation.LongDescription": "返回维度属性 <code>attribute</code> 的属性 <code>propertyName</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Cube.MeasureProperty",
      "Documentation": {
        "Documentation.Name": "Cube.MeasureProperty",
        "Documentation.Description": "返回度量值的属性(单元格属性)。",
        "Documentation.LongDescription": "返回度量值 <code>measure</code> 的属性 <code>propertyName</code>。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "measure": "any",
        "propertyName": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Databricks.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 查询源",
        "Documentation.LongDescription": "定义用于运行 SQL 查询的 Databricks 数据源"
      },
      "ReturnType": "Databricks SQL 查询",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DatabricksMultiCloud.Query",
      "Documentation": {
        "Documentation.Name": "Databricks SQL 查询源",
        "Documentation.LongDescription": "定义用于运行 SQL 查询的 Databricks 数据源"
      },
      "ReturnType": "Databricks SQL 查询",
      "Parameters": {
        "host": "text",
        "httpPath": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddDays",
      "Documentation": {
        "Documentation.Name": "Date.AddDays",
        "Documentation.Description": "将指定天数添加到该日期。",
        "Documentation.LongDescription": "通过将 <code>numberOfDays</code> 天添加到 <code>datetime</code> 值 <code>dateTime</code>，返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 结果。\r\n      <ul>\r\n      <li><code>dateTime</code>: 天数要添加到的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfDays</code>: 要添加的天数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 5 天添加到表示日期 5/14/2011 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddDays(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 5, 19)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfDays": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddMonths",
      "Documentation": {
        "Documentation.Name": "Date.AddMonths",
        "Documentation.Description": "将指定月份数添加到该日期。",
        "Documentation.LongDescription": "通过将 <code>numberOfMonths</code> 个月添加到 <code>datetime</code> 值 <code>dateTime</code>，返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 结果。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要将月份数添加到其中的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>numberOfMonths</code>: 要添加的月份数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 5 个月添加到表示日期 5/14/2011 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddMonths(#date(2011, 5, 14), 5)",
            "Result": "#date(2011, 10, 14)"
          },
          {
            "Description": "将 18 个月添加到表示日期和时间 5/14/2011 08:15:22 AM 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddMonths(#datetime(2011, 5, 14, 8, 15, 22), 18)",
            "Result": "#datetime(2012, 11, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfMonths": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddQuarters",
      "Documentation": {
        "Documentation.Name": "Date.AddQuarters",
        "Documentation.Description": "将指定季度数添加到该日期。",
        "Documentation.LongDescription": "通过将 <code>numberOfQuarters</code> 个季度添加到 <code>datetime</code> 值 <code>dateTime</code>，返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 结果。\r\n      <ul>\r\n      <li><code>dateTime</code>: 季度数要添加到的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfQuarters</code>: 要添加的季度数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 1 个季度添加到表示日期 5/14/2011 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddQuarters(#date(2011, 5, 14), 1)",
            "Result": "#date(2011, 8, 14)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfQuarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddWeeks",
      "Documentation": {
        "Documentation.Name": "Date.AddWeeks",
        "Documentation.Description": "将指定星期数添加到该日期。",
        "Documentation.LongDescription": "通过将 <code>numberOfWeeks</code> 个星期添加到 <code>datetime</code> 值 <code>dateTime</code>，返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 结果。\r\n      <ul>\r\n      <li><code>dateTime</code>: 星期数要添加到的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>numberOfWeeks</code>: 要添加的星期数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 2 个星期添加到表示日期 5/14/2011 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddWeeks(#date(2011, 5, 14), 2)",
            "Result": "#date(2011, 5, 28)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfWeeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.AddYears",
      "Documentation": {
        "Documentation.Name": "Date.AddYears",
        "Documentation.Description": "将指定年份数添加到该日期。",
        "Documentation.LongDescription": "返回将 <code>numberOfYears</code> 添加到 <code>datetime</code> 值 <code>dateTime</code> 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 结果。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要将年份数添加到其中的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>numberOfYears</code>: 要添加的年份数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 4 年添加到表示日期 5/14/2011 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddYears(#date(2011, 5, 14), 4)",
            "Result": "#date(2015, 5, 14)"
          },
          {
            "Description": "将 10 年添加到表示日期和时间 5/14/2011 08:15:22 AM 的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
            "Code": "Date.AddYears(#datetime(2011, 5, 14, 8, 15, 22), 10)",
            "Result": "#datetime(2021, 5, 14, 8, 15, 22)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "numberOfYears": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNDays",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一天数中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一天数中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>days</code>: 天数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的日期是否在接下来的两天中。",
            "Code": "Date.IsInNextNDays(Date.AddDays(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNMonths",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一月数中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一月数中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>months</code>: 月数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的月份是否在接下来的两个月中。",
            "Code": "Date.IsInNextNMonths(Date.AddMonths(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNQuarters",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一季度数中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一季度数中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>quarters</code>: 季度数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的季度是否在接下来的两个季度中。",
            "Code": "Date.IsInNextNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNWeeks",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一周数中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一周数中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>weeks</code>: 周数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的周是否在接下来的两周中。",
            "Code": "Date.IsInNextNWeeks(Date.AddDays(DateTime.FixedLocalNow(), 7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInNextNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextNYears",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一年数中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一年数中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>years</code>: 年数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的年份是否在接下来的两年中。",
            "Code": "Date.IsInNextNYears(Date.AddYears(DateTime.FixedLocalNow(), 1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNDays",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNDays",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一天数中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一天数中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>days</code>: 天数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的日期是否在之前的两天中。",
            "Code": "Date.IsInPreviousNDays(Date.AddDays(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "days": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNMonths",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNMonths",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一月数中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一月数中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>months</code>: 月数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的月份是否在之前的两个月中。",
            "Code": "Date.IsInPreviousNMonths(Date.AddMonths(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "months": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNQuarters",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNQuarters",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一季度数中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一季度数中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>quarters</code>: 季度数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的季度是否在之前的两个季度中。",
            "Code": "Date.IsInPreviousNQuarters(Date.AddQuarters(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "quarters": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNWeeks",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNWeeks",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一周数中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一周数中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>weeks</code>: 周数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的周是否在之前的两周中。",
            "Code": "Date.IsInPreviousNWeeks(Date.AddDays(DateTime.FixedLocalNow(), -7), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "weeks": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Date.IsInPreviousNYears",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousNYears",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一年数中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一年数中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>years</code>: 年数。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的年份是否在之前的两年中。",
            "Code": "Date.IsInPreviousNYears(Date.AddYears(DateTime.FixedLocalNow(), -1), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "years": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.AddZone",
      "Documentation": {
        "Documentation.Name": "DateTime.AddZone",
        "Documentation.Description": "将时区信息添加到日期/时间值。",
        "Documentation.LongDescription": "将时区信息添加到 <code>dateTime</code> 值。时区信息包括 <code>timezoneHours</code> 和可选的 <code>timezoneMinutes</code>，这指定了所需的 UTC 时间偏移量。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将时区设置为 UTC+7:30(超过 UTC 7 小时 30 分钟)。",
            "Code": "DateTime.AddZone(#datetime(2010, 12, 31, 11, 56, 02), 7, 30)",
            "Result": "#datetimezone(2010, 12, 31, 11, 56, 2, 7, 30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTime": "datetime",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNHours",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一小时数中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一小时数中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>hours</code>: 小时数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的小时是否处于接下来的两个小时内。",
            "Code": "DateTime.IsInNextNHours(DateTime.FixedLocalNow() + #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNMinutes",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一分钟数中出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一分钟数中出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>minutes</code>: 分钟数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的分钟是否处于接下来的两分钟内。",
            "Code": "DateTime.IsInNextNMinutes(DateTime.FixedLocalNow() + #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInNextNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextNSeconds",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一秒数中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一秒数中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>seconds</code>: 秒数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的秒是否处于接下来的两秒内。",
            "Code": "DateTime.IsInNextNSeconds(DateTime.FixedLocalNow() + #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNHours",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNHours",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一小时数中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一小时数中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>hours</code>: 小时数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的小时是否处于前两个小时内。",
            "Code": "DateTime.IsInPreviousNHours(DateTime.FixedLocalNow() - #duration(0, 2, 0, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "hours": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNMinutes",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNMinutes",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一分钟数中出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一分钟数中出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>minutes</code>: 分钟数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的分钟是否处于前两分钟内。",
            "Code": "DateTime.IsInPreviousNMinutes(DateTime.FixedLocalNow() - #duration(0, 0, 2, 0), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "minutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTime.IsInPreviousNSeconds",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousNSeconds",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一秒数中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一秒数中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      <li><code>seconds</code>: 秒数。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的秒是否处于前两秒内。",
            "Code": "DateTime.IsInPreviousNSeconds(DateTime.FixedLocalNow() - #duration(0, 0, 0, 2), 2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any",
        "seconds": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "DateTimeZone.SwitchZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.SwitchZone",
        "Documentation.Description": "更改此值的时区。",
        "Documentation.LongDescription": "将针对 datetimezone 值 <code>dateTimeZone</code> 的时区信息更改为 <code>timezoneHours</code> 和 <code>timezoneMinutes</code> (可选)提供的新时区信息。\r\n    如果 <code>dateTimeZone</code> 没有时区部分，将引发异常。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的时区信息更改为 8 小时。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 8)",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, 8, 0)"
          },
          {
            "Description": "将 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的时区信息更改为 -30 分钟。",
            "Code": "DateTimeZone.SwitchZone(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30), 0, -30)",
            "Result": "#datetimezone(2010, 12, 31, 3, 56, 2, 0, -30)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "timezoneHours": "number",
        "timezoneMinutes": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Embedded.Value",
      "Documentation": {
        "Documentation.Name": "Embedded.Value",
        "Documentation.Description": "在嵌入的混合资源中按名称访问值。",
        "Documentation.LongDescription": "在嵌入的混合资源中按名称访问值。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "path": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.From",
      "Documentation": {
        "Documentation.Name": "Function.From",
        "Documentation.Description": "除了创建采用单个列表实参的函数之外，还创建一个采用特定形参签名的函数",
        "Documentation.LongDescription": "采用一元函数 <code>function</code> 并创建一个类型为 <code>functionType</code> 的新函数，用于构造其参数列表，并将其传递给 <code>function</code>。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "将 List.Sum 转换为一个包含两个参数的函数，这两个参数一同添加",
            "Code": "Function.From(type function (a as number, b as number) as number, List.Sum)(2, 1)",
            "Result": "3"
          },
          {
            "Description": "转换将列表更改为包含两个参数的函数的函数",
            "Code": "Function.From(type function (a as text, b as text) as text, (list) => list{0} & list{1})(\"2\", \"1\")",
            "Result": "\"21\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "functionType": "type",
        "function": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.Invoke",
      "Documentation": {
        "Documentation.Name": "Function.Invoke",
        "Documentation.Description": "调用给定的函数",
        "Documentation.LongDescription": "使用指定的参数列表调用给定的函数并返回结果。",
        "Documentation.Category": "Function",
        "Documentation.Examples": [
          {
            "Description": "使用一个参数 [A=1,B=2] 调用 Record.FieldNames",
            "Code": "Function.Invoke(Record.FieldNames, {[A = 1, B = 2]})",
            "Result": "{\"A\", \"B\"}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "args": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeAfter",
      "Documentation": {
        "Documentation.Name": "Function.InvokeAfter",
        "Documentation.Description": "经过指定的持续时间后，调用给定的函数。",
        "Documentation.LongDescription": "经过持续时间 <code>delay</code> 后，返回调用 <code>function</code> 的结果。",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "delay": "duration"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.InvokeWithErrorContext",
      "Documentation": {
        "Documentation.Name": "Function.InvokeWithErrorContext",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "function": "function",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Function.ScalarVector",
      "Documentation": {
        "Documentation.Name": "Function.ScalarVector",
        "Documentation.Description": "在向量函数的基础上创建一个标量函数，批量处理多次调用。",
        "Documentation.LongDescription": "<p>返回类型为 <code>scalarFunctionType</code> 的标量函数，该函数使用单行参数调用 <code>vectorFunction</code> 并返回其单个输出。此外，对每行输入表(例如，在 Table.AddColumn 中)重复应用标量函数时，将对所有输入应用 <code>vectorFunction</code> 一次。</p>\r\n<p>将向 <code>vectorFunction</code> 传递一个表，该表的列匹配 <code>scalarFunctionType</code> 的参数的名称和位置。此表的每行均包含对标量函数的单个调用的参数，其中列对应于 <code>scalarFunctionType</code> 的参数</p>\r\n<p><code>vectorFunction</code> 必须返回一个与输入表长度相同的列表，其中每个位置的项必须与在对同一位置的输入行上的标量函数进行评估的结果相同。</p>\r\n<p>输入表应流式传入，因此，<code>vectorFunction</code> 应在输入传入时流式传出其输出，一次仅处理一个输入区块。尤其要注意，<code>vectorFunction</code> 枚举其输入表的次数不能超过一次。</p>",
        "Documentation.Category": "Function",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "scalarFunctionType": "type",
        "vectorFunction": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeographyPoint.From",
      "Documentation": {
        "Documentation.Name": "GeographyPoint.From",
        "Documentation.Description": "创建一条表示各部分的地理点的记录。",
        "Documentation.LongDescription": "创建一条表示其构成部分的地理点的记录，例如经度、维度以及(若有)海拔(Z)和度量值(M)。如果不同于默认值(4326)，可指定可选的空间参照标识符(SRID)。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "longitude": "number",
        "latitude": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "GeometryPoint.From",
      "Documentation": {
        "Documentation.Name": "GeometryPoint.From",
        "Documentation.Description": "创建一条表示各部分的几何点的记录。",
        "Documentation.LongDescription": "创建一条表示其构成部分的几何点的记录，例如 X 轴、Y 轴以及(若有) Z 轴度量值(M)。如果不同于默认值(0)，可指定可选的空间参照标识符(SRID)。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "x": "number",
        "y": "number",
        "z": "number",
        "m": "number",
        "srid": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.ExecuteParametricFilterOnFilterRecord",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "filter": "record",
        "objectHierarchyName": "text",
        "objectHierarchyResourceIds": "text",
        "objectTypes": "text",
        "queryExpression": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.GenerateParametricFilterByFilterSourceType",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "serviceRoot": "text",
        "inputFilterSource": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "HexagonSmartApi.Typecast",
      "Documentation": {
        "Documentation.Name": "Typecast",
        "Documentation.LongDescription": "Function to return a table representing an OData entity typecast from the target entity. The target is a table with column with select list attribute, or an individual table row or an individual record with select list attribute."
      },
      "ReturnType": "function",
      "Parameters": {
        "typecastTarget": "any",
        "outputType": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.From",
      "Documentation": {
        "Documentation.Name": "Identity.From",
        "Documentation.Description": "创建标识。",
        "Documentation.LongDescription": "创建标识。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "identityProvider": "function",
        "value": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Identity.IsMemberOf",
      "Documentation": {
        "Documentation.Name": "Identity.IsMemberOf",
        "Documentation.Description": "确定标识是否为标识集合的成员。",
        "Documentation.LongDescription": "确定标识是否为标识集合的成员。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "identity": "record",
        "collection": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Alternate",
      "Documentation": {
        "Documentation.Name": "List.Alternate",
        "Documentation.Description": "返回由列表中所有奇数编号的偏移量元素组成的列表。",
        "Documentation.LongDescription": "返回由列表中所有奇数编号的偏移量元素组成的列表。根据参数在从列表 <code>list</code> 取值和跳过其值间切换。\r\n    <ul>\r\n    <li><code>count</code>: 指定每次跳过的值数。</li>\r\n    <li><code>repeatInterval</code>: 可选的重复间隔，指示在两个跳过的值之间添加了多少个值。</li>\r\n    <li><code>offset</code>: 一个可选偏移量参数，指示在初始偏移量处开始跳过值。</li>\r\n    </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "从 {1..10} 创建跳过第一个数的列表。",
            "Code": "List.Alternate({1..10}, 1)",
            "Result": "{2, 3, 4, 5, 6, 7, 8, 9, 10}"
          },
          {
            "Description": "从 {1..10} 创建每隔一个数跳过一个数的列表。",
            "Code": "List.Alternate({1..10}, 1, 1)",
            "Result": "{2, 4, 6, 8, 10}"
          },
          {
            "Description": "从 {1..10} 创建从 1 开始、每隔一个数跳过数的列表。",
            "Code": "List.Alternate({1..10}, 1, 1, 1)",
            "Result": "{1, 3, 5, 7, 9}"
          },
          {
            "Description": "从 {1..10} 创建从 1 开始先跳过一个值、接着保留两个值这样依次进行得到的列表。",
            "Code": "List.Alternate({1..10}, 1, 2, 1)",
            "Result": "{1, 3, 4, 6, 7, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number",
        "repeatInterval": "number",
        "offset": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Contains",
      "Documentation": {
        "Documentation.Name": "List.Contains",
        "Documentation.Description": "指示列表是否包含值。",
        "Documentation.LongDescription": "指示列表 <code>list</code> 是否包含值 <code>value</code>。\r\n    如果在列表中找到值，则为 true；否则为 false。可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。 ",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 3。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 3)",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 6。",
            "Code": "List.Contains({1, 2, 3, 4, 5}, 6)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "value": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAll",
      "Documentation": {
        "Documentation.Name": "List.ContainsAll",
        "Documentation.Description": "指示一个列表是否包含另一个列表中的所有值。",
        "Documentation.LongDescription": "指示列表 <code>list</code> 是否包含另一个列表 <code>values</code> 中的所有值。\r\n    如果在列表中找到值，则为 true；否则为 false。可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 3 和 4。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {3, 4})",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 5 和 6。",
            "Code": "List.ContainsAll({1, 2, 3, 4, 5}, {5, 6})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ContainsAny",
      "Documentation": {
        "Documentation.Name": "List.ContainsAny",
        "Documentation.Description": "指示一个列表是否包含另一个列表中的任意值。",
        "Documentation.LongDescription": "指示列表 <code>list</code> 是否包含另一个列表 <code>values</code> 中的任意值。\r\n       如果在列表中找到值，则为 true；否则为 false。可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 3 或 9。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {3, 9})",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2, 3, 4, 5} 是否包含 6 或 7。",
            "Code": "List.ContainsAny({1, 2, 3, 4, 5}, {6, 7})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "values": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Covariance",
      "Documentation": {
        "Documentation.Name": "List.Covariance",
        "Documentation.Description": "返回两个数值列表之间的协方差。",
        "Documentation.LongDescription": "返回两个列表 <code>numberList1</code> 和 <code>numberList2</code> 之间的协方差。<code>numberList1</code> 和 <code>numberList2</code> 必须包含相同数目的 <code>number</code> 值。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "计算两个列表之间的协方差。",
            "Code": "List.Covariance({1, 2, 3}, {1, 2, 3})",
            "Result": "0.66666666666666607"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numberList1": "list",
        "numberList2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Difference",
      "Documentation": {
        "Documentation.Name": "List.Difference",
        "Documentation.Description": "返回两个给定列表的差。",
        "Documentation.LongDescription": "返回未出现在列表 <code>list2</code> 中的列表 <code>list1</code> 中的项。支持重复的值。\r\n    可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。 ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3, 4, 5} 中未出现在 {4, 5, 3} 中的项。",
            "Code": "List.Difference({1, 2, 3, 4, 5}, {4, 5, 3})",
            "Result": "{1, 2}"
          },
          {
            "Description": "查找列表 {1, 2} 中未出现在 {1, 2, 3} 中的项。",
            "Code": "List.Difference({1, 2}, {1, 2, 3})",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FindText",
      "Documentation": {
        "Documentation.Name": "List.FindText",
        "Documentation.Description": "返回包含指定文本的值(包括记录字段)列表。",
        "Documentation.LongDescription": "从包含值 <code>text</code> 的列表 <code>list</code> 返回值列表。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "在列表 {\"a\", \"b\", \"ab\"} 中查找匹配 \"a\" 的文本值。",
            "Code": "List.FindText({\"a\", \"b\", \"ab\"}, \"a\")",
            "Result": "{\"a\", \"ab\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "text": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.FirstN",
      "Documentation": {
        "Documentation.Name": "List.FirstN",
        "Documentation.Description": "通过指定要返回的项数或限定条件来返回列表中的第一组项。",
        "Documentation.LongDescription": " <ul>\r\n  <li>如果指定一个数，则最多返回这么多项。</li>\r\n  <li>如果指定一个条件，则返回最初满足该条件的所有项。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "在列表 {3, 4, 5, -1, 7, 8, 2} 中查找大于 0 的初始值。",
            "Code": "List.FirstN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAll",
      "Documentation": {
        "Documentation.Name": "List.MatchesAll",
        "Documentation.Description": "如果列表中的所有值均满足条件函数，则返回 true。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中的所有值均满足条件函数 <code>condition</code>，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "确定列表 {11, 12, 13} 中的所有值是否大于 10。",
            "Code": "List.MatchesAll({11, 12, 13}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "确定列表 {1, 2, 3} 中的所有值是否大于 10。",
            "Code": "List.MatchesAll({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MatchesAny",
      "Documentation": {
        "Documentation.Name": "List.MatchesAny",
        "Documentation.Description": "如果任意值满足条件函数，则返回 true。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中的任意值满足条件函数 <code>condition</code>，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {9, 10, 11} 中的任意值是否大于 10。",
            "Code": "List.MatchesAny({9, 10, 11}, each _  > 10)",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2, 3} 中的任意值是否大于 10。",
            "Code": "List.MatchesAny({1, 2, 3}, each _  > 10)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MaxN",
      "Documentation": {
        "Documentation.Name": "List.MaxN",
        "Documentation.Description": "返回列表中的最大值。必须指定要返回的值的数量或筛选条件。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的最大值。\r\n    在对行排序后，可以指定可选参数以进一步筛选结果。可选参数 <code>countOrCondition</code> 指定要返回的值的数量或筛选条件。可选参数 <code>comparisonCriteria</code> 指定如何比较列表中的值。\r\n <ul>\r\n        <li> <code>list</code>: 值的列表。</li>\r\n        <li> <code>countOrCondition</code>: 如果指定一个数字，则返回以升序排序的最多包含 <code>countOrCondition</code> 个项的列表。如果指定条件，则返回从第一项开始满足该条件的项的列表。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n<li><code>comparisonCriteria</code>: <i>[可选]</i> 可以指定可选的 <code>comparisonCriteria</code> 值来确定如何比较列表中的项。如果此参数为 null，则使用默认比较器。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.MinN",
      "Documentation": {
        "Documentation.Name": "List.MinN",
        "Documentation.Description": "返回列表中的最小值。可以指定要返回的值的数量或筛选条件。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的最小值。\r\n    参数 <code>countOrCondition</code> 指定要返回的值的数量或筛选条件。可选参数 <code>comparisonCriteria</code> 指定如何比较列表中的值。\r\n <ul>\r\n        <li> <code>list</code>: 值的列表。</li>\r\n        <li> <code>countOrCondition</code>: 如果指定一个数字，则返回以升序排序的最多包含 <code>countOrCondition</code> 个项的列表。如果指定条件，则返回从第一项开始满足该条件的项的列表。一旦某个项不满足该条件，则不再考虑其他项。如果此参数为 null，则返回列表中的一个最小值。</li>\r\n<li><code>comparisonCriteria</code>: <i>[可选]</i> 可以指定可选的 <code>comparisonCriteria</code> 值来确定如何比较列表中的项。如果此参数为 null，则使用默认比较器。\r\n </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找列表 <code>{3, 4, 5, -1, 7, 8, 2}</code> 中的 5 个最小值。",
            "Code": "List.MinN({3, 4, 5, -1, 7, 8, 2}, 5)",
            "Result": "{-1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Numbers",
      "Documentation": {
        "Documentation.Name": "List.Numbers",
        "Documentation.Description": "给定初始值、计数和可选的增量值来返回数的列表。",
        "Documentation.LongDescription": "给定初始值、计数和可选的增量值来返回数的列表。默认增量值为 1。\r\n<ul>\r\n   <li><code>start</code>: 列表中的初始值。</li>\r\n   <li><code>count</code>: 要创建的值数。</li>\r\n   <li><code>increment</code>: <i>[可选]</i> 要按其递增的值。如果省略，则按 1 递增值。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "生成从 1 开始的 10 个连续数的列表。",
            "Code": "List.Numbers(1, 10)",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10\r\n}"
          },
          {
            "Description": "生成从 1 开始的 10 个数的列表，每个后续数按 2 递增。",
            "Code": "List.Numbers(1, 10, 2)",
            "Result": "{\r\n    1,\r\n    3,\r\n    5,\r\n    7,\r\n    9,\r\n    11,\r\n    13,\r\n    15,\r\n    17,\r\n    19\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "start": "number",
        "count": "number",
        "increment": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Percentile",
      "Documentation": {
        "Documentation.Name": "List.Percentile",
        "Documentation.Description": "返回与给定概率对应的一个或多个示例百分位数。",
        "Documentation.LongDescription": "返回 <code>list</code> 列表的一个或多个示例百分位数。如果值 <code>percentiles</code> 是一个介于 0.0 至 1.0 之间的数字，则将其视为百分位，且结果将是\r\n    与该概率对应的一个值。如果值 <code>percentiles</code> 是包含值介于 0.0 至 1.0 之间的数字的列表，则结果将是与输入概率对应的\r\n    百分位数的列表。高级用户可使用 <code>options</code> 中的 PercentileMode 选项来选择更具体的内插方法，但在大多数情况下不建议使用。\r\n    预定义符号 <code>PercentileMode.ExcelInc</code> 和 <code>PercentileMode.ExcelExc</code> 与 Excel 函数 <code>PERCENTILE.INC</code> 和 <code>PERCENTILE.EXC</code> 使用的\r\n    内插方法匹配。默认行为与 <code>PercentileMode.ExcelInc</code> 匹配。符号\r\n    <code>PercentileMode.SqlCont</code> 和 <code>PercentileMode.SqlDisc</code> 分别与 <code>PERCENTILE_CONT</code> 和 <code>PERCENTILE_DISC</code> 的\r\n     SQL Server 行为匹配。\r\n  ",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找列表 <code>{5, 3, 1, 7, 9}</code> 的第一个四分位数。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, 0.25)",
            "Result": "3"
          },
          {
            "Description": "使用与 Excel <code>PERCENTILE.EXC</code> 匹配的内插方法查找列表 <code>{5, 3, 1, 7, 9}</code> 的四分位数。",
            "Code": "List.Percentile({5, 3, 1, 7, 9}, {0.25, 0.5, 0.75}, [PercentileMode=PercentileMode.ExcelExc])",
            "Result": "{2, 5, 8}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "percentiles": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOf",
      "Documentation": {
        "Documentation.Name": "List.PositionOf",
        "Documentation.Description": "返回列表中值的偏移量。",
        "Documentation.LongDescription": "返回值 <code>value</code> 在列表 <code>list</code> 中出现时的偏移量。如果值未出现，则返回 -1。\r\n    可以指定可选的出现次数参数 <code>occurrence</code>。\r\n<ul>\r\n   <li><code>occurrence</code>: 要报告的最大出现次数。</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3} 中出现值 3 的位置。",
            "Code": "List.PositionOf({1, 2, 3}, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "value": "any",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "List.PositionOfAny",
        "Documentation.Description": "返回列表中值的第一个偏移量。",
        "Documentation.LongDescription": "返回值在列表 <code>values</code> 中第一次出现的位置列表 <code>list</code> 中的偏移量。如果找不到该值，则返回 -1。\r\n    可以指定可选的出现次数参数 <code>occurrence</code>。\r\n<ul>\r\n   <li><code>occurrence</code>: 可以返回的最大出现次数。</li>\r\n</ul>",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3} 中第一次出现值 2 或 3 的位置。",
            "Code": "List.PositionOfAny({1, 2, 3}, {2, 3})",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "values": "list",
        "occurrence": "Occurrence.Type",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Range",
      "Documentation": {
        "Documentation.Name": "List.Range",
        "Documentation.Description": "返回从偏移量开始的列表的子集。",
        "Documentation.LongDescription": "返回从偏移量 <code>list</code> 开始的列表的子集。可选参数 <code>offset</code> 用于设置子集中的最大项数。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找包含数字 1-10 的列表中从偏移量 6 开始的子集。",
            "Code": "List.Range({1..10}, 6)",
            "Result": "{7, 8, 9, 10}"
          },
          {
            "Description": "查找包含数字 1-10 的列表中从偏移量 6 开始、长度为 2 的子集。",
            "Code": "List.Range({1..10}, 6, 2)",
            "Result": "{7, 8}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveItems",
        "Documentation.Description": "从 list1 中删除在列表中出现的项。",
        "Documentation.LongDescription": "从 <code>list1</code> 中删除 <code>list2</code> 中所有出现的给定值。如果 <code>list2</code> 中的值在 <code>list1</code> 中不存在，则返回原始列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从列表 {1, 2, 3, 4, 2, 5, 5} 中删除在列表 {2, 4, 6} 中出现的项。",
            "Code": "List.RemoveItems({1, 2, 3, 4, 2, 5, 5}, {2, 4, 6})",
            "Result": "{1, 3, 5, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.RemoveMatchingItems",
        "Documentation.Description": "删除所有出现的输入值。",
        "Documentation.LongDescription": "从列表 <code>list1</code> 中删除 <code>list2</code> 中所有出现的给定值。如果 <code>list2</code> 中的值在 <code>list1</code> 中不存在，则返回原始列表。\r\n    可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从 {1, 2, 3, 4, 5, 5} 创建一个不包含 {1, 5} 的列表。",
            "Code": "List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})",
            "Result": "{2, 3, 4}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list1": "list",
        "list2": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.RemoveRange",
      "Documentation": {
        "Documentation.Name": "List.RemoveRange",
        "Documentation.Description": "从指定的位置开始删除指定数目的值。",
        "Documentation.LongDescription": "在 <code>list</code> 中删除从指定的位置 <code>index</code> 开始的 <code>count</code> 个值。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "在列表 {1, 2, 3, 4, -6, -2, -1, 5} 中删除从索引 4 开始的 3 个值。",
            "Code": "List.RemoveRange({1, 2, 3, 4, -6, -2, -1, 5}, 4, 3)",
            "Result": "{1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "index": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Repeat",
      "Documentation": {
        "Documentation.Name": "List.Repeat",
        "Documentation.Description": "返回作为原始列表指定次数的重复的列表。",
        "Documentation.LongDescription": "返回作为原始列表 <code>list</code> 的 <code>count</code>次重复的列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "创建将 {1, 2} 重复 3 次得到的列表。",
            "Code": "List.Repeat({1, 2}, 3)",
            "Result": "{1, 2, 1, 2, 1, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.ReplaceMatchingItems",
      "Documentation": {
        "Documentation.Name": "List.ReplaceMatchingItems",
        "Documentation.Description": "应用 { old, new } 的每个替换。",
        "Documentation.LongDescription": "执行对列表 <code>list</code> 的指定的替换。一个替换操作 <code>replacements</code> 由两个值的列表、列表中提供的旧值和新值组成。\r\n    可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从 {1, 2, 3, 4, 5} 创建一个列表，它将值 5 替换为 -5，将值 1 替换为 -1。",
            "Code": "List.ReplaceMatchingItems({1, 2, 3, 4, 5}, {{5, -5}, {1, -1}})",
            "Result": "{-1, 2, 3, 4, -5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "replacements": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Select",
      "Documentation": {
        "Documentation.Name": "List.Select",
        "Documentation.Description": "返回匹配条件的值列表。",
        "Documentation.LongDescription": "从列表 <code>list</code> 返回匹配选择条件 <code>selection</code> 的值列表。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, -3, 4, 9, -2} 中大于 0 的值。",
            "Code": "List.Select({1, -3, 4, 9, -2}, each _ > 0)",
            "Result": "{1, 4, 9}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "selection": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Split",
      "Documentation": {
        "Documentation.Name": "List.Split",
        "Documentation.Description": "使用指定页面大小将指定列表拆分为一系列列表。",
        "Documentation.LongDescription": "将 <code>list</code> 拆分为一系列列表，其中输出列表的第一个元素是包含源列表中前 <code>pageSize</code> 个元素的列表，\r\n    输出列表的下一个元素是包含源列表中接下来 <code>pageSize</code> 个元素的列表，以此类推。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "List.Transform",
      "Documentation": {
        "Documentation.Name": "List.Transform",
        "Documentation.Description": "返回从此列表计算的值的新列表。",
        "Documentation.LongDescription": "通过将转换函数 <code>transform</code> 应用到列表 <code>list</code> 来返回值的新列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "将 1 与列表 {1, 2} 中的每个值相加。",
            "Code": "List.Transform({1, 2}, each _ + 1)",
            "Result": "{2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Mixpanel.Export",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "fromDate": "text",
        "toDate": "text",
        "events": "list",
        "bucket": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Atan2",
      "Documentation": {
        "Documentation.Name": "Number.Atan2",
        "Documentation.Description": "返回两个数相除的反正切。",
        "Documentation.LongDescription": "返回两个数 <code>y</code> 和 <code>x</code> 相除的反正切。除法被构造为 <code>y</code>/<code>x</code>。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "y": "number",
        "x": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseAnd",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseAnd",
        "Documentation.Description": "返回对两个输入执行按位 \"And\" 运算所得的结果。",
        "Documentation.LongDescription": "返回对 <code>number1</code> 和 <code>number2</code> 执行按位 \"And\" 运算所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseOr",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseOr",
        "Documentation.Description": "返回对两个输入执行按位 \"Or\" 所得的结果。",
        "Documentation.LongDescription": "返回对 <code>number1</code> 和 <code>number2</code> 执行按位 \"Or\" 所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftLeft",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftLeft",
        "Documentation.Description": "将位左移设置的位数。",
        "Documentation.LongDescription": "返回对 <code>number1</code> 执行按位左移指定的位数 <code>number2</code> 所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseShiftRight",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseShiftRight",
        "Documentation.Description": "将位右移设置的位数。",
        "Documentation.LongDescription": "返回对 <code>number1</code> 执行按位右移指定的位数 <code>number2</code> 所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.BitwiseXor",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseXor",
        "Documentation.Description": "返回对两个输入执行按位 \"XOR\" (异或)所得的结果。",
        "Documentation.LongDescription": "返回对 <code>number1</code> 和 <code>number2</code> 执行按位 \"XOR\" (异或)所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Combinations",
      "Documentation": {
        "Documentation.Name": "Number.Combinations",
        "Documentation.Description": "返回唯一组合的数目。",
        "Documentation.LongDescription": "从项列表 <code>setSize</code> 返回具有指定组合大小 <code>combinationSize</code> 的唯一组合数目。\r\n<ul>\r\n    <li><code>setSize</code>: 列表中的项数。</li>\r\n    <li><code>combinationSize</code>: 每个组合中的项数。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "当每个组合为 3 个一组时从总共 5 项中计算组合数。",
            "Code": "Number.Combinations(5, 3)",
            "Result": "10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "combinationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.IntegerDivide",
      "Documentation": {
        "Documentation.Name": "Number.IntegerDivide",
        "Documentation.Description": "使两个数相除，返回结果的整数部分。",
        "Documentation.LongDescription": "返回一个数 <code>number1</code> 除以另一个数 <code>number2</code> 所得结果的整数部分。\r\n    如果 <code>number1</code> 或 <code>number2</code> 为 null，则 <code>Number.IntegerDivide</code> 返回 null。\r\n      <ul>\r\n        <li><code>number1</code>: 被除数。</li>\r\n        <li><code>number2</code>: 除数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "6 除以 4。",
            "Code": "Number.IntegerDivide(6, 4)",
            "Result": "1"
          },
          {
            "Description": "8.3 除以 3。",
            "Code": "Number.IntegerDivide(8.3, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number1": "number",
        "number2": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Mod",
      "Documentation": {
        "Documentation.Name": "Number.Mod",
        "Documentation.Description": "使两个数整除并返回余数。",
        "Documentation.LongDescription": "返回从 <code>number</code> 整除 <code>divisor</code> 所得的余数。\r\n    如果 <code>number</code> 或 <code>divisor</code> 为 null，则 <code>Number.Mod</code> 返回 null。\r\n      <ul>\r\n        <li><code>number</code>: 被除数。</li>\r\n        <li><code>divisor</code>: 除数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 5 除以 3 所得的余数。",
            "Code": "Number.Mod(5, 3)",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "divisor": "number",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Permutations",
      "Documentation": {
        "Documentation.Name": "Number.Permutations",
        "Documentation.Description": "返回排列数。",
        "Documentation.LongDescription": "使用指定的排列大小 <code>permutationSize</code> 返回可从项数 <code>setSize</code> 生成的排列数。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 3 个一组、从总共 5 项得到的排列数。",
            "Code": "Number.Permutations(5, 3)",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "setSize": "number",
        "permutationSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.Power",
      "Documentation": {
        "Documentation.Name": "Number.Power",
        "Documentation.Description": "计算某个数的指定次幂。",
        "Documentation.LongDescription": "返回计算 <code>number</code> 的 <code>power</code> 次幂所得的结果。\r\n    如果 <code>number</code> 或 <code>power</code> 为 null，则 <code>Number.Power</code> 返回 null。\r\n      <ul>\r\n        <li><code>number</code>: 底数。</li>\r\n        <li><code>power</code>: 指数。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 5 的 3 次幂(5 的立方)的值。",
            "Code": "Number.Power(5, 3)",
            "Result": "125"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "power": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Number.RandomBetween",
      "Documentation": {
        "Documentation.Name": "Number.RandomBetween",
        "Documentation.Description": "返回两个数之间的一个随机数。",
        "Documentation.LongDescription": "返回 <code>bottom</code> 和 <code>top</code> 之间的一个随机数。",
        "Documentation.Category": "Number.Random",
        "Documentation.Examples": [
          {
            "Description": "获取 1 和 5 之间的一个随机数。",
            "Code": "Number.RandomBetween(1, 5)",
            "Result": "2.546797"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "bottom": "number",
        "top": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.Field",
      "Documentation": {
        "Documentation.Name": "Record.Field",
        "Documentation.Description": "返回记录中指定字段的值。",
        "Documentation.LongDescription": "返回 <code>record</code> 中指定 <code>field</code> 的值。如果未找到该字段，将引发异常。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "在记录中查找字段 \"CustomerID\" 的值。",
            "Code": "Record.Field([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FieldOrDefault",
      "Documentation": {
        "Documentation.Name": "Record.FieldOrDefault",
        "Documentation.Description": "返回记录中指定字段的值，如果未找到该字段，则返回默认值。",
        "Documentation.LongDescription": "返回记录 <code>record</code> 中指定字段 <code>field</code> 的值。如果未找到该字段，则返回可选的 <code>defaultValue</code>。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "在记录中查找字段 \"Phone\" 的值，如果它不存在，则返回 null。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\")",
            "Result": "null"
          },
          {
            "Description": "在记录中查找字段 \"Phone\" 的值，如果它不存在，则返回默认值。",
            "Code": "Record.FieldOrDefault([CustomerID = 1, Name = \"Bob\"], \"Phone\", \"123-4567\")",
            "Result": "\"123-4567\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "record": "record",
        "field": "text",
        "defaultValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.FromList",
      "Documentation": {
        "Documentation.Name": "Record.FromList",
        "Documentation.Description": "根据给定的一个字段值列表和一组字段，返回一个记录。",
        "Documentation.LongDescription": "根据给定的一个字段值 <code>list</code> 和一组字段，返回一个记录。 可以通过文本值列表或记录类型指定 <code>fields</code>。 如果字段不是唯一的，将引发错误。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "从一个字段值列表和字段名称列表生成一个记录。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, {\"CustomerID\", \"Name\", \"Phone\"})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "从一个字段值列表和记录类型生成一个记录。",
            "Code": "Record.FromList({1, \"Bob\", \"123-4567\"}, type [CustomerID = number, Name = text, Phone = number])",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "list": "list",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.HasFields",
      "Documentation": {
        "Documentation.Name": "Record.HasFields",
        "Documentation.Description": "指示记录是否具有指定的字段。",
        "Documentation.LongDescription": "通过返回逻辑值(true 或 false)，指示记录 <code>record</code> 是否具有 <code>fields</code> 中指定的字段。\r\n    可以使用列表指定多个字段值。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "检查记录是否包含字段 \"CustomerID\"。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], \"CustomerID\")",
            "Result": "true"
          },
          {
            "Description": "检查记录是否包含字段 \"CustomerID\" 和 \"Address\"。",
            "Code": "Record.HasFields([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"], {\"CustomerID\", \"Address\"})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "record": "record",
        "fields": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RemoveFields",
      "Documentation": {
        "Documentation.Name": "Record.RemoveFields",
        "Documentation.Description": "从输入记录中删除指定的字段。",
        "Documentation.LongDescription": "返回一个记录，该记录从输入 <code>record</code> 中删除列表 <code>fields</code> 中指定的所有字段。如果指定的字段不存在，将引发异常。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从记录中删除字段 \"Price\"。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], \"Price\")",
            "Result": "[CustomerID = 1, Item = \"Fishing rod\"]"
          },
          {
            "Description": "从记录中删除字段 \"Price\" 和 \"Item\"。",
            "Code": "Record.RemoveFields([CustomerID = 1, Item = \"Fishing rod\", Price = 18.00], {\"Price\", \"Item\"})",
            "Result": "[CustomerID = 1]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.RenameFields",
      "Documentation": {
        "Documentation.Name": "Record.RenameFields",
        "Documentation.Description": "采用 { old, new } 形式从列表中应用重命名。",
        "Documentation.LongDescription": "将输入 <code>record</code> 中的字段重命名为列表 <code>renames</code> 中指定的新字段名称后，返回一个记录。对于多个重命名，可以使用嵌套的列表({ {old1, new1}, {old2, new2} })。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从记录将字段 \"UnitPrice\" 重命名为 \"Price\"。",
            "Code": "Record.RenameFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\"UnitPrice\", \"Price\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          },
          {
            "Description": "从记录将字段 \"UnitPrice\" 重命名为 \"Price\"，将字段 \"OrderNum\" 重命名为 \"OrderID\"。",
            "Code": "Record.RenameFields(\r\n    [OrderNum = 1, CustomerID = 1, Item = \"Fishing rod\", UnitPrice = 100.0],\r\n    {\r\n        {\"UnitPrice\", \"Price\"},\r\n        {\"OrderNum\", \"OrderID\"}\r\n    }\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "renames": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.ReorderFields",
      "Documentation": {
        "Documentation.Name": "Record.ReorderFields",
        "Documentation.Description": "将指定的字段重新排序为新顺序。",
        "Documentation.LongDescription": "按列表 <code>fieldOrder</code> 中指定的字段顺序将 <code>record</code> 中的字段重新排序后，返回一个记录。字段值保持不变，<code>fieldOrder</code> 中未列出的字段仍留在原始位置。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "将记录中的部分字段重新排序。",
            "Code": "Record.ReorderFields(\r\n    [CustomerID = 1, OrderID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"OrderID\", \"CustomerID\"}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fieldOrder": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.SelectFields",
      "Documentation": {
        "Documentation.Name": "Record.SelectFields",
        "Documentation.Description": "返回只包含指定字段的记录。",
        "Documentation.LongDescription": "从输入 <code>record</code> 返回一个记录，该记录仅包含在列表 <code>fields</code> 中指定的字段。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "在记录中选择字段 \"Item\" 和 \"Price\"。",
            "Code": "Record.SelectFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0],\r\n    {\"Item\", \"Price\"}\r\n)",
            "Result": "[Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "fields": "any",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Record.TransformFields",
      "Documentation": {
        "Documentation.Name": "Record.TransformFields",
        "Documentation.Description": "应用指定的转换后返回一个记录。",
        "Documentation.LongDescription": "将列表 <code>transformOperations</code> 中指定的转换应用到 <code>record</code> 后返回一个记录。\r\n    一次可以转换一个或多个字段。\r\n      <div>在转换单个字段时，要求 <code>transformOperations</code> 是包含两项的列表。<code>transformOperations</code> 中的第一项指定字段名称，<code>transformOperations</code> 中的第二项指定要用于转换的函数。例如 <code>{\"Quantity\", Number.FromText}</code></div>\r\n      <div>在转换多个字段时，要求 <code>transformOperations</code> 是列表的列表，其中每个里面的列表是一对字段名称和转换操作。例如 <code>{{\"Quantity\",Number.FromText},{\"UnitPrice\", Number.FromText}}</code></div>",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "将 \"Price\" 字段转换为数字。",
            "Code": "Record.TransformFields(\r\n    [OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {\"Price\", Number.FromText}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          },
          {
            "Description": "将 \"OrderID\" 和 \"Price\" 字段转换为数字。",
            "Code": "Record.TransformFields(\r\n    [OrderID = \"1\", CustomerID = 1, Item = \"Fishing rod\", Price = \"100.0\"],\r\n    {{\"OrderID\", Number.FromText}, {\"Price\", Number.FromText}}\r\n)",
            "Result": "[OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "record": "record",
        "transformOperations": "list",
        "missingField": "MissingField.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Splitter.SplitTextByCharacterTransition",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByCharacterTransition",
        "Documentation.Description": "返回一个函数，它根据从一种类型的字符到另一种类型字符的转换将文本拆分为一列文本。{0} 和 {1} 参数可以是一列字符，也可以是采用一个字符并返回 true/false 的一个函数。",
        "Documentation.LongDescription": "返回一个函数，它根据从一种类型的字符到另一种类型字符的转换将文本拆分为一列文本。<code>before</code> 和 <code>after</code> 参数可以是一列字符，也可以是采用一个字符并返回 true/false 的一个函数。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "每当大写或小写字母后跟数字时，拆分输入。",
            "Code": "Splitter.SplitTextByCharacterTransition({\"A\"..\"Z\", \"a\"..\"z\"}, {\"0\"..\"9\"})(\"Abc123\")",
            "Result": "{\"Abc\", \"123\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "before": "any",
        "after": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "SqlExpression.ToExpression",
      "Documentation": {
        "Documentation.Name": "SqlExpression.ToExpression",
        "Documentation.Description": "将提供的 SQL 查询转换为 M 代码。此函数仅供内部使用。",
        "Documentation.LongDescription": "使用 <code>environment</code> 定义的可用标识符，将提供的 <code>sql</code> 查询转换为 M 代码。此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "sql": "text",
        "environment": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Column",
      "Documentation": {
        "Documentation.Name": "Table.Column",
        "Documentation.Description": "将表中指定的数据列返回为列表。",
        "Documentation.LongDescription": "将表 <code>table</code> 中由 <code>column</code> 指定的数据列返回为列表。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "返回表中 [Name] 列的值。",
            "Code": "Table.Column(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "{\"Bob\", \"Jim\", \"Paul\", \"Ringo\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ColumnsOfType",
      "Documentation": {
        "Documentation.Name": "Table.ColumnsOfType",
        "Documentation.Description": "返回带有与指定类型相匹配的列名的列表。",
        "Documentation.LongDescription": "返回带有与 <code>listOfTypes</code> 中指定的类型相匹配的表 <code>table</code> 中的列名的列表。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "返回表中类型 Number.Type 的列名。",
            "Code": "Table.ColumnsOfType(\r\n    Table.FromRecords(\r\n        {[a = 1, b = \"hello\"]},\r\n        type table[a = Number.Type, b = Text.Type]\r\n    ),\r\n    {type number}\r\n)",
            "Result": "{\"a\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "listOfTypes": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Contains",
      "Documentation": {
        "Documentation.Name": "Table.Contains",
        "Documentation.Description": "指示指定的记录是否显示为表中的一行。",
        "Documentation.LongDescription": "指示指定的记录 <code>row</code> 是否显示为 <code>table</code> 中的一行。\r\n    可以指定一个可选参数 <code>equationCriteria</code>，以控制表各行之间的比较。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "确定表是否包含行。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Bob\"]\r\n)",
            "Result": "true"
          },
          {
            "Description": "确定表是否包含行。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [Name = \"Ted\"]\r\n)",
            "Result": "false"
          },
          {
            "Description": "确定表是否包含只比较列 [Name] 的行。",
            "Code": "Table.Contains(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    [CustomerID = 4, Name = \"Bob\"],\r\n    \"Name\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "row": "record",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAll",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAll",
        "Documentation.Description": "指示所有指定的记录是否显示为表中的各行。",
        "Documentation.LongDescription": "指示记录列表 <code>rows</code> 中所有指定的记录是否显示为 <code>table</code> 中的各行。\r\n    可以指定一个可选参数 <code>equationCriteria</code>，以控制表各行之间的比较。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "确定表是否包含所有行，同时只比较列[CustomerID]。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    },\r\n    \"CustomerID\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "确定表是否包含所有行。",
            "Code": "Table.ContainsAll(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\r\n        [CustomerID = 1, Name = \"Bill\"],\r\n        [CustomerID = 2, Name = \"Fred\"]\r\n    }\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ContainsAny",
      "Documentation": {
        "Documentation.Name": "Table.ContainsAny",
        "Documentation.Description": "指示任何指定的记录是否显示为表中的各行。",
        "Documentation.LongDescription": "指示记录列表 <code>rows</code> 中任何指定的记录是否显示为 <code>table</code> 中的各行。\r\n    可以指定一个可选参数 <code>equationCriteria</code>，以控制表各行之间的比较。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "确定表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 是否包含行 <code>[a = 1, b = 2]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "true"
          },
          {
            "Description": "确定表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 是否包含行 <code>[a = 1, b = 3]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    }\r\n)",
            "Result": "false"
          },
          {
            "Description": "确定表 <code>(Table.FromRecords({[a = 1, b = 2], [a = 3, b = 4]}))</code> 是否包含只比较列 [a] 的行 <code>[a = 1, b = 3]</code> 或 <code>[a = 3, b = 5]</code>。",
            "Code": "Table.ContainsAny(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = 3, b = 4]\r\n    }),\r\n    {\r\n        [a = 1, b = 3],\r\n        [a = 3, b = 5]\r\n    },\r\n    \"a\"\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.FilterWithDataTable",
      "Documentation": {
        "Documentation.Name": "Table.FilterWithDataTable",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "dataTableIdentifier": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.HasColumns",
      "Documentation": {
        "Documentation.Name": "Table.HasColumns",
        "Documentation.Description": "指示表是否包含指定的列。",
        "Documentation.LongDescription": "指示 <code>table</code> 是否包含指定的列 <code>columns</code>。如果表包含此列或这些列，则返回 <code>true</code>，否则返回 <code>false</code>。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "确定表是否具有列 [Name]。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "true"
          },
          {
            "Description": "查找表是否具有列 [Name] 和 [PhoneNumber]。",
            "Code": "Table.HasColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    }),\r\n    {\"Name\", \"PhoneNumber\"}\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "columns": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAllRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAllRows",
        "Documentation.Description": "指示是否表中的所有行都满足给定的条件。",
        "Documentation.LongDescription": "指示是否 <code>table</code> 中的所有行都满足给定的 <code>condition</code>。如果所有行都匹配，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "确定列 [a] 中的所有行值是否在表中。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "true"
          },
          {
            "Description": "查找在表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中，是否所有行值均为 [a = 1, b = 2]。",
            "Code": "Table.MatchesAllRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.MatchesAnyRows",
      "Documentation": {
        "Documentation.Name": "Table.MatchesAnyRows",
        "Documentation.Description": "指示是否表中的任何行都满足给定的条件。",
        "Documentation.LongDescription": "指示是否 <code>table</code> 中的任何行都满足给定的 <code>condition</code>。如果任何行都匹配，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "确定列 [a] 中的任何行值是否在表 <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 中。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 4],\r\n        [a = 3, b = 8]\r\n    }),\r\n    each Number.Mod([a], 2) = 0\r\n)",
            "Result": "false"
          },
          {
            "Description": "确定表 <code>({[a = 1, b = 2], [a = 3, b = 4]})</code> 中任何行值是否均为 [a = 1, b = 2]。",
            "Code": "Table.MatchesAnyRows(\r\n    Table.FromRecords({\r\n        [a = 1, b = 2],\r\n        [a = -3, b = 4]\r\n    }),\r\n    each _ = [a = 1, b = 2]\r\n)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "condition": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Max",
      "Documentation": {
        "Documentation.Name": "Table.Max",
        "Documentation.Description": "使用给定条件返回最大值行或默认值。",
        "Documentation.LongDescription": "在给定 <code>comparisonCriteria</code> 的情况下，返回 <code>table</code> 中的最大值行。如果表为空，则返回可选的 <code>default</code> 值。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找表 <code>({[a = 2, b = 4], [a = 6, b = 8]})</code> 的列 [a] 中具有最大值的行。",
            "Code": "Table.Max(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 6, b = 8]"
          },
          {
            "Description": "查找表 <code>({})</code> 的列 [a] 中具有最大值的行。如果为空，则返回 -1。",
            "Code": "Table.Max(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Min",
      "Documentation": {
        "Documentation.Name": "Table.Min",
        "Documentation.Description": "使用给定条件返回最小值行或默认值。",
        "Documentation.LongDescription": "在给定 <code>comparisonCriteria</code> 的情况下，返回 <code>table</code> 中的最小值行。如果表为空，则返回可选的 <code>default</code> 值。",
        "Documentation.Category": "Table.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找表的列 [a] 中具有最小值的行。",
            "Code": "Table.Min(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }),\r\n    \"a\"\r\n)",
            "Result": "[a = 2, b = 4]"
          },
          {
            "Description": "查找表的列 [a] 中具有最小值的行。如果为空，则返回 -1。",
            "Code": "Table.Min(#table({\"a\"}, {}), \"a\", -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any",
        "default": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOf",
      "Documentation": {
        "Documentation.Name": "Table.PositionOf",
        "Documentation.Description": "返回行在表中的一个或多个位置。",
        "Documentation.LongDescription": "返回 <code>row</code> 在指定的 <code>table</code> 中第一次出现的行位置。如果找不到该值，则返回 -1。\r\n    <ul>\r\n       <li><code>table</code>: 输入表。</li>\r\n       <li><code>row</code>: 表中要查找其位置的行。</li>\r\n       <li><code>occurrence</code>: <i>[可选]</i> 指定要返回的行的出现次数。</li>\r\n       <li><code>equationCriteria</code>: <i>[可选]</i> 控制表行之间的比较。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "查找 [a = 2, b = 4] 在表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第一次出现的位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4]\r\n)",
            "Result": "0"
          },
          {
            "Description": "查找 [a = 2, b = 4] 在表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第二次出现的位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    1\r\n)",
            "Result": "2"
          },
          {
            "Description": "查找 [a = 2, b = 4] 在表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中所有出现的位置。",
            "Code": "Table.PositionOf(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    [a = 2, b = 4],\r\n    Occurrence.All\r\n)",
            "Result": "{0, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "row": "record",
        "occurrence": "any",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Table.PositionOfAny",
        "Documentation.Description": "返回任何指定的行在表中的一个或多个位置。",
        "Documentation.LongDescription": "返回 <code>rows</code> 的列表在 <code>table</code> 中第一次出现的行位置。如果找不到该值，则返回 -1。\r\n    <ul>\r\n    <li><code>table</code>: 输入表。</li>\r\n       <li><code>rows</code>: 表中要查找其位置的行列表。</li>\r\n       <li><code>occurrence</code>: <i>[可选]</i> 指定要返回的行的出现次数。</li>\r\n       <li><code>equationCriteria</code>: <i>[可选]</i> 控制表行之间的比较。</li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "查找 [a = 2, b = 4] 或 [a = 6, b = 8] 在表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]})</code> 中第一次出现的位置。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    }\r\n)",
            "Result": "0"
          },
          {
            "Description": "查找 [a = 2, b = 4] 或 [a = 6, b = 8] 在表 <code>({[a = 2, b = 4], [a = 6, b = 8], [a = 2, b = 4], [a = 1, b = 4]}</code> 中所有出现的位置。",
            "Code": "Table.PositionOfAny(\r\n    Table.FromRecords({\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8],\r\n        [a = 2, b = 4],\r\n        [a = 1, b = 4]\r\n    }),\r\n    {\r\n        [a = 2, b = 4],\r\n        [a = 6, b = 8]\r\n    },\r\n    Occurrence.All\r\n)",
            "Result": "{0, 1, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "rows": "list",
        "occurrence": "number",
        "equationCriteria": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.ReplaceRelationshipIdentity",
      "Documentation": {
        "Documentation.Name": "Table.ReplaceRelationshipIdentity",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "identity": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.Split",
      "Documentation": {
        "Documentation.Name": "Table.Split",
        "Documentation.Description": "使用指定页面大小将指定表拆分为一系列表。",
        "Documentation.LongDescription": "将 <code>table</code> 拆分为一系列表，其中列表的第一个元素是包含源表中前 <code>pageSize</code> 个元素的表，\r\n    列表的下一个元素是包含源表中接下来 <code>pageSize</code> 个元素的表，以此类推。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将包含五条记录的表拆分为各含两条记录的表。",
            "Code": "let\r\n    Customers = Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"],\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\nin\r\n    Table.Split(Customers, 2)",
            "Result": "{\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Cristina\", Phone = \"232-1550\"]\r\n    }),\r\n    Table.FromRecords({\r\n        [CustomerID = 5, Name = \"Anita\", Phone = \"530-1459\"]\r\n    })\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "pageSize": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.SplitAt",
      "Documentation": {
        "Documentation.Name": "Table.SplitAt",
        "Documentation.Description": "返回包含指定第一个计数行和其余行的列表。",
        "Documentation.LongDescription": "返回包含两个表的列表: 包含 <code>table</code> 的前 N 行(由 <code>count</code> 指定)的表和包含 <code>table</code> 的其余行的另一个表。\r\n\r\n 如果结果列表的表恰好枚举一次，且该函数将按顺序仅枚举 <code>table</code> 一次。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "返回表的前 2 行和表的其余行。",
            "Code": "Table.SplitAt(#table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 2)",
            "Result": "{\r\n    #table({\"a\", \"b\", \"c\"}, {{1, 2, 3}, {4, 5, 6}}),\r\n    #table({\"a\", \"b\", \"c\"}, {{7, 8, 9}})\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.TransformRows",
      "Documentation": {
        "Documentation.Name": "Table.TransformRows",
        "Documentation.Description": "使用指定的转换函数转换表的行。",
        "Documentation.LongDescription": "通过将 <code>transform</code> 操作应用于 <code>table</code> 中的每一行来创建<code>列表</code>。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "将表的行转换为数字列表。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    each [a]\r\n)",
            "Result": "{1, 2, 3, 4, 5}"
          },
          {
            "Description": "将数值表的行转换为文本记录。",
            "Code": "Table.TransformRows(\r\n    Table.FromRecords({\r\n        [a = 1],\r\n        [a = 2],\r\n        [a = 3],\r\n        [a = 4],\r\n        [a = 5]\r\n    }),\r\n    (row) as record => [B = Number.ToText(row[a])]\r\n)",
            "Result": "{\r\n    [B = \"1\"],\r\n    [B = \"2\"],\r\n    [B = \"3\"],\r\n    [B = \"4\"],\r\n    [B = \"5\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "transform": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Table.WithErrorContext",
      "Documentation": {
        "Documentation.Name": "Table.WithErrorContext",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "context": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.AfterDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.AfterDelimiter",
        "Documentation.Description": "Text.AfterDelimiter",
        "Documentation.LongDescription": "返回指定的 <code>delimiter</code> 之后的 <code>text</code> 部分。\r\n    可选数字 <code>index</code> 指示要考虑哪一次出现的 <code>delimiter</code>。\r\n    可选列表 <code>index</code> 指示要考虑哪一次出现的 <code>delimiter</code>，以及应从输入的开头还是结尾编制索引。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "获取 \"111-222-333\" (第一个)连字符后的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"222-333\""
          },
          {
            "Description": "获取 \"111-222-333\" 第二个连字符后的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"333\""
          },
          {
            "Description": "获取 \"111-222-333\" 倒数第二个连字符后的部分。",
            "Code": "Text.AfterDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"222-333\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.At",
      "Documentation": {
        "Documentation.Name": "Text.At",
        "Documentation.Description": "在指定的位置返回该字符。",
        "Documentation.LongDescription": "在位置 <code>index</code> 返回文本值中的字符 <code>text</code>。文本中的第一个字符位于位置 0。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "查找位于字符串 \"Hello, World\" 中位置 4 的字符。",
            "Code": "Text.At(\"Hello, World\", 4)",
            "Result": "\"o\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "index": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.BeforeDelimiter",
      "Documentation": {
        "Documentation.Name": "Text.BeforeDelimiter",
        "Documentation.Description": "Text.BeforeDelimiter",
        "Documentation.LongDescription": "返回 <code>text</code> 中位于指定的 <code>delimiter</code> 之前的部分。\r\n    可选数字 <code>index</code> 指示要考虑哪一次出现的 <code>delimiter</code>。\r\n    可选列表 <code>index</code> 指示要考虑哪一次出现的 <code>delimiter</code>，以及应从输入的开头还是结尾编制索引。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "获取 \"111-222-333\" (第一个)连字符前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\")",
            "Result": "\"111\""
          },
          {
            "Description": "获取 \"111-222-333\" 第二个连字符前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", 1)",
            "Result": "\"111-222\""
          },
          {
            "Description": "获取 \"111-222-333\" 倒数第二个连字符前的部分。",
            "Code": "Text.BeforeDelimiter(\"111-222-333\", \"-\", {1, RelativePosition.FromEnd})",
            "Result": "\"111\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "delimiter": "text",
        "index": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Contains",
      "Documentation": {
        "Documentation.Name": "Text.Contains",
        "Documentation.Description": "返回文本是否包含子字符串。",
        "Documentation.LongDescription": "检测 <code>text</code> 是否包含值 <code>substring</code>。如果找到该值，则返回 true。此函数不支持通配符或正则表达式。\r\n      <br>\r\n      <br>\r\n      可选参数 <code>comparer</code> 可用于指定不区分大小写的比较或区分区域性和区域设置的比较。\r\n      以下内置比较器以公式语言提供:\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用于执行区分大小写的序号比较</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行不区分大小写的序号比较</li>\r\n        <li><code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "查找文本 \"Hello World\" 是否包含 \"Hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"Hello\")",
            "Result": "true"
          },
          {
            "Description": "查找文本 \"Hello World\" 是否包含 \"hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "使用不区分大小写的比较器查找文本 \"Hello World\" 是否包含 \"hello\"。",
            "Code": "Text.Contains(\"Hello World\", \"hello\", Comparer.OrdinalIgnoreCase)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.End",
      "Documentation": {
        "Documentation.Name": "Text.End",
        "Documentation.Description": "返回文本的后几个字符。",
        "Documentation.LongDescription": "返回一个 <code>text</code> 值，该值是 <code>text</code> 值 <code>text</code> 的后 <code>count</code> 个字符。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "获取文本 \"Hello, World\" 的后 5 个字符。",
            "Code": "Text.End(\"Hello, World\", 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.EndsWith",
      "Documentation": {
        "Documentation.Name": "Text.EndsWith",
        "Documentation.Description": "指示文本是否以指定的值结尾。",
        "Documentation.LongDescription": "指示给定的文本 <code>text</code> 是否以指定值 <code>substring</code> 结尾。指示区分大小写。\r\n\r\n      <div>\r\n        <code>comparer</code>是用于控制比较的 <code>Comparer</code>。比较器可用于提供不区分大小写或区分区域性和区域设置的比较。\r\n      </div>\r\n      <div>\r\n        以下内置比较器以公式语言提供:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用于执行精确的序号比较</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行不区分大小写的精确序号比较</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "检查 \"Hello, World\" 是否以 \"world\" 结尾。",
            "Code": "Text.EndsWith(\"Hello, World\", \"world\")",
            "Result": "false"
          },
          {
            "Description": "检查 \"Hello, World\" 是否以 \"World\" 结尾。",
            "Code": "Text.EndsWith(\"Hello, World\", \"World\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Format",
      "Documentation": {
        "Documentation.Name": "Text.Format",
        "Documentation.Description": "从格式字符串和参数返回格式化文本。",
        "Documentation.LongDescription": "返回通过将来自列表或记录的 <code>arguments</code> 应用于格式字符串 <code>formatString</code> 创建的格式化文本。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "设置数字列表格式。",
            "Code": "Text.Format(\"#{0}, #{1}, and #{2}.\", {17, 7, 22})",
            "Result": "\"17, 7, and 22.\""
          },
          {
            "Description": "根据美国英语区域性设置记录中的不同数据类型的格式。",
            "Code": "Text.Format(\r\n    \"The time for the #[distance] km run held in #[city] on #[date] was #[duration].\",\r\n    [\r\n        city = \"Seattle\",\r\n        date = #date(2015, 3, 10),\r\n        duration = #duration(0, 0, 54, 40),\r\n        distance = 10\r\n    ],\r\n    \"en-US\"\r\n)",
            "Result": "\"The time for the 10 km run held in Seattle on 3/10/2015 was 00:54:40.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "formatString": "text",
        "arguments": "any",
        "culture": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Middle",
      "Documentation": {
        "Documentation.Name": "Text.Middle",
        "Documentation.Description": "返回最长为某个特定长度的子字符串。",
        "Documentation.LongDescription": "返回 <code>count</code> 个字符，或返回至 <code>text</code> 的结束；采用偏移 <code>start</code>。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "从文本 \"Hello World\" 中查找从索引 6 开始、跨 5 个字符的子字符串。",
            "Code": "Text.Middle(\"Hello World\", 6, 5)",
            "Result": "\"World\""
          },
          {
            "Description": "从文本 \"Hello World\" 中查找从索引 6 开始到结束的子字符串。",
            "Code": "Text.Middle(\"Hello World\", 6, 20)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "start": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadEnd",
      "Documentation": {
        "Documentation.Name": "Text.PadEnd",
        "Documentation.Description": "通过填充给定文本的尾部，返回指定长度的文本。",
        "Documentation.LongDescription": "通过在文本值 <code>text</code> 的结尾插入空格，返回填充到长度 <code>count</code> 的 <code>text</code> 值。\r\n    可选字符 <code>character</code> 可用于指定用于填充的字符。默认的填充字符是空格。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "填充文本值的尾部，使其长度为 10 个字符。",
            "Code": "Text.PadEnd(\"Name\", 10)",
            "Result": "\"Name      \""
          },
          {
            "Description": "用 \"|\" 填充文本值的尾部，使其长度为 10 个字符。",
            "Code": "Text.PadEnd(\"Name\", 10, \"|\")",
            "Result": "\"Name||||||\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PadStart",
      "Documentation": {
        "Documentation.Name": "Text.PadStart",
        "Documentation.Description": "通过填充给定文本的开头，返回指定长度的文本。",
        "Documentation.LongDescription": "通过在文本值 <code>text</code> 的开头插入空格，返回填充到长度 <code>count</code> 的 <code>text</code> 值。\r\n    可选字符 <code>character</code> 可用于指定用于填充的字符。默认的填充字符是空格。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "填充文本值的开头，使其长度为 10 个字符。",
            "Code": "Text.PadStart(\"Name\", 10)",
            "Result": "\"      Name\""
          },
          {
            "Description": "用 \"|\" 填充文本值的开头，使其长度为 10 个字符。",
            "Code": "Text.PadStart(\"Name\", 10, \"|\")",
            "Result": "\"||||||Name\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number",
        "character": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOf",
      "Documentation": {
        "Documentation.Name": "Text.PositionOf",
        "Documentation.Description": "返回值的第一个位置(如果找不到，则返回 -1)。",
        "Documentation.LongDescription": "返回在 <code>text</code> 中找到的文本值 <code>substring</code> 的指定出现位置。\r\n    可选参数 <code>occurrence</code> 可用于指定要返回的出现位置(默认值为第一次出现)。\r\n    如果未找到 <code>substring</code>，则返回 -1。\r\n\r\n      <div>\r\n        <code>comparer</code> 是用于控制比较的 <code>Comparer</code>。比较器可用于提供不区分大小写的比较或区分区域性与区域设置的比较。\r\n      </div>\r\n      <div>\r\n        以下内置比较器以公式语言提供:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用于执行精确的序号比较</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行不区分大小写的精确序号比较</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "获取 \"World\" 在文本 \"Hello, World! Hello, World!\" 中第一次出现的位置。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\")",
            "Result": "7"
          },
          {
            "Description": "获取 \"World\" 在 \"Hello, World! Hello, World!\" 中最后一次出现的位置。",
            "Code": "Text.PositionOf(\"Hello, World! Hello, World!\", \"World\", Occurrence.Last)",
            "Result": "21"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "occurrence": "Occurrence.Type",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.PositionOfAny",
      "Documentation": {
        "Documentation.Name": "Text.PositionOfAny",
        "Documentation.Description": "返回文本值中任何所列字符的第一个位置(如果找不到，则返回 -1)。",
        "Documentation.LongDescription": "返回在 <code>text</code> 中找到的列表 <code>characters</code>中任何字符的第一个位置。\n   可选参数 <code>occurrence</code> 可用于指定要返回的出现位置。",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "查找 \"W\" 或 \"H\" 在文本 \"Hello, World!\" 中的第一个位置。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"})",
            "Result": "0"
          },
          {
            "Description": "查找 \"W\" 或 \"H\" 在文本 \"Hello, World!\" 中的位置。",
            "Code": "Text.PositionOfAny(\"Hello, World!\", {\"H\", \"W\"}, Occurrence.All)",
            "Result": "{0, 7}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "text",
        "characters": "list",
        "occurrence": "Occurrence.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Range",
      "Documentation": {
        "Documentation.Name": "Text.Range",
        "Documentation.Description": "返回在偏移量中找到的子字符串。",
        "Documentation.LongDescription": "从文本 <code>text</code> 中返回在偏移量 <code>offset</code> 中找到的子字符串。\r\n    可以包含一个可选参数 <code>count</code>，以指定要返回多少个字符。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "从文本 \"Hello World\" 中查找从索引 6 开始的子字符串。",
            "Code": "Text.Range(\"Hello World\", 6)",
            "Result": "\"World\""
          },
          {
            "Description": "从文本 \"Hello World Hello\" 中查找从索引 6 开始且涵盖 5 个字符的子字符串。",
            "Code": "Text.Range(\"Hello World Hello\", 6, 5)",
            "Result": "\"World\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Remove",
      "Documentation": {
        "Documentation.Name": "Text.Remove",
        "Documentation.Description": "从输入字符文本值中删除所出现的所有给定字符或字符列表。",
        "Documentation.LongDescription": "返回文本值 <code>text</code> 已删除了 <code>removeChars</code> 的所有字符的副本。 ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "从文本值中删除字符 , 和 ;。",
            "Code": "Text.Remove(\"a,b;c\", {\",\",\";\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "removeChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.RemoveRange",
      "Documentation": {
        "Documentation.Name": "Text.RemoveRange",
        "Documentation.Description": "以给定的偏移量开始删除某个数量的字符",
        "Documentation.LongDescription": "返回文本值 <code>text</code> 已删除了位置 <code>offset</code> 的所有字符的副本。\r\n    可选参数 <code>count</code> 可用于指定要删除的字符数。<code>count</code> 的默认值为 1。位置值从 0 开始。",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "从文本值 \"ABEFC\" 的位置 2 删除 1 个字符。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2)",
            "Result": "\"ABFC\""
          },
          {
            "Description": "从文本值 \"ABEFC\" 中删除从位置 2 开始的两个字符。",
            "Code": "Text.RemoveRange(\"ABEFC\", 2, 2)",
            "Result": "\"ABC\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "offset": "number",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Repeat",
      "Documentation": {
        "Documentation.Name": "Text.Repeat",
        "Documentation.Description": "返回由输入文本重复指定次数而组成的文本值。",
        "Documentation.LongDescription": "返回由输入文本 <code>text</code> 重复 <code>count</code> 次而组成的文本值。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "重复文本 \"a\" 五次。",
            "Code": "Text.Repeat(\"a\", 5)",
            "Result": "\"aaaaa\""
          },
          {
            "Description": "重复文本 \"helloworld\" 三次。",
            "Code": "Text.Repeat(\"helloworld.\", 3)",
            "Result": "\"helloworld.helloworld.helloworld.\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Select",
      "Documentation": {
        "Documentation.Name": "Text.Select",
        "Documentation.Description": "从输入字符文本值中选择出现的所有给定字符或字符列表。",
        "Documentation.LongDescription": "返回文本值 <code>text</code> 已删除了不在 <code>selectChars</code> 中的所有字符的副本。 ",
        "Documentation.Category": "Text.Modification",
        "Documentation.Examples": [
          {
            "Description": "从文本值中选择范围从 \"a\" 到 \"z\" 的所有字符。",
            "Code": "Text.Select(\"a,b;c\", {\"a\"..\"z\"})",
            "Result": "\"abc\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "selectChars": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Split",
      "Documentation": {
        "Documentation.Name": "Text.Split",
        "Documentation.Description": "基于指定的分隔符将文本拆分为文本值列表。",
        "Documentation.LongDescription": "返回根据指定的分隔符 <code>separator</code> 拆分文本值 <code>text</code> 而得到的文本值列表。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从由 \"|\" 分隔的文本值 \"Name|Address|PhoneNumber\" 创建列表。",
            "Code": "Text.Split(\"Name|Address|PhoneNumber\", \"|\")",
            "Result": "{\r\n    \"Name\",\r\n    \"Address\",\r\n    \"PhoneNumber\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separator": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.SplitAny",
      "Documentation": {
        "Documentation.Name": "Text.SplitAny",
        "Documentation.Description": "返回基于分隔符中的任何字符拆分的文本值列表。",
        "Documentation.LongDescription": "返回根据指定的分隔符 <code>separators</code> 中的任意字符拆分文本值 <code>text</code> 而得到的文本值列表。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从文本值 \"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\" 创建列表。",
            "Code": "Text.SplitAny(\"Jamie|Campbell|Admin|Adventure Works|www.adventure-works.com\", \"|\")",
            "Result": "{\r\n    \"Jamie\",\r\n    \"Campbell\",\r\n    \"Admin\",\r\n    \"Adventure Works\",\r\n    \"www.adventure-works.com\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "separators": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.Start",
      "Documentation": {
        "Documentation.Name": "Text.Start",
        "Documentation.Description": "返回文本的开头。",
        "Documentation.LongDescription": "返回 <code>text</code> 的前 <code>count</code> 个字符作为文本值。",
        "Documentation.Category": "Text.Extraction",
        "Documentation.Examples": [
          {
            "Description": "获取 \"Hello, World\" 的前 5 个字符。",
            "Code": "Text.Start(\"Hello, World\", 5)",
            "Result": "\"Hello\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "count": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Text.StartsWith",
      "Documentation": {
        "Documentation.Name": "Text.StartsWith",
        "Documentation.Description": "指示文本是否以指定的值开头。",
        "Documentation.LongDescription": "如果文本值 <code>text</code> 以文本值 <code>substring</code> 开头，则返回 true。\r\n      <ul>\r\n        <li><code>text</code>: <i></i> 要搜索的 <code>text</code> 值</li>\r\n        <li><code>substring</code>: <i></i> 一个 <code>text</code> 值，即要在 <code>substring</code> 中搜索的 substring</li>\r\n        <li><code>comparer</code>: <i>[可选]</i> 用于控制比较的 <code>Comparer</code>。例如，<code>Comparer.OrdinalIgnoreCase</code> 可用于执行不区分大小写的搜索</li>\r\n      </ul>\r\n      <div>\r\n        <code>comparer</code> 是用于控制比较的 <code>Comparer</code>。比较器可用于提供不区分大小写或区分区域性和区域设置的比较。\r\n      </div>\r\n      <div>\r\n        以下内置比较器以公式语言提供:\r\n      </div>\r\n      <ul>\r\n        <li><code>Comparer.Ordinal</code>: 用于执行确切的序号比较</li>\r\n        <li><code>Comparer.OrdinalIgnoreCase</code>: 用于执行不区分大小写的精确的序号比较</li>\r\n        <li> <code>Comparer.FromCulture</code>: 用于执行区分区域性的比较</li>\r\n      </ul>",
        "Documentation.Category": "Text.Membership",
        "Documentation.Examples": [
          {
            "Description": "检查文本 \"Hello, World\" 是否以文本 \"hello\" 开头。",
            "Code": "Text.StartsWith(\"Hello, World\", \"hello\")",
            "Result": "false"
          },
          {
            "Description": "检查文本 \"Hello, World\" 是否以文本 \"Hello\" 开头。",
            "Code": "Text.StartsWith(\"Hello, World\", \"Hello\")",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text",
        "substring": "text",
        "comparer": "function"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Twilio.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "any",
        "collectionName": "any",
        "historyInMonths": "any",
        "dateLabel": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForFunction",
      "Documentation": {
        "Documentation.Name": "Type.ForFunction",
        "Documentation.Description": "返回一个类型，此类型表示具有特定参数的函数和返回类型约束。",
        "Documentation.LongDescription": "从 <code>signature</code>、<code>ReturnType</code> 和 <code>Parameters</code>、<code>min</code> 以及调用函数所需参数的最小数目中创建 <code>function type</code>。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "为需要使用 X 数字参数并返回数字的函数创建类型。",
            "Code": "Type.ForFunction([ReturnType = type number, Parameters = [X = type number]], 1)",
            "Result": "type function (X as number) as number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "signature": "record",
        "min": "number"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ForRecord",
      "Documentation": {
        "Documentation.Name": "Type.ForRecord",
        "Documentation.Description": "返回一个类型，此类型表示对字段具有特定类型约束的记录。",
        "Documentation.LongDescription": "返回一个类型，此类型表示对字段具有特定类型约束的记录。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "动态生成表类型。",
            "Code": "let\r\n    columnNames = {\"Name\", \"Score\"},\r\n    columnTypes = {type text, type number},\r\n    rowColumnTypes = List.Transform(columnTypes, (t) => [Type = t, Optional = false]),\r\n    rowType = Type.ForRecord(Record.FromList(rowColumnTypes, columnNames), false)\r\nin\r\n    #table(type table rowType, {{\"Betty\", 90.3}, {\"Carl\", 89.5}})",
            "Result": "#table(\r\n    type table [Name = text, Score = number],\r\n    {{\"Betty\", 90.3}, {\"Carl\", 89.5}}\r\n)"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "fields": "record",
        "open": "logical"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.Is",
      "Documentation": {
        "Documentation.Name": "Type.Is",
        "Documentation.Description": "确定第一个类型的值是否始终与第二个类型兼容。",
        "Documentation.LongDescription": "确定 <code>type1</code> 的值是否始终与 <code>type2</code> 兼容。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "确定类型号的值是否始终可以视为任何类型。",
            "Code": "Type.Is(type number, type any)",
            "Result": "true"
          },
          {
            "Description": "确定任何类型的值是否始终可以视为类型号。",
            "Code": "Type.Is(type any, type number)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type1": "type",
        "type2": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceFacets",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceFacets",
        "Documentation.Description": "替换类型的 Facet。",
        "Documentation.LongDescription": "将 <code>type</code> 的 Facet 替换为记录 <code>facets</code> 中包含的 Facet。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type",
        "facets": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.ReplaceTableKeys",
      "Documentation": {
        "Documentation.Name": "Type.ReplaceTableKeys",
        "Documentation.Description": "返回所有键均由指定的键列表替换的新的表类型。",
        "Documentation.LongDescription": "使用指定的键列表替换所有键，并返回一个新的表类型。<br>\r\n    <br>\r\n    每个键都使用以下形式的记录进行定义:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 定义键的列名列表\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 如果该键是表的主键，则为 <code>true</code>；否则, <code>false</code>\r\n      </li>\r\n    </ul>\r\n    验证指定的键列表，以确保定义的主键不超过一个，并且表类型中存在所有键列名。\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "替换表类型的键信息。",
            "Code": "let\r\n    BaseType = type table [ID = number, FirstName = text, LastName = text],\r\n    KeysAdded = Type.ReplaceTableKeys(\r\n        BaseType, \r\n        {\r\n            [Columns = {\"ID\"}, Primary = true],\r\n            [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n        }\r\n    ),\r\n    DetailsOfKeys = Type.TableKeys(KeysAdded)\r\nin\r\n    DetailsOfKeys",
            "Result": "{\r\n    [Columns = {\"ID\"}, Primary = true],\r\n    [Columns = {\"FirstName\", \"LastName\"}, Primary = false]\r\n}"
          },
          {
            "Description": "清除以前在表类型上定义的键信息。",
            "Code": "let\r\n    TypeWithKey = Type.AddTableKey(type table [ID = number, Name = text], {\"ID\"}, true),\r\n    KeyRemoved = Type.ReplaceTableKeys(TypeWithKey, {}),\r\n    DetailsOfKeys = Type.TableKeys(KeyRemoved)\r\nin\r\n    DetailsOfKeys",
            "Result": "{}"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "keys": "list"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Type.TableColumn",
      "Documentation": {
        "Documentation.Name": "Type.TableColumn",
        "Documentation.Description": "返回表中某列的类型。",
        "Documentation.LongDescription": "返回表类型 <code>tableType</code> 中列 <code>column</code> 的类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "tableType": "type",
        "column": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Uri.Combine",
      "Documentation": {
        "Documentation.Name": "Uri.Combine",
        "Documentation.Description": "返回一个绝对 URI，这是输入基本 URI 和相对 URI 的组合。",
        "Documentation.LongDescription": "返回一个绝对 URI，这是输入 <code>baseUri</code> 和 <code>relativeUri</code> 的组合。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "baseUri": "text",
        "relativeUri": "text"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Add",
      "Documentation": {
        "Documentation.Name": "Value.Add",
        "Documentation.Description": "返回两个值的总和。",
        "Documentation.LongDescription": "返回 <code>value1</code> 和 <code>value2</code> 的总和。可以指定一个可选 <code>precision</code> 参数，默认情况下使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.As",
      "Documentation": {
        "Documentation.Name": "Value.As",
        "Documentation.Description": "如果值与指定类型兼容，则返回该值。",
        "Documentation.LongDescription": "如果值与指定类型兼容，则返回该值。这等效于 M 中的 “as” 运算符，例外情况是其可以接受标识符类型引用(如 Number.Type)。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "将数字强制转换为数字。",
            "Code": "Value.As(123, Number.Type)",
            "Result": "123"
          },
          {
            "Description": "尝试将文本值强制转换为数字。",
            "Code": "Value.As(\"abc\", type number)",
            "Result": "[Expression.Error] We cannot convert the value \"abc\" to type Number."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Compare",
      "Documentation": {
        "Documentation.Name": "Value.Compare",
        "Documentation.Description": "根据第一个值是小于、等于还是大于第二个值，返回 -1、0 或 1。",
        "Documentation.LongDescription": "根据第一个值是小于、等于还是大于第二个值，返回 -1、0 或 1。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Divide",
      "Documentation": {
        "Documentation.Name": "Value.Divide",
        "Documentation.Description": "返回将第一个值除以第二个值的结果。",
        "Documentation.LongDescription": "返回将 <code>value1</code> 除以 <code>value2</code> 的结果。可以指定一个可选 <code>precision</code> 参数，默认情况下使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Equals",
      "Documentation": {
        "Documentation.Name": "Value.Equals",
        "Documentation.Description": "返回两个值是否相等。",
        "Documentation.LongDescription": "如果值 <code>value1</code> 等于值 <code>value2</code>，则返回 true，否则返回 false。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Is",
      "Documentation": {
        "Documentation.Name": "Value.Is",
        "Documentation.Description": "确定值是否与指定类型兼容。",
        "Documentation.LongDescription": "确定值是否与指定类型兼容。这等效于 M 中的 “is” 运算符，例外情况是其可以接受标识符类型引用(如 Number.Type)。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "比较两种确定数字是否与类型号兼容的方法。",
            "Code": "Value.Is(123, Number.Type) = (123 is number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Multiply",
      "Documentation": {
        "Documentation.Name": "Value.Multiply",
        "Documentation.Description": "返回两个值的乘积。",
        "Documentation.LongDescription": "返回将 <code>value1</code> 与 <code>value2</code> 相乘的乘积。可以指定一个可选 <code>precision</code> 参数，默认情况下使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NativeQuery",
      "Documentation": {
        "Documentation.Name": "Value.NativeQuery",
        "Documentation.Description": "对目标计算查询。",
        "Documentation.LongDescription": "<p>使用 <code>parameters</code> 中指定的参数和 <code>options</code> 中指定的选项对 <code>target</code> 计算 <code>query</code>。</p>\r\n<p><code>target</code> 定义查询的输出。</p>\r\n<p><code>target</code> 提供 <code>query</code> 所述运算的上下文。</p>\r\n<p><code>query</code> 描述了要对 <code>target</code> 执行的查询。<code>query</code> 以 <code>target</code> 的专用方式(例如 T-SQL 语句)进行表示。</p>\r\n<p>可选的 <code>parameters</code> 值可能包含适用于提供 <code>query</code> 预期的参数值的列表或记录。</p>\r\n<p>可选的 <code>options</code> 记录可能包含影响 <code>query</code> 对 <code>target</code> 的计算行为的选项。这些选项为 <code>target</code> 所特有。</p>",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "target": "any",
        "query": "text",
        "parameters": "any",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.NullableEquals",
      "Documentation": {
        "Documentation.Name": "Value.NullableEquals",
        "Documentation.Description": "返回两个值是否相等。",
        "Documentation.LongDescription": "如果任一参数“<code>value1</code>”或“<code>value2</code>”为 Null，则返回 Null，否则等同于 Value.Equals。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceMetadata",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceMetadata",
        "Documentation.Description": "替换输入的元数据信息。",
        "Documentation.LongDescription": "替换输入的元数据信息。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.ReplaceType",
      "Documentation": {
        "Documentation.Name": "Value.ReplaceType",
        "Documentation.Description": "替换值的类型。",
        "Documentation.LongDescription": "将 <code>value</code> 的类型替换为提供的 <code>type</code>。",
        "Documentation.Category": "Values.Types",
        "Documentation.Examples": [
          {
            "Description": "将记录的默认类型替换为更具体的类型。",
            "Code": "Type.RecordFields(\r\n    Value.Type(\r\n        Value.ReplaceType(\r\n            [Column1 = 123],\r\n            type [Column1 = number]\r\n        )\r\n    )\r\n)[Column1][Type]",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "type": "type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Value.Subtract",
      "Documentation": {
        "Documentation.Name": "Value.Subtract",
        "Documentation.Description": "返回两个值的差。",
        "Documentation.LongDescription": "返回 <code>value1</code> 和 <code>value2</code> 的差。可以指定一个可选 <code>precision</code> 参数，默认情况下使用 <code>Precision.Double</code>。",
        "Documentation.Category": "Values.Arithmetic operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value1": "any",
        "value2": "any",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "WebAction.Request",
      "Documentation": {
        "Documentation.Name": "WebAction.Request",
        "Documentation.Description": "创建以下操作:实施后，将执行 HTTP 请求的结果作为二进制值返回。",
        "Documentation.LongDescription": "创建一个操作，该操作在执行时针对使用 HTTP 作为二进制值的 <code>url</code> 返回执行 <code>method</code> 请求的结果。\r\n    可以提供可选的记录参数 <code>options</code> 以指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>Query</code> : 以编程方式将查询参数添加到 URL，无需担心转义。</li>\r\n<li><code>ApiKeyName</code> : 如果目标站点具有 API 密钥的概念，则此参数可用于指定必须在 URL 中使用的密钥参数的名称(而不是值)。凭据中提供了实际的密钥值。</li>\r\n<li><code>Headers</code> : 将此值指定为记录将向 HTTP 请求提供其他标头。</li>\r\n<li><code>Timeout</code> : 如果将此值指定为持续时间，则将更改 HTTP 请求的超时时间。默认值为 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 如果将此值指定为列表，则将排除这些 HTTP 标头键，使其不作为用于缓存数据的计算的一部分。</li>\r\n<li><code>IsRetry</code> : 将此逻辑值指定为 true 将在提取数据时忽略缓存中的所有现有响应。</li>\r\n<li><code>ManualStatusHandling</code> : 如果将此值指定为列表，将阻止对其响应具有这些状态代码之一的 HTTP 请求进行任何内置处理。</li>\r\n<li><code>RelativePath</code> : 如果将此值指定为文本，则会在发出请求之前将其追加到基 URL。</li>\r\n<li><code>Content</code> : 指定此值将导致其内容成为 HTTP 请求的正文。</li>\r\n</ul>\r\n\r\n    <br>\r\n    请注意，在大多数上下文中禁用此函数。请考虑改用 Web.Contents 或 Web.Headers。\r\n    ",
        "Documentation.Category": "Action",
        "Documentation.Examples": [
          {
            "Description": "对必应执行 GET 请求。",
            "Code": "WebAction.Request(WebMethod.Get, \"https://bing.com\")",
            "Result": "Action"
          }
        ]
      },
      "ReturnType": "action",
      "Parameters": {
        "method": "text",
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "Zendesk.Collection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any",
        "collectionName": "any",
        "schema": "any"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "appFigures.Content",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "path": "text",
        "params": "record"
      },
      "RequiredParameters": "2"
    },
    {
      "Name": "AzureDataExplorer.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureEnterprise.Contents",
      "Documentation": {
        "Documentation.Description": "输入与你的注册相关联的 Azure Enterprise REST API 终结点的 URL",
        "Documentation.DisplayName": "AzureEnterprise.Contents",
        "Documentation.Caption": "AzureEnterprise.Contents",
        "Documentation.Name": "AzureEnterprise.Contents",
        "Documentation.LongDescription": "返回调用为 Azure Enterprise API 提供的 URL 的二进制结果。",
        "Documentation.Examples": [
          {
            "Description": "使用 AzureEnterprise.Contents 函数返回特定报表的结果。",
            "Code": "        let\r\n            report = Table.FromColumns({Lines.FromBinary(Binary.Buffer(AzureEnterprise.Contents(\"https://ea.azure.com/rest/12345/usage-report\", [month=\"2014-04\", type=\"summary\", fmt=\"Csv\"])),null,null,1252)}),\r\n            skips = Table.Skip(report, 2),\r\n            split =  Table.SplitColumn(skips, \"Column1\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)),\r\n            promoted = Table.PromoteHeaders(split)\r\n        in\r\n            promoted",
            "Result": "表"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.BlobContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.BlobContents",
        "Documentation.Description": "从 Azure 存储库返回指定 blob 的内容。",
        "Documentation.LongDescription": "从 Azure 存储保管库返回 URL <code>url</code> 处的 blob 内容。可以指定 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等待数据使用者前要读取的字节数。默认值为 4MB。</li>\r\n<li><code>RequestSize</code> : 要在对服务器的单个 HTTP 请求中尝试读取的字节数。默认值为 4MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 选项通过指定要并行执行的请求数来支持更快速的数据下载，这是以内存利用率为代价的。所需的内存为 (ConcurrentRequest * RequestSize)。默认值为 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "AzureStorage.DataLakeContents",
      "Documentation": {
        "Documentation.Name": "AzureStorage.DataLakeContents",
        "Documentation.Description": "从 Azure Data Lake Storage 文件系统返回指定文件的内容。",
        "Documentation.LongDescription": "从 Azure Data Lake Storage 文件系统返回 URL <code>url</code> 处的文件内容。可以指定 <code>options</code> 来控制以下选项:\r\n    <ul>\r\n<li><code>BlockSize</code> : 等待数据使用者前要读取的字节数。默认值为 4MB。</li>\r\n<li><code>RequestSize</code> : 要在对服务器的单个 HTTP 请求中尝试读取的字节数。默认值为 4MB。</li>\r\n<li><code>ConcurrentRequests</code> : ConcurrentRequests 选项通过指定要并行执行的请求数来支持更快速的数据下载，这是以内存利用率为代价的。所需的内存为 (ConcurrentRequest * RequestSize)。默认值为 16。</li>\r\n</ul>\r\n",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ApproximateLength",
      "Documentation": {
        "Documentation.Name": "Binary.ApproximateLength",
        "Documentation.Description": "返回二进制文件的近似长度。",
        "Documentation.LongDescription": "返回 <code>binary</code> 的近似长度，或者如果数据源不支持近似长度，则返回错误。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "获取二进制值的近似长度。",
            "Code": "Binary.ApproximateLength(Binary.FromText(\"i45WMlSKjQUA\", BinaryEncoding.Base64))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Buffer",
      "Documentation": {
        "Documentation.Name": "Binary.Buffer",
        "Documentation.Description": "缓冲内存中的二进制值。",
        "Documentation.LongDescription": "缓冲内存中的二进制值。 此调用的结果是一个稳定的二进制值，这意味着它将具有确定的字节长度和顺序。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "创建二进制值的稳定版本。",
            "Code": "Binary.Buffer(Binary.FromList({0..10}))",
            "Result": "#binary({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10})"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Combine",
      "Documentation": {
        "Documentation.Name": "Binary.Combine",
        "Documentation.Description": "将一组二进制值合并成单个二进制值。",
        "Documentation.LongDescription": "将一组二进制值合并成单个二进制值。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "binaries": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.From",
      "Documentation": {
        "Documentation.Name": "Binary.From",
        "Documentation.Description": "从给定的值创建一个二进制值",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>binary</code> 值。如果给定的 <code>value</code> 是 <code>null</code>，则 <code>Binary.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>binary</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>binary</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>binary</code> 值。有关详细信息，请参阅 <code>Binary.FromText</code>。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"1011\"</code> 的 <code>binary</code> 值。",
            "Code": "Binary.From(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromList",
      "Documentation": {
        "Documentation.Name": "Binary.FromList",
        "Documentation.Description": "将一组数值转换为一个二进制值。",
        "Documentation.LongDescription": "将一组数值转换为一个二进制值。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.FromText",
      "Documentation": {
        "Documentation.Name": "Binary.FromText",
        "Documentation.Description": "将来自文本格式的数据解码为二进制值。",
        "Documentation.LongDescription": "返回将文本值 <code>text</code> 转换为二进制值(<code>number</code> 的列表)的结果。可以指定 <code>encoding</code> 以便指示在文本值中使用的编码。\r\n      以下 <code>BinaryEncoding</code> 值可用于 <code>encoding</code>。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 编码</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 十六进制编码</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": [
          {
            "Description": "将 \"1011\" 解码为二进制值。",
            "Code": "Binary.FromText(\"1011\")",
            "Result": "Binary.FromText(\"1011\", BinaryEncoding.Base64)"
          },
          {
            "Description": "将 \"1011\" 解码为具有十六进制编码的二进制值。",
            "Code": "Binary.FromText(\"1011\", BinaryEncoding.Hex)",
            "Result": "Binary.FromText(\"EBE=\", BinaryEncoding.Base64)"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.InferContentType",
      "Documentation": {
        "Documentation.Name": "Binary.InferContentType",
        "Documentation.Description": "读取二进制流，并尝试确定该流的内容类型和格式信息。",
        "Documentation.LongDescription": "返回包含字段 Content.Type 的记录，它包含推断的 MIME 类型。\r\n    如果推断的内容类型为 text/*，且检测到编码代码页，则同时还返回包含流的编码的字段 Content.Encoding。\r\n    如果推断的内容类型为 text/csv，且格式被分隔，则同时还返回包含潜在分隔符分析的表的字段 Csv.PotentialDelimiter。\r\n    如果推断的内容类型为 text/csv，则格式为固定宽度，且同时还返回包含潜在固定宽度列位置分析的列表的字段 Csv.PotentialPositions。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "source": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.Length",
      "Documentation": {
        "Documentation.Name": "Binary.Length",
        "Documentation.Description": "返回字符数。",
        "Documentation.LongDescription": "返回字符数。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToList",
      "Documentation": {
        "Documentation.Name": "Binary.ToList",
        "Documentation.Description": "将一个二进制值转换为一组数值。",
        "Documentation.LongDescription": "将一个二进制值转换为一组数值。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ToText",
      "Documentation": {
        "Documentation.Name": "Binary.ToText",
        "Documentation.Description": "将二进制数据解码为文本格式。",
        "Documentation.LongDescription": "返回将数值 <code>binary</code> 的二进制列表转换为文本值的结果。或者，可以指定 <code>encoding</code> 以便指示要在生成的文本值中使用的编码\r\n      以下 <code>BinaryEncoding</code> 值可用于 <code>encoding</code>。\r\n      <ul>\r\n        <li><code>BinaryEncoding.Base64</code>: Base 64 编码</li>\r\n        <li><code>BinaryEncoding.Hex</code>: 十六进制编码</li>\r\n      </ul>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "BinaryEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewError",
      "Documentation": {
        "Documentation.Name": "Binary.ViewError",
        "Documentation.Description": "创建修改的错误记录，当在视图上(通过 Binary.View)定义的处理程序引发该记录时，它不会触发回退。",
        "Documentation.LongDescription": "从 <code>errorRecord</code> 创建修改的错误记录，当在视图上(通过 Binary.View)定义的处理程序引发该记录时，它不会触发回退。",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Binary.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Binary.ViewFunction",
        "Documentation.Description": "创建可由在视图上(通过 Binary.View)定义的处理程序截获的函数。",
        "Documentation.LongDescription": "<p>基于可在由<code>Binary.View</code>创建的视图中处理的 <code>function</code> 创建视图函数。</p>\r\n<p><code>Binary.View</code> 的 <code>OnInvoke</code>处理程序可用于定义视图函数的处理程序。</p>\r\n<p>与内置操作的处理程序一样，如果未指定<code>OnInvoke</code>处理程序，或者如果处理程序未处理视图函数，或者如果处理程序引发错误，则 <code>function</code> 会应用于视图顶部。</p>\r\n<p>请参阅已发布的 Power Query 自定义连接器文档，从而了解有关 <code>Binary.View</code>和自定义视图函数的更完整的说明。</p>",
        "Documentation.Category": "Binary",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedSignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedSignedInteger",
        "Documentation.Description": "读取使用 7 位可变长度编码进行编码的 64 位带符号整数的二进制格式。",
        "Documentation.LongDescription": "读取使用 7 位可变长度编码进行编码的 64 位带符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.7BitEncodedUnsignedInteger",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.7BitEncodedUnsignedInteger",
        "Documentation.Description": "读取使用 7 位可变长度编码进行编码的 64 位无符号整数的二进制格式。",
        "Documentation.LongDescription": "读取使用 7 位可变长度编码进行编码的 64 位无符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Byte",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Byte",
        "Documentation.Description": "读取 8 位无符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 8 位无符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Decimal",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Decimal",
        "Documentation.Description": "读取 .NET 16 字节十进制值的二进制格式。",
        "Documentation.LongDescription": "读取 .NET 16 字节十进制值的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Double",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Double",
        "Documentation.Description": "读取 8 字节 IEEE 双精度浮点值的二进制格式。",
        "Documentation.LongDescription": "读取 8 字节 IEEE 双精度浮点值的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.List",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.List",
        "Documentation.Description": "返回读取项序列的二进制格式并且返回一个列表。",
        "Documentation.LongDescription": "返回读取项序列并返回 <code>列表</code> 的二进制格式。<code>binaryFormat</code> 参数指定每个项的二进制格式。可通过三种方式确定读取的项数: <ul><li>如果未指定 <code>countOrCondition</code>，则将一直读取二进制格式，直到没有任何项为止。</li><li>如果 <code>countOrCondition</code> 是数字，则二进制格式将读取此数量的项。</li><li>如果 <code>countOrCondition</code> 是一个函数，则将为每个读取项调用该函数。该函数返回 true 可继续，返回 false 可停止读取项。最后一项包含在列表中。</li><li>如果 <code>countOrCondition</code> 是二进制格式，则项计数应位于列表前面，并使用指定的格式读取计数。</li></ul>",
        "Documentation.Category": "Binary Formats.Reading lists",
        "Documentation.Examples": [
          {
            "Description": "读取字节，直到到达数据末尾。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "读取两个字节。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          },
          {
            "Description": "读取字节，直到字节值大于或等于 2。",
            "Code": "let\r\n    binaryData = #binary({1, 2, 3}),\r\n    listFormat = BinaryFormat.List(BinaryFormat.Byte, (x) => x < 2)\r\nin\r\n    listFormat(binaryData)",
            "Result": "{1, 2}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "binaryFormat": "function",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Null",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Null",
        "Documentation.Description": "读取零字节并且返回 null 的二进制格式。",
        "Documentation.LongDescription": "读取零字节并且返回 null 的二进制格式。",
        "Documentation.Category": "Binary Formats.Controlling what comes next",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Record",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Record",
        "Documentation.Description": "返回读取记录的二进制格式。",
        "Documentation.LongDescription": "返回读取记录的二进制格式。 <code>record</code> 参数指定该记录的格式。 该记录中的各字段可具有不同的二进制格式。 如果某个字段包含的值不是二进制格式值，则不会为该字段读取任何数据，并且该字段值回显到结果。",
        "Documentation.Category": "Binary Formats.Reading records",
        "Documentation.Examples": [
          {
            "Description": "读取一个记录，该记录包含一个 16 位整数和一个 32 位整数。",
            "Code": "let\r\n    binaryData = #binary({\r\n        0x00, 0x01,\r\n        0x00, 0x00, 0x00, 0x02\r\n    }),\r\n    recordFormat = BinaryFormat.Record([\r\n        A = BinaryFormat.UnsignedInteger16,\r\n        B = BinaryFormat.UnsignedInteger32\r\n    ])\r\nin\r\n    recordFormat(binaryData)",
            "Result": "[A = 1, B = 2]"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger16",
        "Documentation.Description": "读取 16 位带符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 16 位带符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger32",
        "Documentation.Description": "读取 32 位带符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 32 位带符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.SignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.SignedInteger64",
        "Documentation.Description": "读取 64 位带符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 64 位带符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Single",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Single",
        "Documentation.Description": "读取 4 字节 IEEE 单精度浮点值的二进制格式。",
        "Documentation.LongDescription": "读取 4 字节 IEEE 单精度浮点值的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.Text",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.Text",
        "Documentation.Description": "返回读取文本值的二进制格式。",
        "Documentation.LongDescription": "返回读取文本值的二进制格式。 <code>length</code> 指定要解码的字节数，或者指定文本之前长度的二进制格式。可选的 <code>encoding</code> 值指定文本的编码。如果未指定 <code>encoding</code>，则根据 Unicode 字节顺序标记确定该编码。如果不存在字节顺序标记，则使用 <code>TextEncoding.Utf8</code>。",
        "Documentation.Category": "Binary Formats.Reading text",
        "Documentation.Examples": [
          {
            "Description": "将两个字节解码为 ASCII 文本。",
            "Code": "let\r\n    binaryData = #binary({65, 66, 67}),\r\n    textFormat = BinaryFormat.Text(2, TextEncoding.Ascii)\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          },
          {
            "Description": "对 ASCII 文本进行解码，其中，以字节为单位的文本长度作为一个字节出现在文本之前。",
            "Code": "let\r\n    binaryData = #binary({2, 65, 66}),\r\n    textFormat = BinaryFormat.Text(\r\n        BinaryFormat.Byte,\r\n        TextEncoding.Ascii\r\n    )\r\nin\r\n    textFormat(binaryData)",
            "Result": "\"AB\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger16",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger16",
        "Documentation.Description": "读取 16 位无符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 16 位无符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger32",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger32",
        "Documentation.Description": "读取 32 位无符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 32 位无符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "BinaryFormat.UnsignedInteger64",
      "Documentation": {
        "Documentation.Name": "BinaryFormat.UnsignedInteger64",
        "Documentation.Description": "读取 64 位无符号整数的二进制格式。",
        "Documentation.LongDescription": "读取 64 位无符号整数的二进制格式。",
        "Documentation.Category": "Binary Formats.Reading numbers",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Byte.From",
      "Documentation": {
        "Documentation.Name": "Byte.From",
        "Documentation.Description": "根据给定值创建 8 位整数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回 8 位整数 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Byte.From</code> 返回 <code>null</code>。如果给定的 <code>value</code> 是不带小数部分的 8 位整数范围内的 <code>number</code>，则返回 <code>value</code>。如果带有小数部分，则按指定舍入模式舍入该数字。默认舍入模式为 <code>RoundingMode.ToEven</code>。如果 <code>value</code> 属于任何类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。还可能提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 8 位整数 <code>number</code> 值。",
            "Code": "Byte.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 获取 <code>\"4.5\"</code> 的 8 位整数 <code>number</code> 值。",
            "Code": "Byte.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cds.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.FromNumber",
      "Documentation": {
        "Documentation.Name": "Character.FromNumber",
        "Documentation.Description": "将数字转换为文本字符。",
        "Documentation.LongDescription": "返回等效于数字的字符。<br>\r\n    <br>\r\n    提供的 <code>number</code> 应为 21 位 Unicode 码位。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "将某个数字转换为其等效字符值。",
            "Code": "Character.FromNumber(9)",
            "Result": "\"#(tab)\""
          },
          {
            "Description": "将字符转换为数字，再转换回字符。",
            "Code": "Character.FromNumber(Character.ToNumber(\"A\"))",
            "Result": "\"A\""
          },
          {
            "Description": "将“露齿笑的脸”表情符号的十六进制码位转换为等效的 UTF-16 代理项对。",
            "Code": "Character.FromNumber(0x1F600)",
            "Result": "\"#(0001F600)\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Character.ToNumber",
      "Documentation": {
        "Documentation.Name": "Character.ToNumber",
        "Documentation.Description": "将某个字符转换为数值。",
        "Documentation.LongDescription": "返回等效于 <code>character</code> 的数字。<br>\r\n    <br>\r\n    结果将是由提供的字符或代理项对代表的 21 位 Unicode 码位。\r\n  ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "将某个字符转换其等效数值。",
            "Code": "Character.ToNumber(\"#(tab)\")",
            "Result": "9"
          },
          {
            "Description": "将“露齿笑的脸”表情符号的 UTF-16 代理项对转换为等效的十六进制码位。",
            "Code": "Number.ToText(Character.ToNumber(\"#(0001F600)\"), \"X\")",
            "Result": "\"1F600\""
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "character": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByDelimiter",
        "Documentation.Description": "返回一个函数，它使用指定的分隔符将文本列表合并。",
        "Documentation.LongDescription": "返回一个函数，它使用指定的分隔符将文本值列表合并成单个文本值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用分号分隔符合并文本值列表。",
            "Code": "Combiner.CombineTextByDelimiter(\";\")({\"a\", \"b\", \"c\"})",
            "Result": "\"a;b;c\""
          },
          {
            "Description": "使用逗号分隔符和 CSV 样式引号合并两列文本。",
            "Code": "let\r\n    Source = #table(\r\n        type table [Column1 = text, Column2 = text],\r\n        {{\"a\", \"b\"}, {\"c\", \"d,e,f\"}}\r\n    ),\r\n    Merged = Table.CombineColumns(\r\n        Source,\r\n        {\"Column1\", \"Column2\"},\r\n        Combiner.CombineTextByDelimiter(\",\", QuoteStyle.Csv),\r\n        \"Merged\"\r\n    )\r\nin\r\n    Merged",
            "Result": "#table(\r\n    type table [Merged = text],\r\n    {{\"a,b\"}, {\"c,\"\"d,e,f\"\"\"}}\r\n)"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByEachDelimiter",
        "Documentation.Description": "返回一个函数，它使用分隔符的顺序将文本列表合并。",
        "Documentation.LongDescription": "返回一个函数，它使用分隔符的顺序将文本值列表合并成单个文本值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用分隔符的顺序合并文本值列表。",
            "Code": "Combiner.CombineTextByEachDelimiter({\"=\", \"+\"})({\"a\", \"b\", \"c\"})",
            "Result": "\"a=b+c\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByLengths",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByLengths",
        "Documentation.Description": "返回一个函数，它使用指定的长度将文本列表合并。",
        "Documentation.LongDescription": "返回一个函数，它使用指定的长度将文本值列表合并成单个文本值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "通过从每个输入值中提取指定数量的字符，合并文本值列表。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3})({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc\""
          },
          {
            "Description": "在第一次使用模板文本预填充结果后，通过提取指定数量的字符来合并文本值列表。",
            "Code": "Combiner.CombineTextByLengths({1, 2, 3}, \"*********\")({\"aaa\", \"bbb\", \"ccc\"})",
            "Result": "\"abbccc***\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByPositions",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByPositions",
        "Documentation.Description": "返回一个函数，它使用指定的输出位置将文本列表合并。",
        "Documentation.LongDescription": "返回一个函数，它使用指定的输出位置将文本值列表合并成单个文本值。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "通过将文本值放在指定位置的输出中来合并文本值列表。",
            "Code": "Combiner.CombineTextByPositions({0, 5, 10})({\"abc\", \"def\", \"ghi\"})",
            "Result": "\"abc  def  ghi\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Combiner.CombineTextByRanges",
      "Documentation": {
        "Documentation.Name": "Combiner.CombineTextByRanges",
        "Documentation.Description": "返回一个函数，它使用指定的位置和长度将文本列表合并。",
        "Documentation.LongDescription": "返回一个函数，该函数使用指定的输出位置和长度将文本值列表合并为单个文本值。null 长度指示整个文本值都应被包含。",
        "Documentation.Category": "Combiner",
        "Documentation.Examples": [
          {
            "Description": "使用指定的输出位置和长度将文本值列表合并。",
            "Code": "Combiner.CombineTextByRanges({{0, 1}, {3, 2}, {6, null}})({\"abc\", \"def\", \"ghijkl\"})",
            "Result": "\"a  de ghijkl\""
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "template": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Comparer.FromCulture",
      "Documentation": {
        "Documentation.Name": "Comparer.FromCulture",
        "Documentation.Description": "根据指定的区域性和区分大小写返回比较器函数。",
        "Documentation.LongDescription": "返回比较器函数，该函数使用 <code>culture</code> 和 <code>ignoreCase</code> 指定的区分大小写来执行比较。<br>\r\n      <br>\r\n      比较器函数接受两个参数，并根据第一个值是小于、等于还是大于第二个值返回 -1、0 或 1。<br>\r\n      <br>\r\n      <code>ignoreCase</code> 的默认值为 false。<code>culture</code> 应为 .NET framework 支持的区域设置之一(例如，\"en-US\")。\r\n    ",
        "Documentation.Category": "Comparer",
        "Documentation.Examples": [
          {
            "Description": "使用 \"en-US\" 区域设置比较 \"a\" 和 \"A\" 以确定这些值是否相等。",
            "Code": "Comparer.FromCulture(\"en-US\")(\"a\", \"A\")",
            "Result": "-1"
          },
          {
            "Description": "使用忽略大小写的 \"en-US\" 区域设置比较 \"a\" 和 \"A\" 以确定这些值是否相等。",
            "Code": "Comparer.FromCulture(\"en-US\", true)(\"a\", \"A\")",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "culture": "text",
        "ignoreCase": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.AttributeMemberId",
      "Documentation": {
        "Documentation.Name": "Cube.AttributeMemberId",
        "Documentation.Description": "从成员属性值返回唯一的成员标识符。 ",
        "Documentation.LongDescription": "从成员属性值返回唯一的成员标识符。<code>attribute</code>。对其他值返回 null。 ",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "attribute": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Cube.PropertyKey",
      "Documentation": {
        "Documentation.Name": "Cube.PropertyKey",
        "Documentation.Description": "返回属性的键。",
        "Documentation.LongDescription": "返回属性 <code>property</code> 的键。",
        "Documentation.Category": "Cube",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "property": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Currency.From",
      "Documentation": {
        "Documentation.Name": "Currency.From",
        "Documentation.Description": "从给定值中返回一个货币值。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>currency</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Currency.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是货币范围内的 <code>number</code>，则将 <code>value</code> 的小数部分舍入为 4 位小数位数后返回。如果 <code>value</code> 属于任何其他类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。货币的有效范围为 <code>-922,337,203,685,477.5808</code> 到 <code>922,337,203,685,477.5807</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。默认为 <code>RoundingMode.ToEven</code>。还可能提供可选的 <code>culture</code> (例如 “en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"1.23455\"</code> 的 <code>currency</code> 值。",
            "Code": "Currency.From(\"1.23455\")",
            "Result": "1.2346"
          },
          {
            "Description": "使用 <code>RoundingMode.Down</code> 获取 <code>\"1.23455\"</code> 的 <code>currency</code> 值。",
            "Code": "Currency.From(\"1.23455\", \"en-US\", RoundingMode.Down)",
            "Result": "1.2345"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Day",
      "Documentation": {
        "Documentation.Name": "Date.Day",
        "Documentation.Description": "返回星期几部分。",
        "Documentation.LongDescription": "返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值的日部分。\r\n      <ul>\r\n        <li><code>dateTime</code>: 要从其提取日部分的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取表示 5/14/2011 05:00:00 PM 的日期和时间的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值的日部分。",
            "Code": "Date.Day(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "14"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeek",
        "Documentation.Description": "返回数字(介于 0 和 6 之间)，以指明提供的值是星期几。",
        "Documentation.LongDescription": "返回数字(介于 0 和 6 之间)，以指明提供的 <code>dateTime</code> 是星期几。\r\n  <ul>\r\n        <li><code>dateTime</code>: <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n        <li><code>firstDayOfWeek</code>: <code>Day</code> 值，指明应将哪一天视为一周的第一天。可取值为 Day.Sunday、Day.Monday、Day.Tuesday、Day.Wednesday、Day.Thursday、Day.Friday 或 Day.Saturday。如果未指定，使用的是依赖区域性的默认值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 2011 年 2 月 21 日(星期一)代表的是星期几(将星期日视为一周的第一天)。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Sunday)",
            "Result": "1"
          },
          {
            "Description": "获取 2011 年 2 月 21 日(星期一)代表的是星期几(将星期一视为一周的第一天)。",
            "Code": "Date.DayOfWeek(#date(2011, 02, 21), Day.Monday)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "Day.Type",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfWeekName",
      "Documentation": {
        "Documentation.Name": "Date.DayOfWeekName",
        "Documentation.Description": "返回星期几。",
        "Documentation.LongDescription": "返回所提供的 <code>date</code> 的星期几名称。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取星期几。",
            "Code": "Date.DayOfWeekName(#date(2011, 12, 31), \"en-US\")",
            "Result": "\"Saturday\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DayOfYear",
      "Documentation": {
        "Documentation.Name": "Date.DayOfYear",
        "Documentation.Description": "返回表示一年中的日期的数值，该值介于 1 和 366 之间。",
        "Documentation.LongDescription": "返回一个数值，该值在提供的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 中表示一年中的日期。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "2011 年 3 月 1 日，一年中的某一天。",
            "Code": "Date.DayOfYear(#date(2011, 03, 01))",
            "Result": "60"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.DaysInMonth",
      "Documentation": {
        "Documentation.Name": "Date.DaysInMonth",
        "Documentation.Description": "返回指示一个月中的天数的数值，该值介于 28 和 31 之间。",
        "Documentation.LongDescription": "返回 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 中一个月的天数。\r\n <ul>\r\n        <li><code>dateTime</code>: 为其返回月份中的天数的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "由 <code>#date(2011, 12, 01)></code> 表示的十二月的天数。",
            "Code": "Date.DaysInMonth(#date(2011, 12, 01))",
            "Result": "31"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfDay",
      "Documentation": {
        "Documentation.Name": "Date.EndOfDay",
        "Documentation.Description": "返回天结束值。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 表示的天结束值。保留时区信息。\r\n <ul>\r\n <li><code>dateTime</code>: 从中计算天结束值的<code>date</code>、<code>datetime</code>或 <code>datetimezone</code>值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 5/14/2011 05:00:00 PM 的一天结束值。",
            "Code": "Date.EndOfDay(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 23, 59, 59.9999999)"
          },
          {
            "Description": "获取 5/17/2011 05:00:00 PM -7:00 的一天结束值。",
            "Code": "Date.EndOfDay(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.EndOfMonth",
        "Documentation.Description": "返回月结束值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的月结束值。\r\n <ul>\r\n <li><code>dateTime</code>: 从中计算月结束值的<code>date</code>、<code>datetime</code>或 <code>datetimezone</code>值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 5/14/2011 的月份结束值。",
            "Code": "Date.EndOfMonth(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 31)"
          },
          {
            "Description": "获取 5/17/2011 05:00:00 PM -7:00 的月份结束值。",
            "Code": "Date.EndOfMonth(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.EndOfQuarter",
        "Documentation.Description": "返回季度结束值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的季度结束值。保留时区信息。\r\n <ul>\r\n <li><code>dateTime</code>: 从中计算季度结束值的<code>date</code>、<code>datetime</code>或 <code>datetimezone</code>值</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:00 的季度结束值。",
            "Code": "Date.EndOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.EndOfWeek",
        "Documentation.Description": "返回周结束值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的周结束值。\r\n此函数取可选的 <code>Day</code> <code>firstDayOfWeek</code>，从而设置为此相对计算的一周的第一天。默认值为<code>Day.Sunday</code>。\r\n      <ul>\r\n        <li><code>dateTime</code>: 从中计算一周最后一天的<code>date</code>、<code>datetime</code>或<code>datetimezone</code>值</li>\r\n        <li><code>firstDayOfWeek</code>: <i>[可选]</i>表示一周第一天的<code>Day.Type</code>值。可能的值为 <code>Day.Sunday</code>、<code>Day.Monday</code>、<code>Day.Tuesday</code>、<code>Day.Wednesday</code>、<code>Day.Thursday</code>、<code>Day.Friday</code>和<code>Day.Saturday.</code>。默认值为<code>Day.Sunday</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 5/14/2011 的星期结束值。",
            "Code": "Date.EndOfWeek(#date(2011, 5, 14))",
            "Result": "#date(2011, 5, 14)"
          },
          {
            "Description": "获取 5/17/2011 05:00:00 PM -7:00 的星期结束值，Sunday 作为该星期的第一天。",
            "Code": "Date.EndOfWeek(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0), Day.Sunday)",
            "Result": "#datetimezone(2011, 5, 21, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.EndOfYear",
      "Documentation": {
        "Documentation.Name": "Date.EndOfYear",
        "Documentation.Description": "返回年结束值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的年结束值，包括小数秒。保留时区信息。\r\n      <ul>\r\n        <li><code>dateTime</code>: 从中计算年结束值的 <code>date</code>、<code>datetime</code>或<code>datetimezone</code>值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 5/14/2011 05:00:00 PM 的年份结束值。",
            "Code": "Date.EndOfYear(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 12, 31, 23, 59, 59.9999999)"
          },
          {
            "Description": "获取 5/17/2011 05:00:00 PM -7:00 的小时结束值。",
            "Code": "Date.EndOfYear(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 12, 31, 23, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.From",
      "Documentation": {
        "Documentation.Name": "Date.From",
        "Documentation.Description": "从给定的值创建日期。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>date</code> 值。还可提供可选的 <code>culture</code> (例如 “en-US”)。\r\n如果给定的 <code>value</code> 是 <code>null</code>，<code>Date.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>date</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>date</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>date</code> 值。有关详细信息，请参阅 <code>Date.FromText</code>。</li>\r\n        <li><code>datetime</code>: <code>value</code> 的日期组件。</li>\r\n        <li><code>datetimezone</code>: 本地日期时间中等效于 <code>value</code> 的日期组件。</li>\r\n        <li><code>number</code>: 等效于 <code>value</code> 表示的 OLE 自动化日期的日期时间的日期组件。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 <code>43910</code> 转换为 <code>date</code> 值。",
            "Code": "Date.From(43910)",
            "Result": "#date(2020, 3, 20)"
          },
          {
            "Description": "将 <code>#datetime(1899, 12, 30, 06, 45, 12)</code> 转换为 <code>date</code> 值。",
            "Code": "Date.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#date(1899, 12, 30)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.FromText",
      "Documentation": {
        "Documentation.Name": "Date.FromText",
        "Documentation.Description": "根据本地、通用和自定义日期格式创建日期。",
        "Documentation.LongDescription": "根据文本表示形式 <code>text</code> 创建 <code>date</code> 值。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的<code>文本</code>值。要了解更多详细信息，请转到 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致尽最大努力解析日期。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 也可以是文本值。这与 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 时的行为相同。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"2010-12-31\"</code> 转换为 <code>date</code> 值。",
            "Code": "Date.FromText(\"2010-12-31\")",
            "Result": "#date(2010, 12, 31)"
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "Date.FromText(\"30 Dez 2010\", [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "#date(2010, 12, 30)"
          },
          {
            "Description": "在公历中查找与回历中 1400 开头相对应的日期。",
            "Code": "Date.FromText(\"1400\", [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "#date(1979, 11, 20)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentDay",
        "Documentation.Description": "指示在当天中此日期是否出现，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当天中给定的日期时间值 <code>dateTime</code> 是否出现，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当天。",
            "Code": "Date.IsInCurrentDay(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentMonth",
        "Documentation.Description": "指示在当月中此日期是否出现，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当月中给定的日期时间值 <code>dateTime</code> 是否出现，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当月。",
            "Code": "Date.IsInCurrentMonth(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentQuarter",
        "Documentation.Description": "指示在当前季度中此日期是否出现，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当前季度中给定的日期时间值 <code>dateTime</code> 是否出现，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前季度。",
            "Code": "Date.IsInCurrentQuarter(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentWeek",
        "Documentation.Description": "指示在当前星期中此日期是否出现，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当前星期中给定的日期时间值 <code>dateTime</code> 是否出现，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前星期。",
            "Code": "Date.IsInCurrentWeek(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInCurrentYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInCurrentYear",
        "Documentation.Description": "指示在当前年份中此日期是否出现，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当前年份中给定的日期时间值 <code>dateTime</code> 是否出现，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前年份。",
            "Code": "Date.IsInCurrentYear(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextDay",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一天中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一天中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的那一天是否处于下一天。",
            "Code": "Date.IsInNextDay(Date.AddDays(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextMonth",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下个月中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一月中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的那一月是否处于下一月。",
            "Code": "Date.IsInNextMonth(Date.AddMonths(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextQuarter",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一季度中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一季度中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的那一季度是否处于下一季度。",
            "Code": "Date.IsInNextQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextWeek",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下周中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下周中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的那一星期是否处于下一星期。",
            "Code": "Date.IsInNextWeek(Date.AddDays(DateTime.FixedLocalNow(), 7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInNextYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInNextYear",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的下一年中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一年中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之后的那一年度是否处于下一年度。",
            "Code": "Date.IsInNextYear(Date.AddYears(DateTime.FixedLocalNow(), 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousDay",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousDay",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一天中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一天中出现。请注意，当传递一个在当前天内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的那一天是否处于前一天。",
            "Code": "Date.IsInPreviousDay(Date.AddDays(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousMonth",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousMonth",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一月中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一月中出现。请注意，当传递一个在当前月内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的那个月是否处于上个月。",
            "Code": "Date.IsInPreviousMonth(Date.AddMonths(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousQuarter",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousQuarter",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一季度中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一季度中出现。请注意，当传递一个在当前季度内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的那个季度是否处于上个季度。",
            "Code": "Date.IsInPreviousQuarter(Date.AddQuarters(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousWeek",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousWeek",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一周中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一周中出现。请注意，当传递一个在当前周内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的那个星期是否处于上个星期。",
            "Code": "Date.IsInPreviousWeek(Date.AddDays(DateTime.FixedLocalNow(), -7))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInPreviousYear",
      "Documentation": {
        "Documentation.Name": "Date.IsInPreviousYear",
        "Documentation.Description": "指示此日期是否会在系统当前日期和时间确定的上一年中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一年中出现。请注意，当传递一个在当前年内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间之前的那个年度是否处于前一年。",
            "Code": "Date.IsInPreviousYear(Date.AddYears(DateTime.FixedLocalNow(), -1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsInYearToDate",
      "Documentation": {
        "Documentation.Name": "Date.IsInYearToDate",
        "Documentation.Description": "指示在当前年份中该日期是否出现以及该日期是否就在当天或早于当天，它由系统上的当前日期和时间确定。",
        "Documentation.LongDescription": "指示在当前年份中给定日期时间值 <code>dateTime</code> 是否出现以及该日期时间值是否就在当天或早于当天，它由系统上的当前日期和时间确定。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于本年度截至现在的日期内。",
            "Code": "Date.IsInYearToDate(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.IsLeapYear",
      "Documentation": {
        "Documentation.Name": "Date.IsLeapYear",
        "Documentation.Description": "指示此日期是否处于闰年中。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否处于闰年。\r\n <ul>\r\n        <li><code>dateTime</code>: 要进行求值的 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定由 <code>#date(2012, 01, 01)</code> 表示的 2012 年是否为闰年。",
            "Code": "Date.IsLeapYear(#date(2012, 01, 01))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Month",
      "Documentation": {
        "Documentation.Name": "Date.Month",
        "Documentation.Description": "返回月份部分。",
        "Documentation.LongDescription": "返回提供的 <code>datetime</code> 值 <code>dateTime</code> 的月份部分。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2011, 12, 31, 9, 15, 36) 中的月份。",
            "Code": "Date.Month(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "12"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.MonthName",
      "Documentation": {
        "Documentation.Name": "Date.MonthName",
        "Documentation.Description": "返回月份名称部分。",
        "Documentation.LongDescription": "返回所提供的 <code>date</code> 的月份部分的名称。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取月份名称。",
            "Code": "Date.MonthName(#datetime(2011, 12, 31, 5, 0, 0), \"en-US\")",
            "Result": "\"December\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.QuarterOfYear",
      "Documentation": {
        "Documentation.Name": "Date.QuarterOfYear",
        "Documentation.Description": "返回一个数值，该数值指示日期属于年份中的哪个季度。",
        "Documentation.LongDescription": "返回一个介于 1 到 4 之间的数值，该数值指示日期 <code>dateTime</code> 属于年份中的哪个季度。<code>dateTime</code> 可以是 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找日期 #date(2011, 12, 31) 属于年份中的哪个季度。",
            "Code": "Date.QuarterOfYear(#date(2011, 12, 31))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfDay",
      "Documentation": {
        "Documentation.Name": "Date.StartOfDay",
        "Documentation.Description": "返回天开始值。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 表示的天开始值。\r\n    <code>dateTime</code> 必须是 <code>date</code>、<code>datetime</code>或<code>datetimezone</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:00 的天开始值。",
            "Code": "Date.StartOfDay(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.StartOfMonth",
        "Documentation.Description": "返回月开始值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的月开始值。\r\n    <code>dateTime</code> 必须为<code>date</code>或<code>datetime</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:10:32 的月开始值。",
            "Code": "Date.StartOfMonth(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfQuarter",
      "Documentation": {
        "Documentation.Name": "Date.StartOfQuarter",
        "Documentation.Description": "返回季度开始值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的季度开始值。\r\n    <code>dateTime</code> 必须是 <code>date</code>、<code>datetime</code>或<code>datetimezone</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:00 的季度开始值。",
            "Code": "Date.StartOfQuarter(#datetime(2011, 10, 10, 8, 0, 0))",
            "Result": "#datetime(2011, 10, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfWeek",
      "Documentation": {
        "Documentation.Name": "Date.StartOfWeek",
        "Documentation.Description": "返回该周的开始时间。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的周开始值。\r\n    <code>dateTime</code> 必须是 <code>date</code>、<code>datetime</code>或<code>datetimezone</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 11 日星期二所在周的开始时间。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32))",
            "Result": "// Sunday, October 9th, 2011\r\n#datetime(2011, 10, 9, 0, 0, 0)"
          },
          {
            "Description": "查找 2011 年 10 月 11 日星期二所在周的开始时间(使用星期一作为该周开始)。",
            "Code": "Date.StartOfWeek(#datetime(2011, 10, 11, 8, 10, 32), Day.Monday)",
            "Result": "// Monday, October 10th, 2011\r\n#datetime(2011, 10, 10, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.StartOfYear",
      "Documentation": {
        "Documentation.Name": "Date.StartOfYear",
        "Documentation.Description": "返回年开始值。",
        "Documentation.LongDescription": "返回包含 <code>dateTime</code> 的年开始值。\r\n    <code>dateTime</code> 必须是 <code>date</code>、<code>datetime</code>或<code>datetimezone</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:10:32 的年开始值。",
            "Code": "Date.StartOfYear(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 1, 1, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToRecord",
      "Documentation": {
        "Documentation.Name": "Date.ToRecord",
        "Documentation.Description": "返回包含日期值的各个部分的记录。",
        "Documentation.LongDescription": "返回包含给定日期值 <code>date</code> 的各个部分的记录。\r\n <ul>\r\n        <li><code>date</code>: 要从中计算其各个部分的记录的 <code>date</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#date(2011, 12, 31)</code> 值转换为包含日期值的各个部分的记录。",
            "Code": "Date.ToRecord(#date(2011, 12, 31))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "date": "date"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.ToText",
      "Documentation": {
        "Documentation.Name": "Date.ToText",
        "Documentation.Description": "返回日期值的文本表示形式。",
        "Documentation.LongDescription": "返回 <code>date</code> 的文本表示形式。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>culture</code> 仅用于旧版工作流(见下文)。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的 <code>text</code> 值。请访问 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致使用 <code>Culture</code> 定义的默认值设置日期格式。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 和 <code>culture</code> 也可以是文本值。这与 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 时的行为相同。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#date(2010, 12, 31)</code> 转换为<code>文本</code>值。<i>结果输出可能因当前区域性而异。</i>",
            "Code": "Date.ToText(#date(2010, 12, 31))",
            "Result": "\"12/31/2010\""
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "Date.ToText(#date(2010, 12, 31), [Format=\"dd MMM yyyy\", Culture=\"de-DE\"])",
            "Result": "\"31 Dez 2010\""
          },
          {
            "Description": "在回历中查找与公历中的 2000 年 1 月 1 日相对应的年份。",
            "Code": "Date.ToText(#date(2000, 1, 1), [Format=\"yyyy\", Culture=\"ar-SA\"])",
            "Result": "\"1420\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "date": "date",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfMonth",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfMonth",
        "Documentation.Description": "返回 1 到 6 之间的数字，指示此日期位于当月的哪一周。",
        "Documentation.LongDescription": "返回 1 到 6 之间的数字，指示日期 <code>dateTime</code> 位于当月的哪一周。\r\n <ul>\r\n <li><code>dateTime</code>: 已确定当月周数的<code>日期/时间</code>值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定 3 月 15 日属于 2011 年的哪一周。",
            "Code": "Date.WeekOfMonth(#date(2011, 03, 15))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.WeekOfYear",
      "Documentation": {
        "Documentation.Name": "Date.WeekOfYear",
        "Documentation.Description": "返回一个介于 1 到 54 之间的数值，该数值指示此日期属于年份中的哪一周。",
        "Documentation.LongDescription": "返回一个从 1 到 54 之间的数字，指示日期 <code>dateTime</code> 属于该年的哪一周。\r\n <ul>\r\n        <li><code>dateTime</code>: <code>日期时间</code>值，确定该年的哪一周。</li>\r\n        <li><code>firstDayOfWeek</code>: 可选的 <code>Day.Type</code> 值，指示将哪一天视为新的一周的开始(例如，<code>Day.Sunday</code>)。如果未指定，将使用区域性相关默认值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "确定 2011 年 3 月 27 日属于该年的哪一周。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27))",
            "Result": "14"
          },
          {
            "Description": "使用“星期一”作为周开始值，确定 2011 年 3 月 27 日属于该年的哪一周。",
            "Code": "Date.WeekOfYear(#date(2011, 03, 27), Day.Monday)",
            "Result": "13"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any",
        "firstDayOfWeek": "Day.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Date.Year",
      "Documentation": {
        "Documentation.Name": "Date.Year",
        "Documentation.Description": "返回年份部分。",
        "Documentation.LongDescription": "返回提供的 <code>datetime</code> 值 <code>dateTime</code> 的年份部分。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2011, 12, 31, 9, 15, 36) 中的年份。",
            "Code": "Date.Year(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "2011"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Date",
      "Documentation": {
        "Documentation.Name": "DateTime.Date",
        "Documentation.Description": "返回给定 date、datetime 或 datetimezone 值的日期部分。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 以及给定 <code>date</code>、<code>datetime</code> 或 <code>datetimezone</code> 值的日期部分。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2010, 12, 31, 11, 56, 02) 的日期值。",
            "Code": "DateTime.Date(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#date(2010, 12, 31)"
          }
        ]
      },
      "ReturnType": "date",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.From",
      "Documentation": {
        "Documentation.Name": "DateTime.From",
        "Documentation.Description": "从给定的值创建日期时间。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>datetime</code> 值。还可提供可选的 <code>culture</code> (例如 \"en-US\")。\r\n如果给定的 <code>value</code> 是 <code>null</code>，<code>DateTime.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>datetime</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>datetime</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>datetime</code> 值。有关详细信息，请参阅 <code>DateTime.FromText</code>。</li>\r\n        <li><code>date</code>: 一个 <code>datetime</code>，它以 <code>value</code> 作为日期组件以及<code>午夜 12:00:00</code> 作为时间组件。</li>\r\n        <li><code>datetimezone</code>: 等效于 <code>value</code> 的本地 <code>datetime</code>。</li>\r\n        <li><code>time</code>: <code>datetime</code>，它具有作为日期组件的 <code>0</code> 的 OLE 自动化日期的等效日期以及作为时间组件的 <code>value</code>。</li>\r\n        <li><code>number</code>: 一个 <code>datetime</code>，它等效于由 <code>value</code> 表示的 OLE 自动化日期。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#time(06, 45, 12)</code> 转换为 <code>datetime</code> 值。",
            "Code": "DateTime.From(#time(06, 45, 12))",
            "Result": "#datetime(1899, 12, 30, 06, 45, 12)"
          },
          {
            "Description": "将 <code>#date(1975, 4, 4)</code> 转换为 <code>datetime</code> 值。",
            "Code": "DateTime.From(#date(1975, 4, 4))",
            "Result": "#datetime(1975, 4, 4, 0, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTime.FromFileTime",
        "Documentation.Description": "从 64 位长度的数字创建日期时间。",
        "Documentation.LongDescription": "从 <code>fileTime</code> 值创建一个 <code>datetime</code> 值并且将其转换为本地时区。filetime 是一个 Windows 文件时间值，它表示自公元 1601 年 1 月 1 日(C.E.)通用协调时间(UTC)午夜 12:00 后 经过的 100 纳秒时间间隔的数目。\r\n",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将 <code>129876402529842245</code> 转换为日期时间值。",
            "Code": "DateTime.FromFileTime(129876402529842245)",
            "Result": "#datetime(2012, 7, 24, 14, 50, 52.9842245)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.FromText",
      "Documentation": {
        "Documentation.Name": "DateTime.FromText",
        "Documentation.Description": "从本地和通用日期时间格式创建 datetimezone。",
        "Documentation.LongDescription": "根据文本表示形式 <code>text</code> 创建 <code>datetime</code> 值。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的<code>文本</code>值。要了解更多详细信息，请转到 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致尽最大努力解析日期。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 也可以是文本值。这与 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 时的行为相同。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"2010-12-31T01:30:00\"</code> 转换为 datetime 值。",
            "Code": "DateTime.FromText(\"2010-12-31T01:30:25\")",
            "Result": "#datetime(2010, 12, 31, 1, 30, 25)"
          },
          {
            "Description": "将 <code>\"2010-12-31T01:30:00.121212\"</code> 转换为 datetime 值。",
            "Code": "DateTime.FromText(\"30 Dez 2010 02:04:50.369730\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "#datetime(2010, 12, 30, 2, 4, 50.36973)"
          },
          {
            "Description": "将 <code>\"2010-12-31T01:30:00\"</code> 转换为 datetime 值。",
            "Code": "DateTime.FromText(\"2000-02-08T03:45:12Z\", [Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "#datetime(2000, 2, 8, 3, 45, 12)"
          },
          {
            "Description": "将 <code>\"20101231T013000\"</code> 转换为 datetime 值。",
            "Code": "DateTime.FromText(\"20101231T013000\", [Format=\"yyyyMMdd'T'HHmmss\", Culture=\"en-US\"])",
            "Result": "#datetime(2010, 12, 31, 1, 30, 0)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentHour",
        "Documentation.Description": "指示此日期时间是否按系统当前日期和时间所确定的那样处于当前小时内。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否按系统当前日期和时间所确定的那样处于当前小时内。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前小时内。",
            "Code": "DateTime.IsInCurrentHour(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentMinute",
        "Documentation.Description": "指示此日期时间是否按系统当前日期和时间所确定的那样处于当前分钟内。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否按系统当前日期和时间所确定的那样处于当前分钟内。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前分钟内。",
            "Code": "DateTime.IsInCurrentMinute(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInCurrentSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInCurrentSecond",
        "Documentation.Description": "指示此日期时间是否按系统当前日期和时间所确定的那样处于当前秒内。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否按系统当前日期和时间所确定的那样处于当前秒内。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间是否处于当前秒内。",
            "Code": "DateTime.IsInCurrentSecond(DateTime.FixedLocalNow())",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextHour",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一小时中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一小时中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的小时是否处于接下来的一小时内。",
            "Code": "DateTime.IsInNextHour(DateTime.FixedLocalNow() + #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextMinute",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一分钟内出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一分钟内出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的分钟是否处于接下来的一分钟内。",
            "Code": "DateTime.IsInNextMinute(DateTime.FixedLocalNow() + #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInNextSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInNextSecond",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的下一秒中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的下一秒中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间后的秒是否处于接下来的一秒内。",
            "Code": "DateTime.IsInNextSecond(DateTime.FixedLocalNow() + #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousHour",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousHour",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一小时中出现。请注意，当传递一个在当前小时内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一小时中出现。请注意，当传递一个在当前小时中出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的小时是否处于前一小时内。",
            "Code": "DateTime.IsInPreviousHour(DateTime.FixedLocalNow() - #duration(0, 1, 0, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousMinute",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousMinute",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一分钟内出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一分钟内出现。请注意，当传递一个在当前分钟内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的分钟是否处于前一分钟内。",
            "Code": "DateTime.IsInPreviousMinute(DateTime.FixedLocalNow() - #duration(0, 0, 1, 0))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.IsInPreviousSecond",
      "Documentation": {
        "Documentation.Name": "DateTime.IsInPreviousSecond",
        "Documentation.Description": "指示此日期时间是否会在系统当前日期和时间确定的上一秒中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。",
        "Documentation.LongDescription": "指示给定的日期时间值 <code>dateTime</code> 是否会在系统当前日期和时间确定的上一秒中出现。请注意，当传递一个在当前秒内出现的值时，此函数将返回 false。\r\n      <ul>\r\n      <li><code>dateTime</code>: 要计算的 <code>datetime</code> 或 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "确定当前系统时间前的秒是否处于前一秒内。",
            "Code": "DateTime.IsInPreviousSecond(DateTime.FixedLocalNow() - #duration(0, 0, 0, 1))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.Time",
      "Documentation": {
        "Documentation.Name": "DateTime.Time",
        "Documentation.Description": "返回给定日期时间值的时间部分。",
        "Documentation.LongDescription": "返回给定日期时间值 <code>dateTime</code> 的时间部分。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2010, 12, 31, 11, 56, 02) 的时间值。",
            "Code": "DateTime.Time(#datetime(2010, 12, 31, 11, 56, 02))",
            "Result": "#time(11, 56, 2)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTime.ToRecord",
        "Documentation.Description": "返回包含日期时间值的各个部分的记录。",
        "Documentation.LongDescription": "返回包含给定日期时间值 <code>dateTime</code> 的各个部分的记录。\r\n <ul>\r\n        <li><code>dateTime</code>: 要从中计算其各个部分的记录的 <code>datetime</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#datetime(2011, 12, 31, 11, 56, 2)</code> 值转换为包含日期和时间值的记录。",
            "Code": "DateTime.ToRecord(#datetime(2011, 12, 31, 11, 56, 2))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTime": "datetime"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTime.ToText",
      "Documentation": {
        "Documentation.Name": "DateTime.ToText",
        "Documentation.Description": "返回日期时间值的文本表示形式。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 的文本表示形式。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>culture</code> 仅用于旧版工作流(见下文)。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的 <code>text</code> 值。请访问 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致使用 <code>Culture</code> 定义的默认值设置日期格式。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 和 <code>culture</code> 也可以是文本值。这与 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 时的行为相同。",
        "Documentation.Category": "DateTime",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#datetime(2010, 12, 31, 01, 30, 25)</code> 转换为 <code>text</code> 值。<i>结果输出可能因当前区域性而异。</i>",
            "Code": "DateTime.ToText(#datetime(2010, 12, 31, 01, 30, 25))",
            "Result": "\"12/31/2010 1:30:25 AM\""
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "DateTime.ToText(#datetime(2010, 12, 30, 2, 4, 50.36973), [Format=\"dd MMM yyyy HH:mm:ss.ffffff\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730\""
          },
          {
            "Description": "使用 ISO 8601 模式进行转换。",
            "Code": "DateTime.ToText(#datetime(2000, 2, 8, 3, 45, 12),[Format=\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12Z\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTime": "datetime",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.From",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.From",
        "Documentation.Description": "从给定的值创建 datetimezone。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>datetimezone</code> 值。还可提供可选的 <code>culture</code> (例如 “en-US”)。\r\n如果给定的 <code>value</code> 是 <code>null</code>，则 <code>DateTimeZone.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>datetimezone</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>datetimezone</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>datetimezone</code> 值。有关详细信息，请参阅 <code>DateTimeZone.FromText</code>。</li>\r\n        <li><code>date</code>: 一个以 <code>value</code> 为日期组件，<code>午夜 12:00:00</code> 为时间组件的 <code>datetimezone</code>，其偏移量与本地时区相对应。</li>\r\n        <li><code>datetime</code>: 一个以 <code>value</code> 作为日期时间的 <code>datetimezone</code>，其偏移量与本地时区相对应。</li>\r\n        <li><code>time</code>: 一个 <code>datetimezone</code>，它具有作为日期组件的 <code>0</code> 的 OLE 自动化日期的等效日期、作为时间组件的 <code>value</code> 以及与本地时区相对应的偏移量。</li>\r\n        <li><code>number</code>: 一个 <code>datetimezone</code>，它具有由 <code>value</code> 表示的 OLE 自动化日期的等效日期时间以及与本地时区相对应的偏移量。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"2020-10-30T01:30:00-08:00\"</code> 转换为 <code>datetimezone</code> 值。",
            "Code": "DateTimeZone.From(\"2020-10-30T01:30:00-08:00\")",
            "Result": "#datetimezone(2020, 10, 30, 01, 30, 00, -8, 00)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromFileTime",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromFileTime",
        "Documentation.Description": "从 64 位长度的数字创建 datetimezone。",
        "Documentation.LongDescription": "从 <code>fileTime</code> 值创建 <code>datetimezone</code> 值并将其转换为本地时区。filetime 是一个 Windows 文件时间值，它表示自公元 1601 年 1 月 1 日协调世界时(UTC)午夜 12:00 后经过的 100 纳秒时间间隔的数目。\r\n    ",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 <code>129876402529842245</code> 转换为 datetimezone 值。",
            "Code": "DateTimeZone.FromFileTime(129876402529842245)",
            "Result": "#datetimezone(2012, 7, 24, 14, 50, 52.9842245, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "fileTime": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.FromText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.FromText",
        "Documentation.Description": "根据本地、通用和自定义 datetimezone 格式创建 datetimezone。",
        "Documentation.LongDescription": "根据文本表示形式 <code>text</code> 创建 <code>datetimezone</code> 值。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的<code>文本</code>值。要了解更多详细信息，请转到 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致尽最大努力解析日期。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 也可以是文本值。这与 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 时的行为相同。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"2010-12-31T01:30:00-08:00\"</code> 转换为 <code>datetimezone</code> 值。",
            "Code": "DateTimeZone.FromText(\"2010-12-31T01:30:00-08:00\")",
            "Result": "#datetimezone(2010, 12, 31, 1, 30, 0, -8, 0)"
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "DateTimeZone.FromText(\"30 Dez 2010 02:04:50.369730 +02:00\", [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "#datetimezone(2010, 12, 30, 2, 4, 50.36973, 2, 0)"
          },
          {
            "Description": "使用 ISO 8601 进行转换。",
            "Code": "DateTimeZone.FromText(\"2009-06-15T13:45:30.0000000-07:00\", [Format=\"O\", Culture=\"en-US\"])",
            "Result": "#datetimezone(2009, 6, 15, 13, 45, 30, -7, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.RemoveZone",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.RemoveZone",
        "Documentation.Description": "从给定 datetimezone 值中删除时区信息。",
        "Documentation.LongDescription": "从 <code>dateTimeZone</code> 返回 #datetime 值并且删除时区信息。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "从值 #datetimezone(2011, 12, 31, 9, 15, 36, -7, 0) 中删除时区信息。",
            "Code": "DateTimeZone.RemoveZone(#datetimezone(2011, 12, 31, 9, 15, 36, -7, 0))",
            "Result": "#datetime(2011, 12, 31, 9, 15, 36)"
          }
        ]
      },
      "ReturnType": "datetime",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToLocal",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToLocal",
        "Documentation.Description": "将时区部分转换为本地时区。",
        "Documentation.LongDescription": "将 datetimezone 值 <code>dateTimeZone</code> 的时区信息更改为本地时区信息。\r\n    如果 <code>dateTimeZone</code> 不具有时区部分，则添加本地时区信息。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将针对 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的时区信息更改为本地时区(假定 PST)。",
            "Code": "DateTimeZone.ToLocal(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 12, 26, 2, -8, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToRecord",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToRecord",
        "Documentation.Description": "返回包含 datetimezone 值的各个部分的记录。",
        "Documentation.LongDescription": "返回包含给定 datetimezone 值 <code>dateTimeZone</code> 的各个部分的记录。\r\n <ul>\r\n        <li><code>dateTimeZone</code>: 要从中计算其各个部分的记录的 <code>datetimezone</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0)</code> 值转换为包含日期、时间和时区值的记录。",
            "Code": "DateTimeZone.ToRecord(#datetimezone(2011, 12, 31, 11, 56, 2, 8, 0))",
            "Result": "[\r\n      Year = 2011,\r\n      Month = 12,\r\n      Day = 31,\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2,\r\n      ZoneHours = 8,\r\n      ZoneMinutes = 0\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToText",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToText",
        "Documentation.Description": "返回 datetimezone 值的文本表示形式。",
        "Documentation.LongDescription": "返回 <code>dateTimeZone</code> 的文本表示形式。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>culture</code> 仅用于旧版工作流(见下文)。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的 <code>text</code> 值。请访问 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致使用 <code>Culture</code> 定义的默认值设置日期格式。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"MMM\"</code> 是 <code>\"Jan\"、\"Feb\"、\"Mar\" 等</code>，而在 <code>\"ru-RU\"</code> 中，<code>\"MMM\"</code> 是 <code>\"янв\"、\"фев\"、\"мар\" 等</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 和 <code>culture</code> 也可以是文本值。这与 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 时的行为相同。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0)</code> 转换为 <code>text</code> 值。<i>结果输出可能因当前区域性而异。</i>",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 31, 01, 30, 25, 2, 0))",
            "Result": "\"12/31/2010 1:30:25 AM +02:00\""
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "DateTimeZone.ToText(#datetimezone(2010, 12, 30, 2, 4, 50.36973, -8,0), [Format=\"dd MMM yyyy HH:mm:ss.ffffff zzz\", Culture=\"de-DE\"])",
            "Result": "\"30 Dez 2010 02:04:50.369730 -08:00\""
          },
          {
            "Description": "使用 ISO 8601 模式进行转换。",
            "Code": "DateTimeZone.ToText(#datetimezone(2000, 2, 8, 3, 45, 12, 2, 0),[Format=\"O\", Culture=\"en-US\"])",
            "Result": "\"2000-02-08T03:45:12.0000000+02:00\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "dateTimeZone": "datetimezone",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ToUtc",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ToUtc",
        "Documentation.Description": "将时区部分转换为 UTC 时区。",
        "Documentation.LongDescription": "将日期时间值 <code>dateTimeZone</code> 的时区信息更改为 UTC 或通用协调时间时区信息。\r\n    如果 <code>dateTimeZone</code> 不具有时区部分，则添加 UTC 时区信息。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": [
          {
            "Description": "将 #datetimezone(2010, 12, 31, 11, 56, 02, 7, 30) 的时区信息更改为 UTC 时区。",
            "Code": "DateTimeZone.ToUtc(#datetimezone(2010, 12, 31, 11, 56, 02, 7, 30))",
            "Result": "#datetimezone(2010, 12, 31, 4, 26, 2, 0, 0)"
          }
        ]
      },
      "ReturnType": "datetimezone",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneHours",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneHours",
        "Documentation.Description": "更改此值的时区。",
        "Documentation.LongDescription": "更改此值的时区。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DateTimeZone.ZoneMinutes",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.ZoneMinutes",
        "Documentation.Description": "更改此值的时区。",
        "Documentation.LongDescription": "更改此值的时区。",
        "Documentation.Category": "DateTimeZone",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTimeZone": "datetimezone"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Decimal.From",
      "Documentation": {
        "Documentation.Name": "Decimal.From",
        "Documentation.Description": "从给定的值创建 Decimal。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回十进制 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Decimal.From</code> 返回 <code> null</code>。如果给定的 <code>value</code> 是在十进制范围内的 <code>number</code>，则返回 <code>value</code>，否则返回错误。如果 <code>value</code> 属于任何其他类型，则将首先使用 <code>Number.FromText</code> 将其转换为<code>number</code>。还可以提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4.5\"</code> 的十进制 <code>number</code> 值。",
            "Code": "Decimal.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "DeltaLake.Table",
      "Documentation": {
        "Documentation.Name": "DeltaLake.Table",
        "Documentation.Description": "返回 Delta Lake 表的内容。",
        "Documentation.LongDescription": "返回 Delta Lake 表的内容。",
        "Documentation.Category": "访问数据",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "directory": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Double.From",
      "Documentation": {
        "Documentation.Name": "Double.From",
        "Documentation.Description": "从给定的值创建 Double。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回双精度 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Double.From</code> 将返回 <code> null</code>。如果给定的 <code>value</code> 为双精度范围内的 <code>number</code>，则返回 <code>value</code>，否则返回错误。如果 <code>value</code> 属于任何其他类型，则将首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。还可以提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 Double <code>number</code> 值。",
            "Code": "Double.From(\"4.5\")",
            "Result": "4.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Days",
      "Documentation": {
        "Documentation.Name": "Duration.Days",
        "Documentation.Description": "返回持续时间的天数部分。",
        "Documentation.LongDescription": "返回 <code>duration</code> 的天数部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "提取两个日期之间的天数。",
            "Code": "Duration.Days(#date(2022, 3, 4) - #date(2022, 2, 25))",
            "Result": "7"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.From",
      "Documentation": {
        "Documentation.Name": "Duration.From",
        "Documentation.Description": "从给定的值创建持续时间。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>duration</code> 值。如果给定的 <code>value</code> 是 <code>null</code>，<code>Duration.From</code> 将返回 <code>null</code>。 如果给定的 <code>value</code> 是 <code>duration</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>duration</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 来自文本形式的占用时间格式(d.h:m:s)的 <code>duration</code> 值。有关详细信息，请参阅 <code>Duration.FromText</code>。</li>\r\n        <li><code>number</code>: 与由 <code>value</code> 表示的整数天数和不完整天数等效的 <code>duration</code>。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "将 <code>2.525</code> 转换为 <code>duration</code> 值。",
            "Code": "Duration.From(2.525)",
            "Result": "#duration(2, 12, 36, 0)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.FromText",
      "Documentation": {
        "Documentation.Name": "Duration.FromText",
        "Documentation.Description": "从文本形式的占用时间格式(d.h:m:s)返回持续时间值。",
        "Documentation.LongDescription": "从指定文本 <code>text</code> 返回持续时间值。此函数可分析以下格式:\r\n <ul>\r\n        <li>(-)hh:mm(:ss(.ff)) </li>\r\n        <li>(-)ddd(.hh:mm(:ss(.ff))) </li>\r\n </ul>\r\n        <br>\r\n        (包括所有范围)<br>\r\n        ddd: 天数。<br>\r\n        hh: 小时数，介于 0 到 23 之间。<br>\r\n        mm: 分钟数，介于 0 到 59 之间。<br>\r\n        ss: 秒数，介于 0 到 59 之间。<br>\r\n        ff: 秒的小数部分，介于 0 到 9999999 之间。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"2.05:55:20\"</code> 转换为 <code>duration</code> 值。",
            "Code": "Duration.FromText(\"2.05:55:20\")",
            "Result": "#duration(2, 5, 55, 20)"
          }
        ]
      },
      "ReturnType": "duration",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Hours",
      "Documentation": {
        "Documentation.Name": "Duration.Hours",
        "Documentation.Description": "返回持续时间的小时数部分。",
        "Documentation.LongDescription": "返回 <code>duration</code> 的小时数部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "从持续时间值中提取小时数。",
            "Code": "Duration.Hours(#duration(5, 4, 3, 2))",
            "Result": "4"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Minutes",
      "Documentation": {
        "Documentation.Name": "Duration.Minutes",
        "Documentation.Description": "返回持续时间的分钟数部分。",
        "Documentation.LongDescription": "返回 <code>duration</code> 的分钟数部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "从持续时间值中提取分钟数。",
            "Code": "Duration.Minutes(#duration(5, 4, 3, 2))",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.Seconds",
      "Documentation": {
        "Documentation.Name": "Duration.Seconds",
        "Documentation.Description": "返回持续时间的秒数部分。",
        "Documentation.LongDescription": "返回 <code>duration</code> 的秒数部分。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "从持续时间值中提取秒数。",
            "Code": "Duration.Seconds(#duration(5, 4, 3, 2))",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToRecord",
      "Documentation": {
        "Documentation.Name": "Duration.ToRecord",
        "Documentation.Description": "返回包含持续时间的各个部分的记录。",
        "Documentation.LongDescription": "返回包含 duration 值 <code>duration</code> 的各个部分的记录。\r\n  <ul>\r\n        <li><code>duration</code>: 从中创建记录的 <code>duration</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#duration(2, 5, 55, 20)</code> 转换为包括天、小时、分钟和秒这些部分的记录(如果适用)。",
            "Code": "Duration.ToRecord(#duration(2, 5, 55, 20))",
            "Result": "[\r\n    Days = 2,\r\n    Hours = 5,\r\n    Minutes = 55,\r\n    Seconds = 20\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.ToText",
      "Documentation": {
        "Documentation.Name": "Duration.ToText",
        "Documentation.Description": "返回采用 \"d.h:m:s\" 格式的文本。",
        "Documentation.LongDescription": "返回给定持续时间值 <code>duration</code> 的 \"day.hour:mins:sec\" 格式文本表示形式。\r\n <ul>\r\n        <li><code>duration</code>:计算文本表示形式所依据的 <code>duration</code>。</li>\r\n  <li><code>format</code>:<i>[可选]</i>已弃用，如果不为 null，将抛出错误</li>\r\n      </ul>",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#duration(2, 5, 55, 20)</code> 转换为文本值。",
            "Code": "Duration.ToText(#duration(2, 5, 55, 20))",
            "Result": "\"2.05:55:20\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "duration": "duration",
        "format": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalDays",
      "Documentation": {
        "Documentation.Name": "Duration.TotalDays",
        "Documentation.Description": "返回此持续时间跨越的总天数。",
        "Documentation.LongDescription": "返回 <code>duration</code> 跨越的总天数。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "查找持续时间值跨越的总天数。",
            "Code": "Duration.TotalDays(#duration(5, 4, 3, 2))",
            "Result": "5.1687731481481478"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalHours",
      "Documentation": {
        "Documentation.Name": "Duration.TotalHours",
        "Documentation.Description": "返回此持续时间跨越的总小时数。",
        "Documentation.LongDescription": "返回 <code>duration</code> 跨越的总小时数。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "查找持续时间值跨越的总小时数。",
            "Code": "Duration.TotalHours(#duration(5, 4, 3, 2))",
            "Result": "124.05055555555555"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalMinutes",
      "Documentation": {
        "Documentation.Name": "Duration.TotalMinutes",
        "Documentation.Description": "返回此持续时间跨越的总分钟数。",
        "Documentation.LongDescription": "返回 <code>duration</code> 跨越的总分钟数。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "查找持续时间值跨越的总分钟数。",
            "Code": "Duration.TotalMinutes(#duration(5, 4, 3, 2))",
            "Result": "7443.0333333333338"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Duration.TotalSeconds",
      "Documentation": {
        "Documentation.Name": "Duration.TotalSeconds",
        "Documentation.Description": "返回此持续时间跨越的总秒数。",
        "Documentation.LongDescription": "返回 <code>duration</code> 跨越的总秒数。",
        "Documentation.Category": "Duration",
        "Documentation.Examples": [
          {
            "Description": "查找持续时间值跨越的总秒数。",
            "Code": "Duration.TotalSeconds(#duration(5, 4, 3, 2))",
            "Result": "446582"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "duration": "duration"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Emigo.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "EmigoDataSourceConnector.GetExtractFunction",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "ExtractName": "text",
        "DataRestrictionType": "text",
        "DataRestrictionValue": "text",
        "DataRestrictionMode": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Error.Record",
      "Documentation": {
        "Documentation.Name": "Error.Record",
        "Documentation.Description": "从为原因、消息和详细信息提供的文本值返回错误记录。",
        "Documentation.LongDescription": "从为原因、消息和详细信息提供的文本值返回错误记录。",
        "Documentation.Category": "Error",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "reason": "text",
        "message": "text",
        "detail": "any",
        "parameters": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Excel.ShapeTable",
      "Documentation": {
        "Documentation.Name": "Excel.ShapeTable",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Constant",
      "Documentation": {
        "Documentation.Name": "Expression.Constant",
        "Documentation.Description": "返回常数值的 M 源代码表示形式。",
        "Documentation.LongDescription": "返回常数值的 M 源代码表示形式。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "获取数字值的 M 源代码表示形式。",
            "Code": "Expression.Constant(123)",
            "Result": "\"123\""
          },
          {
            "Description": "获取日期值的 M 源代码表示形式。",
            "Code": "Expression.Constant(#date(2035, 01, 02))",
            "Result": "\"#date(2035, 1, 2)\""
          },
          {
            "Description": "获取文本值的 M 源代码表示形式。",
            "Code": "Expression.Constant(\"abc\")",
            "Result": "\"\"\"abc\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Evaluate",
      "Documentation": {
        "Documentation.Name": "Expression.Evaluate",
        "Documentation.Description": "返回 M 表达式的计算结果。",
        "Documentation.LongDescription": "返回 M 表达式 <code>document</code> 的计算结果，其中可用的标识符可以由 <code>environment</code> 进行引用和定义。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "计算简单求和。",
            "Code": "Expression.Evaluate(\"1 + 1\")",
            "Result": "2"
          },
          {
            "Description": "计算更复杂的求和。",
            "Code": "Expression.Evaluate(\"List.Sum({1, 2, 3})\", [List.Sum = List.Sum])",
            "Result": "6"
          },
          {
            "Description": "计算含标识符的文本值的串联。",
            "Code": "Expression.Evaluate(Expression.Constant(\"\"\"abc\") & \" & \" & Expression.Identifier(\"x\"), [x = \"def\"\"\"])",
            "Result": "\"\"\"abcdef\"\"\""
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "document": "text",
        "environment": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Expression.Identifier",
      "Documentation": {
        "Documentation.Name": "Expression.Identifier",
        "Documentation.Description": "返回标识符的 M 源代码表示形式。",
        "Documentation.LongDescription": "返回标识符 <code>name</code> 的 M 源代码表示形式。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": [
          {
            "Description": "获取标识符的 M 源代码表示形式。",
            "Code": "Expression.Identifier(\"MyIdentifier\")",
            "Result": "\"MyIdentifier\""
          },
          {
            "Description": "获取包含空格的标识符的 M 源代码表示形式。",
            "Code": "Expression.Identifier(\"My Identifier\")",
            "Result": "\"#\"\"My Identifier\"\"\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "name": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "File.Contents",
      "Documentation": {
        "Documentation.Name": "File.Contents",
        "Documentation.Description": "以二进制形式返回指定文件的内容。",
        "Documentation.LongDescription": "以二进制形式返回文件的内容 <code>path</code>。<code>options</code> 参数当前仅供内部使用。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "path": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Function.IsDataSource",
      "Documentation": {
        "Documentation.Name": "Function.IsDataSource",
        "Documentation.Description": "返回是否将一个特定的函数视为数据源。",
        "Documentation.LongDescription": "返回是否将 <code>function</code> 视为数据源。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "logical",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.FromWellKnownText",
        "Documentation.Description": "将 Well-Known Text (WKT)格式的表示地理值的文本转换为结构化记录。",
        "Documentation.LongDescription": "将 Well-Known Text (WKT)格式的表示地理值的文本转换为结构化记录。WKT 是开放地理空间信息联盟(OGC)定义的一种标准格式，也是 SQL Server 等数据库使用的典型序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geography.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geography.ToWellKnownText",
        "Documentation.Description": "将结构化地理点值转换为其 Well-Known Text (WKT)表示形式。",
        "Documentation.LongDescription": "将结构化地理点值转换为开放地理空间信息联盟(OGC)定义的 Well-Known Text (WKT)表示形式，该形式也是 SQL Server 等很多数据库使用的序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.FromWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.FromWellKnownText",
        "Documentation.Description": "将 Well-Known Text (WKT)格式的表示几何值的文本转换为结构化记录。",
        "Documentation.LongDescription": "将 Well-Known Text (WKT)格式的表示几何值的文本转换为结构化记录。WKT 是开放地理空间信息联盟(OGC)定义的一种标准格式，也是 SQL Server 等数据库使用的典型序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "input": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Geometry.ToWellKnownText",
      "Documentation": {
        "Documentation.Name": "Geometry.ToWellKnownText",
        "Documentation.Description": "将结构化几何点值转换为其 Well-Known Text (WKT)表示形式。",
        "Documentation.LongDescription": "将结构化几何点值转换为开放地理空间信息联盟(OGC)定义的 Well-Known Text (WKT)表示形式，该形式也是 SQL Server 等很多数据库使用的序列化格式。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "input": "record",
        "omitSRID": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Github.PagedTable",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Graph.Nodes",
      "Documentation": {
        "Documentation.Name": "Graph.Nodes",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "graph": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Guid.From",
      "Documentation": {
        "Documentation.Name": "Guid.From",
        "Documentation.Description": "返回给定值的 guid 值。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>Guid.Type</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Guid.From</code> 返回 <code>null</code>。将执行检查以确定给定的 <code>value</code> 是否采用了可接受的格式。示例中提供了可接受的格式。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "可以将 Guid 提供为 32 个连续的十六进制数字。",
            "Code": "Guid.From(\"05FE1DADC8C24F3BA4C2D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "可以将 Guid 提供为 32 个由连字符分隔成 8-4-4-4-12 块的十六进制数字。",
            "Code": "Guid.From(\"05FE1DAD-C8C2-4F3B-A4C2-D194116B4967\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "可以将 Guid 提供为 32 个由连字符分隔且括在大括号中的十六进制数字。",
            "Code": "Guid.From(\"{05FE1DAD-C8C2-4F3B-A4C2-D194116B4967}\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          },
          {
            "Description": "可以将 Guid 提供为 32 个由连字符分隔且括在括号中的十六进制数字。",
            "Code": "Guid.From(\"(05FE1DAD-C8C2-4F3B-A4C2-D194116B4967)\")",
            "Result": "\"05fe1dad-c8c2-4f3b-a4c2-d194116b4967\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "HexagonSmartApi.GetODataMetadata",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "Uri.Type",
        "includeAnnotations": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int16.From",
      "Documentation": {
        "Documentation.Name": "Int16.From",
        "Documentation.Description": "从给定的值创建 16 位整数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回 16 位整数 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Int16.From</code> 返回 <code>null</code>。如果给定的 <code>value</code> 是不带小数部分的 16 位整数范围内的 <code>number</code>，则返回 <code>value</code>。如果带有小数部分，则按指定舍入模式舍入该数字。默认舍入模式为 <code>RoundingMode.ToEven</code>。如果 <code>value</code> 属于任何类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。还可能提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 16 位整数 <code>number</code> 值。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 获取 <code>\"4.5\"</code> 的 16 位整数 <code>number</code> 值。",
            "Code": "Int16.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int32.From",
      "Documentation": {
        "Documentation.Name": "Int32.From",
        "Documentation.Description": "从给定的值创建 32 位整数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回 32 位整数 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Int32.From</code> 返回 <code>null</code>。如果给定的 <code>value</code> 是不带小数部分的 32 位整数范围内的 <code>number</code>，则返回 <code>value</code>。如果带有小数部分，则按指定舍入模式舍入该数字。默认舍入模式为 <code>RoundingMode.ToEven</code>。如果 <code>value</code> 属于任何类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。还可能提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 32 位整数 <code>number</code> 值。",
            "Code": "Int32.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 获取 <code>\"4.5\"</code> 的 32 位整数 <code>number</code> 值。",
            "Code": "Int32.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int64.From",
      "Documentation": {
        "Documentation.Name": "Int64.From",
        "Documentation.Description": "根据给定值创建 64 位整数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回 64 位整数 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Int64.From</code> 返回 <code>null</code>。如果给定的 <code>value</code> 是不带小数部分的 64 位整数范围内的 <code>number</code>，则返回 <code>value</code>。如果带有小数部分，则按指定舍入模式舍入该数字。默认舍入模式为 <code>RoundingMode.ToEven</code>。如果 <code>value</code> 属于任何类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。还可能提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 64 位整数的<code>number</code> 值 <code>\"4\"</code>。",
            "Code": "Int64.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 获取 <code>\"4.5\"</code> 的 64 位整数 <code>number</code> 值。",
            "Code": "Int64.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Int8.From",
      "Documentation": {
        "Documentation.Name": "Int8.From",
        "Documentation.Description": "从给定的值创建 8 位有符号整数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 中返回一个有符号的 8 位整数 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Int8.From</code> 返回 <code>null</code>。如果给定的 <code>value</code> 是不带小数部分的有符号 8 位整数范围内的 <code>number</code>，则返回 <code>value</code>。如果带有小数部分，则按指定舍入模式舍入该数字。默认舍入模式为 <code>RoundingMode.ToEven</code>。如果 <code>value</code> 属于任何类型，则首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。要了解可用的舍入模式，请参阅 <code>Number.Round</code>。还可能提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 8 位有符号整数 <code>number</code> 值。",
            "Code": "Int8.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "使用 <code>RoundingMode.AwayFromZero</code> 获取 <code>\"4.5\"</code> 的 8 位有符号整数 <code>number</code> 值。",
            "Code": "Int8.From(\"4.5\", null, RoundingMode.AwayFromZero)",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ItemExpression.From",
      "Documentation": {
        "Documentation.Name": "ItemExpression.From",
        "Documentation.Description": "返回函数主体的抽象语法树(AST)。",
        "Documentation.LongDescription": "<p>返回 <code>function</code> 主体的抽象语法树(AST)，规范化为项表达式<i></i>:\r\n<ul>\r\n  <li>函数必须为单参数 lambda。</li>\r\n  <li>对函数参数的所有引用已替换为 <code>ItemExpression.Item</code>。</li>\r\n  <li>AST 将简化为仅包含以下种类的节点:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>如果无法返回 <code>function</code> 的主体的项表达式 AST，会出现错误。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "返回函数 <code>each _ <> null</code> 主体的 AST",
            "Code": "ItemExpression.From(each _ <> null)",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"NotEquals\",\r\n    Left = ItemExpression.Item,\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = null\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "JamfPro.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "URL": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.Document",
      "Documentation": {
        "Documentation.Name": "Json.Document",
        "Documentation.Description": "返回 JSON 文档的内容。",
        "Documentation.LongDescription": "返回 JSON 文档的内容。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "jsonText": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Json.FromValue",
      "Documentation": {
        "Documentation.Name": "Json.FromValue",
        "Documentation.Description": "生成给定值的 JSON 表示形式。",
        "Documentation.LongDescription": "<p>使用由 <code>encoding</code> 指定的文本编码生成给定值 <code>value</code> 的 JSON 表示形式。如果省略 <code>encoding</code>，则使用 UTF8。值的表示形式如下:</p>\r\n <ul>\r\n        <li>Null、文本和逻辑值表示为相应的 JSON 类型</li>\r\n        <li>数字表示为 JSON 形式的数字，除非 <code>#infinity</code>、<code>-#infinity</code> 和 <code>#nan</code> 均转换为 null</li>\r\n        <li>列表表示为 JSON 阵列</li>\r\n        <li>记录表示为 JSON 对象</li>\r\n        <li>表表示为对象的阵列</li>\r\n        <li>日期、时间、日期时间、日期时间时区和持续时间表示为 ISO-8601 文本</li>\r\n        <li>二进制值表示为 Base64 编码文本</li>\r\n        <li>类型和函数将生成错误</li>\r\n </ul>\r\n    ",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "将复杂值转换为 JSON。",
            "Code": "Text.FromBinary(Json.FromValue([A = {1, true, \"3\"}, B = #date(2012, 3, 25)]))",
            "Result": "\"{\"\"A\"\":[1,true,\"\"3\"\"],\"\"B\"\":\"\"2012-03-25\"\"}\""
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "value": "any",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Kusto.Databases",
      "Documentation": {},
      "ReturnType": "list",
      "Parameters": {
        "cluster": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromBinary",
      "Documentation": {
        "Documentation.Name": "Lines.FromBinary",
        "Documentation.Description": "将二进制值转换成在换行符处拆分的文本值列表。如果指定的是引用样式，则引号内可能会出现换行符。如果 includeLineSeparators 为 true，则文本中可能会出现换行符。",
        "Documentation.LongDescription": "将二进制值转换成在换行符处拆分的文本值列表。如果指定的是引用样式，则引号内可能会出现换行符。如果 includeLineSeparators 为 true，则文本中可能会出现换行符。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "binary": "binary",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.FromText",
      "Documentation": {
        "Documentation.Name": "Lines.FromText",
        "Documentation.Description": "将文本值转换为在换行符处拆分的文本值列表。如果 includeLineSeparators 为 true，则文本中将包括换行符。",
        "Documentation.LongDescription": "将文本值转换为在换行符处拆分的文本值列表。如果 includeLineSeparators 为 true，则文本中将包括换行符。\r\n        <div>\r\n          <ul>\r\n            <li><code>QuoteStyle.None:</code> (默认值)无需任何加引号行为。</li>\r\n            <li><code>QuoteStyle.Csv:</code> 如何加引号按 CSV 的要求进行。使用一个双引号字符来界定这些区域，使用一对双引号来表示此区域中的单个双引号字符。</li>\r\n          </ul>\r\n        </div>\r\n    ",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text",
        "quoteStyle": "QuoteStyle.Type",
        "includeLineSeparators": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToBinary",
      "Documentation": {
        "Documentation.Name": "Lines.ToBinary",
        "Documentation.Description": "使用指定的编码和 lineSeparator 将文本列表转换为二进制值。指定的 lineSeparator 追加到每行之后。 如果未指定，则使用回车和换行符。",
        "Documentation.LongDescription": "使用指定的编码和 lineSeparator 将文本列表转换为二进制值。指定的 lineSeparator 追加到每行之后。 如果未指定，则使用回车和换行符。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Lines.ToText",
      "Documentation": {
        "Documentation.Name": "Lines.ToText",
        "Documentation.Description": "将文本列表转换为单个文本。 指定的 lineSeparator 追加到每行之后。 如果未指定，则使用回车和换行符。",
        "Documentation.LongDescription": "将文本列表转换为单个文本。 指定的 lineSeparator 追加到每行之后。 如果未指定，则使用回车和换行符。",
        "Documentation.Category": "Lines",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "lines": "list",
        "lineSeparator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AllTrue",
      "Documentation": {
        "Documentation.Name": "List.AllTrue",
        "Documentation.Description": "如果所有表达式均为 true，则返回 true。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中的所有表达式均为 true，则返回 true。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "确定列表 {true, true, 2 > 0} 中的所有表达式是否均为 true。",
            "Code": "List.AllTrue({true, true, 2 > 0})",
            "Result": "true"
          },
          {
            "Description": "确定列表 {true, true, 2 < 0} 中的所有表达式是否均为 true。",
            "Code": "List.AllTrue({true, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.AnyTrue",
      "Documentation": {
        "Documentation.Name": "List.AnyTrue",
        "Documentation.Description": "如果任意表达式为 true，则返回 true。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中的任意表达式为 true，则返回 true。",
        "Documentation.Category": "List.Membership functions",
        "Documentation.Examples": [
          {
            "Description": "确定列表 {true, false, 2 > 0} 中的任意表达式是否为 true。",
            "Code": "List.AnyTrue({true, false, 2>0})",
            "Result": "true"
          },
          {
            "Description": "确定列表 {2 = 0, false, 2 < 0} 中的任意表达式是否为 true。",
            "Code": "List.AnyTrue({2 = 0, false, 2 < 0})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Average",
      "Documentation": {
        "Documentation.Name": "List.Average",
        "Documentation.Description": "返回值的平均值。处理 number、date、datetime、datetimezone 和 duration 值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中项的平均值。采用与列表中的值所属的同一数据类型给出结果。仅处理 number、date、time、datetime、datetimezone 和 duration 值。\r\n    如果列表为空，则返回 null。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "计算数的列表 <code>{3, 4, 6}</code> 的平均值。",
            "Code": "List.Average({3, 4, 6})",
            "Result": "4.333333333333333"
          },
          {
            "Description": "计算 date 值 2011 年 1 月 1 日、2011 年 1 月 2 日和 2011 年 1 月 3 日的平均值。",
            "Code": "List.Average({#date(2011, 1, 1), #date(2011, 1, 2), #date(2011, 1, 3)})",
            "Result": "#date(2011, 1, 2)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Buffer",
      "Documentation": {
        "Documentation.Name": "List.Buffer",
        "Documentation.Description": "缓冲列表。",
        "Documentation.LongDescription": "在内存中缓冲列表 <code>list</code>。此调用的结果是一个稳定的列表。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "创建列表 {1..10} 的稳定副本。",
            "Code": "List.Buffer({1..10})",
            "Result": "{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Combine",
      "Documentation": {
        "Documentation.Name": "List.Combine",
        "Documentation.Description": "通过合并多个列表来返回一个列表。",
        "Documentation.LongDescription": "提取列表的列表 <code>lists</code> 并将它们合并为一个新列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "合并两个简单的列表 {1, 2} 和 {3, 4}。",
            "Code": "List.Combine({{1, 2}, {3, 4}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n}"
          },
          {
            "Description": "合并两个列表 {1, 2} 和 {3, {4, 5}}，其中一个包含嵌套的列表。",
            "Code": "List.Combine({{1, 2}, {3, {4, 5}}})",
            "Result": "{\r\n    1,\r\n    2,\r\n    3,\r\n    {4, 5}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Count",
      "Documentation": {
        "Documentation.Name": "List.Count",
        "Documentation.Description": "返回列表中的项数。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的项数。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {1, 2, 3} 中的值数。",
            "Code": "List.Count({1, 2, 3})",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Distinct",
      "Documentation": {
        "Documentation.Name": "List.Distinct",
        "Documentation.Description": "返回删除了重复项的值列表。",
        "Documentation.LongDescription": "返回包含列表 <code>list</code> 中的所有值且删除了重复项的列表。如果列表为空，则结果为空列表。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "从列表 {1, 1, 2, 3, 3, 3} 中删除重复的项。",
            "Code": "List.Distinct({1, 1, 2, 3, 3, 3})",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.First",
      "Documentation": {
        "Documentation.Name": "List.First",
        "Documentation.Description": "返回列表的第一个值；如果为空，则返回指定的默认值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的第一个项；如果列表为空，则返回可选的默认值 <code>defaultValue</code>。\r\n    如果列表为空且未指定默认值，函数将返回 <code>null</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3} 中的第一个值。",
            "Code": "List.First({1, 2, 3})",
            "Result": "1"
          },
          {
            "Description": "查找列表 {} 中的第一个值。如果列表为空，则返回 -1。",
            "Code": "List.First({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Intersect",
      "Documentation": {
        "Documentation.Name": "List.Intersect",
        "Documentation.Description": "返回在输入中找到的列表值的交集。",
        "Documentation.LongDescription": "返回在输入列表 <code>lists</code> 中找到的列表值的交集。可以指定可选参数 <code>equationCriteria</code>。",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1..5}、{2..6}、{3..7} 的交集。",
            "Code": "List.Intersect({{1..5}, {2..6}, {3..7}})",
            "Result": "{3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsDistinct",
      "Documentation": {
        "Documentation.Name": "List.IsDistinct",
        "Documentation.Description": "指示列表中是否有重复值。",
        "Documentation.LongDescription": "返回一个指示列表 <code>list</code> 中是否有重复值的逻辑值；如果列表没有重复值，则为 <code>true</code>，否则为 <code>false</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {1, 2, 3} 是否具有独特性(即 没有重复值)。",
            "Code": "List.IsDistinct({1, 2, 3})",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2, 3, 3} 是否具有独特性(即 没有重复值)。",
            "Code": "List.IsDistinct({1, 2, 3, 3})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.IsEmpty",
      "Documentation": {
        "Documentation.Name": "List.IsEmpty",
        "Documentation.Description": "如果列表为空，则返回 true。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 不包含值(长度为 0)，则返回 <code>true</code>。如果列表包含值(长度 > 0)，则返回 <code>false</code>。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": [
          {
            "Description": "查看列表 {} 是否为空。",
            "Code": "List.IsEmpty({})",
            "Result": "true"
          },
          {
            "Description": "查看列表 {1, 2} 是否为空。",
            "Code": "List.IsEmpty({1, 2})",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Last",
      "Documentation": {
        "Documentation.Name": "List.Last",
        "Documentation.Description": "返回列表的最后一个值；如果为空，则返回指定的默认值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的最后一项；如果列表为空，则返回可选的默认值 <code>defaultValue</code>。\r\n    如果列表为空且未指定默认值，函数将返回 <code>null</code>。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3} 中的最后一个值。",
            "Code": "List.Last({1, 2, 3})",
            "Result": "3"
          },
          {
            "Description": "查找列表 {} 中的最后一个值，如果列表为空，则返回 -1。",
            "Code": "List.Last({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "defaultValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.LastN",
      "Documentation": {
        "Documentation.Name": "List.LastN",
        "Documentation.Description": "返回列表中的最后一个值。 (可选)可以指定要返回的值数或限定条件。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 的最后一项。如果列表为空，将引发异常。\r\n 此函数采用一个可选参数 <code>countOrCondition</code> 来支持收集多个项或筛选项。可以通过以下三种方式指定 <code>countOrCondition</code>:\r\n <ul>\r\n  <li>如果指定一个数，则最多返回这么多项。</li>\r\n  <li>如果指定一个条件，则返回最初满足该条件的所有项，从列表末尾开始。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n  <li>如果此参数为 null，则返回列表中的最后一项。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {3, 4, 5, -1, 7, 8, 2} 中的最后一个值。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, 1)",
            "Result": "{2}"
          },
          {
            "Description": "查找列表 {3, 4, 5, -1, 7, 8, 2} 中大于 0 的最后一个值。",
            "Code": "List.LastN({3, 4, 5, -1, 7, 8, 2}, each _ > 0)",
            "Result": "{7, 8, 2}"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Max",
      "Documentation": {
        "Documentation.Name": "List.Max",
        "Documentation.Description": "返回最大值，对于空列表则返回默认值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的最大项；如果列表为空，则返回可选的默认值 <code>default</code>。\r\n    可以指定可选的 comparisonCriteria 值 <code>comparisonCriteria</code> 来确定如何在列表中比较项。如果此参数为 null，将使用默认比较器。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "在列表 {1, 4, 7, 3, -2, 5} 中查找最大值。",
            "Code": "List.Max({1, 4, 7, 3, -2, 5}, 1)",
            "Result": "7"
          },
          {
            "Description": "查找列表 {} 中的最大值，如果列表为空，则返回 -1。",
            "Code": "List.Max({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Median",
      "Documentation": {
        "Documentation.Name": "List.Median",
        "Documentation.Description": "返回列表中的中位数值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 的中位数项。如果列表包含非 <code>null</code> 值，则此函数返回 <code>null</code>。\r\n    如果具有偶数项，则函数选择两个中位数项中的较小者，除非列表\r\n    完全由日期时间、持续时间、数字或时间组成，在这种情况下，函数返回两个项的平均值。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找列表 <code>{5, 3, 1, 7, 9}</code> 的中位数。",
            "Code": "List.Median({5, 3, 1, 7, 9})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Min",
      "Documentation": {
        "Documentation.Name": "List.Min",
        "Documentation.Description": "返回最小值，对于空列表则返回默认值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的最小项；如果列表为空，则返回可选的默认值 <code>default</code>。\r\n    可以指定可选的 comparisonCriteria 值 <code>comparisonCriteria</code> 来确定如何在列表中比较项。如果此参数为 null，将使用默认比较器。",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 4, 7, 3, -2, 5} 中的最小值。",
            "Code": "List.Min({1, 4, 7, 3, -2, 5})",
            "Result": "-2"
          },
          {
            "Description": "查找列表 {} 中的最小值，如果列表为空，则返回 -1。",
            "Code": "List.Min({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any",
        "comparisonCriteria": "any",
        "includeNulls": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Mode",
      "Documentation": {
        "Documentation.Name": "List.Mode",
        "Documentation.Description": "返回列表中出现最多的值。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中出现最多的项。如果列表为空，将引发异常。如果出现最多的项有多个，则选择其中的最后一项。\r\n    可以指定可选的 <code>comparisonCriteria</code> 值 <code>equationCriteria</code> 来控制相等测试。 ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "查找列表 <code>{\"A\", 1, 2, 3, 3, 4, 5}</code> 中出现最多的项。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5})",
            "Result": "3"
          },
          {
            "Description": "查找列表 <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 中出现最多的项。",
            "Code": "List.Mode({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "5"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Modes",
      "Documentation": {
        "Documentation.Name": "List.Modes",
        "Documentation.Description": "返回列表中出现最多的值的列表。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中出现最多的项。如果列表为空，将引发异常。如果出现最多的项有多个，则选择其中的最后一项。\r\n    可以指定可选的 <code>comparisonCriteria</code> 值 <code>equationCriteria</code> 来控制相等测试。 ",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "查找列表 <code>{\"A\", 1, 2, 3, 3, 4, 5, 5}</code> 中出现最多的项。",
            "Code": "List.Modes({\"A\", 1, 2, 3, 3, 4, 5, 5})",
            "Result": "{3, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.NonNullCount",
      "Documentation": {
        "Documentation.Name": "List.NonNullCount",
        "Documentation.Description": "返回列表中的非 null 项数。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中的非 null 项数。",
        "Documentation.Category": "List.Information",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Positions",
      "Documentation": {
        "Documentation.Name": "List.Positions",
        "Documentation.Description": "返回输入的偏移量列表。",
        "Documentation.LongDescription": "返回输入列表 <code>list</code> 的偏移量列表。\r\n    使用 List.Transform 更改列表时，可以使用位置列表来授予对位置的转换权限。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找列表 {1, 2, 3, 4, null, 5} 中值的偏移量。",
            "Code": "List.Positions({1, 2, 3, 4, null, 5})",
            "Result": "{0, 1, 2, 3, 4, 5}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Product",
      "Documentation": {
        "Documentation.Name": "List.Product",
        "Documentation.Description": "返回列表中的数的乘积。",
        "Documentation.LongDescription": "返回列表 <code>numbersList</code> 中的非 null 数的乘积。如果列表中没有非 null 值，则返回 null。",
        "Documentation.Category": "List.Numerics",
        "Documentation.Examples": [
          {
            "Description": "计算列表 <code>{1, 2, 3, 3, 4, 5, 5}</code> 中的数的乘积。",
            "Code": "List.Product({1, 2, 3, 3, 4, 5, 5})",
            "Result": "1800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Random",
      "Documentation": {
        "Documentation.Name": "List.Random",
        "Documentation.Description": "返回随机数的列表。",
        "Documentation.LongDescription": "给定要生成的值数和一个可选种子值，以此返回随机数(介于 0 到 1 之间)的列表。\r\n<ul>\r\n   <li><code>count</code>: 要生成的随机值数。</li>\r\n   <li><code>seed</code>:  <i>[可选]</i> 用于作为随机数生成器种子的数值。如果省略，则在每次调用函数时生成随机数的唯一列表。如果指定带数字的种子值，则每次调用函数时，生成随机数的相同列表。</li>\r\n</ul>",
        "Documentation.Category": "List.Generators",
        "Documentation.Examples": [
          {
            "Description": "创建 3 个随机数的列表。",
            "Code": "List.Random(3)",
            "Result": "{0.992332, 0.132334, 0.023592}"
          },
          {
            "Description": "创建 3 个随机数的列表，指定种子值。",
            "Code": "List.Random(3, 2)",
            "Result": "{0.883002, 0.245344, 0.723212}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "count": "number",
        "seed": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveFirstN",
      "Documentation": {
        "Documentation.Name": "List.RemoveFirstN",
        "Documentation.Description": "返回一个列表，它在列表开头跳过指定数目的元素。",
        "Documentation.LongDescription": "返回删除列表 <code>list</code> 的第一个元素的列表。如果 <code>list</code> 为空列表，则返回空列表。\r\n此函数取一个可选参数 <code>countOrCondition</code> 来支持删除以下所列的多个值。\r\n <ul>\r\n <li>如果指定一个数字，则最多删除这么多项。</li>\r\n <li>如果指定条件，则返回的列表以 <code>list</code> 中满足条件的第一个元素开头。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n <li>如果此参数为 null，将采用默认行为。</li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从 {1, 2, 3, 4, 5} 创建不带前 3 个数的列表。",
            "Code": "List.RemoveFirstN({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "从 {5, 4, 2, 6, 1} 创建一个列表，它以小于 3 的数开头。",
            "Code": "List.RemoveFirstN({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveLastN",
      "Documentation": {
        "Documentation.Name": "List.RemoveLastN",
        "Documentation.Description": "返回一个列表，它从列表末尾删除指定数目的元素。",
        "Documentation.LongDescription": "返回一个列表，它从列表 <code>list</code> 末尾删除最后 <code>countOrCondition</code> 个元素。如果 <code>list</code> 中的元素少于 <code>countOrCondition</code> 个，则返回空列表。\r\n <ul>\r\n <li>如果指定一个数字，则最多删除这么多项。</li>\r\n <li>如果指定条件，则返回的列表以 <code>list</code> 中满足条件的倒数第一个元素结尾。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n <li>如果此参数为 null，则仅删除一项。</li>\r\n </ul>",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从 {1, 2, 3, 4, 5} 创建不带后 3 个数的列表。",
            "Code": "List.RemoveLastN({1, 2, 3, 4, 5}, 3)",
            "Result": "{1, 2}"
          },
          {
            "Description": "从 {5, 4, 2, 6, 4} 创建一个列表，它以小于 3 的数结尾。",
            "Code": "List.RemoveLastN({5, 4, 2, 6, 4}, each _ > 3)",
            "Result": "{5, 4, 2}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.RemoveNulls",
      "Documentation": {
        "Documentation.Name": "List.RemoveNulls",
        "Documentation.Description": "从指定的列表中删除所有 \"null\" 值。",
        "Documentation.LongDescription": "在 <code>list</code> 中删除所有出现的 \"null\" 值。如果列表中没有 \"null\" 值，则返回原始列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "从列表 {1, 2, 3, null, 4, 5, null, 6} 中删除 \"null\" 值。",
            "Code": "List.RemoveNulls({1, 2, 3, null, 4, 5, null, 6})",
            "Result": "{1, 2, 3, 4, 5, 6}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Reverse",
      "Documentation": {
        "Documentation.Name": "List.Reverse",
        "Documentation.Description": "将列表中的值反向排序。",
        "Documentation.LongDescription": "返回将列表 <code>list</code> 中的值反向排序得到的列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "通过将 {1..10} 反向排序创建一个列表。",
            "Code": "List.Reverse({1..10})",
            "Result": "{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Single",
      "Documentation": {
        "Documentation.Name": "List.Single",
        "Documentation.Description": "对于长度为 1 的列表返回一个列表项，否则引发异常。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中只有一项，则返回该项。\r\n    如果列表中有多项或列表为空，函数将引发异常。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "在列表 {1} 中查找单个值。",
            "Code": "List.Single({1})",
            "Result": "1"
          },
          {
            "Description": "在列表 {1, 2, 3} 中查找单个值。",
            "Code": "List.Single({1, 2, 3})",
            "Result": "[Expression.Error] There were too many elements in the enumeration to complete the operation."
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.SingleOrDefault",
      "Documentation": {
        "Documentation.Name": "List.SingleOrDefault",
        "Documentation.Description": "对于长度为 1 的列表返回一个列表项，对于空列表返回默认值。",
        "Documentation.LongDescription": "如果列表 <code>list</code> 中只有一项，则返回该项。\r\n    如果列表为空，函数将返回 null，除非指定了可选的 <code>default</code>。如果列表中有多项，函数将返回错误。",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "在列表 {1} 中查找单个值。",
            "Code": "List.SingleOrDefault({1})",
            "Result": "1"
          },
          {
            "Description": "在列表 {} 中查找单个值。",
            "Code": "List.SingleOrDefault({})",
            "Result": "null"
          },
          {
            "Description": "在列表 {} 中查找单个值。如果为空，则返回 -1。",
            "Code": "List.SingleOrDefault({}, -1)",
            "Result": "-1"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Skip",
      "Documentation": {
        "Documentation.Name": "List.Skip",
        "Documentation.Description": "返回一个列表，它在列表开头跳过指定数目的元素。",
        "Documentation.LongDescription": "返回跳过列表 <code>list</code> 的第一个元素的列表。如果 <code>list</code> 为空列表，则返回空列表。\r\n此函数取一个可选参数 <code>countOrCondition</code> 来支持跳过以下所列的多个值。\r\n <ul>\r\n <li>如果指定一个数，则最多跳过这么多项。</li>\r\n <li>如果指定条件，则返回的列表以 <code>list</code> 中满足条件的第一个元素开头。一旦某个项不满足该条件，则不再考虑其他项。</li>\r\n <li>如果此参数为 null，将采用默认行为。</li>\r\n </ul>",
        "Documentation.Category": "List.Selection",
        "Documentation.Examples": [
          {
            "Description": "从 {1, 2, 3, 4, 5} 创建不带前 3 个数的列表。",
            "Code": "List.Skip({1, 2, 3, 4, 5}, 3)",
            "Result": "{4, 5}"
          },
          {
            "Description": "从 {5, 4, 2, 6, 1} 创建一个列表，它以小于 3 的数开头。",
            "Code": "List.Skip({5, 4, 2, 6, 1}, each _ > 3)",
            "Result": "{2, 6, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "countOrCondition": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sort",
      "Documentation": {
        "Documentation.Name": "List.Sort",
        "Documentation.Description": "根据指定的条件对数据列表排序。",
        "Documentation.LongDescription": "根据指定的可选条件对数据列表<code>list</code> 进行排序。\r\n    可选参数 <code>comparisonCriteria</code> 可以指定为比较条件。这可以采用以下值:\r\n    <ul>\r\n    <li> 要控制顺序，比较条件可以为“顺序”枚举值。(<code>Order.Descending</code>, <code>Order.Ascending</code>). </li>\r\n    <li> 要计算要用于排序的键，可以使用 1 个参数的函数。</li>\r\n    <li> 要同时选择键并控制顺序，比较条件可以为包含键和顺序的列表 (<code>{each 1 / _, Order.Descending}</code>)。</li>\r\n    <li> 要完全控制比较，可以使用 2 个参数的函数。此函数将从列表中传递两个项(任意两项、任意顺序)。该函数应返回以下其中一个值:\r\n        <ul>\r\n            <li> <code>-1</code>: 第一项小于第二项。</li>\r\n            <li> <code>0</code>: 项相等。</li>\r\n            <li> <code>1</code>: 第一项大于第二项。</li>\r\n        </ul>\r\n        Value.Compare 为可用于委托此逻辑的方法。</li>\r\n    </ul>",
        "Documentation.Category": "List.Ordering",
        "Documentation.Examples": [
          {
            "Description": "将列表 {2, 3, 1} 排序。",
            "Code": "List.Sort({2, 3, 1})",
            "Result": "{1, 2, 3}"
          },
          {
            "Description": "按降序将列表 {2, 3, 1} 排序。",
            "Code": "List.Sort({2, 3, 1}, Order.Descending)",
            "Result": "{3, 2, 1}"
          },
          {
            "Description": "使用 Value.Compare 方法按降序将列表 {2, 3, 1} 排序。",
            "Code": "List.Sort({2, 3, 1}, (x, y) => Value.Compare(1/x, 1/y))",
            "Result": "{3, 2, 1}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "list": "list",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.StandardDeviation",
      "Documentation": {
        "Documentation.Name": "List.StandardDeviation",
        "Documentation.Description": "返回基于样本估计的标准偏差。",
        "Documentation.LongDescription": "返回基于样本估计的列表 <code>numbersList</code> 中的值的标准偏差。\r\n    如果 <code>numbersList</code> 是数字列表，则返回数字。\r\n    如果为空列表或类型不属于 <code>number</code> 的项的列表，将引发异常。",
        "Documentation.Category": "List.Averages",
        "Documentation.Examples": [
          {
            "Description": "计算 1 到 5 的数的标准偏差。",
            "Code": "List.StandardDeviation({1..5})",
            "Result": "1.5811388300841898"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "numbersList": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Sum",
      "Documentation": {
        "Documentation.Name": "List.Sum",
        "Documentation.Description": "返回列表中的项之和。",
        "Documentation.LongDescription": "返回列表 <code>list</code> 中所有非 null 值的总和。 如果列表中没有非 null 值，则返回 null。",
        "Documentation.Category": "List.Addition",
        "Documentation.Examples": [
          {
            "Description": "计算列表 <code>{1, 2, 3}</code> 中的数的总和。",
            "Code": "List.Sum({1, 2, 3})",
            "Result": "6"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "list": "list",
        "precision": "Precision.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Union",
      "Documentation": {
        "Documentation.Name": "List.Union",
        "Documentation.Description": "返回在输入中找到的列表值的并集。",
        "Documentation.LongDescription": "取列表的列表 <code>lists</code>，合并各个列表中的项，然后在输出列表中返回它们。因此，返回的列表包含所有输入列表中的所有项。\r\n    此操作维护传统的包语义，因此重复值作为 Union 的一部分匹配。\r\n    可以指定一个可选相等条件值 <code>equationCriteria</code> 来控制相等测试。 ",
        "Documentation.Category": "List.Set operations",
        "Documentation.Examples": [
          {
            "Description": "创建列表 {1..5}、{2..6}、{3..7} 的并集。",
            "Code": "List.Union({{1..5}, {2..6}, {3..7}})",
            "Result": "{1, 2, 3, 4, 5, 6, 7}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list",
        "equationCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "List.Zip",
      "Documentation": {
        "Documentation.Name": "List.Zip",
        "Documentation.Description": "通过在多个列表的相同位置合并项来返回列表的列表。",
        "Documentation.LongDescription": "提取列表的列表 <code>lists</code>，并通过在同一位置合并项返回列表的列表。",
        "Documentation.Category": "List.Transformation functions",
        "Documentation.Examples": [
          {
            "Description": "压缩两个简单列表 {1, 2} 和 {3, 4}。",
            "Code": "List.Zip({{1, 2}, {3, 4}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, 4}\r\n}"
          },
          {
            "Description": "压缩两个具有不同长度 {1, 2} 和 {3} 的简单列表。",
            "Code": "List.Zip({{1, 2}, {3}})",
            "Result": "{\r\n    {1, 3},\r\n    {2, null}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "lists": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.From",
      "Documentation": {
        "Documentation.Name": "Logical.From",
        "Documentation.Description": "从给定的值创建逻辑。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>logical</code> 值。如果给定的 <code>value</code> 是 <code>null</code>，则 <code>Logical.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>logical</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>logical</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 来自文本值的 <code>logical</code> 值，可以为 <code>“true”</code> 或 <code>“false”</code>。有关详细信息，请参阅 <code>Logical.FromText</code>。</li>\r\n        <li><code>number</code>: 如果 <code>value</code> 等于 <code>0</code>，则为 <code>false</code>，否则为 <code>true</code>。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "将 <code>2</code> 转换为 <code>logical</code> 值。",
            "Code": "Logical.From(2)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.FromText",
      "Documentation": {
        "Documentation.Name": "Logical.FromText",
        "Documentation.Description": "从文本值 \"true\" 和 \"false\" 创建逻辑值。",
        "Documentation.LongDescription": "从文本值 <code>text</code>(\"true\" 或 \"false\")创建逻辑值。如果 <code>text</code> 包含其他字符串，将引发异常。文本值 <code>text</code> 不区分大小写。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "从文本字符串 \"true\" 创建逻辑值。",
            "Code": "Logical.FromText(\"true\")",
            "Result": "true"
          },
          {
            "Description": "从文本字符串 \"a\" 创建逻辑值。",
            "Code": "Logical.FromText(\"a\")",
            "Result": "[Expression.Error] Could not convert to a logical."
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Logical.ToText",
      "Documentation": {
        "Documentation.Name": "Logical.ToText",
        "Documentation.Description": "给定逻辑值返回文本 \"true\" 或 \"false\"。",
        "Documentation.LongDescription": "从逻辑值 <code>logicalValue</code>(<code>true</code>或 <code>false</code>)创建文本值。如果 <code>logicalValue</code> 不是逻辑值，将引发异常。",
        "Documentation.Category": "Logical",
        "Documentation.Examples": [
          {
            "Description": "从逻辑 <code>true</code> 创建一个文本值。",
            "Code": "Logical.ToText(true)",
            "Result": "\"true\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "logicalValue": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicroStrategyDataset.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "libraryUrl": "Uri.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "MicrosoftAzureConsumptionInsights.Test",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "enrollmentNumber": "any",
        "parameters": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelById",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelId": "number",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Mixpanel.FunnelByName",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "funnelName": "text",
        "fromDate": "text",
        "toDate": "text",
        "length": "number",
        "interval": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Abs",
      "Documentation": {
        "Documentation.Name": "Number.Abs",
        "Documentation.Description": "返回数的绝对值。",
        "Documentation.LongDescription": "返回 <code>number</code> 的绝对值。如果 <code>number</code> 为 null，则 <code>Number.Abs</code> 返回 null。\r\n    <ul>\r\n        <li><code>number</code>: 要计算其绝对值的 <code>number</code>。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "-3 的绝对值。",
            "Code": "Number.Abs(-3)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Acos",
      "Documentation": {
        "Documentation.Name": "Number.Acos",
        "Documentation.Description": "返回数的反余弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的反余弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Asin",
      "Documentation": {
        "Documentation.Name": "Number.Asin",
        "Documentation.Description": "返回数的反正弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的反正弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Atan",
      "Documentation": {
        "Documentation.Name": "Number.Atan",
        "Documentation.Description": "返回数的反正弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的反正切。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.BitwiseNot",
      "Documentation": {
        "Documentation.Name": "Number.BitwiseNot",
        "Documentation.Description": "返回一个字节，其中每位是输入的相反值。",
        "Documentation.LongDescription": "返回对 <code>number</code> 执行按位 \"Not\" 运算所得的结果。",
        "Documentation.Category": "Number.Bytes",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "number": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cos",
      "Documentation": {
        "Documentation.Name": "Number.Cos",
        "Documentation.Description": "返回数的余弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的余弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "计算角 0 的余弦。",
            "Code": "Number.Cos(0)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Cosh",
      "Documentation": {
        "Documentation.Name": "Number.Cosh",
        "Documentation.Description": "返回数的双曲余弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的双曲余弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Exp",
      "Documentation": {
        "Documentation.Name": "Number.Exp",
        "Documentation.Description": "计算 e 的指定次幂。",
        "Documentation.LongDescription": "返回计算 e 的 <code>number</code> 次幂(指数函数)所得的结果。\r\n      <ul>\r\n        <li><code>number</code>: 要计算其指数函数的 <code>number</code>。如果 <code>number</code> 为 null，则 <code>Number.Exp</code> 返回 null。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 e 的 3 次幂。",
            "Code": "Number.Exp(3)",
            "Result": "20.085536923187668"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Factorial",
      "Documentation": {
        "Documentation.Name": "Number.Factorial",
        "Documentation.Description": "返回数的阶乘。",
        "Documentation.LongDescription": "返回数 <code>number</code> 的阶乘。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 10 的阶乘。",
            "Code": "Number.Factorial(10)",
            "Result": "3628800"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.From",
      "Documentation": {
        "Documentation.Name": "Number.From",
        "Documentation.Description": "从给定的值创建一个数。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>number</code> 值。还可提供可选的 <code>culture</code> (例如 \"en-US\")。\r\n如果给定的 <code>value</code> 是 <code>null</code>，<code>Number.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>number</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>number</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>number</code> 值。处理通用文本格式(\"15\", \"3,423.10\", \"5.0E-10\")。有关详细信息，请参阅 <code>Number.FromText</code>。</li>\r\n        <li><code>logical</code>: 1 表示 <code>true</code>，0 表示 <code>false</code>。</li>\r\n        <li><code>datetime</code>: 一个包含等效的 OLE 自动化日期的双精度浮点数。</li>\r\n        <li><code>datetimezone</code>: 一个包含与 <code>value</code> 的当地日期和时间等效的 OLE 自动化日期的双精度浮点数。</li>\r\n        <li><code>date</code>: 一个包含等效的 OLE 自动化日期的双精度浮点数。</li>\r\n        <li><code>time</code>: 用天的小数形式表示。</li>\r\n        <li><code>duration</code>: 用整数天和天的小数形式表示。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的 <code>number</code> 值。",
            "Code": "Number.From(\"4\")",
            "Result": "4"
          },
          {
            "Description": "获取 <code>#datetime(2020, 3, 20, 6, 0, 0)</code> 的 <code>number</code> 值。",
            "Code": "Number.From(#datetime(2020, 3, 20, 6, 0, 0))",
            "Result": "43910.25"
          },
          {
            "Description": "获取 <code>\"12.3%\"</code> 的<code>数</code>值。",
            "Code": "Number.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.FromText",
      "Documentation": {
        "Documentation.Name": "Number.FromText",
        "Documentation.Description": "从通用文本格式(\"15\", \"3,423.10\", \"5.0E-10\")创建数。",
        "Documentation.LongDescription": "从给定的文本值 <code>text</code> 返回 <code>number</code> 值。\r\n <ul>\r\n  <li><code>text</code>: 数值的文本表示形式。表示形式必须采用通用数字格式，例如 \"15\"、\"3,423.10\" 或 \"5.0E-10\"。</li>\r\n  <li><code>culture</code>: 控制 <code>text</code> 的解释方式的可选区域性(例如 \"en-US\")。</li>\r\n </ul>",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"4\"</code> 的数值。",
            "Code": "Number.FromText(\"4\")",
            "Result": "4"
          },
          {
            "Description": "获取 <code>\"5.0e-10\"</code> 的数值。",
            "Code": "Number.FromText(\"5.0e-10\")",
            "Result": "5E-10"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsEven",
      "Documentation": {
        "Documentation.Name": "Number.IsEven",
        "Documentation.Description": "指示值是否为偶数。",
        "Documentation.LongDescription": "通过以下方式指示值 <code>number</code> 是否为偶数: 如果为偶数，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "检查 625 是否为偶数。",
            "Code": "Number.IsEven(625)",
            "Result": "false"
          },
          {
            "Description": "检查 82 是否为偶数。",
            "Code": "Number.IsEven(82)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsNaN",
      "Documentation": {
        "Documentation.Name": "Number.IsNaN",
        "Documentation.Description": "指示值是否为 NaN (不是数字)。",
        "Documentation.LongDescription": "指示值是否为 NaN (不是数字)。如果 <code>number</code> 与 <code>Number.IsNaN</code> 等效，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "检查 0 除以 0 是否为 NaN。",
            "Code": "Number.IsNaN(0/0)",
            "Result": "true"
          },
          {
            "Description": "检查 1 除以 0 是否为 NaN。",
            "Code": "Number.IsNaN(1/0)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.IsOdd",
      "Documentation": {
        "Documentation.Name": "Number.IsOdd",
        "Documentation.Description": "指示值是否为奇数。",
        "Documentation.LongDescription": "指示值是否为奇数。如果 <code>number</code> 为奇数，则返回 <code>true</code>；否则返回 <code>false</code>。",
        "Documentation.Category": "Number.Information",
        "Documentation.Examples": [
          {
            "Description": "检查 625 是否为奇数。",
            "Code": "Number.IsOdd(625)",
            "Result": "true"
          },
          {
            "Description": "检查 82 是否为奇数。",
            "Code": "Number.IsOdd(82)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Ln",
      "Documentation": {
        "Documentation.Name": "Number.Ln",
        "Documentation.Description": "返回数的自然对数。",
        "Documentation.LongDescription": "返回数 <code>number</code> 的自然对数。如果 <code>number</code> 为 null，则 <code>Number.Ln</code> 返回 null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "获取 15 的自然对数。",
            "Code": "Number.Ln(15)",
            "Result": "2.70805020110221"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log",
      "Documentation": {
        "Documentation.Name": "Number.Log",
        "Documentation.Description": "根据指定底数(默认为 e)返回数的对数。",
        "Documentation.LongDescription": "根据指定底数 <code>base</code> 返回数值 <code>number</code> 的对数。如果未指定 <code>base</code>，则默认值为 Number.E。\r\n    如果 <code>number</code> 为 null，则 <code>Number.Log</code> 返回 null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "获取 2 的以 10 为底的对数。",
            "Code": "Number.Log(2, 10)",
            "Result": "0.3010299956639812"
          },
          {
            "Description": "获取 2 的以 e 为底的对数。",
            "Code": "Number.Log(2)",
            "Result": "0.69314718055994529"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "base": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Log10",
      "Documentation": {
        "Documentation.Name": "Number.Log10",
        "Documentation.Description": "返回数值的以 10 为底的对数。",
        "Documentation.LongDescription": "返回数值 <code>number</code> 的以 10 为底的对数。如果 <code>number</code> 为 null，则 <code>Number.Log10</code> 返回 null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "获取 2 的以 10 为底的对数。",
            "Code": "Number.Log10(2)",
            "Result": "0.3010299956639812"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Round",
      "Documentation": {
        "Documentation.Name": "Number.Round",
        "Documentation.Description": "返回舍入的数。可以指定位数和舍入模式。",
        "Documentation.LongDescription": "返回将 <code>number</code> 四舍五入到最接近的数的结果。如果 <code>number</code> 为 null，则 <code>Number.Round</code> 返回 null。<br>\r\n      <br>\r\n      默认情况下，<code>number</code> 舍入到最接近的整数，并通过舍入到最接近的偶数(使用 <code>RoundingMode.ToEven</code>，也称为“银行家舍入法”)断开联系。<br>\r\n      <br>\r\n      但可通过以下可选参数覆盖这些默认值。\r\n      <ul>\r\n        <li><code>digits</code>: 导致 <code>number</code> 四舍五入到指定的小数位数.</li>\r\n        <li><code>roundingMode</code>: 在 <code>number</code> 位于两个可能的舍入值之间的中间点时，替代默认的断开联系行为\r\n       (有关可能值的信息，请参阅 <code>RoundingMode.Type</code>)。</li>\r\n      </ul>",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "将 1.234 舍入到最近的整数。",
            "Code": "Number.Round(1.234)",
            "Result": "1"
          },
          {
            "Description": "将 1.56 舍入到最近的整数。",
            "Code": "Number.Round(1.56)",
            "Result": "2"
          },
          {
            "Description": "将 1.2345 舍入为包含两位小数。",
            "Code": "Number.Round(1.2345, 2)",
            "Result": "1.23"
          },
          {
            "Description": "将 1.2345 舍入为包含三位小数(向上舍入)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Up)",
            "Result": "1.235"
          },
          {
            "Description": "将 1.2345 舍入为包含三位小数(向下舍入)。",
            "Code": "Number.Round(1.2345, 3, RoundingMode.Down)",
            "Result": "1.234"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number",
        "roundingMode": "RoundingMode.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundAwayFromZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundAwayFromZero",
        "Documentation.Description": "返回向上舍入正数和向下舍入负数的结果。可以指定位数。",
        "Documentation.LongDescription": "基于数字的符号返回舍入 <code>number</code> 的结果。此函数将向上舍入正数、向下舍入负数。\r\n    如果指定了 <code>digits</code>，则将 <code>number</code> 舍入为包含 <code>digits</code> 位小数。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "向远离零的方向舍入数 -1.2。",
            "Code": "Number.RoundAwayFromZero(-1.2)",
            "Result": "-2"
          },
          {
            "Description": "向远离零的方向舍入数 1.2。",
            "Code": "Number.RoundAwayFromZero(1.2)",
            "Result": "2"
          },
          {
            "Description": "将数字 -1.234 向远离零的方向舍入为包含两位小数。",
            "Code": "Number.RoundAwayFromZero(-1.234, 2)",
            "Result": "-1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundDown",
      "Documentation": {
        "Documentation.Name": "Number.RoundDown",
        "Documentation.Description": "返回上一个最大数。可以指定位数。",
        "Documentation.LongDescription": "返回将 <code>number</code> 向下舍入到上一个最大整数的结果。如果 <code>number</code> 为 null，则此函数返回 null。\r\n\r\n    如果提供了 <code>digits</code>，则将 <code>number</code> 舍入为指定的小数位数。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "将 1.234 向下舍入到整数。",
            "Code": "Number.RoundDown(1.234)",
            "Result": "1"
          },
          {
            "Description": "将 1.999 向下舍入到整数。",
            "Code": "Number.RoundDown(1.999)",
            "Result": "1"
          },
          {
            "Description": "将 1.999 向下舍入为包含两位小数。",
            "Code": "Number.RoundDown(1.999, 2)",
            "Result": "1.99"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundTowardZero",
      "Documentation": {
        "Documentation.Name": "Number.RoundTowardZero",
        "Documentation.Description": "返回向下舍入正数和向上舍入负数的结果。可以指定位数。",
        "Documentation.LongDescription": "基于数字的符号返回舍入 <code>number</code> 的结果。此函数将向下舍入正数、向上舍入负数。\r\n    如果指定了 <code>digits</code>，则将 <code>number</code> 舍入为包含 <code>digits</code> 位小数。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "向零方向舍入数 -1.2。",
            "Code": "Number.RoundTowardZero(-1.2)",
            "Result": "-1"
          },
          {
            "Description": "向零方向舍入数 1.2。",
            "Code": "Number.RoundTowardZero(1.2)",
            "Result": "1"
          },
          {
            "Description": "将数字 -1.234 向零的方向舍入为包含两位小数。",
            "Code": "Number.RoundTowardZero(-1.234, 2)",
            "Result": "-1.23"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.RoundUp",
      "Documentation": {
        "Documentation.Name": "Number.RoundUp",
        "Documentation.Description": "返回下一个最大数。可以指定位数。",
        "Documentation.LongDescription": "返回将 <code>number</code> 向上舍入到下一个最大整数的结果。如果 <code>number</code> 为 null，则此函数返回 null。\r\n    如果提供了 <code>digits</code>，则将 <code>number</code> 舍入为指定的小数位数。\r\n  ",
        "Documentation.Category": "Number.Rounding",
        "Documentation.Examples": [
          {
            "Description": "将 1.234 向上舍入到整数。",
            "Code": "Number.RoundUp(1.234)",
            "Result": "2"
          },
          {
            "Description": "将 1.999 向上舍入到整数。",
            "Code": "Number.RoundUp(1.999)",
            "Result": "2"
          },
          {
            "Description": "将 1.234 向上舍入为包含两位小数。",
            "Code": "Number.RoundUp(1.234, 2)",
            "Result": "1.24"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number",
        "digits": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sign",
      "Documentation": {
        "Documentation.Name": "Number.Sign",
        "Documentation.Description": "如果为正数，则返回 1；如果为负数，则返回 -1；如果为零则返回 0。",
        "Documentation.LongDescription": "如果 <code>number</code>为正数，则返回 1；如果它为负数，则返回 -1；如果它为零则返回 0。\r\n    如果 <code>number</code> 为 null，则 <code>Number.Sign</code> 返回 null。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "确定 182 的符号。",
            "Code": "Number.Sign(182)",
            "Result": "1"
          },
          {
            "Description": "确定 -182 的符号。",
            "Code": "Number.Sign(-182)",
            "Result": "-1"
          },
          {
            "Description": "确定 0 的符号。",
            "Code": "Number.Sign(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sin",
      "Documentation": {
        "Documentation.Name": "Number.Sin",
        "Documentation.Description": "返回数的正弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的正弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "计算角 0 的正弦。",
            "Code": "Number.Sin(0)",
            "Result": "0"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sinh",
      "Documentation": {
        "Documentation.Name": "Number.Sinh",
        "Documentation.Description": "返回数的双曲正弦。",
        "Documentation.LongDescription": "返回 <code>number</code> 的双曲正弦。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Sqrt",
      "Documentation": {
        "Documentation.Name": "Number.Sqrt",
        "Documentation.Description": "返回数的平方根。",
        "Documentation.LongDescription": "返回 <code>number</code> 的平方根。\r\n    如果 <code>number</code> 为 null，则 <code>Number.Sqrt</code> 返回 null。如果它是负值，则返回 <code>Number.NaN</code> (不是数字)。",
        "Documentation.Category": "Number.Operations",
        "Documentation.Examples": [
          {
            "Description": "计算 625 的平方根。",
            "Code": "Number.Sqrt(625)",
            "Result": "25"
          },
          {
            "Description": "计算 85 的平方根。",
            "Code": "Number.Sqrt(85)",
            "Result": "9.2195444572928871"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tan",
      "Documentation": {
        "Documentation.Name": "Number.Tan",
        "Documentation.Description": "返回数的正切。",
        "Documentation.LongDescription": "返回 <code>number</code> 的正切。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": [
          {
            "Description": "计算角 1 的正切。",
            "Code": "Number.Tan(1)",
            "Result": "1.5574077246549023"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.Tanh",
      "Documentation": {
        "Documentation.Name": "Number.Tanh",
        "Documentation.Description": "返回数的双曲正切。",
        "Documentation.LongDescription": "返回 <code>number</code> 的双曲正切。",
        "Documentation.Category": "Number.Trigonometry",
        "Documentation.Examples": []
      },
      "ReturnType": "number",
      "Parameters": {
        "number": "number"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Number.ToText",
      "Documentation": {
        "Documentation.Name": "Number.ToText",
        "Documentation.Description": "将给定数字转换为文本。",
        "Documentation.LongDescription": "根据 <code>format</code>指定的格式，将数值 <code>number</code>转换为文本值。<br>\r\n    <br>\r\n    格式是一个文本值，指示应如何转换数字。有关支持的格式值的详细信息，请转到 https://go.microsoft.com/fwlink/?linkid=2241210 和 https://go.microsoft.com/fwlink/?linkid=2240884。<br>\r\n    <br>\r\n    也可以提供可选 <code>culture</code> (例如，\"en-US\")来控制 <code>format</code> 的区域性相关行为。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "在不指定格式的情况下将数字转换为文本。",
            "Code": "Number.ToText(4)",
            "Result": "\"4\""
          },
          {
            "Description": "将数字转换为指数格式。",
            "Code": "Number.ToText(4, \"e\")",
            "Result": "\"4.000000e+000\""
          },
          {
            "Description": "将数字转换为仅包含一位小数的百分比格式。",
            "Code": "Number.ToText(-0.1234, \"P1\")",
            "Result": "\"-12.3 %\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "number": "number",
        "format": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "OData.Feed",
      "Documentation": {
        "Documentation.Name": "OData.Feed",
        "Documentation.Description": "返回 OData 服务提供的 OData 数据源表。",
        "Documentation.LongDescription": "从 URI <code>serviceUri</code>，标头 <code>headers</code> 返回由 OData 服务提供的 OData 源表。可以指定指明是使用并发连接还是使用可选记录参数 <code>options</code> 的布尔值来控制以下选项:\r\n    <ul>\r\n    <li><code>Query</code>: 以编程方式向 URL 添加查询参数，而无需担心转义。</li>\r\n    <li> <code>标头</code>: 将此值指定为记录将向 HTTP 请求提供附加标头。</li>\r\n    <li> <code>ExcludedFromCacheKey</code>: 将此值指定为列表将从缓存数据计算中排除这些 HTTP 标头密钥。</li>\r\n    <li> <code>ApiKeyName</code>: 如果目标网站具有 API 密钥表示法，则此参数可用于指定必须在 URL 中使用的密钥参数的名称(而不是值)。实际密钥值在凭据中提供。</li>\r\n    <li> <code>Timeout</code>: 将此值指定为持续时间将更改 HTTP 请求的超时。默认值为 600 秒。</li>\r\n    <li> <code>EnableBatch</code>: 逻辑值(true/false)，用于设置是否允许在超出 MaxUriLength 时生成 OData $batch 请求(默认值为 false)。</li>\r\n    <li> <code>MaxUriLength</code>: 指示发送到 OData 服务的允许 URI 最大长度的数字。如果超出且 EnableBatch 为 true，则将向 OData $batch 终结点发送请求，否则将会失败(默认值为 2048)。</li>\r\n    <li> <code>Concurrent</code>: 逻辑值(true/false)，如果设置为 true，则将并发提出向服务的请求。如果设置为 false，则将按顺序发出请求。如果未指定，则值由服务的 AsynchronousRequestsSupported 注释确定。如果服务未指定是否支持 AsynchronousRequestsSupported，则将按顺序发出请求。</li>\r\n    <li> <code>ODataVersion</code>: 数字(3 或 4)，用于指定此 OData 服务使用的 OData 协议版本。如果未指定，将请求所有受支持的版本。服务版本由服务返回的 OData-Version 标头确定。</li>\r\n    <li> <code>FunctionOverloads</code>: 逻辑值(true/false)，如果设置为 true，函数导入过载以单独条目形式在导航器中列出。如果设置为 false，函数导入过载将以一个联合函数的形式在导航器中列出。V3 的默认值为 false。V4 的默认值为 true。</li>\r\n    <li> <code>MoreColumns</code>:逻辑值(true/false)，如果设置为 true，则将“更多列”列添加到每个包含开放式类型和多变类型的实体源。这将包含基类型中未声明的字段。如果设置为 false，则此字段不存在。默认为 false。</li>\r\n    <li> <code>IncludeAnnotations</code>: 要包含的命名空间限定术语名称或模式的逗号分隔列表(使用 “*” 作为通配符)。默认情况下，不包括任何注释。</li>\r\n    <li> <code>IncludeMetadataAnnotations</code>: 要包含在元数据文档请求上的命名空间限定术语名称或模式的逗号分隔列表(使用 “*” 作为通配符)。默认情况下，包括与 IncludeAnnotations 相同的注释。</li>\r\n    <li> <code>OmitValues</code>: 允许 OData 服务避免在响应中写出特定值。如果已由服务确认，我们将通过忽略的字段推断这些值。选项包括:\r\n      <ul>\r\n      <li><code>ODataOmitValues.Nulls</code>: 允许 OData 服务忽略 null 值。</li>\r\n      </ul>\r\n    </li>\r\n    <li> <code>Implementation</code>: 指定要使用的 OData 连接器实现。有效值为 “2.0” 或 NULL。</li>\r\n    </ul>",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "连接到 TripPin OData 服务。",
            "Code": "OData.Feed(\"https://services.odata.org/V4/TripPinService\")",
            "Result": "table"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "serviceUri": "text",
        "headers": "record",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Odbc.InferOptions",
      "Documentation": {
        "Documentation.Name": "Odbc.InferOptions",
        "Documentation.Description": "返回尝试推断 ODBC 驱动程序的 SQL 功能的结果。",
        "Documentation.LongDescription": "返回尝试使用连接字符串 <code>connectionString</code> 推断 ODBC 的 SQL 功能的结果。<code>connectionString</code> 可以是文本或属性值对的记录。属性值可以是文本，也可以是数字。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "返回连接字符串的推断 SQL 功能。",
            "Code": "Odbc.InferOptions(\"dsn=your_dsn\")",
            "Result": "record"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "connectionString": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Document",
      "Documentation": {
        "Documentation.Name": "Parquet.Document",
        "Documentation.Description": "返回 Parquet 文档的内容作为表。",
        "Documentation.LongDescription": "以表的形式返回 Parquet 文档的内容。选项包括:\n    <ul>\n    <li> <code>TypeMapping</code>: 在读取和写入文件时控制默认类型映射的文本值。默认值为 null，并尝试尽可能保留原始类型的保真度。\"Sql\" 值将生成与 Sql Server.兼容程度最高的结果。</li>\n    </ul>",
        "Documentation.Category": "正在访问数据",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Parquet.Metadata",
      "Documentation": {
        "Documentation.Name": "Parquet.Metadata",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "访问数据",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "binary": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Percentage.From",
      "Documentation": {
        "Documentation.Name": "Percentage.From",
        "Documentation.Description": "返回给定值的百分比值。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>percentage</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Percentage.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是带有尾随百分比符号的 <code>text</code>，则返回转换的小数。否则，请使用 <code>Number.From</code> 将该值转换为 <code>number</code>。还可提供可选的 <code>culture</code> (例如 “en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"12.3%\"</code> 的<code>百分比</code>值。",
            "Code": "Percentage.From(\"12.3%\")",
            "Result": "0.123"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "ProductInsights.QueryMetric",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "urlAndQuery": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "QubolePresto.Contents",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "dsn": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RData.FromBinary",
      "Documentation": {
        "Documentation.Name": "RData.FromBinary",
        "Documentation.Description": "从 RData 文件返回数据帧记录。",
        "Documentation.LongDescription": "从 RData 文件返回数据帧记录。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "stream": "binary"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.Combine",
      "Documentation": {
        "Documentation.Name": "Record.Combine",
        "Documentation.Description": "组合给定列表中的记录。",
        "Documentation.LongDescription": "组合给定 <code>records</code> 中的记录。如果 <code>records</code> 包含非记录值，将返回错误。",
        "Documentation.Category": "Record.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从记录创建组合记录。",
            "Code": "Record.Combine({\r\n    [CustomerID = 1, Name = \"Bob\"],\r\n    [Phone = \"123-4567\"]\r\n})",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "records": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldCount",
      "Documentation": {
        "Documentation.Name": "Record.FieldCount",
        "Documentation.Description": "返回记录中的字段数。",
        "Documentation.LongDescription": "返回记录 <code>record</code> 中的字段数。",
        "Documentation.Category": "Record.Information",
        "Documentation.Examples": [
          {
            "Description": "查找记录中的字段数。",
            "Code": "Record.FieldCount([CustomerID = 1, Name = \"Bob\"])",
            "Result": "2"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldNames",
      "Documentation": {
        "Documentation.Name": "Record.FieldNames",
        "Documentation.Description": "返回字段的名称。",
        "Documentation.LongDescription": "将记录 <code>record</code> 中的字段名称作为文本返回。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "查找记录中字段的名称。",
            "Code": "Record.FieldNames([OrderID = 1, CustomerID = 1, Item = \"Fishing rod\", Price = 100.0])",
            "Result": "{\"OrderID\", \"CustomerID\", \"Item\", \"Price\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FieldValues",
      "Documentation": {
        "Documentation.Name": "Record.FieldValues",
        "Documentation.Description": "返回字段值的列表。",
        "Documentation.LongDescription": "返回记录 <code>record</code> 中的字段值列表。",
        "Documentation.Category": "Record.Selection",
        "Documentation.Examples": [
          {
            "Description": "在记录中查找字段值。",
            "Code": "Record.FieldValues([CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"])",
            "Result": "{1, \"Bob\", \"123-4567\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.FromTable",
      "Documentation": {
        "Documentation.Name": "Record.FromTable",
        "Documentation.Description": "从 {[Name = name, Value = value]} 格式的表创建记录。",
        "Documentation.LongDescription": "从包含字段名称和值名称 <code>{[Name = name, Value = value]}</code> 的记录 <code>table</code> 的表返回记录。如果字段名称不是唯一的，将引发异常。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "从 Table.FromRecords({[Name = \"CustomerID\", Value = 1], [Name = \"Name\", Value = \"Bob\"], [Name = \"Phone\", Value = \"123-4567\"]})格式的表创建记录。",
            "Code": "Record.FromTable(\r\n    Table.FromRecords({\r\n        [Name = \"CustomerID\", Value = 1],\r\n        [Name = \"Name\", Value = \"Bob\"],\r\n        [Name = \"Phone\", Value = \"123-4567\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Record.ToList",
      "Documentation": {
        "Documentation.Name": "Record.ToList",
        "Documentation.Description": "返回包含输入记录字段值的值列表。",
        "Documentation.LongDescription": "返回包含输入 <code>record</code> 中的字段值的值列表。",
        "Documentation.Category": "Record.Serialization",
        "Documentation.Examples": [
          {
            "Description": "从记录提取字段值。",
            "Code": "Record.ToList([A = 1, B = 2, C = 3])",
            "Result": "{1, 2, 3}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "record": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Resource.Access",
      "Documentation": {
        "Documentation.Name": "Resource.Access",
        "Documentation.Description": "Resource.Access",
        "Documentation.LongDescription": "Resource.Access",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "resource": "any",
        "nativeQuery": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.Column",
      "Documentation": {
        "Documentation.Name": "RowExpression.Column",
        "Documentation.Description": "返回表示对行表达式中列的访问权限的抽象语法树(AST)。",
        "Documentation.LongDescription": "返回一个抽象语法树(AST)，该树表示对行表达式中行的列 <code>columnName</code> 的访问权限。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "创建表示对列 \"CustomerName\" 的访问权限的 AST。",
            "Code": "RowExpression.Column(\"CustomerName\")",
            "Result": "[\r\n    Kind = \"FieldAccess\",\r\n    Expression = RowExpression.Row,\r\n    MemberName = \"CustomerName\"\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "columnName": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "RowExpression.From",
      "Documentation": {
        "Documentation.Name": "RowExpression.From",
        "Documentation.Description": "返回函数主体的抽象语法树(AST)。",
        "Documentation.LongDescription": "<p>返回 <code>function</code> 主体的抽象语法树(AST)，规范化为行表达式<i></i>:\r\n<ul>\r\n  <li>函数必须为单参数 lambda。</li>\r\n  <li>对函数参数的所有引用已替换为 <code>RowExpression.Row</code>。</li>\r\n  <li>对列的所有引用已替换为 <code>RowExpression.Column(columnName<i></i>)</code>。</li>\r\n  <li>AST 将简化为仅包含以下种类的节点:\r\n    <ul>\r\n      <li><code>Constant</code></li>\r\n      <li><code>Invocation</code></li>\r\n      <li><code>Unary</code></li>\r\n      <li><code>Binary</code></li>\r\n      <li><code>If</code></li>\r\n      <li><code>FieldAccess</code></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</p>\r\n</p>如果无法返回 <code>function</code> 的主体的行表达式 AST，会出现错误。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": [
          {
            "Description": "返回函数 <code>each [CustomerID] = \"ALFKI\"</code> 主体的 AST",
            "Code": "RowExpression.From(each [CustomerName] = \"ALFKI\")",
            "Result": "[\r\n    Kind = \"Binary\",\r\n    Operator = \"Equals\",\r\n    Left = RowExpression.Column(\"CustomerName\"),\r\n    Right =\r\n    [\r\n        Kind = \"Constant\",\r\n        Value = \"ALFKI\"\r\n    ]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Single.From",
      "Documentation": {
        "Documentation.Name": "Single.From",
        "Documentation.Description": "从给定的值创建 Single。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回单精度 <code>number</code> 值。如果给定的 <code>value</code> 为 <code>null</code>，则 <code>Single.From</code> 将返回 <code> null</code>。如果给定的 <code>value</code> 为单精度范围内的 <code>number</code>，则返回 <code>value</code>，否则返回错误。如果 <code>value</code> 属于任何其他类型，则将首先使用 <code>Number.FromText</code> 将其转换为 <code>number</code>。还可以提供可选的 <code>culture</code> (例如，“en-US”)。",
        "Documentation.Category": "Number.Conversion and formatting",
        "Documentation.Examples": [
          {
            "Description": "获取 <code>\"1.5\"</code> 的单精度 <code>number</code> 值。",
            "Code": "Single.From(\"1.5\")",
            "Result": "1.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Smartsheet.Content",
      "Documentation": {
        "Documentation.Description": "从 Smartsheet 索引终结点返回数据表。",
        "Documentation.DisplayName": "Smartsheet.Content",
        "Documentation.Caption": "Smartsheet.Content",
        "Documentation.Name": "Smartsheet.Content",
        "Documentation.LongDescription": "在指定终结点调用 Smartsheet 2.0 REST API，并将返回的数据元素转换为表。",
        "Documentation.Examples": [
          {
            "Description": "从 Smartsheet API 拉取用户信息表",
            "Code": "Smartsheet.Content(\"users\")",
            "Result": "包含由 Smartsheet API 返回的用户信息的表"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "endpoint": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByAnyDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByAnyDelimiter",
        "Documentation.Description": "返回一个函数，它在任意指定的分隔符处将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它在任意指定的分隔符处将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始，按逗号或分号拆分输入，忽略引号和带引号的分隔符。",
            "Code": "Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv)(\"a,b;\"\"c,d;e\"\",f\")",
            "Result": "{\"a\", \"b\", \"c,d;e\", \"f\"}"
          },
          {
            "Description": "从输入结尾开始，按逗号或分号拆分输入，忽略引号和带引号的分隔符。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByAnyDelimiter({\",\", \";\"}, QuoteStyle.Csv, startAtEnd)(\"a,\"\"b;c,d\")",
            "Result": "{\"a,b\", \"c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByDelimiter",
        "Documentation.Description": "返回一个函数，它根据指定的分隔符将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它根据指定的分隔符将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "按逗号拆分输入，忽略带引号的逗号。",
            "Code": "Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv)(\"a,\"\"b,c\"\",d\")",
            "Result": "{\"a\", \"b,c\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiter": "text",
        "quoteStyle": "QuoteStyle.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByEachDelimiter",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByEachDelimiter",
        "Documentation.Description": "返回一个函数，它依次在每个指定的分隔符处将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它依次在每个指定的分隔符处将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始，依次按逗号和分号拆分输入。",
            "Code": "Splitter.SplitTextByEachDelimiter({\",\", \";\"})(\"a,b;c,d\")",
            "Result": "{\"a\", \"b\", \"c,d\"}"
          },
          {
            "Description": "依次按逗号和分号拆分输入，将引号视为任何其他字符，并从输入结尾开始。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByEachDelimiter({\",\", \";\"}, QuoteStyle.None, startAtEnd)(\"a,\"\"b;c\"\",d\")",
            "Result": "{\"a,\"\"b\", \"c\"\"\", \"d\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "delimiters": "list",
        "quoteStyle": "QuoteStyle.Type",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByLengths",
        "Documentation.Description": "返回一个函数，它按每个指定的长度将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它按每个指定的长度将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始，将输入拆分为前两个字符后跟接下来三个字符。",
            "Code": "Splitter.SplitTextByLengths({2, 3})(\"AB123\")",
            "Result": "{\"AB\", \"123\"}"
          },
          {
            "Description": "从输入结尾开始，将输入拆分为前两个字符后跟接下来三个字符。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByLengths({5, 2}, startAtEnd)(\"RedmondWA98052\")",
            "Result": "{\"WA\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "lengths": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByPositions",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByPositions",
        "Documentation.Description": "返回一个函数，它在每个指定的位置将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它在每个指定的位置将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始，在指定位置拆分输入。",
            "Code": "Splitter.SplitTextByPositions({0, 3, 4})(\"ABC|12345\")",
            "Result": "{\"ABC\", \"|\", \"12345\"}"
          },
          {
            "Description": "从输入结尾开始，在指定位置拆分输入。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByPositions({0, 5}, startAtEnd)(\"Redmond98052\")",
            "Result": "{\"Redmond\", \"98052\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "positions": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRanges",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRanges",
        "Documentation.Description": "返回一个函数，它根据指定的偏移量和长度将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，该函数根据指定的偏移量和长度将文本拆分为文本列表。null 长度指示所有剩余输入都应被包括。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始按指定的位置和长度对拆分输入。请注意，此示例中的范围重叠。",
            "Code": "Splitter.SplitTextByRanges({{0, 4}, {2, 10}})(\"codelimiter\")",
            "Result": "{\"code\", \"delimiter\"}"
          },
          {
            "Description": "从输入的结尾开始按指定的位置和长度对拆分输入。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRanges({{0, 5}, {6, 2}}, startAtEnd)(\"RedmondWA?98052\")",
            "Result": "{\"WA\", \"98052\"}"
          },
          {
            "Description": "将输入拆分为定长的邮政编码，后跟可变长度的城市名称。",
            "Code": "Splitter.SplitTextByRanges({{0, 5}, {5, null}})(\"98052Redmond\")",
            "Result": "{\"98052\", \"Redmond\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "ranges": "list",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Splitter.SplitTextByRepeatedLengths",
      "Documentation": {
        "Documentation.Name": "Splitter.SplitTextByRepeatedLengths",
        "Documentation.Description": "返回一个函数，它在指定的长度后反复将文本拆分为文本列表。",
        "Documentation.LongDescription": "返回一个函数，它在指定的长度后反复将文本拆分为文本列表。",
        "Documentation.Category": "Splitter",
        "Documentation.Examples": [
          {
            "Description": "从输入开头开始重复地将输入拆分为三个字符的区块。",
            "Code": "Splitter.SplitTextByRepeatedLengths(3)(\"12345678\")",
            "Result": "{\"123\", \"456\", \"78\"}"
          },
          {
            "Description": "从输入结尾开始，重复将输入拆分为三个字符的区块。",
            "Code": "let\r\n    startAtEnd = true\r\nin\r\n    Splitter.SplitTextByRepeatedLengths(3, startAtEnd)(\"87654321\")",
            "Result": "{\"87\", \"654\", \"321\"}"
          }
        ]
      },
      "ReturnType": "function",
      "Parameters": {
        "length": "number",
        "startAtEnd": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "SqlExpression.SchemaFrom",
      "Documentation": {
        "Documentation.Name": "SqlExpression.SchemaFrom",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "schema": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ApproximateRowCount",
      "Documentation": {
        "Documentation.Name": "Table.ApproximateRowCount",
        "Documentation.Description": "返回表中的近似行数。",
        "Documentation.LongDescription": "返回 <code>table</code> 中的近似行数，或者如果数据源不支持近似值，则返回错误。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "估计大型表中城市和省/市/自治区的不同组合数，这可用作列的基数估计值。基数估计值非常重要，因此各种数据源(如 SQL Server)通常使用名为 HyperLog 的算法支持此特殊近似值。",
            "Code": "Table.ApproximateRowCount(Table.Distinct(Table.SelectColumns(sqlTable, {\"city\", \"state\"})))",
            "Result": "number"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnCount",
      "Documentation": {
        "Documentation.Name": "Table.ColumnCount",
        "Documentation.Description": "返回表中的列数。",
        "Documentation.LongDescription": "返回表 <code>table</code> 中的列数。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "查找表中的列数。",
            "Code": "Table.ColumnCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ColumnNames",
      "Documentation": {
        "Documentation.Name": "Table.ColumnNames",
        "Documentation.Description": "返回列名作为列表。",
        "Documentation.LongDescription": "返回表 <code>table</code> 中的列名作为文本列表。",
        "Documentation.Category": "Table.Column operations",
        "Documentation.Examples": [
          {
            "Description": "查找表的列名。",
            "Code": "Table.ColumnNames(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "{\"CustomerID\", \"Name\", \"Phone\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.First",
      "Documentation": {
        "Documentation.Name": "Table.First",
        "Documentation.Description": "返回第一行或指定的默认值。",
        "Documentation.LongDescription": "返回 <code>table</code> 的第一行，或如果表为空，则返回可选默认值 <code>default</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "查找表的第一行。",
            "Code": "Table.First(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          },
          {
            "Description": "查找表 <code>({})</code> 的第一行，或如果为空，则返回 [a = 0, b = 0]。",
            "Code": "Table.First(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.FirstValue",
      "Documentation": {
        "Documentation.Name": "Table.FirstValue",
        "Documentation.Description": "返回表的第一行的第一列或指定的默认值。",
        "Documentation.LongDescription": "返回表 <code>table</code> 的第一行的第一列或指定的默认值。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsDistinct",
      "Documentation": {
        "Documentation.Name": "Table.IsDistinct",
        "Documentation.Description": "指示表是否仅包含非重复行(没有重复项)。",
        "Documentation.LongDescription": "指示 <code>table</code> 是否仅包含非重复行(没有重复项)。如果行为非重复行，则返回 <code>true</code>；否则返回 <code>false</code>。\r\n    可选参数 <code>comparisonCriteria</code> 指定对表中的哪些列进行测试以确定是否具有重复项。如果未指定 <code>comparisonCriteria</code>，则测试所有列。",
        "Documentation.Category": "Table.Membership",
        "Documentation.Examples": [
          {
            "Description": "确定表是否为非重复表。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 4, Name = \"Ringo\", Phone = \"232-1550\"]\r\n    })\r\n)",
            "Result": "true"
          },
          {
            "Description": "确定表的列中是否非重复。",
            "Code": "Table.IsDistinct(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"],\r\n        [CustomerID = 5, Name = \"Bob\", Phone = \"232-1550\"]\r\n    }),\r\n    \"Name\"\r\n)",
            "Result": "false"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table",
        "comparisonCriteria": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.IsEmpty",
      "Documentation": {
        "Documentation.Name": "Table.IsEmpty",
        "Documentation.Description": "指示表是否包含任何行。",
        "Documentation.LongDescription": "指示 <code>table</code> 是否包含任何行。如果没有行(也即表为空)，则返回 <code>true</code>； 否则，返回 <code>false</code>。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "确定表是否为空。",
            "Code": "Table.IsEmpty(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "false"
          },
          {
            "Description": "确定表 <code>({})</code> 是否为空。",
            "Code": "Table.IsEmpty(Table.FromRecords({}))",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Keys",
      "Documentation": {
        "Documentation.Name": "Table.Keys",
        "Documentation.Description": "返回指定表的键。",
        "Documentation.LongDescription": "返回指定表的键。",
        "Documentation.Category": "Table.Transformation",
        "Documentation.Examples": [
          {
            "Description": "获取表的键列表。",
            "Code": "let\r\n    table = Table.FromRecords({\r\n        [Id = 1, Name = \"Hello There\"],\r\n        [Id = 2, Name = \"Good Bye\"]\r\n    }),\r\n    tableWithKeys = Table.AddKey(table, {\"Id\"}, true),\r\n    keys = Table.Keys(tableWithKeys)\r\nin\r\n    keys",
            "Result": "{[Columns = {\"Id\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.Last",
      "Documentation": {
        "Documentation.Name": "Table.Last",
        "Documentation.Description": "返回最后一行或指定的默认值。",
        "Documentation.LongDescription": "返回 <code>table</code> 的最后一行，或如果表为空，则返回可选默认值 <code>default</code>。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "查找表的最后一行。",
            "Code": "Table.Last(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "[CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]"
          },
          {
            "Description": "查找表 <code>({})</code> 的最后一行，或如果为空，则返回 [a = 0, b = 0]。",
            "Code": "Table.Last(Table.FromRecords({}), [a = 0, b = 0])",
            "Result": "[a = 0, b = 0]"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "table": "table",
        "default": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.RowCount",
      "Documentation": {
        "Documentation.Name": "Table.RowCount",
        "Documentation.Description": "返回表中的行数。",
        "Documentation.LongDescription": "返回表 <code>table</code> 中的行数。",
        "Documentation.Category": "Table.Information",
        "Documentation.Examples": [
          {
            "Description": "查找表中的行数。",
            "Code": "Table.RowCount(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "3"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.SingleRow",
      "Documentation": {
        "Documentation.Name": "Table.SingleRow",
        "Documentation.Description": "返回表中的单一行。",
        "Documentation.LongDescription": "返回一行 <code>table</code> 中的单一行。如果 <code>table</code> 具有多行，则引发异常。",
        "Documentation.Category": "Table.Row operations",
        "Documentation.Examples": [
          {
            "Description": "返回表中的单行。",
            "Code": "Table.SingleRow(Table.FromRecords({[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]}))",
            "Result": "[CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToColumns",
      "Documentation": {
        "Documentation.Name": "Table.ToColumns",
        "Documentation.Description": "从表中创建列值的嵌套列表的列表。",
        "Documentation.LongDescription": "从表 <code>table</code> 中创建嵌套表的列表。 每个列表项都是一个包含列值的内部列表。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "从表中创建列值的列表。",
            "Code": "Table.ToColumns(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"]\r\n    })\r\n)",
            "Result": "{{1, 2}, {\"Bob\", \"Jim\"}, {\"123-4567\", \"987-6543\"}}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToList",
      "Documentation": {
        "Documentation.Name": "Table.ToList",
        "Documentation.Description": "通过将指定的组合函数应用于表中的每一行值，将表转换为列表。",
        "Documentation.LongDescription": "通过将指定的组合函数应用于表中的每一行值，将表转换为列表。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "使用逗号合并每行文本。",
            "Code": "Table.ToList(\r\n    Table.FromRows({\r\n        {Number.ToText(1), \"Bob\", \"123-4567\"},\r\n        {Number.ToText(2), \"Jim\", \"987-6543\"},\r\n        {Number.ToText(3), \"Paul\", \"543-7890\"}\r\n    }),\r\n    Combiner.CombineTextByDelimiter(\",\")\r\n)",
            "Result": "{\"1,Bob,123-4567\", \"2,Jim,987-6543\", \"3,Paul,543-7890\"}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table",
        "combiner": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRecords",
      "Documentation": {
        "Documentation.Name": "Table.ToRecords",
        "Documentation.Description": "将表转换为记录列表。",
        "Documentation.LongDescription": "将表 <code>table</code> 转换为记录列表。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "将表转换为记录列表。",
            "Code": "Table.ToRecords(\r\n    Table.FromRows(\r\n        {\r\n            {1, \"Bob\", \"123-4567\"},\r\n            {2, \"Jim\", \"987-6543\"},\r\n            {3, \"Paul\", \"543-7890\"}\r\n        },\r\n        {\"CustomerID\", \"Name\", \"Phone\"}\r\n    )\r\n)",
            "Result": "{\r\n    [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n    [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n    [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ToRows",
      "Documentation": {
        "Documentation.Name": "Table.ToRows",
        "Documentation.Description": "从表中创建行值的嵌套列表的列表。",
        "Documentation.LongDescription": "从表 <code>table</code> 中创建嵌套表的列表。 每个列表项都是一个包含行值的内部列表。",
        "Documentation.Category": "Table.Conversions",
        "Documentation.Examples": [
          {
            "Description": "从表中创建行值的列表。",
            "Code": "Table.ToRows(\r\n    Table.FromRecords({\r\n        [CustomerID = 1, Name = \"Bob\", Phone = \"123-4567\"],\r\n        [CustomerID = 2, Name = \"Jim\", Phone = \"987-6543\"],\r\n        [CustomerID = 3, Name = \"Paul\", Phone = \"543-7890\"]\r\n    })\r\n)",
            "Result": "{\r\n    {1, \"Bob\", \"123-4567\"},\r\n    {2, \"Jim\", \"987-6543\"},\r\n    {3, \"Paul\", \"543-7890\"}\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "table": "table"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewError",
      "Documentation": {
        "Documentation.Name": "Table.ViewError",
        "Documentation.Description": "创建修改后的错误记录，该记录在视图上定义的处理程序引发时(通过 Table.View)将不会触发回退。",
        "Documentation.LongDescription": "根据 <code>errorRecord</code> 创建修改后的错误记录，该记录在视图上定义的处理程序引发时(通过 Table.View)将不会触发回退。",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Table.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Table.ViewFunction",
        "Documentation.Description": "创建一个可以由在视图上(通过 Table.View)定义的处理程序截获的函数。",
        "Documentation.LongDescription": "<p>创建一个基于可以在由 <code>Table.View</code> 创建的视图中处理的 <code>function</code> 的视图函数。</p>\r\n<p><code>Table.View</code> 的 <code>OnInvoke</code> 处理程序可用于定义视图函数的处理程序。</p>\r\n<p>与内置操作的处理程序一样，如果未指定 <code>OnInvoke</code> 处理程序，或如果处理程序未处理视图函数，或如果处理程序引发错误，则将 <code>function</code> 应用于视图顶部。</p>\r\n<p>有关 <code>Table.View</code> 和自定义视图函数的更完整的说明，请参阅已发布的 Power Query 自定义连接器文档。</p>",
        "Documentation.Category": "Table.Table construction",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Clean",
      "Documentation": {
        "Documentation.Name": "Text.Clean",
        "Documentation.Description": "返回所有控制字符均已删除的文本值。",
        "Documentation.LongDescription": "返回 <code>text</code> 的所有控制字符均已删除的文本值。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从文本值中删除换行和其他控制字符。",
            "Code": "Text.Clean(\"ABC#(lf)D\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Combine",
      "Documentation": {
        "Documentation.Name": "Text.Combine",
        "Documentation.Description": "将一系列文本值连接成一个文本值。",
        "Documentation.LongDescription": "返回将文本值列表，<code>texts</code>，合并为单个文本值的结果。<code>texts</code> 中存在的任何 <code>null</code> 值将被忽略。\r\n    可以指定在最终组合文本中使用的可选 <code>separator</code>。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "组合文本值 \"Seattle\" 和 \"WA\"。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"})",
            "Result": "\"SeattleWA\""
          },
          {
            "Description": "组合文本值 \"Seattle\" 和 \"WA\"，以逗号和空格分隔。",
            "Code": "Text.Combine({\"Seattle\", \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          },
          {
            "Description": "组合值 \"Seattle\"、<code>null</code> 和 \"WA\"，用逗号和空格分隔。(请注意，忽略了<code>null</code>。)",
            "Code": "Text.Combine({\"Seattle\", null, \"WA\"}, \", \")",
            "Result": "\"Seattle, WA\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "texts": "list",
        "separator": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.From",
      "Documentation": {
        "Documentation.Name": "Text.From",
        "Documentation.Description": "从给定的值创建文本值。",
        "Documentation.LongDescription": "返回 <code>value</code> 的文本表示形式。<code>value</code> 可以是 <code>number</code>、<code>date</code>、<code>time</code>、<code>datetime</code>、<code>datetimezone</code>、<code>logical</code>、<code>duration</code> 或 <code>binary</code> 值。\r\n    如果给定值为 Null，<code>Text.From</code> 将返回 Null。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "从数字 3 创建一个文本值。",
            "Code": "Text.From(3)",
            "Result": "\"3\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.FromBinary",
      "Documentation": {
        "Documentation.Name": "Text.FromBinary",
        "Documentation.Description": "将数据从二进制解码为文本。",
        "Documentation.LongDescription": "使用 <code>encoding</code> 类型将数据 <code>binary</code> 从二进制值解码为文本值。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "text",
      "Parameters": {
        "binary": "binary",
        "encoding": "TextEncoding.Type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.InferNumberType",
      "Documentation": {
        "Documentation.Name": "Text.InferNumberType",
        "Documentation.Description": "推断文本中已编码数字的粒度数字类型(Int64.Type、Double.Type 等)。",
        "Documentation.LongDescription": "推断 <code>text</code> 的粒度值类型(Int64.Type、Double.Type 等)。如果 <code>text</code> 不是数值，则会引发错误。还可提供可选的 <code>culture</code>(例如“en-US”)。",
        "Documentation.Category": "Text",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Length",
      "Documentation": {
        "Documentation.Name": "Text.Length",
        "Documentation.Description": "返回字符数。",
        "Documentation.LongDescription": "返回文本 <code>text</code> 中的字符数。",
        "Documentation.Category": "Text.Information",
        "Documentation.Examples": [
          {
            "Description": "查找文本 \"Hello World\" 中有多少个字符。",
            "Code": "Text.Length(\"Hello World\")",
            "Result": "11"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Lower",
      "Documentation": {
        "Documentation.Name": "Text.Lower",
        "Documentation.Description": "将所有字符转换为小写。",
        "Documentation.LongDescription": "返回将 <code>text</code> 中的所有字符转换为小写的结果。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "获取 \"AbCd\" 的小写版本。",
            "Code": "Text.Lower(\"AbCd\")",
            "Result": "\"abcd\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Proper",
      "Documentation": {
        "Documentation.Name": "Text.Proper",
        "Documentation.Description": "使每个字词的第一个字母为大写。",
        "Documentation.LongDescription": "返回只使文本值 <code>text</code> 中每个字词的第一个字符大写的结果。所有其他字母均以小写返回。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "对简单句子使用 <code>Text.Proper</code>。",
            "Code": "Text.Proper(\"the QUICK BrOWn fOx jUmPs oVER tHe LAzy DoG\")",
            "Result": "\"The Quick Brown Fox Jumps Over The Lazy Dog\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Reverse",
      "Documentation": {
        "Documentation.Name": "Text.Reverse",
        "Documentation.Description": "Text.Reverse",
        "Documentation.LongDescription": "反向所提供的 <code>text</code>。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "反向文本 \"123\"。",
            "Code": "Text.Reverse(\"123\")",
            "Result": "\"321\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToBinary",
      "Documentation": {
        "Documentation.Name": "Text.ToBinary",
        "Documentation.Description": "将文本编码为二进制格式。",
        "Documentation.LongDescription": "使用指定的 <code>encoding</code> 将给定的文本值 <code>text</code> 编码为二进制值。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "binary",
      "Parameters": {
        "text": "text",
        "encoding": "TextEncoding.Type",
        "includeByteOrderMark": "logical"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.ToList",
      "Documentation": {
        "Documentation.Name": "Text.ToList",
        "Documentation.Description": "从给定的文本值返回字符值列表。",
        "Documentation.LongDescription": "从给定的文本值 <code>text</code> 返回字符值列表。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": [
          {
            "Description": "从文本 \"Hello World\" 创建字符值列表。",
            "Code": "Text.ToList(\"Hello World\")",
            "Result": "{\r\n    \"H\",\r\n    \"e\",\r\n    \"l\",\r\n    \"l\",\r\n    \"o\",\r\n    \" \",\r\n    \"W\",\r\n    \"o\",\r\n    \"r\",\r\n    \"l\",\r\n    \"d\"\r\n}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "text": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Trim",
      "Documentation": {
        "Documentation.Name": "Text.Trim",
        "Documentation.Description": "删除所有前导空格和尾随空格。",
        "Documentation.LongDescription": "返回从文本值 <code>text</code> 删除所有前导空格和尾随空格的结果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从 \"     a b c d    \" 删除前导空格和尾随空格。",
            "Code": "Text.Trim(\"     a b c d    \")",
            "Result": "\"a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimEnd",
      "Documentation": {
        "Documentation.Name": "Text.TrimEnd",
        "Documentation.Description": "删除所有尾随空格。",
        "Documentation.LongDescription": "返回从文本值 <code>text</code> 删除所有尾随空格的结果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从 \"     a b c d    \" 删除尾随空格。",
            "Code": "Text.TrimEnd(\"     a b c d    \")",
            "Result": "\"     a b c d\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.TrimStart",
      "Documentation": {
        "Documentation.Name": "Text.TrimStart",
        "Documentation.Description": "删除所有前导空格。",
        "Documentation.LongDescription": "返回从文本值 <code>text</code> 删除所有前导空格的结果。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "从 \"     a b c d    \" 删除前导空格。",
            "Code": "Text.TrimStart(\"   a b c d    \")",
            "Result": "\"a b c d    \""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "trim": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Text.Upper",
      "Documentation": {
        "Documentation.Name": "Text.Upper",
        "Documentation.Description": "将所有字符转换为大写。",
        "Documentation.LongDescription": "返回将 <code>text</code> 中的所有字符转换为大写的结果。还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Transformations",
        "Documentation.Examples": [
          {
            "Description": "获取 \"aBcD\" 的大写版本。",
            "Code": "Text.Upper(\"aBcD\")",
            "Result": "\"ABCD\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "text": "text",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.EndOfHour",
      "Documentation": {
        "Documentation.Name": "Time.EndOfHour",
        "Documentation.Description": "返回小时结束值。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 表示的小时结束值，包括小数秒。保留时区信息。\r\n      <ul>\r\n        <li><code>dateTime</code>: 从中计算小时结束值的<code>time</code>、<code>datetime</code>或<code>datetimezone</code>值。</li>\r\n      </ul>",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "获取 5/14/2011 05:00:00 PM 的小时结尾。",
            "Code": "Time.EndOfHour(#datetime(2011, 5, 14, 17, 0, 0))",
            "Result": "#datetime(2011, 5, 14, 17, 59, 59.9999999)"
          },
          {
            "Description": "获取 5/17/2011 05:00:00 PM -7:00 的小时结尾。",
            "Code": "Time.EndOfHour(#datetimezone(2011, 5, 17, 5, 0, 0, -7, 0))",
            "Result": "#datetimezone(2011, 5, 17, 5, 59, 59.9999999, -7, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.From",
      "Documentation": {
        "Documentation.Name": "Time.From",
        "Documentation.Description": "从给定的值创建时间。",
        "Documentation.LongDescription": "从给定的 <code>value</code> 返回 <code>time</code> 值。还可提供可选的 <code>culture</code> (例如 “en-US”)。\r\n如果给定的 <code>value</code> 是 <code>null</code>，则 <code>Time.From</code> 将返回 <code>null</code>。如果给定的 <code>value</code> 是 <code>time</code>，则返回 <code>value</code>。以下类型的值可以转换为 <code>time</code> 值:\r\n      <ul>\r\n        <li><code>text</code>: 文本表示形式的 <code>time</code> 值。有关详细信息，请参阅 <code>Time.FromText</code>。</li>\r\n        <li><code>datetime</code>: <code>value</code> 的时间组件。</li>\r\n        <li><code>datetimezone</code>: 本地日期时间中等效于 <code>value</code> 的时间组件。</li>\r\n        <li><code>number</code>: 与由 <code>value</code> 表示的不完整天数等效的 <code>time</code>。如果 <code>value</code> 是负数或大于等于 1，则返回错误。</li>\r\n      </ul>\r\n如果 <code>value</code> 属于任何其他类型，则返回错误。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "将 <code>0.7575</code> 转换为 <code>time</code> 值。",
            "Code": "Time.From(0.7575)",
            "Result": "#time(18, 10, 48)"
          },
          {
            "Description": "将 <code>#datetime(1899, 12, 30, 06, 45, 12)</code> 转换为 <code>time</code> 值。",
            "Code": "Time.From(#datetime(1899, 12, 30, 06, 45, 12))",
            "Result": "#time(06, 45, 12)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "value": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.FromText",
      "Documentation": {
        "Documentation.Name": "Time.FromText",
        "Documentation.Description": "根据本地和通用以及自定义时间格式创建时间。",
        "Documentation.LongDescription": "根据文本表示形式 <code>text</code> 创建 <code>time</code> 值。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的<code>文本</code>值。要了解更多详细信息，请转到 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致尽最大努力解析时间。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"tt\"</code> 是 <code>\"AM\" 或 \"PM\"</code>，而在 <code>\"ar-EG\"</code> 中，<code>\"tt\"</code> 是 <code>\"ص\" 或 \"م\"</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 也可以是文本值。这与 <code>options</code><code> = [Format = null, Culture = <code>options</code>]</code> 时的行为相同。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "将 <code>\"10:12:31am\"</code> 转换为时间值。",
            "Code": "Time.FromText(\"10:12:31am\")",
            "Result": "#time(10, 12, 31)"
          },
          {
            "Description": "将 <code>\"1012\"</code> 转换为 Time 值。",
            "Code": "Time.FromText(\"1012\")",
            "Result": "#time(10, 12, 00)"
          },
          {
            "Description": "将 <code>\"10\"</code> 转换为 Time 值。",
            "Code": "Time.FromText(\"10\")",
            "Result": "#time(10, 00, 00)"
          }
        ]
      },
      "ReturnType": "time",
      "Parameters": {
        "text": "text",
        "options": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Hour",
      "Documentation": {
        "Documentation.Name": "Time.Hour",
        "Documentation.Description": "返回小时部分。",
        "Documentation.LongDescription": "返回所提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的小时部分。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2011, 12, 31, 9, 15, 36) 中的小时。",
            "Code": "Time.Hour(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "9"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Minute",
      "Documentation": {
        "Documentation.Name": "Time.Minute",
        "Documentation.Description": "返回分钟部分。",
        "Documentation.LongDescription": "返回所提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的分钟部分。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "查找 #datetime(2011, 12, 31, 9, 15, 36) 中的分钟。",
            "Code": "Time.Minute(#datetime(2011, 12, 31, 9, 15, 36))",
            "Result": "15"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.Second",
      "Documentation": {
        "Documentation.Name": "Time.Second",
        "Documentation.Description": "返回秒部分。",
        "Documentation.LongDescription": "返回所提供的 <code>time</code>、<code>datetime</code> 或 <code>datetimezone</code> 值 <code>dateTime</code> 的秒部分。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "查找日期时间值中的秒值。",
            "Code": "Time.Second(#datetime(2011, 12, 31, 9, 15, 36.5))",
            "Result": "36.5"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.StartOfHour",
      "Documentation": {
        "Documentation.Name": "Time.StartOfHour",
        "Documentation.Description": "返回小时开始值。",
        "Documentation.LongDescription": "返回 <code>dateTime</code> 表示的小时开始值。\r\n    <code>dateTime</code> 必须是 <code>time</code>、<code>datetime</code>或<code>datetimezone</code>值。",
        "Documentation.Category": "Date",
        "Documentation.Examples": [
          {
            "Description": "查找 2011 年 10 月 10 日上午 8:10:32 的小时开始值。",
            "Code": "Time.StartOfHour(#datetime(2011, 10, 10, 8, 10, 32))",
            "Result": "#datetime(2011, 10, 10, 8, 0, 0)"
          }
        ]
      },
      "ReturnType": "any",
      "Parameters": {
        "dateTime": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToRecord",
      "Documentation": {
        "Documentation.Name": "Time.ToRecord",
        "Documentation.Description": "返回包含时间值的各个部分的记录。",
        "Documentation.LongDescription": "返回包含给定时间值 <code>time</code> 的各个部分的记录。\r\n <ul>\r\n        <li><code>time</code>: 要从中计算其各个部分的记录的 <code>time</code> 值。</li>\r\n      </ul>",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#time(11, 56, 2)</code> 值转换为包含时间值的记录。",
            "Code": "Time.ToRecord(#time(11, 56, 2))",
            "Result": "[\r\n      Hour = 11,\r\n      Minute = 56,\r\n      Second = 2\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "time": "time"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Time.ToText",
      "Documentation": {
        "Documentation.Name": "Time.ToText",
        "Documentation.Description": "返回时间值的文本表示形式。",
        "Documentation.LongDescription": "返回 <code>time</code> 的文本表示形式。可以提供可选的 <code>record</code> 参数 <code>options</code> 来指定其他属性。<code>culture</code> 仅用于旧版工作流(见下文)。<code>record</code> 可以包含以下字段:\r\n<ul>\r\n   <li><code>Format</code>: 指示要使用的格式的 <code>text</code> 值。要了解更多详细信息，请访问 https://go.microsoft.com/fwlink/?linkid=2180104 和 https://go.microsoft.com/fwlink/?linkid=2180105。省略此字段或提供 <code>null</code> 将导致使用 <code>Culture</code> 定义的默认值设置日期格式。</li>\r\n   <li><code>Culture</code>: 如果 <code>Format</code> 不为 null，则 <code>Culture</code> 将控制某些格式说明符。例如，在 <code>\"en-US\"</code> 中，<code>\"tt\"</code> 是 <code>\"AM\" 或 \"PM\"</code>，而在 <code>\"ar-EG\"</code> 中，<code>\"tt\"</code> 是 <code>\"ص\" 或 \"م\"</code>。当 <code>Format</code> 为 <code>null</code> 时，<code>Culture</code> 控制要使用的默认格式。当 <code>Culture</code> 为 <code>null</code> 或省略时，将使用 <code>Culture.Current</code>。</li>\r\n</ul>\r\n要支持旧版工作流，<code>options</code> 和 <code>culture</code> 也可以是文本值。这与 <code>options</code><code> = [Format = <code>options</code>, Culture = <code>culture</code>]</code> 时的行为相同。",
        "Documentation.Category": "Time",
        "Documentation.Examples": [
          {
            "Description": "将 <code>#time(01, 30, 25)</code> 转换为<code>文本</code>值。<i>结果输出可能因当前区域性而异。</i>",
            "Code": "Time.ToText(#time(11, 56, 2))",
            "Result": "\"11:56 AM\""
          },
          {
            "Description": "使用自定义格式和德语区域性进行转换。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"hh:mm\", Culture=\"de-DE\"])",
            "Result": "\"11:56\""
          },
          {
            "Description": "使用标准时间格式进行转换。",
            "Code": "Time.ToText(#time(11, 56, 2), [Format=\"T\", Culture=\"de-DE\"])",
            "Result": "\"11:56:02\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "time": "time",
        "options": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Troux.TestConnection",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Twilio.URL",
      "Documentation": {},
      "ReturnType": "any",
      "Parameters": {
        "url": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ClosedRecord",
      "Documentation": {
        "Documentation.Name": "Type.ClosedRecord",
        "Documentation.Description": "返回给定记录类型(或同一类型，如果其已关闭)的已关闭版本。",
        "Documentation.LongDescription": "返回给定 <code>record</code> <code>type</code> (或同一类型，如果其已关闭)的已关闭版本。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "创建 <code>type [ A = number,…]</code> 的已关闭版本。",
            "Code": "Type.ClosedRecord(type [A = number, ...])",
            "Result": "type [A = number]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Facets",
      "Documentation": {
        "Documentation.Name": "Type.Facets",
        "Documentation.Description": "返回类型的 Facet。",
        "Documentation.LongDescription": "返回一条包含 <code>type</code> 的 Facet 的记录。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionParameters",
        "Documentation.Description": "返回带有字段值的记录以设置函数类型的参数名称，其值设置为对应类型。",
        "Documentation.LongDescription": "返回带有字段值的记录以设置 <code>type</code> 的参数名称，其值设置为对应类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "找到函数 <code>(x as number, y as text)</code> 的参数类型。",
            "Code": "Type.FunctionParameters(type function (x as number, y as text) as any)",
            "Result": "[x = type number, y = type text]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionRequiredParameters",
      "Documentation": {
        "Documentation.Name": "Type.FunctionRequiredParameters",
        "Documentation.Description": "返回一个数字，表明调用函数的类型所需参数的最小数量。",
        "Documentation.LongDescription": "返回一个数字，表明调用函数的输入 <code>type</code> 所需参数的最小数量。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "找到函数 <code>(x as number, optional y as text)</code> 所需参数的数量。",
            "Code": "Type.FunctionRequiredParameters(type function (x as number, optional y as text) as any)",
            "Result": "1"
          }
        ]
      },
      "ReturnType": "number",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.FunctionReturn",
      "Documentation": {
        "Documentation.Name": "Type.FunctionReturn",
        "Documentation.Description": "返回由函数类型返回的类型。",
        "Documentation.LongDescription": "返回由函数 <code>type</code> 返回的类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "找到 <code>() as any)</code> 的返回类型。",
            "Code": "Type.FunctionReturn(type function () as any)",
            "Result": "type any"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsNullable",
      "Documentation": {
        "Documentation.Name": "Type.IsNullable",
        "Documentation.Description": "如果类型是可空类型则返回 True；否则，返回 False。",
        "Documentation.LongDescription": "如果类型是 <code>nullable</code> 类型则返回 <code>true</code>；否则，返回 <code>false</code>。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "确定 <code>number</code> 是否可空。",
            "Code": "Type.IsNullable(type number)",
            "Result": "false"
          },
          {
            "Description": "确定 <code>type nullable number</code> 是否可空。",
            "Code": "Type.IsNullable(type nullable number)",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.IsOpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.IsOpenRecord",
        "Documentation.Description": "返回记录类型是否打开。",
        "Documentation.LongDescription": "返回 <code>logical</code> 表明记录 <code>type</code> 是否打开。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "决定记录 <code>type [ A = number, ...]</code> 是否打开。",
            "Code": "Type.IsOpenRecord(type [A = number, ...])",
            "Result": "true"
          }
        ]
      },
      "ReturnType": "logical",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.ListItem",
      "Documentation": {
        "Documentation.Name": "Type.ListItem",
        "Documentation.Description": "从列表类型中返回项类型。",
        "Documentation.LongDescription": "从列表 <code>type</code> 中返回项类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "从列表 <code>{number}</code> 中找到项类型。",
            "Code": "Type.ListItem(type {number})",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.NonNullable",
      "Documentation": {
        "Documentation.Name": "Type.NonNullable",
        "Documentation.Description": "从一个类型返回非空类型。",
        "Documentation.LongDescription": "从 <code>type</code> 返回非 <code>nullable</code> 类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "返回 <code>type nullable number</code> 的非可空类型。",
            "Code": "Type.NonNullable(type nullable number)",
            "Result": "type number"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.OpenRecord",
      "Documentation": {
        "Documentation.Name": "Type.OpenRecord",
        "Documentation.Description": "返回给定记录类型(或同一类型，如果其已打开)的打开版本。",
        "Documentation.LongDescription": "返回给定 <code>record</code> <code>type</code> (或同一类型，如果其已打开)的打开版本。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "创建 <code>type [ A = number]</code> 的打开版本。",
            "Code": "Type.OpenRecord(type [A = number])",
            "Result": "type [A = number, ...]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.RecordFields",
      "Documentation": {
        "Documentation.Name": "Type.RecordFields",
        "Documentation.Description": "返回一个记录，描述记录类型的字段，其中返回记录类型的每个字段拥有对应的名称和值。",
        "Documentation.LongDescription": "返回描述记录 <code>type</code> 的字段的记录。在记录 <code>[ Type = type, Optional = logical ]</code> 的格式中，返回的记录类型的每个字段都有对应的名称和值。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "找到记录 <code>[ A = number, optional B = any]</code> 的名称和值。",
            "Code": "Type.RecordFields(type [A = number, optional B = any])",
            "Result": "[\r\n    A = [Type = type number, Optional = false],\r\n    B = [Type = type any, Optional = true]\r\n]"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "type": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableKeys",
      "Documentation": {
        "Documentation.Name": "Type.TableKeys",
        "Documentation.Description": "返回给定表类型的可能为空的键列表。",
        "Documentation.LongDescription": "返回给定表类型的键可能为空的列表。<br>\r\n    <br>\r\n    每个键都是使用以下格式的记录定义的:\r\n    <ul>\r\n      <li>\r\n        <code>Columns</code>: 定义主键的列名列表\r\n      </li>\r\n      <li>\r\n        <code>Primary</code>: 如果键是表的主键，则 <code>true</code>；否则，<code>false</code>\r\n      </li>\r\n    </ul>\r\n    ",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "返回表类型的键信息。",
            "Code": "let\r\n    BaseType = type table [ID = number, Name = text],\r\n    AddKey = Type.AddTableKey(BaseType, {\"ID\"}, true),\r\n    DetailsOfKeys = Type.TableKeys(AddKey)\r\nin\r\n    DetailsOfKeys",
            "Result": "{[Columns = {\"ID\"}, Primary = true]}"
          }
        ]
      },
      "ReturnType": "list",
      "Parameters": {
        "tableType": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.TableRow",
      "Documentation": {
        "Documentation.Name": "Type.TableRow",
        "Documentation.Description": "返回表类型的行类型。",
        "Documentation.LongDescription": "返回指定表类型的行类型。结果将始终为记录类型。",
        "Documentation.Category": "Type",
        "Documentation.Examples": [
          {
            "Description": "返回简单表的行类型信息。",
            "Code": "let\r\n    tableRowType = Type.TableRow(Value.Type(#table({\"Column1\"}, {})))\r\nin\r\n    Type.RecordFields(tableRowType)",
            "Result": "[Column1 = [Type = type any, Optional = false]]"
          }
        ]
      },
      "ReturnType": "type",
      "Parameters": {
        "table": "type"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Type.Union",
      "Documentation": {
        "Documentation.Name": "Type.Union",
        "Documentation.Description": "返回类型列表的并集。",
        "Documentation.LongDescription": "返回 <code>types</code> 中类型的并集。",
        "Documentation.Category": "Type",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "types": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.BuildQueryString",
      "Documentation": {
        "Documentation.Name": "Uri.BuildQueryString",
        "Documentation.Description": "将记录汇编入 URI 查询字符串。",
        "Documentation.LongDescription": "将记录 <code>query</code> 汇编入 URI 查询字符串，根据需要转义字符。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "对包含某些特殊字符的查询字符串进行编码。",
            "Code": "Uri.BuildQueryString([a = \"1\", b = \"+$\"])",
            "Result": "\"a=1&b=%2B%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "query": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.EscapeDataString",
      "Documentation": {
        "Documentation.Name": "Uri.EscapeDataString",
        "Documentation.Description": "根据 RFC 3986 对特殊字符进行编码。",
        "Documentation.LongDescription": "根据 RFC 3986 的规则对输入 <code>data</code> 中的特殊字符进行编码。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "对“+money$”中的特殊字符进行编码。",
            "Code": "Uri.EscapeDataString(\"+money$\")",
            "Result": "\"%2Bmoney%24\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "data": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Uri.Parts",
      "Documentation": {
        "Documentation.Name": "Uri.Parts",
        "Documentation.Description": "返回输入绝对 URI 的组成部分作为记录。",
        "Documentation.LongDescription": "返回输入 <code>absoluteUri</code> 的组成部分作为记录，包含诸如方案、主机、端口、路径、查询、片段、用户名和密码等此类值。",
        "Documentation.Category": "Uri",
        "Documentation.Examples": [
          {
            "Description": "查找绝对 URI \"www.adventure-works.com\" 的组成部分。",
            "Code": "Uri.Parts(\"www.adventure-works.com\")",
            "Result": "[\r\n    Scheme = \"http\",\r\n    Host = \"www.adventure-works.com\",\r\n    Port = 80,\r\n    Path = \"/\",\r\n    Query = [],\r\n    Fragment = \"\",\r\n    UserName = \"\",\r\n    Password = \"\"\r\n]"
          },
          {
            "Description": "解码百分比编码字符串。",
            "Code": "let\r\n    UriUnescapeDataString = (data as text) as text => Uri.Parts(\"http://contoso?a=\" & data)[Query][a]\r\nin\r\n    UriUnescapeDataString(\"%2Bmoney%24\")",
            "Result": "\"+money$\""
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "absoluteUri": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.AccountContents",
      "Documentation": {
        "Documentation.Description": "输入 Azure DevOps Analytics Service 的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.AccountContents",
        "Documentation.Name": "VSTS.AccountContents",
        "Documentation.LongDescription": "返回通过 Azure DevOps Analytics Service URL 下载为二进制值的内容。此函数对各个组织使用不同凭据。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "VSTS.Contents",
      "Documentation": {
        "Documentation.Description": "输入 Azure DevOps Analytics Service 的 URL。",
        "Documentation.DisplayName": "VSTS",
        "Documentation.Caption": "VSTS.Contents",
        "Documentation.Name": "VSTS.Contents",
        "Documentation.LongDescription": "返回通过 Azure DevOps Analytics Service URL 下载为二进制值的内容。此函数对所有可访问的组织使用全局凭据。"
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Alternates",
      "Documentation": {
        "Documentation.Name": "Value.Alternates",
        "Documentation.Description": "表示备用查询计划。",
        "Documentation.LongDescription": "表示通过 Value.Expression(Value.Optimize(...)) 获取的查询计划表达式中的备用查询计划。不适用于其他用途。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "alternates": "list"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Expression",
      "Documentation": {
        "Documentation.Name": "Value.Expression",
        "Documentation.Description": "返回表示值表达式的抽象语法树(AST)。",
        "Documentation.LongDescription": "返回表示值表达式的抽象语法树(AST)",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Firewall",
      "Documentation": {
        "Documentation.Name": "Value.Firewall",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "key": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.FromText",
      "Documentation": {
        "Documentation.Name": "Value.FromText",
        "Documentation.Description": "从文本表示形式创建强类型的值。",
        "Documentation.LongDescription": "从文本表示形式 <code>text</code> 对值解码，并将其解释为具有适当类型的值。\r\n    <code>Value.FromText</code> 采用一个文本值并返回数值、逻辑值、Null 值、日期时间值、期间值或文本值。空文本值会被解释为 Null 值。\r\n    还可提供可选的 <code>culture</code> (例如 \"en-US\")。",
        "Documentation.Category": "Text.Conversions from and to text",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "text": "any",
        "culture": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Lineage",
      "Documentation": {
        "Documentation.Name": "Value.Lineage",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Metadata",
      "Documentation": {
        "Documentation.Name": "Value.Metadata",
        "Documentation.Description": "返回包含输入的元数据的记录。",
        "Documentation.LongDescription": "返回包含输入的元数据的记录。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Optimize",
      "Documentation": {
        "Documentation.Name": "Value.Optimize",
        "Documentation.Description": "表示 Value.Expression，它用于为值返回已优化的表达式。",
        "Documentation.LongDescription": "在 Value.Expression 中使用时，如果 <code>value</code> 表示可优化的查询，则此函数指示应返回已优化的表达式。否则，<code>value</code> 将通过且不产生任何影响。",
        "Documentation.Category": "Expression",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.RemoveMetadata",
      "Documentation": {
        "Documentation.Name": "Value.RemoveMetadata",
        "Documentation.Description": "提取元数据的输入。",
        "Documentation.LongDescription": "提取元数据的输入。",
        "Documentation.Category": "Metadata",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any",
        "metaValue": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ResourceExpression",
      "Documentation": {
        "Documentation.Name": "Value.ResourceExpression",
        "Documentation.Description": "Value.ResourceExpression",
        "Documentation.LongDescription": "Value.ResourceExpression",
        "Documentation.Category": "",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.Type",
      "Documentation": {
        "Documentation.Name": "Value.Type",
        "Documentation.Description": "返回给定值的类型。",
        "Documentation.LongDescription": "返回给定值的类型。",
        "Documentation.Category": "Values",
        "Documentation.Examples": []
      },
      "ReturnType": "type",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.VersionIdentity",
      "Documentation": {
        "Documentation.Name": "Value.VersionIdentity",
        "Documentation.Description": "Value.VersionIdentity",
        "Documentation.LongDescription": "Value.VersionIdentity",
        "Documentation.Category": "Action",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "value": "any"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewError",
      "Documentation": {
        "Documentation.Name": "Value.ViewError",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "record",
      "Parameters": {
        "errorRecord": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Value.ViewFunction",
      "Documentation": {
        "Documentation.Name": "Value.ViewFunction",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "function",
      "Parameters": {
        "function": "function"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Variable.Value",
      "Documentation": {
        "Documentation.Name": "Variable.Value",
        "Documentation.Description": "此函数仅供内部使用。",
        "Documentation.LongDescription": "此函数仅供内部使用。",
        "Documentation.Category": "Values.Implementation",
        "Documentation.Examples": []
      },
      "ReturnType": "any",
      "Parameters": {
        "identifier": "text"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.BrowserContents",
      "Documentation": {
        "Documentation.Name": "Web.BrowserContents",
        "Documentation.Description": "返回由 Web 浏览器查看的指定 URL 的 HTML。",
        "Documentation.LongDescription": "返回指定 <code>url</code> 的 HTML (如 Web 浏览器所查看)。可以提供可选记录参数 <code>options</code> 来指定其他属性。记录可包含以下字段:\r\n     <ul>\r\n         <li><code>ApiKeyName</code>: 如果目标站点具有 API 密钥的概念，则此参数可用于指定必须在 URL 中使用的密钥参数的名称(而不是值)。凭据中提供了实际的密钥值。</li>\r\n         <li><code>WaitFor</code>:指定在下载 HTML 前要等待完成的条件，除了等待页面加载以外(始终等待)。可以是包含 Timeout 和/或 Selector 字段的记录。如果仅指定了 Timeout，函数会在 HTML 下载前等待指定的时间。如果同时指定了 Selector 和 Timeout，且在 Timeout 后 Selector 才出现在页面上，将会抛出错误。如果指定了 Selector 而未指定 Timeout，默认应用 30 秒 Timeout。</li>\r\n      </ul>\r\n    ",
        "Documentation.Category": "访问数据",
        "Documentation.Examples": [
          {
            "Description": "返回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\")",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "等待 CSS 选择器出现后返回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\"]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "等待十秒后返回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          },
          {
            "Description": "等待 CSS 选择器出现(最多十秒)后返回 https://microsoft.com 的 HTML。",
            "Code": "Web.BrowserContents(\"https://microsoft.com\", [WaitFor = [Selector = \"div.ready\", Timeout = #duration(0,0,0,10)]])",
            "Result": "\"<!DOCTYPE html><html xmlns=...\""
          }
        ]
      },
      "ReturnType": "text",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Contents",
      "Documentation": {
        "Documentation.Name": "Web.Contents",
        "Documentation.Description": "将从该 URL 下载的内容返回为二进制。",
        "Documentation.LongDescription": "以二进制形式返回从 <code>url</code> 下载的内容。可以提供可选记录参数 <code>options</code> 以指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>Query</code> : 以编程方式将查询参数添加到 URL，无需担心转义。</li>\r\n<li><code>ApiKeyName</code> : 如果目标站点具有 API 密钥的概念，则此参数可用于指定必须在 URL 中使用的密钥参数的名称(而不是值)。凭据中提供了实际的密钥值。</li>\r\n<li><code>Headers</code> : 将此值指定为记录将向 HTTP 请求提供其他标头。</li>\r\n<li><code>Timeout</code> : 如果将此值指定为持续时间，则将更改 HTTP 请求的超时时间。默认值为 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 如果将此值指定为列表，则将排除这些 HTTP 标头键，使其不作为用于缓存数据的计算的一部分。</li>\r\n<li><code>IsRetry</code> : 将此逻辑值指定为 true 将在提取数据时忽略缓存中的所有现有响应。</li>\r\n<li><code>ManualStatusHandling</code> : 如果将此值指定为列表，将阻止对其响应具有这些状态代码之一的 HTTP 请求进行任何内置处理。</li>\r\n<li><code>RelativePath</code> : 如果将此值指定为文本，则会在发出请求之前将其追加到基 URL。</li>\r\n<li><code>Content</code> : 指定此值会将 Web 请求从 GET 更改为 POST，并使用选项的值作为 POST 的内容。</li>\r\n</ul>\r\n\r\n    HTTP 请求是作为 GET (未指定内容时)或 POST (如果存在内容)发出的。POST 请求只能匿名发出。\r\n    <br>\r\n    HTTP 响应的标头可作为二进制结果的元数据提供。在自定义数据连接器上下文之外，只有一部分响应标头可用(出于安全原因)。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "使用 RelativePath 和“查询”选项检索 <code>\"https://bing.com/search?q=Power+Query\"</code> 的内容。这些选项可用于动态查询静态基 URL。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Contents(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "binary"
          },
          {
            "Description": "对 URL 执行 POST，以传递二进制 JSON 有效负载并将响应分析为 JSON。",
            "Code": "let\r\n    url = ...,\r\n    headers = [#\"Content-Type\" = \"application/json\"],\r\n    postData = Json.FromValue([x = 235.7, y = 41.53]),\r\n    response = Web.Contents(\r\n        url,\r\n        [\r\n            Headers = headers,\r\n            Content = postData\r\n        ]\r\n    ),\r\n    jsonResponse = Json.Document(response)\r\nin\r\n    jsonResponse",
            "Result": "table"
          },
          {
            "Description": "连接到接受身份验证密钥作为其查询字符串一部分的安全 URL。密钥并非通过在 M 中对密钥进行硬编码来提供(这回带来安全风险)，\r\n    而是通过在 M 中指定密钥名称(而不是其值)、选择 Web API 身份验证，并输入密钥值作为 Web API 凭据的一部分来实现。\r\n    以这种方式使用时，以下示例将生成对 <code>\"https://contoso.com/api/customers/get?api_key=******\"</code> 的请求。",
            "Code": "Web.Contents(\"https://contoso.com/api/customers/get\", [ApiKeyName=\"api_key\"])",
            "Result": "binary"
          }
        ]
      },
      "ReturnType": "binary",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    },
    {
      "Name": "Web.Headers",
      "Documentation": {
        "Documentation.Name": "Web.Headers",
        "Documentation.Description": "返回从 URL 下载的 HTTP 标头作为记录值。",
        "Documentation.LongDescription": "返回从 <code>url</code> 下载的标头作为记录。可以提供可选记录参数 <code>options</code>来指定其他属性。记录可以包含以下字段:\r\n    <ul>\r\n<li><code>Query</code> : 以编程方式将查询参数添加到 URL，无需担心转义。</li>\r\n<li><code>ApiKeyName</code> : 如果目标站点具有 API 密钥的概念，则此参数可用于指定必须在 URL 中使用的密钥参数的名称(而不是值)。凭据中提供了实际的密钥值。</li>\r\n<li><code>Headers</code> : 将此值指定为记录将向 HTTP 请求提供其他标头。</li>\r\n<li><code>Timeout</code> : 如果将此值指定为持续时间，则将更改 HTTP 请求的超时时间。默认值为 100 秒。</li>\r\n<li><code>ExcludedFromCacheKey</code> : 如果将此值指定为列表，则将排除这些 HTTP 标头键，使其不作为用于缓存数据的计算的一部分。</li>\r\n<li><code>IsRetry</code> : 将此逻辑值指定为 true 将在提取数据时忽略缓存中的所有现有响应。</li>\r\n<li><code>ManualStatusHandling</code> : 如果将此值指定为列表，将阻止对其响应具有这些状态代码之一的 HTTP 请求进行任何内置处理。</li>\r\n<li><code>RelativePath</code> : 如果将此值指定为文本，则会在发出请求之前将其追加到基 URL。</li>\r\n</ul>\r\n\r\n    使用 HEAD 方法发出 HTTP 请求。在自定义数据连接器上下文之外，只有一部分响应标头可用(出于安全原因)。\r\n    ",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": [
          {
            "Description": "使用 RelativePath 和查询选项查询 <code>\"https://bing.com/search?q=Power+Query\"</code> 的 HTTP 标头。",
            "Code": "let\r\n    searchText = \"Power Query\"\r\nin\r\n    Web.Headers(\r\n        \"https://www.bing.com\",\r\n        [\r\n            RelativePath = \"search\",\r\n            Query = [q = searchText]\r\n        ]\r\n    )",
            "Result": "([\r\n    #\"Cache-Control\" = \"private, max-age=0\",\r\n    #\"Content-Encoding\" = \"gzip\",\r\n    #\"Content-Length\" = \"0\",\r\n    #\"Content-Type\" = \"text/html; charset=utf-8\",\r\n    Date = \"Tue, 14 Dec 2021 16:57:25 GMT\",\r\n    Expires = \"Tue, 14 Dec 2021 16:56:25 GMT\",\r\n    Vary = \"Accept-Encoding\"\r\n]\r\nmeta [\r\n    Response.Status = 200\r\n])"
          }
        ]
      },
      "ReturnType": "record",
      "Parameters": {
        "url": "text",
        "options": "record"
      },
      "RequiredParameters": "1"
    }
  ],
  "enumerations": [
    {
      "Name": "AccessControlEntry.ConditionContextType",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.ConditionContextType",
        "Documentation.Description": "针对其评估访问控制项(ACE)条件的授权上下文。",
        "Documentation.LongDescription": "针对其评估访问控制项(ACE)条件的授权上下文。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlEntry.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlEntry.Type",
        "Documentation.Description": "访问控制项(ACE)的表。",
        "Documentation.LongDescription": "表示授权规则的访问控制项(ACE)的排序表。针对当前授权上下文(按顺序)评估每行且 <code>Condition</code> 表达式返回 true 的第一行确定适用哪种规则。<code>Action</code> 列表示规则适用的操作类型。<code>AccessControlKind</code> 列确定是否允许或拒绝该操作的访问。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "AccessControlKind.Type",
      "Documentation": {
        "Documentation.Name": "AccessControlKind.Type",
        "Documentation.Description": "指定访问控制的类型。",
        "Documentation.LongDescription": "指定访问控制的类型。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Any.Type",
      "Documentation": {
        "Documentation.Name": "Any.Type",
        "Documentation.Description": "表示所有值的类型。",
        "Documentation.LongDescription": "表示所有值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Binary.Type",
      "Documentation": {
        "Documentation.Name": "Binary.Type",
        "Documentation.Description": "表示所有二进制值的类型。",
        "Documentation.LongDescription": "表示所有二进制值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "BinaryEncoding.Type",
      "Documentation": {
        "Documentation.Name": "BinaryEncoding.Type",
        "Documentation.Description": "指定二进制编码的类型。",
        "Documentation.LongDescription": "指定二进制编码的类型。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "BinaryOccurrence.Type",
      "Documentation": {
        "Documentation.Name": "BinaryOccurrence.Type",
        "Documentation.Description": "指定项应在组中出现的次数。",
        "Documentation.LongDescription": "指定项应在组中出现的次数。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "BufferMode.Type",
      "Documentation": {
        "Documentation.Name": "BufferMode.Type",
        "Documentation.Description": "描述要执行的缓冲类型。",
        "Documentation.LongDescription": "描述要执行的缓冲类型。",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Byte.Type",
      "Documentation": {
        "Documentation.Name": "Byte.Type",
        "Documentation.Description": "表示所有字节的类型。",
        "Documentation.LongDescription": "表示所有字节的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ByteOrder.Type",
      "Documentation": {
        "Documentation.Name": "ByteOrder.Type",
        "Documentation.Description": "指定字节顺序。",
        "Documentation.LongDescription": "指定字节顺序。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Character.Type",
      "Documentation": {
        "Documentation.Name": "Character.Type",
        "Documentation.Description": "表示所有字符的类型。",
        "Documentation.LongDescription": "表示所有字符的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Compression.Type",
      "Documentation": {
        "Documentation.Name": "Compression.Type",
        "Documentation.Description": "指定压缩类型。",
        "Documentation.LongDescription": "指定压缩类型。",
        "Documentation.AllowedValues": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "CsvStyle.Type",
      "Documentation": {
        "Documentation.Name": "CsvStyle.Type",
        "Documentation.Description": "说明 Csv 文档中引号的重要性。",
        "Documentation.LongDescription": "说明 Csv 文档中引号的重要性。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Currency.Type",
      "Documentation": {
        "Documentation.Name": "Currency.Type",
        "Documentation.Description": "表示货币值的类型。",
        "Documentation.LongDescription": "表示货币值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Date.Type",
      "Documentation": {
        "Documentation.Name": "Date.Type",
        "Documentation.Description": "表示所有日期值的类型。",
        "Documentation.LongDescription": "表示所有日期值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTime.Type",
      "Documentation": {
        "Documentation.Name": "DateTime.Type",
        "Documentation.Description": "表示不含关联时区的所有日期和时间值的类型。",
        "Documentation.LongDescription": "表示不含关联时区的所有日期和时间值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "DateTimeZone.Type",
      "Documentation": {
        "Documentation.Name": "DateTimeZone.Type",
        "Documentation.Description": "表示相对于某个时区的所有日期和时间值的类型。",
        "Documentation.LongDescription": "表示相对于某个时区的所有日期和时间值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Day.Type",
      "Documentation": {
        "Documentation.Name": "Day.Type",
        "Documentation.Description": "指定星期几。",
        "Documentation.LongDescription": "指定星期几。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Decimal.Type",
      "Documentation": {
        "Documentation.Name": "Decimal.Type",
        "Documentation.Description": "表示固定点小数的类型。",
        "Documentation.LongDescription": "表示固定点小数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Double.Type",
      "Documentation": {
        "Documentation.Name": "Double.Type",
        "Documentation.Description": "表示双精度浮点数的类型。",
        "Documentation.LongDescription": "表示双精度浮点数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Duration.Type",
      "Documentation": {
        "Documentation.Name": "Duration.Type",
        "Documentation.Description": "表示所有 duration 值的类型",
        "Documentation.LongDescription": "表示所有 duration 值的类型",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ExtraValues.Type",
      "Documentation": {
        "Documentation.Name": "ExtraValues.Type",
        "Documentation.Description": "指定对包含的列数多于预期的行中的额外值应采取的操作。",
        "Documentation.LongDescription": "指定对包含的列数多于预期的行中的额外值应采取的操作。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Function.Type",
      "Documentation": {
        "Documentation.Name": "Function.Type",
        "Documentation.Description": "表示所有函数的类型。",
        "Documentation.LongDescription": "表示所有函数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "GroupKind.Type",
      "Documentation": {
        "Documentation.Name": "GroupKind.Type",
        "Documentation.Description": "指定分组类型。",
        "Documentation.LongDescription": "可以使用相同的键值生成多个本地组，但只可以为给定的键值生成一个全局组。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Guid.Type",
      "Documentation": {
        "Documentation.Name": "Guid.Type",
        "Documentation.Description": "表示 Guid 值的类型。",
        "Documentation.LongDescription": "表示 Guid 值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "HiveProtocol.Type",
      "Documentation": {
        "Documentation.Name": "HiveProtocol.Type",
        "Documentation.Description": "HiveProtocolEnum",
        "Documentation.AllowedValues": [
          1,
          2
        ]
      }
    },
    {
      "Name": "Identity.Type",
      "Documentation": {
        "Documentation.Name": "Identity.Type",
        "Documentation.Description": "标识代表用户、组、设备或其他可识别的项。",
        "Documentation.LongDescription": "标识代表用户、组、设备或其他可识别的项。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "IdentityProvider.Type",
      "Documentation": {
        "Documentation.Name": "IdentityProvider.Type",
        "Documentation.Description": "定义在其中创建和比较标识的范围。",
        "Documentation.LongDescription": "定义在其中创建和比较标识的范围。",
        "Documentation.Category": "Accessing data",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int16.Type",
      "Documentation": {
        "Documentation.Name": "Int16.Type",
        "Documentation.Description": "用于表示带符号的 16 位整数的类型。",
        "Documentation.LongDescription": "用于表示带符号的 16 位整数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int32.Type",
      "Documentation": {
        "Documentation.Name": "Int32.Type",
        "Documentation.Description": "表示 32 位有符号整数的类型。",
        "Documentation.LongDescription": "表示 32 位有符号整数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int64.Type",
      "Documentation": {
        "Documentation.Name": "Int64.Type",
        "Documentation.Description": "表示 64 位有符号整数的类型。",
        "Documentation.LongDescription": "表示 64 位有符号整数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Int8.Type",
      "Documentation": {
        "Documentation.Name": "Int8.Type",
        "Documentation.Description": "表示 8 位有符号整数的类型。",
        "Documentation.LongDescription": "表示 8 位有符号整数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "JoinAlgorithm.Type",
      "Documentation": {
        "Documentation.Name": "JoinAlgorithm.Type",
        "Documentation.Description": "指定联接操作中要使用的联接算法。",
        "Documentation.LongDescription": "指定联接操作中要使用的联接算法。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "JoinKind.Type",
      "Documentation": {
        "Documentation.Name": "JoinKind.Type",
        "Documentation.Description": "指定联接操作的类型。",
        "Documentation.LongDescription": "指定联接操作的类型。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      }
    },
    {
      "Name": "JoinSide.Type",
      "Documentation": {
        "Documentation.Name": "JoinSide.Type",
        "Documentation.Description": "指定联接的左表或右表。",
        "Documentation.LongDescription": "指定联接的左表或右表。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "LimitClauseKind.Type",
      "Documentation": {
        "Documentation.Name": "LimitClauseKind.Type",
        "Documentation.Description": "描述此数据源使用的 SQL 方言支持的限制子句类型。",
        "Documentation.LongDescription": "描述此数据源使用的 SQL 方言支持的限制子句类型。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "List.Type",
      "Documentation": {
        "Documentation.Name": "List.Type",
        "Documentation.Description": "表示所有列表的类型。",
        "Documentation.LongDescription": "表示所有列表的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Logical.Type",
      "Documentation": {
        "Documentation.Name": "Logical.Type",
        "Documentation.Description": "表示所有逻辑值的类型。",
        "Documentation.LongDescription": "表示所有逻辑值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "MissingField.Type",
      "Documentation": {
        "Documentation.Name": "MissingField.Type",
        "Documentation.Description": "指定对包含的列数少于预期的行中缺少的值应采取的操作。",
        "Documentation.LongDescription": "指定对包含的列数少于预期的行中缺少的值应采取的操作。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "None.Type",
      "Documentation": {
        "Documentation.Name": "None.Type",
        "Documentation.Description": "None.Type",
        "Documentation.LongDescription": "None.Type",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Null.Type",
      "Documentation": {
        "Documentation.Name": "Null.Type",
        "Documentation.Description": "表示 null 的类型。",
        "Documentation.LongDescription": "表示 null 的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Number.Type",
      "Documentation": {
        "Documentation.Name": "Number.Type",
        "Documentation.Description": "表示所有数字的类型。",
        "Documentation.LongDescription": "表示所有数字的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "ODataOmitValues.Type",
      "Documentation": {
        "Documentation.Name": "ODataOmitValues.Type",
        "Documentation.Description": "指定 OData 服务可以忽略的值种类。",
        "Documentation.LongDescription": "指定 OData 服务可以忽略的值种类。",
        "Documentation.AllowedValues": []
      }
    },
    {
      "Name": "Occurrence.Type",
      "Documentation": {
        "Documentation.Name": "Occurrence.Type",
        "Documentation.Description": "指定序列中元素的出现次数。",
        "Documentation.LongDescription": "指定序列中元素的出现次数。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Order.Type",
      "Documentation": {
        "Documentation.Name": "Order.Type",
        "Documentation.Description": "指定排序方向。",
        "Documentation.LongDescription": "指定排序方向。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "Password.Type",
      "Documentation": {
        "Documentation.Name": "Password.Type",
        "Documentation.Description": "表示文本密码的类型。",
        "Documentation.LongDescription": "表示文本密码的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Percentage.Type",
      "Documentation": {
        "Documentation.Name": "Percentage.Type",
        "Documentation.Description": "表示百分比值的类型。",
        "Documentation.LongDescription": "表示百分比值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "PercentileMode.Type",
      "Documentation": {
        "Documentation.Name": "PercentileMode.Type",
        "Documentation.Description": "指定百分位数模式类型。",
        "Documentation.LongDescription": "指定百分位数模式类型。",
        "Documentation.AllowedValues": [
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "Precision.Type",
      "Documentation": {
        "Documentation.Name": "Precision.Type",
        "Documentation.Description": "指定比较的精度。",
        "Documentation.LongDescription": "指定比较的精度。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "QuoteStyle.Type",
      "Documentation": {
        "Documentation.Name": "QuoteStyle.Type",
        "Documentation.Description": "指定引号样式。",
        "Documentation.LongDescription": "指定引号样式。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RankKind.Type",
      "Documentation": {
        "Documentation.Name": "RankKind.Type",
        "Documentation.Description": "指定排名的类型。",
        "Documentation.LongDescription": "指定排名的类型。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Record.Type",
      "Documentation": {
        "Documentation.Name": "Record.Type",
        "Documentation.Description": "表示所有记录的类型。",
        "Documentation.LongDescription": "表示所有记录的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "RelativePosition.Type",
      "Documentation": {
        "Documentation.Name": "RelativePosition.Type",
        "Documentation.Description": "指示应从输入的开头还是结尾编制索引。",
        "Documentation.AllowedValues": [
          0,
          1
        ]
      }
    },
    {
      "Name": "RoundingMode.Type",
      "Documentation": {
        "Documentation.Name": "RoundingMode.Type",
        "Documentation.Description": "指定当要舍入到的可能值之间存在等同值时的舍入方向。",
        "Documentation.LongDescription": "指定当要舍入到的可能值之间存在等同值时的舍入方向。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4
        ]
      }
    },
    {
      "Name": "SapBusinessWarehouseExecutionMode.Type",
      "Documentation": {
        "Documentation.Name": "SapBusinessWarehouseExecutionMode.Type",
        "Documentation.Description": "有效的 SAP Business Warehouse 执行模式选项。",
        "Documentation.LongDescription": "有效的 SAP Business Warehouse 执行模式选项。",
        "Documentation.AllowedValues": [
          64,
          65,
          66
        ]
      }
    },
    {
      "Name": "SapHanaDistribution.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaDistribution.Type",
        "Documentation.Description": "SAP HANA 分发选项的有效选项。",
        "Documentation.LongDescription": "SAP HANA 分发选项的有效选项。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3
        ]
      }
    },
    {
      "Name": "SapHanaRangeOperator.Type",
      "Documentation": {
        "Documentation.Name": "SapHanaRangeOperator.Type",
        "Documentation.Description": "SAP HANA 范围输入参数的范围运算符。",
        "Documentation.LongDescription": "SAP HANA 范围输入参数的范围运算符。",
        "Documentation.AllowedValues": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    },
    {
      "Name": "Single.Type",
      "Documentation": {
        "Documentation.Name": "Single.Type",
        "Documentation.Description": "表示单精度浮点数的类型。",
        "Documentation.LongDescription": "表示单精度浮点数的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "SparkProtocol.Type",
      "Documentation": {
        "Documentation.Name": "SparkProtocol.Type",
        "Documentation.Description": "连接到 Spark 实例时要使用的协议。",
        "Documentation.AllowedValues": [
          0,
          1,
          2
        ]
      }
    },
    {
      "Name": "Table.Type",
      "Documentation": {
        "Documentation.Name": "Table.Type",
        "Documentation.Description": "表示所有表的类型。",
        "Documentation.LongDescription": "表示所有表的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Text.Type",
      "Documentation": {
        "Documentation.Name": "Text.Type",
        "Documentation.Description": "表示所有文本值的类型。",
        "Documentation.LongDescription": "表示所有文本值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TextEncoding.Type",
      "Documentation": {
        "Documentation.Name": "TextEncoding.Type",
        "Documentation.Description": "指定文本编码类型。",
        "Documentation.LongDescription": "指定文本编码类型。",
        "Documentation.AllowedValues": [
          1200,
          1200,
          1201,
          1252,
          20127,
          65001
        ]
      }
    },
    {
      "Name": "Time.Type",
      "Documentation": {
        "Documentation.Name": "Time.Type",
        "Documentation.Description": "表示所有时间值的类型。",
        "Documentation.LongDescription": "表示所有时间值的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "TraceLevel.Type",
      "Documentation": {
        "Documentation.Name": "TraceLevel.Type",
        "Documentation.Description": "指定跟踪级别。",
        "Documentation.LongDescription": "指定跟踪级别。",
        "Documentation.AllowedValues": [
          1,
          2,
          4,
          8,
          16
        ]
      }
    },
    {
      "Name": "Type.Type",
      "Documentation": {
        "Documentation.Name": "Type.Type",
        "Documentation.Description": "表示所有类型的类型。",
        "Documentation.LongDescription": "表示所有类型的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "Uri.Type",
      "Documentation": {
        "Documentation.Name": "Uri.Type",
        "Documentation.Description": "表示文本 URI 的类型。",
        "Documentation.LongDescription": "表示文本 URI 的类型。",
        "Documentation.Category": "",
        "Documentation.Examples": []
      }
    },
    {
      "Name": "WebMethod.Type",
      "Documentation": {
        "Documentation.Name": "WebMethod.Type",
        "Documentation.Description": "指定 HTTP 方法。",
        "Documentation.LongDescription": "指定 HTTP 方法。",
        "Documentation.AllowedValues": []
      }
    }
  ]
}
